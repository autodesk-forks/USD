<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_dynamic_uv_subtexture_identifier" kind="class" language="C++" prot="public">
    <compoundname>HdStDynamicUvSubtextureIdentifier</compoundname>
    <basecompoundref refid="class_hd_st_subtexture_identifier" prot="public" virt="non-virtual">HdStSubtextureIdentifier</basecompoundref>
    <includes refid="subtexture_identifier_8h" local="no">subtextureIdentifier.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_dynamic_uv_subtexture_identifier_1abd8f55c55ee480032c267df0509d1296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStDynamicUvSubtextureIdentifier</definition>
        <argsstring>()</argsstring>
        <name>HdStDynamicUvSubtextureIdentifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_subtexture_identifier_1a7f821724199283ef6ae8cac188db3861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStDynamicUvSubtextureIdentifier</definition>
        <argsstring>() override</argsstring>
        <name>~HdStDynamicUvSubtextureIdentifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_subtexture_identifier_1a1f28e7cc26dd1d7edd81289379c3c599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API std::unique_ptr&lt; <ref refid="class_hd_st_subtexture_identifier" kindref="compound">HdStSubtextureIdentifier</ref> &gt;</type>
        <definition>HDST_API std::unique_ptr&lt;HdStSubtextureIdentifier&gt; Clone</definition>
        <argsstring>() const override</argsstring>
        <name>Clone</name>
        <reimplements refid="class_hd_st_subtexture_identifier_1af49544adeb8be4e8841163d358aa6c43">Clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_dynamic_uv_subtexture_identifier_1a6c15b6d849fcc7d0fd7fd94a29efcdf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API <ref refid="class_hd_st_dynamic_uv_texture_implementation" kindref="compound">HdStDynamicUvTextureImplementation</ref> *</type>
        <definition>virtual HDST_API HdStDynamicUvTextureImplementation* GetTextureImplementation</definition>
        <argsstring>() const</argsstring>
        <name>GetTextureImplementation</name>
        <briefdescription>
<para>Textures can return their own <ref refid="class_hd_st_dynamic_uv_texture_implementation" kindref="compound">HdStDynamicUvTextureImplementation</ref> to customize the load and commit behavior. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="186" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_st_dynamic_uv_subtexture_identifier_1a551e0c2533c544abb36bd29707937524" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API ID</type>
        <definition>HDST_API ID _Hash</definition>
        <argsstring>() const override</argsstring>
        <name>_Hash</name>
        <reimplements refid="class_hd_st_subtexture_identifier_1a8571a114981ab1f6ac98a5ff79842e39">_Hash</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used as a tag that the Storm texture system returns a <ref refid="class_hd_st_dynamic_uv_texture_object" kindref="compound">HdStDynamicUvTextureObject</ref> that is populated by a client rather than by the Storm texture system. </para>
    </briefdescription>
    <detaileddescription>
<para>Clients can subclass this class and provide their own <ref refid="class_hd_st_dynamic_uv_texture_implementation" kindref="compound">HdStDynamicUvTextureImplementation</ref> to create UV texture with custom load and commit behavior.</para>
<para>testHdStDynamicUvTexture.cpp is an example of how custom load and commit behavior can be implemented.</para>
<para>AOV&apos;s are another example. In presto, these are baked by <ref refid="class_hd_st_dynamic_uv_texture_object" kindref="compound">HdStDynamicUvTextureObject</ref>&apos;s. In this case, the <ref refid="class_hd_st_dynamic_uv_texture_object" kindref="compound">HdStDynamicUvTextureObject</ref>&apos;s do not provide custom load or commit behavior (null-ptr returned by GetTextureImplementation). Instead, GPU memory is allocated by explicitly calling <ref refid="class_hd_st_dynamic_uv_texture_object_1a3001c5f0587b70bb8003b9e46b75c6e2" kindref="member">HdStDynamicUvTextureObject::CreateTexture</ref> in HdStRenderBuffer::Sync/Allocate and the texture is filled by using it as render target in various render passes. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3112">
        <label>HdStDynamicUvSubtextureIdentifier</label>
        <link refid="class_hd_st_dynamic_uv_subtexture_identifier"/>
        <childnode refid="3113" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3113">
        <label>HdStSubtextureIdentifier</label>
        <link refid="class_hd_st_subtexture_identifier"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3114">
        <label>HdStDynamicUvSubtextureIdentifier</label>
        <link refid="class_hd_st_dynamic_uv_subtexture_identifier"/>
        <childnode refid="3115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3115">
        <label>HdStSubtextureIdentifier</label>
        <link refid="class_hd_st_subtexture_identifier"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/subtextureIdentifier.h" line="172" column="1" bodyfile="pxr/imaging/hdSt/subtextureIdentifier.h" bodystart="171" bodyend="191"/>
    <listofallmembers>
      <member refid="class_hd_st_dynamic_uv_subtexture_identifier_1a551e0c2533c544abb36bd29707937524" prot="protected" virt="virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>_Hash</name></member>
      <member refid="class_hd_st_dynamic_uv_subtexture_identifier_1a1f28e7cc26dd1d7edd81289379c3c599" prot="public" virt="virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>Clone</name></member>
      <member refid="class_hd_st_dynamic_uv_subtexture_identifier_1a6c15b6d849fcc7d0fd7fd94a29efcdf5" prot="public" virt="virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>GetTextureImplementation</name></member>
      <member refid="class_hd_st_dynamic_uv_subtexture_identifier_1abd8f55c55ee480032c267df0509d1296" prot="public" virt="non-virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>HdStDynamicUvSubtextureIdentifier</name></member>
      <member refid="class_hd_st_subtexture_identifier_1ae273d2202bff0b49a83c92326b020543" prot="public" virt="non-virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>ID</name></member>
      <member refid="class_hd_st_dynamic_uv_subtexture_identifier_1a7f821724199283ef6ae8cac188db3861" prot="public" virt="non-virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>~HdStDynamicUvSubtextureIdentifier</name></member>
      <member refid="class_hd_st_subtexture_identifier_1a46c2c509ec06e5459e5191751475f122" prot="public" virt="virtual"><scope>HdStDynamicUvSubtextureIdentifier</scope><name>~HdStSubtextureIdentifier</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
