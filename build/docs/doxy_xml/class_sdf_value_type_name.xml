<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_value_type_name" kind="class" language="C++" prot="public">
    <compoundname>SdfValueTypeName</compoundname>
    <includes refid="value_type_name_8h" local="no">valueTypeName.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_value_type_name_1a7202aecfafed6408c5539df3907c53f2" prot="private" static="no" mutable="no">
        <type>const Sdf_ValueTypeImpl *</type>
        <definition>const Sdf_ValueTypeImpl* _impl</definition>
        <argsstring></argsstring>
        <name>_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="217" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_value_type_name_1aef6a72f2572c163f49c19e77627b1778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfValueTypeName</definition>
        <argsstring>()</argsstring>
        <name>SdfValueTypeName</name>
        <briefdescription>
<para>Constructs an invalid type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a7f1e5284da36a816af8fb44cd4e178a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetAsToken</definition>
        <argsstring>() const</argsstring>
        <name>GetAsToken</name>
        <briefdescription>
<para>Returns the type name as a token. </para>
        </briefdescription>
        <detaileddescription>
<para>This should not be used for comparison purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a8ff28c06e22ef4c02b2f14c1939db440" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>SDF_API const TfType&amp; GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
<para>Returns the <computeroutput><ref refid="class_tf_type" kindref="compound">TfType</ref></computeroutput> of the type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1aaf411789c1b1a25c935a0c5bfd2f57fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetCPPTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetCPPTypeName</name>
        <briefdescription>
<para>Returns the C++ type name for this type. </para>
        </briefdescription>
        <detaileddescription>
<para>This may not be the same as the type name returned by <ref refid="class_sdf_value_type_name_1a8ff28c06e22ef4c02b2f14c1939db440" kindref="member">GetType()</ref>.GetTypeName(), since that method may have had additional transformations applied for readability. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a9ac8797971a0514f8451aca554fa4453" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDF_API const TfToken&amp; GetRole</definition>
        <argsstring>() const</argsstring>
        <name>GetRole</name>
        <briefdescription>
<para>Returns the type&apos;s role. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1aac737fac071786c4f567bd0ade3f748f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>SDF_API const VtValue&amp; GetDefaultValue</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultValue</name>
        <briefdescription>
<para>Returns the default value for the type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a9170d554d201cd28b17314b8c64a9bdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
        <definition>SDF_API const TfEnum&amp; GetDefaultUnit</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultUnit</name>
        <briefdescription>
<para>Returns the default unit enum for the type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1aca5c62ee2a7fca18a0fc2cd9e951ccf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName GetScalarType</definition>
        <argsstring>() const</argsstring>
        <name>GetScalarType</name>
        <briefdescription>
<para>Returns the scalar version of this type name if it&apos;s an array type name, otherwise returns this type name. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no scalar type name then this returns the invalid type name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a3caf011b90ce971a028c91ad10fe696d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName GetArrayType</definition>
        <argsstring>() const</argsstring>
        <name>GetArrayType</name>
        <briefdescription>
<para>Returns the array version of this type name if it&apos;s an scalar type name, otherwise returns this type name. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no array type name then this returns the invalid type name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a79e32977ebc5dbc3c2810b86c60e41a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsScalar</definition>
        <argsstring>() const</argsstring>
        <name>IsScalar</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff this type is a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para>The invalid type is considered neither scalar nor array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a0e4d62e3e0a015af7f5ed9ab99976aec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsArray</definition>
        <argsstring>() const</argsstring>
        <name>IsArray</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff this type is an array. </para>
        </briefdescription>
        <detaileddescription>
<para>The invalid type is considered neither scalar nor array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a75a613bdb9846abe519bd16297f064a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="struct_sdf_tuple_dimensions" kindref="compound">SdfTupleDimensions</ref></type>
        <definition>SDF_API SdfTupleDimensions GetDimensions</definition>
        <argsstring>() const</argsstring>
        <name>GetDimensions</name>
        <briefdescription>
<para>Returns the dimensions of the scalar value, e.g. 3 for a 3D point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a5f93d0fd324d65ad0322f0196180b6a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const SdfValueTypeName &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this type name is equal to <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Aliases compare equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1ac95ea605b312f4a771ad7ac6d846e6ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfValueTypeName &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="152" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a172fd7028703a03b9365118f04038515" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const std::string &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this type name is equal to <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Aliases compare equal. Avoid relying on this overload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a88907764135e8147b2bef01ca311a5e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const std::string &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="160" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1aec2e13730ad465fb5e66eef30c1a6449" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const TfToken &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this type name is equal to <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Aliases compare equal. Avoid relying on this overload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1ab5418e6c480e4b3b83ea398b7bb2d0ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TfToken &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="168" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1adfbdfb799dda7294fd8c4ecfe9fa771e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API size_t</type>
        <definition>SDF_API size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Returns a hash value for this type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Explicit bool conversion operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts to <computeroutput>true</computeroutput> if this is a valid, non-empty type, <computeroutput>false</computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="196" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a37d2aeb7c0c3e0a39ae85f037d9bb503" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;TfToken&gt; GetAliasesAsTokens</definition>
        <argsstring>() const</argsstring>
        <name>GetAliasesAsTokens</name>
        <briefdescription>
<para>Returns all aliases of the type name as tokens. </para>
        </briefdescription>
        <detaileddescription>
<para>These should not be used for comparison purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="204" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_value_type_name_1abfaaca30ffbafac725fc8544e34ea50b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const std::string &amp;lhs, const SdfValueTypeName &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="173" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_value_type_name_1af8305137c82c14743524a26ba658d1f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const std::string &amp;lhs, const SdfValueTypeName &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="177" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_value_type_name_1a91e35781fae03f2f58df1479d860d0fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TfToken &amp;lhs, const SdfValueTypeName &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="182" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_value_type_name_1ae2fb9a232ae69f79aa4ecd5c8caab386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TfToken &amp;lhs, const SdfValueTypeName &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="186" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="186" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_value_type_name_1a139e567c292733b6746fa85aa9aefeaa" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfValueTypeName</definition>
        <argsstring>(const Sdf_ValueTypeImpl *)</argsstring>
        <name>SdfValueTypeName</name>
        <param>
          <type>const Sdf_ValueTypeImpl *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_value_type_name_1a0ff7faca2bfba9ff72cfc31f9cb8b92a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool _IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>_IsEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/valueTypeName.h" line="214" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a value type name, i.e. </para>
    </briefdescription>
    <detaileddescription>
<para>an attribute&apos;s type name. Usually, a value type name associates a string with a <computeroutput><ref refid="class_tf_type" kindref="compound">TfType</ref></computeroutput> and an optional role, along with additional metadata. A schema registers all known value type names and may register multiple names for the same <ref refid="class_tf_type" kindref="compound">TfType</ref> and role pair. All name strings for a given pair are collectively called its aliases.</para>
<para>A value type name may also represent just a name string, without a <computeroutput><ref refid="class_tf_type" kindref="compound">TfType</ref></computeroutput>, role or other metadata. This is currently used exclusively to unserialize and re-serialize an attribute&apos;s type name where that name is not known to the schema.</para>
<para>Because value type names can have aliases and those aliases may change in the future, clients should avoid using the value type name&apos;s string representation except to report human readable messages and when serializing. Clients can look up a value type name by string using <computeroutput><ref refid="class_sdf_schema_base_1a36773929cbe4ffa065e441d12330d3ad" kindref="member">SdfSchemaBase::FindType()</ref></computeroutput> and shouldn&apos;t otherwise need the string. Aliases compare equal, even if registered by different schemas. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/valueTypeName.h" line="88" column="1" bodyfile="pxr/usd/sdf/valueTypeName.h" bodystart="87" bodyend="218"/>
    <listofallmembers>
      <member refid="class_sdf_value_type_name_1a7202aecfafed6408c5539df3907c53f2" prot="private" virt="non-virtual"><scope>SdfValueTypeName</scope><name>_impl</name></member>
      <member refid="class_sdf_value_type_name_1a0ff7faca2bfba9ff72cfc31f9cb8b92a" prot="private" virt="non-virtual"><scope>SdfValueTypeName</scope><name>_IsEmpty</name></member>
      <member refid="class_sdf_value_type_name_1a37d2aeb7c0c3e0a39ae85f037d9bb503" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetAliasesAsTokens</name></member>
      <member refid="class_sdf_value_type_name_1a3caf011b90ce971a028c91ad10fe696d" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetArrayType</name></member>
      <member refid="class_sdf_value_type_name_1a7f1e5284da36a816af8fb44cd4e178a0" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetAsToken</name></member>
      <member refid="class_sdf_value_type_name_1aaf411789c1b1a25c935a0c5bfd2f57fe" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetCPPTypeName</name></member>
      <member refid="class_sdf_value_type_name_1a9170d554d201cd28b17314b8c64a9bdf" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetDefaultUnit</name></member>
      <member refid="class_sdf_value_type_name_1aac737fac071786c4f567bd0ade3f748f" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetDefaultValue</name></member>
      <member refid="class_sdf_value_type_name_1a75a613bdb9846abe519bd16297f064a5" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetDimensions</name></member>
      <member refid="class_sdf_value_type_name_1adfbdfb799dda7294fd8c4ecfe9fa771e" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetHash</name></member>
      <member refid="class_sdf_value_type_name_1a9ac8797971a0514f8451aca554fa4453" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetRole</name></member>
      <member refid="class_sdf_value_type_name_1aca5c62ee2a7fca18a0fc2cd9e951ccf2" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetScalarType</name></member>
      <member refid="class_sdf_value_type_name_1a8ff28c06e22ef4c02b2f14c1939db440" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>GetType</name></member>
      <member refid="class_sdf_value_type_name_1a0e4d62e3e0a015af7f5ed9ab99976aec" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>IsArray</name></member>
      <member refid="class_sdf_value_type_name_1a79e32977ebc5dbc3c2810b86c60e41a9" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>IsScalar</name></member>
      <member refid="class_sdf_value_type_name_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator bool</name></member>
      <member refid="class_sdf_value_type_name_1ac95ea605b312f4a771ad7ac6d846e6ba" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator!=</name></member>
      <member refid="class_sdf_value_type_name_1a88907764135e8147b2bef01ca311a5e6" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator!=</name></member>
      <member refid="class_sdf_value_type_name_1ab5418e6c480e4b3b83ea398b7bb2d0ed" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator!=</name></member>
      <member refid="class_sdf_value_type_name_1af8305137c82c14743524a26ba658d1f2" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator!=</name></member>
      <member refid="class_sdf_value_type_name_1ae2fb9a232ae69f79aa4ecd5c8caab386" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator!=</name></member>
      <member refid="class_sdf_value_type_name_1a5f93d0fd324d65ad0322f0196180b6a3" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator==</name></member>
      <member refid="class_sdf_value_type_name_1a172fd7028703a03b9365118f04038515" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator==</name></member>
      <member refid="class_sdf_value_type_name_1aec2e13730ad465fb5e66eef30c1a6449" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator==</name></member>
      <member refid="class_sdf_value_type_name_1abfaaca30ffbafac725fc8544e34ea50b" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator==</name></member>
      <member refid="class_sdf_value_type_name_1a91e35781fae03f2f58df1479d860d0fd" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>operator==</name></member>
      <member refid="class_sdf_value_type_name_1aef6a72f2572c163f49c19e77627b1778" prot="public" virt="non-virtual"><scope>SdfValueTypeName</scope><name>SdfValueTypeName</name></member>
      <member refid="class_sdf_value_type_name_1a139e567c292733b6746fa85aa9aefeaa" prot="private" virt="non-virtual"><scope>SdfValueTypeName</scope><name>SdfValueTypeName</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
