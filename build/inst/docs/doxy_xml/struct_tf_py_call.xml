<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_tf_py_call" kind="class" language="C++" prot="public">
    <compoundname>TfPyCall</compoundname>
    <includes refid="py_call_8h" local="no">pyCall.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Return</declname>
        <defname>Return</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_tf_py_call_1ab8e2a9c24122c6051b587d1f41a400c7" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></type>
        <definition>TfPyObjWrapper _callable</definition>
        <argsstring></argsstring>
        <name>_callable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyCall.h" line="67" column="1" bodyfile="pxr/base/tf/pyCall.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_tf_py_call_1af1d9bffe5b40b0f032debc72acca79bd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfPyCall</definition>
        <argsstring>(TfPyObjWrapper const &amp;c)</argsstring>
        <name>TfPyCall</name>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct with callable <emphasis>c</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructing with a <computeroutput>boost::python::object</computeroutput> works, since those implicitly convert to <computeroutput><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></computeroutput>, however in that case the GIL must be held by the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyCall.h" line="61" column="1" bodyfile="pxr/base/tf/pyCall.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_py_call_1aed30cbfabff4c2784a9b1702e7b8a1e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>Return</type>
        <definition>Return operator()</definition>
        <argsstring>(Args... args)</argsstring>
        <name>operator()</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyCall.h" line="64" column="1" bodyfile="pxr/base/tf/pyCall.h" bodystart="73" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provide a way to call a Python callable. </para>
    </briefdescription>
    <detaileddescription>
<para>Usage is as follows: <programlisting><codeline><highlight class="normal">return<sp/>TfPyCall&lt;RetType&gt;(callable)(arg1,<sp/>arg2,<sp/>...<sp/>argN);</highlight></codeline>
</programlisting> Generally speaking, <ref refid="struct_tf_py_call" kindref="compound">TfPyCall</ref> instances may be copied, assigned, destroyed, and invoked without the client holding the GIL. However, if the <emphasis>Return</emphasis> template parameter is a <emphasis>boost::python::object</emphasis> (or a derived class, such as list or tuple) then the client must hold the GIL in order to invoke the call operator. </para>
    </detaileddescription>
    <location file="pxr/base/tf/pyCall.h" line="57" column="1" bodyfile="pxr/base/tf/pyCall.h" bodystart="57" bodyend="68"/>
    <listofallmembers>
      <member refid="struct_tf_py_call_1ab8e2a9c24122c6051b587d1f41a400c7" prot="private" virt="non-virtual"><scope>TfPyCall</scope><name>_callable</name></member>
      <member refid="struct_tf_py_call_1aed30cbfabff4c2784a9b1702e7b8a1e5" prot="public" virt="non-virtual"><scope>TfPyCall</scope><name>operator()</name></member>
      <member refid="struct_tf_py_call_1af1d9bffe5b40b0f032debc72acca79bd" prot="public" virt="non-virtual"><scope>TfPyCall</scope><name>TfPyCall</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
