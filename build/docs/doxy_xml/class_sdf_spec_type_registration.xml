<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_spec_type_registration" kind="class" language="C++" prot="public">
    <compoundname>SdfSpecTypeRegistration</compoundname>
    <includes refid="spec_type_8h" local="no">specType.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sdf_spec_type_registration_1af32200a75e87b478e689317e0be20539" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SchemaType</type>
          </param>
          <param>
            <type>class SpecType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RegisterSpecType</definition>
        <argsstring>(SdfSpecType specTypeEnum)</argsstring>
        <name>RegisterSpecType</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specTypeEnum</declname>
        </param>
        <briefdescription>
<para>Registers the C++ type T as a concrete spec class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/specType.h" line="61" column="1" bodyfile="pxr/usd/sdf/specType.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_type_registration_1a79f84cdf8414c957bbdbd7edc0b578f6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SchemaType</type>
          </param>
          <param>
            <type>class SpecType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RegisterAbstractSpecType</definition>
        <argsstring>()</argsstring>
        <name>RegisterAbstractSpecType</name>
        <briefdescription>
<para>Registers the C++ type T as an abstract spec class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/specType.h" line="68" column="1" bodyfile="pxr/usd/sdf/specType.h" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_sdf_spec_type_registration_1a5cbe396e36331419a47b4672046598c4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void _RegisterSpecType</definition>
        <argsstring>(const std::type_info &amp;specCPPType, SdfSpecType specEnumType, const std::type_info &amp;schemaType)</argsstring>
        <name>_RegisterSpecType</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>specCPPType</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specEnumType</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/specType.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides functions to register spec types with the runtime typing system used to cast between C++ spec types. </para>
    </briefdescription>
    <detaileddescription>
<para>Implementations of C++ spec types should use as follows:</para>
<para>For a concrete spec type that corresponds to a specific SdfSpecType: <ref refid="registry_manager_8h_1ab1604c7efa4277ed6ee17fddaf70075f" kindref="member">TF_REGISTRY_FUNCTION(SdfSpecTypeRegistration)</ref> { <ref refid="class_sdf_spec_type_registration_1af32200a75e87b478e689317e0be20539" kindref="member">SdfSpecTypeRegistration::RegisterSpecType&lt;MyPrimSpec&gt;()</ref>; }</para>
<para>For an abstract spec type that has no corresponding SdfSpecType: <ref refid="registry_manager_8h_1ab1604c7efa4277ed6ee17fddaf70075f" kindref="member">TF_REGISTRY_FUNCTION(SdfSpecTypeRegistration)</ref> { <ref refid="class_sdf_spec_type_registration_1a79f84cdf8414c957bbdbd7edc0b578f6" kindref="member">SdfSpecTypeRegistration::RegisterAbstractSpecType&lt;MyPropertySpec&gt;()</ref>; } </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/specType.h" line="57" column="1" bodyfile="pxr/usd/sdf/specType.h" bodystart="56" bodyend="79"/>
    <listofallmembers>
      <member refid="class_sdf_spec_type_registration_1a5cbe396e36331419a47b4672046598c4" prot="private" virt="non-virtual"><scope>SdfSpecTypeRegistration</scope><name>_RegisterSpecType</name></member>
      <member refid="class_sdf_spec_type_registration_1a79f84cdf8414c957bbdbd7edc0b578f6" prot="public" virt="non-virtual"><scope>SdfSpecTypeRegistration</scope><name>RegisterAbstractSpecType</name></member>
      <member refid="class_sdf_spec_type_registration_1af32200a75e87b478e689317e0be20539" prot="public" virt="non-virtual"><scope>SdfSpecTypeRegistration</scope><name>RegisterSpecType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
