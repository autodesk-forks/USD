<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="make_py_constructor_8h" kind="file" language="C++">
    <compoundname>makePyConstructor.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes refid="function_traits_8h" local="yes">pxr/base/tf/functionTraits.h</includes>
    <includes refid="ref_ptr_8h" local="yes">pxr/base/tf/refPtr.h</includes>
    <includes refid="weak_ptr_8h" local="yes">pxr/base/tf/weakPtr.h</includes>
    <includes refid="base_2tf_2diagnostic_8h" local="yes">pxr/base/tf/diagnostic.h</includes>
    <includes refid="py_error_8h" local="yes">pxr/base/tf/pyError.h</includes>
    <includes refid="py_identity_8h" local="yes">pxr/base/tf/pyIdentity.h</includes>
    <includes refid="base_2tf_2py_utils_8h" local="yes">pxr/base/tf/pyUtils.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes refid="demangle_8h" local="yes">pxr/base/arch/demangle.h</includes>
    <includes local="no">boost/python/def_visitor.hpp</includes>
    <includes local="no">boost/python/dict.hpp</includes>
    <includes local="no">boost/python/errors.hpp</includes>
    <includes local="no">boost/python/list.hpp</includes>
    <includes local="no">boost/python/object/iterator.hpp</includes>
    <includes local="no">boost/python/raw_function.hpp</includes>
    <includes local="no">boost/python/tuple.hpp</includes>
    <includes local="no">boost/python/type_id.hpp</includes>
    <includes local="no">array</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="64360">
        <label>list</label>
      </node>
      <node id="64337">
        <label>locale</label>
      </node>
      <node id="64325">
        <label>atomic</label>
      </node>
      <node id="64339">
        <label>stdarg.h</label>
      </node>
      <node id="64308">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="64309" relation="include">
        </childnode>
        <childnode refid="64310" relation="include">
        </childnode>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64311" relation="include">
        </childnode>
      </node>
      <node id="64349">
        <label>functional</label>
      </node>
      <node id="64382">
        <label>pxr/base/tf/hashmap.h</label>
        <link refid="hashmap_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64383" relation="include">
        </childnode>
      </node>
      <node id="64290">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64353">
        <label>iterator</label>
      </node>
      <node id="64387">
        <label>boost/python/object/iterator.hpp</label>
      </node>
      <node id="64310">
        <label>cstdint</label>
      </node>
      <node id="64342">
        <label>pxr/base/tf/errorMark.h</label>
        <link refid="error_mark_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64343" relation="include">
        </childnode>
        <childnode refid="64368" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64297">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64298" relation="include">
        </childnode>
        <childnode refid="64305" relation="include">
        </childnode>
        <childnode refid="64322" relation="include">
        </childnode>
        <childnode refid="64323" relation="include">
        </childnode>
        <childnode refid="64326" relation="include">
        </childnode>
        <childnode refid="64328" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
        <childnode refid="64294" relation="include">
        </childnode>
      </node>
      <node id="64336">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64337" relation="include">
        </childnode>
        <childnode refid="64338" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
      </node>
      <node id="64363">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64386">
        <label>boost/python/list.hpp</label>
      </node>
      <node id="64312">
        <label>cmath</label>
      </node>
      <node id="64306">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64300" relation="include">
        </childnode>
        <childnode refid="64307" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64313" relation="include">
        </childnode>
        <childnode refid="64314" relation="include">
        </childnode>
      </node>
      <node id="64376">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="64354">
        <label>numeric</label>
      </node>
      <node id="64323">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64324" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64359">
        <label>cstdarg</label>
      </node>
      <node id="64316">
        <label>string</label>
      </node>
      <node id="64299">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64290" relation="include">
        </childnode>
      </node>
      <node id="64377">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="64365">
        <label>pxr/base/tf/warning.h</label>
        <link refid="warning_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64357" relation="include">
        </childnode>
      </node>
      <node id="64317">
        <label>map</label>
      </node>
      <node id="64309">
        <label>cinttypes</label>
      </node>
      <node id="64288">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="64340">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64335" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
        <childnode refid="64320" relation="include">
        </childnode>
      </node>
      <node id="64366">
        <label>tbb/enumerable_thread_specific.h</label>
      </node>
      <node id="64385">
        <label>boost/python/errors.hpp</label>
      </node>
      <node id="64293">
        <label>pxr/base/tf/meta.h</label>
        <link refid="meta_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64294" relation="include">
        </childnode>
        <childnode refid="64295" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
      </node>
      <node id="64304">
        <label>stddef.h</label>
      </node>
      <node id="64300">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64343">
        <label>pxr/base/tf/diagnosticMgr.h</label>
        <link refid="diagnostic_mgr_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64302" relation="include">
        </childnode>
        <childnode refid="64344" relation="include">
        </childnode>
        <childnode refid="64298" relation="include">
        </childnode>
        <childnode refid="64356" relation="include">
        </childnode>
        <childnode refid="64362" relation="include">
        </childnode>
        <childnode refid="64364" relation="include">
        </childnode>
        <childnode refid="64358" relation="include">
        </childnode>
        <childnode refid="64365" relation="include">
        </childnode>
        <childnode refid="64329" relation="include">
        </childnode>
        <childnode refid="64345" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64303" relation="include">
        </childnode>
        <childnode refid="64366" relation="include">
        </childnode>
        <childnode refid="64367" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
        <childnode refid="64359" relation="include">
        </childnode>
        <childnode refid="64360" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
      </node>
      <node id="64346">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64375">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64376" relation="include">
        </childnode>
        <childnode refid="64377" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
      </node>
      <node id="64324">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
      </node>
      <node id="64326">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
      </node>
      <node id="64331">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64372">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="64363" relation="include">
        </childnode>
        <childnode refid="64337" relation="include">
        </childnode>
        <childnode refid="64373" relation="include">
        </childnode>
      </node>
      <node id="64292">
        <label>pxr/base/tf/functionTraits.h</label>
        <link refid="function_traits_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64293" relation="include">
        </childnode>
        <childnode refid="64294" relation="include">
        </childnode>
        <childnode refid="64295" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
      </node>
      <node id="64367">
        <label>tbb/spin_rw_mutex.h</label>
      </node>
      <node id="64338">
        <label>any</label>
      </node>
      <node id="64356">
        <label>pxr/base/tf/error.h</label>
        <link refid="tf_2error_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64357" relation="include">
        </childnode>
      </node>
      <node id="64378">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="64311">
        <label>sys/types.h</label>
      </node>
      <node id="64350">
        <label>pxr/base/tf/stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64351" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64347" relation="include">
        </childnode>
      </node>
      <node id="64332">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64333" relation="include">
        </childnode>
        <childnode refid="64305" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64330" relation="include">
        </childnode>
        <childnode refid="64340" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
      </node>
      <node id="64345">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64340" relation="include">
        </childnode>
        <childnode refid="64305" relation="include">
        </childnode>
        <childnode refid="64346" relation="include">
        </childnode>
        <childnode refid="64326" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64347" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
      </node>
      <node id="64327">
        <label>typeinfo</label>
      </node>
      <node id="64355">
        <label>cstdio</label>
      </node>
      <node id="64389">
        <label>boost/python/tuple.hpp</label>
      </node>
      <node id="64295">
        <label>tuple</label>
      </node>
      <node id="64329">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64322" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64306" relation="include">
        </childnode>
        <childnode refid="64330" relation="include">
        </childnode>
        <childnode refid="64332" relation="include">
        </childnode>
        <childnode refid="64294" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
      </node>
      <node id="64307">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64312" relation="include">
        </childnode>
      </node>
      <node id="64321">
        <label>vector</label>
      </node>
      <node id="64370">
        <label>pxr/base/tf/pyIdentity.h</label>
        <link refid="py_identity_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64371" relation="include">
        </childnode>
        <childnode refid="64374" relation="include">
        </childnode>
        <childnode refid="64340" relation="include">
        </childnode>
        <childnode refid="64333" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64326" relation="include">
        </childnode>
        <childnode refid="64358" relation="include">
        </childnode>
        <childnode refid="64329" relation="include">
        </childnode>
        <childnode refid="64381" relation="include">
        </childnode>
        <childnode refid="64376" relation="include">
        </childnode>
        <childnode refid="64377" relation="include">
        </childnode>
        <childnode refid="64382" relation="include">
        </childnode>
      </node>
      <node id="64289">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="64290" relation="include">
        </childnode>
      </node>
      <node id="64371">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64372" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64351">
        <label>pxr/base/arch/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64335" relation="include">
        </childnode>
        <childnode refid="64291" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64352" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
        <childnode refid="64353" relation="include">
        </childnode>
        <childnode refid="64354" relation="include">
        </childnode>
      </node>
      <node id="64369">
        <label>boost/python/default_call_policies.hpp</label>
      </node>
      <node id="64379">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="64314">
        <label>utility</label>
      </node>
      <node id="64390">
        <label>array</label>
      </node>
      <node id="64361">
        <label>sstream</label>
      </node>
      <node id="64334">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64335" relation="include">
        </childnode>
        <childnode refid="64303" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
      </node>
      <node id="64384">
        <label>boost/python/def_visitor.hpp</label>
      </node>
      <node id="64322">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64291">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="64344">
        <label>pxr/base/tf/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64306" relation="include">
        </childnode>
        <childnode refid="64345" relation="include">
        </childnode>
        <childnode refid="64346" relation="include">
        </childnode>
        <childnode refid="64348" relation="include">
        </childnode>
        <childnode refid="64350" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
        <childnode refid="64355" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
      </node>
      <node id="64301">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64305">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64306" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64315" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64317" relation="include">
        </childnode>
        <childnode refid="64318" relation="include">
        </childnode>
        <childnode refid="64319" relation="include">
        </childnode>
        <childnode refid="64320" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
        <childnode refid="64314" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
      </node>
      <node id="64313">
        <label>math.h</label>
      </node>
      <node id="64358">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64345" relation="include">
        </childnode>
        <childnode refid="64359" relation="include">
        </childnode>
        <childnode refid="64315" relation="include">
        </childnode>
        <childnode refid="64360" relation="include">
        </childnode>
        <childnode refid="64319" relation="include">
        </childnode>
        <childnode refid="64361" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
      </node>
      <node id="64374">
        <label>pxr/base/tf/pyUtils.h</label>
        <link refid="base_2tf_2py_utils_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64329" relation="include">
        </childnode>
        <childnode refid="64298" relation="include">
        </childnode>
        <childnode refid="64346" relation="include">
        </childnode>
        <childnode refid="64372" relation="include">
        </childnode>
        <childnode refid="64375" relation="include">
        </childnode>
        <childnode refid="64371" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64349" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64321" relation="include">
        </childnode>
        <childnode refid="64378" relation="include">
        </childnode>
        <childnode refid="64379" relation="include">
        </childnode>
        <childnode refid="64376" relation="include">
        </childnode>
        <childnode refid="64377" relation="include">
        </childnode>
        <childnode refid="64380" relation="include">
        </childnode>
      </node>
      <node id="64347">
        <label>iosfwd</label>
      </node>
      <node id="64302">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64303" relation="include">
        </childnode>
        <childnode refid="64304" relation="include">
        </childnode>
      </node>
      <node id="64373">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="64294">
        <label>cstddef</label>
      </node>
      <node id="64362">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64363" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
      </node>
      <node id="64328">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64318" relation="include">
        </childnode>
      </node>
      <node id="64383">
        <label>unordered_map</label>
      </node>
      <node id="64298">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64300" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64302" relation="include">
        </childnode>
        <childnode refid="64304" relation="include">
        </childnode>
      </node>
      <node id="64368">
        <label>pxr/base/tf/errorTransport.h</label>
        <link refid="error_transport_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64343" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
      </node>
      <node id="64341">
        <label>pxr/base/tf/pyError.h</label>
        <link refid="py_error_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64342" relation="include">
        </childnode>
        <childnode refid="64369" relation="include">
        </childnode>
      </node>
      <node id="64296">
        <label>type_traits</label>
      </node>
      <node id="64319">
        <label>set</label>
      </node>
      <node id="64380">
        <label>boost/python/type_id.hpp</label>
      </node>
      <node id="64335">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="64290" relation="include">
        </childnode>
      </node>
      <node id="64388">
        <label>boost/python/raw_function.hpp</label>
      </node>
      <node id="64303">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="64291" relation="include">
        </childnode>
      </node>
      <node id="64352">
        <label>algorithm</label>
      </node>
      <node id="64287">
        <label>pxr/base/tf/makePyConstructor.h</label>
        <link refid="make_py_constructor_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64292" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64329" relation="include">
        </childnode>
        <childnode refid="64333" relation="include">
        </childnode>
        <childnode refid="64341" relation="include">
        </childnode>
        <childnode refid="64370" relation="include">
        </childnode>
        <childnode refid="64374" relation="include">
        </childnode>
        <childnode refid="64358" relation="include">
        </childnode>
        <childnode refid="64340" relation="include">
        </childnode>
        <childnode refid="64384" relation="include">
        </childnode>
        <childnode refid="64378" relation="include">
        </childnode>
        <childnode refid="64385" relation="include">
        </childnode>
        <childnode refid="64386" relation="include">
        </childnode>
        <childnode refid="64387" relation="include">
        </childnode>
        <childnode refid="64388" relation="include">
        </childnode>
        <childnode refid="64389" relation="include">
        </childnode>
        <childnode refid="64380" relation="include">
        </childnode>
        <childnode refid="64390" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
        <childnode refid="64296" relation="include">
        </childnode>
        <childnode refid="64314" relation="include">
        </childnode>
      </node>
      <node id="64315">
        <label>cstring</label>
      </node>
      <node id="64357">
        <label>pxr/base/tf/diagnosticBase.h</label>
        <link refid="diagnostic_base_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64302" relation="include">
        </childnode>
        <childnode refid="64345" relation="include">
        </childnode>
        <childnode refid="64323" relation="include">
        </childnode>
        <childnode refid="64358" relation="include">
        </childnode>
        <childnode refid="64329" relation="include">
        </childnode>
        <childnode refid="64308" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64334" relation="include">
        </childnode>
        <childnode refid="64338" relation="include">
        </childnode>
        <childnode refid="64359" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
      </node>
      <node id="64364">
        <label>pxr/base/tf/status.h</label>
        <link refid="status_8h_source"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64357" relation="include">
        </childnode>
      </node>
      <node id="64330">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64331" relation="include">
        </childnode>
        <childnode refid="64297" relation="include">
        </childnode>
        <childnode refid="64325" relation="include">
        </childnode>
      </node>
      <node id="64318">
        <label>memory</label>
      </node>
      <node id="64348">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64299" relation="include">
        </childnode>
        <childnode refid="64346" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64349" relation="include">
        </childnode>
        <childnode refid="64327" relation="include">
        </childnode>
      </node>
      <node id="64333">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="64288" relation="include">
        </childnode>
        <childnode refid="64334" relation="include">
        </childnode>
        <childnode refid="64298" relation="include">
        </childnode>
        <childnode refid="64289" relation="include">
        </childnode>
        <childnode refid="64301" relation="include">
        </childnode>
        <childnode refid="64336" relation="include">
        </childnode>
        <childnode refid="64304" relation="include">
        </childnode>
        <childnode refid="64339" relation="include">
        </childnode>
        <childnode refid="64316" relation="include">
        </childnode>
      </node>
      <node id="64320">
        <label>typeindex</label>
      </node>
      <node id="64381">
        <label>boost/python/class.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_tf_py_ref_ptr_factory" prot="public">TfPyRefPtrFactory</innerclass>
    <innerclass refid="struct_tf_py_sequence_to_list_ref_ptr_factory" prot="public">TfPySequenceToListRefPtrFactory</innerclass>
    <innerclass refid="struct_tf_py_sequence_to_list_ref_ptr_factory_1_1apply" prot="public">TfPySequenceToListRefPtrFactory::apply</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="make_py_constructor_8h_1af3e6d2db7ca4dd78c098b48d04dbbf05" prot="public" static="no">
        <name>TF_MAX_ARITY</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="33" column="11" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="make_py_constructor_8h_1a085195d024b09d5f4d6900160eff377b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Tf_MakePyConstructor::InitVisitor&lt; typename Tf_MakePyConstructor::InitCtor&lt; T &gt; &gt;</type>
        <definition>Tf_MakePyConstructor::InitVisitor&lt;typename Tf_MakePyConstructor::InitCtor&lt;T&gt; &gt; TfMakePyConstructor</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>TfMakePyConstructor</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="335" column="1" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="make_py_constructor_8h_1a1bf1c1f9a778ad85f54fecc519616027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Tf_MakePyConstructor::InitVisitor&lt; typename Tf_MakePyConstructor::InitCtorWithBackReference&lt; T &gt; &gt;</type>
        <definition>Tf_MakePyConstructor::InitVisitor&lt;typename Tf_MakePyConstructor::InitCtorWithBackReference&lt;T&gt; &gt; TfMakePyConstructorWithBackReference</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>TfMakePyConstructorWithBackReference</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="345" column="1" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="345" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="make_py_constructor_8h_1afd851f43779b3ecbab9ca2acfee6f9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Tf_MakePyConstructor::InitVisitor&lt; typename Tf_MakePyConstructor::InitCtorWithVarArgs&lt; T &gt; &gt;</type>
        <definition>Tf_MakePyConstructor::InitVisitor&lt;typename Tf_MakePyConstructor::InitCtorWithVarArgs&lt;T&gt; &gt; TfMakePyConstructorWithVarArgs</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>TfMakePyConstructorWithVarArgs</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="355" column="1" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="355" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="make_py_constructor_8h_1ad446df75f8620173de45ddfa5eff41f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Tf_MakePyConstructor::NewVisitor&lt; typename Tf_MakePyConstructor::NewCtor&lt; T &gt; &gt;</type>
        <definition>Tf_MakePyConstructor::NewVisitor&lt;typename Tf_MakePyConstructor::NewCtor&lt;T&gt; &gt; TfMakePyNew</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>TfMakePyNew</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="365" column="1" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="make_py_constructor_8h_1aa1fd3803aded9533fbfa4fa616ce5f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Tf_MakePyConstructor::NewVisitor&lt; typename Tf_MakePyConstructor::NewCtorWithClassReference&lt; T &gt; &gt;</type>
        <definition>Tf_MakePyConstructor::NewVisitor&lt;typename Tf_MakePyConstructor::NewCtorWithClassReference&lt;T&gt; &gt; TfMakePyNewWithClassReference</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>TfMakePyNewWithClassReference</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/makePyConstructor.h" line="375" column="1" bodyfile="pxr/base/tf/makePyConstructor.h" bodystart="375" bodyend="380"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An injected constructor mechanism that works with polymorphic wrapped classes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_MAKE_PY_CONSTRUCTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_MAKE_PY_CONSTRUCTOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TF_MAX_ARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TF_MAX_ARITY<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>TF_MAX_ARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/functionTraits.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ref_ptr_8h" kindref="compound">pxr/base/tf/refPtr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="weak_ptr_8h" kindref="compound">pxr/base/tf/weakPtr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2diagnostic_8h" kindref="compound">pxr/base/tf/diagnostic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyIdentity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2py_utils_8h" kindref="compound">pxr/base/tf/pyUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">pxr/base/arch/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/def_visitor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/dict.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/errors.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/object/iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/raw_function.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/type_id.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>wrapping<sp/>objects<sp/>that<sp/>are<sp/>held<sp/>by<sp/>weak<sp/>pointers,<sp/>but<sp/>may<sp/>also<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructed<sp/>from<sp/>script.<sp/><sp/>This<sp/>lets<sp/>one<sp/>construct<sp/>an<sp/>object<sp/>from<sp/>script<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stores<sp/>a<sp/>ref<sp/>pointer<sp/>to<sp/>the<sp/>C++<sp/>object<sp/>inside<sp/>the<sp/>python<sp/>object.<sp/><sp/>This<sp/>way,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>objects<sp/>created<sp/>from<sp/>script<sp/>are<sp/>owned<sp/>by<sp/>script,<sp/>but<sp/>objects<sp/>obtained<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>C++<sp/>API<sp/>cannot<sp/>be<sp/>owned<sp/>by<sp/>script.<sp/><sp/>When<sp/>the<sp/>owning<sp/>python<sp/>object<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>collected,<sp/>its<sp/>ref<sp/>pointer<sp/>will<sp/>go<sp/>away<sp/>and<sp/>the<sp/>C++<sp/>object<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deallocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class_&lt;MyClass,<sp/>MyClassPtr&gt;(&quot;MyClass&quot;,<sp/>no_init)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(TfPyRefAndWeakPtr())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(TfMakePyConstructor(MyClass::New))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TfMakePyConstructorWithVarArgs<sp/>may<sp/>be<sp/>used<sp/>to<sp/>wrap<sp/>an<sp/>object<sp/>so<sp/>that<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>constructed<sp/>with<sp/>a<sp/>variable<sp/>number<sp/>of<sp/>positional<sp/>and<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments.<sp/>The<sp/>last<sp/>two<sp/>arguments<sp/>of<sp/>the<sp/>function<sp/>being<sp/>wrapped<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>a<sp/>boost::python::tuple<sp/>and<sp/>dict.<sp/>These<sp/>will<sp/>contain<sp/>the<sp/>remaining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>positional<sp/>and<sp/>keyword<sp/>args<sp/>after<sp/>required<sp/>arguments<sp/>are<sp/>parsed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>MyObjectRefPtr<sp/>MyObjectFactory(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>formalArg1,<sp/>const<sp/>std::string&amp;<sp/>formalArg2,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>boost::python::tuple&amp;<sp/>args,<sp/>const<sp/>boost::python::dict&amp;<sp/>kwargs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class_&lt;MyClass,<sp/>MyClassPtr&gt;(&quot;MyClass&quot;,<sp/>no_init)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(TfPyRefAndWeakPtr())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(TfMakePyConstructorWithVarArgs(MyObjectFactory))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>.def(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>The<sp/>current<sp/>implementation<sp/>does<sp/>not<sp/>handle<sp/>boost::python::arg<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>specifying<sp/>keywords<sp/>for<sp/>required<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Tf_MakePyConstructor<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bp<sp/>=<sp/>boost::python;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CTOR&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitVisitor<sp/>:<sp/>bp::def_visitor&lt;InitVisitor&lt;CTOR&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bp::def_visitor_access;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>_doc;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>InitVisitor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>:<sp/>_doc(doc)<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>CTOR::template<sp/>init_callable&lt;CLS&gt;(),<sp/>_doc.c_str());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/>Options&amp;<sp/>options)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>we<sp/>ignore<sp/>options.doc()<sp/>in<sp/>favor<sp/>of<sp/>_doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(name,<sp/>CTOR::template<sp/>init_callable&lt;CLS&gt;(options),<sp/>_doc.c_str());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="126"><highlight class="normal">bp::object<sp/>_DummyInit(bp::tuple<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*<sp/>args<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::dict<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*<sp/>kw<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CTOR&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewVisitor<sp/>:<sp/>bp::def_visitor&lt;NewVisitor&lt;CTOR&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bp::def_visitor_access;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>_doc;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>NewVisitor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>:<sp/>_doc(doc)<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>already<sp/>a<sp/>__new__<sp/>method,<sp/>look<sp/>through<sp/>the<sp/>staticmethod<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>underlying<sp/>function,<sp/>replace<sp/>__new__<sp/>with<sp/>that,<sp/>then<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overload,<sp/>and<sp/>recreate<sp/>the<sp/>staticmethod.<sp/><sp/>This<sp/>is<sp/>required<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>python<sp/>needs<sp/>to<sp/>have<sp/>all<sp/>overloads<sp/>exported<sp/>before<sp/>you<sp/>say</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.staticmethod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>looks<sp/>like<sp/>this<sp/>should<sp/>do<sp/>nothing,<sp/>but<sp/>it<sp/>actually<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something!<sp/><sp/>Here&apos;s<sp/>what<sp/>it<sp/>does:<sp/>looking<sp/>up<sp/>__new__<sp/>on<sp/>c<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>produce<sp/>the<sp/>staticmethod<sp/>object<sp/>--<sp/>it<sp/>does<sp/>a<sp/>&quot;descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__get__&quot;<sp/>which<sp/>produces<sp/>the<sp/>underlying<sp/>function.<sp/><sp/>Replacing<sp/>__new__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>that<sp/>underlying<sp/>thing<sp/>has<sp/>the<sp/>effect<sp/>of<sp/>unwrapping<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staticmethod,<sp/>which<sp/>is<sp/>exactly<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_HasAttrString(c.ptr(),<sp/></highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">)<sp/>=<sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">,<sp/>CTOR::template<sp/>__new__&lt;CLS&gt;,<sp/>_doc.c_str());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.staticmethod(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//c.def(&quot;__init__&quot;,<sp/>CTOR::template<sp/>__init__&lt;CLS&gt;,<sp/>_doc.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>bp::raw_function(_DummyInit));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/>Options&amp;<sp/>options)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>already<sp/>a<sp/>__new__<sp/>method,<sp/>look<sp/>through<sp/>the<sp/>staticmethod<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>underlying<sp/>function,<sp/>replace<sp/>__new__<sp/>with<sp/>that,<sp/>then<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overload,<sp/>and<sp/>recreate<sp/>the<sp/>staticmethod.<sp/><sp/>This<sp/>is<sp/>required<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>python<sp/>needs<sp/>to<sp/>have<sp/>all<sp/>overloads<sp/>exported<sp/>before<sp/>you<sp/>say</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.staticmethod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>looks<sp/>like<sp/>this<sp/>should<sp/>do<sp/>nothing,<sp/>but<sp/>it<sp/>actually<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something!<sp/><sp/>Here&apos;s<sp/>what<sp/>it<sp/>does:<sp/>looking<sp/>up<sp/>__new__<sp/>on<sp/>c<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>produce<sp/>the<sp/>staticmethod<sp/>object<sp/>--<sp/>it<sp/>does<sp/>a<sp/>&quot;descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__get__&quot;<sp/>which<sp/>produces<sp/>the<sp/>underlying<sp/>function.<sp/><sp/>Replacing<sp/>__new__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>that<sp/>underlying<sp/>thing<sp/>has<sp/>the<sp/>effect<sp/>of<sp/>unwrapping<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staticmethod,<sp/>which<sp/>is<sp/>exactly<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_HasAttrString(c.ptr(),<sp/></highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">)<sp/>=<sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">,<sp/>CTOR::template<sp/>__new__&lt;CLS&gt;,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>we<sp/>ignore<sp/>options.doc()<sp/>in<sp/>favor<sp/>of<sp/>_doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_doc.c_str(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.keywords(),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.policies()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.staticmethod(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//c.def(&quot;__init__&quot;,<sp/>CTOR::template<sp/>__init__&lt;CLS&gt;,<sp/>_doc.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>bp::raw_function(_DummyInit));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bp::object<sp/>object;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InstallPolicy<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PostInstall(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>{}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialize<sp/>install<sp/>policy<sp/>for<sp/>refptrs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InstallPolicy&lt;<ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(Tf_SupportsUniqueChanged&lt;T&gt;::Value,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>T<sp/>must<sp/>support<sp/>refcount<sp/>unique<sp/>changed<sp/>notification.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PostInstall(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ptr,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*uniqueId)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stash<sp/>a<sp/>self-reference<sp/>ref<sp/>ptr<sp/>into<sp/>the<sp/>python<sp/>object<sp/>that<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>the<sp/>object<sp/>alive.<sp/><sp/>Need<sp/>to<sp/>get<sp/>a<sp/>ref<sp/>ptr<sp/>to<sp/>the<sp/>held<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>that&apos;s<sp/>what&apos;s<sp/>wrapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyAddPythonOwnership(ptr,<sp/>uniqueId,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Install(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t,<sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stick<sp/>the<sp/>weakptr<sp/>into<sp/>the<sp/>python<sp/>object<sp/>self<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::holder<sp/>Holder;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>bp::objects::instance&lt;Holder&gt;<sp/>instance_t;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>InstallPolicy&lt;T&gt;<sp/>Policy;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*memory<sp/>=<sp/>Holder::</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocate(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr(),<sp/>offsetof(instance_t,<sp/>storage),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Holder));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeldType<sp/>held(t);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Holder<sp/>*holder<sp/>=<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(memory)<sp/>Holder(held));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>was<sp/>a<sp/>TfError,<sp/>raise<sp/>that<sp/>back<sp/>to<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TfPyConvertTfErrorsToPythonException(m))</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::throw_error_already_set();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>TfError,<sp/>but<sp/>object<sp/>construction<sp/>failed,<sp/>raise<sp/>a<sp/>generic<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>to<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!held)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a1e839ce3036c43e22fe18e08dbc43e09" kindref="member">TfPyThrowRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>construct<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(HeldType)));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::detail::initialize_wrapper(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr(),<sp/>&amp;(*(held.operator-&gt;())));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holder-&gt;install(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>object<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PySetPythonIdentity(held,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Policy::PostInstall(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>t,<sp/>held.GetUniqueIdentifier());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Holder::deallocate(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.ptr(),<sp/>memory);<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeakPtr,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_RefPtrFactoryConverter<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::remove_reference_t&lt;P&gt;<sp/>Ptr;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertible()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>should<sp/>actually<sp/>check<sp/>here...<sp/><sp/>It&apos;s<sp/>not<sp/>really<sp/>horrible<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>conversion<sp/>will<sp/>fail,<sp/>we&apos;ll<sp/>just<sp/>get<sp/>a<sp/>runtime<sp/>error<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>below<sp/>when<sp/>we<sp/>try<sp/>to<sp/>create<sp/>the<sp/>resulting<sp/>object.<sp/><sp/>That&apos;s<sp/>basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>we<sp/>want<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*operator()(Ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>InstallPolicy&lt;Ptr&gt;<sp/>Policy;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeakPtr<sp/>ptr(static_cast&lt;typename<sp/>WeakPtr::DataType<sp/>*&gt;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(get_pointer(p)));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>resulting<sp/>pointer<sp/>is<sp/>null,<sp/>return<sp/>None.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::incref(Py_None);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>to-python<sp/>converter<sp/>will<sp/>set<sp/>identity<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>result(ptr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Policy::PostInstall(result,<sp/>p,<sp/>ptr.GetUniqueIdentifier());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::incref(result.ptr());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>for<sp/>boost.python<sp/>signature<sp/>generator,<sp/>in<sp/>play<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BOOST_PYTHON_NO_PY_SIGNATURES<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*get_pytype()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::python::objects::registered_class_object(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::type_id&lt;typename<sp/>WeakPtr::DataType&gt;()).get();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeakPtr<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RefPtrFactory<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FactoryResultPtr&gt;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">apply<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>WeakPtrType<sp/>=<sp/>std::conditional_t&lt;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;WeakPtr,<sp/>void&gt;::value,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr&lt;typename FactoryResultPtr::DataType&gt;</ref>,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeakPtr&gt;;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_RefPtrFactoryConverter&lt;WeakPtrType,<sp/>FactoryResultPtr&gt;<sp/>type;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="293"><highlight class="normal">};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXTRA_ARITY<sp/>is<sp/>added<sp/>for<sp/>InitCtorWithVarArgs<sp/>backwards<sp/>compatability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>BOOST_PP<sp/>implementation<sp/>didn&apos;t<sp/>count<sp/>the<sp/>tuple<sp/>and<sp/>dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>against<sp/>the<sp/>arity<sp/>limit<sp/>while<sp/>the<sp/>new<sp/>version<sp/>does.<sp/>A<sp/>future<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>remove<sp/>EXTRA_ARITY<sp/>and<sp/>increase<sp/>TF_MAX_ARITY<sp/>now<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementations<sp/>are<sp/>templated<sp/>and<sp/>no<sp/>longer<sp/>generated<sp/>by<sp/>BOOST_PP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EXTRA_ARITY<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CtorBase<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SIG<sp/>Sig;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Traits<sp/>=<sp/>TfFunctionTraits&lt;SIG*&gt;;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(Traits::Arity<sp/>&lt;=<sp/>(TF_MAX_ARITY<sp/>+<sp/>EXTRA_ARITY));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Sig<sp/>*_func;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetFunc(Sig<sp/>*func)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_func)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_func<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Ctor<sp/>with<sp/>signature<sp/>&apos;%s&apos;<sp/>is<sp/>already<sp/>registered.<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Duplicate<sp/>will<sp/>be<sp/>ignored.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Sig)).c_str());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal">};</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EXTRA_ARITY&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">SIG<sp/>*CtorBase&lt;SIG,<sp/>EXTRA_ARITY&gt;::_func<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtor;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtorWithBackReference;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtorWithVarArgs;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtor;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtorWithClassReference;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="334"><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitCtor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">TfMakePyConstructor(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_MakePyConstructor::InitCtor&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Tf_MakePyConstructor::InitCtor&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="344"><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitCtorWithBackReference&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">TfMakePyConstructorWithBackReference(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_MakePyConstructor::InitCtorWithBackReference&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Tf_MakePyConstructor::InitCtorWithBackReference&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="354"><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitCtorWithVarArgs&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">TfMakePyConstructorWithVarArgs(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_MakePyConstructor::InitCtorWithVarArgs&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::InitVisitor</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Tf_MakePyConstructor::InitCtorWithVarArgs&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">Tf_MakePyConstructor::NewVisitor</highlight></codeline>
<codeline lineno="364"><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::NewCtor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">TfMakePyNew(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_MakePyConstructor::NewCtor&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::NewVisitor</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Tf_MakePyConstructor::NewCtor&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">Tf_MakePyConstructor::NewVisitor</highlight></codeline>
<codeline lineno="374"><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::NewCtorWithClassReference&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">TfMakePyNewWithClassReference(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_MakePyConstructor::NewCtorWithClassReference&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::NewVisitor</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Tf_MakePyConstructor::NewCtorWithClassReference&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TfPyRefPtrFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::RefPtrFactory&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tf_PySequenceToListConverterRefPtrFactory;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="struct_tf_py_sequence_to_list_ref_ptr_factory" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tf_py_sequence_to_list_ref_ptr_factory" kindref="compound">TfPySequenceToListRefPtrFactory</ref><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">apply<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tf_PySequenceToListConverterRefPtrFactory&lt;T&gt;<sp/>type;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XXX:<sp/>would<sp/>be<sp/>nicer<sp/>to<sp/>be<sp/>able<sp/>to<sp/>compose<sp/>converters<sp/>with<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tf_PySequenceToListConverterRefPtrFactory<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::remove_reference_t&lt;T&gt;<sp/>SeqType;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>convertible()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*operator()(T<sp/>seq)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::python;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tf_MakePyConstructor::RefPtrFactory&lt;&gt;::</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply&lt;typename<sp/>SeqType::value_type&gt;::type<sp/>RefPtrFactory;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::list<sp/>l;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SeqType::const_iterator<sp/>i<sp/>=<sp/>seq.begin();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>seq.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.append(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(handle&lt;&gt;(RefPtrFactory()(*i))));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::python::incref(l.ptr());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Required<sp/>for<sp/>boost.python<sp/>signature<sp/>generator,<sp/>in<sp/>play<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BOOST_PYTHON_NO_PY_SIGNATURES<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*get_pytype()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;PyList_Type;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal">};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Tf_MakePyConstructor<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtor&lt;R(Args...)&gt;<sp/>:<sp/>CtorBase&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(Args...)&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>InitCtor(Sig*<sp/>func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable()<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::make_function(__init__&lt;CLS&gt;);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable(Options&amp;<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::make_function(__init__&lt;CLS&gt;,<sp/>o.policies(),<sp/>o.keywords())<sp/>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init__(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Install&lt;CLS&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Base::_func(args...),<sp/>m);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtor&lt;R(Args...)&gt;<sp/>:<sp/>CtorBase&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(Args...)&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>NewCtor(Sig<sp/>*func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>__new__(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&amp;cls,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>r((Base::_func(args...)));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeldType<sp/>h((r));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TfPyConvertTfErrorsToPythonException(m))</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::throw_error_already_set();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::object<sp/>ret<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1a6f2f19ff2808e6c89870e2ee61812185" kindref="member">TfPyObject</ref>(h);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="base_2tf_2py_utils_8h_1a4b4188c0e93926173249aea201501853" kindref="member">TfPyIsNone</ref>(ret))</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a1e839ce3036c43e22fe18e08dbc43e09" kindref="member">TfPyThrowRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>construct<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(HeldType)));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::detail::initialize_wrapper(ret.ptr(),<sp/>get_pointer(h));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>object<sp/>have<sp/>the<sp/>right<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::setattr(ret,<sp/></highlight><highlight class="stringliteral">&quot;__class__&quot;</highlight><highlight class="normal">,<sp/>cls);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstallPolicy&lt;R&gt;::PostInstall(ret,<sp/>r,<sp/>h.GetUniqueIdentifier());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal">};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtorWithVarArgs&lt;R(Args...)&gt;<sp/>:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pad<sp/>the<sp/>arity<sp/>for<sp/>backwards<sp/>compatability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>CtorBase&lt;R(Args...),<sp/></highlight><highlight class="comment">/*EXTRA_ARITY*/</highlight><highlight class="normal"><sp/>2&gt;<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(Args...),<sp/></highlight><highlight class="comment">/*EXTRA_ARITY*/</highlight><highlight class="normal"><sp/>2&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally,<sp/>Arity<sp/>would<sp/>be<sp/>pulled<sp/>from<sp/>Base::Traits,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compilers<sp/>have<sp/>inconsistently<sp/>allowed<sp/>this.<sp/>Redefine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arity<sp/>as<sp/>a<sp/>workaround<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Arity<sp/>=<sp/>TfMetaLength&lt;Args...&gt;;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>InitCtorWithVarArgs(Sig<sp/>*func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert((Arity::value<sp/>&gt;=<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same_v&lt;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::tuple&amp;,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Traits::template<sp/>NthArg&lt;(Arity::value-2)&gt;&gt;)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_same_v&lt;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::dict&amp;,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Traits::template<sp/>NthArg&lt;(Arity::value-1)&gt;&gt;),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InitCtorWithVarArgs<sp/>requires<sp/>a<sp/>function<sp/>of<sp/>form<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(...,<sp/>const<sp/>tuple&amp;,<sp/>const<sp/>dict&amp;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable()<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specify<sp/>min_args<sp/>as<sp/>1<sp/>to<sp/>account<sp/>for<sp/>just<sp/>the<sp/>&apos;self&apos;<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>min_args<sp/>really<sp/>should<sp/>be<sp/>N<sp/>+<sp/>1.<sp/>However,<sp/>we<sp/>want<sp/>to<sp/>do<sp/>this<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ourselves<sp/>later<sp/>so<sp/>we<sp/>can<sp/>emit<sp/>a<sp/>better<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::raw_function(__init__&lt;CLS&gt;,<sp/></highlight><highlight class="comment">/*<sp/>min_args<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>1);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable(Options&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>Note<sp/>ignoring<sp/>options.keywords(),<sp/>current<sp/>implementation<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>that<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::raw_function(</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::make_function(__init__&lt;CLS&gt;,<sp/>options.policies()),</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>min_args<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/>1);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>__init__impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::tuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::dict&amp;<sp/>kwargs,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::index_sequence&lt;I...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>know<sp/>that<sp/>there<sp/>are<sp/>at<sp/>least<sp/>two<sp/>args<sp/>because<sp/>the<sp/>specialization<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>against<sp/>(...,<sp/>*args,<sp/>**kwargs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedNamedArgs<sp/>=<sp/>Arity::value<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self<sp/>is<sp/>included<sp/>in<sp/>the<sp/>tuple,<sp/>so<sp/>it<sp/>should<sp/>always<sp/>be<sp/>at<sp/>least<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>positionalArgs<sp/>=<sp/>bp::len(args)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(positionalArgs<sp/>&lt;<sp/>expectedNamedArgs)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;std::string,<sp/>Arity::value<sp/>-<sp/>2&gt;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionalArgTypes<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bp::type_id&lt;typename<sp/>Base::Traits::template<sp/>NthArg&lt;I&gt;&gt;().name())...</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>joinedTypes<sp/>=<sp/><ref refid="group__group__tf___string_1gacd37bcc74ba568292651ece78d667bb9" kindref="member">TfStringJoin</ref>(</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(positionalArgTypes),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::end(positionalArgTypes),<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!joinedTypes.empty())<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joinedTypes<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>didn&apos;t<sp/>provide<sp/>enough<sp/>positional<sp/>arguments<sp/>for<sp/>the<sp/>factory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function.<sp/>Complain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a9b631ddcf182b86e008d6f13900fc4e3" kindref="member">TfPyThrowTypeError</ref>(</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Arguments<sp/>to<sp/>__init__<sp/>did<sp/>not<sp/>match<sp/>C++<sp/>signature:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t__init__(%s...)&quot;</highlight><highlight class="normal">,<sp/>joinedTypes.c_str()</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::object();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Install&lt;CLS&gt;(</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self<sp/>object<sp/>for<sp/>new<sp/>instance<sp/>is<sp/>the<sp/>first<sp/>arg<sp/>to<sp/>__init__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[0],</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base::_func(</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::extract&lt;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_reference_t&lt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Traits::template<sp/>NthArg&lt;I&gt;&gt;&gt;(args[I<sp/>+<sp/>1])...,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::tuple(args.slice(expectedNamedArgs<sp/>+<sp/>1,<sp/>bp::len(args))),<sp/>kwargs),</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::object();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>__init__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::tuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::dict&amp;<sp/>kwargs)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__init__impl&lt;CLS&gt;(</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>kwargs,<sp/>std::make_index_sequence&lt;Arity::value<sp/>-<sp/>2&gt;());</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal">};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>variant<sp/>of<sp/>Ctor<sp/>which<sp/>includes<sp/>a<sp/>back<sp/>reference<sp/>to<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(the<sp/>Python<sp/>object<sp/>being<sp/>initialized)<sp/>in<sp/>the<sp/>args<sp/>passed<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor.<sp/><sp/>This<sp/>is<sp/>used<sp/>to<sp/>expose<sp/>the<sp/>factory<sp/>methods<sp/>for<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>expect<sp/>to<sp/>subclass<sp/>in<sp/>Python.<sp/><sp/>When<sp/>the<sp/>constructor<sp/>is<sp/>called,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>can<sp/>examine<sp/>self<sp/>and<sp/>initialize<sp/>itself<sp/>appropriately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SelfRef,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InitCtorWithBackReference&lt;R(SelfRef,<sp/>Args...)&gt;<sp/>:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>CtorBase&lt;R(SelfRef,<sp/>Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(SelfRef,<sp/>Args...)&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>InitCtorWithBackReference(Sig<sp/>*func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable()<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::make_function(__init__&lt;CLS&gt;);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>init_callable(Options&amp;<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::make_function(__init__&lt;CLS&gt;,<sp/>o.policies(),<sp/>o.keywords());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__init__(SelfRef<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Install&lt;CLS&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Base::_func(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>args...),<sp/>m);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal">};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ClsRef,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtorWithClassReference&lt;R(ClsRef,<sp/>Args...)&gt;<sp/>:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>CtorBase&lt;R(ClsRef,<sp/>Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(ClsRef,<sp/>Args...)&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>NewCtorWithClassReference(Sig<sp/>*func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>__new__(ClsRef<sp/>cls,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>r(Base::_func(cls,<sp/>args...));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeldType<sp/>h(r);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TfPyConvertTfErrorsToPythonException(m))</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::throw_error_already_set();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::object<sp/>ret<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1a6f2f19ff2808e6c89870e2ee61812185" kindref="member">TfPyObject</ref>(h);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="base_2tf_2py_utils_8h_1a4b4188c0e93926173249aea201501853" kindref="member">TfPyIsNone</ref>(ret))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a1e839ce3036c43e22fe18e08dbc43e09" kindref="member">TfPyThrowRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>construct<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(HeldType)));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::detail::initialize_wrapper(ret.ptr(),<sp/>get_pointer(h));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>object<sp/>have<sp/>the<sp/>right<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::setattr(ret,<sp/></highlight><highlight class="stringliteral">&quot;__class__&quot;</highlight><highlight class="normal">,<sp/>cls);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstallPolicy&lt;R&gt;::PostInstall(ret,<sp/>r,<sp/>h.GetUniqueIdentifier());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal">};</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_MAKE_PY_CONSTRUCTOR_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/makePyConstructor.h"/>
  </compounddef>
</doxygen>
