<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_scoped" kind="class" language="C++" prot="public">
    <compoundname>TfScoped</compoundname>
    <includes refid="scoped_8h" local="no">scoped.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
        <defval>std::function&lt;void ()&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_scoped_1ac046287cdb994ecbd9238022b1a74409" prot="public" static="no">
        <type>T</type>
        <definition>typedef T Procedure</definition>
        <argsstring></argsstring>
        <name>Procedure</name>
        <briefdescription>
<para>The type of the function executed on destruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="56" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_scoped_1a9e30631b10fecd647b6d7db5606d5171" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_scoped_1ac046287cdb994ecbd9238022b1a74409" kindref="member">Procedure</ref></type>
        <definition>Procedure _onExit</definition>
        <argsstring></argsstring>
        <name>_onExit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="68" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_scoped_1a28f1d2d77994c455ceb84a8a1ee9cf36" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfScoped</definition>
        <argsstring>(TfScoped const &amp;)=delete</argsstring>
        <name>TfScoped</name>
        <param>
          <type><ref refid="class_tf_scoped" kindref="compound">TfScoped</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_1a8711a00c64a8f9ca4e32344549b2502a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_scoped" kindref="compound">TfScoped</ref> &amp;</type>
        <definition>TfScoped&amp; operator=</definition>
        <argsstring>(TfScoped const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_scoped" kindref="compound">TfScoped</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_scoped_1a759247df69632f81e82162377c8a7168" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfScoped</definition>
        <argsstring>(const Procedure &amp;leave)</argsstring>
        <name>TfScoped</name>
        <param>
          <type>const <ref refid="class_tf_scoped_1ac046287cdb994ecbd9238022b1a74409" kindref="member">Procedure</ref> &amp;</type>
          <declname>leave</declname>
        </param>
        <briefdescription>
<para>Execute <computeroutput>leave</computeroutput> when this object goes out of scope. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="59" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_1a8d10433d0a8b7015be1466b152266d96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~TfScoped</definition>
        <argsstring>()</argsstring>
        <name>~TfScoped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="61" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="61" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_scoped_1a22c141c33f74d21f21be163696e53af3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* operator new</definition>
        <argsstring>(::std::size_t size)</argsstring>
        <name>operator new</name>
        <param>
          <type>::std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Execute code on exiting scope. </para>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="class_tf_scoped" kindref="compound">TfScoped</ref></computeroutput> executes code when destroyed. It&apos;s useful when cleanup code should be executed when exiting the scope because it gets executed no matter how the scope is exited (e.g. normal execution, return, exceptions, etc).</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>func(bool<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TfScoped<sp/>scope(cleanup);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return<sp/>func2(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>call<sp/>cleanup<sp/>after<sp/>calling<sp/>func2</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/base/tf/scoped.h" line="51" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="51" bodyend="69"/>
    <listofallmembers>
      <member refid="class_tf_scoped_1a9e30631b10fecd647b6d7db5606d5171" prot="private" virt="non-virtual"><scope>TfScoped</scope><name>_onExit</name></member>
      <member refid="class_tf_scoped_1a22c141c33f74d21f21be163696e53af3" prot="private" virt="non-virtual"><scope>TfScoped</scope><name>operator new</name></member>
      <member refid="class_tf_scoped_1a8711a00c64a8f9ca4e32344549b2502a" prot="private" virt="non-virtual"><scope>TfScoped</scope><name>operator=</name></member>
      <member refid="class_tf_scoped_1ac046287cdb994ecbd9238022b1a74409" prot="public" virt="non-virtual"><scope>TfScoped</scope><name>Procedure</name></member>
      <member refid="class_tf_scoped_1a28f1d2d77994c455ceb84a8a1ee9cf36" prot="private" virt="non-virtual"><scope>TfScoped</scope><name>TfScoped</name></member>
      <member refid="class_tf_scoped_1a759247df69632f81e82162377c8a7168" prot="public" virt="non-virtual"><scope>TfScoped</scope><name>TfScoped</name></member>
      <member refid="class_tf_scoped_1a8d10433d0a8b7015be1466b152266d96" prot="public" virt="non-virtual"><scope>TfScoped</scope><name>~TfScoped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
