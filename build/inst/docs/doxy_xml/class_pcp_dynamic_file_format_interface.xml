<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_dynamic_file_format_interface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>PcpDynamicFileFormatInterface</compoundname>
    <includes refid="dynamic_file_format_interface_8h" local="no">dynamicFileFormatInterface.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_dynamic_file_format_interface_1ae4664acd2825272ec078147e2c1eeabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>PCP_API</type>
        <definition>virtual PCP_API ~PcpDynamicFileFormatInterface</definition>
        <argsstring>()</argsstring>
        <name>~PcpDynamicFileFormatInterface</name>
        <briefdescription>
<para>Empty virtual destructor to prevent build errors with some compilers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/dynamicFileFormatInterface.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_dynamic_file_format_interface_1a4af0bb04b1f5f6e5f708ee07892fb090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>PCP_API void</type>
        <definition>virtual PCP_API void ComposeFieldsForFileFormatArguments</definition>
        <argsstring>(const std::string &amp;assetPath, const PcpDynamicFileFormatContext &amp;context, SdfFileFormat::FileFormatArguments *args, VtValue *dependencyContextData) const =0</argsstring>
        <name>ComposeFieldsForFileFormatArguments</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_dynamic_file_format_context" kindref="compound">PcpDynamicFileFormatContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">SdfFileFormat::FileFormatArguments</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>dependencyContextData</declname>
        </param>
        <briefdescription>
<para>Derived classes must implement this function to compose prim metadata fields and/or attribute default values using the given <computeroutput>context</computeroutput> and use them to generate file format arguments for the layer at <computeroutput>assetPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The context provides the methods for composing prim metadata field values and attribute default values at the current point in prim index composition which can be used to generate the relevant file format arguments. In the implementation, these arguments need to be added to the set of file format arguments provided by <computeroutput>args</computeroutput>.</para>
<para>Additionally, implementations can output <computeroutput>dependencyContextData</computeroutput> of any value type that will then be passed back in to calls to CanFieldChangeAffectFileFormatArguments and CanAttributeDefaultValueChangeAffectFileFormatArguments during change processing. This can be used to provide more that context that is specific to the file format when determining whether a field change really does affect the arguments generated by a particular call to this function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/dynamicFileFormatInterface.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_dynamic_file_format_interface_1a1a8d904695c0922ff74507d0afd1df8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>PCP_API bool</type>
        <definition>virtual PCP_API bool CanFieldChangeAffectFileFormatArguments</definition>
        <argsstring>(const TfToken &amp;field, const VtValue &amp;oldValue, const VtValue &amp;newValue, const VtValue &amp;dependencyContextData) const</argsstring>
        <name>CanFieldChangeAffectFileFormatArguments</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>oldValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>newValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>dependencyContextData</declname>
        </param>
        <briefdescription>
<para>Return true if the change to scene description of the field named <computeroutput>field</computeroutput> can affect the dynamic file format arguments generated by ComposeFieldsForFileFormatArguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will be called during change processing to determine whether a change to a field affects the dynamic file format arguments of a payload that a prim index depends on.</para>
<para>The default implementation always returns true, indicating that any value change for a passed in field will require file format arguments to be recomputed. Derived classes can override this function to be more discerning about which changes would truly cause a file format argument update, reducing the number of unnecessary recompositions of dynamic payloads using its file format.</para>
<para><computeroutput>oldValue</computeroutput> and <computeroutput>newValue</computeroutput> contain the old and new values of the field. <computeroutput>dependencyContextData</computeroutput> is the arbitrary typed data that was generated by the call to ComposeFieldsForFileFormatArguments when the payload arc was computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/dynamicFileFormatInterface.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_dynamic_file_format_interface_1aa3776801ea8378314a2e94a238bbd6f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>PCP_API bool</type>
        <definition>virtual PCP_API bool CanAttributeDefaultValueChangeAffectFileFormatArguments</definition>
        <argsstring>(const TfToken &amp;attributeName, const VtValue &amp;oldValue, const VtValue &amp;newValue, const VtValue &amp;dependencyContextData) const</argsstring>
        <name>CanAttributeDefaultValueChangeAffectFileFormatArguments</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attributeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>oldValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>newValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>dependencyContextData</declname>
        </param>
        <briefdescription>
<para>Return true if the change to scene description of the default field for the attribute named <computeroutput>attributeName</computeroutput> can affect the dynamic file format arguments generated by ComposeFieldsForFileFormatArguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will be called during change processing to determine whether a change to a attribute&apos;s default value affects the dynamic file format arguments of a payload that a prim index depends on.</para>
<para>The default implementation always returns true, indicating that any default value change for a passed in attribute will require file format arguments to be recomputed. Derived classes can override this function to be more discerning about which changes would truly cause a file format argument update, reducing the number of unnecessary recompositions of dynamic payloads using its file format.</para>
<para><computeroutput>oldValue</computeroutput> and <computeroutput>newValue</computeroutput> contain the old and new values of the default value field. <computeroutput>dependencyContextData</computeroutput> is the arbitrary typed data that was generated by the call to ComposeFieldsForFileFormatArguments when the payload arc was computed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/dynamicFileFormatInterface.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface mixin that can be included by <ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref> subclasses to enable dynamic file format argument generation for a file format plugin. </para>
    </briefdescription>
    <detaileddescription>
<para>When prim index composition encounters a payload to an asset of a file format that implements this interface, it will call ComposeFieldsForFileFormatArguments to generate arguments from the current composition context at which the payload is being added. The derived file format is on the hook for using the provided context to compute any prim field values it needs and generate the relevant file format arguments for its content. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/dynamicFileFormatInterface.h" line="48" column="1" bodyfile="pxr/usd/pcp/dynamicFileFormatInterface.h" bodystart="47" bodyend="131"/>
    <listofallmembers>
      <member refid="class_pcp_dynamic_file_format_interface_1aa3776801ea8378314a2e94a238bbd6f5" prot="public" virt="virtual"><scope>PcpDynamicFileFormatInterface</scope><name>CanAttributeDefaultValueChangeAffectFileFormatArguments</name></member>
      <member refid="class_pcp_dynamic_file_format_interface_1a1a8d904695c0922ff74507d0afd1df8f" prot="public" virt="virtual"><scope>PcpDynamicFileFormatInterface</scope><name>CanFieldChangeAffectFileFormatArguments</name></member>
      <member refid="class_pcp_dynamic_file_format_interface_1a4af0bb04b1f5f6e5f708ee07892fb090" prot="public" virt="pure-virtual"><scope>PcpDynamicFileFormatInterface</scope><name>ComposeFieldsForFileFormatArguments</name></member>
      <member refid="class_pcp_dynamic_file_format_interface_1ae4664acd2825272ec078147e2c1eeabb" prot="public" virt="virtual"><scope>PcpDynamicFileFormatInterface</scope><name>~PcpDynamicFileFormatInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
