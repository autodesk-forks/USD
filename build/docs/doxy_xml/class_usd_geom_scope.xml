<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_scope" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomScope</compoundname>
    <basecompoundref refid="class_usd_geom_imageable" prot="public" virt="non-virtual">UsdGeomImageable</basecompoundref>
    <includes refid="scope_8h" local="no">scope.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_scope_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="65" column="1" bodyfile="pxr/usd/usdGeom/scope.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_scope_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="143" column="1" bodyfile="pxr/usd/usdGeom/scope.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_scope_1a538339c2aa462ebcf1eb07fed16f9be4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomScope</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomScope</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_scope_1a31d71dad3d26d66290cf63c0388eada4" kindref="member">UsdGeomScope::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="71" column="1" bodyfile="pxr/usd/usdGeom/scope.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_scope_1a1e44a4a4a13902a12e63de85a11594af" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomScope</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomScope</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="79" column="1" bodyfile="pxr/usd/usdGeom/scope.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_scope_1af5b94fe3d415d7eba5c90cf2e8afce51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomScope</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomScope</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_scope_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_scope_1a31d71dad3d26d66290cf63c0388eada4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref></type>
        <definition>static USDGEOM_API UsdGeomScope Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomScope(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_scope_1acdb17fed396719a9a21294ebca0116ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_scope" kindref="compound">UsdGeomScope</ref></type>
        <definition>static USDGEOM_API UsdGeomScope Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_scope_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_imageable_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_scope_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_scope_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_scope_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_imageable_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/scope.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Scope is the simplest grouping primitive, and does not carry the baggage of transformability. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that transforms should inherit down through a Scope successfully - it is just a guaranteed no-op from a transformability perspective. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6468">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6469" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6469">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6470" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6470">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6467">
        <label>UsdGeomScope</label>
        <link refid="class_usd_geom_scope"/>
        <childnode refid="6468" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6472">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6473" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6473">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6474" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6474">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6471">
        <label>UsdGeomScope</label>
        <link refid="class_usd_geom_scope"/>
        <childnode refid="6472" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/scope.h" line="60" column="1" bodyfile="pxr/usd/usdGeom/scope.h" bodystart="59" bodyend="164"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomScope</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_geom_scope_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomScope</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomScope</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_scope_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomScope</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_scope_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomScope</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomScope</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomScope</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_scope_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomScope</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_scope_1acdb17fed396719a9a21294ebca0116ae" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>Define</name></member>
      <member refid="class_usd_geom_scope_1a31d71dad3d26d66290cf63c0388eada4" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>Get</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_scope_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>IsTyped</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_scope_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_scope_1a538339c2aa462ebcf1eb07fed16f9be4" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdGeomScope</name></member>
      <member refid="class_usd_geom_scope_1a1e44a4a4a13902a12e63de85a11594af" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdGeomScope</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_scope_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdGeomScope</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdGeomScope</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_scope_1af5b94fe3d415d7eba5c90cf2e8afce51" prot="public" virt="virtual"><scope>UsdGeomScope</scope><name>~UsdGeomScope</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomScope</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdGeomScope</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
