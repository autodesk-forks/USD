<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_payload" kind="class" language="C++" prot="public">
    <compoundname>SdfPayload</compoundname>
    <includes refid="payload_8h" local="no">payload.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_payload_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _assetPath</definition>
        <argsstring></argsstring>
        <name>_assetPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="142" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_payload_1a78a733f36374bd59db63f4cc98f9cc60" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _primPath</definition>
        <argsstring></argsstring>
        <name>_primPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="145" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_payload_1ae2351f5e7272eb6ef8a60cfa752ee6c3" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SdfLayerOffset _layerOffset</definition>
        <argsstring></argsstring>
        <name>_layerOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="148" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_payload_1a00c15a54384e32dad5a28c24b1a1c4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfPayload</definition>
        <argsstring>(const std::string &amp;assetPath=std::string(), const SdfPath &amp;primPath=SdfPath(), const SdfLayerOffset &amp;layerOffset=SdfLayerOffset())</argsstring>
        <name>SdfPayload</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
          <defval><ref refid="class_sdf_path" kindref="compound">SdfPath</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a payload. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> for what characters are valid in <computeroutput>assetPath</computeroutput>. If <computeroutput>assetPath</computeroutput> contains invalid characters, issue an error and set this payload&apos;s asset path to the empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1abd3402ffb33a7f0a857d67f8ef8bfa24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetAssetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetPath</name>
        <briefdescription>
<para>Returns the asset path of the layer that the payload uses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="71" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a597bda0a5ffcb1da8fb3710afb44c917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetAssetPath</definition>
        <argsstring>(const std::string &amp;assetPath)</argsstring>
        <name>SetAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Sets a new asset path for the layer the payload uses. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> for what characters are valid in <computeroutput>assetPath</computeroutput>. If <computeroutput>assetPath</computeroutput> contains invalid characters, issue an error and set this payload&apos;s asset path to the empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="79" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1ae980898ec578c6f8082717ceac44a11e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>const SdfPath&amp; GetPrimPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimPath</name>
        <briefdescription>
<para>Returns the scene path of the prim for the payload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="86" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a485bc50d4241e8e59ac24c5d745436db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPrimPath</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>SetPrimPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Sets a new prim path for the prim that the payload uses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="91" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a1ceeb51413f68c10a2bd4efc1ba18d33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
        <definition>const SdfLayerOffset&amp; GetLayerOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerOffset</name>
        <briefdescription>
<para>Returns the layer offset associated with the payload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="96" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a4c2cb9b99ee841e1b24c0d0679383e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetLayerOffset</definition>
        <argsstring>(const SdfLayerOffset &amp;layerOffset)</argsstring>
        <name>SetLayerOffset</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
        </param>
        <briefdescription>
<para>Sets a new layer offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="101" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1ac47c625806ab9af088a9244e3277eb90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether this payload equals <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a3e1c31ee431341cacc19cac389c7374d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_payload_1ac47c625806ab9af088a9244e3277eb90" kindref="member">SdfPayload::operator==</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="109" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a54e6a67b80849c9931e4e50a166a2f60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator&lt;</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether this payload is less than <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The meaning of less than is arbitrary but stable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1ab0b8b8ee72b66f27ca8dc1f56dcdd52c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_payload_1a54e6a67b80849c9931e4e50a166a2f60" kindref="member">SdfPayload::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="118" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a648c65df5813ea0045a09adf6c677fea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_payload_1a54e6a67b80849c9931e4e50a166a2f60" kindref="member">SdfPayload::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="123" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_payload_1a89ea7022c9b07818a756c9e6615523c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const SdfPayload &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_payload_1a54e6a67b80849c9931e4e50a166a2f60" kindref="member">SdfPayload::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="128" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="128" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_payload_1a7ee9cb69c2c1aff0af6e21818a530ad8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfPayload &amp;p)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/payload.h" line="133" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="133" bodyend="139"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a payload and all its meta data. </para>
    </briefdescription>
    <detaileddescription>
<para>A payload represents a prim reference to an external layer. A payload is similar to a prim reference (see <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref>) with the major difference that payloads are explicitly loaded by the user.</para>
<para>Unloaded payloads represent a boundary that lazy composition and system behaviors will not traverse across, providing a user-visible way to manage the working set of the scene. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/payload.h" line="58" column="1" bodyfile="pxr/usd/sdf/payload.h" bodystart="58" bodyend="149"/>
    <listofallmembers>
      <member refid="class_sdf_payload_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" virt="non-virtual"><scope>SdfPayload</scope><name>_assetPath</name></member>
      <member refid="class_sdf_payload_1ae2351f5e7272eb6ef8a60cfa752ee6c3" prot="private" virt="non-virtual"><scope>SdfPayload</scope><name>_layerOffset</name></member>
      <member refid="class_sdf_payload_1a78a733f36374bd59db63f4cc98f9cc60" prot="private" virt="non-virtual"><scope>SdfPayload</scope><name>_primPath</name></member>
      <member refid="class_sdf_payload_1abd3402ffb33a7f0a857d67f8ef8bfa24" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>GetAssetPath</name></member>
      <member refid="class_sdf_payload_1a1ceeb51413f68c10a2bd4efc1ba18d33" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>GetLayerOffset</name></member>
      <member refid="class_sdf_payload_1ae980898ec578c6f8082717ceac44a11e" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>GetPrimPath</name></member>
      <member refid="class_sdf_payload_1a7ee9cb69c2c1aff0af6e21818a530ad8" prot="private" virt="non-virtual"><scope>SdfPayload</scope><name>hash_value</name></member>
      <member refid="class_sdf_payload_1a3e1c31ee431341cacc19cac389c7374d" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator!=</name></member>
      <member refid="class_sdf_payload_1a54e6a67b80849c9931e4e50a166a2f60" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_payload_1a648c65df5813ea0045a09adf6c677fea" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_payload_1ac47c625806ab9af088a9244e3277eb90" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator==</name></member>
      <member refid="class_sdf_payload_1ab0b8b8ee72b66f27ca8dc1f56dcdd52c" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_payload_1a89ea7022c9b07818a756c9e6615523c4" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_payload_1a00c15a54384e32dad5a28c24b1a1c4e1" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>SdfPayload</name></member>
      <member refid="class_sdf_payload_1a597bda0a5ffcb1da8fb3710afb44c917" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>SetAssetPath</name></member>
      <member refid="class_sdf_payload_1a4c2cb9b99ee841e1b24c0d0679383e56" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>SetLayerOffset</name></member>
      <member refid="class_sdf_payload_1a485bc50d4241e8e59ac24c5d745436db" prot="public" virt="non-virtual"><scope>SdfPayload</scope><name>SetPrimPath</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
