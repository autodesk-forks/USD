<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_ndr_node_discovery_result" kind="struct" language="C++" prot="public">
    <compoundname>NdrNodeDiscoveryResult</compoundname>
    <includes refid="node_discovery_result_8h" local="no">nodeDiscoveryResult.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1ae9cfec5e18c96ccf53f419e56f8dc493" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref></type>
        <definition>NdrIdentifier identifier</definition>
        <argsstring></argsstring>
        <name>identifier</name>
        <briefdescription>
<para>The node&apos;s identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>How the node is identified. In many cases this will be the name of the file or resource that this node originated from. E.g. &quot;mix_float_2_1&quot;. The identifier must be unique for a given sourceType. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="69" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a1621c34a8ff036822754942abc19eeda" prot="public" static="no" mutable="no">
        <type>NdrVersion</type>
        <definition>NdrVersion version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
<para>The node&apos;s version. </para>
        </briefdescription>
        <detaileddescription>
<para>This may or may not be embedded in the identifier, it&apos;s up to implementations. E.g a node with identifier &quot;mix_float_2_1&quot; might have version 2.1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="74" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a9b45b3e13bd9167aab02e17e08916231" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>The node&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para>A version independent identifier for the node type. This will often embed type parameterization but should not embed the version. E.g a node with identifier &quot;mix_float_2_1&quot; might have name &quot;mix_float&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="82" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a3bf0f09e15b168cc16f891d87ce3228f" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken family</definition>
        <argsstring></argsstring>
        <name>family</name>
        <briefdescription>
<para>The node&apos;s family. </para>
        </briefdescription>
        <detaileddescription>
<para>A node&apos;s family is an optional piece of metadata that specifies a generic grouping of nodes. E.g a node with identifier &quot;mix_float_2_1&quot; might have family &quot;mix&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="89" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a41c30e5aecc790b6ec835bc39a6e2e3b" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken discoveryType</definition>
        <argsstring></argsstring>
        <name>discoveryType</name>
        <briefdescription>
<para>The node&apos;s discovery type. </para>
        </briefdescription>
        <detaileddescription>
<para>The type could be the file extension, or some other type of metadata that can signify a type prior to parsing. See the documentation for <computeroutput><ref refid="class_ndr_parser_plugin" kindref="compound">NdrParserPlugin</ref></computeroutput> and <computeroutput>NdrParserPlugin::DiscoveryTypes</computeroutput> for more information on how this value is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="97" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a956d5db59e34244b2a6abb9a22a5d55b" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken sourceType</definition>
        <argsstring></argsstring>
        <name>sourceType</name>
        <briefdescription>
<para>The node&apos;s source type. </para>
        </briefdescription>
        <detaileddescription>
<para>This type is unique to the parsing plugin (<computeroutput>NdrParserPlugin::SourceType</computeroutput>), and determines the source of the node. See <computeroutput><ref refid="class_ndr_node_1a552a651875e4dbe319770af335913253" kindref="member">NdrNode::GetSourceType()</ref></computeroutput> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="104" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a0b26cd6c56b8561ce83a9eff61dee7c0" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string uri</definition>
        <argsstring></argsstring>
        <name>uri</name>
        <briefdescription>
<para>The node&apos;s origin. </para>
        </briefdescription>
        <detaileddescription>
<para>This may be a filesystem path, a URL pointing to a resource in the cloud, or some other type of resource identifier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="110" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1adb3208323a4756e73fa6e17e2c432fbf" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string resolvedUri</definition>
        <argsstring></argsstring>
        <name>resolvedUri</name>
        <briefdescription>
<para>The node&apos;s fully-resolved URI. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, this might be an absolute path when the original URI was a relative path. In most cases, this is the path that <computeroutput>Ar</computeroutput>&apos;s <computeroutput>Resolve()</computeroutput> returns. In any case, this path should be locally accessible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="118" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a2827e96e0a9ece0b3665f1e167ae9ff1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string sourceCode</definition>
        <argsstring></argsstring>
        <name>sourceCode</name>
        <briefdescription>
<para>The node&apos;s entire source code. </para>
        </briefdescription>
        <detaileddescription>
<para>The source code is parsed (if non-empty) by parser plugins when the resolvedUri value is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="124" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a1f015c74f8a83a360f62abac0158f54b" prot="public" static="no" mutable="no">
        <type>NdrTokenMap</type>
        <definition>NdrTokenMap metadata</definition>
        <argsstring></argsstring>
        <name>metadata</name>
        <briefdescription>
<para>The node&apos;s metadata collected during the discovery process. </para>
        </briefdescription>
        <detaileddescription>
<para>Additional metadata may be present in the node&apos;s source, in the asset pointed to by resolvedUri or in sourceCode (if resolvedUri is empty). In general, parsers should override this data with metadata from the shader source. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="132" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1ae2a0b4af613f636d317da280139649aa" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string blindData</definition>
        <argsstring></argsstring>
        <name>blindData</name>
        <briefdescription>
<para>An optional detail for the parser plugin. </para>
        </briefdescription>
        <detaileddescription>
<para>The parser plugin defines the meaning of this data so the discovery plugin must be written to match. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="137" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_ndr_node_discovery_result_1a0ecbdc20f4336ffe9afe7ed201f78961" prot="public" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken subIdentifier</definition>
        <argsstring></argsstring>
        <name>subIdentifier</name>
        <briefdescription>
<para>The subIdentifier is associated with a particular asset and refers to a specific definition within the asset. </para>
        </briefdescription>
        <detaileddescription>
<para>The asset is the one referred to by <computeroutput><ref refid="class_ndr_registry_1aaadbd8fe1df4f30bb9dd2e2bb0b4970f" kindref="member">NdrRegistry::GetNodeFromAsset()</ref></computeroutput>. The subIdentifier is not needed for all cases where the node definition is not associated with an asset. Even if the node definition is associated with an asset, the subIdentifier is only needed if the asset specifies multiple definitions rather than a single definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="146" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_ndr_node_discovery_result_1a622c7986c2e750ca1c6afaf3082f585a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NdrNodeDiscoveryResult</definition>
        <argsstring>(const NdrIdentifier &amp;identifier, const NdrVersion &amp;version, const std::string &amp;name, const TfToken &amp;family, const TfToken &amp;discoveryType, const TfToken &amp;sourceType, const std::string &amp;uri, const std::string &amp;resolvedUri, const std::string &amp;sourceCode=std::string(), const NdrTokenMap &amp;metadata=NdrTokenMap(), const std::string &amp;blindData=std::string(), const TfToken &amp;subIdentifier=TfToken())</argsstring>
        <name>NdrNodeDiscoveryResult</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const NdrVersion &amp;</type>
          <declname>version</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>discoveryType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sourceType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedUri</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceCode</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
          <defval>NdrTokenMap()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>blindData</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>subIdentifier</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="36" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="36" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the raw data of a node, and some other bits of metadata, that were determined via a <computeroutput><ref refid="class_ndr_discovery_plugin" kindref="compound">NdrDiscoveryPlugin</ref></computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4306">
        <label>NdrNodeDiscoveryResult</label>
        <link refid="struct_ndr_node_discovery_result"/>
        <childnode refid="4307" relation="usage">
          <edgelabel>discoveryType</edgelabel>
          <edgelabel>family</edgelabel>
          <edgelabel>identifier</edgelabel>
          <edgelabel>subIdentifier</edgelabel>
          <edgelabel>sourceType</edgelabel>
        </childnode>
      </node>
      <node id="4307">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/ndr/nodeDiscoveryResult.h" line="34" column="1" bodyfile="pxr/usd/ndr/nodeDiscoveryResult.h" bodystart="34" bodyend="147"/>
    <listofallmembers>
      <member refid="struct_ndr_node_discovery_result_1ae2a0b4af613f636d317da280139649aa" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>blindData</name></member>
      <member refid="struct_ndr_node_discovery_result_1a41c30e5aecc790b6ec835bc39a6e2e3b" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>discoveryType</name></member>
      <member refid="struct_ndr_node_discovery_result_1a3bf0f09e15b168cc16f891d87ce3228f" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>family</name></member>
      <member refid="struct_ndr_node_discovery_result_1ae9cfec5e18c96ccf53f419e56f8dc493" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>identifier</name></member>
      <member refid="struct_ndr_node_discovery_result_1a1f015c74f8a83a360f62abac0158f54b" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>metadata</name></member>
      <member refid="struct_ndr_node_discovery_result_1a9b45b3e13bd9167aab02e17e08916231" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>name</name></member>
      <member refid="struct_ndr_node_discovery_result_1a622c7986c2e750ca1c6afaf3082f585a" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>NdrNodeDiscoveryResult</name></member>
      <member refid="struct_ndr_node_discovery_result_1adb3208323a4756e73fa6e17e2c432fbf" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>resolvedUri</name></member>
      <member refid="struct_ndr_node_discovery_result_1a2827e96e0a9ece0b3665f1e167ae9ff1" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>sourceCode</name></member>
      <member refid="struct_ndr_node_discovery_result_1a956d5db59e34244b2a6abb9a22a5d55b" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>sourceType</name></member>
      <member refid="struct_ndr_node_discovery_result_1a0ecbdc20f4336ffe9afe7ed201f78961" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>subIdentifier</name></member>
      <member refid="struct_ndr_node_discovery_result_1a0b26cd6c56b8561ce83a9eff61dee7c0" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>uri</name></member>
      <member refid="struct_ndr_node_discovery_result_1a1621c34a8ff036822754942abc19eeda" prot="public" virt="non-virtual"><scope>NdrNodeDiscoveryResult</scope><name>version</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
