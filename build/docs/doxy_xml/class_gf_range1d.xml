<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range1d" kind="class" language="C++" prot="public">
    <compoundname>GfRange1d</compoundname>
    <includes refid="range1d_8h" local="no">range1d.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range1d_1a8342bb6f02ca420c737b4a5b5fe084ae" prot="public" static="no">
        <type>double</type>
        <definition>typedef double MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="66" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range1d_1a43c010478d83f5dd60aad3f02efd2d8e" prot="public" static="no">
        <type><ref refid="class_gf_range1d_1a8342bb6f02ca420c737b4a5b5fe084ae" kindref="member">MinMaxType</ref></type>
        <definition>typedef MinMaxType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="69" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range1d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="68" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range1d_1ac8415f02fc5aede487f6e7e24960c0df" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="324" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range1d_1a5c55033519b1a1cdf89d1102d2438234" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="324" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range1d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="73" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a716ba68d2728ee9a7bfa96a3f76e3b94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange1d</definition>
        <argsstring>()</argsstring>
        <name>GfRange1d</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="79" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a26bf0de1a0ee6ddebaf5855c6c190910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange1d</definition>
        <argsstring>(double min, double max)</argsstring>
        <name>GfRange1d</name>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="84" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a6c7b2990fcae601edeb5644554e6a8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange1d</definition>
        <argsstring>(class GfRange1f const &amp;other)</argsstring>
        <name>GfRange1d</name>
        <param>
          <type>class <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a51a80995a7b8a57b286c1bf00b269230" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="95" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a0af16597b29b667c2b2f68285e6c15d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="98" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a60cae1359e0152b07994fa04e045308a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="101" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1acacc89850dcb366622f31bf44cfbfa71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range1d_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="106" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1ac7f60b9674288a77f0cbd876f25e8991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(double min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="112" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1af1582730cfc816d14f23ea6bd2b96e7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(double max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="115" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="118" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a81eca63daa858faad8f94949b89e0e69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(double point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>double</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="124" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a4dfefdf26c2d2be047d695527ea114f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange1d &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="128" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a11bdb702d6db1e669a98762feea4c24d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(double point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>double</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="132" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1aae57827d6f6a9bf547bca39b41e4e1c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange1d &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="139" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a15b8ffe05dd26f1a48b13642bda9ef3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(double point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>double</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1a11bdb702d6db1e669a98762feea4c24d" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="146" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a3c94655848f64a1d2f53321afe6019d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange1d &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1a11bdb702d6db1e669a98762feea4c24d" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="154" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a9985ce1a834d6482c86ff16bcc665ed5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange1d &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="161" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; UnionWith</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="174" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a02d306a54d11c830a9092cd5df7583c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; UnionWith</definition>
        <argsstring>(double b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="181" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a743fc79fa72a242b985f2c389cdd02ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; Union</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="195" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1ae8f2297088d69ed51bb11490b3d86781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; Union</definition>
        <argsstring>(double b)</argsstring>
        <name>Union</name>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="201" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1aca84ec2e9a8ebfbc73d162ff2fcdef2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; IntersectWith</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="221" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a83613543f37e447b213e0460bac9a6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>const GfRange1d&amp; Intersection</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000009"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1aca84ec2e9a8ebfbc73d162ff2fcdef2b" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="230" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a7c4445265ce5d8a1a5424ed286382c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>GfRange1d&amp; operator+=</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="235" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a9826ccedd7520a8f2d9d835fff1f9fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>GfRange1d&amp; operator -=</definition>
        <argsstring>(const GfRange1d &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="242" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a596379932d23ec82cfb60d87988cd694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>GfRange1d&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="249" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="249" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1aa16a166b428722f086894b65885ce386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
        <definition>GfRange1d&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="262" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1aa3afa151e33af16a9a7d1347afceaa44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d operator+</definition>
        <argsstring>(const GfRange1d &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="267" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a32051c46dd2c36a7492264c358be0028" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d operator -</definition>
        <argsstring>(const GfRange1d &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="273" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a81a299df508d89fa53a70d8bc3c33676" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange1d &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="302" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a657c67de9377833e068c1cfe3cac2853" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange1d &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="306" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a701194cfd565d5560e6f7f23992b64f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange1f &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="314" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a34a7fb173b352fc78b7ef643d6329240" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange1f &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="315" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="352" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1ad85b42b7cd011c9ce90f4e37451b2933" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(double p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="319" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range1d_1ac826c330873c6684e3d2881da9c324a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>static GfRange1d GetUnion</definition>
        <argsstring>(const GfRange1d &amp;a, const GfRange1d &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="166" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1ab26641e036edbcc78997a4635086646d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>static GfRange1d Union</definition>
        <argsstring>(const GfRange1d &amp;a, const GfRange1d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1ac826c330873c6684e3d2881da9c324a6" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="189" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a012d0a91a2bb2acf53741a4196e4516f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>static GfRange1d GetIntersection</definition>
        <argsstring>(const GfRange1d &amp;a, const GfRange1d &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="206" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1af34214275ee81d6a965aabeed0c8f42c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>static GfRange1d Intersection</definition>
        <argsstring>(const GfRange1d &amp;a, const GfRange1d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1d_1a012d0a91a2bb2acf53741a4196e4516f" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="215" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="215" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range1d_1a57492beb149c7ab4182178a5f4d0d8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d operator *</definition>
        <argsstring>(double m, const GfRange1d &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="278" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="278" bodyend="282"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1d_1abfd292eb0c31e74f4e26a70060952a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d operator *</definition>
        <argsstring>(const GfRange1d &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="285" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1d_1a5f43491437ca1bfc54a74003d8b6d856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref></type>
        <definition>GfRange1d operator/</definition>
        <argsstring>(const GfRange1d &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="292" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1d_1a97abbbbdaceb0626dffce5c2ce0a8c28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange1d &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="297" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="297" bodyend="299"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range1d_1a82da2059ea611b4cfecf7579f34fd7eb" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(double &amp;dest, double point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type>double &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="327" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1d_1a2d20a53359334e8c758dac8f5d040249" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(double &amp;dest, double point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type>double &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="332" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="332" bodyend="334"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 1-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 1-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <location file="pxr/base/gf/range1d.h" line="62" column="1" bodyfile="pxr/base/gf/range1d.h" bodystart="61" bodyend="335"/>
    <listofallmembers>
      <member refid="class_gf_range1d_1a2d20a53359334e8c758dac8f5d040249" prot="private" virt="non-virtual"><scope>GfRange1d</scope><name>_FindMax</name></member>
      <member refid="class_gf_range1d_1a82da2059ea611b4cfecf7579f34fd7eb" prot="private" virt="non-virtual"><scope>GfRange1d</scope><name>_FindMin</name></member>
      <member refid="class_gf_range1d_1a5c55033519b1a1cdf89d1102d2438234" prot="private" virt="non-virtual"><scope>GfRange1d</scope><name>_max</name></member>
      <member refid="class_gf_range1d_1ac8415f02fc5aede487f6e7e24960c0df" prot="private" virt="non-virtual"><scope>GfRange1d</scope><name>_min</name></member>
      <member refid="class_gf_range1d_1a11bdb702d6db1e669a98762feea4c24d" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Contains</name></member>
      <member refid="class_gf_range1d_1aae57827d6f6a9bf547bca39b41e4e1c9" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Contains</name></member>
      <member refid="class_gf_range1d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>dimension</name></member>
      <member refid="class_gf_range1d_1a81eca63daa858faad8f94949b89e0e69" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range1d_1a4dfefdf26c2d2be047d695527ea114f3" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range1d_1ad85b42b7cd011c9ce90f4e37451b2933" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range1d_1a012d0a91a2bb2acf53741a4196e4516f" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range1d_1a0af16597b29b667c2b2f68285e6c15d2" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetMax</name></member>
      <member refid="class_gf_range1d_1acacc89850dcb366622f31bf44cfbfa71" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range1d_1a51a80995a7b8a57b286c1bf00b269230" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetMin</name></member>
      <member refid="class_gf_range1d_1a60cae1359e0152b07994fa04e045308a" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetSize</name></member>
      <member refid="class_gf_range1d_1ac826c330873c6684e3d2881da9c324a6" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GetUnion</name></member>
      <member refid="class_gf_range1d_1a716ba68d2728ee9a7bfa96a3f76e3b94" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GfRange1d</name></member>
      <member refid="class_gf_range1d_1a26bf0de1a0ee6ddebaf5855c6c190910" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GfRange1d</name></member>
      <member refid="class_gf_range1d_1a6c7b2990fcae601edeb5644554e6a8ca" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>GfRange1d</name></member>
      <member refid="class_gf_range1d_1a97abbbbdaceb0626dffce5c2ce0a8c28" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>hash_value</name></member>
      <member refid="class_gf_range1d_1af34214275ee81d6a965aabeed0c8f42c" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Intersection</name></member>
      <member refid="class_gf_range1d_1a83613543f37e447b213e0460bac9a6e8" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Intersection</name></member>
      <member refid="class_gf_range1d_1aca84ec2e9a8ebfbc73d162ff2fcdef2b" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range1d_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range1d_1a15b8ffe05dd26f1a48b13642bda9ef3c" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>IsInside</name></member>
      <member refid="class_gf_range1d_1a3c94655848f64a1d2f53321afe6019d9" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>IsInside</name></member>
      <member refid="class_gf_range1d_1a9985ce1a834d6482c86ff16bcc665ed5" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>IsOutside</name></member>
      <member refid="class_gf_range1d_1a8342bb6f02ca420c737b4a5b5fe084ae" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range1d_1a657c67de9377833e068c1cfe3cac2853" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator !=</name></member>
      <member refid="class_gf_range1d_1a34a7fb173b352fc78b7ef643d6329240" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator !=</name></member>
      <member refid="class_gf_range1d_1a57492beb149c7ab4182178a5f4d0d8ac" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator *</name></member>
      <member refid="class_gf_range1d_1abfd292eb0c31e74f4e26a70060952a3e" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator *</name></member>
      <member refid="class_gf_range1d_1a596379932d23ec82cfb60d87988cd694" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator *=</name></member>
      <member refid="class_gf_range1d_1a32051c46dd2c36a7492264c358be0028" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator -</name></member>
      <member refid="class_gf_range1d_1a9826ccedd7520a8f2d9d835fff1f9fae" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator -=</name></member>
      <member refid="class_gf_range1d_1aa3afa151e33af16a9a7d1347afceaa44" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator+</name></member>
      <member refid="class_gf_range1d_1a7c4445265ce5d8a1a5424ed286382c37" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator+=</name></member>
      <member refid="class_gf_range1d_1a5f43491437ca1bfc54a74003d8b6d856" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator/</name></member>
      <member refid="class_gf_range1d_1aa16a166b428722f086894b65885ce386" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator/=</name></member>
      <member refid="class_gf_range1d_1a81a299df508d89fa53a70d8bc3c33676" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator==</name></member>
      <member refid="class_gf_range1d_1a701194cfd565d5560e6f7f23992b64f2" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>operator==</name></member>
      <member refid="class_gf_range1d_1a43c010478d83f5dd60aad3f02efd2d8e" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>ScalarType</name></member>
      <member refid="class_gf_range1d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range1d_1af1582730cfc816d14f23ea6bd2b96e7b" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>SetMax</name></member>
      <member refid="class_gf_range1d_1ac7f60b9674288a77f0cbd876f25e8991" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>SetMin</name></member>
      <member refid="class_gf_range1d_1ab26641e036edbcc78997a4635086646d" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Union</name></member>
      <member refid="class_gf_range1d_1a743fc79fa72a242b985f2c389cdd02ef" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Union</name></member>
      <member refid="class_gf_range1d_1ae8f2297088d69ed51bb11490b3d86781" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>Union</name></member>
      <member refid="class_gf_range1d_1af3f3237341f59f7fa1da466697e0ab5d" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>UnionWith</name></member>
      <member refid="class_gf_range1d_1a02d306a54d11c830a9092cd5df7583c8" prot="public" virt="non-virtual"><scope>GfRange1d</scope><name>UnionWith</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
