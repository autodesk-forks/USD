<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_skel_blend_shape_query" kind="class" language="C++" prot="public">
    <compoundname>UsdSkelBlendShapeQuery</compoundname>
    <includes refid="blend_shape_query_8h" local="no">blendShapeQuery.h</includes>
    <innerclass refid="struct_usd_skel_blend_shape_query_1_1___blend_shape" prot="private">UsdSkelBlendShapeQuery::_BlendShape</innerclass>
    <innerclass refid="struct_usd_skel_blend_shape_query_1_1___sub_shape" prot="private">UsdSkelBlendShapeQuery::_SubShape</innerclass>
    <innerclass refid="struct_usd_skel_blend_shape_query_1_1___sub_shape_compare_by_weight" prot="private">UsdSkelBlendShapeQuery::_SubShapeCompareByWeight</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_skel_blend_shape_query_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim _prim</definition>
        <argsstring></argsstring>
        <name>_prim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="217" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_skel_blend_shape_query_1a7cc648d55b1c4ed6eb00228654d724ae" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _SubShape &gt;</type>
        <definition>std::vector&lt;_SubShape&gt; _subShapes</definition>
        <argsstring></argsstring>
        <name>_subShapes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="218" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_skel_blend_shape_query_1a173864a14161b74079ebe0bb87bca738" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _BlendShape &gt;</type>
        <definition>std::vector&lt;_BlendShape&gt; _blendShapes</definition>
        <argsstring></argsstring>
        <name>_blendShapes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="219" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_skel_blend_shape_query_1ab679c5a2810cda2a97fb111f795ee9b5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_usd_skel_inbetween_shape" kindref="compound">UsdSkelInbetweenShape</ref> &gt;</type>
        <definition>std::vector&lt;UsdSkelInbetweenShape&gt; _inbetweens</definition>
        <argsstring></argsstring>
        <name>_inbetweens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="220" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1ae40fa9e500a3f38216edcfd623a00260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdSkelBlendShapeQuery</definition>
        <argsstring>()=default</argsstring>
        <name>UsdSkelBlendShapeQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a4a42da9a6fe9432b3322b27c13075834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API</type>
        <definition>USDSKEL_API UsdSkelBlendShapeQuery</definition>
        <argsstring>(const UsdSkelBindingAPI &amp;binding)</argsstring>
        <name>UsdSkelBlendShapeQuery</name>
        <param>
          <type>const <ref refid="class_usd_skel_binding_a_p_i" kindref="compound">UsdSkelBindingAPI</ref> &amp;</type>
          <declname>binding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Return true if this query is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="58" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Boolean conversion operator. Equivalent to <ref refid="class_usd_skel_blend_shape_query_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">IsValid()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="61" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1ac44ba4d2d2cd5b29ff6b2af537f5940c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
        <definition>const UsdPrim&amp; GetPrim</definition>
        <argsstring>() const</argsstring>
        <name>GetPrim</name>
        <briefdescription>
<para>Returns the prim the blend shapes apply to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="64" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1af18eddc0783655ddf3123a663487b9b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API <ref refid="class_usd_skel_blend_shape" kindref="compound">UsdSkelBlendShape</ref></type>
        <definition>USDSKEL_API UsdSkelBlendShape GetBlendShape</definition>
        <argsstring>(size_t blendShapeIndex) const</argsstring>
        <name>GetBlendShape</name>
        <param>
          <type>size_t</type>
          <declname>blendShapeIndex</declname>
        </param>
        <briefdescription>
<para>Returns the blend shape corresponding to <computeroutput>blendShapeIndex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1acbe3a5f010a07904d47117fe28fc10b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API <ref refid="class_usd_skel_inbetween_shape" kindref="compound">UsdSkelInbetweenShape</ref></type>
        <definition>USDSKEL_API UsdSkelInbetweenShape GetInbetween</definition>
        <argsstring>(size_t subShapeIndex) const</argsstring>
        <name>GetInbetween</name>
        <param>
          <type>size_t</type>
          <declname>subShapeIndex</declname>
        </param>
        <briefdescription>
<para>Returns the inbetween shape corresponding to sub-shape <computeroutput>i</computeroutput>, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a630dabd28e9082665ba13b384381de2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API size_t</type>
        <definition>USDSKEL_API size_t GetBlendShapeIndex</definition>
        <argsstring>(size_t subShapeIndex) const</argsstring>
        <name>GetBlendShapeIndex</name>
        <param>
          <type>size_t</type>
          <declname>subShapeIndex</declname>
        </param>
        <briefdescription>
<para>Returns the blend shape index corresponding to the <computeroutput>i&apos;th</computeroutput> sub-shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a416d703ec9199be40693797f140fb1f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetNumBlendShapes</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBlendShapes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="75" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a0e05e60efde709c040b3bdc2653b4c78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetNumSubShapes</definition>
        <argsstring>() const</argsstring>
        <name>GetNumSubShapes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="77" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a956d9cc16a6caa4fbf7c89e220926c20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API std::vector&lt; VtIntArray &gt;</type>
        <definition>USDSKEL_API std::vector&lt;VtIntArray&gt; ComputeBlendShapePointIndices</definition>
        <argsstring>() const</argsstring>
        <name>ComputeBlendShapePointIndices</name>
        <briefdescription>
<para>Compute an array holding the point indices of all shapes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is indexed by the <emphasis>blendShapeIndices</emphasis> returned by ComputeSubShapes(). Since the <emphasis>pointIndices</emphasis> property of blend shapes is optional, some of the arrays may be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1aa2473e85aea22e8bbd3b0067e9d4d17f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API std::vector&lt; VtVec3fArray &gt;</type>
        <definition>USDSKEL_API std::vector&lt;VtVec3fArray&gt; ComputeSubShapePointOffsets</definition>
        <argsstring>() const</argsstring>
        <name>ComputeSubShapePointOffsets</name>
        <briefdescription>
<para>Compute an array holding the point offsets of all sub-shapes. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes offsets of both primary shapes <ndash/> those stored directly on a BlendShape primitive <ndash/> as well as those of inbetween shapes. This is indexed by the <emphasis>subShapeIndices</emphasis> returned by <ref refid="class_usd_skel_blend_shape_query_1a2c78a075c2bcbcf74d713619f3043019" kindref="member">ComputeSubShapeWeights()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a90398ac33aaa1e4a19af09ef798e214a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API std::vector&lt; VtVec3fArray &gt;</type>
        <definition>USDSKEL_API std::vector&lt;VtVec3fArray&gt; ComputeSubShapeNormalOffsets</definition>
        <argsstring>() const</argsstring>
        <name>ComputeSubShapeNormalOffsets</name>
        <briefdescription>
<para>Compute an array holding the normal offsets of all sub-shapes. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes offsets of both primary shapes <ndash/> those stored directly on a BlendShape primitive <ndash/> as well as those of inbetween shapes. This is indexed by the <emphasis>subShapeIndices</emphasis> returned by <ref refid="class_usd_skel_blend_shape_query_1a2c78a075c2bcbcf74d713619f3043019" kindref="member">ComputeSubShapeWeights()</ref>. Normal offsets are optional. An empty array is stored for shapes that do not specify normal offsets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a2c78a075c2bcbcf74d713619f3043019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API bool</type>
        <definition>USDSKEL_API bool ComputeSubShapeWeights</definition>
        <argsstring>(const TfSpan&lt; const float &gt; &amp;weights, VtFloatArray *subShapeWeights, VtUIntArray *blendShapeIndices, VtUIntArray *subShapeIndices) const</argsstring>
        <name>ComputeSubShapeWeights</name>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const float &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>VtFloatArray *</type>
          <declname>subShapeWeights</declname>
        </param>
        <param>
          <type>VtUIntArray *</type>
          <declname>blendShapeIndices</declname>
        </param>
        <param>
          <type>VtUIntArray *</type>
          <declname>subShapeIndices</declname>
        </param>
        <briefdescription>
<para>Compute the resolved weights for all sub-shapes bound to this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>weights</computeroutput> values are initial weight values, ordered according to the <emphasis>skel:blendShapeTargets</emphasis> relationship of the prim this query is associated with. If there are any inbetween shapes, a new set of weights is computed, providing weighting of the relevant inbetweens.</para>
<para>All computed arrays shared the same size. Elements of the same index identify which sub-shape of which blend shape a given weight value is mapped to. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1aeb6007644fa3ec9bb79d53680b710fa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API bool</type>
        <definition>USDSKEL_API bool ComputeFlattenedSubShapeWeights</definition>
        <argsstring>(const TfSpan&lt; const float &gt; &amp;weights, VtFloatArray *subShapeWeights) const</argsstring>
        <name>ComputeFlattenedSubShapeWeights</name>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const float &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>VtFloatArray *</type>
          <declname>subShapeWeights</declname>
        </param>
        <briefdescription>
<para>Compute a flattened array of weights for all sub-shapes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1aad1e2f6761a947094768c5b024beb581" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API bool</type>
        <definition>USDSKEL_API bool ComputeDeformedPoints</definition>
        <argsstring>(const TfSpan&lt; const float &gt; subShapeWeights, const TfSpan&lt; const unsigned &gt; blendShapeIndices, const TfSpan&lt; const unsigned &gt; subShapeIndices, const std::vector&lt; VtIntArray &gt; &amp;blendShapePointIndices, const std::vector&lt; VtVec3fArray &gt; &amp;subShapePointOffsets, TfSpan&lt; GfVec3f &gt; points) const</argsstring>
        <name>ComputeDeformedPoints</name>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const float &gt;</type>
          <declname>subShapeWeights</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const unsigned &gt;</type>
          <declname>blendShapeIndices</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const unsigned &gt;</type>
          <declname>subShapeIndices</declname>
        </param>
        <param>
          <type>const std::vector&lt; VtIntArray &gt; &amp;</type>
          <declname>blendShapePointIndices</declname>
        </param>
        <param>
          <type>const std::vector&lt; VtVec3fArray &gt; &amp;</type>
          <declname>subShapePointOffsets</declname>
        </param>
        <param>
          <type><ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &gt;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>Deform <computeroutput>points</computeroutput> using the resolved sub-shapes given by <computeroutput>subShapeWeights</computeroutput>, <computeroutput>blendShapeIndices</computeroutput> and <computeroutput>subShapeIndices</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>blendShapePointIndices</computeroutput> and <computeroutput>blendShapePointOffsets</computeroutput> arrays both provide the pre-computed point offsets and indices of each sub-shape, as computed by <ref refid="class_usd_skel_blend_shape_query_1a956d9cc16a6caa4fbf7c89e220926c20" kindref="member">ComputeBlendShapePointIndices()</ref> and <ref refid="class_usd_skel_blend_shape_query_1aa2473e85aea22e8bbd3b0067e9d4d17f" kindref="member">ComputeSubShapePointOffsets()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a980236f2b0b80af7b74b6b0a15ff2400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API bool</type>
        <definition>USDSKEL_API bool ComputeDeformedNormals</definition>
        <argsstring>(const TfSpan&lt; const float &gt; subShapeWeights, const TfSpan&lt; const unsigned &gt; blendShapeIndices, const TfSpan&lt; const unsigned &gt; subShapeIndices, const std::vector&lt; VtIntArray &gt; &amp;blendShapePointIndices, const std::vector&lt; VtVec3fArray &gt; &amp;subShapeNormalOffsets, TfSpan&lt; GfVec3f &gt; noramls) const</argsstring>
        <name>ComputeDeformedNormals</name>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const float &gt;</type>
          <declname>subShapeWeights</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const unsigned &gt;</type>
          <declname>blendShapeIndices</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; const unsigned &gt;</type>
          <declname>subShapeIndices</declname>
        </param>
        <param>
          <type>const std::vector&lt; VtIntArray &gt; &amp;</type>
          <declname>blendShapePointIndices</declname>
        </param>
        <param>
          <type>const std::vector&lt; VtVec3fArray &gt; &amp;</type>
          <declname>subShapeNormalOffsets</declname>
        </param>
        <param>
          <type><ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &gt;</type>
          <declname>noramls</declname>
        </param>
        <briefdescription>
<para>Deform <computeroutput>normals</computeroutput> using the resolved sub-shapes given by <computeroutput>subShapeWeights</computeroutput>, <computeroutput>blendShapeIndices</computeroutput> and <computeroutput>subShapeIndices</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>blendShapePointIndices</computeroutput> and <computeroutput>blendShapeNormalOffsets</computeroutput> arrays both provide the pre-computed normal offsets and indices of each sub-shape, as computed by <ref refid="class_usd_skel_blend_shape_query_1a956d9cc16a6caa4fbf7c89e220926c20" kindref="member">ComputeBlendShapePointIndices()</ref> and <ref refid="class_usd_skel_blend_shape_query_1a90398ac33aaa1e4a19af09ef798e214a" kindref="member">ComputeSubShapeNormalOffsets()</ref>. This is equivalent to <ref refid="class_usd_skel_blend_shape_query_1aad1e2f6761a947094768c5b024beb581" kindref="member">ComputeDeformedPoints()</ref>, except that the resulting points are normalized after deformation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1a1407ea3af2eb510f398c923c09526757" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API bool</type>
        <definition>USDSKEL_API bool ComputePackedShapeTable</definition>
        <argsstring>(VtVec4fArray *offsets, VtVec2iArray *ranges) const</argsstring>
        <name>ComputePackedShapeTable</name>
        <param>
          <type>VtVec4fArray *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>VtVec2iArray *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
<para>Compute a packed shape table combining all sub-shapes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended to help encode blend shapes in a GPU-friendly form. The resulting <computeroutput>offsets</computeroutput> array holds contiguous runs of offsets for every point. The array holds all of the offsets of every blend shape for point 0, followed by the offset of every blend shape for point 1, and so forth. Offsets are stored as a <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref>. The first three components of each offset holds the actual offset value, while the last value holds the sub-shape index, as a float. The sub-shape index can be used to lookup a corresponding weight value in the &apos;subShapeWeights&apos; array returned by ComputeSubShapeWeights. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_skel_blend_shape_query_1ac2f106a8aaf8118daa4fb88d1b193c27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSKEL_API std::string</type>
        <definition>USDSKEL_API std::string GetDescription</definition>
        <argsstring>() const</argsstring>
        <name>GetDescription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="174" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class used to resolve blend shape weights, including inbetweens. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/usdSkel/blendShapeQuery.h" line="50" column="1" bodyfile="pxr/usd/usdSkel/blendShapeQuery.h" bodystart="49" bodyend="221"/>
    <listofallmembers>
      <member refid="class_usd_skel_blend_shape_query_1a173864a14161b74079ebe0bb87bca738" prot="private" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>_blendShapes</name></member>
      <member refid="class_usd_skel_blend_shape_query_1ab679c5a2810cda2a97fb111f795ee9b5" prot="private" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>_inbetweens</name></member>
      <member refid="class_usd_skel_blend_shape_query_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>_prim</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a7cc648d55b1c4ed6eb00228654d724ae" prot="private" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>_subShapes</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a956d9cc16a6caa4fbf7c89e220926c20" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeBlendShapePointIndices</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a980236f2b0b80af7b74b6b0a15ff2400" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeDeformedNormals</name></member>
      <member refid="class_usd_skel_blend_shape_query_1aad1e2f6761a947094768c5b024beb581" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeDeformedPoints</name></member>
      <member refid="class_usd_skel_blend_shape_query_1aeb6007644fa3ec9bb79d53680b710fa3" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeFlattenedSubShapeWeights</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a1407ea3af2eb510f398c923c09526757" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputePackedShapeTable</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a90398ac33aaa1e4a19af09ef798e214a" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeSubShapeNormalOffsets</name></member>
      <member refid="class_usd_skel_blend_shape_query_1aa2473e85aea22e8bbd3b0067e9d4d17f" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeSubShapePointOffsets</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a2c78a075c2bcbcf74d713619f3043019" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>ComputeSubShapeWeights</name></member>
      <member refid="class_usd_skel_blend_shape_query_1af18eddc0783655ddf3123a663487b9b0" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetBlendShape</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a630dabd28e9082665ba13b384381de2a" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetBlendShapeIndex</name></member>
      <member refid="class_usd_skel_blend_shape_query_1ac2f106a8aaf8118daa4fb88d1b193c27" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetDescription</name></member>
      <member refid="class_usd_skel_blend_shape_query_1acbe3a5f010a07904d47117fe28fc10b0" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetInbetween</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a416d703ec9199be40693797f140fb1f6" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetNumBlendShapes</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a0e05e60efde709c040b3bdc2653b4c78" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetNumSubShapes</name></member>
      <member refid="class_usd_skel_blend_shape_query_1ac44ba4d2d2cd5b29ff6b2af537f5940c" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>GetPrim</name></member>
      <member refid="class_usd_skel_blend_shape_query_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>IsValid</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>operator bool</name></member>
      <member refid="class_usd_skel_blend_shape_query_1ae40fa9e500a3f38216edcfd623a00260" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>UsdSkelBlendShapeQuery</name></member>
      <member refid="class_usd_skel_blend_shape_query_1a4a42da9a6fe9432b3322b27c13075834" prot="public" virt="non-virtual"><scope>UsdSkelBlendShapeQuery</scope><name>UsdSkelBlendShapeQuery</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
