<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_prim_index" kind="class" language="C++" prot="public">
    <compoundname>PcpPrimIndex</compoundname>
    <includes refid="prim_index_8h" local="no">primIndex.h</includes>
      <sectiondef kind="user-defined">
      <header>Iteration</header>
      <memberdef kind="function" id="class_pcp_prim_index_1a4d267618f6c48991a1901fc571686555" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API PcpNodeRange</type>
        <definition>PCP_API PcpNodeRange GetNodeRange</definition>
        <argsstring>(PcpRangeType rangeType=PcpRangeTypeAll) const</argsstring>
        <name>GetNodeRange</name>
        <param>
          <type>PcpRangeType</type>
          <declname>rangeType</declname>
          <defval>PcpRangeTypeAll</defval>
        </param>
        <briefdescription>
<para>Returns range of iterators that encompass all children of the root node with the given arc type as well as their descendants, in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, this returns a range encompassing the entire index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a761b2fb8a6530553ff9d8d08380c6bdd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PCP_API PcpNodeIterator GetNodeIteratorAtNode</definition>
        <argsstring>(const PcpNodeRef &amp;node) const</argsstring>
        <name>GetNodeIteratorAtNode</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Returns the node iterator that points to the given <computeroutput>node</computeroutput> if the node is in the prim index graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the end of the node range if the node is not contained in this prim index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a05b9b48f6f77e5b9e3e997790d4fb7f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API PcpNodeRange</type>
        <definition>PCP_API PcpNodeRange GetNodeSubtreeRange</definition>
        <argsstring>(const PcpNodeRef &amp;node) const</argsstring>
        <name>GetNodeSubtreeRange</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Returns range of iterators that encompass the given <computeroutput>node</computeroutput> and all of its descendants in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1aea830735204d7e0f367a07f730687317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API PcpPrimRange</type>
        <definition>PCP_API PcpPrimRange GetPrimRange</definition>
        <argsstring>(PcpRangeType rangeType=PcpRangeTypeAll) const</argsstring>
        <name>GetPrimRange</name>
        <param>
          <type>PcpRangeType</type>
          <declname>rangeType</declname>
          <defval>PcpRangeTypeAll</defval>
        </param>
        <briefdescription>
<para>Returns range of iterators that encompasses all prims, in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a06d0d3ef0bc825ca5579134621bf1c44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API PcpPrimRange</type>
        <definition>PCP_API PcpPrimRange GetPrimRangeForNode</definition>
        <argsstring>(const PcpNodeRef &amp;node) const</argsstring>
        <name>GetPrimRangeForNode</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Returns range of iterators that encompasses all prims from the site of <computeroutput>node</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>node</computeroutput> must belong to this prim index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="184" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Lookup</header>
      <memberdef kind="function" id="class_pcp_prim_index_1a7c5ac5968652a9217f1175a52e56d0b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetNodeProvidingSpec</definition>
        <argsstring>(const SdfPrimSpecHandle &amp;primSpec) const</argsstring>
        <name>GetNodeProvidingSpec</name>
        <param>
          <type>const SdfPrimSpecHandle &amp;</type>
          <declname>primSpec</declname>
        </param>
        <briefdescription>
<para>Returns the node that brings opinions from <computeroutput>primSpec</computeroutput> into this prim index. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such node exists, returns an invalid <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a7b639c1d1297e4d3035d027b595594a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetNodeProvidingSpec</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfPath &amp;path) const</argsstring>
        <name>GetNodeProvidingSpec</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the node that brings opinions from the Sd prim spec at <computeroutput>layer</computeroutput> and <computeroutput>path</computeroutput> into this prim index. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such node exists, returns an invalid <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Diagnostics</header>
      <memberdef kind="function" id="class_pcp_prim_index_1a91f65b03ae904c26c54630aef3eb53a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PcpErrorVector</type>
        <definition>PcpErrorVector GetLocalErrors</definition>
        <argsstring>() const</argsstring>
        <name>GetLocalErrors</name>
        <briefdescription>
<para>Return the list of errors local to this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="209" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1ae930cda55ec639abd1e9e723553b9a0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void PrintStatistics</definition>
        <argsstring>() const</argsstring>
        <name>PrintStatistics</name>
        <briefdescription>
<para>Prints various statistics about this prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a04007d783df319a8101b20e99bbdddd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API std::string</type>
        <definition>PCP_API std::string DumpToString</definition>
        <argsstring>(bool includeInheritOriginInfo=true, bool includeMaps=true) const</argsstring>
        <name>DumpToString</name>
        <param>
          <type>bool</type>
          <declname>includeInheritOriginInfo</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>includeMaps</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Dump the prim index contents to a string. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>includeInheritOriginInfo</computeroutput> is <computeroutput>true</computeroutput>, output for implied inherit nodes will include information about the originating inherit node. If <computeroutput>includeMaps</computeroutput> is <computeroutput>true</computeroutput>, output for each node will include the mappings to the parent and root node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a354744c0f0132f3be40ba4d0b85c966d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void DumpToDotGraph</definition>
        <argsstring>(const std::string &amp;filename, bool includeInheritOriginInfo=true, bool includeMaps=false) const</argsstring>
        <name>DumpToDotGraph</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeInheritOriginInfo</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>includeMaps</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Dump the prim index in dot format to the file named <computeroutput>filename</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See Dump(...) for information regarding arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="231" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Derived computations</header>
      <memberdef kind="function" id="class_pcp_prim_index_1a432009bf5b9cb9f85c17107babdae363" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void ComputePrimChildNames</definition>
        <argsstring>(TfTokenVector *nameOrder, PcpTokenSet *prohibitedNameSet) const</argsstring>
        <name>ComputePrimChildNames</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> *</type>
          <declname>nameOrder</declname>
        </param>
        <param>
          <type><ref refid="classpxr__tsl_1_1robin__set" kindref="compound">PcpTokenSet</ref> *</type>
          <declname>prohibitedNameSet</declname>
        </param>
        <briefdescription>
<para>Compute the prim child names for the given path. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>errors</computeroutput> will contain any errors encountered while performing this operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a2b3ea427ecfffbe9219ee83f78bbafbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void ComputePrimPropertyNames</definition>
        <argsstring>(TfTokenVector *nameOrder) const</argsstring>
        <name>ComputePrimPropertyNames</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> *</type>
          <declname>nameOrder</declname>
        </param>
        <briefdescription>
<para>Compute the prim property names for the given path. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>errors</computeroutput> will contain any errors encountered while performing this operation. The <computeroutput>nameOrder</computeroutput> vector must not contain any duplicate entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a75a6357d82cfb07c8f273c779fe6623f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="usd_2sdf_2types_8h_1a9ab887757f82b67df655862e95223c21" kindref="member">SdfVariantSelectionMap</ref></type>
        <definition>PCP_API SdfVariantSelectionMap ComposeAuthoredVariantSelections</definition>
        <argsstring>() const</argsstring>
        <name>ComposeAuthoredVariantSelections</name>
        <briefdescription>
<para>Compose the authored prim variant selections. </para>
        </briefdescription>
        <detaileddescription>
<para>These are the variant selections expressed in scene description. Note that these selections may not have actually been applied, if they are invalid.</para>
<para><simplesect kind="note"><para>This result is not cached, but computed each time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1abc750dab08a633cc77cf16fab16368a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API std::string</type>
        <definition>PCP_API std::string GetSelectionAppliedForVariantSet</definition>
        <argsstring>(const std::string &amp;variantSet) const</argsstring>
        <name>GetSelectionAppliedForVariantSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSet</declname>
        </param>
        <briefdescription>
<para>Return the variant selection applied for the named variant set. </para>
        </briefdescription>
        <detaileddescription>
<para>If none was applied, this returns an empty string. This can be different from the authored variant selection; for example, if the authored selection is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="269" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_prim_index_1a4ed4b80806509fdf21834e36d9305841" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PcpPrimIterator</definition>
        <argsstring></argsstring>
        <name>PcpPrimIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="275" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_prim_index_1a95d02db2908f18af89a6a9f065480fd4" prot="private" static="no" mutable="no">
        <type>PcpPrimIndex_GraphRefPtr</type>
        <definition>PcpPrimIndex_GraphRefPtr _graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="281" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_prim_index_1a1c03db967a3f47a6af43dc85eca5c3fc" prot="private" static="no" mutable="no">
        <type>Pcp_CompressedSdSiteVector</type>
        <definition>Pcp_CompressedSdSiteVector _primStack</definition>
        <argsstring></argsstring>
        <name>_primStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="285" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_prim_index_1a66f940131be4626a3dc47fe8ca70f4d4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; PcpErrorVector &gt;</type>
        <definition>std::unique_ptr&lt;PcpErrorVector&gt; _localErrors</definition>
        <argsstring></argsstring>
        <name>_localErrors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="289" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_prim_index_1a1e6d0cd691e9e0225e05d636b767e189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPrimIndex</definition>
        <argsstring>()</argsstring>
        <name>PcpPrimIndex</name>
        <briefdescription>
<para>Default construct an empty, invalid prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a962fbd604d06c9c27ea0a2d16a96cc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPrimIndex</definition>
        <argsstring>(const PcpPrimIndex &amp;rhs)</argsstring>
        <name>PcpPrimIndex</name>
        <param>
          <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy-construct a prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a0bb26435939de6d190b671dccc393d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpPrimIndex</definition>
        <argsstring>(PcpPrimIndex &amp;&amp;rhs) noexcept=default</argsstring>
        <name>PcpPrimIndex</name>
        <param>
          <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move-construction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a468da92d9155eddfe3c313d028118f1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
        <definition>PcpPrimIndex&amp; operator=</definition>
        <argsstring>(const PcpPrimIndex &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="92" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a21a257d10b1c477189a8237fd38468c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
        <definition>PcpPrimIndex&amp; operator=</definition>
        <argsstring>(PcpPrimIndex &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1aeda879e8112f988ece3f58a30b9666a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void Swap</definition>
        <argsstring>(PcpPrimIndex &amp;rhs)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this prim index with <computeroutput>index</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a0cef67d60cf172f92993b2acfc350b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(PcpPrimIndex &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="class_pcp_prim_index_1aeda879e8112f988ece3f58a30b9666a3" kindref="member">Swap()</ref>, but standard name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="105" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Return true if this index is valid. </para>
        </briefdescription>
        <detaileddescription>
<para>A default-constructed index is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="109" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a325f1657290f2971c8d4b8be2f3e8593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetGraph</definition>
        <argsstring>(const PcpPrimIndex_GraphRefPtr &amp;graph)</argsstring>
        <name>SetGraph</name>
        <param>
          <type>const PcpPrimIndex_GraphRefPtr &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="111" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1aa312649c84ae41277a6d5bb28d66171f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const PcpPrimIndex_GraphRefPtr &amp;</type>
        <definition>const PcpPrimIndex_GraphRefPtr&amp; GetGraph</definition>
        <argsstring>() const</argsstring>
        <name>GetGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="115" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a2cc548787f6de2f3340d7d0b2d0dcd3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetRootNode</definition>
        <argsstring>() const</argsstring>
        <name>GetRootNode</name>
        <briefdescription>
<para>Returns the root node of the prim index graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a36e57a6bd937d8527230be84579da695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>PCP_API const SdfPath&amp; GetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the path of the prim whose opinions are represented by this prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a9f7f20453dbe22c650ab9d89bb41015f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasSpecs</definition>
        <argsstring>() const</argsstring>
        <name>HasSpecs</name>
        <briefdescription>
<para>Returns true if this prim index contains any scene description opinions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a0e0b494663d8535b9f20266cd7b3ee62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasAnyPayloads</definition>
        <argsstring>() const</argsstring>
        <name>HasAnyPayloads</name>
        <briefdescription>
<para>Returns true if the prim has any authored payload arcs. </para>
        </briefdescription>
        <detaileddescription>
<para>The payload contents are only resolved and included if this prim&apos;s path is in the payload inclusion set provided in <ref refid="class_pcp_prim_index_inputs" kindref="compound">PcpPrimIndexInputs</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a959d34686e5ba4df5f776be6e5efd86f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsUsd</definition>
        <argsstring>() const</argsstring>
        <name>IsUsd</name>
        <briefdescription>
<para>Returns true if this prim index was composed in USD mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_pcp_cache_1a959d34686e5ba4df5f776be6e5efd86f" kindref="member">PcpCache::IsUsd()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_index_1a0318502f9c8bf061d7b463cb1f8f76a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsInstanceable</definition>
        <argsstring>() const</argsstring>
        <name>IsInstanceable</name>
        <briefdescription>
<para>Returns true if this prim index is instanceable. </para>
        </briefdescription>
        <detaileddescription>
<para>Instanceable prim indexes with the same instance key are guaranteed to have the same set of opinions, but may not have local opinions about name children. <simplesect kind="see"><para><ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/primIndex.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> is an index of the all sites of scene description that contribute opinions to a specific prim, under composition semantics. </para>
    </briefdescription>
    <detaileddescription>
<para>PcpComputePrimIndex() builds an index (&quot;indexes&quot;) the given prim site. At any site there may be scene description values expressing arcs that represent instructions to pull in further scene description. PcpComputePrimIndex() recursively follows these arcs, building and ordering the results. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/primIndex.h" line="78" column="1" bodyfile="pxr/usd/pcp/primIndex.h" bodystart="77" bodyend="290"/>
    <listofallmembers>
      <member refid="class_pcp_prim_index_1a95d02db2908f18af89a6a9f065480fd4" prot="private" virt="non-virtual"><scope>PcpPrimIndex</scope><name>_graph</name></member>
      <member refid="class_pcp_prim_index_1a66f940131be4626a3dc47fe8ca70f4d4" prot="private" virt="non-virtual"><scope>PcpPrimIndex</scope><name>_localErrors</name></member>
      <member refid="class_pcp_prim_index_1a1c03db967a3f47a6af43dc85eca5c3fc" prot="private" virt="non-virtual"><scope>PcpPrimIndex</scope><name>_primStack</name></member>
      <member refid="class_pcp_prim_index_1a75a6357d82cfb07c8f273c779fe6623f" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>ComposeAuthoredVariantSelections</name></member>
      <member refid="class_pcp_prim_index_1a432009bf5b9cb9f85c17107babdae363" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>ComputePrimChildNames</name></member>
      <member refid="class_pcp_prim_index_1a2b3ea427ecfffbe9219ee83f78bbafbb" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>ComputePrimPropertyNames</name></member>
      <member refid="class_pcp_prim_index_1a354744c0f0132f3be40ba4d0b85c966d" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>DumpToDotGraph</name></member>
      <member refid="class_pcp_prim_index_1a04007d783df319a8101b20e99bbdddd5" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>DumpToString</name></member>
      <member refid="class_pcp_prim_index_1aa312649c84ae41277a6d5bb28d66171f" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetGraph</name></member>
      <member refid="class_pcp_prim_index_1a91f65b03ae904c26c54630aef3eb53a3" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetLocalErrors</name></member>
      <member refid="class_pcp_prim_index_1a761b2fb8a6530553ff9d8d08380c6bdd" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetNodeIteratorAtNode</name></member>
      <member refid="class_pcp_prim_index_1a7c5ac5968652a9217f1175a52e56d0b0" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetNodeProvidingSpec</name></member>
      <member refid="class_pcp_prim_index_1a7b639c1d1297e4d3035d027b595594a0" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetNodeProvidingSpec</name></member>
      <member refid="class_pcp_prim_index_1a4d267618f6c48991a1901fc571686555" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetNodeRange</name></member>
      <member refid="class_pcp_prim_index_1a05b9b48f6f77e5b9e3e997790d4fb7f6" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetNodeSubtreeRange</name></member>
      <member refid="class_pcp_prim_index_1a36e57a6bd937d8527230be84579da695" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetPath</name></member>
      <member refid="class_pcp_prim_index_1aea830735204d7e0f367a07f730687317" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetPrimRange</name></member>
      <member refid="class_pcp_prim_index_1a06d0d3ef0bc825ca5579134621bf1c44" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetPrimRangeForNode</name></member>
      <member refid="class_pcp_prim_index_1a2cc548787f6de2f3340d7d0b2d0dcd3d" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetRootNode</name></member>
      <member refid="class_pcp_prim_index_1abc750dab08a633cc77cf16fab16368a8" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>GetSelectionAppliedForVariantSet</name></member>
      <member refid="class_pcp_prim_index_1a0e0b494663d8535b9f20266cd7b3ee62" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>HasAnyPayloads</name></member>
      <member refid="class_pcp_prim_index_1a9f7f20453dbe22c650ab9d89bb41015f" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>HasSpecs</name></member>
      <member refid="class_pcp_prim_index_1a0318502f9c8bf061d7b463cb1f8f76a6" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>IsInstanceable</name></member>
      <member refid="class_pcp_prim_index_1a959d34686e5ba4df5f776be6e5efd86f" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>IsUsd</name></member>
      <member refid="class_pcp_prim_index_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>IsValid</name></member>
      <member refid="class_pcp_prim_index_1a468da92d9155eddfe3c313d028118f1a" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>operator=</name></member>
      <member refid="class_pcp_prim_index_1a21a257d10b1c477189a8237fd38468c7" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>operator=</name></member>
      <member refid="class_pcp_prim_index_1a1e6d0cd691e9e0225e05d636b767e189" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>PcpPrimIndex</name></member>
      <member refid="class_pcp_prim_index_1a962fbd604d06c9c27ea0a2d16a96cc4b" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>PcpPrimIndex</name></member>
      <member refid="class_pcp_prim_index_1a0bb26435939de6d190b671dccc393d02" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>PcpPrimIndex</name></member>
      <member refid="class_pcp_prim_index_1a4ed4b80806509fdf21834e36d9305841" prot="private" virt="non-virtual"><scope>PcpPrimIndex</scope><name>PcpPrimIterator</name></member>
      <member refid="class_pcp_prim_index_1ae930cda55ec639abd1e9e723553b9a0d" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>PrintStatistics</name></member>
      <member refid="class_pcp_prim_index_1a325f1657290f2971c8d4b8be2f3e8593" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>SetGraph</name></member>
      <member refid="class_pcp_prim_index_1a0cef67d60cf172f92993b2acfc350b46" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>swap</name></member>
      <member refid="class_pcp_prim_index_1aeda879e8112f988ece3f58a30b9666a3" prot="public" virt="non-virtual"><scope>PcpPrimIndex</scope><name>Swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
