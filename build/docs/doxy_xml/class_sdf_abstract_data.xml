<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_abstract_data" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SdfAbstractData</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <derivedcompoundref refid="class_sdf_data" prot="public" virt="non-virtual">SdfData</derivedcompoundref>
    <includes refid="abstract_data_8h" local="no">abstractData.h</includes>
      <sectiondef kind="user-defined">
      <header>Spec API</header>
      <memberdef kind="function" id="class_sdf_abstract_data_1a94da2d6ff88146fce59f8085b2d78e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void CreateSpec</definition>
        <argsstring>(const SdfPath &amp;path, SdfSpecType specType)=0</argsstring>
        <name>CreateSpec</name>
        <reimplementedby refid="class_sdf_data_1abde490a020ddaa87b6a39940a58e091c">CreateSpec</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Create a new spec at <emphasis>path</emphasis> with the given <emphasis>specType</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the spec already exists the spec type will be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a2d700bdac8a8aa2bbce5f54ffe213ffe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpec</definition>
        <argsstring>(const SdfPath &amp;path) const =0</argsstring>
        <name>HasSpec</name>
        <reimplementedby refid="class_sdf_data_1a228afd21308caf5ea340b85b7c2f7e8d">HasSpec</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if this data has a spec for <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1aa06b2681ff3185dd700df728dd4a687c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void EraseSpec</definition>
        <argsstring>(const SdfPath &amp;path)=0</argsstring>
        <name>EraseSpec</name>
        <reimplementedby refid="class_sdf_data_1a30bbd88d1a4ad399fbedec62e6e9c1c0">EraseSpec</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Erase the spec at <emphasis>path</emphasis> and any fields that are on it. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this does not erase child specs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ac7c83700be4a7df1da15c6725872bd9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void MoveSpec</definition>
        <argsstring>(const SdfPath &amp;oldPath, const SdfPath &amp;newPath)=0</argsstring>
        <name>MoveSpec</name>
        <reimplementedby refid="class_sdf_data_1acb552bab4106db66504fb6100b71b5fc">MoveSpec</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <briefdescription>
<para>Move the spec at <emphasis>oldPath</emphasis> to <emphasis>newPath</emphasis>, including all the fields that are on it. </para>
        </briefdescription>
        <detaileddescription>
<para>This does not move any child specs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ae64ab7994bc1d560ed8a23de0352fd15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
        <definition>virtual SdfSpecType GetSpecType</definition>
        <argsstring>(const SdfPath &amp;path) const =0</argsstring>
        <name>GetSpecType</name>
        <reimplementedby refid="class_sdf_data_1ade7533c33c89bd82196765ba24417057">GetSpecType</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the spec type for the spec at <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns SdfSpecTypeUnknown if the spec doesn&apos;t exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ac7514141cb78b2204fe103168f550d84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void VisitSpecs</definition>
        <argsstring>(SdfAbstractDataSpecVisitor *visitor) const</argsstring>
        <name>VisitSpecs</name>
        <param>
          <type><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Visits every spec in this <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object with the given <computeroutput>visitor</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order in which specs are visited is undefined. The visitor may not modify the <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object it is visiting. <simplesect kind="see"><para><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="175" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Field API</header>
      <memberdef kind="function" id="class_sdf_abstract_data_1a2e977ec3972ceddae0f75f48fa9c7395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Has</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfAbstractDataValue *value) const =0</argsstring>
        <name>Has</name>
        <reimplementedby refid="class_sdf_data_1a0e6bbd51330209a6b9eb7f19ade3dfb5">Has</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a41e274a6476be557484cc0ad9b9c627f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Has</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value=NULL) const =0</argsstring>
        <name>Has</name>
        <reimplementedby refid="class_sdf_data_1ad5dcacf960eaee4e2d156b42630839de">Has</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Return whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ab5667d22ada14798f19aa7bb9eb91413" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpecAndField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfAbstractDataValue *value, SdfSpecType *specType) const</argsstring>
        <name>HasSpecAndField</name>
        <reimplementedby refid="class_sdf_data_1ab5667d22ada14798f19aa7bb9eb91413">HasSpecAndField</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Fill <computeroutput>specType</computeroutput> (which cannot be nullptr) as if by a call to GetSpecType(path). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting specType is not SdfSpecTypeUnknown, then act as if Has(path, fieldName, value) was called and return its result. In other words, the semantics of this function must be identical to this sequence:</para>
<para><programlisting><codeline><highlight class="normal">*specType<sp/>=<sp/>GetSpecType(path);</highlight></codeline>
<codeline><highlight class="normal">return<sp/>*specType<sp/>!=<sp/>SdfSpecTypeUnknown<sp/>&amp;&amp;<sp/>Has(path,<sp/>fieldName,<sp/>value);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a9fe61e37cf49713f83157588556709c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpecAndField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value, SdfSpecType *specType) const</argsstring>
        <name>HasSpecAndField</name>
        <reimplementedby refid="class_sdf_data_1a9fe61e37cf49713f83157588556709c3">HasSpecAndField</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Fill <computeroutput>specType</computeroutput> (which cannot be nullptr) as if by a call to GetSpecType(path). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting specType is not SdfSpecTypeUnknown, then act as if Has(path, fieldName, value) was called and return its result. In other words, the semantics of this function must be identical to this sequence:</para>
<para><programlisting><codeline><highlight class="normal">*specType<sp/>=<sp/>GetSpecType(path);</highlight></codeline>
<codeline><highlight class="normal">return<sp/>*specType<sp/>!=<sp/>SdfSpecTypeUnknown<sp/>&amp;&amp;<sp/>Has(path,<sp/>fieldName,<sp/>value);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a8fa08ded7d1b9e7d6c0777224508b9c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual SDF_API VtValue Get</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName) const =0</argsstring>
        <name>Get</name>
        <reimplementedby refid="class_sdf_data_1a52ce23f1d579ef344cdbc4215970fdd1">Get</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty value if none is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1aa6a0d145b8c917c81b26a19c8d774c72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::type_info const  &amp;</type>
        <definition>virtual SDF_API std::type_info const&amp; GetTypeid</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName) const</argsstring>
        <name>GetTypeid</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Return the type of the value for <computeroutput>fieldName</computeroutput> on spec <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such field exists, return typeid(void). Derived classes may optionally override this for performance. The base implementation is equivalent to:</para>
<para><programlisting><codeline><highlight class="normal">return<sp/>Get(path,<sp/>fieldName).GetTypeid();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1aad54304bc633e54f0c4026b83d583c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Set</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const VtValue &amp;value)=0</argsstring>
        <name>Set</name>
        <reimplementedby refid="class_sdf_data_1a3251bf4512de33ceb765d0ce368e0c51">Set</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to set a field on a spec that does not exist. Setting a field to an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> is the same as calling <ref refid="class_sdf_abstract_data_1ae187af21eb54ff639fdabe02c6e004ed" kindref="member">Erase()</ref> on it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a09e7d78b90a76008cab041278d98aa79" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Set</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const SdfAbstractDataConstValue &amp;value)=0</argsstring>
        <name>Set</name>
        <reimplementedby refid="class_sdf_data_1a490dbe15f59cd2dffa78b2b974f1f6ea">Set</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to set a field on a spec that does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ae187af21eb54ff639fdabe02c6e004ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Erase</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName)=0</argsstring>
        <name>Erase</name>
        <reimplementedby refid="class_sdf_data_1a4e1d41995548e714d18bffa352d4ac25">Erase</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Remove the field at <computeroutput>path</computeroutput> and <computeroutput>fieldName</computeroutput>, if one exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1acd8240b0c78e357e39669a901149a436" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>virtual SDF_API std::vector&lt;TfToken&gt; List</definition>
        <argsstring>(const SdfPath &amp;path) const =0</argsstring>
        <name>List</name>
        <reimplementedby refid="class_sdf_data_1a1dab66d5100ff64608c727a613acc682">List</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the names of all the fields that are set at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ad7917554d882d874d59aed4314dfc6af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GetAs</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const T &amp;defaultValue=T()) const</argsstring>
        <name>GetAs</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>defaultValue</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the provided <emphasis>defaultValue</emphasis> value if none is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="269" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="399" bodyend="408"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dict key access API</header>
      <memberdef kind="function" id="class_sdf_abstract_data_1ae86ce4e10fda229878b45d643d20fb98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasDictKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, SdfAbstractDataValue *value) const</argsstring>
        <name>HasDictKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1abe5fbd19b2a97c13ec9b44211453fd84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasDictKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, VtValue *value=NULL) const</argsstring>
        <name>HasDictKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1aff1990e8f93dbe644a17324e039e7bf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual SDF_API VtValue GetDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath) const</argsstring>
        <name>GetDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1afcbf22d0f4ab738076e0bdeb9237c827" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void SetDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const VtValue &amp;value)</argsstring>
        <name>SetDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1afc86cab1584e328556ac0418d76cd266" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void SetDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const SdfAbstractDataConstValue &amp;value)</argsstring>
        <name>SetDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a1fda052cd7113de84769fba44df4a280" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void EraseDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath)</argsstring>
        <name>EraseDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a79f0aaa58996b322ddb049463483320a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>virtual SDF_API std::vector&lt;TfToken&gt; ListDictKeys</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath) const</argsstring>
        <name>ListDictKeys</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="328" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Time-sample API</header>
      <description><para>This API supports narrowly-targeted queries against the &quot;timeSamples&quot; key of properties.</para>
<para>In particular, it enables asking for single time samples without pulling on the entire set of time samples, as well as asking about the set of sample times without pulling on the actual values at those times. </para>
</description>
      <memberdef kind="function" id="class_sdf_abstract_data_1a72ac2e4c3f385e08255b5e1d9a71bfe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>virtual SDF_API std::set&lt;double&gt; ListAllTimeSamples</definition>
        <argsstring>() const =0</argsstring>
        <name>ListAllTimeSamples</name>
        <reimplementedby refid="class_sdf_data_1a309bf40c34899d0ae80341aac4a8f4f9">ListAllTimeSamples</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a41bbab273707bc484c3ad5424a77790b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>virtual SDF_API std::set&lt;double&gt; ListTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const =0</argsstring>
        <name>ListTimeSamplesForPath</name>
        <reimplementedby refid="class_sdf_data_1a424d98330e338f1f413516059a891de2">ListTimeSamplesForPath</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1af8064b7e845833816d19873376a89d87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool GetBracketingTimeSamples</definition>
        <argsstring>(double time, double *tLower, double *tUpper) const =0</argsstring>
        <name>GetBracketingTimeSamples</name>
        <reimplementedby refid="class_sdf_data_1af3aebdb37323cd1515407df8f6508082">GetBracketingTimeSamples</reimplementedby>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a952faf173c62083775176d753e5b3fef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API size_t</type>
        <definition>virtual SDF_API size_t GetNumTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const =0</argsstring>
        <name>GetNumTimeSamplesForPath</name>
        <reimplementedby refid="class_sdf_data_1a379430d392cc8d82a23bc626b1e1cd5d">GetNumTimeSamplesForPath</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a4147b57e0777327a7cd40a40175390ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool GetBracketingTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path, double time, double *tLower, double *tUpper) const =0</argsstring>
        <name>GetBracketingTimeSamplesForPath</name>
        <reimplementedby refid="class_sdf_data_1a79c0fe1e4264605b565430ed266328f7">GetBracketingTimeSamplesForPath</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a2b8a1affe7684411c593c8eaa2626bc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, VtValue *optionalValue=NULL) const =0</argsstring>
        <name>QueryTimeSample</name>
        <reimplementedby refid="class_sdf_data_1ad556175d864b7f8aef3fc7d62bd45a4b">QueryTimeSample</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>optionalValue</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ad6272775c77ceabeb233ebf566e5f1d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, SdfAbstractDataValue *optionalValue) const =0</argsstring>
        <name>QueryTimeSample</name>
        <reimplementedby refid="class_sdf_data_1aeee79e13fa6a1755c0acf50b6db133df">QueryTimeSample</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>optionalValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a783bc7d0309cf6f8402c8e4ededbc8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void SetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const VtValue &amp;value)=0</argsstring>
        <name>SetTimeSample</name>
        <reimplementedby refid="class_sdf_data_1ae9ec4fc3aaf4980bea29dfccbc7b43ca">SetTimeSample</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a10932eb46de21d8f0aa4c3d4f0bcdef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void EraseTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time)=0</argsstring>
        <name>EraseTimeSample</name>
        <reimplementedby refid="class_sdf_data_1a5c20e22b079430454bf7f025446dedee">EraseTimeSample</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="384" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_abstract_data_1aa73c10b602f8fa23d740cfc7a3f135a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAbstractData</definition>
        <argsstring>()</argsstring>
        <name>SdfAbstractData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="76" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1acd894ec4c01454c828a70f6a7b50961c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API</type>
        <definition>virtual SDF_API ~SdfAbstractData</definition>
        <argsstring>()</argsstring>
        <name>~SdfAbstractData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a86a3598b40bc0f9c1c0dbd82be9165a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void CopyFrom</definition>
        <argsstring>(const SdfAbstractDataConstPtr &amp;source)</argsstring>
        <name>CopyFrom</name>
        <param>
          <type>const SdfAbstractDataConstPtr &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Copy the data in <computeroutput>source</computeroutput> into this data object. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation does a spec-by-spec, field-by-field copy of <computeroutput>source</computeroutput> into this object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1ab2fdaabd75a772e61a04bb178d3e4bf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool StreamsData</definition>
        <argsstring>() const =0</argsstring>
        <name>StreamsData</name>
        <reimplementedby refid="class_sdf_data_1a9db3c88d39af3045de40861043b4969a">StreamsData</reimplementedby>
        <briefdescription>
<para>Returns true if this data object streams its data to and from its serialized data store on demand. </para>
        </briefdescription>
        <detaileddescription>
<para>Sdf will treat layers with streaming data differently to avoid pulling in data unnecessarily. For example, reloading a streaming layer will not perform fine-grained change notification, since doing so would require the full contents of the layer to be loaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a4394939afe9f76296e90fca624064128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool IsDetached</definition>
        <argsstring>() const</argsstring>
        <name>IsDetached</name>
        <reimplementedby refid="class_sdf_data_1a4394939afe9f76296e90fca624064128">IsDetached</reimplementedby>
        <briefdescription>
<para>Returns true if this data object is detached from its serialized data store, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>A detached data object must not be affected by external changes to the serialized data.</para>
<para>Sdf allows clients to specify detached layers to avoid problems that may occur if the underlying data is modified by an external process. For example, a data object that maintains an open file handle or memory mapping to the original layer on disk and reads data on demand is not detached. But a data object that pulls all of the layer contents into memory is detached.</para>
<para>The default implementation returns !StreamsData(). Non-streaming data objects are assumed to be detached from their serialized data, while streaming objects are conservatively assumed to not be detached. Note that it is possible to have a streaming data object that is also detached <ndash/> for example, if the data object were to make a private copy of the serialized data for its own use and streamed data from it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a6c6a68d05c9716967063ac58b50cc299" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns true if this data object has no specs, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation uses a visitor to check if any specs exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1a760f759cf45dd3f1b4e17daf631d24b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Equals</definition>
        <argsstring>(const SdfAbstractDataRefPtr &amp;rhs) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const SdfAbstractDataRefPtr &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this data object contains the same specs and fields as <emphasis>lhs</emphasis>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation does a spec-by-spec, field-by-field comparison. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_abstract_data_1aa7156a449216c360f35cb481abbc2482" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void WriteToStream</definition>
        <argsstring>(std::ostream &amp;out) const</argsstring>
        <name>WriteToStream</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Writes the contents of this data object to <computeroutput>out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is primarily for debugging purposes.</para>
<para>The default implementation writes out each field for each spec. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_abstract_data_1ac05ac5303d8faacf3d27c6e05d235365" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void _VisitSpecs</definition>
        <argsstring>(SdfAbstractDataSpecVisitor *visitor) const =0</argsstring>
        <name>_VisitSpecs</name>
        <reimplementedby refid="class_sdf_data_1ae046dc4aefb50ecdbe1e73f6ffde5cb6">_VisitSpecs</reimplementedby>
        <param>
          <type><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Visits every spec in this <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object with the given <computeroutput>visitor</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order in which specs are visited is undefined. The visitor may not modify the <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object it is visiting. This method should <bold>not</bold> call <computeroutput>Done()</computeroutput> on the visitor. <simplesect kind="see"><para><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/abstractData.h" line="395" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for scene description data storage. </para>
    </briefdescription>
    <detaileddescription>
<para>This is not a layer. <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> is an anonymous container holding scene description values. It is like an STL container, but specialized for holding scene description.</para>
<para>For any given <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, an <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> can hold one or more key/value pairs which we call Fields. Most of the API on <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> accesses or modifies the value stored in a Field for a particular path and field name.</para>
<para><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> does not provide undo, change notification, or any strong consistency guarantees about the scene description it contains. Instead, it is a basis for building those things. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4970">
        <label>SdfAbstractData</label>
        <link refid="class_sdf_abstract_data"/>
        <childnode refid="4971" relation="public-inheritance">
        </childnode>
        <childnode refid="4972" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4972">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4973">
        <label>SdfData</label>
        <link refid="class_sdf_data"/>
        <childnode refid="4970" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4971">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4974">
        <label>SdfAbstractData</label>
        <link refid="class_sdf_abstract_data"/>
        <childnode refid="4975" relation="public-inheritance">
        </childnode>
        <childnode refid="4976" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4976">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4975">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/abstractData.h" line="74" column="1" bodyfile="pxr/usd/sdf/abstractData.h" bodystart="73" bodyend="396"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfAbstractData</scope><name>_HasRemnant</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfAbstractData</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfAbstractData</scope><name>_Register</name></member>
      <member refid="class_sdf_abstract_data_1ac05ac5303d8faacf3d27c6e05d235365" prot="protected" virt="pure-virtual"><scope>SdfAbstractData</scope><name>_VisitSpecs</name></member>
      <member refid="class_sdf_abstract_data_1a86a3598b40bc0f9c1c0dbd82be9165a1" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>CopyFrom</name></member>
      <member refid="class_sdf_abstract_data_1a94da2d6ff88146fce59f8085b2d78e52" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>CreateSpec</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_abstract_data_1a760f759cf45dd3f1b4e17daf631d24b3" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>Equals</name></member>
      <member refid="class_sdf_abstract_data_1ae187af21eb54ff639fdabe02c6e004ed" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Erase</name></member>
      <member refid="class_sdf_abstract_data_1a1fda052cd7113de84769fba44df4a280" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>EraseDictValueByKey</name></member>
      <member refid="class_sdf_abstract_data_1aa06b2681ff3185dd700df728dd4a687c" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>EraseSpec</name></member>
      <member refid="class_sdf_abstract_data_1a10932eb46de21d8f0aa4c3d4f0bcdef0" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>EraseTimeSample</name></member>
      <member refid="class_sdf_abstract_data_1a8fa08ded7d1b9e7d6c0777224508b9c3" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Get</name></member>
      <member refid="class_sdf_abstract_data_1ad7917554d882d874d59aed4314dfc6af" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>GetAs</name></member>
      <member refid="class_sdf_abstract_data_1af8064b7e845833816d19873376a89d87" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>GetBracketingTimeSamples</name></member>
      <member refid="class_sdf_abstract_data_1a4147b57e0777327a7cd40a40175390ab" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>GetBracketingTimeSamplesForPath</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>GetCurrentCount</name></member>
      <member refid="class_sdf_abstract_data_1aff1990e8f93dbe644a17324e039e7bf8" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>GetDictValueByKey</name></member>
      <member refid="class_sdf_abstract_data_1a952faf173c62083775176d753e5b3fef" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>GetNumTimeSamplesForPath</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>GetRefCount</name></member>
      <member refid="class_sdf_abstract_data_1ae64ab7994bc1d560ed8a23de0352fd15" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>GetSpecType</name></member>
      <member refid="class_sdf_abstract_data_1aa6a0d145b8c917c81b26a19c8d774c72" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>GetTypeid</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_sdf_abstract_data_1a2e977ec3972ceddae0f75f48fa9c7395" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Has</name></member>
      <member refid="class_sdf_abstract_data_1a41e274a6476be557484cc0ad9b9c627f" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Has</name></member>
      <member refid="class_sdf_abstract_data_1ae86ce4e10fda229878b45d643d20fb98" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>HasDictKey</name></member>
      <member refid="class_sdf_abstract_data_1abe5fbd19b2a97c13ec9b44211453fd84" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>HasDictKey</name></member>
      <member refid="class_sdf_abstract_data_1a2d700bdac8a8aa2bbce5f54ffe213ffe" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>HasSpec</name></member>
      <member refid="class_sdf_abstract_data_1ab5667d22ada14798f19aa7bb9eb91413" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>HasSpecAndField</name></member>
      <member refid="class_sdf_abstract_data_1a9fe61e37cf49713f83157588556709c3" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>HasSpecAndField</name></member>
      <member refid="class_sdf_abstract_data_1a4394939afe9f76296e90fca624064128" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>IsDetached</name></member>
      <member refid="class_sdf_abstract_data_1a6c6a68d05c9716967063ac58b50cc299" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>IsEmpty</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>IsUnique</name></member>
      <member refid="class_sdf_abstract_data_1acd8240b0c78e357e39669a901149a436" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>List</name></member>
      <member refid="class_sdf_abstract_data_1a72ac2e4c3f385e08255b5e1d9a71bfe9" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>ListAllTimeSamples</name></member>
      <member refid="class_sdf_abstract_data_1a79f0aaa58996b322ddb049463483320a" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>ListDictKeys</name></member>
      <member refid="class_sdf_abstract_data_1a41bbab273707bc484c3ad5424a77790b" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>ListTimeSamplesForPath</name></member>
      <member refid="class_sdf_abstract_data_1ac7c83700be4a7df1da15c6725872bd9f" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>MoveSpec</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>operator=</name></member>
      <member refid="class_sdf_abstract_data_1a2b8a1affe7684411c593c8eaa2626bc4" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_abstract_data_1ad6272775c77ceabeb233ebf566e5f1d0" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_abstract_data_1aa73c10b602f8fa23d740cfc7a3f135a7" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>SdfAbstractData</name></member>
      <member refid="class_sdf_abstract_data_1aad54304bc633e54f0c4026b83d583c86" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Set</name></member>
      <member refid="class_sdf_abstract_data_1a09e7d78b90a76008cab041278d98aa79" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>Set</name></member>
      <member refid="class_sdf_abstract_data_1afcbf22d0f4ab738076e0bdeb9237c827" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>SetDictValueByKey</name></member>
      <member refid="class_sdf_abstract_data_1afc86cab1584e328556ac0418d76cd266" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>SetDictValueByKey</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_sdf_abstract_data_1a783bc7d0309cf6f8402c8e4ededbc8ce" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>SetTimeSample</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_sdf_abstract_data_1ab2fdaabd75a772e61a04bb178d3e4bf7" prot="public" virt="pure-virtual"><scope>SdfAbstractData</scope><name>StreamsData</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_sdf_abstract_data_1ac7514141cb78b2204fe103168f550d84" prot="public" virt="non-virtual"><scope>SdfAbstractData</scope><name>VisitSpecs</name></member>
      <member refid="class_sdf_abstract_data_1aa7156a449216c360f35cb481abbc2482" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>WriteToStream</name></member>
      <member refid="class_sdf_abstract_data_1acd894ec4c01454c828a70f6a7b50961c" prot="public" virt="virtual"><scope>SdfAbstractData</scope><name>~SdfAbstractData</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>SdfAbstractData</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfAbstractData</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
