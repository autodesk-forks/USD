<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_resource_registry" kind="class" language="C++" prot="public">
    <compoundname>HdResourceRegistry</compoundname>
    <derivedcompoundref refid="class_hd_st_resource_registry" prot="public" virt="non-virtual">HdStResourceRegistry</derivedcompoundref>
    <includes refid="resource_registry_8h" local="no">resourceRegistry.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_hd_resource_registry_1a43ce5b43554ef7d06e7935c65ffebfbc" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t TextureKey</definition>
        <argsstring></argsstring>
        <name>TextureKey</name>
        <briefdescription>
<para>Globally unique id for texture, see HdRenderIndex::GetTextureKey() for details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="70" column="1" bodyfile="pxr/imaging/hd/resourceRegistry.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_resource_registry_1abea3aef1033b9f56ef127a68e9fa3739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HF_MALLOC_TAG_NEW</definition>
        <argsstring>(&quot;new HdResourceRegistry&quot;)</argsstring>
        <name>HF_MALLOC_TAG_NEW</name>
        <param>
          <type>&quot;new <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1a1798dc5216b7e543b162d2a1585d84df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdResourceRegistry</definition>
        <argsstring>()</argsstring>
        <name>HdResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1a6c0947e31da5157dd11e4ec0602295d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API</type>
        <definition>virtual HD_API ~HdResourceRegistry</definition>
        <argsstring>()</argsstring>
        <name>~HdResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void Commit</definition>
        <argsstring>()</argsstring>
        <name>Commit</name>
        <briefdescription>
<para>Commits all in-flight source data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1abd7db6bf77e1fcf32a585dd94cb3c549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void GarbageCollect</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollect</name>
        <briefdescription>
<para>cleanup all buffers and remove if empty </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1a9326094a31651c7f5db81f75dbc21c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void InvalidateShaderRegistry</definition>
        <argsstring>()</argsstring>
        <name>InvalidateShaderRegistry</name>
        <reimplementedby refid="class_hd_st_resource_registry_1aa926690de633ba967319bc98d9855c56">InvalidateShaderRegistry</reimplementedby>
        <briefdescription>
<para>Invalidate any shaders registered with this registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1afc98a7a0ec81483c6c07de25651554c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void ReloadResource</definition>
        <argsstring>(TfToken const &amp;resourceType, std::string const &amp;path)</argsstring>
        <name>ReloadResource</name>
        <reimplementedby refid="class_hd_st_resource_registry_1ae3becaa92122d1321af05df25db93f8f">ReloadResource</reimplementedby>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>resourceType</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Generic method to inform RenderDelegate a resource needs to be reloaded. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used by the application to inform the renderDelegate that a resource, which may not have any prim representation in Hydra, needs to be reloaded. For example a texture found in a material network. The <computeroutput>path</computeroutput> can be absolute or relative. It should usually match the path found for textures during <ref refid="class_hd_sprim_1ac100b9064606ab088306512425439cf7" kindref="member">HdMaterial::Sync</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1abeab7ba4c8d0c00636b4c88ea644d944" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>virtual HD_API VtDictionary GetResourceAllocation</definition>
        <argsstring>() const</argsstring>
        <name>GetResourceAllocation</name>
        <reimplementedby refid="class_hd_st_resource_registry_1aacf16c122f0f8558870a2d7b276e29a7">GetResourceAllocation</reimplementedby>
        <briefdescription>
<para>Returns a report of resource allocation by role in bytes and a summary total allocation of GPU memory in bytes for this registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_resource_registry_1a2dfcb3e2a701bf3cc0b77d8a89169309" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void _Commit</definition>
        <argsstring>()</argsstring>
        <name>_Commit</name>
        <reimplementedby refid="class_hd_st_resource_registry_1abb9d11a3f974321b5633e42b7634bd91">_Commit</reimplementedby>
        <briefdescription>
<para>A hook for derived registries to perform additional resource commits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1ab1d18e80d562dd7a93b2c15096f9ee94" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void _GarbageCollect</definition>
        <argsstring>()</argsstring>
        <name>_GarbageCollect</name>
        <reimplementedby refid="class_hd_st_resource_registry_1a5934824e9aa81ecfebab1bea9212d9d9">_GarbageCollect</reimplementedby>
        <briefdescription>
<para>Hooks for derived registries to perform additional GC when <ref refid="class_hd_resource_registry_1abd7db6bf77e1fcf32a585dd94cb3c549" kindref="member">GarbageCollect()</ref> is invoked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_resource_registry_1a7ec962d5283101a05863ceee108987b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdResourceRegistry</definition>
        <argsstring>(const HdResourceRegistry &amp;)=delete</argsstring>
        <name>HdResourceRegistry</name>
        <param>
          <type>const <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_resource_registry_1a1e18c0e0e95d1b85cd5522f135502056" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> &amp;</type>
        <definition>HdResourceRegistry&amp; operator=</definition>
        <argsstring>(const HdResourceRegistry &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/resourceRegistry.h" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A central registry for resources. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2640">
        <label>HdResourceRegistry</label>
        <link refid="class_hd_resource_registry"/>
      </node>
      <node id="2641">
        <label>HdStResourceRegistry</label>
        <link refid="class_hd_st_resource_registry"/>
        <childnode refid="2640" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/hd/resourceRegistry.h" line="50" column="1" bodyfile="pxr/imaging/hd/resourceRegistry.h" bodystart="50" bodyend="106"/>
    <listofallmembers>
      <member refid="class_hd_resource_registry_1a2dfcb3e2a701bf3cc0b77d8a89169309" prot="protected" virt="virtual"><scope>HdResourceRegistry</scope><name>_Commit</name></member>
      <member refid="class_hd_resource_registry_1ab1d18e80d562dd7a93b2c15096f9ee94" prot="protected" virt="virtual"><scope>HdResourceRegistry</scope><name>_GarbageCollect</name></member>
      <member refid="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" prot="public" virt="non-virtual"><scope>HdResourceRegistry</scope><name>Commit</name></member>
      <member refid="class_hd_resource_registry_1abd7db6bf77e1fcf32a585dd94cb3c549" prot="public" virt="non-virtual"><scope>HdResourceRegistry</scope><name>GarbageCollect</name></member>
      <member refid="class_hd_resource_registry_1abeab7ba4c8d0c00636b4c88ea644d944" prot="public" virt="virtual"><scope>HdResourceRegistry</scope><name>GetResourceAllocation</name></member>
      <member refid="class_hd_resource_registry_1a1798dc5216b7e543b162d2a1585d84df" prot="public" virt="non-virtual"><scope>HdResourceRegistry</scope><name>HdResourceRegistry</name></member>
      <member refid="class_hd_resource_registry_1a7ec962d5283101a05863ceee108987b8" prot="private" virt="non-virtual"><scope>HdResourceRegistry</scope><name>HdResourceRegistry</name></member>
      <member refid="class_hd_resource_registry_1abea3aef1033b9f56ef127a68e9fa3739" prot="public" virt="non-virtual"><scope>HdResourceRegistry</scope><name>HF_MALLOC_TAG_NEW</name></member>
      <member refid="class_hd_resource_registry_1a9326094a31651c7f5db81f75dbc21c4f" prot="public" virt="virtual"><scope>HdResourceRegistry</scope><name>InvalidateShaderRegistry</name></member>
      <member refid="class_hd_resource_registry_1a1e18c0e0e95d1b85cd5522f135502056" prot="private" virt="non-virtual"><scope>HdResourceRegistry</scope><name>operator=</name></member>
      <member refid="class_hd_resource_registry_1afc98a7a0ec81483c6c07de25651554c2" prot="public" virt="virtual"><scope>HdResourceRegistry</scope><name>ReloadResource</name></member>
      <member refid="class_hd_resource_registry_1a43ce5b43554ef7d06e7935c65ffebfbc" prot="public" virt="non-virtual"><scope>HdResourceRegistry</scope><name>TextureKey</name></member>
      <member refid="class_hd_resource_registry_1a6c0947e31da5157dd11e4ec0602295d4" prot="public" virt="virtual"><scope>HdResourceRegistry</scope><name>~HdResourceRegistry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
