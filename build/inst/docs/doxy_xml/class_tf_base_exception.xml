<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_base_exception" kind="class" language="C++" prot="public">
    <compoundname>TfBaseException</compoundname>
    <basecompoundref prot="public" virt="non-virtual">exception</basecompoundref>
    <derivedcompoundref refid="class_usd_expired_prim_access_error" prot="public" virt="non-virtual">UsdExpiredPrimAccessError</derivedcompoundref>
    <includes refid="exception_8h" local="no">exception.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_base_exception_1a7008d53d001efb86fd6a5b3a8bbd9332" prot="private" static="no" mutable="no">
        <type>TfCallContext</type>
        <definition>TfCallContext _callContext</definition>
        <argsstring></argsstring>
        <name>_callContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="113" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_base_exception_1ae2c456bbb946a30ac92d0ae107f81722" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uintptr_t &gt;</type>
        <definition>std::vector&lt;uintptr_t&gt; _throwStack</definition>
        <argsstring></argsstring>
        <name>_throwStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="114" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_base_exception_1ad1585019025491c93a622c07a3a2130b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _message</definition>
        <argsstring></argsstring>
        <name>_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="115" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_base_exception_1a3e1fe52c7af9107d60b8d3a188b2e0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TF_API</type>
        <definition>virtual TF_API ~TfBaseException</definition>
        <argsstring>()</argsstring>
        <name>~TfBaseException</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_base_exception_1a5eca96d3ca2bfdb99c5720bdf32f74e9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfBaseException</definition>
        <argsstring>(std::string const &amp;message)</argsstring>
        <name>TfBaseException</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Construct with <computeroutput>message</computeroutput>, reported by this class&apos;s <ref refid="class_tf_base_exception_1a2c54746d70633860145ca360be6b21f1" kindref="member">what()</ref> implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_base_exception_1a1020214d71bdbd5a1c0dcca810e35415" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TfCallContext const  &amp;</type>
        <definition>TfCallContext const&amp; GetThrowContext</definition>
        <argsstring>() const</argsstring>
        <name>GetThrowContext</name>
        <briefdescription>
<para>Return the call context from the throw point associated with this exception. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this context may be invalid if this exception was not thrown with <ref refid="exception_8h_1aa47baf39d4af229ae0f91f4e19bf44b8" kindref="member">TF_THROW()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="77" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_base_exception_1ad646ebada9aa2722be1895a08a0d3bcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uintptr_t &gt; const  &amp;</type>
        <definition>std::vector&lt;uintptr_t&gt; const&amp; GetThrowStack</definition>
        <argsstring>() const</argsstring>
        <name>GetThrowStack</name>
        <briefdescription>
<para>Return the stack frame pointers from the throw point. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__group__arch___diagnostics_1ga61d5e2776ad02ac3549edbf208da0526" kindref="member">ArchPrintStackFrames()</ref> to turn these into human-readable strings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="83" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_base_exception_1a02a1ca507f67bb3019b373be2614e8f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MoveThrowStackTo</definition>
        <argsstring>(std::vector&lt; uintptr_t &gt; &amp;out)</argsstring>
        <name>MoveThrowStackTo</name>
        <param>
          <type>std::vector&lt; uintptr_t &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Move the stack frame pointers from the throw point to <computeroutput>out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_tf_base_exception_1ad646ebada9aa2722be1895a08a0d3bcc" kindref="member">GetThrowStack()</ref> for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="89" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_base_exception_1a2c54746d70633860145ca360be6b21f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>TF_API const char *</type>
        <definition>virtual TF_API const char* what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
<para>Override std::exception::what() to return the message passed during construction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_base_exception_1a3e59f49eadbce9d8833ce56ff2e3b2a9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>static TF_API void _ThrowImpl</definition>
        <argsstring>(TfCallContext const &amp;cc, TfBaseException &amp;exc, TfFunctionRef&lt; void()&gt; thrower, int skipNCallerFrames)</argsstring>
        <name>_ThrowImpl</name>
        <param>
          <type>TfCallContext const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="class_tf_base_exception" kindref="compound">TfBaseException</ref> &amp;</type>
          <declname>exc</declname>
        </param>
        <param>
          <type><ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref>&lt; void()&gt;</type>
          <declname>thrower</declname>
        </param>
        <param>
          <type>int</type>
          <declname>skipNCallerFrames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/exception.h" line="108" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The base class for exceptions supported by the Tf exceptions facilities. </para>
    </briefdescription>
    <detaileddescription>
<para>Typical usage is to publically derive your own exception class from this one, and throw using the <ref refid="exception_8h_1aa47baf39d4af229ae0f91f4e19bf44b8" kindref="member">TF_THROW()</ref> macro.</para>
<para>Deriving this base class and throwing via <ref refid="exception_8h_1aa47baf39d4af229ae0f91f4e19bf44b8" kindref="member">TF_THROW()</ref> will record the throw point&apos;s call context (see <ref refid="class_tf_base_exception_1a1020214d71bdbd5a1c0dcca810e35415" kindref="member">GetThrowContext()</ref>) and will also capture a portion of the throwing thread&apos;s call stack (see <ref refid="class_tf_base_exception_1ad646ebada9aa2722be1895a08a0d3bcc" kindref="member">GetThrowStack()</ref>).</para>
<para>Additionally, the Tf library registers an exception translator with boost.python to raise a Python exeption wrapping the thrown exception object. Similarly utilties that call Python via Tf will re-throw the embedded C++ exception if the Python exception unwinds back into C++. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5345">
        <label>UsdExpiredPrimAccessError</label>
        <link refid="class_usd_expired_prim_access_error"/>
        <childnode refid="5344" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5344">
        <label>TfBaseException</label>
        <link refid="class_tf_base_exception"/>
      </node>
    </inheritancegraph>
    <location file="pxr/base/tf/exception.h" line="64" column="1" bodyfile="pxr/base/tf/exception.h" bodystart="63" bodyend="116"/>
    <listofallmembers>
      <member refid="class_tf_base_exception_1a7008d53d001efb86fd6a5b3a8bbd9332" prot="private" virt="non-virtual"><scope>TfBaseException</scope><name>_callContext</name></member>
      <member refid="class_tf_base_exception_1ad1585019025491c93a622c07a3a2130b" prot="private" virt="non-virtual"><scope>TfBaseException</scope><name>_message</name></member>
      <member refid="class_tf_base_exception_1a3e59f49eadbce9d8833ce56ff2e3b2a9" prot="private" virt="non-virtual"><scope>TfBaseException</scope><name>_ThrowImpl</name></member>
      <member refid="class_tf_base_exception_1ae2c456bbb946a30ac92d0ae107f81722" prot="private" virt="non-virtual"><scope>TfBaseException</scope><name>_throwStack</name></member>
      <member refid="class_tf_base_exception_1a1020214d71bdbd5a1c0dcca810e35415" prot="public" virt="non-virtual"><scope>TfBaseException</scope><name>GetThrowContext</name></member>
      <member refid="class_tf_base_exception_1ad646ebada9aa2722be1895a08a0d3bcc" prot="public" virt="non-virtual"><scope>TfBaseException</scope><name>GetThrowStack</name></member>
      <member refid="class_tf_base_exception_1a02a1ca507f67bb3019b373be2614e8f3" prot="public" virt="non-virtual"><scope>TfBaseException</scope><name>MoveThrowStackTo</name></member>
      <member refid="class_tf_base_exception_1a5eca96d3ca2bfdb99c5720bdf32f74e9" prot="public" virt="non-virtual"><scope>TfBaseException</scope><name>TfBaseException</name></member>
      <member refid="class_tf_base_exception_1a2c54746d70633860145ca360be6b21f1" prot="public" virt="virtual"><scope>TfBaseException</scope><name>what</name></member>
      <member refid="class_tf_base_exception_1a3e1fe52c7af9107d60b8d3a188b2e0d2" prot="public" virt="virtual"><scope>TfBaseException</scope><name>~TfBaseException</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
