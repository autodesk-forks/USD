<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_ops" kind="class" language="C++" prot="public">
    <compoundname>HgiGLOps</compoundname>
    <includes refid="ops_8h" local="no">ops.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hgi_g_l_ops_1a64ff47912a0ba3d8969b812fb5e7d64d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn PushDebugGroup</definition>
        <argsstring>(const char *label)</argsstring>
        <name>PushDebugGroup</name>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a69b74923f28658b853d15669fe860693" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn PopDebugGroup</definition>
        <argsstring>()</argsstring>
        <name>PopDebugGroup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a09ec5a32363e8300d42b0cca0bc28001" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyTextureGpuToCpu</definition>
        <argsstring>(HgiTextureGpuToCpuOp const &amp;copyOp)</argsstring>
        <name>CopyTextureGpuToCpu</name>
        <param>
          <type><ref refid="struct_hgi_texture_gpu_to_cpu_op" kindref="compound">HgiTextureGpuToCpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a2ee07bf473a023644275e60bdaee4aa3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyTextureCpuToGpu</definition>
        <argsstring>(HgiTextureCpuToGpuOp const &amp;copyOp)</argsstring>
        <name>CopyTextureCpuToGpu</name>
        <param>
          <type><ref refid="struct_hgi_texture_cpu_to_gpu_op" kindref="compound">HgiTextureCpuToGpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1ad3af2b3f82207c6659d97102e666ddce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyBufferGpuToGpu</definition>
        <argsstring>(HgiBufferGpuToGpuOp const &amp;copyOp)</argsstring>
        <name>CopyBufferGpuToGpu</name>
        <param>
          <type><ref refid="struct_hgi_buffer_gpu_to_gpu_op" kindref="compound">HgiBufferGpuToGpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1ab6c161b9cfb2cdf91ace8469a62a9c7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyBufferCpuToGpu</definition>
        <argsstring>(HgiBufferCpuToGpuOp const &amp;copyOp)</argsstring>
        <name>CopyBufferCpuToGpu</name>
        <param>
          <type><ref refid="struct_hgi_buffer_cpu_to_gpu_op" kindref="compound">HgiBufferCpuToGpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1aa656bb0a0719cb636415ea65c3c5f391" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyBufferGpuToCpu</definition>
        <argsstring>(HgiBufferGpuToCpuOp const &amp;copyOp)</argsstring>
        <name>CopyBufferGpuToCpu</name>
        <param>
          <type><ref refid="struct_hgi_buffer_gpu_to_cpu_op" kindref="compound">HgiBufferGpuToCpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1aacccc3b68c49d32085486eb316e0fb41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyTextureToBuffer</definition>
        <argsstring>(HgiTextureToBufferOp const &amp;copyOp)</argsstring>
        <name>CopyTextureToBuffer</name>
        <param>
          <type><ref refid="struct_hgi_texture_to_buffer_op" kindref="compound">HgiTextureToBufferOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1ac5db4dbf237df6de11b3d00e90190cdc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn CopyBufferToTexture</definition>
        <argsstring>(HgiBufferToTextureOp const &amp;copyOp)</argsstring>
        <name>CopyBufferToTexture</name>
        <param>
          <type><ref refid="struct_hgi_buffer_to_texture_op" kindref="compound">HgiBufferToTextureOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a7e609d3cc61bd64e0f6e458bd28d7c07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn ResolveFramebuffer</definition>
        <argsstring>(HgiGLDevice *device, HgiGraphicsCmdsDesc const &amp;graphicsCmds)</argsstring>
        <name>ResolveFramebuffer</name>
        <param>
          <type><ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_graphics_cmds_desc" kindref="compound">HgiGraphicsCmdsDesc</ref> const &amp;</type>
          <declname>graphicsCmds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1afc92ca5fdc4e8dc31bb2ade1cf0bf0a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn SetViewport</definition>
        <argsstring>(GfVec4i const &amp;vp)</argsstring>
        <name>SetViewport</name>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a08d6b2201b71722c064295aace44ca19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn SetScissor</definition>
        <argsstring>(GfVec4i const &amp;sc)</argsstring>
        <name>SetScissor</name>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a2eadea6663a3a948182d233ea8a34bfd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn BindPipeline</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline)</argsstring>
        <name>BindPipeline</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a3325943d569c284ac0156e6ba6b3042b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn BindPipeline</definition>
        <argsstring>(HgiComputePipelineHandle pipeline)</argsstring>
        <name>BindPipeline</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiComputePipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1ac4bb9ab800d9988d57daf886f3f5e5ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn BindResources</definition>
        <argsstring>(HgiResourceBindingsHandle resources)</argsstring>
        <name>BindResources</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiResourceBindingsHandle</ref></type>
          <declname>resources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1af8c7a6f80729ef48421f339153d8be52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn SetConstantValues</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline, HgiShaderStage stages, uint32_t bindIndex, uint32_t byteSize, const void *data)</argsstring>
        <name>SetConstantValues</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>HgiShaderStage</type>
          <declname>stages</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a0d3e2ee2aa97866bf96d45ea7272d0e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn SetConstantValues</definition>
        <argsstring>(HgiComputePipelineHandle pipeline, uint32_t bindIndex, uint32_t byteSize, const void *data)</argsstring>
        <name>SetConstantValues</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiComputePipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a1fb51bad32f0abeffaf7ac10d6c8e617" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn BindVertexBuffers</definition>
        <argsstring>(HgiVertexBufferBindingVector const &amp;bindings)</argsstring>
        <name>BindVertexBuffers</name>
        <param>
          <type>HgiVertexBufferBindingVector const &amp;</type>
          <declname>bindings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1afc25279c9119f9ff0d208b86a7407869" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn Draw</definition>
        <argsstring>(HgiPrimitiveType primitiveType, uint32_t primitiveIndexSize, uint32_t vertexCount, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance)</argsstring>
        <name>Draw</name>
        <param>
          <type>HgiPrimitiveType</type>
          <declname>primitiveType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>primitiveIndexSize</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>vertexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a335321db800b096234e0007b467a0ba4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn DrawIndirect</definition>
        <argsstring>(HgiPrimitiveType primitiveType, uint32_t primitiveIndexSize, HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride)</argsstring>
        <name>DrawIndirect</name>
        <param>
          <type>HgiPrimitiveType</type>
          <declname>primitiveType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>primitiveIndexSize</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1abeebc92c8720f379ebadc02a4e40f926" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn DrawIndexed</definition>
        <argsstring>(HgiPrimitiveType primitiveType, uint32_t primitiveIndexSize, HgiBufferHandle const &amp;indexBuffer, uint32_t indexCount, uint32_t indexBufferByteOffset, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance)</argsstring>
        <name>DrawIndexed</name>
        <param>
          <type>HgiPrimitiveType</type>
          <declname>primitiveType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>primitiveIndexSize</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a43875f30c338142f57a3231bf8e51b18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn DrawIndexedIndirect</definition>
        <argsstring>(HgiPrimitiveType primitiveType, uint32_t primitiveIndexSize, HgiBufferHandle const &amp;indexBuffer, HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride)</argsstring>
        <name>DrawIndexedIndirect</name>
        <param>
          <type>HgiPrimitiveType</type>
          <declname>primitiveType</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>primitiveIndexSize</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a760f2711a1fb54673e68fd56a3b4430b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn BindFramebufferOp</definition>
        <argsstring>(HgiGLDevice *device, HgiGraphicsCmdsDesc const &amp;desc)</argsstring>
        <name>BindFramebufferOp</name>
        <param>
          <type><ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_graphics_cmds_desc" kindref="compound">HgiGraphicsCmdsDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a5306ad90085fd781e5ac0ab874365a39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn Dispatch</definition>
        <argsstring>(int dimX, int dimY)</argsstring>
        <name>Dispatch</name>
        <param>
          <type>int</type>
          <declname>dimX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a8991968ed93cf81e8e9e5d8d97bcfc2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn FillBuffer</definition>
        <argsstring>(HgiBufferHandle const &amp;buffer, uint8_t value)</argsstring>
        <name>FillBuffer</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1a251caea7c0ff579214958aefbeef89e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn GenerateMipMaps</definition>
        <argsstring>(HgiTextureHandle const &amp;texture)</argsstring>
        <name>GenerateMipMaps</name>
        <param>
          <type>HgiTextureHandle const &amp;</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_ops_1ab16649087927e58d1ebf3452847e3fdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API HgiGLOpsFn</type>
        <definition>static HGIGL_API HgiGLOpsFn InsertMemoryBarrier</definition>
        <argsstring>(HgiMemoryBarrier barrier)</argsstring>
        <name>InsertMemoryBarrier</name>
        <param>
          <type>HgiMemoryBarrier</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/ops.h" line="193" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of functions used by cmds objects to do deferred cmd recording. </para>
    </briefdescription>
    <detaileddescription>
<para>Modern API&apos;s support command buffer recording of gfx commands (&apos;deferred&apos;). Meaning: No commands are executed on the GPU until we Submit the cmd buffer.</para>
<para>OpenGL uses &apos;immediate&apos; mode instead where gfx commands are immediately processed and given to the GPU at a time of the drivers choosing. We use &apos;Ops&apos; functions to record our OpenGL function in a list and only execute them in OpenGL during the SubmitCmds phase.</para>
<para>This has two benefits:</para>
<para><orderedlist>
<listitem><para>OpenGL behaves more like Metal and Vulkan. So when clients write <ref refid="class_hgi" kindref="compound">Hgi</ref> code they get similar behavior in gpu command execution across all backends. For example, if you are running with <ref refid="class_hgi_g_l" kindref="compound">HgiGL</ref> and recording commands into a Hgi***Cmds object and forget to call &apos;SubmitCmds&apos; you will notice that your commands are not executed on the GPU, just like what would happen if you were running with HgiMetal.</para>
</listitem><listitem><para>It lets us satisfy the <ref refid="class_hgi" kindref="compound">Hgi</ref> requirement that Hgi***Cmds objects must be able to do their recording on secondary threads. </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <location file="pxr/imaging/hgiGL/ops.h" line="71" column="1" bodyfile="pxr/imaging/hgiGL/ops.h" bodystart="70" bodyend="195"/>
    <listofallmembers>
      <member refid="class_hgi_g_l_ops_1a760f2711a1fb54673e68fd56a3b4430b" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>BindFramebufferOp</name></member>
      <member refid="class_hgi_g_l_ops_1a2eadea6663a3a948182d233ea8a34bfd" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>BindPipeline</name></member>
      <member refid="class_hgi_g_l_ops_1a3325943d569c284ac0156e6ba6b3042b" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>BindPipeline</name></member>
      <member refid="class_hgi_g_l_ops_1ac4bb9ab800d9988d57daf886f3f5e5ef" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>BindResources</name></member>
      <member refid="class_hgi_g_l_ops_1a1fb51bad32f0abeffaf7ac10d6c8e617" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>BindVertexBuffers</name></member>
      <member refid="class_hgi_g_l_ops_1ab6c161b9cfb2cdf91ace8469a62a9c7d" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyBufferCpuToGpu</name></member>
      <member refid="class_hgi_g_l_ops_1aa656bb0a0719cb636415ea65c3c5f391" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyBufferGpuToCpu</name></member>
      <member refid="class_hgi_g_l_ops_1ad3af2b3f82207c6659d97102e666ddce" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyBufferGpuToGpu</name></member>
      <member refid="class_hgi_g_l_ops_1ac5db4dbf237df6de11b3d00e90190cdc" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyBufferToTexture</name></member>
      <member refid="class_hgi_g_l_ops_1a2ee07bf473a023644275e60bdaee4aa3" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyTextureCpuToGpu</name></member>
      <member refid="class_hgi_g_l_ops_1a09ec5a32363e8300d42b0cca0bc28001" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyTextureGpuToCpu</name></member>
      <member refid="class_hgi_g_l_ops_1aacccc3b68c49d32085486eb316e0fb41" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>CopyTextureToBuffer</name></member>
      <member refid="class_hgi_g_l_ops_1a5306ad90085fd781e5ac0ab874365a39" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>Dispatch</name></member>
      <member refid="class_hgi_g_l_ops_1afc25279c9119f9ff0d208b86a7407869" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>Draw</name></member>
      <member refid="class_hgi_g_l_ops_1abeebc92c8720f379ebadc02a4e40f926" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>DrawIndexed</name></member>
      <member refid="class_hgi_g_l_ops_1a43875f30c338142f57a3231bf8e51b18" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>DrawIndexedIndirect</name></member>
      <member refid="class_hgi_g_l_ops_1a335321db800b096234e0007b467a0ba4" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>DrawIndirect</name></member>
      <member refid="class_hgi_g_l_ops_1a8991968ed93cf81e8e9e5d8d97bcfc2f" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>FillBuffer</name></member>
      <member refid="class_hgi_g_l_ops_1a251caea7c0ff579214958aefbeef89e6" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>GenerateMipMaps</name></member>
      <member refid="class_hgi_g_l_ops_1ab16649087927e58d1ebf3452847e3fdd" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>InsertMemoryBarrier</name></member>
      <member refid="class_hgi_g_l_ops_1a69b74923f28658b853d15669fe860693" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>PopDebugGroup</name></member>
      <member refid="class_hgi_g_l_ops_1a64ff47912a0ba3d8969b812fb5e7d64d" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>PushDebugGroup</name></member>
      <member refid="class_hgi_g_l_ops_1a7e609d3cc61bd64e0f6e458bd28d7c07" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>ResolveFramebuffer</name></member>
      <member refid="class_hgi_g_l_ops_1af8c7a6f80729ef48421f339153d8be52" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>SetConstantValues</name></member>
      <member refid="class_hgi_g_l_ops_1a0d3e2ee2aa97866bf96d45ea7272d0e4" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>SetConstantValues</name></member>
      <member refid="class_hgi_g_l_ops_1a08d6b2201b71722c064295aace44ca19" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>SetScissor</name></member>
      <member refid="class_hgi_g_l_ops_1afc92ca5fdc4e8dc31bb2ade1cf0bf0a0" prot="public" virt="non-virtual"><scope>HgiGLOps</scope><name>SetViewport</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
