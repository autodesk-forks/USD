<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_enum" kind="class" language="C++" prot="public">
    <compoundname>TfEnum</compoundname>
    <includes refid="enum_8h" local="no">enum.h</includes>
      <sectiondef kind="user-defined">
      <header>Retrieving Corresponding Names and Enumerated Values</header>
      <description><para>The methods in this group can be used to retrieve corresponding names and values.</para>
<para>The correspondences are set up with the <computeroutput><ref refid="group__group__tf___runtime_typing_1ga4acc4a9fb73df5ff2216db8441436132" kindref="member">TF_ADD_ENUM_NAME()</ref></computeroutput> macro. </para>
</description>
      <memberdef kind="function" id="class_tf_enum_1a16a13178a4168911d8be66276c3e465b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>static TF_API std::string GetName</definition>
        <argsstring>(TfEnum val)</argsstring>
        <name>GetName</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns the name associated with an enumerated value. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no such name registered, an empty string is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a6a18ac8f440e7c84277f1fec7c0d9c7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>static TF_API std::string GetFullName</definition>
        <argsstring>(TfEnum val)</argsstring>
        <name>GetFullName</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns the fully-qualified name for an enumerated value. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a fully-qualified enumerated value name (e.g., <computeroutput>&quot;Season::WINTER&quot;</computeroutput>) associated with the given value. If there is no such name registered, an empty string is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1af0c1c00f51cd9926938791eecd699a6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>static TF_API std::string GetDisplayName</definition>
        <argsstring>(TfEnum val)</argsstring>
        <name>GetDisplayName</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns the display name for an enumerated value. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a user interface-suitable string for the given enumerated value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a7a153d4259f51e20a7fe7156bdbc969b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; GetAllNames</definition>
        <argsstring>(TfEnum val)</argsstring>
        <name>GetAllNames</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns a vector of all the names associated with an enum type. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a vector of all the names associated with the enum that contains the type <computeroutput>val</computeroutput>. The names are not fully qualified. For example, <computeroutput>TfEnum::GetAllNames(WINTER)</computeroutput> would return a vector containing &quot;SPRING&quot;, &quot;SUMMER&quot;, &quot;AUTUMN&quot;, and &quot;WINTER&quot;.</para>
<para>If there are no such names registered, an empty vector is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="316" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1af3fcd27205de9d1bed6b78f3802c46b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::vector&lt; std::string &gt;</type>
        <definition>static TF_API std::vector&lt;std::string&gt; GetAllNames</definition>
        <argsstring>(const std::type_info &amp;ti)</argsstring>
        <name>GetAllNames</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a52b60f06d37b0fff4ca3b2196801750f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; GetAllNames</definition>
        <argsstring>()</argsstring>
        <name>GetAllNames</name>
        <briefdescription>
<para>Returns a vector of all the names associated with an enum type. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a vector of all the names associated with the enum type <computeroutput>T</computeroutput>. The names are not fully qualified. For example, <computeroutput><ref refid="class_tf_enum_1a52b60f06d37b0fff4ca3b2196801750f" kindref="member">TfEnum::GetAllNames&lt;Season&gt;()</ref></computeroutput> would return a vector containing &quot;SPRING&quot;, &quot;SUMMER&quot;, &quot;AUTUMN&quot;, and &quot;WINTER&quot;.</para>
<para>If there are no such names registered, an empty vector is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="332" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1af054805fb6124d39dc7494c64c088bfe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API const std::type_info *</type>
        <definition>static TF_API const std::type_info* GetTypeFromName</definition>
        <argsstring>(const std::string &amp;typeName)</argsstring>
        <name>GetTypeFromName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Returns the typeid for a given enum type name. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a pointer to the type_info associated with the enum that has the type name <computeroutput>typeName</computeroutput>. If no such enum is registered, returns NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a4e99b865437c741d78b8f494b08eb1fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T GetValueFromName</definition>
        <argsstring>(const std::string &amp;name, bool *foundIt=NULL)</argsstring>
        <name>GetValueFromName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>foundIt</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the enumerated value for a name. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no such name registered, this returns -1. Since -1 can sometimes be a valid value, the <computeroutput>foundIt</computeroutput> flag pointer, if not <computeroutput>NULL</computeroutput>, is set to <computeroutput>true</computeroutput> if the name was found and <computeroutput>false</computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="350" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a05fbbd3eeb624cf0c7a1260f45959efb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
        <definition>static TF_API TfEnum GetValueFromName</definition>
        <argsstring>(const std::type_info &amp;ti, const std::string &amp;name, bool *foundIt=NULL)</argsstring>
        <name>GetValueFromName</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>foundIt</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the enumerated value for a name. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a template-independent version of <computeroutput><ref refid="class_tf_enum_1a4e99b865437c741d78b8f494b08eb1fe" kindref="member">GetValueFromName()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a3ce8986e9b28de4d2a447fcb0b684ddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
        <definition>static TF_API TfEnum GetValueFromFullName</definition>
        <argsstring>(const std::string &amp;fullname, bool *foundIt=NULL)</argsstring>
        <name>GetValueFromFullName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fullname</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>foundIt</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the enumerated value for a fully-qualified name. </para>
        </briefdescription>
        <detaileddescription>
<para>This takes a fully-qualified enumerated value name (e.g., <computeroutput>&quot;Season::WINTER&quot;</computeroutput>) and returns the associated value. If there is no such name, this returns -1. Since -1 can sometimes be a valid value, the <computeroutput>foundIt</computeroutput> flag pointer, if not <computeroutput>NULL</computeroutput>, is set to <computeroutput>true</computeroutput> if the name was found and <computeroutput>false</computeroutput> otherwise. Also, since this is not a templated function, it has to return a generic value type, so we use <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1ab51e4760cae95cfdfad4c8984243a7bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>static TF_API bool IsKnownEnumType</definition>
        <argsstring>(const std::string &amp;typeName)</argsstring>
        <name>IsKnownEnumType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>typeName</computeroutput> is a known enum type. </para>
        </briefdescription>
        <detaileddescription>
<para>If any enum whose demangled type name is <computeroutput>typeName</computeroutput> has been added via <computeroutput><ref refid="group__group__tf___runtime_typing_1ga4acc4a9fb73df5ff2216db8441436132" kindref="member">TF_ADD_ENUM_NAME()</ref></computeroutput>, this function returns true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="381" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_enum_1ad9f048f66a63bcba82b8c3c4fb49b978" prot="private" static="no" mutable="no">
        <type>const std::type_info *</type>
        <definition>const std::type_info* _typeInfo</definition>
        <argsstring></argsstring>
        <name>_typeInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="426" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_enum_1a357604b7339dd26ec245b54c4eae229e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="427" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_enum_1a0b62b30d58d969d7e3c54d53ad942473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfEnum</definition>
        <argsstring>()</argsstring>
        <name>TfEnum</name>
        <briefdescription>
<para>Default constructor assigns integer value zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="140" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1ac425b6e1b48c4d3fe24f0dd59ecd9293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfEnum</definition>
        <argsstring>(T value, std::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; *=0)</argsstring>
        <name>TfEnum</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initializes value to enum variable <computeroutput>value</computeroutput> of enum type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="147" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a1e8e01bae2630afa86c3f88d1192f430" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfEnum</definition>
        <argsstring>(const std::type_info &amp;ti, int value)</argsstring>
        <name>TfEnum</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Initializes value to integral value <computeroutput>value</computeroutput> with enum type <computeroutput>ti</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is only for use in extreme circumstances; there is no way for an implementation to guarantee that <computeroutput>ti</computeroutput> is really an enum type, and/or that <computeroutput>value</computeroutput> is a valid value for that enum type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="158" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a125e17eda295551164f2eebe8afc80e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if <computeroutput>*this</computeroutput> and <computeroutput>t</computeroutput> have both the same type and value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="164" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1ae9a7baee39562869e576c8af367c7fe3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>TfEnum::operator==(const TfEnum&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="171" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a483b821c5c8ed9e98c87ecd406130396" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Less than comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Enum values belonging to the same type are ordered according to their numeric value. Enum values belonging to different types are ordered in a consistent but arbitrary way which may vary between program runs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="179" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a9d024bb9b8965505b2bb55651c69d3d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Less than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>TfEnum::operator&lt;(const TfEnum&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="186" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a0b8309d33b7e9d7467110103b2453386" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Greater than operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>TfEnum::operator&lt;(const TfEnum&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="192" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1ac6513e549a427b2c5e2361fd64e15370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const TfEnum &amp;t) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Greater than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>TfEnum::operator&lt;(const TfEnum&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="198" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a5b031671b78491275fe19d1690382ac8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_enum&lt;T&gt;::value, bool&gt; operator==</definition>
        <argsstring>(T value) const</argsstring>
        <name>operator==</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>True if <computeroutput>*this</computeroutput> has been assigned with <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="205" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a51c32a654cdcbc37152e590341ed4d37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_enum&lt;T&gt;::value, bool&gt; operator!=</definition>
        <argsstring>(T value) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>False if <computeroutput>*this</computeroutput> has been assigned with <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="212" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a6cc1b146723c266ae69fb873bcb2df67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool IsA</definition>
        <argsstring>() const</argsstring>
        <name>IsA</name>
        <briefdescription>
<para>True if <computeroutput>*this</computeroutput> has been assigned any enumerated value of type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="232" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1aa457be40341a844fdefde1a6b04c75ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsA</definition>
        <argsstring>(const std::type_info &amp;t) const</argsstring>
        <name>IsA</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if <computeroutput>*this</computeroutput> has been assigned any enumerated value of type <computeroutput>T</computeroutput> with <computeroutput>typeid(T)==t</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="238" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1aeac9171322379656d36c3f3236648325" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info&amp; GetType</definition>
        <argsstring>() const</argsstring>
        <name>GetType</name>
        <briefdescription>
<para>Returns the type of the enum value, as an <computeroutput>std::type_info</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="243" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a07b749b2292064061caddf7c220b2f6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int &amp;</type>
        <definition>const int&amp; GetValueAsInt</definition>
        <argsstring>() const</argsstring>
        <name>GetValueAsInt</name>
        <briefdescription>
<para>Returns the integral value of the enum value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="248" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1afb08a595743314d97cf25c2a2e89c703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GetValue</definition>
        <argsstring>() const</argsstring>
        <name>GetValue</name>
        <briefdescription>
<para>Returns the enum value for the enum type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function can cause your program to abort if not used properly.</para>
</simplesect>
If it is possible that the enum value is not of type <computeroutput>T</computeroutput>, first use <computeroutput><ref refid="class_tf_enum_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA()</ref></computeroutput> to test whether the enum value is of type <computeroutput>T</computeroutput> before calling <computeroutput><ref refid="class_tf_enum_1afb08a595743314d97cf25c2a2e89c703" kindref="member">GetValue&lt;T&gt;()</ref></computeroutput>.</para>
<para>Note that if <computeroutput><ref refid="class_tf_enum_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA&lt;T&gt;()</ref></computeroutput> succeeds, then <computeroutput><ref refid="class_tf_enum_1afb08a595743314d97cf25c2a2e89c703" kindref="member">GetValue&lt;T&gt;()</ref></computeroutput> will also succeed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="264" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a8b661d00358adea68affef384db73360" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;                 std::is_integral&lt;T&gt;::value ||                 std::is_enum&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>operator T</definition>
        <argsstring>() const</argsstring>
        <name>operator T</name>
        <briefdescription>
<para>Conversion operator for enum and integral types only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="277" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="277" bodyend="280"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_enum_1acdd900dd697582d21b03597d5ff935e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend std::enable_if_t&lt; std::is_enum&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_enum&lt;T&gt;::value, bool&gt; operator==</definition>
        <argsstring>(T val, TfEnum const &amp;e)</argsstring>
        <name>operator==</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Compare a literal enum value <emphasis>val</emphasis> of enum type <emphasis>T</emphasis> with <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> <emphasis>e</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="219" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_enum_1aa1574d02b9a5e932ab4e224008bd1d28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend std::enable_if_t&lt; std::is_enum&lt; T &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;std::is_enum&lt;T&gt;::value, bool&gt; operator!=</definition>
        <argsstring>(T val, TfEnum const &amp;e)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Compare a literal enum value <emphasis>val</emphasis> of enum type <emphasis>T</emphasis> with <ref refid="class_tf_enum" kindref="compound">TfEnum</ref> <emphasis>e</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="226" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="226" bodyend="228"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_tf_enum_1a1ac6bf04111cc2e1655797f769835637" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>static TF_API void _AddName</definition>
        <argsstring>(TfEnum val, const std::string &amp;valName, const std::string &amp;displayName=&quot;&quot;)</argsstring>
        <name>_AddName</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>valName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>displayName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Associates a name with an enumerated value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is called by the <computeroutput><ref refid="group__group__tf___runtime_typing_1ga4acc4a9fb73df5ff2216db8441436132" kindref="member">TF_ADD_ENUM_NAME()</ref></computeroutput> macro, and should NOT be called directly. Instead, call <ref refid="class_tf_enum_1a2056dd97fb0a0a922ba0050c3b32990e" kindref="member">AddName()</ref>, which does exactly the same thing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a2056dd97fb0a0a922ba0050c3b32990e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void AddName</definition>
        <argsstring>(TfEnum val, const std::string &amp;valName, const std::string &amp;displayName=&quot;&quot;)</argsstring>
        <name>AddName</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>valName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>displayName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Associates a name with an enumerated value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_tf_enum_1a1ac6bf04111cc2e1655797f769835637" kindref="member">_AddName()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="396" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="396" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1ad4d439f3bd9bb0751124a658240294ff" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
        <definition>static TfEnum IntegralEnum</definition>
        <argsstring>(T value)</argsstring>
        <name>IntegralEnum</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="403" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="403" bodyend="408"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_enum_1a54ee28d0c60a44125fb28e4e8fd39f8a" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfEnum</definition>
        <argsstring>(int value)</argsstring>
        <name>TfEnum</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="412" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a87f8d39b361d2274578d4675958d7f13" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfEnum</definition>
        <argsstring>(size_t value)</argsstring>
        <name>TfEnum</name>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="418" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_enum_1a5006e0be9d4d11a4f159ff28682d9f79" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void _FatalGetValueError</definition>
        <argsstring>(std::type_info const &amp;typeInfo) const</argsstring>
        <name>_FatalGetValueError</name>
        <param>
          <type>std::type_info const &amp;</type>
          <declname>typeInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/enum.h" line="424" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An enum class that records both enum type and enum value. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="class_tf_enum_1cppcode_runtimeTyping">
<title>Run-Time Typing</title>
<para>A <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput> can hold an enum variable of any enum type, while still being able to distinguish between various enum types. Here is an example:</para>
<para><programlisting><codeline><highlight class="normal">enum<sp/>Monsters<sp/>{<sp/>SULLEY<sp/>=<sp/>0,<sp/>MIKE,<sp/>ROZ<sp/>};</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>Fish<sp/>{<sp/>NEMO<sp/>=<sp/>0,<sp/>FATHER,<sp/>DORY<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TfEnum<sp/>t1<sp/>=<sp/>MIKE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>NEMO;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">t1<sp/>==<sp/>MIKE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>yields<sp/>true</highlight></codeline>
<codeline><highlight class="normal">t2<sp/>==<sp/>NEMO;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>yields<sp/>true</highlight></codeline>
<codeline><highlight class="normal">t1<sp/>==<sp/>t2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>yields<sp/>false</highlight></codeline>
<codeline><highlight class="normal">t1<sp/>==<sp/>SULLEY;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>yields<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">t1.IsA&lt;Monsters&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>yields<sp/>true</highlight></codeline>
<codeline><highlight class="normal">t1.IsA&lt;Fish&gt;();<sp/><sp/><sp/><sp/>//<sp/>yields<sp/>false</highlight></codeline>
</programlisting></para>
<para>Even though <computeroutput>NEMO</computeroutput> and <computeroutput>SULLEY</computeroutput> both are represented with integral value zero, <computeroutput>t1</computeroutput> and <computeroutput>t2</computeroutput> compare false. A <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput> can be passed by value, assigned, etc. just like a regular <computeroutput>Enum</computeroutput> variable. A <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput> can also hold a plain integer, which will compare false against any other enum variable.</para>
</sect1>
<sect1 id="class_tf_enum_1cppcode_enumvals">
<title>Associating Names with Enumerated Values</title>
<para>The <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput> class can also be used to represent enumerated values as strings. This can be useful for storing enum values in files for later retrieval.</para>
<para>Use the <computeroutput><ref refid="group__group__tf___runtime_typing_1ga4acc4a9fb73df5ff2216db8441436132" kindref="member">TF_ADD_ENUM_NAME()</ref></computeroutput> macro to set up and enable strings for the values of an enum. Once this is done, several static <computeroutput><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></computeroutput> methods may be used to look up names corresponding to enum values and vice-versa.</para>
<para>For example, see <computeroutput><ref refid="class_tf_registry_manager" kindref="compound">TfRegistryManager</ref></computeroutput> to understand the use of the <computeroutput><ref refid="registry_manager_8h_1ab1604c7efa4277ed6ee17fddaf70075f" kindref="member">TF_REGISTRY_FUNCTION()</ref></computeroutput> macro below:</para>
</sect1>
<sect1 id="class_tf_enum_1cppcode_enumRegMacro">
<title>Enum Registration Macro</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>header<sp/>file</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Declare<sp/>an<sp/>enumerated<sp/>type<sp/>with<sp/>some<sp/>values</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>Season<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPRING,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SUMMER<sp/>=<sp/>3,<sp/>//<sp/>It&apos;s<sp/>ok<sp/>to<sp/>have<sp/>initializers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AUTUMN,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WINTER</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>source<sp/>file</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;pxr/base/tf/registryManager.h&quot;</highlight></codeline>
<codeline><highlight class="normal">TF_REGISTRY_FUNCTION(TfEnum)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Register<sp/>the<sp/>names<sp/>for<sp/>the<sp/>values:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TF_ADD_ENUM_NAME(SPRING);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TF_ADD_ENUM_NAME(SUMMER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TF_ADD_ENUM_NAME(AUTUMN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TF_ADD_ENUM_NAME(WINTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>another<sp/>source<sp/>file:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Look<sp/>up<sp/>the<sp/>name<sp/>for<sp/>a<sp/>value:</highlight></codeline>
<codeline><highlight class="normal">string<sp/>name1<sp/>=<sp/>TfEnum::GetName(SUMMER);<sp/><sp/><sp/><sp/><sp/>//<sp/>Returns<sp/>&quot;SUMMER&quot;</highlight></codeline>
<codeline><highlight class="normal">string<sp/>name2<sp/>=<sp/>TfEnum::GetFullName(SUMMER);<sp/>//<sp/>Returns<sp/>&quot;Season::SUMMER&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Look<sp/>up<sp/>the<sp/>value<sp/>for<sp/>a<sp/>name:</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>found;</highlight></codeline>
<codeline><highlight class="normal">Season<sp/>s1<sp/>=<sp/>TfEnum::GetValueFromName&lt;Season&gt;(&quot;AUTUMN&quot;,<sp/>&amp;found);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>4,<sp/>sets<sp/>found<sp/>to<sp/>true</highlight></codeline>
<codeline><highlight class="normal">Season<sp/>s2<sp/>=<sp/>TfEnum::GetValueFromName&lt;Season&gt;(&quot;MONDAY&quot;,<sp/>&amp;found);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>-1,<sp/>sets<sp/>found<sp/>to<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Look<sp/>up<sp/>a<sp/>fully-qualified<sp/>name.<sp/>Since<sp/>this<sp/>is<sp/>not<sp/>a<sp/>templated</highlight></codeline>
<codeline><highlight class="normal">//<sp/>function,<sp/>it<sp/>has<sp/>to<sp/>return<sp/>a<sp/>generic<sp/>value<sp/>type,<sp/>so<sp/>we<sp/>use</highlight></codeline>
<codeline><highlight class="normal">//<sp/>TfEnum.</highlight></codeline>
<codeline><highlight class="normal">TfEnum<sp/>s3<sp/>=<sp/>TfEnum::GetValueFromFullName(&quot;Season::WINTER&quot;,<sp/>&amp;found);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>5,<sp/>sets<sp/>found<sp/>to<sp/>\c<sp/>true</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="pxr/base/tf/enum.h" line="137" column="1" bodyfile="pxr/base/tf/enum.h" bodystart="136" bodyend="428"/>
    <listofallmembers>
      <member refid="class_tf_enum_1a1ac6bf04111cc2e1655797f769835637" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>_AddName</name></member>
      <member refid="class_tf_enum_1a5006e0be9d4d11a4f159ff28682d9f79" prot="private" virt="non-virtual"><scope>TfEnum</scope><name>_FatalGetValueError</name></member>
      <member refid="class_tf_enum_1ad9f048f66a63bcba82b8c3c4fb49b978" prot="private" virt="non-virtual"><scope>TfEnum</scope><name>_typeInfo</name></member>
      <member refid="class_tf_enum_1a357604b7339dd26ec245b54c4eae229e" prot="private" virt="non-virtual"><scope>TfEnum</scope><name>_value</name></member>
      <member refid="class_tf_enum_1a2056dd97fb0a0a922ba0050c3b32990e" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>AddName</name></member>
      <member refid="class_tf_enum_1a7a153d4259f51e20a7fe7156bdbc969b" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetAllNames</name></member>
      <member refid="class_tf_enum_1af3fcd27205de9d1bed6b78f3802c46b5" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetAllNames</name></member>
      <member refid="class_tf_enum_1a52b60f06d37b0fff4ca3b2196801750f" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetAllNames</name></member>
      <member refid="class_tf_enum_1af0c1c00f51cd9926938791eecd699a6d" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetDisplayName</name></member>
      <member refid="class_tf_enum_1a6a18ac8f440e7c84277f1fec7c0d9c7a" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetFullName</name></member>
      <member refid="class_tf_enum_1a16a13178a4168911d8be66276c3e465b" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetName</name></member>
      <member refid="class_tf_enum_1aeac9171322379656d36c3f3236648325" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetType</name></member>
      <member refid="class_tf_enum_1af054805fb6124d39dc7494c64c088bfe" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetTypeFromName</name></member>
      <member refid="class_tf_enum_1afb08a595743314d97cf25c2a2e89c703" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetValue</name></member>
      <member refid="class_tf_enum_1a07b749b2292064061caddf7c220b2f6c" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetValueAsInt</name></member>
      <member refid="class_tf_enum_1a3ce8986e9b28de4d2a447fcb0b684ddb" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetValueFromFullName</name></member>
      <member refid="class_tf_enum_1a4e99b865437c741d78b8f494b08eb1fe" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetValueFromName</name></member>
      <member refid="class_tf_enum_1a05fbbd3eeb624cf0c7a1260f45959efb" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>GetValueFromName</name></member>
      <member refid="class_tf_enum_1ad4d439f3bd9bb0751124a658240294ff" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>IntegralEnum</name></member>
      <member refid="class_tf_enum_1a6cc1b146723c266ae69fb873bcb2df67" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>IsA</name></member>
      <member refid="class_tf_enum_1aa457be40341a844fdefde1a6b04c75ef" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>IsA</name></member>
      <member refid="class_tf_enum_1ab51e4760cae95cfdfad4c8984243a7bc" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>IsKnownEnumType</name></member>
      <member refid="class_tf_enum_1a8b661d00358adea68affef384db73360" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator T</name></member>
      <member refid="class_tf_enum_1ae9a7baee39562869e576c8af367c7fe3" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator!=</name></member>
      <member refid="class_tf_enum_1a51c32a654cdcbc37152e590341ed4d37" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator!=</name></member>
      <member refid="class_tf_enum_1aa1574d02b9a5e932ab4e224008bd1d28" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator!=</name></member>
      <member refid="class_tf_enum_1a483b821c5c8ed9e98c87ecd406130396" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator&lt;</name></member>
      <member refid="class_tf_enum_1a9d024bb9b8965505b2bb55651c69d3d7" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator&lt;=</name></member>
      <member refid="class_tf_enum_1a125e17eda295551164f2eebe8afc80e0" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator==</name></member>
      <member refid="class_tf_enum_1a5b031671b78491275fe19d1690382ac8" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator==</name></member>
      <member refid="class_tf_enum_1acdd900dd697582d21b03597d5ff935e1" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator==</name></member>
      <member refid="class_tf_enum_1a0b8309d33b7e9d7467110103b2453386" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator&gt;</name></member>
      <member refid="class_tf_enum_1ac6513e549a427b2c5e2361fd64e15370" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>operator&gt;=</name></member>
      <member refid="class_tf_enum_1a0b62b30d58d969d7e3c54d53ad942473" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>TfEnum</name></member>
      <member refid="class_tf_enum_1ac425b6e1b48c4d3fe24f0dd59ecd9293" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>TfEnum</name></member>
      <member refid="class_tf_enum_1a1e8e01bae2630afa86c3f88d1192f430" prot="public" virt="non-virtual"><scope>TfEnum</scope><name>TfEnum</name></member>
      <member refid="class_tf_enum_1a54ee28d0c60a44125fb28e4e8fd39f8a" prot="private" virt="non-virtual"><scope>TfEnum</scope><name>TfEnum</name></member>
      <member refid="class_tf_enum_1a87f8d39b361d2274578d4675958d7f13" prot="private" virt="non-virtual"><scope>TfEnum</scope><name>TfEnum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
