<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_shader_program" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HgiShaderProgram</compoundname>
    <derivedcompoundref refid="class_hgi_g_l_shader_program" prot="public" virt="non-virtual">HgiGLShaderProgram</derivedcompoundref>
    <includes refid="shader_program_8h" local="no">shaderProgram.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_hgi_shader_program_1a0071d56df98bb283938d51aab4f6f40d" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_hgi_shader_program_desc" kindref="compound">HgiShaderProgramDesc</ref></type>
        <definition>HgiShaderProgramDesc _descriptor</definition>
        <argsstring></argsstring>
        <name>_descriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="125" column="1" bodyfile="pxr/imaging/hgi/shaderProgram.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_shader_program_1aa1c85326c0cf5d88a16c5100d4190c44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGI_API</type>
        <definition>virtual HGI_API ~HgiShaderProgram</definition>
        <argsstring>()</argsstring>
        <name>~HgiShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a19d7b188a82322b49ffc70cb77bd717a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API <ref refid="struct_hgi_shader_program_desc" kindref="compound">HgiShaderProgramDesc</ref> const  &amp;</type>
        <definition>HGI_API HgiShaderProgramDesc const&amp; GetDescriptor</definition>
        <argsstring>() const</argsstring>
        <name>GetDescriptor</name>
        <briefdescription>
<para>The descriptor describes the object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a14252f4137a1cb84ced798214eabe2d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API bool</type>
        <definition>virtual HGI_API bool IsValid</definition>
        <argsstring>() const =0</argsstring>
        <name>IsValid</name>
        <reimplementedby refid="class_hgi_g_l_shader_program_1a9ba9cc57ab3c62115348a872b214da24">IsValid</reimplementedby>
        <briefdescription>
<para>Returns false if any shader compile errors occured. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a0d8a616ea20c7ebe8b03436ddbde5e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API std::string const  &amp;</type>
        <definition>virtual HGI_API std::string const&amp; GetCompileErrors</definition>
        <argsstring>()=0</argsstring>
        <name>GetCompileErrors</name>
        <reimplementedby refid="class_hgi_g_l_shader_program_1a9fa577dda7e07c0026be8278fe68aea9">GetCompileErrors</reimplementedby>
        <briefdescription>
<para>Returns shader compile errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1aec14b2f1d79fdc969f4866416c92b1f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API HgiShaderFunctionHandleVector const  &amp;</type>
        <definition>virtual HGI_API HgiShaderFunctionHandleVector const&amp; GetShaderFunctions</definition>
        <argsstring>() const =0</argsstring>
        <name>GetShaderFunctions</name>
        <reimplementedby refid="class_hgi_g_l_shader_program_1a1db57fdfc370ccc29f4f27eba2c95247">GetShaderFunctions</reimplementedby>
        <briefdescription>
<para>Returns the shader functions that are part of this program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1afb9f5da99a13e9adcab7f87cb9a6ad94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API size_t</type>
        <definition>virtual HGI_API size_t GetByteSizeOfResource</definition>
        <argsstring>() const =0</argsstring>
        <name>GetByteSizeOfResource</name>
        <reimplementedby refid="class_hgi_g_l_shader_program_1aaf2f07918f87f57adccda3e250297da7">GetByteSizeOfResource</reimplementedby>
        <briefdescription>
<para>Returns the byte size of the GPU shader program. </para>
        </briefdescription>
        <detaileddescription>
<para>APIs that do not have programs can return the combined byte size of the shader functions used by the program. This can be helpful if the application wishes to tally up memory usage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a1c1b84de203362af87c23d73c8f8d395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API uint64_t</type>
        <definition>virtual HGI_API uint64_t GetRawResource</definition>
        <argsstring>() const =0</argsstring>
        <name>GetRawResource</name>
        <reimplementedby refid="class_hgi_g_l_shader_program_1adc3ffb4c04b3ab04225e25cf3f7dfe05">GetRawResource</reimplementedby>
        <briefdescription>
<para>This function returns the handle to the <ref refid="class_hgi" kindref="compound">Hgi</ref> backend&apos;s gpu resource, cast to a uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should avoid using this function and instead use <ref refid="class_hgi" kindref="compound">Hgi</ref> base classes so that client code works with any <ref refid="class_hgi" kindref="compound">Hgi</ref> platform. For transitioning code to <ref refid="class_hgi" kindref="compound">Hgi</ref>, it can however we useful to directly access a platform&apos;s internal resource handles. There is no safety provided in using this. If you by accident pass a HgiMetal resource into an OpenGL call, bad things may happen. In OpenGL this returns the GLuint resource name. In Metal, Vulkan this returns 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_shader_program_1a28a1413604d68979b95e0cd55d937b9c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API</type>
        <definition>HGI_API HgiShaderProgram</definition>
        <argsstring>(HgiShaderProgramDesc const &amp;desc)</argsstring>
        <name>HgiShaderProgram</name>
        <param>
          <type><ref refid="struct_hgi_shader_program_desc" kindref="compound">HgiShaderProgramDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_shader_program_1a94970d66af5cf72f149db97dfb00faf7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiShaderProgram</definition>
        <argsstring>()=delete</argsstring>
        <name>HgiShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a1c780c85e5b011a9937a3cf79acf0453" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_shader_program" kindref="compound">HgiShaderProgram</ref> &amp;</type>
        <definition>HgiShaderProgram&amp; operator=</definition>
        <argsstring>(const HgiShaderProgram &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_shader_program" kindref="compound">HgiShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_shader_program_1a9fc42e197ae2cfcb09fb17679546b12b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiShaderProgram</definition>
        <argsstring>(const HgiShaderProgram &amp;)=delete</argsstring>
        <name>HgiShaderProgram</name>
        <param>
          <type>const <ref refid="class_hgi_shader_program" kindref="compound">HgiShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderProgram.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a collection of shader functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This object does not take ownership of the shader functions and does not destroy them automatically. The client must destroy the shader functions when the program is detroyed, because only the client knows if the shader functions are used by other shader programs. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3984">
        <label>HgiShaderProgram</label>
        <link refid="class_hgi_shader_program"/>
      </node>
      <node id="3985">
        <label>HgiGLShaderProgram</label>
        <link refid="class_hgi_g_l_shader_program"/>
        <childnode refid="3984" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3987">
        <label>HgiShaderProgramDesc</label>
        <link refid="struct_hgi_shader_program_desc"/>
      </node>
      <node id="3986">
        <label>HgiShaderProgram</label>
        <link refid="class_hgi_shader_program"/>
        <childnode refid="3987" relation="usage">
          <edgelabel>_descriptor</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgi/shaderProgram.h" line="81" column="1" bodyfile="pxr/imaging/hgi/shaderProgram.h" bodystart="80" bodyend="131"/>
    <listofallmembers>
      <member refid="class_hgi_shader_program_1a0071d56df98bb283938d51aab4f6f40d" prot="protected" virt="non-virtual"><scope>HgiShaderProgram</scope><name>_descriptor</name></member>
      <member refid="class_hgi_shader_program_1afb9f5da99a13e9adcab7f87cb9a6ad94" prot="public" virt="pure-virtual"><scope>HgiShaderProgram</scope><name>GetByteSizeOfResource</name></member>
      <member refid="class_hgi_shader_program_1a0d8a616ea20c7ebe8b03436ddbde5e39" prot="public" virt="pure-virtual"><scope>HgiShaderProgram</scope><name>GetCompileErrors</name></member>
      <member refid="class_hgi_shader_program_1a19d7b188a82322b49ffc70cb77bd717a" prot="public" virt="non-virtual"><scope>HgiShaderProgram</scope><name>GetDescriptor</name></member>
      <member refid="class_hgi_shader_program_1a1c1b84de203362af87c23d73c8f8d395" prot="public" virt="pure-virtual"><scope>HgiShaderProgram</scope><name>GetRawResource</name></member>
      <member refid="class_hgi_shader_program_1aec14b2f1d79fdc969f4866416c92b1f2" prot="public" virt="pure-virtual"><scope>HgiShaderProgram</scope><name>GetShaderFunctions</name></member>
      <member refid="class_hgi_shader_program_1a28a1413604d68979b95e0cd55d937b9c" prot="protected" virt="non-virtual"><scope>HgiShaderProgram</scope><name>HgiShaderProgram</name></member>
      <member refid="class_hgi_shader_program_1a94970d66af5cf72f149db97dfb00faf7" prot="private" virt="non-virtual"><scope>HgiShaderProgram</scope><name>HgiShaderProgram</name></member>
      <member refid="class_hgi_shader_program_1a9fc42e197ae2cfcb09fb17679546b12b" prot="private" virt="non-virtual"><scope>HgiShaderProgram</scope><name>HgiShaderProgram</name></member>
      <member refid="class_hgi_shader_program_1a14252f4137a1cb84ced798214eabe2d3" prot="public" virt="pure-virtual"><scope>HgiShaderProgram</scope><name>IsValid</name></member>
      <member refid="class_hgi_shader_program_1a1c780c85e5b011a9937a3cf79acf0453" prot="private" virt="non-virtual"><scope>HgiShaderProgram</scope><name>operator=</name></member>
      <member refid="class_hgi_shader_program_1aa1c85326c0cf5d88a16c5100d4190c44" prot="public" virt="virtual"><scope>HgiShaderProgram</scope><name>~HgiShaderProgram</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
