<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_render_var" kind="class" language="C++" prot="public">
    <compoundname>UsdRenderVar</compoundname>
    <basecompoundref refid="class_usd_typed" prot="public" virt="non-virtual">UsdTyped</basecompoundref>
    <includes refid="var_8h" local="no">var.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_render_var_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="80" column="1" bodyfile="pxr/usd/usdRender/var.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_render_var_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="158" column="1" bodyfile="pxr/usd/usdRender/var.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_render_var_1a3e1ac5a44cc6ef2d5eae88bb7e7a0473" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRenderVar</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdRenderVar</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_render_var_1a89c560a905c67b18e491163261c1973b" kindref="member">UsdRenderVar::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="86" column="1" bodyfile="pxr/usd/usdRender/var.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a3bb104ddbe14e843388ced498526ebb5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRenderVar</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdRenderVar</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="94" column="1" bodyfile="pxr/usd/usdRender/var.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a75134278f729f14637052e06249b5b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API</type>
        <definition>virtual USDRENDER_API ~UsdRenderVar</definition>
        <argsstring>()</argsstring>
        <name>~UsdRenderVar</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a68511875c8cd5b08b75c8a13a8be7e21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetDataTypeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetDataTypeAttr</name>
        <briefdescription>
<para>The type of this channel, as a USD attribute type. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token dataType = &quot;color3f&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1ac5633f594b8b17321bda52477f763682" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateDataTypeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateDataTypeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_var_1a68511875c8cd5b08b75c8a13a8be7e21" kindref="member">GetDataTypeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a7c2d181348fda8eee9195c8282c91a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetSourceNameAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceNameAttr</name>
        <briefdescription>
<para>The renderer should look for an output of this name as the computed value for the RenderVar. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform string sourceName = &quot;&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>std::string   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;String   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a569ea2845e9d1603741ea94528348503" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateSourceNameAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateSourceNameAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_var_1a7c2d181348fda8eee9195c8282c91a56" kindref="member">GetSourceNameAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a6cff24a7aea59c030a52774b7f0761f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetSourceTypeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceTypeAttr</name>
        <briefdescription>
<para>Indicates the type of the source. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>&quot;raw&quot;: The name should be passed directly to the renderer. This is the default behavior.</para>
</listitem><listitem><para>&quot;primvar&quot;: This source represents the name of a primvar. Some renderers may use this to ensure that the primvar is provided; other renderers may require that a suitable material network be provided, in which case this is simply an advisory setting.</para>
</listitem><listitem><para>&quot;lpe&quot;: Specifies a Light Path Expression in the <ulink url="https://github.com/imageworks/OpenShadingLanguage/wiki/OSL-Light-Path-Expressions">OSL Light Path Expressions language</ulink> as the source for this RenderVar. Some renderers may use extensions to that syntax, which will necessarily be non-portable.</para>
</listitem><listitem><para>&quot;intrinsic&quot;: This setting is currently unimplemented, but represents a future namespace for UsdRender to provide portable baseline RenderVars, such as camera depth, that may have varying implementations for each renderer.</para>
</listitem></itemizedlist>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token sourceType = &quot;raw&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_render_2tokens_8h_1a0839e25f1ba9d721171eb25ab7a911b0" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>raw, primvar, lpe, intrinsic   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1adf76587702eaf12341d1e238b963f29e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateSourceTypeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateSourceTypeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_var_1a6cff24a7aea59c030a52774b7f0761f3" kindref="member">GetSourceTypeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="254" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_render_var_1a213b41b80903043bb63cfba685831205" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDRENDER_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a89c560a905c67b18e491163261c1973b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref></type>
        <definition>static USDRENDER_API UsdRenderVar Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdRenderVar(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1a947b6681f9a1c3e23f5a091d68fcbb16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref></type>
        <definition>static USDRENDER_API UsdRenderVar Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_render_var_1ab337deeefb883bb6bcb563c6c7c9e1fd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDRENDER_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_typed_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_render_var_1a843b95ad9d64c52fc862cd569bc623be" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDRENDER_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_var_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_render_var_1a6fb6bc8e96b6a96303733398a432ee9f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDRENDER_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_typed_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/var.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="class_usd_render_var" kindref="compound">UsdRenderVar</ref> describes a custom data variable for a render to produce. </para>
    </briefdescription>
    <detaileddescription>
<para>The prim describes the source of the data, which can be a shader output or an LPE (Light Path Expression), and also allows encoding of (generally renderer-specific) parameters that configure the renderer for computing the variable.</para>
<para><simplesect kind="note"><para>The name of the RenderVar prim drives the name of the data variable that the renderer will produce.</para>
</simplesect>
<simplesect kind="note"><para>In the future, UsdRender may standardize RenderVar representation for well-known variables under the sourceType <computeroutput>intrinsic</computeroutput>, such as <emphasis>r</emphasis>, <emphasis>g</emphasis>, <emphasis>b</emphasis>, <emphasis>a</emphasis>, <emphasis>z</emphasis>, or <emphasis>id</emphasis>.</para>
</simplesect>
For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_render_2tokens_8h_1a0839e25f1ba9d721171eb25ab7a911b0" kindref="member">UsdRenderTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdRenderTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7960">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7961" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7961">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7959">
        <label>UsdRenderVar</label>
        <link refid="class_usd_render_var"/>
        <childnode refid="7960" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7963">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7964" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7964">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7962">
        <label>UsdRenderVar</label>
        <link refid="class_usd_render_var"/>
        <childnode refid="7963" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdRender/var.h" line="75" column="1" bodyfile="pxr/usd/usdRender/var.h" bodystart="74" bodyend="267"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdRenderVar</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_render_var_1ab337deeefb883bb6bcb563c6c7c9e1fd" prot="protected" virt="virtual"><scope>UsdRenderVar</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdRenderVar</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_render_var_1a843b95ad9d64c52fc862cd569bc623be" prot="private" virt="non-virtual"><scope>UsdRenderVar</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_render_var_1a6fb6bc8e96b6a96303733398a432ee9f" prot="private" virt="virtual"><scope>UsdRenderVar</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdRenderVar</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdRenderVar</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_render_var_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdRenderVar</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_render_var_1ac5633f594b8b17321bda52477f763682" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>CreateDataTypeAttr</name></member>
      <member refid="class_usd_render_var_1a569ea2845e9d1603741ea94528348503" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>CreateSourceNameAttr</name></member>
      <member refid="class_usd_render_var_1adf76587702eaf12341d1e238b963f29e" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>CreateSourceTypeAttr</name></member>
      <member refid="class_usd_render_var_1a947b6681f9a1c3e23f5a091d68fcbb16" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>Define</name></member>
      <member refid="class_usd_render_var_1a89c560a905c67b18e491163261c1973b" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>Get</name></member>
      <member refid="class_usd_render_var_1a68511875c8cd5b08b75c8a13a8be7e21" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetDataTypeAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetPrim</name></member>
      <member refid="class_usd_render_var_1a213b41b80903043bb63cfba685831205" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_render_var_1a7c2d181348fda8eee9195c8282c91a56" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetSourceNameAttr</name></member>
      <member refid="class_usd_render_var_1a6cff24a7aea59c030a52774b7f0761f3" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>GetSourceTypeAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>operator bool</name></member>
      <member refid="class_usd_render_var_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>schemaKind</name></member>
      <member refid="class_usd_render_var_1a3e1ac5a44cc6ef2d5eae88bb7e7a0473" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdRenderVar</name></member>
      <member refid="class_usd_render_var_1a3bb104ddbe14e843388ced498526ebb5" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdRenderVar</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_render_var_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdRenderVar</scope><name>UsdTyped</name></member>
      <member refid="class_usd_render_var_1a75134278f729f14637052e06249b5b70" prot="public" virt="virtual"><scope>UsdRenderVar</scope><name>~UsdRenderVar</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdRenderVar</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdRenderVar</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
