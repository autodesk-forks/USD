<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_ar_resolver_context" kind="class" language="C++" prot="public">
    <compoundname>ArResolverContext</compoundname>
    <includes refid="resolver_context_8h" local="no">resolverContext.h</includes>
    <innerclass refid="struct_ar_resolver_context_1_1___typed" prot="private">ArResolverContext::_Typed</innerclass>
    <innerclass refid="struct_ar_resolver_context_1_1___untyped" prot="private">ArResolverContext::_Untyped</innerclass>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="class_ar_resolver_context_1aa6ac60c57271c9e5428b13566946d4ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API bool</type>
        <definition>AR_API bool operator==</definition>
        <argsstring>(const ArResolverContext &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a1ced99d378d3de8d2f80426a4035a232" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const ArResolverContext &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="197" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a2328a8b5b7a0971a98ed952acc70f3ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API bool</type>
        <definition>AR_API bool operator&lt;</definition>
        <argsstring>(const ArResolverContext &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="203" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ar_resolver_context_1a3f0bdeb752bd9c8ebeb5f24420f3e23b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; _Untyped &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;_Untyped&gt; &gt; _contexts</definition>
        <argsstring></argsstring>
        <name>_contexts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="330" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ar_resolver_context_1aea03fa31e71a365d7981c553ea09edef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ArResolverContext</definition>
        <argsstring>()</argsstring>
        <name>ArResolverContext</name>
        <briefdescription>
<para>Construct an empty asset resolver context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="128" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a090bc1b02485333b323dc6cf9a6a32c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>Objects</declname>
            <defname>Objects</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; Ar_AllValidForContext&lt; Objects... &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ArResolverContext</definition>
        <argsstring>(const Objects &amp;... objs)</argsstring>
        <name>ArResolverContext</name>
        <param>
          <type>const Objects &amp;...</type>
          <declname>objs</declname>
        </param>
        <briefdescription>
<para>Construct a resolver context using the given objects <computeroutput>objs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Each argument must either be an <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> or a registered context object. See class documentation for requirements on context objects.</para>
<para>If an argument is a context object, it will be added to the constructed <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref>. If an argument is an <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref>, all of the context objects it holds will be added to the constructed <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref>.</para>
<para>Arguments are ordered from strong-to-weak. If a context object is encountered with the same type as a previously-added object, the previously-added object will remain and the other context object will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="151" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a85562ac326e01ca32bc3d951bc1abff1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>AR_API</type>
        <definition>AR_API ArResolverContext</definition>
        <argsstring>(const std::vector&lt; ArResolverContext &gt; &amp;ctxs)</argsstring>
        <name>ArResolverContext</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &gt; &amp;</type>
          <declname>ctxs</declname>
        </param>
        <briefdescription>
<para>Construct a resolver context using the ArResolverContexts in <computeroutput>ctxs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>All of the context objects held by each <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> in <computeroutput>ctxs</computeroutput> will be added to the constructed <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref>.</para>
<para>Arguments are ordered from strong-to-weak. If a context object is encountered with the same type as a previously-added object, the previously-added object will remain and the other context object will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether this resolver context is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="169" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a5a283210215fca23873e19202d5d745f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ContextObj</type>
          </param>
        </templateparamlist>
        <type>const ContextObj *</type>
        <definition>const ContextObj* Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Returns pointer to the context object of the given type held in this resolver context. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns NULL if this resolver context is not holding an object of the requested type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="178" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1a67d25ba93f6a3a3bb67b68c542de38f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string GetDebugString</definition>
        <argsstring>() const</argsstring>
        <name>GetDebugString</name>
        <briefdescription>
<para>Returns a debug string representing the contained context objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_ar_resolver_context_1af3dc7ea39ba3930c2b02f2b9ee9148af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const ArResolverContext &amp;context)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Returns hash value for this asset resolver context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="208" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="friend" id="class_ar_resolver_context_1a1036bedc24f97bcf371e1045a6c9fec6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const std::shared_ptr&lt; _Untyped &gt; &amp;context)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; _Untyped &gt; &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="320" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="320" bodyend="324"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_ar_resolver_context_1aa819bfa707c34768908ee26f347d55a7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _AddObjects</definition>
        <argsstring>()</argsstring>
        <name>_AddObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="218" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1af0509530f334f60484034c9c3392b22d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Object</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _AddObjects</definition>
        <argsstring>(const Object &amp;obj, const Other &amp;... other)</argsstring>
        <name>_AddObjects</name>
        <param>
          <type>const Object &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const Other &amp;...</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="224" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1acda35510bc5654bd86e004fa6d16b68f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API void</type>
        <definition>AR_API void _Add</definition>
        <argsstring>(const ArResolverContext &amp;ctx)</argsstring>
        <name>_Add</name>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1ae4f4b4e621e495297c2e36fd179e26cf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Object</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _Add</definition>
        <argsstring>(const Object &amp;obj)</argsstring>
        <name>_Add</name>
        <param>
          <type>const Object &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="234" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_context_1abd0882b416afe6f28d4ffa896e17eb99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API void</type>
        <definition>AR_API void _Add</definition>
        <argsstring>(std::shared_ptr&lt; _Untyped &gt; &amp;&amp;context)</argsstring>
        <name>_Add</name>
        <param>
          <type>std::shared_ptr&lt; _Untyped &gt; &amp;&amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="240" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_ar_resolver_context_1ad5d7246f93222f28b903020ce64ec5da" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Context</type>
          </param>
        </templateparamlist>
        <type>const _Typed&lt; Context &gt; &amp;</type>
        <definition>static const _Typed&lt;Context&gt;&amp; _GetTyped</definition>
        <argsstring>(const _Untyped &amp;untyped)</argsstring>
        <name>_GetTyped</name>
        <param>
          <type>const _Untyped &amp;</type>
          <declname>untyped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverContext.h" line="243" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="243" bodyend="246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An asset resolver context allows clients to provide additional data to the resolver for use during resolution. </para>
    </briefdescription>
    <detaileddescription>
<para>Clients may provide this data via context objects of their own (subject to restrictions below). An <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> is simply a wrapper around these objects that allows it to be treated as a single type. Note that an <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> may not hold multiple context objects with the same type.</para>
<para>A client-defined context object must provide the following:<itemizedlist>
<listitem><para>Default and copy constructors</para>
</listitem><listitem><para>operator&lt;</para>
</listitem><listitem><para>operator==</para>
</listitem><listitem><para>An overload for size_t hash_value(const T&amp;)</para>
</listitem></itemizedlist>
</para>
<para>Note that the user may define a free function:</para>
<para>std::string <ref refid="resolver_context_8h_1a54be8d8af8f393358e624c29c831c7c7" kindref="member">ArGetDebugString(const Context&amp; ctx)</ref>; (Where Context is the type of the user&apos;s path resolver context.)</para>
<para>This is optional; a default generic implementation has been predefined. This function should return a string representation of the context to be utilized for debugging purposes(such as in TF_DEBUG statements).</para>
<para>The <ref refid="struct_ar_is_context_object" kindref="compound">ArIsContextObject</ref> template must also be specialized for this object to declare that it can be used as a context object. This is to avoid accidental use of an unexpected object as a context object. The AR_DECLARE_RESOLVER_CONTEXT macro can be used to do this as a convenience.</para>
<para><simplesect kind="see"><para><ref refid="define_resolver_context_8h_1aff8e5cb4e3aa8c2eb52692b3c31567cc" kindref="member">AR_DECLARE_RESOLVER_CONTEXT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_ar_resolver_1a85ae1972e7c5791b3155ec04c213d29d" kindref="member">ArResolver::BindContext</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_ar_resolver_1a8aaa1f17eef5b4d8facae03cc70c54de" kindref="member">ArResolver::UnbindContext</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_ar_resolver_context_binder" kindref="compound">ArResolverContextBinder</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="pxr/usd/ar/resolverContext.h" line="125" column="1" bodyfile="pxr/usd/ar/resolverContext.h" bodystart="124" bodyend="331"/>
    <listofallmembers>
      <member refid="class_ar_resolver_context_1acda35510bc5654bd86e004fa6d16b68f" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_Add</name></member>
      <member refid="class_ar_resolver_context_1ae4f4b4e621e495297c2e36fd179e26cf" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_Add</name></member>
      <member refid="class_ar_resolver_context_1abd0882b416afe6f28d4ffa896e17eb99" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_Add</name></member>
      <member refid="class_ar_resolver_context_1aa819bfa707c34768908ee26f347d55a7" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_AddObjects</name></member>
      <member refid="class_ar_resolver_context_1af0509530f334f60484034c9c3392b22d" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_AddObjects</name></member>
      <member refid="class_ar_resolver_context_1a3f0bdeb752bd9c8ebeb5f24420f3e23b" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_contexts</name></member>
      <member refid="class_ar_resolver_context_1ad5d7246f93222f28b903020ce64ec5da" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>_GetTyped</name></member>
      <member refid="class_ar_resolver_context_1aea03fa31e71a365d7981c553ea09edef" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>ArResolverContext</name></member>
      <member refid="class_ar_resolver_context_1a090bc1b02485333b323dc6cf9a6a32c4" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>ArResolverContext</name></member>
      <member refid="class_ar_resolver_context_1a85562ac326e01ca32bc3d951bc1abff1" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>ArResolverContext</name></member>
      <member refid="class_ar_resolver_context_1a5a283210215fca23873e19202d5d745f" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>Get</name></member>
      <member refid="class_ar_resolver_context_1a67d25ba93f6a3a3bb67b68c542de38f9" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>GetDebugString</name></member>
      <member refid="class_ar_resolver_context_1af3dc7ea39ba3930c2b02f2b9ee9148af" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>hash_value</name></member>
      <member refid="class_ar_resolver_context_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>IsEmpty</name></member>
      <member refid="class_ar_resolver_context_1a1ced99d378d3de8d2f80426a4035a232" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>operator!=</name></member>
      <member refid="class_ar_resolver_context_1a2328a8b5b7a0971a98ed952acc70f3ae" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>operator&lt;</name></member>
      <member refid="class_ar_resolver_context_1aa6ac60c57271c9e5428b13566946d4ba" prot="public" virt="non-virtual"><scope>ArResolverContext</scope><name>operator==</name></member>
      <member refid="class_ar_resolver_context_1a1036bedc24f97bcf371e1045a6c9fec6" prot="private" virt="non-virtual"><scope>ArResolverContext</scope><name>TfHashAppend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
