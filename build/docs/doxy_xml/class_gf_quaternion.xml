<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_quaternion" kind="class" language="C++" prot="public">
    <compoundname>GfQuaternion</compoundname>
    <includes refid="quaternion_8h" local="no">quaternion.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_quaternion_1a94a434dfcd37e256aec323eaaec489ab" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
<para>Real part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="226" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_quaternion_1af62745c5016993fd2ea0a0bc3660b073" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _imaginary</definition>
        <argsstring></argsstring>
        <name>_imaginary</name>
        <briefdescription>
<para>Imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="228" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_quaternion_1aa09b77ebfa2fc37255d2564ab78916e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuaternion</definition>
        <argsstring>()</argsstring>
        <name>GfQuaternion</name>
        <briefdescription>
<para>The default constructor leaves the quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="54" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a27bcfdd7f7c8ee29c6e2163655b34bae" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuaternion</definition>
        <argsstring>(int realVal)</argsstring>
        <name>GfQuaternion</name>
        <param>
          <type>int</type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the real part to the argument and the imaginary parts to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically need to be normalized, the only reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="63" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a3e94e9e85b3b464950e1ce29707b78d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuaternion</definition>
        <argsstring>(double real, const GfVec3d &amp;imaginary)</argsstring>
        <name>GfQuaternion</name>
        <param>
          <type>double</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the real and imaginary parts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="69" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1af17880b08ad6ae5a3d6437e5a85b12a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(double real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>double</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Sets the real part of the quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="74" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a9269c86ceaaa51d43e86907eb4e2d5a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImaginary</definition>
        <argsstring>(const GfVec3d &amp;imaginary)</argsstring>
        <name>SetImaginary</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>Sets the imaginary part of the quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="79" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a64a370c680cd9af05422246b07ea14e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Returns the real part of the quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="84" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1ad2b8acb7c27178a2d4a3f42ccd0616fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetImaginary</definition>
        <argsstring>() const</argsstring>
        <name>GetImaginary</name>
        <briefdescription>
<para>Returns the imaginary part of the quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="89" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1aed1f2733bf5434758ad75cc0821b50eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Returns geometric length of this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1af2a05b6fa7b35dc540ac9730b5882dbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GF_API GfQuaternion GetNormalized</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Returns a normalized (unit-length) version of this quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>direction as this. If the length of this quaternion is smaller than <computeroutput>eps</computeroutput>, this returns the identity quaternion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a5907dbff2d555470fa5a69a819928f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double Normalize</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this quaternion in place to unit length, returning the length before normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1af4fd1fccb45779a99f79bb12360909d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GF_API GfQuaternion GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Returns the inverse of this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a747bca3c42365f2d51503a504828d992" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfQuaternion &amp;q) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="132" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1aeb0bca20abadf99787eb83a220f4bbd0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfQuaternion &amp;q) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="139" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a0c4de59ba399754545fa2dec09cacaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
        <definition>GF_API GfQuaternion&amp; operator *=</definition>
        <argsstring>(const GfQuaternion &amp;q)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Post-multiplies quaternion <computeroutput>q</computeroutput> into this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a34ba1868e50f90527961c509376382e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
        <definition>GF_API GfQuaternion&amp; operator *=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this quaternion by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1aa1bf2a90b15018d15b9f3e564e459234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
        <definition>GfQuaternion&amp; operator/=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this quaternion by 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="152" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a5330087c6b66502d80d7232a86118036" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
        <definition>GfQuaternion&amp; operator+=</definition>
        <argsstring>(const GfQuaternion &amp;q)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise unary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="157" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1ae09327f5296a43cfb9cacd21ff1f6054" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
        <definition>GfQuaternion&amp; operator -=</definition>
        <argsstring>(const GfQuaternion &amp;q)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="164" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="164" bodyend="168"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_quaternion_1a1582ad7ceaedf53b73603f246290ced6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>static GfQuaternion GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Returns the zero quaternion, which has a real part of 0 and an imaginary part of (0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="95" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quaternion_1a59a839be3eac6bb3841d58ab14410d98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>static GfQuaternion GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Returns the identity quaternion, which has a real part of 1 and an imaginary part of (0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="101" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="101" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_quaternion_1a5367cbeff2b311a3b6a6e475836dab94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfQuaternion &amp;q)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="126" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1ab95b04ee46daa076b9969e34b5d4458b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator+</definition>
        <argsstring>(const GfQuaternion &amp;q1, const GfQuaternion &amp;q2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="171" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1aec55b78b71bae30966c7e6bdaaa8eba4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator -</definition>
        <argsstring>(const GfQuaternion &amp;q1, const GfQuaternion &amp;q2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="178" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1aa9e03b3be81e0a44427e2a5095e8be03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator *</definition>
        <argsstring>(const GfQuaternion &amp;q1, const GfQuaternion &amp;q2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternions <computeroutput>q1</computeroutput> and <computeroutput>q2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="185" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1ae1b4e409aca33a49d2de86880166e458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator *</definition>
        <argsstring>(const GfQuaternion &amp;q, double s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="192" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1aad4443a362f55382849a6409c61a24c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator *</definition>
        <argsstring>(double s, const GfQuaternion &amp;q)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="198" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1aa9bb516bc91d69e34940431a6c0ebfe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion operator/</definition>
        <argsstring>(const GfQuaternion &amp;q, double s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="204" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1aae94c94de7df7d4bd02c776e35df5d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GF_API friend GfQuaternion GfSlerp</definition>
        <argsstring>(double alpha, const GfQuaternion &amp;q0, const GfQuaternion &amp;q1)</argsstring>
        <name>GfSlerp</name>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <briefdescription>
<para>Spherically interpolate between <computeroutput>q0</computeroutput> and <computeroutput>q1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the interpolant <computeroutput>alpha</computeroutput> is zero, then the result is <computeroutput>q0</computeroutput>, while <computeroutput>alpha</computeroutput> of one yields <computeroutput>q1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quaternion_1a19d5359fec8d149986cc5dd531ce3db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GF_API GfQuaternion GfSlerp</definition>
        <argsstring>(const GfQuaternion &amp;q0, const GfQuaternion &amp;q1, double alpha)</argsstring>
        <name>GfSlerp</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="220" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_quaternion_1a841fe6ade459e6734da13495ee20ee84" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double _GetLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>_GetLengthSquared</name>
        <briefdescription>
<para>Returns the square of the length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="231" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="231" bodyend="233"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: complex number with scalar real part and vector imaginary part. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a generalized complex number that has a scalar real part and a vector of three imaginary values. Quaternions are used by the <computeroutput><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></computeroutput> class to represent arbitrary-axis rotations. </para>
    </detaileddescription>
    <location file="pxr/base/gf/quaternion.h" line="50" column="1" bodyfile="pxr/base/gf/quaternion.h" bodystart="49" bodyend="234"/>
    <listofallmembers>
      <member refid="class_gf_quaternion_1a841fe6ade459e6734da13495ee20ee84" prot="private" virt="non-virtual"><scope>GfQuaternion</scope><name>_GetLengthSquared</name></member>
      <member refid="class_gf_quaternion_1af62745c5016993fd2ea0a0bc3660b073" prot="private" virt="non-virtual"><scope>GfQuaternion</scope><name>_imaginary</name></member>
      <member refid="class_gf_quaternion_1a94a434dfcd37e256aec323eaaec489ab" prot="private" virt="non-virtual"><scope>GfQuaternion</scope><name>_real</name></member>
      <member refid="class_gf_quaternion_1a59a839be3eac6bb3841d58ab14410d98" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetIdentity</name></member>
      <member refid="class_gf_quaternion_1ad2b8acb7c27178a2d4a3f42ccd0616fd" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetImaginary</name></member>
      <member refid="class_gf_quaternion_1af4fd1fccb45779a99f79bb12360909d1" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetInverse</name></member>
      <member refid="class_gf_quaternion_1aed1f2733bf5434758ad75cc0821b50eb" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetLength</name></member>
      <member refid="class_gf_quaternion_1af2a05b6fa7b35dc540ac9730b5882dbe" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetNormalized</name></member>
      <member refid="class_gf_quaternion_1a64a370c680cd9af05422246b07ea14e9" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetReal</name></member>
      <member refid="class_gf_quaternion_1a1582ad7ceaedf53b73603f246290ced6" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GetZero</name></member>
      <member refid="class_gf_quaternion_1aa09b77ebfa2fc37255d2564ab78916e6" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GfQuaternion</name></member>
      <member refid="class_gf_quaternion_1a27bcfdd7f7c8ee29c6e2163655b34bae" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GfQuaternion</name></member>
      <member refid="class_gf_quaternion_1a3e94e9e85b3b464950e1ce29707b78d3" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GfQuaternion</name></member>
      <member refid="class_gf_quaternion_1aae94c94de7df7d4bd02c776e35df5d4c" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GfSlerp</name></member>
      <member refid="class_gf_quaternion_1a19d5359fec8d149986cc5dd531ce3db6" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>GfSlerp</name></member>
      <member refid="class_gf_quaternion_1a5367cbeff2b311a3b6a6e475836dab94" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>hash_value</name></member>
      <member refid="class_gf_quaternion_1a5907dbff2d555470fa5a69a819928f13" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>Normalize</name></member>
      <member refid="class_gf_quaternion_1aeb0bca20abadf99787eb83a220f4bbd0" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator !=</name></member>
      <member refid="class_gf_quaternion_1aa9e03b3be81e0a44427e2a5095e8be03" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator *</name></member>
      <member refid="class_gf_quaternion_1ae1b4e409aca33a49d2de86880166e458" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator *</name></member>
      <member refid="class_gf_quaternion_1aad4443a362f55382849a6409c61a24c1" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator *</name></member>
      <member refid="class_gf_quaternion_1a0c4de59ba399754545fa2dec09cacaa3" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator *=</name></member>
      <member refid="class_gf_quaternion_1a34ba1868e50f90527961c509376382e4" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator *=</name></member>
      <member refid="class_gf_quaternion_1aec55b78b71bae30966c7e6bdaaa8eba4" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator -</name></member>
      <member refid="class_gf_quaternion_1ae09327f5296a43cfb9cacd21ff1f6054" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator -=</name></member>
      <member refid="class_gf_quaternion_1ab95b04ee46daa076b9969e34b5d4458b" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator+</name></member>
      <member refid="class_gf_quaternion_1a5330087c6b66502d80d7232a86118036" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator+=</name></member>
      <member refid="class_gf_quaternion_1aa9bb516bc91d69e34940431a6c0ebfe0" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator/</name></member>
      <member refid="class_gf_quaternion_1aa1bf2a90b15018d15b9f3e564e459234" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator/=</name></member>
      <member refid="class_gf_quaternion_1a747bca3c42365f2d51503a504828d992" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>operator==</name></member>
      <member refid="class_gf_quaternion_1a9269c86ceaaa51d43e86907eb4e2d5a3" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>SetImaginary</name></member>
      <member refid="class_gf_quaternion_1af17880b08ad6ae5a3d6437e5a85b12a3" prot="public" virt="non-virtual"><scope>GfQuaternion</scope><name>SetReal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
