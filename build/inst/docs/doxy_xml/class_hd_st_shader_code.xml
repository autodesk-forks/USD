<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_shader_code" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HdStShaderCode</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; HdStShaderCode &gt;</basecompoundref>
    <derivedcompoundref refid="class_hd_st___geometric_shader" prot="public" virt="non-virtual">HdSt_GeometricShader</derivedcompoundref>
    <derivedcompoundref refid="class_hd_st_lighting_shader" prot="public" virt="non-virtual">HdStLightingShader</derivedcompoundref>
    <derivedcompoundref refid="class_hd_st_render_pass_shader" prot="public" virt="non-virtual">HdStRenderPassShader</derivedcompoundref>
    <includes refid="shader_code_8h" local="no">shaderCode.h</includes>
    <innerclass refid="struct_hd_st_shader_code_1_1_named_texture_handle" prot="public">HdStShaderCode::NamedTextureHandle</innerclass>
    <innerclass refid="class_hd_st_shader_code_1_1_resource_context" prot="public">HdStShaderCode::ResourceContext</innerclass>
      <sectiondef kind="user-defined">
      <header>Texture system</header>
      <memberdef kind="typedef" id="class_hd_st_shader_code_1affddb2cacbc61841edb346aa3404bba8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hd_st_shader_code_1_1_named_texture_handle" kindref="compound">NamedTextureHandle</ref> &gt;</type>
        <definition>using NamedTextureHandleVector =  std::vector&lt;NamedTextureHandle&gt;</definition>
        <argsstring></argsstring>
        <name>NamedTextureHandleVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="160" column="1" bodyfile="pxr/imaging/hdSt/shaderCode.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1afa5d4e1a8aa32dc92f9da89ff4c92659" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API NamedTextureHandleVector const  &amp;</type>
        <definition>virtual HDST_API NamedTextureHandleVector const&amp; GetNamedTextureHandles</definition>
        <argsstring>() const</argsstring>
        <name>GetNamedTextureHandles</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1a996cd3d76e498522116cdff37fd780ca">GetNamedTextureHandles</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1a996cd3d76e498522116cdff37fd780ca">GetNamedTextureHandles</reimplementedby>
        <briefdescription>
<para>Textures that need to be bound for this shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_hd_st_shader_code_1a98561e8cb698fef2e90d441103da9db1" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="78" column="1" bodyfile="pxr/imaging/hdSt/shaderCode.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_shader_code_1ac530c4be851e1dba7b0abd4930ebb712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStShaderCode</definition>
        <argsstring>()</argsstring>
        <name>HdStShaderCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a031ab0133a22cca5abd7781330fb39c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API</type>
        <definition>virtual HDST_API ~HdStShaderCode</definition>
        <argsstring>()</argsstring>
        <name>~HdStShaderCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1acfa7f0a0b30c2ac28eeaf6aed0a30231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ID</type>
        <definition>virtual ID ComputeHash</definition>
        <argsstring>() const =0</argsstring>
        <name>ComputeHash</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1a9d802c1047cd5aea9dc92919b2803423">ComputeHash</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1a9d802c1047cd5aea9dc92919b2803423">ComputeHash</reimplementedby>
        <briefdescription>
<para>Returns the hash value of the shader code and configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>It is computed from the the GLSL code as well as the resource signature of the shader (as determined from its parameters). If two shaders have the same hash, the GLSL code as expanded by codegen should also be the same. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1aa87939b745008a9e4c595ff5a3b7bc47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ID</type>
        <definition>virtual ID ComputeTextureSourceHash</definition>
        <argsstring>() const</argsstring>
        <name>ComputeTextureSourceHash</name>
        <briefdescription>
<para>Returns the hash value of the paths of the texture prims consumed by this shader. </para>
        </briefdescription>
        <detaileddescription>
<para>Unless textures are bindless, shaders using different textures cannot be used in the same draw batch. Since textures can be animated, it can happen that two texture prims use the same texture at some time but different textures at other times. To avoid re-computing the draw batches over time, we use the this hash when grouping the draw batches. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a8717d742607de2b45bea9024d452c00a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string GetSource</definition>
        <argsstring>(TfToken const &amp;shaderStageKey) const =0</argsstring>
        <name>GetSource</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1a908e0465551c896cb54231d81e059d1b">GetSource</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1a908e0465551c896cb54231d81e059d1b">GetSource</reimplementedby>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>shaderStageKey</declname>
        </param>
        <briefdescription>
<para>Returns the shader source provided by this shader for <emphasis>shaderStageKey</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a87c79469678d418e6b22a40cc44c71e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>HDST_API VtDictionary GetLayout</definition>
        <argsstring>(TfTokenVector const &amp;shaderStageKeys) const</argsstring>
        <name>GetLayout</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const &amp;</type>
          <declname>shaderStageKeys</declname>
        </param>
        <briefdescription>
<para>Returns the resource layout for the shader stages specified by <emphasis>shaderStageKeys</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is initialized using the shader&apos;s <ref refid="class_hio_glslfx" kindref="compound">HioGlslfx</ref> configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a33ed1752551f2580e533727f89b421cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API HdSt_MaterialParamVector const  &amp;</type>
        <definition>virtual HDST_API HdSt_MaterialParamVector const&amp; GetParams</definition>
        <argsstring>() const</argsstring>
        <name>GetParams</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1aa9164a243a42e0f97284b6263c7bd062">GetParams</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1aa9164a243a42e0f97284b6263c7bd062">GetParams</reimplementedby>
        <briefdescription>
<para>Returns the shader parameters for this shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1acaa3f03bbc11d10ddb93f36f864bc55c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API bool</type>
        <definition>virtual HDST_API bool IsEnabledPrimvarFiltering</definition>
        <argsstring>() const</argsstring>
        <name>IsEnabledPrimvarFiltering</name>
        <briefdescription>
<para>Returns whether primvar filtering is enabled for this shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1aca5eb08abdbce73ddf3875154536a422" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const  &amp;</type>
        <definition>virtual HDST_API TfTokenVector const&amp; GetPrimvarNames</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvarNames</name>
        <briefdescription>
<para>Returns the names of primvar that are used by this shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a1c6ec58a09a01194b77a4a6e3f44d58c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr const  &amp;</type>
        <definition>virtual HDST_API HdBufferArrayRangeSharedPtr const&amp; GetShaderData</definition>
        <argsstring>() const</argsstring>
        <name>GetShaderData</name>
        <briefdescription>
<para>Returns a buffer which stores parameter fallback values and texture handles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a13700c17eb68d77baadffa79dbec83d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BindResources</definition>
        <argsstring>(int program, HdSt_ResourceBinder const &amp;binder)=0</argsstring>
        <name>BindResources</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1ae1f190000fb661c92c68506fffc9fb80">BindResources</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1ae1f190000fb661c92c68506fffc9fb80">BindResources</reimplementedby>
        <param>
          <type>int</type>
          <declname>program</declname>
        </param>
        <param>
          <type>HdSt_ResourceBinder const &amp;</type>
          <declname>binder</declname>
        </param>
        <briefdescription>
<para>Binds shader-specific resources to <emphasis>program</emphasis> XXX: this interface is meant to be used for bridging the GlfSimpleLightingContext mechanism, and not for generic use-cases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1aa5aea916f3a072c69d53a67874958794" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void UnbindResources</definition>
        <argsstring>(int program, HdSt_ResourceBinder const &amp;binder)=0</argsstring>
        <name>UnbindResources</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1ad68ad0c16d09b39ab29774987a7db6a1">UnbindResources</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1ad68ad0c16d09b39ab29774987a7db6a1">UnbindResources</reimplementedby>
        <param>
          <type>int</type>
          <declname>program</declname>
        </param>
        <param>
          <type>HdSt_ResourceBinder const &amp;</type>
          <declname>binder</declname>
        </param>
        <briefdescription>
<para>Unbinds shader-specific resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a736c068e4fec90946da60dcd9e2621eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void AddBindings</definition>
        <argsstring>(HdStBindingRequestVector *customBindings)=0</argsstring>
        <name>AddBindings</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1a4cfef0b3a78e078f1386a3b47f9ea824">AddBindings</reimplementedby>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1a4cfef0b3a78e078f1386a3b47f9ea824">AddBindings</reimplementedby>
        <param>
          <type>HdStBindingRequestVector *</type>
          <declname>customBindings</declname>
        </param>
        <briefdescription>
<para>Add custom bindings (used by codegen) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1aa083cfe5ffeb293d140939015cfc4bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>virtual HDST_API TfToken GetMaterialTag</definition>
        <argsstring>() const</argsstring>
        <name>GetMaterialTag</name>
        <briefdescription>
<para>Material tags can be set in the meta-data of a glslfx file to control what rprim collection that prims using this shader should go into. </para>
        </briefdescription>
        <detaileddescription>
<para>E.g. We can use it to split opaque and translucent prims into different collections. When no material tags are specified in the shader, a empty token is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a7f54ea8b13462f62034e2143d600b668" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>virtual HDST_API void AddResourcesFromTextures</definition>
        <argsstring>(ResourceContext &amp;ctx) const</argsstring>
        <name>AddResourcesFromTextures</name>
        <reimplementedby refid="class_hd_st_simple_lighting_shader_1abc4479ebc6ccc2e6a51144961627c0b8">AddResourcesFromTextures</reimplementedby>
        <param>
          <type><ref refid="class_hd_st_shader_code_1_1_resource_context" kindref="compound">ResourceContext</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>This function is called after textures have been allocated and loaded to add buffer sources and computations to the resource registry that require texture meta data not available until the texture is allocated or loaded. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, the OpenGl texture sampler handle (in the bindless case) is not available until after the texture commit phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="233" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hd_st_shader_code_1a0cb254cccc84edc7c968ac420c68c510" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API ID</type>
        <definition>static HDST_API ID ComputeHash</definition>
        <argsstring>(HdStShaderCodeSharedPtrVector const &amp;shaders)</argsstring>
        <name>ComputeHash</name>
        <param>
          <type>HdStShaderCodeSharedPtrVector const &amp;</type>
          <declname>shaders</declname>
        </param>
        <briefdescription>
<para>Returns the combined hash values of multiple shaders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="96" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_shader_code_1ad526a55ed55fc926720a0d80b4521c90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStShaderCode</definition>
        <argsstring>(const HdStShaderCode &amp;)=delete</argsstring>
        <name>HdStShaderCode</name>
        <param>
          <type>const <ref refid="class_hd_st_shader_code" kindref="compound">HdStShaderCode</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a88d7311496833763dc270c92df95e208" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_st_shader_code" kindref="compound">HdStShaderCode</ref> &amp;</type>
        <definition>HdStShaderCode&amp; operator=</definition>
        <argsstring>(const HdStShaderCode &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hd_st_shader_code" kindref="compound">HdStShaderCode</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_shader_code_1a63fac30cae8232d46b828f2a94c18191" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_hio_glslfx" kindref="compound">HioGlslfx</ref> const  *</type>
        <definition>virtual HioGlslfx const* _GetGlslfx</definition>
        <argsstring>() const</argsstring>
        <name>_GetGlslfx</name>
        <reimplementedby refid="class_hd_st_render_pass_shader_1a71bb972c8570ea87fc052467ddc822c2">_GetGlslfx</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/shaderCode.h" line="243" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A base class representing the implementation (code) of a shader, used in conjunction with <ref refid="class_hd_render_pass" kindref="compound">HdRenderPass</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This interface provides a simple way for clients to affect the composition of shading programs used for a render pass. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3315">
        <label>HdStShaderCode</label>
        <link refid="class_hd_st_shader_code"/>
      </node>
      <node id="3317">
        <label>HdStSimpleLightingShader</label>
        <link refid="class_hd_st_simple_lighting_shader"/>
        <childnode refid="3316" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3316">
        <label>HdStLightingShader</label>
        <link refid="class_hd_st_lighting_shader"/>
        <childnode refid="3315" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3318">
        <label>HdStRenderPassShader</label>
        <link refid="class_hd_st_render_pass_shader"/>
        <childnode refid="3315" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/hdSt/shaderCode.h" line="76" column="1" bodyfile="pxr/imaging/hdSt/shaderCode.h" bodystart="75" bodyend="244"/>
    <listofallmembers>
      <member refid="class_hd_st_shader_code_1a63fac30cae8232d46b828f2a94c18191" prot="private" virt="virtual"><scope>HdStShaderCode</scope><name>_GetGlslfx</name></member>
      <member refid="class_hd_st_shader_code_1a736c068e4fec90946da60dcd9e2621eb" prot="public" virt="pure-virtual"><scope>HdStShaderCode</scope><name>AddBindings</name></member>
      <member refid="class_hd_st_shader_code_1a7f54ea8b13462f62034e2143d600b668" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>AddResourcesFromTextures</name></member>
      <member refid="class_hd_st_shader_code_1a13700c17eb68d77baadffa79dbec83d4" prot="public" virt="pure-virtual"><scope>HdStShaderCode</scope><name>BindResources</name></member>
      <member refid="class_hd_st_shader_code_1acfa7f0a0b30c2ac28eeaf6aed0a30231" prot="public" virt="pure-virtual"><scope>HdStShaderCode</scope><name>ComputeHash</name></member>
      <member refid="class_hd_st_shader_code_1a0cb254cccc84edc7c968ac420c68c510" prot="public" virt="non-virtual"><scope>HdStShaderCode</scope><name>ComputeHash</name></member>
      <member refid="class_hd_st_shader_code_1aa87939b745008a9e4c595ff5a3b7bc47" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>ComputeTextureSourceHash</name></member>
      <member refid="class_hd_st_shader_code_1a87c79469678d418e6b22a40cc44c71e9" prot="public" virt="non-virtual"><scope>HdStShaderCode</scope><name>GetLayout</name></member>
      <member refid="class_hd_st_shader_code_1aa083cfe5ffeb293d140939015cfc4bee" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>GetMaterialTag</name></member>
      <member refid="class_hd_st_shader_code_1afa5d4e1a8aa32dc92f9da89ff4c92659" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>GetNamedTextureHandles</name></member>
      <member refid="class_hd_st_shader_code_1a33ed1752551f2580e533727f89b421cd" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>GetParams</name></member>
      <member refid="class_hd_st_shader_code_1aca5eb08abdbce73ddf3875154536a422" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>GetPrimvarNames</name></member>
      <member refid="class_hd_st_shader_code_1a1c6ec58a09a01194b77a4a6e3f44d58c" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>GetShaderData</name></member>
      <member refid="class_hd_st_shader_code_1a8717d742607de2b45bea9024d452c00a" prot="public" virt="pure-virtual"><scope>HdStShaderCode</scope><name>GetSource</name></member>
      <member refid="class_hd_st_shader_code_1ac530c4be851e1dba7b0abd4930ebb712" prot="public" virt="non-virtual"><scope>HdStShaderCode</scope><name>HdStShaderCode</name></member>
      <member refid="class_hd_st_shader_code_1ad526a55ed55fc926720a0d80b4521c90" prot="private" virt="non-virtual"><scope>HdStShaderCode</scope><name>HdStShaderCode</name></member>
      <member refid="class_hd_st_shader_code_1a98561e8cb698fef2e90d441103da9db1" prot="public" virt="non-virtual"><scope>HdStShaderCode</scope><name>ID</name></member>
      <member refid="class_hd_st_shader_code_1acaa3f03bbc11d10ddb93f36f864bc55c" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>IsEnabledPrimvarFiltering</name></member>
      <member refid="class_hd_st_shader_code_1affddb2cacbc61841edb346aa3404bba8" prot="public" virt="non-virtual"><scope>HdStShaderCode</scope><name>NamedTextureHandleVector</name></member>
      <member refid="class_hd_st_shader_code_1a88d7311496833763dc270c92df95e208" prot="private" virt="non-virtual"><scope>HdStShaderCode</scope><name>operator=</name></member>
      <member refid="class_hd_st_shader_code_1aa5aea916f3a072c69d53a67874958794" prot="public" virt="pure-virtual"><scope>HdStShaderCode</scope><name>UnbindResources</name></member>
      <member refid="class_hd_st_shader_code_1a031ab0133a22cca5abd7781330fb39c3" prot="public" virt="virtual"><scope>HdStShaderCode</scope><name>~HdStShaderCode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
