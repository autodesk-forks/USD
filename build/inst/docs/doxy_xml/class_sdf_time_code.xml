<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_time_code" kind="class" language="C++" prot="public">
    <compoundname>SdfTimeCode</compoundname>
    <includes refid="sdf_2time_code_8h" local="no">timeCode.h</includes>
    <innerclass refid="struct_sdf_time_code_1_1_hash" prot="public">SdfTimeCode::Hash</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_sdf_time_code_1a31b1b40782df05a659a52c8f177333c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr SdfTimeCode</definition>
        <argsstring>(double time=0.0) noexcept</argsstring>
        <name>SdfTimeCode</name>
        <param>
          <type>double</type>
          <declname>time</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Construct a time code with the given time. </para>
        </briefdescription>
        <detaileddescription>
<para>A default constructed <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> has a time of 0.0. A double value can implicitly cast to <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="54" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="class_sdf_time_code_1a5aceff1d9e09657999962903f8d3ddc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="61" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="61" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1ac3c057599196e2df91a0d8f9e5f7348c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="63" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="63" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a2e4caf5f6235902f72e1dd24133f10a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="65" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a9733f50d5b5c822cb8e299d8b9c03622" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="67" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="67" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a89589f23822f9c6fe218902f39d2b9c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&lt;=</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="69" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="69" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a7ec9160c7e2d3ccfbc12945f6985f22c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool operator&gt;=</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="71" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a4f831228af4a1b87fdaaa1eac9f9b881" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref></type>
        <definition>constexpr SdfTimeCode operator *</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="74" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a2a1323360c3ef5f4fa44209f9437c054" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref></type>
        <definition>constexpr SdfTimeCode operator/</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="76" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="76" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1aad91686a3df692fb04d37b8f6443a35c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref></type>
        <definition>constexpr SdfTimeCode operator+</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="78" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="78" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a396584ef8913b83bfe2deffa022f515c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref></type>
        <definition>constexpr SdfTimeCode operator-</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="80" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1a30d270daa69c536a6e138a0ec7351603" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr operator double</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator double</name>
        <briefdescription>
<para>Explicit conversion to double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="84" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_time_code_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Hash function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="87" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_time_code_1abaee94ab36440e9c055ad7639bc15fc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfTimeCode &amp;ap)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="99" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="class_sdf_time_code_1a211bf65afc2ccd789ef306b2a6da6764" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double GetValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetValue</name>
        <briefdescription>
<para>Return the time value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="107" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="107" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_time_code_1a553b2aef800d8b71561cfb84513e159a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _time</definition>
        <argsstring></argsstring>
        <name>_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="118" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_time_code_1a70cbbef34fc3d3e6d426c2cbfa17079e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(SdfTimeCode &amp;lhs, SdfTimeCode &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/timeCode.h" line="114" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="114" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Value type that represents a time code. </para>
    </briefdescription>
    <detaileddescription>
<para>It&apos;s equivalent to a double type value but is used to indicate that this value should be resolved by any time based value resolution. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/timeCode.h" line="45" column="1" bodyfile="pxr/usd/sdf/timeCode.h" bodystart="44" bodyend="119"/>
    <listofallmembers>
      <member refid="class_sdf_time_code_1a553b2aef800d8b71561cfb84513e159a" prot="private" virt="non-virtual"><scope>SdfTimeCode</scope><name>_time</name></member>
      <member refid="class_sdf_time_code_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>GetHash</name></member>
      <member refid="class_sdf_time_code_1a211bf65afc2ccd789ef306b2a6da6764" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>GetValue</name></member>
      <member refid="class_sdf_time_code_1abaee94ab36440e9c055ad7639bc15fc8" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>hash_value</name></member>
      <member refid="class_sdf_time_code_1a4f831228af4a1b87fdaaa1eac9f9b881" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator *</name></member>
      <member refid="class_sdf_time_code_1a30d270daa69c536a6e138a0ec7351603" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator double</name></member>
      <member refid="class_sdf_time_code_1ac3c057599196e2df91a0d8f9e5f7348c" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator!=</name></member>
      <member refid="class_sdf_time_code_1aad91686a3df692fb04d37b8f6443a35c" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator+</name></member>
      <member refid="class_sdf_time_code_1a396584ef8913b83bfe2deffa022f515c" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator-</name></member>
      <member refid="class_sdf_time_code_1a2a1323360c3ef5f4fa44209f9437c054" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator/</name></member>
      <member refid="class_sdf_time_code_1a2e4caf5f6235902f72e1dd24133f10a7" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_time_code_1a89589f23822f9c6fe218902f39d2b9c2" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_time_code_1a5aceff1d9e09657999962903f8d3ddc0" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator==</name></member>
      <member refid="class_sdf_time_code_1a9733f50d5b5c822cb8e299d8b9c03622" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_time_code_1a7ec9160c7e2d3ccfbc12945f6985f22c" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_time_code_1a31b1b40782df05a659a52c8f177333c0" prot="public" virt="non-virtual"><scope>SdfTimeCode</scope><name>SdfTimeCode</name></member>
      <member refid="class_sdf_time_code_1a70cbbef34fc3d3e6d426c2cbfa17079e" prot="private" virt="non-virtual"><scope>SdfTimeCode</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
