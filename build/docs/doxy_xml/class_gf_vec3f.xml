<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_vec3f" kind="class" language="C++" prot="public">
    <compoundname>GfVec3f</compoundname>
    <includes refid="vec3f_8h" local="no">vec3f.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_vec3f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" static="no">
        <type>float</type>
        <definition>typedef float ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
<para>Scalar element type and dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="66" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_vec3f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="67" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_vec3f_1a3d0d66d4499b4fbd81a7227f27c663f9" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _data[3]</definition>
        <argsstring>[3]</argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="308" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_vec3f_1a411db22d9ed335b2dcaad002978bc08a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfVec3f</definition>
        <argsstring>()=default</argsstring>
        <name>GfVec3f</name>
        <briefdescription>
<para>Default constructor does no initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a46be375060092a1ad09b09591d2f0ff7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr GfVec3f</definition>
        <argsstring>(float value)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Initialize all elements to a single value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="73" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a14dc5c4f1a8670c1137e51a5c355c417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr GfVec3f</definition>
        <argsstring>(float s0, float s1, float s2)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>float</type>
          <declname>s0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Initialize all elements with explicit arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="79" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1aa61a36277aff10a6cf999650cdffed31" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Scl</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr GfVec3f</definition>
        <argsstring>(Scl const *p)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>Scl const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Construct with pointer to values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="86" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a2951a92124a19253f369b91c0af501d8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec3f</definition>
        <argsstring>(class GfVec3d const &amp;other)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>class <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="92" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="325" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a8ca5ff4a5355c0c7ff5a47f2051ce87b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec3f</definition>
        <argsstring>(class GfVec3h const &amp;other)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>class <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="95" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="332" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a0522cf8f35db54241daaed8fab28c9ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec3f</definition>
        <argsstring>(class GfVec3i const &amp;other)</argsstring>
        <name>GfVec3f</name>
        <param>
          <type>class <ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="98" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="339" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a1ade42b4633c74ecbe5f5d471dd4d77f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; Set</definition>
        <argsstring>(float s0, float s1, float s2)</argsstring>
        <name>Set</name>
        <param>
          <type>float</type>
          <declname>s0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Set all elements with passed arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="129" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a36ebcbd1b781766195e70d1466b08155" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; Set</definition>
        <argsstring>(float const *a)</argsstring>
        <name>Set</name>
        <param>
          <type>float const *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set all elements with a pointer to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="137" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a092a81cbd7a32351745f0572dc8fbf36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float const  *</type>
        <definition>float const* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct data access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="142" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a0983a49fcb2351e470bd415722cc4682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="143" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1ab6c4d1521e2c51f3e4ceeeb251442d76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float const  *</type>
        <definition>float const* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="144" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a23ff646cd6dda6de7c2b8d2386b34867" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float const  &amp;</type>
        <definition>float const&amp; operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Indexing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="147" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a7ee7f9f981c98bb13ef2e2b72d6a6229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float &amp;</type>
        <definition>float&amp; operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="148" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1aad2365d402fb9c88b4df5f5e267ad037" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(GfVec3f const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="156" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a5a54d0e8d101ee53468212017ea64116" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(GfVec3f const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="161" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a34b8031e6e165c02b00c1ed3366e7d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec3d const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a0d386c45ad577ea8c46a8dc895d6a9c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec3h const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1ad2f2927ae13aa143768635975dd4c5c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec3i const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a79775818bcad874656d40878f65907f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Create a vec with negated elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="177" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a48adb0c96d02472bed4d93d30dbf1df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; operator+=</definition>
        <argsstring>(GfVec3f const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Addition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="182" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1af99a88e2ea3acc3f533dccd809133417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; operator-=</definition>
        <argsstring>(GfVec3f const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="193" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1ad604ea11a5ab57fa65ec171d6ab6bced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; operator *=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiplication by scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="204" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1ac422a34a9fc965bd1c19c270b77575a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator *</definition>
        <argsstring>(double s) const</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="210" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a827a6a9f1520613c676e5af2e3ab34bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>GfVec3f&amp; operator/=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Division by scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="219" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a959b498f263118a7866e1f3b4c3132b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator/</definition>
        <argsstring>(double s) const</argsstring>
        <name>operator/</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="225" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a6a3a6ab783cee4b75dd1aa8d4b78d0af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float operator *</definition>
        <argsstring>(GfVec3f const &amp;v) const</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>See <ref refid="dual_quatd_8h_1a630afdf6ab5e490ac0ac75a890aec03b" kindref="member">GfDot()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="230" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a8fff664fe0a119b653032efbba11eeaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetProjection</definition>
        <argsstring>(GfVec3f const &amp;v) const</argsstring>
        <name>GetProjection</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the projection of <computeroutput>this</computeroutput> onto <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>That is: <programlisting><codeline><highlight class="normal">v<sp/>*<sp/>(*this<sp/>*<sp/>v)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="238" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1af422c963d8229232ec0d098979eaebfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetComplement</definition>
        <argsstring>(GfVec3f const &amp;b) const</argsstring>
        <name>GetComplement</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the orthogonal complement of <computeroutput>this-&gt;GetProjection(b)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>That is: <programlisting><codeline><highlight class="normal">*this<sp/>-<sp/>this-&gt;GetProjection(b)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="247" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a9433f15996434a4b1310db27d1837a40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetLengthSq</definition>
        <argsstring>() const</argsstring>
        <name>GetLengthSq</name>
        <briefdescription>
<para>Squared length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="252" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a71b1c47012e0b48dcddfc2bd1bb3915f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="257" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a8922235fecf39bf106a1353975dc038e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Normalize</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes the vector in place to unit length, returning the length before normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of the vector is smaller than <computeroutput>eps</computeroutput>, then the vector is set to vector/<computeroutput>eps</computeroutput>. The original length of the vector is returned. See also <ref refid="vec2d_8h_1aba4a21e52a2e2d5a01caaa5021d46e17" kindref="member">GfNormalize()</ref>.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="269" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="269" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1ae4f9f678daa77dbf7067389970b157a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetNormalized</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="277" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a921e41489a1c93a74de6e598a3a56e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void BuildOrthonormalFrame</definition>
        <argsstring>(GfVec3f *v1, GfVec3f *v2, float eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>BuildOrthonormalFrame</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Sets <computeroutput>v1</computeroutput> and <computeroutput>v2</computeroutput> to unit vectors such that v1, v2 and *this are mutually orthogonal. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length L of *this is smaller than <computeroutput>eps</computeroutput>, then v1 and v2 will have magnitude L/eps. As a result, the function delivers a continuous result as *this shrinks in length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="303" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_vec3f_1a1f77ac29d56101a06d85bbc6c9281596" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>static GfVec3f XAxis</definition>
        <argsstring>()</argsstring>
        <name>XAxis</name>
        <briefdescription>
<para>Create a unit vector along the X-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="101" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1aa05d8b978615bdedf7ecb140786248d6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>static GfVec3f YAxis</definition>
        <argsstring>()</argsstring>
        <name>YAxis</name>
        <briefdescription>
<para>Create a unit vector along the Y-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="107" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1aae20ec4b1f7483bf697727fc7d4bcb13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>static GfVec3f ZAxis</definition>
        <argsstring>()</argsstring>
        <name>ZAxis</name>
        <briefdescription>
<para>Create a unit vector along the Z-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="113" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a3b4961a8ad722cbc883b58494d071223" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>static GfVec3f Axis</definition>
        <argsstring>(size_t i)</argsstring>
        <name>Axis</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create a unit vector along the i-th axis, zero-based. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the zero vector if <computeroutput>i</computeroutput> is greater than or equal to 3. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="121" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec3f_1a6cd54d6243877c2603a2c162388ebbf4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>static GF_API bool OrthogonalizeBasis</definition>
        <argsstring>(GfVec3f *tx, GfVec3f *ty, GfVec3f *tz, const bool normalize, double eps=GF_MIN_ORTHO_TOLERANCE)</argsstring>
        <name>OrthogonalizeBasis</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>tx</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>ty</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>tz</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___linear_algebra_1ga85234a23eefa21de1dcf309d445b688e" kindref="member">GF_MIN_ORTHO_TOLERANCE</ref></defval>
        </param>
        <briefdescription>
<para>Orthogonalize and optionally normalize a set of basis vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses an iterative method that is very stable even when the vectors are far from orthogonal (close to colinear). The number of iterations and thus the computation time does increase as the vectors become close to colinear, however. Returns a bool specifying whether the solution converged after a number of iterations. If it did not converge, the returned vectors will be as close as possible to orthogonal within the iteration limit. Colinear vectors will be unaltered, and the method will return false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="293" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_vec3f_1a944daf5a2b6c504523485ade0c7b577d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfVec3f const &amp;vec)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="151" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec3f_1adff9734292f0204f9c0c8504918d025c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator+</definition>
        <argsstring>(GfVec3f const &amp;l, GfVec3f const &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="188" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec3f_1a641e5465e23027520f4702518d00fefb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator-</definition>
        <argsstring>(GfVec3f const &amp;l, GfVec3f const &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="199" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec3f_1a90fcc46993c07b4be7ccd95066f5a290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f operator *</definition>
        <argsstring>(double s, GfVec3f const &amp;v)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="213" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="213" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type for a vector of 3 float components. </para>
    </briefdescription>
    <detaileddescription>
<para>Represents a vector of 3 components of type <computeroutput>float</computeroutput>. It is intended to be fast and simple. </para>
    </detaileddescription>
    <location file="pxr/base/gf/vec3f.h" line="63" column="1" bodyfile="pxr/base/gf/vec3f.h" bodystart="62" bodyend="309"/>
    <listofallmembers>
      <member refid="class_gf_vec3f_1a3d0d66d4499b4fbd81a7227f27c663f9" prot="private" virt="non-virtual"><scope>GfVec3f</scope><name>_data</name></member>
      <member refid="class_gf_vec3f_1a3b4961a8ad722cbc883b58494d071223" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>Axis</name></member>
      <member refid="class_gf_vec3f_1a921e41489a1c93a74de6e598a3a56e23" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>BuildOrthonormalFrame</name></member>
      <member refid="class_gf_vec3f_1a092a81cbd7a32351745f0572dc8fbf36" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>data</name></member>
      <member refid="class_gf_vec3f_1a0983a49fcb2351e470bd415722cc4682" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>data</name></member>
      <member refid="class_gf_vec3f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>dimension</name></member>
      <member refid="class_gf_vec3f_1ab6c4d1521e2c51f3e4ceeeb251442d76" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetArray</name></member>
      <member refid="class_gf_vec3f_1af422c963d8229232ec0d098979eaebfc" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetComplement</name></member>
      <member refid="class_gf_vec3f_1a71b1c47012e0b48dcddfc2bd1bb3915f" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetLength</name></member>
      <member refid="class_gf_vec3f_1a9433f15996434a4b1310db27d1837a40" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetLengthSq</name></member>
      <member refid="class_gf_vec3f_1ae4f9f678daa77dbf7067389970b157a3" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetNormalized</name></member>
      <member refid="class_gf_vec3f_1a8fff664fe0a119b653032efbba11eeaf" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GetProjection</name></member>
      <member refid="class_gf_vec3f_1a411db22d9ed335b2dcaad002978bc08a" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a46be375060092a1ad09b09591d2f0ff7" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a14dc5c4f1a8670c1137e51a5c355c417" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1aa61a36277aff10a6cf999650cdffed31" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a2951a92124a19253f369b91c0af501d8" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a8ca5ff4a5355c0c7ff5a47f2051ce87b" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a0522cf8f35db54241daaed8fab28c9ce" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>GfVec3f</name></member>
      <member refid="class_gf_vec3f_1a944daf5a2b6c504523485ade0c7b577d" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>hash_value</name></member>
      <member refid="class_gf_vec3f_1a8922235fecf39bf106a1353975dc038e" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>Normalize</name></member>
      <member refid="class_gf_vec3f_1ac422a34a9fc965bd1c19c270b77575a0" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator *</name></member>
      <member refid="class_gf_vec3f_1a90fcc46993c07b4be7ccd95066f5a290" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator *</name></member>
      <member refid="class_gf_vec3f_1a6a3a6ab783cee4b75dd1aa8d4b78d0af" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator *</name></member>
      <member refid="class_gf_vec3f_1ad604ea11a5ab57fa65ec171d6ab6bced" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator *=</name></member>
      <member refid="class_gf_vec3f_1a5a54d0e8d101ee53468212017ea64116" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator!=</name></member>
      <member refid="class_gf_vec3f_1adff9734292f0204f9c0c8504918d025c" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator+</name></member>
      <member refid="class_gf_vec3f_1a48adb0c96d02472bed4d93d30dbf1df3" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator+=</name></member>
      <member refid="class_gf_vec3f_1a79775818bcad874656d40878f65907f5" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator-</name></member>
      <member refid="class_gf_vec3f_1a641e5465e23027520f4702518d00fefb" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator-</name></member>
      <member refid="class_gf_vec3f_1af99a88e2ea3acc3f533dccd809133417" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator-=</name></member>
      <member refid="class_gf_vec3f_1a959b498f263118a7866e1f3b4c3132b2" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator/</name></member>
      <member refid="class_gf_vec3f_1a827a6a9f1520613c676e5af2e3ab34bd" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator/=</name></member>
      <member refid="class_gf_vec3f_1aad2365d402fb9c88b4df5f5e267ad037" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator==</name></member>
      <member refid="class_gf_vec3f_1a34b8031e6e165c02b00c1ed3366e7d30" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator==</name></member>
      <member refid="class_gf_vec3f_1a0d386c45ad577ea8c46a8dc895d6a9c9" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator==</name></member>
      <member refid="class_gf_vec3f_1ad2f2927ae13aa143768635975dd4c5c8" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator==</name></member>
      <member refid="class_gf_vec3f_1a23ff646cd6dda6de7c2b8d2386b34867" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator[]</name></member>
      <member refid="class_gf_vec3f_1a7ee7f9f981c98bb13ef2e2b72d6a6229" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>operator[]</name></member>
      <member refid="class_gf_vec3f_1a6cd54d6243877c2603a2c162388ebbf4" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>OrthogonalizeBasis</name></member>
      <member refid="class_gf_vec3f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>ScalarType</name></member>
      <member refid="class_gf_vec3f_1a1ade42b4633c74ecbe5f5d471dd4d77f" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>Set</name></member>
      <member refid="class_gf_vec3f_1a36ebcbd1b781766195e70d1466b08155" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>Set</name></member>
      <member refid="class_gf_vec3f_1a1f77ac29d56101a06d85bbc6c9281596" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>XAxis</name></member>
      <member refid="class_gf_vec3f_1aa05d8b978615bdedf7ecb140786248d6" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>YAxis</name></member>
      <member refid="class_gf_vec3f_1aae20ec4b1f7483bf697727fc7d4bcb13" prot="public" virt="non-virtual"><scope>GfVec3f</scope><name>ZAxis</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
