<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_line_seg" kind="class" language="C++" prot="public">
    <compoundname>GfLineSeg</compoundname>
    <includes refid="line_seg_8h" local="no">lineSeg.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_line_seg_1a85c2f7136a8c0c54185559603ecf32dc" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_line" kindref="compound">GfLine</ref></type>
        <definition>GfLine _line</definition>
        <argsstring></argsstring>
        <name>_line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="99" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_line_seg_1a413e08de81a8d8d4b4ae3df54a75d3b2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _length</definition>
        <argsstring></argsstring>
        <name>_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="100" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_line_seg_1a5875b7a324c0a065dc8d3fb7112e42a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfLineSeg</definition>
        <argsstring>()</argsstring>
        <name>GfLineSeg</name>
        <briefdescription>
<para>The default constructor leaves line parameters undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="52" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1a1881434912530cf2f1988d78520fb163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfLineSeg</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1)</argsstring>
        <name>GfLineSeg</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
<para>Construct a line segment that spans two points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="56" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1a3b4f6d7e8a599a28b3f13782f3164d39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetPoint</definition>
        <argsstring>(double t) const</argsstring>
        <name>GetPoint</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Return the point on the segment specified by the parameter t. </para>
        </briefdescription>
        <detaileddescription>
<para>p = p0 + t * (p1 - p0) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="62" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1a2c144e666135d6c69392c253995c275b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
<para>Return the normalized direction of the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="65" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Return the length of the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="68" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1aa15686e4bbff11587da1e93353baf74a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d FindClosestPoint</definition>
        <argsstring>(const GfVec3d &amp;point, double *t=NULL) const</argsstring>
        <name>FindClosestPoint</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>t</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the point on the line that is closest to <computeroutput>point</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>t</computeroutput> is not <computeroutput>NULL</computeroutput>, it will be set to the parametric distance along the line of the closest point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1a584db8bb2d93e073909907fac336c061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfLineSeg &amp;l) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Component-wise equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points and directions, must match exactly for lines to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="78" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line_seg_1a35dd9cf52ef7ca710dc0b60aabc521bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfLineSeg &amp;r) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points, and directions must match exactly for lines to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="85" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="85" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_line_seg_1a3f834e5856300fbf35d96832be9a3ffd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend bool</type>
        <definition>GF_API friend bool GfFindClosestPoints</definition>
        <argsstring>(const GfLine &amp;, const GfLineSeg &amp;, GfVec3d *, GfVec3d *, double *, double *)</argsstring>
        <name>GfFindClosestPoints</name>
        <param>
          <type>const <ref refid="class_gf_line" kindref="compound">GfLine</ref> &amp;</type>
          <defname>line</defname>
        </param>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <defname>seg</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>p1</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>p2</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t2</defname>
        </param>
        <briefdescription>
<para>Computes the closets points on <computeroutput>line</computeroutput> and <computeroutput>seg</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The two points are returned in <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. The parametric distances of <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> along the line and segment are returned in <computeroutput>t1</computeroutput> and <computeroutput>t2</computeroutput>.</para>
<para>This returns <computeroutput>false</computeroutput> if the lines were close enough to parallel that no points could be computed; in this case, the other return values are undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_line_seg_1a7ad4bc830d43a3c823cd4df16836b932" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend bool</type>
        <definition>GF_API friend bool GfFindClosestPoints</definition>
        <argsstring>(const GfLineSeg &amp;, const GfLineSeg &amp;, GfVec3d *, GfVec3d *, double *, double *)</argsstring>
        <name>GfFindClosestPoints</name>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <defname>seg1</defname>
        </param>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
          <defname>seg2</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>p1</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <defname>p2</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t2</defname>
        </param>
        <briefdescription>
<para>Computes the closets points on two line segments, <computeroutput>seg1</computeroutput> and <computeroutput>seg2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The two points are returned in <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. The parametric distances of <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> along the segments are returned in <computeroutput>t1</computeroutput> and <computeroutput>t2</computeroutput>.</para>
<para>This returns <computeroutput>false</computeroutput> if the lines were close enough to parallel that no points could be computed; in this case, the other return values are undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 3D line segment. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a three-dimensional line segment in space. </para>
    </detaileddescription>
    <location file="pxr/base/gf/lineSeg.h" line="47" column="1" bodyfile="pxr/base/gf/lineSeg.h" bodystart="47" bodyend="101"/>
    <listofallmembers>
      <member refid="class_gf_line_seg_1a413e08de81a8d8d4b4ae3df54a75d3b2" prot="private" virt="non-virtual"><scope>GfLineSeg</scope><name>_length</name></member>
      <member refid="class_gf_line_seg_1a85c2f7136a8c0c54185559603ecf32dc" prot="private" virt="non-virtual"><scope>GfLineSeg</scope><name>_line</name></member>
      <member refid="class_gf_line_seg_1aa15686e4bbff11587da1e93353baf74a" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>FindClosestPoint</name></member>
      <member refid="class_gf_line_seg_1a2c144e666135d6c69392c253995c275b" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>GetDirection</name></member>
      <member refid="class_gf_line_seg_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>GetLength</name></member>
      <member refid="class_gf_line_seg_1a3b4f6d7e8a599a28b3f13782f3164d39" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>GetPoint</name></member>
      <member refid="class_gf_line_seg_1a3f834e5856300fbf35d96832be9a3ffd" prot="private" virt="non-virtual"><scope>GfLineSeg</scope><name>GfFindClosestPoints</name></member>
      <member refid="class_gf_line_seg_1a7ad4bc830d43a3c823cd4df16836b932" prot="private" virt="non-virtual"><scope>GfLineSeg</scope><name>GfFindClosestPoints</name></member>
      <member refid="class_gf_line_seg_1a5875b7a324c0a065dc8d3fb7112e42a7" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>GfLineSeg</name></member>
      <member refid="class_gf_line_seg_1a1881434912530cf2f1988d78520fb163" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>GfLineSeg</name></member>
      <member refid="class_gf_line_seg_1a35dd9cf52ef7ca710dc0b60aabc521bd" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>operator !=</name></member>
      <member refid="class_gf_line_seg_1a584db8bb2d93e073909907fac336c061" prot="public" virt="non-virtual"><scope>GfLineSeg</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
