<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_physics_limit_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdPhysicsLimitAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="limit_a_p_i_8h" local="no">limitAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_limit_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741a96af997eb3f5d95e044c45ca0a03faab" kindref="member">UsdSchemaKind::MultipleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="69" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_limit_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="215" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1ad8901f8aac4f3d88e10c4f1a4d3f897c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsLimitAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim(), const TfToken &amp;name=TfToken())</argsstring>
        <name>UsdPhysicsLimitAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> with name <computeroutput>name</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_limit_a_p_i_1a29ab21a424ba71e599306663b252519f" kindref="member">UsdPhysicsLimitAPI::Get</ref>( prim.GetStage(), prim.GetPath().AppendProperty( &quot;limit:name&quot;));</para>
<para>for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="80" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a19d065f012ff3d2b75211b94cea7c407" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsLimitAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj, const TfToken &amp;name)</argsstring>
        <name>UsdPhysicsLimitAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> with name <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref>(schemaObj.GetPrim(), name), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="89" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1af0d90fd1c3c20b0f6eac9256f07a48fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsLimitAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsLimitAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a381954a046cc6a7593835974f1f76b53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the name of this multiple-apply schema instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="115" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1af88fd288b0252c1176a77b2389a8179c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute GetLowAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetLowAttr</name>
        <briefdescription>
<para>Lower limit. </para>
        </briefdescription>
        <detaileddescription>
<para>Units: degrees or distance depending on trans or rot axis applied to. -inf means not limited in negative direction.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float physics:low = -inf</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1afb3819933d84ce69513678cb253a90ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute CreateLowAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateLowAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_limit_a_p_i_1af88fd288b0252c1176a77b2389a8179c" kindref="member">GetLowAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1aeb54ca185a03b11ad741781bf6e7cf0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute GetHighAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetHighAttr</name>
        <briefdescription>
<para>Upper limit. </para>
        </briefdescription>
        <detaileddescription>
<para>Units: degrees or distance depending on trans or rot axis applied to. inf means not limited in positive direction.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float physics:high = inf</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a89936ec635b7f82459f5bf4945d2acee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute CreateHighAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateHighAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_limit_a_p_i_1aeb54ca185a03b11ad741781bf6e7cf0d" kindref="member">GetHighAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="269" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a2c1b9eba162137139ca3c64c910adefe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>static USDPHYSICS_API TfTokenVector GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited, const TfToken &amp;instanceName)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes for a given instance name. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. The names returned will have the proper namespace prefix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a29ab21a424ba71e599306663b252519f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsLimitAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. <computeroutput>path</computeroutput> must be of the format &lt;path&gt;.limit:name .</para>
<para>This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">TfToken<sp/>name<sp/>=<sp/>SdfPath::StripNamespace(path.GetToken());</highlight></codeline>
<codeline><highlight class="normal">UsdPhysicsLimitAPI(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;GetPrimAtPath(path.GetPrimPath()),<sp/>name);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1ac1db7cccc92af515dd32014920a4d437" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsLimitAPI Get</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> with name <computeroutput>name</computeroutput> holding the prim <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Shorthand for <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI(prim, name)</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a0762268c6a0d139f73aa0944cd7b4db6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API std::vector&lt; <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> &gt;</type>
        <definition>static USDPHYSICS_API std::vector&lt;UsdPhysicsLimitAPI&gt; GetAll</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>GetAll</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Return a vector of all named instances of <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> on the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a1626b8e8941af374f2c3821ecf45f02b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API bool</type>
        <definition>static USDPHYSICS_API bool IsSchemaPropertyBaseName</definition>
        <argsstring>(const TfToken &amp;baseName)</argsstring>
        <name>IsSchemaPropertyBaseName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseName</declname>
        </param>
        <briefdescription>
<para>Checks if the given name <computeroutput>baseName</computeroutput> is the base name of a property of PhysicsLimitAPI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1ad7156d55f911af2503f8b331672b066f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API bool</type>
        <definition>static USDPHYSICS_API bool IsPhysicsLimitAPIPath</definition>
        <argsstring>(const SdfPath &amp;path, TfToken *name)</argsstring>
        <name>IsPhysicsLimitAPIPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Checks if the given path <computeroutput>path</computeroutput> is of an API schema of type PhysicsLimitAPI. </para>
        </briefdescription>
        <detaileddescription>
<para>If so, it stores the instance name of the schema in <computeroutput>name</computeroutput> and returns true. Otherwise, it returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a001a2eb8d6e600528b877be020910d06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API bool</type>
        <definition>static USDPHYSICS_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>multiple-apply</bold> API schema can be applied, with the given instance name, <computeroutput>name</computeroutput>, to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a78e933a4e6012154ccf7c88433ffdd2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsLimitAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>multiple-apply</bold> API schema to the given <computeroutput>prim</computeroutput> along with the given instance name, <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;PhysicsLimitAPI:&lt;i&gt;name&lt;/i&gt;&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim. For example, if <computeroutput>name</computeroutput> is &apos;instance1&apos;, the token &apos;PhysicsLimitAPI:instance1&apos; is added to &apos;apiSchemas&apos;.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_physics_limit_a_p_i" kindref="compound">UsdPhysicsLimitAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="204" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1afe453b5ad73c3734b6c12709dd6f0c4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDPHYSICS_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="211" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="219" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_limit_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/limitAPI.h" line="223" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The PhysicsLimitAPI can be applied to a PhysicsJoint and will restrict the movement along an axis. </para>
    </briefdescription>
    <detaileddescription>
<para>PhysicsLimitAPI is a multipleApply schema: The PhysicsJoint can be restricted along &quot;transX&quot;, &quot;transY&quot;, &quot;transZ&quot;, &quot;rotX&quot;, &quot;rotY&quot;, &quot;rotZ&quot;, &quot;distance&quot;. Setting these as a multipleApply schema <ref refid="class_tf_token" kindref="compound">TfToken</ref> name will define the degree of freedom the PhysicsLimitAPI is applied to. Note that if the low limit is higher than the high limit, motion along this axis is considered locked. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7786">
        <label>UsdPhysicsLimitAPI</label>
        <link refid="class_usd_physics_limit_a_p_i"/>
        <childnode refid="7787" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7788">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7787">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7788" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7789">
        <label>UsdPhysicsLimitAPI</label>
        <link refid="class_usd_physics_limit_a_p_i"/>
        <childnode refid="7790" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7791">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7790">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7791" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdPhysics/limitAPI.h" line="64" column="1" bodyfile="pxr/usd/usdPhysics/limitAPI.h" bodystart="63" bodyend="282"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1afe453b5ad73c3734b6c12709dd6f0c4f" prot="protected" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a78e933a4e6012154ccf7c88433ffdd2a" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>Apply</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a001a2eb8d6e600528b877be020910d06" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a89936ec635b7f82459f5bf4945d2acee" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>CreateHighAttr</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1afb3819933d84ce69513678cb253a90ca" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>CreateLowAttr</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a29ab21a424ba71e599306663b252519f" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>Get</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1ac1db7cccc92af515dd32014920a4d437" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>Get</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a0762268c6a0d139f73aa0944cd7b4db6" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetAll</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1aeb54ca185a03b11ad741781bf6e7cf0d" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetHighAttr</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1af88fd288b0252c1176a77b2389a8179c" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetLowAttr</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a381954a046cc6a7593835974f1f76b53" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetName</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a2c1b9eba162137139ca3c64c910adefe" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1ad7156d55f911af2503f8b331672b066f" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsPhysicsLimitAPIPath</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a1626b8e8941af374f2c3821ecf45f02b" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsSchemaPropertyBaseName</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1ad8901f8aac4f3d88e10c4f1a4d3f897c" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdPhysicsLimitAPI</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1a19d065f012ff3d2b75211b94cea7c407" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdPhysicsLimitAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsLimitAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdPhysicsLimitAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_physics_limit_a_p_i_1af0d90fd1c3c20b0f6eac9256f07a48fe" prot="public" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>~UsdPhysicsLimitAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdPhysicsLimitAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
