<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_ri_statements_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdRiStatementsAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="statements_a_p_i_8h" local="no">statementsAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_ri_statements_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="75" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_ri_statements_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="167" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a9d99fea833593580644c961495a889ae" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiStatementsAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdRiStatementsAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_ri_statements_a_p_i_1a3821f05ee9ceb669b55f2bf0d31e4ac7" kindref="member">UsdRiStatementsAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="81" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a442512c9ffed41d4400ed947afbbc159" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiStatementsAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdRiStatementsAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="89" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a8230c93914041cbe90c236466d722e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API</type>
        <definition>virtual USDRI_API ~UsdRiStatementsAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdRiStatementsAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a857614384bc0e760788c7111b804548b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute CreateRiAttribute</definition>
        <argsstring>(const TfToken &amp;name, const std::string &amp;riType, const std::string &amp;nameSpace=&quot;user&quot;)</argsstring>
        <name>CreateRiAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>riType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSpace</declname>
          <defval>&quot;user&quot;</defval>
        </param>
        <briefdescription>
<para>Create a rib attribute on the prim to which this schema is attached. </para>
        </briefdescription>
        <detaileddescription>
<para>A rib attribute consists of an attribute <emphasis>&quot;nameSpace&quot;</emphasis> and an attribute <emphasis>&quot;name&quot;</emphasis>. For example, the namespace &quot;cull&quot; may define attributes &quot;backfacing&quot; and &quot;hidden&quot;, and user-defined attributes belong to the namespace &quot;user&quot;.</para>
<para>This method makes no attempt to validate that the given <computeroutput>nameSpace</computeroutput> and <emphasis>name</emphasis> are actually meaningful to prman or any other renderer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>riType</parametername>
</parameternamelist>
<parameterdescription>
<para>should be a known RenderMan type definition, which can be array-valued. For instance, both &quot;color&quot; and &quot;float[3]&quot; are valid values for <computeroutput>riType</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a32ef3ada3e1e7c8da3d7dfdc83905b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute CreateRiAttribute</definition>
        <argsstring>(const TfToken &amp;name, const TfType &amp;tfType, const std::string &amp;nameSpace=&quot;user&quot;)</argsstring>
        <name>CreateRiAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>tfType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSpace</declname>
          <defval>&quot;user&quot;</defval>
        </param>
        <briefdescription>
<para>Creates an attribute of the given <computeroutput>tfType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1adbbf89621c8c1ca9395e9c369c25cfce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute GetRiAttribute</definition>
        <argsstring>(const TfToken &amp;name, const std::string &amp;nameSpace=&quot;user&quot;)</argsstring>
        <name>GetRiAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSpace</declname>
          <defval>&quot;user&quot;</defval>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> representing the Ri attribute with the name <emphasis>name</emphasis>, in the namespace <emphasis>nameSpace</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute returned may or may not <bold>actually</bold> exist so it must be checked for validity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a45ba42fb3067d4b1513706aefc03b042" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USDRI_API std::vector&lt;UsdProperty&gt; GetRiAttributes</definition>
        <argsstring>(const std::string &amp;nameSpace=&quot;&quot;) const</argsstring>
        <name>GetRiAttributes</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameSpace</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Return all rib attributes on this prim, or under a specific namespace (e.g. &quot;user&quot;). </para>
        </briefdescription>
        <detaileddescription>
<para>As noted above, rib attributes can be either <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> or <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref>, and like all UsdProperties, need not have a defined value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1aa93f572a85a6d1db3228420a0ac112e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API void</type>
        <definition>USDRI_API void SetCoordinateSystem</definition>
        <argsstring>(const std::string &amp;coordSysName)</argsstring>
        <name>SetCoordinateSystem</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>coordSysName</declname>
        </param>
        <briefdescription>
<para>Sets the &quot;ri:coordinateSystem&quot; attribute to the given string value, creating the attribute if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>That identifies this prim as providing a coordinate system, which can be retrieved via UsdGeomXformable::GetTransformAttr(). Also adds the owning prim to the ri:modelCoordinateSystems relationship targets on its parent leaf model prim, if it exists. If this prim is not under a leaf model, no relationship targets will be authored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a03328f7bd26d49da3d92333976a4e84c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API std::string</type>
        <definition>USDRI_API std::string GetCoordinateSystem</definition>
        <argsstring>() const</argsstring>
        <name>GetCoordinateSystem</name>
        <briefdescription>
<para>Returns the value in the &quot;ri:coordinateSystem&quot; attribute if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1aebbe43499fc9ab573b92ab7a15db3e25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool HasCoordinateSystem</definition>
        <argsstring>() const</argsstring>
        <name>HasCoordinateSystem</name>
        <briefdescription>
<para>Returns true if the underlying prim has a ri:coordinateSystem opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a631ac5bee48904231b44abf5688362fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API void</type>
        <definition>USDRI_API void SetScopedCoordinateSystem</definition>
        <argsstring>(const std::string &amp;coordSysName)</argsstring>
        <name>SetScopedCoordinateSystem</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>coordSysName</declname>
        </param>
        <briefdescription>
<para>Sets the &quot;ri:scopedCoordinateSystem&quot; attribute to the given string value, creating the attribute if needed. </para>
        </briefdescription>
        <detaileddescription>
<para>That identifies this prim as providing a coordinate system, which can be retrieved via UsdGeomXformable::GetTransformAttr(). Such coordinate systems are local to the RI attribute stack state, but does get updated properly for instances when defined inside an object master. Also adds the owning prim to the ri:modelScopedCoordinateSystems relationship targets on its parent leaf model prim, if it exists. If this prim is not under a leaf model, no relationship targets will be authored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1acb8b8e32d901d49a582abeb9a862eecf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API std::string</type>
        <definition>USDRI_API std::string GetScopedCoordinateSystem</definition>
        <argsstring>() const</argsstring>
        <name>GetScopedCoordinateSystem</name>
        <briefdescription>
<para>Returns the value in the &quot;ri:scopedCoordinateSystem&quot; attribute if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1ad32a607cfa6f83896f9ad2889080071d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool HasScopedCoordinateSystem</definition>
        <argsstring>() const</argsstring>
        <name>HasScopedCoordinateSystem</name>
        <briefdescription>
<para>Returns true if the underlying prim has a ri:scopedCoordinateSystem opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a47ef33545cd5a78ff8a2d5dce31cf211" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool GetModelCoordinateSystems</definition>
        <argsstring>(SdfPathVector *targets) const</argsstring>
        <name>GetModelCoordinateSystems</name>
        <param>
          <type>SdfPathVector *</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
<para>Populates the output <computeroutput>targets</computeroutput> with the authored ri:modelCoordinateSystems, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the query was successful. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1ac6e97ed496faad2c88f7bd659d705fe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool GetModelScopedCoordinateSystems</definition>
        <argsstring>(SdfPathVector *targets) const</argsstring>
        <name>GetModelScopedCoordinateSystems</name>
        <param>
          <type>SdfPathVector *</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
<para>Populates the output <computeroutput>targets</computeroutput> with the authored ri:modelScopedCoordinateSystems, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the query was successful. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="377" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1af263256d7a1c28267a0de9d26e208f41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDRI_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a3821f05ee9ceb669b55f2bf0d31e4ac7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref></type>
        <definition>static USDRI_API UsdRiStatementsAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdRiStatementsAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a96de51323375de6caa77c42f6bd9e199" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>static USDRI_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a65c3aea2b75bdde19775044782a04053" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref></type>
        <definition>static USDRI_API UsdRiStatementsAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;StatementsAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_ri_statements_a_p_i" kindref="compound">UsdRiStatementsAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a1df29270fe7cd1c01a6af43c6eca9021" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static TfToken GetRiAttributeName</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>GetRiAttributeName</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Return the base, most-specific name of the rib attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, the <emphasis>name</emphasis> of the rib attribute &quot;cull:backfacing&quot; is &quot;backfacing&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="248" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a8d493c47120e5d440fccad76de216deb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static USDRI_API TfToken GetRiAttributeNameSpace</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>GetRiAttributeNameSpace</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Return the containing namespace of the rib attribute (e.g. &quot;user&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a42876a075fa355ff09c28d6dc490d811" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>static USDRI_API bool IsRiAttribute</definition>
        <argsstring>(const UsdProperty &amp;prop)</argsstring>
        <name>IsRiAttribute</name>
        <param>
          <type>const <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &amp;</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Return true if the property is in the &quot;ri:attributes&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a256d71bea1b9e97698b4bc518d6b67a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API std::string</type>
        <definition>static USDRI_API std::string MakeRiAttributePropertyName</definition>
        <argsstring>(const std::string &amp;attrName)</argsstring>
        <name>MakeRiAttributePropertyName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Returns the given <computeroutput>attrName</computeroutput> prefixed with the full Ri attribute namespace, creating a name suitable for an RiAttribute <ref refid="class_usd_property" kindref="compound">UsdProperty</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This handles conversion of common separator characters used in other packages, such as periods and underscores.</para>
<para>Will return empty string if attrName is not a valid property identifier; otherwise, will return a valid property name that identifies the property as an RiAttribute, according to the following rules: <itemizedlist>
<listitem><para>If <computeroutput>attrName</computeroutput> is already a properly constructed RiAttribute property name, return it unchanged.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>If <computeroutput>attrName</computeroutput> contains two or more tokens separated by a <emphasis>colon</emphasis>, consider the first to be the namespace, and the rest the name, joined by underscores </para>
</listitem>
<listitem><para>If <computeroutput>attrName</computeroutput> contains two or more tokens separated by a <emphasis>period</emphasis>, consider the first to be the namespace, and the rest the name, joined by underscores </para>
</listitem>
<listitem><para>If <computeroutput>attrName</computeroutput> contains two or more tokens separated by an, <emphasis>underscore</emphasis> consider the first to be the namespace, and the rest the name, joined by underscores </para>
</listitem>
<listitem><para>else, assume <computeroutput>attrName</computeroutput> is the name, and &quot;user&quot; is the namespace </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="293" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a33433d6be99bff8201f850170177dec7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDRI_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="163" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a7ce06d7f0925f71015cc1361926bd278" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDRI_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="171" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_ri_statements_a_p_i_1a3284a75ad1e5667bbbe2fcd79124282e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDRI_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/statementsAPI.h" line="175" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Container namespace schema for all renderman statements. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>The longer term goal is for clients to go directly to primvar or render-attribute API&apos;s, instead of using UsdRi StatementsAPI for inherited attributes. Anticpating this, StatementsAPI can smooth the way via a few environment variables:</para>
</simplesect>
<itemizedlist>
<listitem><para>USDRI_STATEMENTS_READ_OLD_ENCODING: Causes StatementsAPI to read old-style attributes instead of primvars in the &quot;ri:&quot; namespace. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8019">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8018">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8019" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8017">
        <label>UsdRiStatementsAPI</label>
        <link refid="class_usd_ri_statements_a_p_i"/>
        <childnode refid="8018" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8022">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8021">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8022" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8020">
        <label>UsdRiStatementsAPI</label>
        <link refid="class_usd_ri_statements_a_p_i"/>
        <childnode refid="8021" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdRi/statementsAPI.h" line="70" column="1" bodyfile="pxr/usd/usdRi/statementsAPI.h" bodystart="69" bodyend="379"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a33433d6be99bff8201f850170177dec7" prot="protected" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a7ce06d7f0925f71015cc1361926bd278" prot="private" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a3284a75ad1e5667bbbe2fcd79124282e" prot="private" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a65c3aea2b75bdde19775044782a04053" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>Apply</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a96de51323375de6caa77c42f6bd9e199" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a857614384bc0e760788c7111b804548b" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>CreateRiAttribute</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a32ef3ada3e1e7c8da3d7dfdc83905b99" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>CreateRiAttribute</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a3821f05ee9ceb669b55f2bf0d31e4ac7" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>Get</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a03328f7bd26d49da3d92333976a4e84c" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetCoordinateSystem</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a47ef33545cd5a78ff8a2d5dce31cf211" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetModelCoordinateSystems</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1ac6e97ed496faad2c88f7bd659d705fe3" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetModelScopedCoordinateSystems</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1adbbf89621c8c1ca9395e9c369c25cfce" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetRiAttribute</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a1df29270fe7cd1c01a6af43c6eca9021" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetRiAttributeName</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a8d493c47120e5d440fccad76de216deb" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetRiAttributeNameSpace</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a45ba42fb3067d4b1513706aefc03b042" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetRiAttributes</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1af263256d7a1c28267a0de9d26e208f41" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1acb8b8e32d901d49a582abeb9a862eecf" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>GetScopedCoordinateSystem</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1aebbe43499fc9ab573b92ab7a15db3e25" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>HasCoordinateSystem</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1ad32a607cfa6f83896f9ad2889080071d" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>HasScopedCoordinateSystem</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a42876a075fa355ff09c28d6dc490d811" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsRiAttribute</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a256d71bea1b9e97698b4bc518d6b67a9" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>MakeRiAttributePropertyName</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1aa93f572a85a6d1db3228420a0ac112e5" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>SetCoordinateSystem</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a631ac5bee48904231b44abf5688362fe" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>SetScopedCoordinateSystem</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a9d99fea833593580644c961495a889ae" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdRiStatementsAPI</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a442512c9ffed41d4400ed947afbbc159" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdRiStatementsAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdRiStatementsAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdRiStatementsAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_ri_statements_a_p_i_1a8230c93914041cbe90c236466d722e09" prot="public" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>~UsdRiStatementsAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdRiStatementsAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
