<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_ri_spline_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdRiSplineAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="spline_a_p_i_8h" local="no">splineAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Spline Validation API</header>
      <description><para><anchor id="class_usd_ri_spline_a_p_i_1UsdRiSplineAPI_Validation"/></para>
<para>API for validating the properties of a spline. </para>
</description>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a885f3468f8e60dd0a80ceb7073ba5939" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool Validate</definition>
        <argsstring>(std::string *reason) const</argsstring>
        <name>Validate</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Validates the attribute values belonging to the spline. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the spline has all valid attribute values. Returns false and populates the <computeroutput>reason</computeroutput> output argument if the spline has invalid attribute values.</para>
<para>Here&apos;s the list of validations performed by this method: <itemizedlist>
<listitem><para>the SplineAPI must be fully initialized </para>
</listitem>
<listitem><para>interpolation attribute must exist and use an allowed value </para>
</listitem>
<listitem><para>the positions array must be a float array </para>
</listitem>
<listitem><para>the positions array must be sorted by increasing value </para>
</listitem>
<listitem><para>the values array must use the correct value type </para>
</listitem>
<listitem><para>the positions and values array must have the same size </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="317" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_ri_spline_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="80" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_ri_spline_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="172" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_ri_spline_a_p_i_1a1efcfabd0ba39b2b4587701d1b0e354a" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>const TfToken _splineName</definition>
        <argsstring></argsstring>
        <name>_splineName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="327" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_ri_spline_a_p_i_1ac02a5ac3afffa1b67e35c88daf6077c4" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>const SdfValueTypeName _valuesTypeName</definition>
        <argsstring></argsstring>
        <name>_valuesTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="328" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_ri_spline_a_p_i_1a6cc1147f054f84db585842554d722967" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _duplicateBSplineEndpoints</definition>
        <argsstring></argsstring>
        <name>_duplicateBSplineEndpoints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="329" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a9e51857fe7598f1bbbae7c3d1cb37a93" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiSplineAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdRiSplineAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_ri_spline_a_p_i_1a41f5a3bb4e9990b282955fa9682672ea" kindref="member">UsdRiSplineAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="86" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1ae26644be442f5dc0b735174f48f39fa8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiSplineAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdRiSplineAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="94" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1ab2ebea5a97c35a03396eee3602d3a6c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API</type>
        <definition>virtual USDRI_API ~UsdRiSplineAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdRiSplineAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a2b39671d784b7b86ac192ca18dafc69a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiSplineAPI</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;splineName, const SdfValueTypeName &amp;valuesTypeName, bool doesDuplicateBSplineEndpoints)</argsstring>
        <name>UsdRiSplineAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>splineName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>valuesTypeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doesDuplicateBSplineEndpoints</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> with the given <computeroutput>splineName</computeroutput> on the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="196" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="196" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a6b1e6d0f8ddfb8c073cca28eb9b238d6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRiSplineAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj, const TfToken &amp;splineName, const SdfValueTypeName &amp;valuesTypeName, bool doesDuplicateBSplineEndpoints)</argsstring>
        <name>UsdRiSplineAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>splineName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>valuesTypeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doesDuplicateBSplineEndpoints</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> with the given <computeroutput>splineName</computeroutput> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="208" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="208" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1aa6cbd3b7b2a68f0b5539831e813d197d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>USDRI_API bool DoesDuplicateBSplineEndpoints</definition>
        <argsstring>() const</argsstring>
        <name>DoesDuplicateBSplineEndpoints</name>
        <briefdescription>
<para>Returns true if this <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> is configured to ensure the endpoints are duplicated when using a bspline basis. </para>
        </briefdescription>
        <detaileddescription>
<para>Duplicating the endpoints ensures that the spline reaches those points at either end of the parameter range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="225" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a8687965b2a1dbc561fb3ba49577a601a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>USDRI_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>USDRI_API SdfValueTypeName GetValuesTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetValuesTypeName</name>
        <briefdescription>
<para>Returns the intended typename of the values attribute of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="231" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a683dfcab94c9c2676fbde570c91d79e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute GetInterpolationAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetInterpolationAttr</name>
        <briefdescription>
<para>Interpolation method for the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 C++ Type: <ref refid="class_tf_token" kindref="compound">TfToken</ref> <linebreak/>
 Usd Type: SdfValueTypeNames-&gt;Token <linebreak/>
 Variability: SdfVariabilityUniform <linebreak/>
 Fallback Value: linear <linebreak/>
 <ref refid="usd_2usd_ri_2tokens_8h_1a9009dd5e9633019f91f5673bd5f761c3" kindref="member">Allowed Values</ref>: [linear, constant, bspline, catmullRom] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a5fb96df7245741a62d245dc34ddd77dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute CreateInterpolationAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateInterpolationAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_ri_spline_a_p_i_1a683dfcab94c9c2676fbde570c91d79e2" kindref="member">GetInterpolationAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1ab689d0e81bee36655605e7ed079ed7aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute GetPositionsAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetPositionsAttr</name>
        <briefdescription>
<para>Positions of the knots. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 C++ Type: VtArray&lt;float&gt; <linebreak/>
 Usd Type: SdfValueTypeNames-&gt;FloatArray <linebreak/>
 Variability: SdfVariabilityUniform <linebreak/>
 Fallback Value: No Fallback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1aa515566b0f8a95fd9e8ec54538b3d503" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute CreatePositionsAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreatePositionsAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_ri_spline_a_p_i_1ab689d0e81bee36655605e7ed079ed7aa" kindref="member">GetPositionsAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1abec241cf9239e450552a3853a0794cd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute GetValuesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetValuesAttr</name>
        <briefdescription>
<para>Values of the knots. </para>
        </briefdescription>
        <detaileddescription>
<para><linebreak/>
 C++ Type: See <ref refid="class_usd_ri_spline_a_p_i_1a8687965b2a1dbc561fb3ba49577a601a" kindref="member">GetValuesTypeName()</ref> <linebreak/>
 Usd Type: See <ref refid="class_usd_ri_spline_a_p_i_1a8687965b2a1dbc561fb3ba49577a601a" kindref="member">GetValuesTypeName()</ref> <linebreak/>
 Variability: SdfVariabilityUniform <linebreak/>
 Fallback Value: No Fallback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1acb519d635848132b891219e751de984c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRI_API UsdAttribute CreateValuesAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateValuesAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_ri_spline_a_p_i_1abec241cf9239e450552a3853a0794cd4" kindref="member">GetValuesAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="294" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1af263256d7a1c28267a0de9d26e208f41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDRI_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a41f5a3bb4e9990b282955fa9682672ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref></type>
        <definition>static USDRI_API UsdRiSplineAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdRiSplineAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a96de51323375de6caa77c42f6bd9e199" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API bool</type>
        <definition>static USDRI_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a74f3988595d14a8a438bed4e342d0dc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref></type>
        <definition>static USDRI_API UsdRiSplineAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;RiSplineAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_ri_spline_a_p_i" kindref="compound">UsdRiSplineAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a33433d6be99bff8201f850170177dec7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDRI_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="168" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a7ce06d7f0925f71015cc1361926bd278" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDRI_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="176" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1a3284a75ad1e5667bbbe2fcd79124282e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDRI_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_ri_spline_a_p_i_1af5eb73aec282a5cc5aca806b69a511b1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _GetScopedPropertyName</definition>
        <argsstring>(const TfToken &amp;baseName) const</argsstring>
        <name>_GetScopedPropertyName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseName</declname>
        </param>
        <briefdescription>
<para>Returns the properly-scoped form of the given property name, accounting for the spline name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRi/splineAPI.h" line="324" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000086"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This API schema will be removed in a future release.</para>
</xrefdescription></xrefsect></para>
<para>RiSplineAPI is a general purpose API schema used to describe a named spline stored as a set of attributes on a prim.</para>
<para>It is an add-on schema that can be applied many times to a prim with different spline names. All the attributes authored by the schema are namespaced under &quot;$NAME:spline:&quot;, with the name of the spline providing a namespace for the attributes.</para>
<para>The spline describes a 2D piecewise cubic curve with a position and value for each knot. This is chosen to give straightforward artistic control over the shape. The supported basis types are:</para>
<para><itemizedlist>
<listitem><para>linear (UsdRiTokens-&gt;linear)</para>
</listitem><listitem><para>bspline (UsdRiTokens-&gt;bspline)</para>
</listitem><listitem><para>Catmull-Rom (UsdRiTokens-&gt;catmullRom) </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8011">
        <label>UsdRiSplineAPI</label>
        <link refid="class_usd_ri_spline_a_p_i"/>
        <childnode refid="8012" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8013">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8012">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8013" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8014">
        <label>UsdRiSplineAPI</label>
        <link refid="class_usd_ri_spline_a_p_i"/>
        <childnode refid="8015" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8016">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8015">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8016" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdRi/splineAPI.h" line="75" column="1" bodyfile="pxr/usd/usdRi/splineAPI.h" bodystart="74" bodyend="330"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a6cc1147f054f84db585842554d722967" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_duplicateBSplineEndpoints</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a33433d6be99bff8201f850170177dec7" prot="protected" virt="virtual"><scope>UsdRiSplineAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdRiSplineAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1af5eb73aec282a5cc5aca806b69a511b1" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_GetScopedPropertyName</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a7ce06d7f0925f71015cc1361926bd278" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a3284a75ad1e5667bbbe2fcd79124282e" prot="private" virt="virtual"><scope>UsdRiSplineAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdRiSplineAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a1efcfabd0ba39b2b4587701d1b0e354a" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_splineName</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1ac02a5ac3afffa1b67e35c88daf6077c4" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>_valuesTypeName</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a74f3988595d14a8a438bed4e342d0dc9" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>Apply</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a96de51323375de6caa77c42f6bd9e199" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a5fb96df7245741a62d245dc34ddd77dd" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>CreateInterpolationAttr</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1aa515566b0f8a95fd9e8ec54538b3d503" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>CreatePositionsAttr</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1acb519d635848132b891219e751de984c" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>CreateValuesAttr</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1aa6cbd3b7b2a68f0b5539831e813d197d" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>DoesDuplicateBSplineEndpoints</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a41f5a3bb4e9990b282955fa9682672ea" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>Get</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a683dfcab94c9c2676fbde570c91d79e2" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetInterpolationAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1ab689d0e81bee36655605e7ed079ed7aa" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetPositionsAttr</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1af263256d7a1c28267a0de9d26e208f41" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1abec241cf9239e450552a3853a0794cd4" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetValuesAttr</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a8687965b2a1dbc561fb3ba49577a601a" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>GetValuesTypeName</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a9e51857fe7598f1bbbae7c3d1cb37a93" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdRiSplineAPI</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1ae26644be442f5dc0b735174f48f39fa8" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdRiSplineAPI</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a2b39671d784b7b86ac192ca18dafc69a" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdRiSplineAPI</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a6b1e6d0f8ddfb8c073cca28eb9b238d6" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdRiSplineAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1a885f3468f8e60dd0a80ceb7073ba5939" prot="public" virt="non-virtual"><scope>UsdRiSplineAPI</scope><name>Validate</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdRiSplineAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_ri_spline_a_p_i_1ab2ebea5a97c35a03396eee3602d3a6c4" prot="public" virt="virtual"><scope>UsdRiSplineAPI</scope><name>~UsdRiSplineAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdRiSplineAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
