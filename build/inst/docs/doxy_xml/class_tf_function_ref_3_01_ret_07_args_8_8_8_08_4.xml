<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>TfFunctionRef&lt; Ret(Args...)&gt;</compoundname>
    <templateparamlist>
      <param>
        <type>class Ret</type>
      </param>
      <param>
        <type>class...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1ae95caec778bf6474e8e364be26df0617" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename Fn</type>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; std::remove_cv_t&lt; std::remove_reference_t&lt; Fn &gt; &gt;, <ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> &gt;</type>
        <definition>using _IsFunctionRef =  std::is_same&lt; std::remove_cv_t&lt;std::remove_reference_t&lt;Fn&gt; &gt;, TfFunctionRef&gt;</definition>
        <argsstring></argsstring>
        <name>_IsFunctionRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="106" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a66ff18cf1052d120fb77cbded082b77d" prot="private" static="no" mutable="no">
        <type>void const  *</type>
        <definition>void const* _fn</definition>
        <argsstring></argsstring>
        <name>_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="154" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a8f878b438c5d876632b34302bc0ab775" prot="private" static="no" mutable="no">
        <type>Ret(*</type>
        <definition>Ret(* _invoke) (void const *, Args...)</definition>
        <argsstring>)(void const *, Args...)</argsstring>
        <name>_invoke</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="155" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a1355353d4367e59cd45524d784365038" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;!_IsFunctionRef&lt;Fn&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr TfFunctionRef</definition>
        <argsstring>(Fn &amp;fn) noexcept</argsstring>
        <name>TfFunctionRef</name>
        <param>
          <type>Fn &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Construct with an lvalue callable <computeroutput>fn</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="112" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a119b8c4ad0d555a0db0dd82b38636d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfFunctionRef</definition>
        <argsstring>(TfFunctionRef const &amp;rhs) noexcept=default</argsstring>
        <name>TfFunctionRef</name>
        <param>
          <type><ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy construct from another <ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructed <ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> refers to the same callable as <computeroutput>rhs</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a327d30c6eeb7a668a18eff0153f43880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> &amp;</type>
        <definition>TfFunctionRef&amp; operator=</definition>
        <argsstring>(TfFunctionRef const &amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assign from another <ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>After assignment this object refers to the same callable as <computeroutput>rhs</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a613f478e9bdac8195c5a262c5f9a2f6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!_IsFunctionRef&lt; Fn &gt;::value, <ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> &amp; &gt;</type>
        <definition>std::enable_if_t&lt;!_IsFunctionRef&lt;Fn&gt;::value, TfFunctionRef &amp;&gt; operator=</definition>
        <argsstring>(Fn &amp;fn) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>Fn &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Assign from an lvalue callable <computeroutput>fn</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="129" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a73a842feed1a4db5318c3c683a73f382" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(TfFunctionRef &amp;other) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_tf_function_ref" kindref="compound">TfFunctionRef</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this and <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>After the swap, this refers to <computeroutput>other&apos;s</computeroutput> previous callable, and <computeroutput>other</computeroutput> refers to this&apos;s previous callable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="136" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a700847520480a29689d4741bde5ac392" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Ret</type>
        <definition>Ret operator()</definition>
        <argsstring>(Args... args) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke the callable that this object refers to with <computeroutput>args</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="142" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="142" bodyend="144"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a35c712c1281c44315673d77381e5c4c3" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>Ret</type>
        <definition>static Ret _InvokeFn</definition>
        <argsstring>(void const *fn, Args...args)</argsstring>
        <name>_InvokeFn</name>
        <param>
          <type>void const *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/functionRef.h" line="148" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="148" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/functionRef.h" line="100" column="1" bodyfile="pxr/base/tf/functionRef.h" bodystart="99" bodyend="156"/>
    <listofallmembers>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a66ff18cf1052d120fb77cbded082b77d" prot="private" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>_fn</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a8f878b438c5d876632b34302bc0ab775" prot="private" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>_invoke</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a35c712c1281c44315673d77381e5c4c3" prot="private" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>_InvokeFn</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1ae95caec778bf6474e8e364be26df0617" prot="private" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>_IsFunctionRef</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a700847520480a29689d4741bde5ac392" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>operator()</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a327d30c6eeb7a668a18eff0153f43880" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>operator=</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a613f478e9bdac8195c5a262c5f9a2f6b" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>operator=</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a73a842feed1a4db5318c3c683a73f382" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>swap</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a1355353d4367e59cd45524d784365038" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>TfFunctionRef</name></member>
      <member refid="class_tf_function_ref_3_01_ret_07_args_8_8_8_08_4_1a119b8c4ad0d555a0db0dd82b38636d73" prot="public" virt="non-virtual"><scope>TfFunctionRef&lt; Ret(Args...)&gt;</scope><name>TfFunctionRef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
