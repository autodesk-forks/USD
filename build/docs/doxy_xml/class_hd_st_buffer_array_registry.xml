<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_buffer_array_registry" kind="class" language="C++" prot="public">
    <compoundname>HdStBufferArrayRegistry</compoundname>
    <includes refid="buffer_array_registry_8h" local="no">bufferArrayRegistry.h</includes>
    <innerclass refid="struct_hd_st_buffer_array_registry_1_1___entry" prot="private">HdStBufferArrayRegistry::_Entry</innerclass>
    <innerclass refid="class_hd_st_buffer_array_registry_1_1___entry_is_not_empty" prot="private">HdStBufferArrayRegistry::_EntryIsNotEmpty</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_hd_st_buffer_array_registry_1a103e682ea6af4e002668079abd11bc89" prot="private" static="no">
        <type>std::list&lt; HdBufferArraySharedPtr &gt;</type>
        <definition>typedef std::list&lt;HdBufferArraySharedPtr&gt; _HdBufferArraySharedPtrList</definition>
        <argsstring></argsstring>
        <name>_HdBufferArraySharedPtrList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="98" column="1" bodyfile="pxr/imaging/hdSt/bufferArrayRegistry.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_buffer_array_registry_1af9522bff4005e1dd1f5b37d47c98c20a" prot="private" static="no">
        <type>tbb::concurrent_unordered_map&lt; <ref refid="class_hd_st_aggregation_strategy_1a2047256c7e1de8d680e76721feb36004" kindref="member">HdStAggregationStrategy::AggregationId</ref>, _Entry &gt;</type>
        <definition>using _BufferArrayIndex =  tbb::concurrent_unordered_map&lt; HdStAggregationStrategy::AggregationId, _Entry&gt;</definition>
        <argsstring></argsstring>
        <name>_BufferArrayIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="138" column="1" bodyfile="pxr/imaging/hdSt/bufferArrayRegistry.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_buffer_array_registry_1a370d712c74abdd27b061de22aba0d318" prot="private" static="no" mutable="no">
        <type>_BufferArrayIndex</type>
        <definition>_BufferArrayIndex _entries</definition>
        <argsstring></argsstring>
        <name>_entries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="140" column="1" bodyfile="pxr/imaging/hdSt/bufferArrayRegistry.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1afc1c1085297bbe69209f782202518137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HF_MALLOC_TAG_NEW</definition>
        <argsstring>(&quot;new HdStBufferArrayRegistry&quot;)</argsstring>
        <name>HF_MALLOC_TAG_NEW</name>
        <param>
          <type>&quot;new <ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1a353b02f3bb4fcdc53a26139a3ffc67a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStBufferArrayRegistry</definition>
        <argsstring>()</argsstring>
        <name>HdStBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1ab8c62b0c0918a7e85a4b2c1505397eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HdStBufferArrayRegistry</definition>
        <argsstring>()=default</argsstring>
        <name>~HdStBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1a8071807c8d1c29e919d71fd4402d7dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateRange</definition>
        <argsstring>(HdStAggregationStrategy *strategy, TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateRange</name>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
<para>Allocate new buffer array range using strategy Thread-Safe. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1af8b3b7a24e7764ebe14087da0ae6a45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void ReallocateAll</definition>
        <argsstring>(HdStAggregationStrategy *strategy)</argsstring>
        <name>ReallocateAll</name>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Triggers reallocation on all buffers managed by the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1a076f1bdb2f450993a28d9355f346b3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void GarbageCollect</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollect</name>
        <briefdescription>
<para>Frees up buffers that no longer contain any allocated ranges. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1aca417858f00c98181d90002a99bcadfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API size_t</type>
        <definition>HDST_API size_t GetResourceAllocation</definition>
        <argsstring>(HdStAggregationStrategy *strategy, VtDictionary &amp;result) const</argsstring>
        <name>GetResourceAllocation</name>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Generate a report on resources consumed by the managed buffer array. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned size is an esitmate of the gpu memory consumed by the buffers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="85" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hd_st_buffer_array_registry_1a69f3ddb94f06d19168fd5a5104e2c3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API friend std::ostream &amp;</type>
        <definition>HDST_API friend std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const HdStBufferArrayRegistry &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Debug dump. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1aabeddbb6c4194e185e71c0002df34e2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStBufferArrayRegistry</definition>
        <argsstring>(const HdStBufferArrayRegistry &amp;)=delete</argsstring>
        <name>HdStBufferArrayRegistry</name>
        <param>
          <type>const <ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1aa69694bb04a7ddc3e6cfaeddd2f4f3d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
        <definition>HdStBufferArrayRegistry&amp; operator=</definition>
        <argsstring>(const HdStBufferArrayRegistry &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_buffer_array_registry_1a8d6704748bec9a29fbad7eccea3b4fbe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _InsertNewBufferArray</definition>
        <argsstring>(_Entry &amp;entry, const HdBufferArraySharedPtr &amp;expectedTail, HdStAggregationStrategy *strategy, TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>_InsertNewBufferArray</name>
        <param>
          <type>_Entry &amp;</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>const HdBufferArraySharedPtr &amp;</type>
          <declname>expectedTail</declname>
        </param>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
<para>Concurrently adds a new buffer to an entry in the cache. </para>
        </briefdescription>
        <detaileddescription>
<para>If expectedTail differs from the buffer at the end of the entries list after locking, then this function fails and does not add a new buffer (because another thread beat it to it). strategy is the factory class used to create the BufferArray. role and bufferSpecs are parameters to the BufferArray creation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="149" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manages the pool of buffer arrays. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/imaging/hdSt/bufferArrayRegistry.h" line="56" column="1" bodyfile="pxr/imaging/hdSt/bufferArrayRegistry.h" bodystart="55" bodyend="155"/>
    <listofallmembers>
      <member refid="class_hd_st_buffer_array_registry_1af9522bff4005e1dd1f5b37d47c98c20a" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>_BufferArrayIndex</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a370d712c74abdd27b061de22aba0d318" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>_entries</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a103e682ea6af4e002668079abd11bc89" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>_HdBufferArraySharedPtrList</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a8d6704748bec9a29fbad7eccea3b4fbe" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>_InsertNewBufferArray</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a8071807c8d1c29e919d71fd4402d7dbc" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>AllocateRange</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a076f1bdb2f450993a28d9355f346b3d3" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>GarbageCollect</name></member>
      <member refid="class_hd_st_buffer_array_registry_1aca417858f00c98181d90002a99bcadfc" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>GetResourceAllocation</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a353b02f3bb4fcdc53a26139a3ffc67a7" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>HdStBufferArrayRegistry</name></member>
      <member refid="class_hd_st_buffer_array_registry_1aabeddbb6c4194e185e71c0002df34e2d" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>HdStBufferArrayRegistry</name></member>
      <member refid="class_hd_st_buffer_array_registry_1afc1c1085297bbe69209f782202518137" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>HF_MALLOC_TAG_NEW</name></member>
      <member refid="class_hd_st_buffer_array_registry_1a69f3ddb94f06d19168fd5a5104e2c3a6" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_hd_st_buffer_array_registry_1aa69694bb04a7ddc3e6cfaeddd2f4f3d3" prot="private" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>operator=</name></member>
      <member refid="class_hd_st_buffer_array_registry_1af8b3b7a24e7764ebe14087da0ae6a45a" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>ReallocateAll</name></member>
      <member refid="class_hd_st_buffer_array_registry_1ab8c62b0c0918a7e85a4b2c1505397eae" prot="public" virt="non-virtual"><scope>HdStBufferArrayRegistry</scope><name>~HdStBufferArrayRegistry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
