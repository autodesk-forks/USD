<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_vec2d" kind="class" language="C++" prot="public">
    <compoundname>GfVec2d</compoundname>
    <includes refid="vec2d_8h" local="no">vec2d.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_vec2d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
<para>Scalar element type and dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="66" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_vec2d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="67" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_vec2d_1acd1bd335e61bcdf26e368d9c7a737070" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _data[2]</definition>
        <argsstring>[2]</argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="274" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_vec2d_1a987a7fff8b1b3231f93190306e0bed21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfVec2d</definition>
        <argsstring>()=default</argsstring>
        <name>GfVec2d</name>
        <briefdescription>
<para>Default constructor does no initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a0ae5a5d0c9ce48afb9e92a69586fa203" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr GfVec2d</definition>
        <argsstring>(double value)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Initialize all elements to a single value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="73" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a609c3d65e737ff1f93b415d806c96cf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr GfVec2d</definition>
        <argsstring>(double s0, double s1)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>double</type>
          <declname>s0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s1</declname>
        </param>
        <briefdescription>
<para>Initialize all elements with explicit arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="79" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a81de5bb9742f479c4939a1545a61394c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Scl</type>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr GfVec2d</definition>
        <argsstring>(Scl const *p)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>Scl const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Construct with pointer to values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="86" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a6d2b170e664f7246b2d50f758e324cb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec2d</definition>
        <argsstring>(class GfVec2f const &amp;other)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>class <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="92" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a8ed1522b97e2051f99fa551edafefb14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec2d</definition>
        <argsstring>(class GfVec2h const &amp;other)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>class <ref refid="class_gf_vec2h" kindref="compound">GfVec2h</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_vec2h" kindref="compound">GfVec2h</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="95" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a5d206b081d203b4160c8613e2b4c9cc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfVec2d</definition>
        <argsstring>(class GfVec2i const &amp;other)</argsstring>
        <name>GfVec2d</name>
        <param>
          <type>class <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="98" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a12b98d2b55b0bcfd661dcc0a78772e09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; Set</definition>
        <argsstring>(double s0, double s1)</argsstring>
        <name>Set</name>
        <param>
          <type>double</type>
          <declname>s0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s1</declname>
        </param>
        <briefdescription>
<para>Set all elements with passed arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="123" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ace0671196a52e91fc40f36820a31eb37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; Set</definition>
        <argsstring>(double const *a)</argsstring>
        <name>Set</name>
        <param>
          <type>double const *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set all elements with a pointer to data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="130" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1aded95d2676df3338ef36491ad8da2a7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double const  *</type>
        <definition>double const* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Direct data access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="135" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="136" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a1b1913e7195aa108fb4d37d777c22bc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double const  *</type>
        <definition>double const* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="137" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a8b79b25972fd5003783327e1d2d05a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double const  &amp;</type>
        <definition>double const&amp; operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Indexing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="140" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a43382a9121d867db0005aeb7563cb937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="141" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1abf1651a3eb030845dc413d18ed9bc61d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(GfVec2d const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="149" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1aaefc023c1be09561289addd119f6a779" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(GfVec2d const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="153" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1aaea9ce7b70f26ad1dcbf9a73d5518dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec2f const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a3a8e084cab21fe1eafa8a07947e7410e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec2h const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec2h" kindref="compound">GfVec2h</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1af5390cbf370d0dade5648577a48b3c44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(class GfVec2i const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>class <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ac17ba9dfd28d2fb1fb0fc235b63d30ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Create a vec with negated elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="169" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1acdfb7a54a4b4bb39905fa5e506c7236c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; operator+=</definition>
        <argsstring>(GfVec2d const &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Addition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="174" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1aedb716efe41095563d2e13d52009ede8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; operator-=</definition>
        <argsstring>(GfVec2d const &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="184" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a8cc7634de2ffb2f5472aacf5a896eeb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; operator *=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiplication by scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="194" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ac16ff76a8576a2173b35d4bf27227d2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator *</definition>
        <argsstring>(double s) const</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="199" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a183401fe73d19b4deda93f5e4586391f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>GfVec2d&amp; operator/=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Division by scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="208" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1afb5abd3b49a2431c059112c1709c2fd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator/</definition>
        <argsstring>(double s) const</argsstring>
        <name>operator/</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="214" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a92df0026da0ff6ab161c5c591989a865" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double operator *</definition>
        <argsstring>(GfVec2d const &amp;v) const</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>See <ref refid="dual_quatd_8h_1a630afdf6ab5e490ac0ac75a890aec03b" kindref="member">GfDot()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="219" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ab6596815b7410722a646f3ec29723427" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetProjection</definition>
        <argsstring>(GfVec2d const &amp;v) const</argsstring>
        <name>GetProjection</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the projection of <computeroutput>this</computeroutput> onto <computeroutput>v</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>That is: <programlisting><codeline><highlight class="normal">v<sp/>*<sp/>(*this<sp/>*<sp/>v)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="227" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ad5403488a6d9e12e9ae28ba5dd4cdd88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetComplement</definition>
        <argsstring>(GfVec2d const &amp;b) const</argsstring>
        <name>GetComplement</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the orthogonal complement of <computeroutput>this-&gt;GetProjection(b)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>That is: <programlisting><codeline><highlight class="normal">*this<sp/>-<sp/>this-&gt;GetProjection(b)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="236" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a16195658683719527784d391e1b20ba7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetLengthSq</definition>
        <argsstring>() const</argsstring>
        <name>GetLengthSq</name>
        <briefdescription>
<para>Squared length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="241" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="246" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1a626f0c98105bfc96bc8b8a582f817627" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Normalize</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes the vector in place to unit length, returning the length before normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of the vector is smaller than <computeroutput>eps</computeroutput>, then the vector is set to vector/<computeroutput>eps</computeroutput>. The original length of the vector is returned. See also <ref refid="vec2d_8h_1aba4a21e52a2e2d5a01caaa5021d46e17" kindref="member">GfNormalize()</ref>.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="258" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1ab21f30669c73369a3476e9cc1f635904" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetNormalized</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="266" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="266" bodyend="270"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_vec2d_1a81a30bc2c449a70bf116fe4c74749ed9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>static GfVec2d XAxis</definition>
        <argsstring>()</argsstring>
        <name>XAxis</name>
        <briefdescription>
<para>Create a unit vector along the X-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="101" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1af5b17e22f4a25b0a67c6c3b1742a5ed6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>static GfVec2d YAxis</definition>
        <argsstring>()</argsstring>
        <name>YAxis</name>
        <briefdescription>
<para>Create a unit vector along the Y-axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="107" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_vec2d_1af041ac1b7acc1268dbf2b7cee91a8745" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>static GfVec2d Axis</definition>
        <argsstring>(size_t i)</argsstring>
        <name>Axis</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create a unit vector along the i-th axis, zero-based. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the zero vector if <computeroutput>i</computeroutput> is greater than or equal to 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="115" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="115" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_vec2d_1afba64c15fb1fc25af78f6e40b66f18b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfVec2d const &amp;vec)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="144" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec2d_1a3e489b568540c868fb0128746c4183b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator+</definition>
        <argsstring>(GfVec2d const &amp;l, GfVec2d const &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="179" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec2d_1a87c3480bc5bdb65d8054717b12542eb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator-</definition>
        <argsstring>(GfVec2d const &amp;l, GfVec2d const &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="189" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_vec2d_1a6e28706ab7e0c4097951e5df50e7595f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator *</definition>
        <argsstring>(double s, GfVec2d const &amp;v)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="202" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="202" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type for a vector of 2 double components. </para>
    </briefdescription>
    <detaileddescription>
<para>Represents a vector of 2 components of type <computeroutput>double</computeroutput>. It is intended to be fast and simple. </para>
    </detaileddescription>
    <location file="pxr/base/gf/vec2d.h" line="63" column="1" bodyfile="pxr/base/gf/vec2d.h" bodystart="62" bodyend="275"/>
    <listofallmembers>
      <member refid="class_gf_vec2d_1acd1bd335e61bcdf26e368d9c7a737070" prot="private" virt="non-virtual"><scope>GfVec2d</scope><name>_data</name></member>
      <member refid="class_gf_vec2d_1af041ac1b7acc1268dbf2b7cee91a8745" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>Axis</name></member>
      <member refid="class_gf_vec2d_1aded95d2676df3338ef36491ad8da2a7d" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>data</name></member>
      <member refid="class_gf_vec2d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>data</name></member>
      <member refid="class_gf_vec2d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>dimension</name></member>
      <member refid="class_gf_vec2d_1a1b1913e7195aa108fb4d37d777c22bc4" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetArray</name></member>
      <member refid="class_gf_vec2d_1ad5403488a6d9e12e9ae28ba5dd4cdd88" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetComplement</name></member>
      <member refid="class_gf_vec2d_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetLength</name></member>
      <member refid="class_gf_vec2d_1a16195658683719527784d391e1b20ba7" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetLengthSq</name></member>
      <member refid="class_gf_vec2d_1ab21f30669c73369a3476e9cc1f635904" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetNormalized</name></member>
      <member refid="class_gf_vec2d_1ab6596815b7410722a646f3ec29723427" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GetProjection</name></member>
      <member refid="class_gf_vec2d_1a987a7fff8b1b3231f93190306e0bed21" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a0ae5a5d0c9ce48afb9e92a69586fa203" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a609c3d65e737ff1f93b415d806c96cf7" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a81de5bb9742f479c4939a1545a61394c" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a6d2b170e664f7246b2d50f758e324cb9" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a8ed1522b97e2051f99fa551edafefb14" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1a5d206b081d203b4160c8613e2b4c9cc9" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>GfVec2d</name></member>
      <member refid="class_gf_vec2d_1afba64c15fb1fc25af78f6e40b66f18b0" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>hash_value</name></member>
      <member refid="class_gf_vec2d_1a626f0c98105bfc96bc8b8a582f817627" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>Normalize</name></member>
      <member refid="class_gf_vec2d_1ac16ff76a8576a2173b35d4bf27227d2c" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator *</name></member>
      <member refid="class_gf_vec2d_1a6e28706ab7e0c4097951e5df50e7595f" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator *</name></member>
      <member refid="class_gf_vec2d_1a92df0026da0ff6ab161c5c591989a865" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator *</name></member>
      <member refid="class_gf_vec2d_1a8cc7634de2ffb2f5472aacf5a896eeb7" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator *=</name></member>
      <member refid="class_gf_vec2d_1aaefc023c1be09561289addd119f6a779" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator!=</name></member>
      <member refid="class_gf_vec2d_1a3e489b568540c868fb0128746c4183b9" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator+</name></member>
      <member refid="class_gf_vec2d_1acdfb7a54a4b4bb39905fa5e506c7236c" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator+=</name></member>
      <member refid="class_gf_vec2d_1ac17ba9dfd28d2fb1fb0fc235b63d30ca" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator-</name></member>
      <member refid="class_gf_vec2d_1a87c3480bc5bdb65d8054717b12542eb6" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator-</name></member>
      <member refid="class_gf_vec2d_1aedb716efe41095563d2e13d52009ede8" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator-=</name></member>
      <member refid="class_gf_vec2d_1afb5abd3b49a2431c059112c1709c2fd3" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator/</name></member>
      <member refid="class_gf_vec2d_1a183401fe73d19b4deda93f5e4586391f" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator/=</name></member>
      <member refid="class_gf_vec2d_1abf1651a3eb030845dc413d18ed9bc61d" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator==</name></member>
      <member refid="class_gf_vec2d_1aaea9ce7b70f26ad1dcbf9a73d5518dc8" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator==</name></member>
      <member refid="class_gf_vec2d_1a3a8e084cab21fe1eafa8a07947e7410e" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator==</name></member>
      <member refid="class_gf_vec2d_1af5390cbf370d0dade5648577a48b3c44" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator==</name></member>
      <member refid="class_gf_vec2d_1a8b79b25972fd5003783327e1d2d05a03" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator[]</name></member>
      <member refid="class_gf_vec2d_1a43382a9121d867db0005aeb7563cb937" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>operator[]</name></member>
      <member refid="class_gf_vec2d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>ScalarType</name></member>
      <member refid="class_gf_vec2d_1a12b98d2b55b0bcfd661dcc0a78772e09" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>Set</name></member>
      <member refid="class_gf_vec2d_1ace0671196a52e91fc40f36820a31eb37" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>Set</name></member>
      <member refid="class_gf_vec2d_1a81a30bc2c449a70bf116fe4c74749ed9" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>XAxis</name></member>
      <member refid="class_gf_vec2d_1af5b17e22f4a25b0a67c6c3b1742a5ed6" prot="public" virt="non-virtual"><scope>GfVec2d</scope><name>YAxis</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
