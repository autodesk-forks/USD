<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_stage_population_mask" kind="class" language="C++" prot="public">
    <compoundname>UsdStagePopulationMask</compoundname>
    <includes refid="stage_population_mask_8h" local="no">stagePopulationMask.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_stage_population_mask_1a6e9989671448bbc9a4f8dcac39ee5a7d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt;</type>
        <definition>std::vector&lt;SdfPath&gt; _paths</definition>
        <argsstring></argsstring>
        <name>_paths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="200" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_stage_population_mask_1a6e923aa38c1b8c823486b820cb272476" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>static UsdStagePopulationMask All</definition>
        <argsstring>()</argsstring>
        <name>All</name>
        <briefdescription>
<para>Return a mask that includes all paths. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the mask that contains the absolute root path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="66" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a7c7f4f6339c3b370621a42f95be960ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>static USD_API UsdStagePopulationMask Union</definition>
        <argsstring>(UsdStagePopulationMask const &amp;l, UsdStagePopulationMask const &amp;r)</argsstring>
        <name>Union</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return a mask that is the union of <computeroutput>l</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a962a724bc2d6d538a8f4d33b6d786ef1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>static USD_API UsdStagePopulationMask Intersection</definition>
        <argsstring>(UsdStagePopulationMask const &amp;l, UsdStagePopulationMask const &amp;r)</argsstring>
        <name>Intersection</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Return a mask that is the intersection of <computeroutput>l</computeroutput> and <computeroutput>r</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_stage_population_mask_1a370dcfde00067a21c6089e3d26d2f59f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdStagePopulationMask</definition>
        <argsstring>()=default</argsstring>
        <name>UsdStagePopulationMask</name>
        <briefdescription>
<para>Construct an empty mask that includes no paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1adfe099aae1af495b62ec73a788c43d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdStagePopulationMask</definition>
        <argsstring>(UsdStagePopulationMask const &amp;)=default</argsstring>
        <name>UsdStagePopulationMask</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a5345908e9f6e08c9c31f3c046a5127b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdStagePopulationMask</definition>
        <argsstring>(UsdStagePopulationMask &amp;&amp;)=default</argsstring>
        <name>UsdStagePopulationMask</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1add93e00aaab0d11f457bb3b358d6f7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
        <definition>UsdStagePopulationMask&amp; operator=</definition>
        <argsstring>(UsdStagePopulationMask const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a18fbe9a642eeaf5288b5d5a5f196a86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
        <definition>UsdStagePopulationMask&amp; operator=</definition>
        <argsstring>(UsdStagePopulationMask &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a8787c23a0e94526d14b56d9901ccb70b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>UsdStagePopulationMask</definition>
        <argsstring>(Iter f, Iter l)</argsstring>
        <name>UsdStagePopulationMask</name>
        <param>
          <type>Iter</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Construct a mask from the range of paths [f, l). </para>
        </briefdescription>
        <detaileddescription>
<para>All paths in the range must be absolute prim paths or the absolute root path. (See <ref refid="class_sdf_path_1a458ea9a47c7b224c0d496e4a12e0e659" kindref="member">SdfPath::IsAbsolutePath</ref>, <ref refid="class_sdf_path_1a277dfdde9ab5121eb82dab94353d6667" kindref="member">SdfPath::IsAbsoluteRootOrPrimPath</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="82" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a9b230da7043d911afe289732ef7ebde0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdStagePopulationMask</definition>
        <argsstring>(std::vector&lt; SdfPath &gt; const &amp;paths)</argsstring>
        <name>UsdStagePopulationMask</name>
        <param>
          <type>std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt; const &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Construct a mask from <computeroutput>paths</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>All paths must be absolute prim paths or the absolute root path. (See <ref refid="class_sdf_path_1a458ea9a47c7b224c0d496e4a12e0e659" kindref="member">SdfPath::IsAbsolutePath</ref>, <ref refid="class_sdf_path_1a277dfdde9ab5121eb82dab94353d6667" kindref="member">SdfPath::IsAbsoluteRootOrPrimPath</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="89" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="89" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1acd871906250a9acff27818f478bdd69c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdStagePopulationMask</definition>
        <argsstring>(std::vector&lt; SdfPath &gt; &amp;&amp;paths)</argsstring>
        <name>UsdStagePopulationMask</name>
        <param>
          <type>std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt; &amp;&amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Construct a mask from <computeroutput>paths</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>All paths must be absolute prim paths or the absolute root path. (See <ref refid="class_sdf_path_1a458ea9a47c7b224c0d496e4a12e0e659" kindref="member">SdfPath::IsAbsolutePath</ref>, <ref refid="class_sdf_path_1a277dfdde9ab5121eb82dab94353d6667" kindref="member">SdfPath::IsAbsoluteRootOrPrimPath</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1ae95b35af8dc13ef4c93486d23fa4c591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>USD_API UsdStagePopulationMask GetUnion</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other) const</argsstring>
        <name>GetUnion</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return a mask that is the union of this and <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1afaccbae5e8ec805735db289ba84f03a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>USD_API UsdStagePopulationMask GetUnion</definition>
        <argsstring>(SdfPath const &amp;path) const</argsstring>
        <name>GetUnion</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a mask that is the union of this and a mask containing the single <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a812401c7822706b0fec37845e19b5058" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref></type>
        <definition>USD_API UsdStagePopulationMask GetIntersection</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other) const</argsstring>
        <name>GetIntersection</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return a mask that is the intersection of this and <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a307bbcb8b40814ab2e5c9251effd2244" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Includes</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other) const</argsstring>
        <name>Includes</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if this mask is a superset of <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>That is, if this mask includes at least every path that <computeroutput>other</computeroutput> includes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1abc1fd7af959340a0e301385a47d4731f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Includes</definition>
        <argsstring>(SdfPath const &amp;path) const</argsstring>
        <name>Includes</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if this mask includes <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is true if <computeroutput>path</computeroutput> is one of the paths in this mask, or if it is either a descendant or an ancestor of one of the paths in this mask. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a027c1c0e414eaff80326de3e01ab942a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IncludesSubtree</definition>
        <argsstring>(SdfPath const &amp;path) const</argsstring>
        <name>IncludesSubtree</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if this mask includes <computeroutput>path</computeroutput> and all paths descendant to <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, consider a mask containing the path &apos;/a/b&apos;. Then the following holds:</para>
<para><programlisting><codeline><highlight class="normal">mask.Includes(&apos;/a&apos;)<sp/>-&gt;<sp/>true</highlight></codeline>
<codeline><highlight class="normal">mask.Includes(&apos;/a/b&apos;)<sp/>-&gt;<sp/>true</highlight></codeline>
<codeline><highlight class="normal">mask.IncludesSubtree(&apos;/a&apos;)<sp/>-&gt;<sp/>false</highlight></codeline>
<codeline><highlight class="normal">mask.IncludesSubtree(&apos;/a/b&apos;)<sp/>-&gt;<sp/>true</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Return true if this mask contains no paths. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty masks include no paths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="149" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a2b418355133fbf635a8521faa9a98e7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetIncludedChildNames</definition>
        <argsstring>(SdfPath const &amp;path, std::vector&lt; TfToken &gt; *childNames) const</argsstring>
        <name>GetIncludedChildNames</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt; *</type>
          <declname>childNames</declname>
        </param>
        <briefdescription>
<para>Return true if this mask includes any child prims beneath <computeroutput>path</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If only specific child prims beneath <computeroutput>path</computeroutput> are included, the names of those children will be returned in <computeroutput>childNames</computeroutput>. If all child prims beneath <computeroutput>path</computeroutput> are included, <computeroutput>childNames</computeroutput> will be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a8f6bc73f1811f526a8038c0cd9a6af0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt;</type>
        <definition>USD_API std::vector&lt;SdfPath&gt; GetPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetPaths</name>
        <briefdescription>
<para>Return the set of paths that define this mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a2fdb27e5fb92cc1610ba523526213916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
        <definition>UsdStagePopulationMask&amp; Add</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assign this mask to be its union with <computeroutput>other</computeroutput> and return a reference to this mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="168" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1a90ee997c64f959cc054297428f918732" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
        <definition>UsdStagePopulationMask&amp; Add</definition>
        <argsstring>(SdfPath const &amp;path)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Assign this mask to be its union with <computeroutput>path</computeroutput> and return a reference to this mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="175" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1acd89bfcb7925f8962df1f3d13fa989e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if this mask is equivalent to <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="181" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1aeeabb9192ed7e9f96699fc52d32d774f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(UsdStagePopulationMask const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if this mask is not equivalent to <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="186" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_population_mask_1adb410d5ea1723dab1b036768d7ca7bd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(UsdStagePopulationMask &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the content of this mask with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="191" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="191" bodyend="193"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_stage_population_mask_1a98347017b8cb1368d7067e20b7e439d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend USD_API size_t</type>
        <definition>USD_API size_t hash_value</definition>
        <argsstring>(UsdStagePopulationMask const &amp;)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_stage_population_mask_1a5320011b5b70f0602b226d823d7b6e0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void _ValidateAndNormalize</definition>
        <argsstring>()</argsstring>
        <name>_ValidateAndNormalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stagePopulationMask.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents a mask that may be applied to a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> to limit the set of <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> s it populates. </para>
    </briefdescription>
    <detaileddescription>
<para>This is useful in cases where clients have a large scene but only wish to view or query a single or a handful of objects. For example, suppose we have a city block with buildings, cars, crowds of people, and a couple of main characters. Some tasks might only require looking at a single main character and perhaps a few props. We can create a population mask with the paths to the character and props of interest and open a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> with that mask. Usd will avoid populating the other objects in the scene, saving time and memory. See <ref refid="class_usd_stage_1ade1d90d759a085022ba76ff910815320" kindref="member">UsdStage::OpenMasked()</ref> for more.</para>
<para>A mask is defined by a set of <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> s with the following qualities: they are absolute prim paths (or the absolute root path), and no path in the set is an ancestor path of any other path in the set other than itself. For example, the set of paths [&apos;/a/b&apos;, &apos;/a/c&apos;, &apos;/x/y&apos;] is a valid mask, but the set of paths [&apos;/a/b&apos;, &apos;/a/b/c&apos;, &apos;/x/y&apos;] is redundant, since &apos;/a/b&apos; is an ancestor of &apos;/a/b/c&apos;. The path &apos;/a/b/c&apos; may be removed. The <ref refid="class_usd_stage_population_mask_1ae95b35af8dc13ef4c93486d23fa4c591" kindref="member">GetUnion()</ref> and <ref refid="class_usd_stage_population_mask_1a2fdb27e5fb92cc1610ba523526213916" kindref="member">Add()</ref> methods ensure that no redundant paths are added.</para>
<para>Default-constructed <ref refid="class_usd_stage_population_mask" kindref="compound">UsdStagePopulationMask</ref> s are considered empty (<ref refid="class_usd_stage_population_mask_1a8e12342fc420701fbffd97025421575a" kindref="member">IsEmpty()</ref>) and include no paths. A population mask containing <ref refid="class_sdf_path_1a9e77b565c10268c2b55f92559f621606" kindref="member">SdfPath::AbsoluteRootPath()</ref> includes all paths. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/stagePopulationMask.h" line="61" column="1" bodyfile="pxr/usd/usd/stagePopulationMask.h" bodystart="60" bodyend="201"/>
    <listofallmembers>
      <member refid="class_usd_stage_population_mask_1a6e9989671448bbc9a4f8dcac39ee5a7d" prot="private" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>_paths</name></member>
      <member refid="class_usd_stage_population_mask_1a5320011b5b70f0602b226d823d7b6e0a" prot="private" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>_ValidateAndNormalize</name></member>
      <member refid="class_usd_stage_population_mask_1a2fdb27e5fb92cc1610ba523526213916" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Add</name></member>
      <member refid="class_usd_stage_population_mask_1a90ee997c64f959cc054297428f918732" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Add</name></member>
      <member refid="class_usd_stage_population_mask_1a6e923aa38c1b8c823486b820cb272476" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>All</name></member>
      <member refid="class_usd_stage_population_mask_1a2b418355133fbf635a8521faa9a98e7f" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>GetIncludedChildNames</name></member>
      <member refid="class_usd_stage_population_mask_1a812401c7822706b0fec37845e19b5058" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>GetIntersection</name></member>
      <member refid="class_usd_stage_population_mask_1a8f6bc73f1811f526a8038c0cd9a6af0a" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>GetPaths</name></member>
      <member refid="class_usd_stage_population_mask_1ae95b35af8dc13ef4c93486d23fa4c591" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>GetUnion</name></member>
      <member refid="class_usd_stage_population_mask_1afaccbae5e8ec805735db289ba84f03a9" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>GetUnion</name></member>
      <member refid="class_usd_stage_population_mask_1a98347017b8cb1368d7067e20b7e439d0" prot="private" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>hash_value</name></member>
      <member refid="class_usd_stage_population_mask_1a307bbcb8b40814ab2e5c9251effd2244" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Includes</name></member>
      <member refid="class_usd_stage_population_mask_1abc1fd7af959340a0e301385a47d4731f" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Includes</name></member>
      <member refid="class_usd_stage_population_mask_1a027c1c0e414eaff80326de3e01ab942a" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>IncludesSubtree</name></member>
      <member refid="class_usd_stage_population_mask_1a962a724bc2d6d538a8f4d33b6d786ef1" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Intersection</name></member>
      <member refid="class_usd_stage_population_mask_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>IsEmpty</name></member>
      <member refid="class_usd_stage_population_mask_1aeeabb9192ed7e9f96699fc52d32d774f" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>operator!=</name></member>
      <member refid="class_usd_stage_population_mask_1add93e00aaab0d11f457bb3b358d6f7c1" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>operator=</name></member>
      <member refid="class_usd_stage_population_mask_1a18fbe9a642eeaf5288b5d5a5f196a86c" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>operator=</name></member>
      <member refid="class_usd_stage_population_mask_1acd89bfcb7925f8962df1f3d13fa989e3" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>operator==</name></member>
      <member refid="class_usd_stage_population_mask_1adb410d5ea1723dab1b036768d7ca7bd1" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>swap</name></member>
      <member refid="class_usd_stage_population_mask_1a7c7f4f6339c3b370621a42f95be960ee" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>Union</name></member>
      <member refid="class_usd_stage_population_mask_1a370dcfde00067a21c6089e3d26d2f59f" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
      <member refid="class_usd_stage_population_mask_1adfe099aae1af495b62ec73a788c43d7b" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
      <member refid="class_usd_stage_population_mask_1a5345908e9f6e08c9c31f3c046a5127b9" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
      <member refid="class_usd_stage_population_mask_1a8787c23a0e94526d14b56d9901ccb70b" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
      <member refid="class_usd_stage_population_mask_1a9b230da7043d911afe289732ef7ebde0" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
      <member refid="class_usd_stage_population_mask_1acd871906250a9acff27818f478bdd69c" prot="public" virt="non-virtual"><scope>UsdStagePopulationMask</scope><name>UsdStagePopulationMask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
