<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range2f" kind="class" language="C++" prot="public">
    <compoundname>GfRange2f</compoundname>
    <includes refid="range2f_8h" local="no">range2f.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range2f_1ab08e42925f5acf00db2a963dc736b4ca" prot="public" static="no">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>typedef GfVec2f MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="68" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range2f_1a4cca7f3ae39a020acf6c1e17f89ccc7b" prot="public" static="no">
        <type><ref refid="class_gf_vec2f_1ad5c19ca4f47d3f8ec21232a5af2624e5" kindref="member">GfVec2f::ScalarType</ref></type>
        <definition>typedef GfVec2f::ScalarType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="71" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range2f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= GfVec2f::dimension</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="70" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range2f_1ac8eb57dda7e9de595b514f96669481cf" prot="public" static="yes" mutable="no">
        <type>GF_API const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GF_API const GfRange2f UnitSquare</definition>
        <argsstring></argsstring>
        <name>UnitSquare</name>
        <briefdescription>
<para>The unit square. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="337" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range2f_1a3c08a05621a89c40517b9c9a6d4166bc" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="341" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range2f_1a17887b5fb1bbef6a43175c9ed9a998ed" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="341" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range2f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="75" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1adaadf266f63376200aa30d9ded7e5ae8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange2f</definition>
        <argsstring>()</argsstring>
        <name>GfRange2f</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="81" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1abd4728ad4543d0857cf9321a4c513ded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange2f</definition>
        <argsstring>(const GfVec2f &amp;min, const GfVec2f &amp;max)</argsstring>
        <name>GfRange2f</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="86" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a16968d98a978f66a401d747085ef7eb8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange2f</definition>
        <argsstring>(class GfRange2d const &amp;other)</argsstring>
        <name>GfRange2f</name>
        <param>
          <type>class <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a22264ab3f5232693397e3bbbda88581b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
        <definition>const GfVec2f&amp; GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="97" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a7326f2b6f4f3d22e7d1febfc69b2edf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
        <definition>const GfVec2f&amp; GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="100" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1aed1922905fcf11fc653908b13b702edd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="103" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a5cde3845110894afa47606d7f8793c9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range2f_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="108" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a558b60e751794c8c3c4e3c07c2c9e6ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(const GfVec2f &amp;min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="114" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a21378fa641bc30a818cc88f70995c24d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(const GfVec2f &amp;max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="117" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="120" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a164aecb91e127448689fe73e4ae34d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfVec2f &amp;point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000028"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="126" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a4845ec88be14718c48b521b97b087967" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange2f &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000029"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="130" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1aefe71c0e7a62cb8b954d4706ee944a8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfVec2f &amp;point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="134" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ac515388e72db179fe75774c613c6b935" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange2f &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="142" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a998dc1a630360e08e9deabdc605c8240" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfVec2f &amp;point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000030"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aefe71c0e7a62cb8b954d4706ee944a8e" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="149" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1aa9404f2f44e23740cc88c5a608301347" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange2f &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000031"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aefe71c0e7a62cb8b954d4706ee944a8e" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="157" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a48c0f2be53dd6b9d198733643dd44bb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange2f &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="164" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; UnionWith</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="178" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1adebe08747a324e143f487f9c86dc409c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; UnionWith</definition>
        <argsstring>(const GfVec2f &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="185" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a32c32d0370dec20ddcde72a28780674e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; Union</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="199" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a68d66a8183b69975201f49cfdc6495f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; Union</definition>
        <argsstring>(const GfVec2f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="205" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a62bc2cb55bafd61505929bcfdb214937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; IntersectWith</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="225" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a2497579435b7fcbbc44c374d313814d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>const GfRange2f&amp; Intersection</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000036"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1a62bc2cb55bafd61505929bcfdb214937" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="234" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a0465d1cb915bce100ce4a1d1fa34f294" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>GfRange2f&amp; operator+=</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="239" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ab075832110b402dcb204ff8829461363" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>GfRange2f&amp; operator -=</definition>
        <argsstring>(const GfRange2f &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="246" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a9eee9e89db25cb915c436de7046cf603" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>GfRange2f&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="253" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="253" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ab973a7751e9311afeb61fc50ad177773" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
        <definition>GfRange2f&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="266" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a5bb3a2bf05060dfd591fa80c28ea85a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f operator+</definition>
        <argsstring>(const GfRange2f &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="271" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a677f444de73ab4b84e93be15e5e19f1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f operator -</definition>
        <argsstring>(const GfRange2f &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="277" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a940effdce58f1e8fc97256aa6aada8d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange2f &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="306" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ac299ba01fb58461d0ed6242ddcf711aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange2f &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="310" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a37492d7099e4e39798f32f1e6070b5c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange2d &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="318" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ae5c928271a0d1436256e6d80dc2f7e29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange2d &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="319" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a87954572a4062fb0bd70056a2e691300" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(const GfVec2f &amp;p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a83ec2563094ef862761ca086167a02c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GF_API GfVec2f GetCorner</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetCorner</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith corner of the range, in the following order: SW, SE, NW, NE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a7a3196f7364872adb656d8a8242c5bce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GF_API GfRange2f GetQuadrant</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetQuadrant</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith quadrant of the range, in the following order: SW, SE, NW, NE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range2f_1a0727975f88ce18dcf5fa712650311b8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>static GfRange2f GetUnion</definition>
        <argsstring>(const GfRange2f &amp;a, const GfRange2f &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="170" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a729e14d0f84d85340ae7c12e70c8c4d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>static GfRange2f Union</definition>
        <argsstring>(const GfRange2f &amp;a, const GfRange2f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1a0727975f88ce18dcf5fa712650311b8b" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="193" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a673fbf9a388075e12e5c3483affde9c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>static GfRange2f GetIntersection</definition>
        <argsstring>(const GfRange2f &amp;a, const GfRange2f &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="210" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1a315371ef738875c4417eb35b5c5067d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>static GfRange2f Intersection</definition>
        <argsstring>(const GfRange2f &amp;a, const GfRange2f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000035"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2f_1a673fbf9a388075e12e5c3483affde9c0" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="219" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="219" bodyend="221"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range2f_1aab561dc489c4edc95c5f77760d4dc44c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f operator *</definition>
        <argsstring>(double m, const GfRange2f &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="282" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2f_1a321cd8b86a231d661f34ed2389e43379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f operator *</definition>
        <argsstring>(const GfRange2f &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="289" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="289" bodyend="293"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2f_1ad95c59a1d81cd20c179d0e04ee7c385f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref></type>
        <definition>GfRange2f operator/</definition>
        <argsstring>(const GfRange2f &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="296" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2f_1a5ed0c5f63f3630e11ec750639bf0ca6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange2f &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="301" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="301" bodyend="303"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range2f_1a7fca6b959c691bb6d1b3ced767192ad9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(GfVec2f &amp;dest, const GfVec2f &amp;point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="344" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2f_1ad442a452afc56db48aa047d596af20ce" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(GfVec2f &amp;dest, const GfVec2f &amp;point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="350" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="350" bodyend="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 2-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 2-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1393">
        <label>GfRange2f</label>
        <link refid="class_gf_range2f"/>
        <childnode refid="1393" relation="usage">
          <edgelabel>UnitSquare</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/gf/range2f.h" line="64" column="1" bodyfile="pxr/base/gf/range2f.h" bodystart="63" bodyend="354"/>
    <listofallmembers>
      <member refid="class_gf_range2f_1ad442a452afc56db48aa047d596af20ce" prot="private" virt="non-virtual"><scope>GfRange2f</scope><name>_FindMax</name></member>
      <member refid="class_gf_range2f_1a7fca6b959c691bb6d1b3ced767192ad9" prot="private" virt="non-virtual"><scope>GfRange2f</scope><name>_FindMin</name></member>
      <member refid="class_gf_range2f_1a17887b5fb1bbef6a43175c9ed9a998ed" prot="private" virt="non-virtual"><scope>GfRange2f</scope><name>_max</name></member>
      <member refid="class_gf_range2f_1a3c08a05621a89c40517b9c9a6d4166bc" prot="private" virt="non-virtual"><scope>GfRange2f</scope><name>_min</name></member>
      <member refid="class_gf_range2f_1aefe71c0e7a62cb8b954d4706ee944a8e" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Contains</name></member>
      <member refid="class_gf_range2f_1ac515388e72db179fe75774c613c6b935" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Contains</name></member>
      <member refid="class_gf_range2f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>dimension</name></member>
      <member refid="class_gf_range2f_1a164aecb91e127448689fe73e4ae34d31" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range2f_1a4845ec88be14718c48b521b97b087967" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range2f_1a83ec2563094ef862761ca086167a02c2" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetCorner</name></member>
      <member refid="class_gf_range2f_1a87954572a4062fb0bd70056a2e691300" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range2f_1a673fbf9a388075e12e5c3483affde9c0" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range2f_1a7326f2b6f4f3d22e7d1febfc69b2edf6" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetMax</name></member>
      <member refid="class_gf_range2f_1a5cde3845110894afa47606d7f8793c9e" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range2f_1a22264ab3f5232693397e3bbbda88581b" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetMin</name></member>
      <member refid="class_gf_range2f_1a7a3196f7364872adb656d8a8242c5bce" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetQuadrant</name></member>
      <member refid="class_gf_range2f_1aed1922905fcf11fc653908b13b702edd" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetSize</name></member>
      <member refid="class_gf_range2f_1a0727975f88ce18dcf5fa712650311b8b" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GetUnion</name></member>
      <member refid="class_gf_range2f_1adaadf266f63376200aa30d9ded7e5ae8" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GfRange2f</name></member>
      <member refid="class_gf_range2f_1abd4728ad4543d0857cf9321a4c513ded" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GfRange2f</name></member>
      <member refid="class_gf_range2f_1a16968d98a978f66a401d747085ef7eb8" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>GfRange2f</name></member>
      <member refid="class_gf_range2f_1a5ed0c5f63f3630e11ec750639bf0ca6b" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>hash_value</name></member>
      <member refid="class_gf_range2f_1a315371ef738875c4417eb35b5c5067d5" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Intersection</name></member>
      <member refid="class_gf_range2f_1a2497579435b7fcbbc44c374d313814d2" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Intersection</name></member>
      <member refid="class_gf_range2f_1a62bc2cb55bafd61505929bcfdb214937" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range2f_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range2f_1a998dc1a630360e08e9deabdc605c8240" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>IsInside</name></member>
      <member refid="class_gf_range2f_1aa9404f2f44e23740cc88c5a608301347" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>IsInside</name></member>
      <member refid="class_gf_range2f_1a48c0f2be53dd6b9d198733643dd44bb8" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>IsOutside</name></member>
      <member refid="class_gf_range2f_1ab08e42925f5acf00db2a963dc736b4ca" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range2f_1ac299ba01fb58461d0ed6242ddcf711aa" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator !=</name></member>
      <member refid="class_gf_range2f_1ae5c928271a0d1436256e6d80dc2f7e29" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator !=</name></member>
      <member refid="class_gf_range2f_1aab561dc489c4edc95c5f77760d4dc44c" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator *</name></member>
      <member refid="class_gf_range2f_1a321cd8b86a231d661f34ed2389e43379" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator *</name></member>
      <member refid="class_gf_range2f_1a9eee9e89db25cb915c436de7046cf603" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator *=</name></member>
      <member refid="class_gf_range2f_1a677f444de73ab4b84e93be15e5e19f1f" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator -</name></member>
      <member refid="class_gf_range2f_1ab075832110b402dcb204ff8829461363" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator -=</name></member>
      <member refid="class_gf_range2f_1a5bb3a2bf05060dfd591fa80c28ea85a5" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator+</name></member>
      <member refid="class_gf_range2f_1a0465d1cb915bce100ce4a1d1fa34f294" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator+=</name></member>
      <member refid="class_gf_range2f_1ad95c59a1d81cd20c179d0e04ee7c385f" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator/</name></member>
      <member refid="class_gf_range2f_1ab973a7751e9311afeb61fc50ad177773" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator/=</name></member>
      <member refid="class_gf_range2f_1a940effdce58f1e8fc97256aa6aada8d3" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator==</name></member>
      <member refid="class_gf_range2f_1a37492d7099e4e39798f32f1e6070b5c8" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>operator==</name></member>
      <member refid="class_gf_range2f_1a4cca7f3ae39a020acf6c1e17f89ccc7b" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>ScalarType</name></member>
      <member refid="class_gf_range2f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range2f_1a21378fa641bc30a818cc88f70995c24d" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>SetMax</name></member>
      <member refid="class_gf_range2f_1a558b60e751794c8c3c4e3c07c2c9e6ba" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>SetMin</name></member>
      <member refid="class_gf_range2f_1a729e14d0f84d85340ae7c12e70c8c4d2" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Union</name></member>
      <member refid="class_gf_range2f_1a32c32d0370dec20ddcde72a28780674e" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Union</name></member>
      <member refid="class_gf_range2f_1a68d66a8183b69975201f49cfdc6495f5" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>Union</name></member>
      <member refid="class_gf_range2f_1aa46b6cb284437a0c9b8ec75c700e3f04" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>UnionWith</name></member>
      <member refid="class_gf_range2f_1adebe08747a324e143f487f9c86dc409c" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>UnionWith</name></member>
      <member refid="class_gf_range2f_1ac8eb57dda7e9de595b514f96669481cf" prot="public" virt="non-virtual"><scope>GfRange2f</scope><name>UnitSquare</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
