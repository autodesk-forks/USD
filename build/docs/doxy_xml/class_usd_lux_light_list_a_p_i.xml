<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_light_list_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxLightListAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="light_list_a_p_i_8h" local="no">lightListAPI.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" prot="public" static="no" strong="no">
        <type></type>
        <name>ComputeMode</name>
        <enumvalue id="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a367131dc07c585d43d8d35e00c322493" prot="public">
          <name>ComputeModeConsultModelHierarchyCache</name>
          <briefdescription>
<para>Consult any caches found on the model hierarchy. </para>
          </briefdescription>
          <detaileddescription>
<para>Do not traverse beneath the model hierarchy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a65717e2d3ee9b7f94d395bf0448c153b" prot="public">
          <name>ComputeModeIgnoreCache</name>
          <briefdescription>
<para>Ignore any caches found, and do a full prim traversal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Runtime control over whether to consult stored lightList caches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="350" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="350" bodyend="356"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_light_list_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="186" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_light_list_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="278" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1acbdcb1fa9c73c0aae628b125c9457228" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightListAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxLightListAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_light_list_a_p_i_1adbb60f660a9e86d88b189044234188d0" kindref="member">UsdLuxLightListAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="192" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a982cd7550af1e5dc558334d429093ebc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightListAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxLightListAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="200" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1aa5fd0e47f13f74a4c2e783bcdbbdc99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxLightListAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxLightListAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetLightListCacheBehaviorAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetLightListCacheBehaviorAttr</name>
        <briefdescription>
<para>Controls how the lightList should be interpreted. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>consumeAndHalt: The lightList should be consulted, and if it exists, treated as a final authoritative statement of any lights that exist at or below this prim, halting recursive discovery of lights.</para>
</listitem><listitem><para>consumeAndContinue: The lightList should be consulted, but recursive traversal over nameChildren should continue in case additional lights are added by descendants.</para>
</listitem><listitem><para>ignore: The lightList should be entirely ignored. This provides a simple way to temporarily invalidate an existing cache. This is the fallback behavior.</para>
</listitem></itemizedlist>
</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token lightList:cacheBehavior</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>consumeAndHalt, consumeAndContinue, ignore   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a76157f430161583c12738a82246e40ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateLightListCacheBehaviorAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateLightListCacheBehaviorAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" kindref="member">GetLightListCacheBehaviorAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship GetLightListRel</definition>
        <argsstring>() const</argsstring>
        <name>GetLightListRel</name>
        <briefdescription>
<para>Relationship to lights in the scene. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a574246f72233390bda34bfad284045f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship CreateLightListRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateLightListRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" kindref="member">GetLightListRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API SdfPathSet</type>
        <definition>USDLUX_API SdfPathSet ComputeLightList</definition>
        <argsstring>(ComputeMode mode) const</argsstring>
        <name>ComputeLightList</name>
        <param>
          <type><ref refid="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" kindref="member">ComputeMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Computes and returns the list of lights and light filters in the stage, optionally consulting a cached result. </para>
        </briefdescription>
        <detaileddescription>
<para>In ComputeModeIgnoreCache mode, caching is ignored, and this does a prim traversal looking for prims that have a <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> or are of type <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref>.</para>
<para>In ComputeModeConsultModelHierarchyCache, this does a traversal only of the model hierarchy. In this traversal, any lights that live as model hierarchy prims are accumulated, as well as any paths stored in lightList caches. The lightList:cacheBehavior attribute gives further control over the cache behavior; see the class overview for details.</para>
<para>When instances are present, ComputeLightList(ComputeModeIgnoreCache) will return the instance-uniqiue paths to any lights discovered within those instances. Lights within a <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> will not be returned, however, since they cannot be referred to solely via paths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API void</type>
        <definition>USDLUX_API void StoreLightList</definition>
        <argsstring>(const SdfPathSet &amp;) const</argsstring>
        <name>StoreLightList</name>
        <param>
          <type>const SdfPathSet &amp;</type>
        </param>
        <briefdescription>
<para>Store the given paths as the lightlist for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Paths that do not have this prim&apos;s path as a prefix will be silently ignored. This will set the listList:cacheBehavior to &quot;consumeAndContinue&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a582213a8ab380649a8cacfe3b1b81b66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API void</type>
        <definition>USDLUX_API void InvalidateLightList</definition>
        <argsstring>() const</argsstring>
        <name>InvalidateLightList</name>
        <briefdescription>
<para>Mark any stored lightlist as invalid, by setting the lightList:cacheBehavior attribute to ignore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="390" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1adbb60f660a9e86d88b189044234188d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref></type>
        <definition>static USDLUX_API UsdLuxLightListAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxLightListAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API bool</type>
        <definition>static USDLUX_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1adc28739b0f137669242e72468c5b4713" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref></type>
        <definition>static USDLUX_API UsdLuxLightListAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;LightListAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="267" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="282" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_light_list_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightListAPI.h" line="286" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API schema to support discovery and publishing of lights in a scene. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="class_usd_lux_light_list_a_p_i_1UsdLuxLightListAPI_Discovery">
<title>Discovering Lights via Traversal</title>
<para>To motivate this API, consider what is required to discover all lights in a scene. We must load all payloads and traverse all prims:</para>
<para><programlisting><codeline><highlight class="normal">01<sp/><sp/>//<sp/>Load<sp/>everything<sp/>on<sp/>the<sp/>stage<sp/>so<sp/>we<sp/>can<sp/>find<sp/>all<sp/>lights,</highlight></codeline>
<codeline><highlight class="normal">02<sp/><sp/>//<sp/>including<sp/>those<sp/>inside<sp/>payloads</highlight></codeline>
<codeline><highlight class="normal">03<sp/><sp/>stage-&gt;Load();</highlight></codeline>
<codeline><highlight class="normal">04<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">05<sp/><sp/>//<sp/>Traverse<sp/>all<sp/>prims,<sp/>checking<sp/>if<sp/>they<sp/>have<sp/>an<sp/>applied<sp/>UsdLuxLightAPI</highlight></codeline>
<codeline><highlight class="normal">06<sp/><sp/>//<sp/>(Note:<sp/>ignoring<sp/>instancing<sp/>and<sp/>a<sp/>few<sp/>other<sp/>things<sp/>for<sp/>simplicity)</highlight></codeline>
<codeline><highlight class="normal">07<sp/><sp/>SdfPathVector<sp/>lights;</highlight></codeline>
<codeline><highlight class="normal">08<sp/><sp/>for<sp/>(UsdPrim<sp/>prim:<sp/>stage-&gt;Traverse())<sp/>{</highlight></codeline>
<codeline><highlight class="normal">09<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(prim.HasAPI&lt;UsdLuxLightAPI&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal">10<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lights.push_back(i-&gt;GetPath());</highlight></codeline>
<codeline><highlight class="normal">11<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">12<sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para>This traversal <ndash/> suitably elaborated to handle certain details <ndash/> is the first and simplest thing <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> provides. <ref refid="class_usd_lux_light_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" kindref="member">UsdLuxLightListAPI::ComputeLightList()</ref> performs this traversal and returns all lights in the scene:</para>
<para><programlisting><codeline><highlight class="normal">01<sp/><sp/>UsdLuxLightListAPI<sp/>listAPI(stage-&gt;GetPseudoRoot());</highlight></codeline>
<codeline><highlight class="normal">02<sp/><sp/>SdfPathVector<sp/>lights<sp/>=<sp/>listAPI.ComputeLightList();</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="class_usd_lux_light_list_a_p_i_1UsdLuxLightListAPI_LightList">
<title>Publishing a Cached Light List</title>
<para>Consider a USD client that needs to quickly discover lights but wants to defer loading payloads and traversing the entire scene where possible, and is willing to do up-front computation and caching to achieve that.</para>
<para><ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> provides a way to cache the computed light list, by publishing the list of lights onto prims in the model hierarchy. Consider a big set that contains lights:</para>
<para><programlisting><codeline><highlight class="normal">01<sp/><sp/>def<sp/>Xform<sp/>&quot;BigSetWithLights&quot;<sp/>(</highlight></codeline>
<codeline><highlight class="normal">02<sp/><sp/><sp/><sp/><sp/><sp/>kind<sp/>=<sp/>&quot;assembly&quot;</highlight></codeline>
<codeline><highlight class="normal">03<sp/><sp/><sp/><sp/><sp/><sp/>payload<sp/>=<sp/>@BigSetWithLights.usd@<sp/><sp/><sp/>//<sp/>Heavy<sp/>payload</highlight></codeline>
<codeline><highlight class="normal">04<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">05<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pre-computed,<sp/>cached<sp/>list<sp/>of<sp/>lights<sp/>inside<sp/>payload</highlight></codeline>
<codeline><highlight class="normal">06<sp/><sp/><sp/><sp/><sp/><sp/>rel<sp/>lightList<sp/>=<sp/>[</highlight></codeline>
<codeline><highlight class="normal">07<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;./Lights/light_1&gt;,</highlight></codeline>
<codeline><highlight class="normal">08<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;./Lights/light_2&gt;,</highlight></codeline>
<codeline><highlight class="normal">09<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">10<sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal">11<sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>lightList:cacheBehavior<sp/>=<sp/>&quot;consumeAndContinue&quot;;</highlight></codeline>
<codeline><highlight class="normal">12<sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para>The lightList relationship encodes a set of lights, and the lightList:cacheBehavior property provides fine-grained control over how to use that cache. (See details below.)</para>
<para>The cache can be created by first invoking ComputeLightList(ComputeModeIgnoreCache) to pre-compute the list and then storing the result with <ref refid="class_usd_lux_light_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" kindref="member">UsdLuxLightListAPI::StoreLightList()</ref>.</para>
<para>To enable efficient retrieval of the cache, it should be stored on a model hierarchy prim. Furthermore, note that while you can use a <ref refid="class_usd_lux_light_list_a_p_i" kindref="compound">UsdLuxLightListAPI</ref> bound to the pseudo-root prim to query the lights (as in the example above) because it will perform a traversal over descendants, you cannot store the cache back to the pseduo-root prim.</para>
<para>To consult the cached list, we invoke ComputeLightList(ComputeModeConsultModelHierarchyCache):</para>
<para><programlisting><codeline><highlight class="normal">01<sp/><sp/>//<sp/>Find<sp/>and<sp/>load<sp/>all<sp/>lights,<sp/>using<sp/>lightList<sp/>cache<sp/>where<sp/>available</highlight></codeline>
<codeline><highlight class="normal">02<sp/><sp/>UsdLuxLightListAPI<sp/>list(stage-&gt;GetPseudoRoot());</highlight></codeline>
<codeline><highlight class="normal">03<sp/><sp/>SdfPathSet<sp/>lights<sp/>=<sp/>list.ComputeLightList(</highlight></codeline>
<codeline><highlight class="normal">04<sp/><sp/><sp/><sp/><sp/><sp/>UsdLuxLightListAPI::ComputeModeConsultModelHierarchyCache);</highlight></codeline>
<codeline><highlight class="normal">05<sp/><sp/>stage.LoadAndUnload(lights,<sp/>SdfPathSet());</highlight></codeline>
</programlisting></para>
<para>In this mode, <ref refid="class_usd_lux_light_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" kindref="member">ComputeLightList()</ref> will traverse the model hierarchy, accumulating cached light lists.</para>
</sect1>
<sect1 id="class_usd_lux_light_list_a_p_i_1UsdLuxLightListAPI_CacheBehavior">
<title>Controlling Cache Behavior</title>
<para>The lightList:cacheBehavior property gives additional fine-grained control over cache behavior:</para>
<para><itemizedlist>
<listitem><para>The fallback value, &quot;ignore&quot;, indicates that the lightList should be disregarded. This provides a way to invalidate cache entries. Note that unless &quot;ignore&quot; is specified, a lightList with an empty list of targets is considered a cache indicating that no lights are present.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>The value &quot;consumeAndContinue&quot; indicates that the cache should be consulted to contribute lights to the scene, and that recursion should continue down the model hierarchy in case additional lights are added as descedants. This is the default value established when <ref refid="class_usd_lux_light_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" kindref="member">StoreLightList()</ref> is invoked. This behavior allows the lights within a large model, such as the BigSetWithLights example above, to be published outside the payload, while also allowing referencing and layering to add additional lights over that set.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>The value &quot;consumeAndHalt&quot; provides a way to terminate recursive traversal of the scene for light discovery. The cache will be consulted but no descendant prims will be examined.</para>
</listitem>
</itemizedlist>
</para>
</sect1>
<sect1 id="class_usd_lux_light_list_a_p_i_1UsdLuxLightListAPI_Instancing">
<title>Instancing</title>
<para>Where instances are present, <ref refid="class_usd_lux_light_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" kindref="member">UsdLuxLightListAPI::ComputeLightList()</ref> will return the instance-unique paths to any lights discovered within those instances. Lights within a <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> will not be returned, however, since they cannot be referred to solely via paths.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">UsdLuxTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdLuxTokens-&gt;rightHanded as the value. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="7569">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7568">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7569" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7567">
        <label>UsdLuxLightListAPI</label>
        <link refid="class_usd_lux_light_list_a_p_i"/>
        <childnode refid="7568" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7572">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7571">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7572" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7570">
        <label>UsdLuxLightListAPI</label>
        <link refid="class_usd_lux_light_list_a_p_i"/>
        <childnode refid="7571" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/lightListAPI.h" line="181" column="1" bodyfile="pxr/usd/usdLux/lightListAPI.h" bodystart="180" bodyend="391"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1adc28739b0f137669242e72468c5b4713" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>Apply</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a1fb6213a249817f3f396078005e85b2f" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>ComputeLightList</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>ComputeMode</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a367131dc07c585d43d8d35e00c322493" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>ComputeModeConsultModelHierarchyCache</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a4accf2c58634b72d20585af089f58dc4a65717e2d3ee9b7f94d395bf0448c153b" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>ComputeModeIgnoreCache</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a76157f430161583c12738a82246e40ef" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>CreateLightListCacheBehaviorAttr</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a574246f72233390bda34bfad284045f6" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>CreateLightListRel</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1adbb60f660a9e86d88b189044234188d0" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>Get</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a9d7f6b908ecc82b4f4d17f8cfb236ede" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetLightListCacheBehaviorAttr</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a26efe8ed437328dba46c65cbed7dbdac" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetLightListRel</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a582213a8ab380649a8cacfe3b1b81b66" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>InvalidateLightList</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a0286fdc3a36de8d878c49e895013159b" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>StoreLightList</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1acbdcb1fa9c73c0aae628b125c9457228" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdLuxLightListAPI</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1a982cd7550af1e5dc558334d429093ebc" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdLuxLightListAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxLightListAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdLuxLightListAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_light_list_a_p_i_1aa5fd0e47f13f74a4c2e783bcdbbdc99a" prot="public" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>~UsdLuxLightListAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxLightListAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
