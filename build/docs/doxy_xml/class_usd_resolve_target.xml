<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_resolve_target" kind="class" language="C++" prot="public">
    <compoundname>UsdResolveTarget</compoundname>
    <includes refid="resolve_target_8h" local="no">resolveTarget.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_resolve_target_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrim</definition>
        <argsstring></argsstring>
        <name>UsdPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="111" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_resolve_target_1a00c029eb6e6f8b05efd242c1d51a7a0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrimCompositionQueryArc</definition>
        <argsstring></argsstring>
        <name>UsdPrimCompositionQueryArc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="112" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_resolve_target_1a463cc1847ccf2bc80dbcd8923392bc5b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &gt;</type>
        <definition>std::shared_ptr&lt;PcpPrimIndex&gt; _expandedPrimIndex</definition>
        <argsstring></argsstring>
        <name>_expandedPrimIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="136" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_resolve_target_1a81e84b6308686bc2f33a05e66152b696" prot="private" static="no" mutable="no">
        <type>PcpNodeRange</type>
        <definition>PcpNodeRange _nodeRange</definition>
        <argsstring></argsstring>
        <name>_nodeRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="137" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_resolve_target_1a594d3fd2a40d3d928131b4c013bf866f" prot="private" static="no" mutable="no">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator _startNodeIt</definition>
        <argsstring></argsstring>
        <name>_startNodeIt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="139" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_resolve_target_1a37ac9a3e904497953188848947e43e2f" prot="private" static="no" mutable="no">
        <type>SdfLayerRefPtrVector::const_iterator</type>
        <definition>SdfLayerRefPtrVector::const_iterator _startLayerIt</definition>
        <argsstring></argsstring>
        <name>_startLayerIt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="140" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_resolve_target_1aec767d51b9e200a91706e73e38a81936" prot="private" static="no" mutable="no">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator _stopNodeIt</definition>
        <argsstring></argsstring>
        <name>_stopNodeIt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="141" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_resolve_target_1a95a6ea1a123b4ea0a5d0681ff063aa16" prot="private" static="no" mutable="no">
        <type>SdfLayerRefPtrVector::const_iterator</type>
        <definition>SdfLayerRefPtrVector::const_iterator _stopLayerIt</definition>
        <argsstring></argsstring>
        <name>_stopLayerIt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="142" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_resolve_target_1adb8f9509b0bb172aff0dd56d4bf7dab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdResolveTarget</definition>
        <argsstring>()=default</argsstring>
        <name>UsdResolveTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1a979263518e16d8e13c407606a1c883bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> *</type>
        <definition>const PcpPrimIndex* GetPrimIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimIndex</name>
        <briefdescription>
<para>Get the prim index of the resolve target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="79" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1aaff3b591eeb0a7d4d5029df667dcf57b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>USD_API PcpNodeRef GetStartNode</definition>
        <argsstring>() const</argsstring>
        <name>GetStartNode</name>
        <briefdescription>
<para>Returns the node that value resolution with this resolve target will start at. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1a75e3d9ac9b3eacd71c633ed8fff61c95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandle</type>
        <definition>USD_API SdfLayerHandle GetStartLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetStartLayer</name>
        <briefdescription>
<para>Returns the layer in the layer stack of the start node that value resolution with this resolve target will start at. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1a9251fa30c3d97cd4e9747ee94eec798e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>USD_API PcpNodeRef GetStopNode</definition>
        <argsstring>() const</argsstring>
        <name>GetStopNode</name>
        <briefdescription>
<para>Returns the node that value resolution with this resolve target will stop at when the &quot;stop at&quot; layer is reached. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1a28006346293b1fcf47cd5739b21c9ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfLayerHandle</type>
        <definition>USD_API SdfLayerHandle GetStopLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetStopLayer</name>
        <briefdescription>
<para>Returns the layer in the layer stack of the stop node that value resolution with this resolve target will stop at. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1ac4d637a0dec45d546495c1660c9f6047" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsNull</definition>
        <argsstring>() const</argsstring>
        <name>IsNull</name>
        <briefdescription>
<para>Returns true if this is a null resolve target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="104" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="104" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_resolve_target_1af2195b93a651065c75d2b0023e4fbe62" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdResolveTarget</definition>
        <argsstring>(const std::shared_ptr&lt; PcpPrimIndex &gt; &amp;index, const PcpNodeRef &amp;node, const SdfLayerHandle &amp;layer)</argsstring>
        <name>UsdResolveTarget</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_resolve_target_1a43edf2ae32b46c66256fff85b0751aa5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdResolveTarget</definition>
        <argsstring>(const std::shared_ptr&lt; PcpPrimIndex &gt; &amp;index, const PcpNodeRef &amp;node, const SdfLayerHandle &amp;layer, const PcpNodeRef &amp;stopNode, const SdfLayerHandle &amp;stopLayer)</argsstring>
        <name>UsdResolveTarget</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>stopNode</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>stopLayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/resolveTarget.h" line="124" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines a subrange of nodes and layers within a prim&apos;s prim index to consider when performing value resolution for the prim&apos;s attributes. </para>
    </briefdescription>
    <detaileddescription>
<para>A resolve target can then be passed to <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> during its construction to have all of the queries made by the <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> use the resolve target&apos;s subrange for their value resolution.</para>
<para>Resolve targets can be created via methods on <ref refid="class_usd_prim_composition_query_arc" kindref="compound">UsdPrimCompositionQueryArc</ref> to to limit value resolution to a subrange of the prim&apos;s composed specs that are <ref refid="class_usd_prim_composition_query_arc_1ad532d45d26b318c33557ed4521386424" kindref="member">no stronger that arc</ref>, or a subrange of specs that is <ref refid="class_usd_prim_composition_query_arc_1ad54fb026b6077ce77e42f687e935f9be" kindref="member">strictly stronger than that arc</ref> (optionally providing a particular layer within the arc&apos;s layer stack to further limit the range of specs).</para>
<para>Alternatively, resolve targets can also be created via methods on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> that can limit value resolution to either <ref refid="class_usd_prim_1a01d0912bb2e4435f60c7c9b737f3fd8c" kindref="member">up to</ref> or <ref refid="class_usd_prim_1a2b2770602392511cb2abe7b63a2934d8" kindref="member">stronger than</ref> the spec that would be edited when setting a value for the prim using the given <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>.</para>
<para>Unlike <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>, a <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> is only relevant to the prim it is created for and can only be used in a <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> for attributes on this prim.</para>
<sect1 id="class_usd_resolve_target_1Invalidation">
<title>Invalidation</title>
<para>This object does not listen for change notification. If a consumer is holding on to a <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref>, it is their responsibility to dispose of it in response to a resync change to the associated prim. Failing to do so may result in incorrect values or crashes due to dereferencing invalid objects. </para>
</sect1>
    </detaileddescription>
    <location file="pxr/usd/usd/resolveTarget.h" line="73" column="1" bodyfile="pxr/usd/usd/resolveTarget.h" bodystart="73" bodyend="143"/>
    <listofallmembers>
      <member refid="class_usd_resolve_target_1a463cc1847ccf2bc80dbcd8923392bc5b" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_expandedPrimIndex</name></member>
      <member refid="class_usd_resolve_target_1a81e84b6308686bc2f33a05e66152b696" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_nodeRange</name></member>
      <member refid="class_usd_resolve_target_1a37ac9a3e904497953188848947e43e2f" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_startLayerIt</name></member>
      <member refid="class_usd_resolve_target_1a594d3fd2a40d3d928131b4c013bf866f" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_startNodeIt</name></member>
      <member refid="class_usd_resolve_target_1a95a6ea1a123b4ea0a5d0681ff063aa16" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_stopLayerIt</name></member>
      <member refid="class_usd_resolve_target_1aec767d51b9e200a91706e73e38a81936" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>_stopNodeIt</name></member>
      <member refid="class_usd_resolve_target_1a979263518e16d8e13c407606a1c883bf" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>GetPrimIndex</name></member>
      <member refid="class_usd_resolve_target_1a75e3d9ac9b3eacd71c633ed8fff61c95" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>GetStartLayer</name></member>
      <member refid="class_usd_resolve_target_1aaff3b591eeb0a7d4d5029df667dcf57b" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>GetStartNode</name></member>
      <member refid="class_usd_resolve_target_1a28006346293b1fcf47cd5739b21c9ff9" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>GetStopLayer</name></member>
      <member refid="class_usd_resolve_target_1a9251fa30c3d97cd4e9747ee94eec798e" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>GetStopNode</name></member>
      <member refid="class_usd_resolve_target_1ac4d637a0dec45d546495c1660c9f6047" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>IsNull</name></member>
      <member refid="class_usd_resolve_target_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>UsdPrim</name></member>
      <member refid="class_usd_resolve_target_1a00c029eb6e6f8b05efd242c1d51a7a0f" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>UsdPrimCompositionQueryArc</name></member>
      <member refid="class_usd_resolve_target_1adb8f9509b0bb172aff0dd56d4bf7dab7" prot="public" virt="non-virtual"><scope>UsdResolveTarget</scope><name>UsdResolveTarget</name></member>
      <member refid="class_usd_resolve_target_1af2195b93a651065c75d2b0023e4fbe62" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>UsdResolveTarget</name></member>
      <member refid="class_usd_resolve_target_1a43edf2ae32b46c66256fff85b0751aa5" prot="private" virt="non-virtual"><scope>UsdResolveTarget</scope><name>UsdResolveTarget</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
