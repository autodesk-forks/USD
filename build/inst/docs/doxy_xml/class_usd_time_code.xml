<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_time_code" kind="class" language="C++" prot="public">
    <compoundname>UsdTimeCode</compoundname>
    <includes refid="usd_2time_code_8h" local="no">timeCode.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_time_code_1a3e78e92b9e102f837e1433ff78edd53c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="204" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_time_code_1acfe9e85dc9805811ec48e38c27042c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr UsdTimeCode</definition>
        <argsstring>(double t=0.0) noexcept</argsstring>
        <name>UsdTimeCode</name>
        <param>
          <type>double</type>
          <declname>t</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Construct with optional time value. Impilicitly convert from double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="87" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1a3700bf236f4f5e2e73e48d909368c131" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr UsdTimeCode</definition>
        <argsstring>(const SdfTimeCode &amp;timeCode) noexcept</argsstring>
        <name>UsdTimeCode</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>timeCode</declname>
        </param>
        <briefdescription>
<para>Construct and implicitly cast from <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="90" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="90" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1af8211454656f0024b584635cd85c254a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEarliestTime</definition>
        <argsstring>() const</argsstring>
        <name>IsEarliestTime</name>
        <briefdescription>
<para>Return true if this time represents the lowest/earliest possible timeCode, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="133" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1aabe1570b4921ccb667b840c8eb289b02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsDefault</definition>
        <argsstring>() const</argsstring>
        <name>IsDefault</name>
        <briefdescription>
<para>Return true if this time represents the &apos;default&apos; sentinel value, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to !IsNumeric(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="139" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1ab30f6993ab39350fa40c1b5a9c85746a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsNumeric</definition>
        <argsstring>() const</argsstring>
        <name>IsNumeric</name>
        <briefdescription>
<para>Return true if this time represents a numeric value, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to !IsDefault(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="145" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1a9acb96fe3dbf15114fed1ebd94548b5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetValue</definition>
        <argsstring>() const</argsstring>
        <name>GetValue</name>
        <briefdescription>
<para>Return the numeric value for this time. </para>
        </briefdescription>
        <detaileddescription>
<para>If this time <emphasis><ref refid="class_usd_time_code_1aabe1570b4921ccb667b840c8eb289b02" kindref="member">IsDefault()</ref></emphasis>, return a quiet NaN value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="151" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="151" bodyend="155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
        <definition>static constexpr UsdTimeCode EarliestTime</definition>
        <argsstring>()</argsstring>
        <name>EarliestTime</name>
        <briefdescription>
<para>Produce a <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> representing the lowest/earliest possible timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>Thus, for any given timeSample <emphasis>s</emphasis>, its time ordinate <emphasis>t</emphasis> will obey: t &gt;= <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">UsdTimeCode::EarliestTime()</ref></para>
<para>This is useful for clients that wish to retrieve the first authored timeSample for an attribute, as they can use <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">UsdTimeCode::EarliestTime()</ref> as the <emphasis>time</emphasis> argument to <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdAttribute::Get()</ref> and <ref refid="class_usd_attribute_1a1f73bf9822e7300dcf4f009e07ae453f" kindref="member">UsdAttribute::GetBracketingTimeSamples()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="101" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
        <definition>static constexpr UsdTimeCode Default</definition>
        <argsstring>()</argsstring>
        <name>Default</name>
        <briefdescription>
<para>Produce a <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> representing the sentinel value for &apos;default&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In inequality comparisons, <ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> is considered less than any numeric TimeCode, including <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">EarliestTime()</ref>, indicative of the fact that in <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> value resolution, the sample at <ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> (if any) is always weaker than any numeric timeSample in the same layer. For more information, see <ref refid="_usd__page__properties_of_scene_description_1Usd_ValueResolution" kindref="member">TimeSamples, Defaults, and Value Resolution</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="112" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_time_code_1a3e6c4fa4d616cac6c84441682626e86c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>static constexpr double SafeStep</definition>
        <argsstring>(double maxValue=1e6, double maxCompression=10.0)</argsstring>
        <name>SafeStep</name>
        <param>
          <type>double</type>
          <declname>maxValue</declname>
          <defval>1e6</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxCompression</declname>
          <defval>10.0</defval>
        </param>
        <briefdescription>
<para>Produce a safe step value such that for any numeric <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> t in [-maxValue, maxValue], t +/- (step / maxCompression) != t with a safety factor of 2. </para>
        </briefdescription>
        <detaileddescription>
<para>This is shorthand for std::numeric_limits&lt;double&gt;::epsilon() * maxValue * maxCompression * 2.0. Such a step value is recommended for simulating jump discontinuities in time samples. For example, author value x at time t, and value y at time t + <ref refid="class_usd_time_code_1a3e6c4fa4d616cac6c84441682626e86c" kindref="member">SafeStep()</ref>. This ensures that as the sample times are shifted and scaled, t and t + <ref refid="class_usd_time_code_1a3e6c4fa4d616cac6c84441682626e86c" kindref="member">SafeStep()</ref> remain distinct so long as they adhere to the <computeroutput>maxValue</computeroutput> and <computeroutput>maxCompression</computeroutput> limits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="126" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="126" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_time_code_1a78677650042b6a0895cdf6accac00307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="158" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1afc8ae646fea194b6fff58b5e9147c713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality comparison. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="164" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1a92e5c8d29dc4e82cd248dda31b960b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-than. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> times are less than all numeric times, <emphasis>including</emphasis> <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">EarliestTime()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="170" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1a85a1ffa0a56c5eec557a683dc7acfe33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater-equal. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> times are less than all numeric times, <emphasis>including</emphasis> <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">EarliestTime()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="178" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1a46b04958f6f39d8dc58d9863199180f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-equal. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> times are less than all numeric times, <emphasis>including</emphasis> <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">EarliestTime()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="184" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1a9916dfcd041364d9b84508dea571d61c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const UsdTimeCode &amp;lhs, const UsdTimeCode &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater-than. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">Default()</ref> times are less than all numeric times, <emphasis>including</emphasis> <ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">EarliestTime()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="191" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_time_code_1a02560291f597d37b4e24727c0b8d9716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const UsdTimeCode &amp;time)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Hash function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="196" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="196" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_time_code_1aad4516e23b7e99c16c76052c147e4353" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void _IssueGetValueOnDefaultError</definition>
        <argsstring>() const</argsstring>
        <name>_IssueGetValueOnDefaultError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/timeCode.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represent a time value, which may be either numeric, holding a double value, or a sentinel value <ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default()</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> does <emphasis>not</emphasis> represent an <ulink url="https://en.wikipedia.org/wiki/SMPTE_timecode">SMPTE timecode</ulink>, although we may, in future, support conversion functions between the two. Instead, <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> is an abstraction that acknowledges that in the principal domains of use for USD, there are many different ways of encoding time, and USD must be able to capture and translate between all of them for interchange, retaining as much intent of the authoring application as possible.</para>
<para>A <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> is therefore a unitless, generic time measurement that serves as the ordinate for time-sampled data in USD files. A client of USD relies on the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> (which in turn consults metadata authored in its root layer) to define the mapping of TimeCodes to units like seconds and frames.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_stage_1a8999976ae5f8f57bc3ab845ea0453155" kindref="member">UsdStage::GetStartTimeCode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1a3c248e832dd9c974f9c24f6f4ef6f312" kindref="member">UsdStage::GetEndTimeCode()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1a85092d7455ae894d50224e761dc6e840" kindref="member">UsdStage::GetTimeCodesPerSecond()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1a5cf22202fde6282744edc795fa81a02f" kindref="member">UsdStage::GetFramesPerSecond()</ref></para>
</simplesect>
As described in <ref refid="_usd__page__properties_of_scene_description_1Usd_ValueResolution" kindref="member">TimeSamples, Defaults, and Value Resolution</ref> , USD optionally provides an unvarying, &apos;default&apos; value for every attribute. <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> embodies a time value that can either be a floating-point sample time, or the default.</para>
<para>All <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> and derived API that requires a time parameter defaults to <ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default()</ref> if the parameter is left unspecified, and auto-constructs from a floating-point argument.</para>
<para><ref refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" kindref="member">UsdTimeCode::EarliestTime()</ref> is provided to aid clients who wish to retrieve the first authored timesample for any attribute. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/timeCode.h" line="84" column="1" bodyfile="pxr/usd/usd/timeCode.h" bodystart="84" bodyend="205"/>
    <listofallmembers>
      <member refid="class_usd_time_code_1aad4516e23b7e99c16c76052c147e4353" prot="private" virt="non-virtual"><scope>UsdTimeCode</scope><name>_IssueGetValueOnDefaultError</name></member>
      <member refid="class_usd_time_code_1a3e78e92b9e102f837e1433ff78edd53c" prot="private" virt="non-virtual"><scope>UsdTimeCode</scope><name>_value</name></member>
      <member refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>Default</name></member>
      <member refid="class_usd_time_code_1a4f38fe7a93e620b03fdb37616a4d88b9" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>EarliestTime</name></member>
      <member refid="class_usd_time_code_1a9acb96fe3dbf15114fed1ebd94548b5e" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>GetValue</name></member>
      <member refid="class_usd_time_code_1a02560291f597d37b4e24727c0b8d9716" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>hash_value</name></member>
      <member refid="class_usd_time_code_1aabe1570b4921ccb667b840c8eb289b02" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>IsDefault</name></member>
      <member refid="class_usd_time_code_1af8211454656f0024b584635cd85c254a" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>IsEarliestTime</name></member>
      <member refid="class_usd_time_code_1ab30f6993ab39350fa40c1b5a9c85746a" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>IsNumeric</name></member>
      <member refid="class_usd_time_code_1afc8ae646fea194b6fff58b5e9147c713" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator!=</name></member>
      <member refid="class_usd_time_code_1a92e5c8d29dc4e82cd248dda31b960b1e" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator&lt;</name></member>
      <member refid="class_usd_time_code_1a46b04958f6f39d8dc58d9863199180f4" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator&lt;=</name></member>
      <member refid="class_usd_time_code_1a78677650042b6a0895cdf6accac00307" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator==</name></member>
      <member refid="class_usd_time_code_1a9916dfcd041364d9b84508dea571d61c" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator&gt;</name></member>
      <member refid="class_usd_time_code_1a85a1ffa0a56c5eec557a683dc7acfe33" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>operator&gt;=</name></member>
      <member refid="class_usd_time_code_1a3e6c4fa4d616cac6c84441682626e86c" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>SafeStep</name></member>
      <member refid="class_usd_time_code_1acfe9e85dc9805811ec48e38c27042c76" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>UsdTimeCode</name></member>
      <member refid="class_usd_time_code_1a3700bf236f4f5e2e73e48d909368c131" prot="public" virt="non-virtual"><scope>UsdTimeCode</scope><name>UsdTimeCode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
