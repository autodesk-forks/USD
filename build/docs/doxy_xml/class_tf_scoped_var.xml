<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_scoped_var" kind="class" language="C++" prot="public">
    <compoundname>TfScopedVar</compoundname>
    <includes refid="scoped_8h" local="no">scoped.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_scoped_var_1aa7e790c9b54c886d32fad8f98088da90" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* _x</definition>
        <argsstring></argsstring>
        <name>_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="155" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_scoped_var_1a796d9f67428055e2f304882b22f73154" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T _old</definition>
        <argsstring></argsstring>
        <name>_old</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="156" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_scoped_var_1a63a053e459129cfa44f9c36978e4a7c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfScopedVar</definition>
        <argsstring>(TfScopedVar const &amp;)=delete</argsstring>
        <name>TfScopedVar</name>
        <param>
          <type><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_var_1a7390dd9ce09b6b80cf1af782106c6de3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref> &amp;</type>
        <definition>TfScopedVar&amp; operator=</definition>
        <argsstring>(TfScopedVar const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_scoped_var_1a7948a2e2c269bd21b5e4d33ed20e1f6d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfScopedVar</definition>
        <argsstring>(T &amp;x, const T &amp;val)</argsstring>
        <name>TfScopedVar</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set/reset variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets <computeroutput>x</computeroutput> to <computeroutput>val</computeroutput> immediately and restores its old value when this goes out of scope. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="141" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_var_1a113f09634df84f9c18dd164a6710ba54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~TfScopedVar</definition>
        <argsstring>()</argsstring>
        <name>~TfScopedVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="148" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="148" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_scoped_var_1a22c141c33f74d21f21be163696e53af3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* operator new</definition>
        <argsstring>(::std::size_t size)</argsstring>
        <name>operator new</name>
        <param>
          <type>::std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reset variable on exiting scope. </para>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref></computeroutput> sets a variable to a value when created then restores its original value when destroyed. For example:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>func(bool<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TfScopedVar&lt;bool&gt;<sp/>scope(x,<sp/>true);<sp/><sp/>//<sp/>set<sp/>x<sp/>to<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return<sp/>func2(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>restore<sp/>x<sp/>after<sp/>calling<sp/>func2</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/base/tf/scoped.h" line="133" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="133" bodyend="157"/>
    <listofallmembers>
      <member refid="class_tf_scoped_var_1a796d9f67428055e2f304882b22f73154" prot="private" virt="non-virtual"><scope>TfScopedVar</scope><name>_old</name></member>
      <member refid="class_tf_scoped_var_1aa7e790c9b54c886d32fad8f98088da90" prot="private" virt="non-virtual"><scope>TfScopedVar</scope><name>_x</name></member>
      <member refid="class_tf_scoped_var_1a22c141c33f74d21f21be163696e53af3" prot="private" virt="non-virtual"><scope>TfScopedVar</scope><name>operator new</name></member>
      <member refid="class_tf_scoped_var_1a7390dd9ce09b6b80cf1af782106c6de3" prot="private" virt="non-virtual"><scope>TfScopedVar</scope><name>operator=</name></member>
      <member refid="class_tf_scoped_var_1a63a053e459129cfa44f9c36978e4a7c6" prot="private" virt="non-virtual"><scope>TfScopedVar</scope><name>TfScopedVar</name></member>
      <member refid="class_tf_scoped_var_1a7948a2e2c269bd21b5e4d33ed20e1f6d" prot="public" virt="non-virtual"><scope>TfScopedVar</scope><name>TfScopedVar</name></member>
      <member refid="class_tf_scoped_var_1a113f09634df84f9c18dd164a6710ba54" prot="public" virt="non-virtual"><scope>TfScopedVar</scope><name>~TfScopedVar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
