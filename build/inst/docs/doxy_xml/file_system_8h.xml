<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="file_system_8h" kind="file" language="C++">
    <compoundname>fileSystem.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2arch_2api_8h" local="yes">pxr/base/arch/api.h</includes>
    <includes refid="defines_8h" local="yes">pxr/base/arch/defines.h</includes>
    <includes refid="inttypes_8h" local="yes">pxr/base/arch/inttypes.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">string</includes>
    <includes local="no">set</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/param.h</includes>
    <includedby refid="path_utils_8h" local="yes">pxr/base/tf/pathUtils.h</includedby>
    <incdepgraph>
      <node id="14115">
        <label>sys/stat.h</label>
      </node>
      <node id="14101">
        <label>pxr/base/arch/fileSystem.h</label>
        <link refid="file_system_8h"/>
        <childnode refid="14102" relation="include">
        </childnode>
        <childnode refid="14103" relation="include">
        </childnode>
        <childnode refid="14105" relation="include">
        </childnode>
        <childnode refid="14106" relation="include">
        </childnode>
        <childnode refid="14110" relation="include">
        </childnode>
        <childnode refid="14111" relation="include">
        </childnode>
        <childnode refid="14112" relation="include">
        </childnode>
        <childnode refid="14113" relation="include">
        </childnode>
        <childnode refid="14114" relation="include">
        </childnode>
        <childnode refid="14109" relation="include">
        </childnode>
        <childnode refid="14115" relation="include">
        </childnode>
        <childnode refid="14116" relation="include">
        </childnode>
      </node>
      <node id="14106">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="14107" relation="include">
        </childnode>
        <childnode refid="14108" relation="include">
        </childnode>
        <childnode refid="14102" relation="include">
        </childnode>
        <childnode refid="14105" relation="include">
        </childnode>
        <childnode refid="14109" relation="include">
        </childnode>
      </node>
      <node id="14104">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="14105" relation="include">
        </childnode>
      </node>
      <node id="14108">
        <label>cstdint</label>
      </node>
      <node id="14114">
        <label>fcntl.h</label>
      </node>
      <node id="14112">
        <label>string</label>
      </node>
      <node id="14107">
        <label>cinttypes</label>
      </node>
      <node id="14102">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="14109">
        <label>sys/types.h</label>
      </node>
      <node id="14111">
        <label>cstdio</label>
      </node>
      <node id="14116">
        <label>sys/param.h</label>
      </node>
      <node id="14105">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="14113">
        <label>set</label>
      </node>
      <node id="14103">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="14104" relation="include">
        </childnode>
      </node>
      <node id="14110">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="14117">
        <label>pxr/base/arch/fileSystem.h</label>
        <link refid="file_system_8h"/>
        <childnode refid="14118" relation="include">
        </childnode>
      </node>
      <node id="14118">
        <label>pxr/base/tf/pathUtils.h</label>
        <link refid="path_utils_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__arch___system_functions_1gae78e9a15b56a6dc843d1ae40f46650c4" prot="public" static="no">
        <name>ARCH_GLOB_NOCHECK</name>
        <initializer>GLOB_NOCHECK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="85" column="14" bodyfile="pxr/base/arch/fileSystem.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gabdb74929775eb1a265a41644dada741e" prot="public" static="no">
        <name>ARCH_GLOB_MARK</name>
        <initializer>GLOB_MARK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="86" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaa9c0ec0afe3e9e6b4542058b3b617ffc" prot="public" static="no">
        <name>ARCH_GLOB_NOSORT</name>
        <initializer>GLOB_NOSORT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="87" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gad88b7ed267db99c018715146cf0398ed" prot="public" static="no">
        <name>ARCH_GLOB_DEFAULT</name>
        <initializer>(ARCH_GLOB_NOCHECK | ARCH_GLOB_MARK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="89" column="10" bodyfile="pxr/base/arch/fileSystem.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga42214c13ceccc9134781b0f2b6d7bf5e" prot="public" static="no">
        <name>ARCH_PATH_MAX</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="101" column="52" bodyfile="pxr/base/arch/fileSystem.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga48dc011488184e569a769337c95a054a" prot="public" static="no">
        <name>ARCH_PATH_SEP</name>
        <initializer>&quot;/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="112" column="14" bodyfile="pxr/base/arch/fileSystem.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga32795219b148e1108cb467689094b5ec" prot="public" static="no">
        <name>ARCH_PATH_LIST_SEP</name>
        <initializer>&quot;:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="113" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga10143d3d319d5313d702d5d0f136b398" prot="public" static="no">
        <name>ARCH_REL_PATH_IDENT</name>
        <initializer>&quot;./&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="114" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga00fbb4b017020dbed5d50d61959f5676" prot="public" static="no">
        <name>ArchChmod</name>
        <param><defname>path</defname></param>
        <param><defname>mode</defname></param>
        <initializer>chmod(path, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="139" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga4bf018568a74ecf445a37ecfc19bc84c" prot="public" static="no">
        <name>ArchCloseFile</name>
        <param><defname>fd</defname></param>
        <initializer>close(fd)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="145" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaf3ef35f7ff267ed96b7b698eb230c29a" prot="public" static="no">
        <name>ArchUnlinkFile</name>
        <param><defname>path</defname></param>
        <initializer>unlink(path)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="151" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga19c346ae764d7c343cf14e8cd77968ff" prot="public" static="no">
        <name>ArchFileAccess</name>
        <param><defname>path</defname></param>
        <param><defname>mode</defname></param>
        <initializer>access(path, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="157" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga951167096140ce8c9f68872c9e29aa16" prot="public" static="no">
        <name>ArchFdOpen</name>
        <param><defname>fd</defname></param>
        <param><defname>mode</defname></param>
        <initializer>fdopen(fd, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="163" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga2d81fa1da6366a38d5ea979d6fc17ad8" prot="public" static="no">
        <name>ArchFileNo</name>
        <param><defname>stream</defname></param>
        <initializer>fileno(stream)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="169" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga2f6e5120d25f9981dcab82e0101350ae" prot="public" static="no">
        <name>ArchFileIsaTTY</name>
        <param><defname>stream</defname></param>
        <initializer>isatty(stream)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="175" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaa1259e52de47c0eeec8a966bd5bc469d" prot="public" static="no">
        <name>ArchRmDir</name>
        <param><defname>path</defname></param>
        <initializer>rmdir(path)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="181" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__group__arch___system_functions_1ga54867394e34246d76fcdbf48cb2da1a2" prot="public" static="no" strong="no">
        <type></type>
        <name>ArchMemAdvice</name>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a670b20f6c0a2aac7890520ccc919df7d" prot="public">
          <name>ArchMemAdviceNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a0ae69bef74f710be0f488b9192c64431" prot="public">
          <name>ArchMemAdviceWillNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2ae1e72433caa36aecab5d3d6a2a07854d" prot="public">
          <name>ArchMemAdviceDontNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a2c2d883cb5674c1fd85d505f7ff5222d" prot="public">
          <name>ArchMemAdviceRandomAccess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="364" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="enum" id="group__group__arch___system_functions_1gacd1778d5b6821e5dd7dc00aa9de60a44" prot="public" static="no" strong="no">
        <type></type>
        <name>ArchFileAdvice</name>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a818f910d43a49803cac17271f5c07f56" prot="public">
          <name>ArchFileAdviceNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a3bad46fc4701c523013f4cd44402173d" prot="public">
          <name>ArchFileAdviceWillNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a02d62b054006b9c996f7070b379c4aae" prot="public">
          <name>ArchFileAdviceDontNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44acad6b83759535967f6b2e1ad48c8ce16" prot="public">
          <name>ArchFileAdviceRandomAccess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="414" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="414" bodyend="419"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga4c9e8f7412081966f31376d757035da4" prot="public" static="no">
        <type>struct stat</type>
        <definition>typedef struct stat ArchStatType</definition>
        <argsstring></argsstring>
        <name>ArchStatType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="61" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" prot="public" static="no">
        <type>std::unique_ptr&lt; char const, Arch_Unmapper &gt;</type>
        <definition>using ArchConstFileMapping =  std::unique_ptr&lt;char const, Arch_Unmapper&gt;</definition>
        <argsstring></argsstring>
        <name>ArchConstFileMapping</name>
        <briefdescription>
<para>ArchConstFileMapping and ArchMutableFileMapping are std::unique_ptr&lt;char const *, ...&gt; and std::unique_ptr&lt;char *, ...&gt; respectively. </para>
        </briefdescription>
        <detaileddescription>
<para>The functions <ref refid="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" kindref="member">ArchMapFileReadOnly()</ref> and <ref refid="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" kindref="member">ArchMapFileReadWrite()</ref> return them and provide access to memory-mapped file contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="321" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga75c5a63ff53777e2d5161a6943cd1f90" prot="public" static="no">
        <type>std::unique_ptr&lt; char, Arch_Unmapper &gt;</type>
        <definition>using ArchMutableFileMapping =  std::unique_ptr&lt;char, Arch_Unmapper&gt;</definition>
        <argsstring></argsstring>
        <name>ArchMutableFileMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="322" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__arch___system_functions_1ga1bec132d04aee138cde95f69b7ad4538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API FILE *</type>
        <definition>ARCH_API FILE* ArchOpenFile</definition>
        <argsstring>(char const *fileName, char const *mode)</argsstring>
        <name>ArchOpenFile</name>
        <param>
          <type>char const *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Opens the file that is specified by filename. Returning true if the file was opened successfully; false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gacc73dbd584a8d7703e40f6417b965e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchGetFileLength</definition>
        <argsstring>(const char *fileName)</argsstring>
        <name>ArchGetFileLength</name>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Return the length of a file in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns -1 if the file cannot be opened/read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga028d27eaa4b02d89fd976ce085d6f779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchGetFileLength</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ArchGetFileLength</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga415948a83b889f81f9f1639c4274ab40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetFileName</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ArchGetFileName</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Return a filename for this file, if one can be obtained. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that there are many reasons why it may be impossible to obtain a filename, even for an opened FILE *. Whenever possible avoid using this function and instead store the filename for future use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaa78011cca838a67452c60102e2def798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchStatIsWritable</definition>
        <argsstring>(const ArchStatType *st)</argsstring>
        <name>ArchStatIsWritable</name>
        <param>
          <type>const ArchStatType *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns true if the data in <computeroutput>stat</computeroutput> struct <computeroutput>st</computeroutput> indicates that the target file or directory is writable. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns true if the struct pointer is valid, and the stat indicates the target is writable by the effective user, effective group, or all users. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac6d6d08f8d53a072d6737e7db02a0e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetModificationTime</definition>
        <argsstring>(const char *pathname, double *time)</argsstring>
        <name>ArchGetModificationTime</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the modification time (mtime) in seconds for a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stores the modification time with as much precision as is available in the stat structure for the current platform in <computeroutput>time</computeroutput> and returns <computeroutput>true</computeroutput> on success, otherwise just returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga2f4aeb9586e26f18e9bd83f3af940d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API double</type>
        <definition>ARCH_API double ArchGetModificationTime</definition>
        <argsstring>(const ArchStatType &amp;st)</argsstring>
        <name>ArchGetModificationTime</name>
        <param>
          <type>const ArchStatType &amp;</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns the modification time (mtime) in seconds from the stat struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the modification time with as much precision as is available in the stat structure for the current platform. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gacdfe44cd554312c33de052377c291df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchNormPath</definition>
        <argsstring>(const std::string &amp;path, bool stripDriveSpecifier=false)</argsstring>
        <name>ArchNormPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stripDriveSpecifier</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Normalizes the specified path, eliminating double slashes, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>This canonicalizes paths, removing any double slashes, and eliminiating &apos;.&apos;, and &apos;..&apos; components of the path. This emulates the behavior of os.path.normpath in Python.</para>
<para>On Windows, all backslashes are converted to forward slashes and drive specifiers (e.g., &quot;C:&quot;) are lower-cased. If <computeroutput>stripDriveSpecifier</computeroutput> is <computeroutput>true</computeroutput>, these drive specifiers are removed from the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab146e5fb7a6c2f805936960bc58e3911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchAbsPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ArchAbsPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the canonical absolute path of the specified filename. </para>
        </briefdescription>
        <detaileddescription>
<para>This makes the specified path absolute, by prepending the current working directory. If the path is already absolute, it is returned unmodified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gafcf5d83a628346852ba643aa5a9405bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetStatMode</definition>
        <argsstring>(const char *pathname, int *mode)</argsstring>
        <name>ArchGetStatMode</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Returns the permissions mode (mode_t) for the given pathname. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stats the given pathname and returns the permissions flags for it and returns true. If the stat fails, returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga0767210226cfa6aa0e3683b67677244a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API const char *</type>
        <definition>ARCH_API const char* ArchGetTmpDir</definition>
        <argsstring>()</argsstring>
        <name>ArchGetTmpDir</name>
        <briefdescription>
<para>Return the path to a temporary directory for this platform. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned temporary directory will be a location that will normally be cleaned out on a reboot. This is /var/tmp on Linux machines (for legacy reasons), but /tmp on Darwin machines (/var/tmp on Darwin is specified as a location where files are kept between system reboots - see &quot;man hier&quot;). The returned string will not have a trailing slash.</para>
<para>This routine is threadsafe and will not perform any memory allocations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga997f1d5a8ccc2eabe922ca2c391b8e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchMakeTmpFileName</definition>
        <argsstring>(const std::string &amp;prefix, const std::string &amp;suffix=std::string())</argsstring>
        <name>ArchMakeTmpFileName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Make a temporary file name, in a system-determined temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.pid[.n]suffix where TMPDIR is a system-determined temporary directory (typically /tmp or /usr/tmp), pid is the process id of the process, and the optional .n records the number of times this function has been called by a process (and is ommited the first time this function is called).</para>
<para>The call is threadsafe.</para>
<para><simplesect kind="warning"><para>This call opens a security hole because of the race between choosing the name and opening the file. This call should be avoided in favor of <computeroutput><ref refid="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" kindref="member">ArchMakeTmpFile()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchMakeTmpFile</definition>
        <argsstring>(const std::string &amp;prefix, std::string *pathname=0)</argsstring>
        <name>ArchMakeTmpFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pathname</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a temporary file, in a system-determined temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX where TMPDIR is a system-determined temporary directory (typically /tmp or /usr/tmp) and XXXXXX is a unique suffix. Returns the file descriptor of the new file and, if pathname isn&apos;t NULL, returns the full path to the file in pathname. Returns -1 on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga7261d50cc2fece4b13695cc4571c6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchMakeTmpFile</definition>
        <argsstring>(const std::string &amp;tmpdir, const std::string &amp;prefix, std::string *pathname=0)</argsstring>
        <name>ArchMakeTmpFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tmpdir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pathname</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a temporary file, in a given temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX where TMPDIR is the given temporary directory and XXXXXX is a unique suffix. Returns the file descriptor of the new file and, if pathname isn&apos;t NULL, returns the full path to the file in pathname. Returns -1 on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaf16da5b9f8a5f90356e73952519215ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchMakeTmpSubdir</definition>
        <argsstring>(const std::string &amp;tmpdir, const std::string &amp;prefix)</argsstring>
        <name>ArchMakeTmpSubdir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tmpdir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Create a temporary sub-direcrory, in a given temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX/ where TMPDIR is the given temporary directory and XXXXXX is a unique suffix. Returns the the full path to the subdir in pathname. Returns empty string on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaa31adcaf2d794cb222b2b1afe43198b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ArchGetFileMappingLength</definition>
        <argsstring>(ArchConstFileMapping const &amp;m)</argsstring>
        <name>ArchGetFileMappingLength</name>
        <param>
          <type><ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Return the length of an ArchConstFileMapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="326" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab673c952a25e9a0eea7b638001a980ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ArchGetFileMappingLength</definition>
        <argsstring>(ArchMutableFileMapping const &amp;m)</argsstring>
        <name>ArchGetFileMappingLength</name>
        <param>
          <type>ArchMutableFileMapping const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Return the length of an ArchMutableFileMapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="332" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API <ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></type>
        <definition>ARCH_API ArchConstFileMapping ArchMapFileReadOnly</definition>
        <argsstring>(FILE *file, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadOnly</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Privately map the passed <computeroutput>file</computeroutput> into memory and return a unique_ptr to the read-only mapped contents. </para>
        </briefdescription>
        <detaileddescription>
<para>The contents may not be modified. If mapping fails, return a null unique_ptr and if errMsg is not null fill it with information about the failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac1bbedbea0b3705795d5611b42ddb554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API <ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></type>
        <definition>ARCH_API ArchConstFileMapping ArchMapFileReadOnly</definition>
        <argsstring>(std::string const &amp;path, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadOnly</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API ArchMutableFileMapping</type>
        <definition>ARCH_API ArchMutableFileMapping ArchMapFileReadWrite</definition>
        <argsstring>(FILE *file, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadWrite</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Privately map the passed <computeroutput>file</computeroutput> into memory and return a unique_ptr to the copy-on-write mapped contents. </para>
        </briefdescription>
        <detaileddescription>
<para>If modified, the affected pages are dissociated from the underlying file and become backed by the system&apos;s swap or page-file storage. Edits are not carried through to the underlying file. If mapping fails, return a null unique_ptr and if errMsg is not null fill it with information about the failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac5a0403da008e4a63d9082586c720e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API ArchMutableFileMapping</type>
        <definition>ARCH_API ArchMutableFileMapping ArchMapFileReadWrite</definition>
        <argsstring>(std::string const &amp;path, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadWrite</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga9691881eb2124ba476fc03287c546249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchMemAdvise</definition>
        <argsstring>(void const *addr, size_t len, ArchMemAdvice adv)</argsstring>
        <name>ArchMemAdvise</name>
        <param>
          <type>void const *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ArchMemAdvice</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Advise the OS regarding how the application intends to access a range of memory. </para>
        </briefdescription>
        <detaileddescription>
<para>See ArchMemAdvice. This is primarily useful for mapped file regions. This call does not change program semantics. It is only an optimization hint to the OS, and may be a no-op on some systems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga44413d89e1e0a1395882f7909cc42725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchQueryMappedMemoryResidency</definition>
        <argsstring>(void const *addr, size_t len, unsigned char *pageMap)</argsstring>
        <name>ArchQueryMappedMemoryResidency</name>
        <param>
          <type>void const *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>pageMap</declname>
        </param>
        <briefdescription>
<para>Report whether or not the mapped virtual memory pages starting at <computeroutput>addr</computeroutput> for <computeroutput>len</computeroutput> bytes are resident in RAM. </para>
        </briefdescription>
        <detaileddescription>
<para>Pages that are resident will not, when accessed, cause a page fault while those that are not will. Return true on success and false in case of an error. The <computeroutput>addr</computeroutput> argument must be a multiple of <ref refid="group__group__arch___system_functions_1ga02e2dc24bbe9c2f4a294ee21b85bd8d1" kindref="member">ArchGetPageSize()</ref>. The <computeroutput>len</computeroutput> argument need not be a multiple of the page size; it will be rounded up to the next page boundary. Fill <computeroutput>pageMap</computeroutput> with 0s for pages not resident in memory and 1s for pages that are. The <computeroutput>pageMap</computeroutput> argument must therefore point to at least (<computeroutput>len</computeroutput> + <ref refid="group__group__arch___system_functions_1ga02e2dc24bbe9c2f4a294ee21b85bd8d1" kindref="member">ArchGetPageSize()</ref>-1)/ArchGetPageSize() bytes.</para>
<para>Note that currently this function is only implemented on Linux and Darwin. On Windows it currently always returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga2f71670bb0a450af8eba1b180b6b7f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchPRead</definition>
        <argsstring>(FILE *file, void *buffer, size_t count, int64_t offset)</argsstring>
        <name>ArchPRead</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Read up to <computeroutput>count</computeroutput> bytes from <computeroutput>offset</computeroutput> in <computeroutput>file</computeroutput> into <computeroutput>buffer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The file position indicator for <computeroutput>file</computeroutput> is not changed. Return the number of bytes read, or zero if at end of file. Return -1 in case of an error, with errno set appropriately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab23b99280f2faae45e580aeb3cc0840e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchPWrite</definition>
        <argsstring>(FILE *file, void const *bytes, size_t count, int64_t offset)</argsstring>
        <name>ArchPWrite</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Write up to <computeroutput>count</computeroutput> bytes from <computeroutput>buffer</computeroutput> to <computeroutput>file</computeroutput> at <computeroutput>offset</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The file position indicator for <computeroutput>file</computeroutput> is not changed. Return the number of bytes written, possibly zero if none written. Return -1 in case of an error, with errno set appropriately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga28b4044d257d1c27cb7f4d1a0249987d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchReadLink</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ArchReadLink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the value of the symbolic link at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the empty string on error or if <computeroutput>path</computeroutput> does not refer to a symbolic link. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga5b6c110db6de7ec3b3c325d3a1366844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchFileAdvise</definition>
        <argsstring>(FILE *file, int64_t offset, size_t count, ArchFileAdvice adv)</argsstring>
        <name>ArchFileAdvise</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ArchFileAdvice</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Advise the OS regarding how the application intends to access a range of bytes in a file. </para>
        </briefdescription>
        <detaileddescription>
<para>See ArchFileAdvice. This call does not change program semantics. It is only an optimization hint to the OS, and may be a no-op on some systems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="426" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Architecture dependent file system access. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_ARCH_FILE_SYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_ARCH_FILE_SYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/arch/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/arch/defines.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inttypes_8h" kindref="compound">pxr/base/arch/inttypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/statfs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(ARCH_OS_DARWIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mount.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stringapiset.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor">#if<sp/>!defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>_POSIX_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;<ref refid="limits_8h" kindref="compound">limits.h</ref>&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>PATH_MAX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;sys/param.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>MAXPATHLEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>--<sp/>Should<sp/>probably<sp/>have<sp/>ARCH_<sp/>macro<sp/>for<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>S_ISDIR(m)<sp/>(((m)<sp/>&amp;<sp/>S_IFMT)<sp/>==<sp/>S_IFDIR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>https://msdn.microsoft.com/en-us/library/1w06ktdy.aspx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>--<sp/>Should<sp/>probably<sp/>have<sp/>Arch<sp/>enum<sp/>for<sp/>these.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>F_OK<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>for<sp/>existence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>X_OK<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>for<sp/>execute<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>W_OK<sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>for<sp/>write<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>R_OK<sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Test<sp/>for<sp/>read<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_NOCHECK<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_MARK<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_NOSORT<sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_NOCHECK<sp/><sp/><sp/>GLOB_NOCHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_MARK<sp/><sp/><sp/><sp/><sp/><sp/>GLOB_MARK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_GLOB_NOSORT<sp/><sp/><sp/><sp/>GLOB_NOSORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_GLOB_DEFAULT<sp/><sp/><sp/>(ARCH_GLOB_NOCHECK<sp/>|<sp/>ARCH_GLOB_MARK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARCH_PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_MAX<sp/>PATH_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>MAXPATHLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_MAX<sp/>MAXPATHLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>_MAX_PATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_MAX<sp/>_MAX_PATH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_MAX<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_SEP<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;\\&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_LIST_SEP<sp/><sp/>&quot;;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_REL_PATH_IDENT<sp/>&quot;.\\&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_SEP<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_PATH_LIST_SEP<sp/><sp/>&quot;:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>ARCH_REL_PATH_IDENT<sp/>&quot;./&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__stat64<sp/>ArchStatType;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>ArchStatType;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"></codeline>
<codeline lineno="133"><highlight class="normal">ARCH_API<sp/>FILE*</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga1bec132d04aee138cde95f69b7ad4538" kindref="member">ArchOpenFile</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>fileName,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>mode);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchChmod(path,<sp/>mode)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_chmod(path,<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchChmod(path,<sp/>mode)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chmod(path,<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchCloseFile(fd)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_close(fd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchCloseFile(fd)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchUnlinkFile(path)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unlink(path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchUnlinkFile(path)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink(path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>ARCH_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ArchFileAccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFileAccess(path,<sp/>mode)<sp/><sp/><sp/>access(path,<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFdOpen(fd,<sp/>mode)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fdopen(fd,<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFdOpen(fd,<sp/>mode)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdopen(fd,<sp/>mode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFileNo(stream)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fileno(stream)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFileNo(stream)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileno(stream)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFileIsaTTY(stream)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_isatty(stream)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchFileIsaTTY(stream)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>isatty(stream)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>ARCH_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ArchRmDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>ArchRmDir(path)<sp/><sp/><sp/>rmdir(path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">ARCH_API<sp/>int64_t<sp/><ref refid="group__group__arch___system_functions_1gacc73dbd584a8d7703e40f6417b965e6c" kindref="member">ArchGetFileLength</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fileName);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">ARCH_API<sp/>int64_t<sp/><ref refid="group__group__arch___system_functions_1gacc73dbd584a8d7703e40f6417b965e6c" kindref="member">ArchGetFileLength</ref>(FILE<sp/>*file);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">ARCH_API<sp/>std::string<sp/><ref refid="group__group__arch___system_functions_1ga415948a83b889f81f9f1639c4274ab40" kindref="member">ArchGetFileName</ref>(FILE<sp/>*file);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">ARCH_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gaa78011cca838a67452c60102e2def798" kindref="member">ArchStatIsWritable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArchStatType<sp/>*st);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">ARCH_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gac6d6d08f8d53a072d6737e7db02a0e51" kindref="member">ArchGetModificationTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pathname,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>time);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">ARCH_API<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gac6d6d08f8d53a072d6737e7db02a0e51" kindref="member">ArchGetModificationTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArchStatType&amp;<sp/>st);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">ARCH_API<sp/>std::string<sp/><ref refid="group__group__arch___system_functions_1gacdfe44cd554312c33de052377c291df9" kindref="member">ArchNormPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stripDriveSpecifier<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">ARCH_API<sp/>std::string<sp/><ref refid="group__group__arch___system_functions_1gab146e5fb7a6c2f805936960bc58e3911" kindref="member">ArchAbsPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">ARCH_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gafcf5d83a628346852ba643aa5a9405bf" kindref="member">ArchGetStatMode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pathname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*mode);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">ARCH_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__group__arch___system_functions_1ga0767210226cfa6aa0e3683b67677244a" kindref="member">ArchGetTmpDir</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="267"><highlight class="normal">std::string<sp/><ref refid="group__group__arch___system_functions_1ga997f1d5a8ccc2eabe922ca2c391b8e12" kindref="member">ArchMakeTmpFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>suffix<sp/>=<sp/>std::string());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" kindref="member">ArchMakeTmpFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix,<sp/>std::string*<sp/>pathname<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" kindref="member">ArchMakeTmpFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tmpdir,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix,<sp/>std::string*<sp/>pathname<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="303"><highlight class="normal">std::string<sp/><ref refid="group__group__arch___system_functions_1gaf16da5b9f8a5f90356e73952519215ea" kindref="member">ArchMakeTmpSubdir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tmpdir,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>&apos;deleter&apos;<sp/>for<sp/>use<sp/>with<sp/>std::unique_ptr<sp/>for<sp/>file<sp/>mappings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Arch_Unmapper<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Arch_Unmapper()<sp/>:<sp/>_length(~0)<sp/>{}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Arch_Unmapper(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>:<sp/>_length(length)<sp/>{}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>ARCH_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mapStart)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>ARCH_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*mapStart)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetLength()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_length;<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_length;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref><sp/>=<sp/>std::unique_ptr&lt;char<sp/>const,<sp/>Arch_Unmapper&gt;;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ArchMutableFileMapping<sp/>=<sp/>std::unique_ptr&lt;char,<sp/>Arch_Unmapper&gt;;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="group__group__arch___system_functions_1gaa31adcaf2d794cb222b2b1afe43198b6" refkind="member"><highlight class="normal"><ref refid="group__group__arch___system_functions_1gaa31adcaf2d794cb222b2b1afe43198b6" kindref="member">ArchGetFileMappingLength</ref>(<ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.get_deleter().GetLength();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="group__group__arch___system_functions_1gab673c952a25e9a0eea7b638001a980ac" refkind="member"><highlight class="normal"><ref refid="group__group__arch___system_functions_1gaa31adcaf2d794cb222b2b1afe43198b6" kindref="member">ArchGetFileMappingLength</ref>(ArchMutableFileMapping<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m.get_deleter().GetLength();</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" kindref="member">ArchMapFileReadOnly</ref>(FILE<sp/>*file,<sp/>std::string<sp/>*errMsg=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" kindref="member">ArchMapFileReadOnly</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/>std::string<sp/>*errMsg=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="356"><highlight class="normal">ArchMutableFileMapping</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" kindref="member">ArchMapFileReadWrite</ref>(FILE<sp/>*file,<sp/>std::string<sp/>*errMsg=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="361"><highlight class="normal">ArchMutableFileMapping</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" kindref="member">ArchMapFileReadWrite</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/>std::string<sp/>*errMsg=</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ArchMemAdvice<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchMemAdviceNormal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>range<sp/>with<sp/>default<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchMemAdviceWillNeed,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>may<sp/>prefetch<sp/>this<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchMemAdviceDontNeed,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>may<sp/>free<sp/>resources<sp/>related<sp/>to<sp/>this<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchMemAdviceRandomAccess,<sp/></highlight><highlight class="comment">//<sp/>Prefetching<sp/>may<sp/>not<sp/>be<sp/>beneficial.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1ga9691881eb2124ba476fc03287c546249" kindref="member">ArchMemAdvise</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>ArchMemAdvice<sp/>adv);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="group__group__arch___system_functions_1ga44413d89e1e0a1395882f7909cc42725" kindref="member">ArchQueryMappedMemoryResidency</ref>(</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pageMap);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="400"><highlight class="normal">int64_t<sp/><ref refid="group__group__arch___system_functions_1ga2f71670bb0a450af8eba1b180b6b7f4f" kindref="member">ArchPRead</ref>(FILE<sp/>*file,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>int64_t<sp/>offset);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="407"><highlight class="normal">int64_t<sp/><ref refid="group__group__arch___system_functions_1gab23b99280f2faae45e580aeb3cc0840e" kindref="member">ArchPWrite</ref>(FILE<sp/>*file,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>int64_t<sp/>offset);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="412"><highlight class="normal">std::string<sp/><ref refid="group__group__arch___system_functions_1ga28b4044d257d1c27cb7f4d1a0249987d" kindref="member">ArchReadLink</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ArchFileAdvice<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchFileAdviceNormal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>range<sp/>with<sp/>default<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchFileAdviceWillNeed,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>may<sp/>prefetch<sp/>this<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchFileAdviceDontNeed,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OS<sp/>may<sp/>free<sp/>resources<sp/>related<sp/>to<sp/>this<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>ArchFileAdviceRandomAccess,<sp/></highlight><highlight class="comment">//<sp/>Prefetching<sp/>may<sp/>not<sp/>be<sp/>beneficial.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__arch___system_functions_1ga5b6c110db6de7ec3b3c325d3a1366844" kindref="member">ArchFileAdvise</ref>(FILE<sp/>*file,<sp/>int64_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArchFileAdvice<sp/>adv);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ARCH_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>ArchWindowsUtf16ToUtf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;wstr)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wstr.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>call<sp/>is<sp/>only<sp/>to<sp/>get<sp/>required<sp/>size<sp/>for<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>WideCharToMultiByte(</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>0,<sp/>wstr.data(),<sp/>(int)wstr.size(),<sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str(size,<sp/>0);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WideCharToMultiByte(CP_UTF8,<sp/>0,<sp/>wstr.data(),<sp/>(int)wstr.size(),</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;str[0],<sp/>size,<sp/>NULL,<sp/>NULL)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::wstring<sp/>ArchWindowsUtf8ToUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::wstring();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>call<sp/>is<sp/>only<sp/>to<sp/>get<sp/>required<sp/>size<sp/>for<sp/>wstring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>MultiByteToWideChar(</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>0,<sp/>str.data(),<sp/>(int)str.size(),<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::wstring();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>wstr(size,<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(MultiByteToWideChar(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CP_UTF8,<sp/>0,<sp/>str.data(),<sp/>(int)str.size(),<sp/>&amp;wstr[0],<sp/>size)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::wstring();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wstr;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_ARCH_FILE_SYSTEM_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/arch/fileSystem.h"/>
  </compounddef>
</doxygen>
