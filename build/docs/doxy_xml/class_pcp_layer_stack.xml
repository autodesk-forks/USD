<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_layer_stack" kind="class" language="C++" prot="public">
    <compoundname>PcpLayerStack</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="layer_stack_8h" local="no">layerStack.h</includes>
    <innerclass refid="struct_pcp_layer_stack_1_1___sublayer_source_info" prot="private">PcpLayerStack::_SublayerSourceInfo</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_pcp_layer_stack_1af8711cf464371fe438e41c74345279a5" prot="private" static="no">
        <type>std::map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_pcp_map_expression_1a658f347e635bfae194c2e248dd4c97fb" kindref="member">PcpMapExpression::VariableUniquePtr</ref>, SdfPath::FastLessThan &gt;</type>
        <definition>typedef std::map&lt;SdfPath, PcpMapExpression::VariableUniquePtr, SdfPath::FastLessThan&gt; _RelocatesVarMap</definition>
        <argsstring></argsstring>
        <name>_RelocatesVarMap</name>
        <briefdescription>
<para>A map of PcpMapExpressions::Variable instances used to represent the current value of relocations given out by <ref refid="class_pcp_layer_stack_1a90eda5cd10aec4697ab1e72652bb0f17" kindref="member">GetExpressionForRelocatesAtPath()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This map is used to update those values when relocations change. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="317" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_layer_stack_1a0693215874b49aeaaca41324e7a512d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PcpCache</definition>
        <argsstring></argsstring>
        <name>PcpCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="218" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_layer_stack_1a1b0fc5cfd96e2495eafd6e7e26e8c47a" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref></type>
        <definition>const PcpLayerStackIdentifier _identifier</definition>
        <argsstring></argsstring>
        <name>_identifier</name>
        <briefdescription>
<para>The identifier that uniquely identifies this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="247" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aad7014b56e9796a09c2640a4fa9ba169" prot="private" static="no" mutable="no">
        <type>Pcp_LayerStackRegistryPtr</type>
        <definition>Pcp_LayerStackRegistryPtr _registry</definition>
        <argsstring></argsstring>
        <name>_registry</name>
        <briefdescription>
<para>The registry (1:1 with a <ref refid="class_pcp_cache" kindref="compound">PcpCache</ref>) this layer stack belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para>This may not be set, particularly when a registry is creating a layer stack but before it&apos;s been installed in the registry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="252" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a661408cfd61bf96d1797e51cb404d705" prot="private" static="no" mutable="no">
        <type>SdfLayerRefPtrVector</type>
        <definition>SdfLayerRefPtrVector _layers</definition>
        <argsstring></argsstring>
        <name>_layers</name>
        <briefdescription>
<para>Data representing the computed layer stack contents. </para>
        </briefdescription>
        <detaileddescription>
<para>This is built by examining the session and root layers for sublayers, resolving their asset paths with the path resolver context, and recursively building up the layer stack.</para>
<para>Note that this is only the <emphasis>local</emphasis> layer stack <ndash/> it does not include any layers brought in by references inside prims. Retained references to the layers in the stack, in strong-to-weak order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="265" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aac88a879bb0b96c5d2ed913c9556ac63" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &gt;</type>
        <definition>std::vector&lt;PcpMapFunction&gt; _mapFunctions</definition>
        <argsstring></argsstring>
        <name>_mapFunctions</name>
        <briefdescription>
<para>The corresponding map functions for each entry in &apos;layers&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>Each map function contains a time offset that should be applied to its corresponding layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="270" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aa6b728342b8eaeb4a154edd887600ee5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _timeCodesPerSecond</definition>
        <argsstring></argsstring>
        <name>_timeCodesPerSecond</name>
        <briefdescription>
<para>Stores the computed time codes per second value of the layer stack which has some special logic when a session layer is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="274" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aecf1943cb905f170ab67987f4366ecd1" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerTreeHandle</ref></type>
        <definition>SdfLayerTreeHandle _layerTree</definition>
        <argsstring></argsstring>
        <name>_layerTree</name>
        <briefdescription>
<para>The tree structure of the layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Stored separately because this is needed only occasionally. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="278" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aa00095d879d1b4f143e4841df578e955" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _SublayerSourceInfo &gt;</type>
        <definition>std::vector&lt;_SublayerSourceInfo&gt; _sublayerSourceInfo</definition>
        <argsstring></argsstring>
        <name>_sublayerSourceInfo</name>
        <briefdescription>
<para>List of source info for sublayer asset path computations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="297" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aff4efcac69b8a69c7b7ee319515d666d" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; _mutedAssetPaths</definition>
        <argsstring></argsstring>
        <name>_mutedAssetPaths</name>
        <briefdescription>
<para>Set of asset paths that were muted in this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="300" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a66f940131be4626a3dc47fe8ca70f4d4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; PcpErrorVector &gt;</type>
        <definition>std::unique_ptr&lt;PcpErrorVector&gt; _localErrors</definition>
        <argsstring></argsstring>
        <name>_localErrors</name>
        <briefdescription>
<para>The errors, if any, discovered while computing this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>NULL if no errors were found (the expected common case). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="304" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a698f914f0c15e4232e267342877e4942" prot="private" static="no" mutable="no">
        <type><ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref></type>
        <definition>SdfRelocatesMap _relocatesSourceToTarget</definition>
        <argsstring></argsstring>
        <name>_relocatesSourceToTarget</name>
        <briefdescription>
<para>Pre-computed table of local relocates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="307" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a42c3034cb678146136a966051247504a" prot="private" static="no" mutable="no">
        <type><ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref></type>
        <definition>SdfRelocatesMap _relocatesTargetToSource</definition>
        <argsstring></argsstring>
        <name>_relocatesTargetToSource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="308" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1ab3416c040344078025f316fe76c71685" prot="private" static="no" mutable="no">
        <type><ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref></type>
        <definition>SdfRelocatesMap _incrementalRelocatesSourceToTarget</definition>
        <argsstring></argsstring>
        <name>_incrementalRelocatesSourceToTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="309" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a2054023739f72545ef3a1cc4e30f845b" prot="private" static="no" mutable="no">
        <type><ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref></type>
        <definition>SdfRelocatesMap _incrementalRelocatesTargetToSource</definition>
        <argsstring></argsstring>
        <name>_incrementalRelocatesTargetToSource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="310" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a5443a45566b2289c920df2ae4780d5c5" prot="private" static="no" mutable="no">
        <type>_RelocatesVarMap</type>
        <definition>_RelocatesVarMap _relocatesVariables</definition>
        <argsstring></argsstring>
        <name>_relocatesVariables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="318" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1aeeddd5b6fea6603356c27115a76e4684" prot="private" static="no" mutable="no">
        <type>tbb::spin_mutex</type>
        <definition>tbb::spin_mutex _relocatesVariablesMutex</definition>
        <argsstring></argsstring>
        <name>_relocatesVariablesMutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="319" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a0fda09a475ec8500358072d3b0e0d3b7" prot="private" static="no" mutable="no">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _relocatesPrimPaths</definition>
        <argsstring></argsstring>
        <name>_relocatesPrimPaths</name>
        <briefdescription>
<para>List of all prim spec paths where relocations were found. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="322" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a00cbe69dacbe025767a5e47993641d4f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref> &gt;</type>
        <definition>std::shared_ptr&lt;PcpExpressionVariables&gt; _expressionVariables</definition>
        <argsstring></argsstring>
        <name>_expressionVariables</name>
        <briefdescription>
<para>Composed expression variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="325" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1a67904dc6f0921a0767baf1217fc7eb8e" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; std::string &gt;</type>
        <definition>std::unordered_set&lt;std::string&gt; _expressionVariableDependencies</definition>
        <argsstring></argsstring>
        <name>_expressionVariableDependencies</name>
        <briefdescription>
<para>Set of expression variables this layer stack depends on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="328" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_layer_stack_1ae9e893a20be42280bdf96b3219e8cc9d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isUsd</definition>
        <argsstring></argsstring>
        <name>_isUsd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="330" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_layer_stack_1a18dfbc2317ef65972934a38b8c14f88c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpLayerStack</definition>
        <argsstring>(const PcpLayerStack &amp;)=delete</argsstring>
        <name>PcpLayerStack</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack" kindref="compound">PcpLayerStack</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a85ce5aa05912d627285e53cd6f17e4da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_pcp_layer_stack" kindref="compound">PcpLayerStack</ref> &amp;</type>
        <definition>PcpLayerStack&amp; operator=</definition>
        <argsstring>(const PcpLayerStack &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack" kindref="compound">PcpLayerStack</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a3a6806adb9643a0b704d13532ff01ba2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpLayerStack</definition>
        <argsstring>(const PcpLayerStackIdentifier &amp;identifier, const Pcp_LayerStackRegistry &amp;registry)</argsstring>
        <name>PcpLayerStack</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const Pcp_LayerStackRegistry &amp;</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a77246f4a1b80e2eaea597c7028bff2bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _BlowLayers</definition>
        <argsstring>()</argsstring>
        <name>_BlowLayers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a86e90245e3b5385642085232c4e8a988" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _BlowRelocations</definition>
        <argsstring>()</argsstring>
        <name>_BlowRelocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a79054125717a28ff92dab2ae8a1faa62" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Compute</definition>
        <argsstring>(const std::string &amp;fileFormatTarget, const Pcp_MutedLayers &amp;mutedLayers)</argsstring>
        <name>_Compute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileFormatTarget</declname>
        </param>
        <param>
          <type>const Pcp_MutedLayers &amp;</type>
          <declname>mutedLayers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1aa5083decd9b4404b61762c4c5a931132" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerTreeHandle</ref></type>
        <definition>SdfLayerTreeHandle _BuildLayerStack</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfLayerOffset &amp;offset, double layerTcps, const ArResolverContext &amp;pathResolverContext, const SdfLayer::FileFormatArguments &amp;layerArgs, const std::string &amp;sessionOwner, const Pcp_MutedLayers &amp;mutedLayers, SdfLayerHandleSet *seenLayers, PcpErrorVector *errors)</argsstring>
        <name>_BuildLayerStack</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>layerTcps</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">SdfLayer::FileFormatArguments</ref> &amp;</type>
          <declname>layerArgs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sessionOwner</declname>
        </param>
        <param>
          <type>const Pcp_MutedLayers &amp;</type>
          <declname>mutedLayers</declname>
        </param>
        <param>
          <type>SdfLayerHandleSet *</type>
          <declname>seenLayers</declname>
        </param>
        <param>
          <type>PcpErrorVector *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="234" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_layer_stack_1a6265bad3d077c145cc224361c53c3b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>PCP_API</type>
        <definition>virtual PCP_API ~PcpLayerStack</definition>
        <argsstring>()</argsstring>
        <name>~PcpLayerStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a8956d0ed6ead5101525e38a1ba8cccc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref> &amp;</type>
        <definition>PCP_API const PcpLayerStackIdentifier&amp; GetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetIdentifier</name>
        <briefdescription>
<para>Returns the identifier for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a329e159cbe7fec06f5b8866dc5f8bc71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const SdfLayerRefPtrVector &amp;</type>
        <definition>PCP_API const SdfLayerRefPtrVector&amp; GetLayers</definition>
        <argsstring>() const</argsstring>
        <name>GetLayers</name>
        <briefdescription>
<para>Returns the layers in this layer stack in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this is only the <emphasis>local</emphasis> layer stack <ndash/> it does not include any layers brought in by references inside prims. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a27a4bc5b7244d922972ba4655d5d83b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API SdfLayerHandleVector</type>
        <definition>PCP_API SdfLayerHandleVector GetSessionLayers</definition>
        <argsstring>() const</argsstring>
        <name>GetSessionLayers</name>
        <briefdescription>
<para>Returns only the session layers in the layer stack in strong-to-weak order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1acc61aa1aa2e39703927f7a20d3e66ed5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerTreeHandle</ref> &amp;</type>
        <definition>PCP_API const SdfLayerTreeHandle&amp; GetLayerTree</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerTree</name>
        <briefdescription>
<para>Returns the layer tree representing the structure of this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1ab6cedb921391c575f9a71e09409ee561" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> *</type>
        <definition>PCP_API const SdfLayerOffset* GetLayerOffsetForLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;) const</argsstring>
        <name>GetLayerOffsetForLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
        </param>
        <briefdescription>
<para>Returns the layer offset for the given layer, or NULL if the layer can&apos;t be found or is the identity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a0d75cd0507ab1a2182e69d9a32485031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> *</type>
        <definition>PCP_API const SdfLayerOffset* GetLayerOffsetForLayer</definition>
        <argsstring>(const SdfLayerRefPtr &amp;) const</argsstring>
        <name>GetLayerOffsetForLayer</name>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Return the layer offset for the given layer, or NULL if the layer can&apos;t be found or is the identity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1ac91129b5f95cfa59dcc4ef1187ddc6c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> *</type>
        <definition>PCP_API const SdfLayerOffset* GetLayerOffsetForLayer</definition>
        <argsstring>(size_t layerIdx) const</argsstring>
        <name>GetLayerOffsetForLayer</name>
        <param>
          <type>size_t</type>
          <declname>layerIdx</declname>
        </param>
        <briefdescription>
<para>Returns the layer offset for the layer at the given index in this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns NULL if the offset is the identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a90e845386e1b8d659b8732926e2bf13e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const std::set&lt; std::string &gt; &amp;</type>
        <definition>PCP_API const std::set&lt;std::string&gt;&amp; GetMutedLayers</definition>
        <argsstring>() const</argsstring>
        <name>GetMutedLayers</name>
        <briefdescription>
<para>Returns the set of layers that were muted in this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a91f65b03ae904c26c54630aef3eb53a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PcpErrorVector</type>
        <definition>PcpErrorVector GetLocalErrors</definition>
        <argsstring>() const</argsstring>
        <name>GetLocalErrors</name>
        <briefdescription>
<para>Return the list of errors local to this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="117" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a2371b08320a0d0ba86d35cf40d68168a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;layer) const</argsstring>
        <name>HasLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Returns true if this layer stack contains the given layer, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1afc126e7ebb057901f37b1c1acc9494e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasLayer</definition>
        <argsstring>(const SdfLayerRefPtr &amp;layer) const</argsstring>
        <name>HasLayer</name>
        <param>
          <type>const <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1abf29e0e4886b2a46de73d6124a219dcd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_expression_variables" kindref="compound">PcpExpressionVariables</ref> &amp;</type>
        <definition>const PcpExpressionVariables&amp; GetExpressionVariables</definition>
        <argsstring>() const</argsstring>
        <name>GetExpressionVariables</name>
        <briefdescription>
<para>Return the composed expression variables for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="129" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="129" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1aaaf843209ac86fd1b5f7a16bd127299c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::unordered_set&lt; std::string &gt; &amp;</type>
        <definition>const std::unordered_set&lt;std::string&gt;&amp; GetExpressionVariableDependencies</definition>
        <argsstring>() const</argsstring>
        <name>GetExpressionVariableDependencies</name>
        <briefdescription>
<para>Return the set of expression variables used during the computation of this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, this may include the variables used in expression variable expressions in sublayer asset paths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="136" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="136" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a1d68e97a39389e9c7b2273edeb387c6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetTimeCodesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeCodesPerSecond</name>
        <briefdescription>
<para>Return the time codes per second value of the layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This is usually the same as the computed time codes per second of the root layer but may be computed from the session layer when its present. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="142" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1add85038cfde3f19ccd2ebacefb18794c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref> &amp;</type>
        <definition>PCP_API const SdfRelocatesMap&amp; GetRelocatesSourceToTarget</definition>
        <argsstring>() const</argsstring>
        <name>GetRelocatesSourceToTarget</name>
        <briefdescription>
<para>Returns relocation source-to-target mapping for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This map combines the individual relocation entries found across all layers in this layer stack; multiple entries that affect a single prim will be combined into a single entry. For instance, if this layer stack contains relocations { /A: /B } and { /A/C: /A/D }, this map will contain { /A: /B } and { /B/C: /B/D }. This allows consumers to go from unrelocated namespace to relocated namespace in a single step. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a5eeabe8bc4f253ec06ebeecfaefda3b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref> &amp;</type>
        <definition>PCP_API const SdfRelocatesMap&amp; GetRelocatesTargetToSource</definition>
        <argsstring>() const</argsstring>
        <name>GetRelocatesTargetToSource</name>
        <briefdescription>
<para>Returns relocation target-to-source mapping for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>See GetRelocatesSourceToTarget for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1aa02662c5beda4ed70f012fa8e5988d93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref> &amp;</type>
        <definition>PCP_API const SdfRelocatesMap&amp; GetIncrementalRelocatesSourceToTarget</definition>
        <argsstring>() const</argsstring>
        <name>GetIncrementalRelocatesSourceToTarget</name>
        <briefdescription>
<para>Returns incremental relocation source-to-target mapping for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This map contains the individual relocation entries found across all layers in this layer stack; it does not combine ancestral entries with descendant entries. For instance, if this layer stack contains relocations { /A: /B } and { /A/C: /A/D }, this map will contain { /A: /B } and { /A/C: /A/D }. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a0be7ddcfb8f37aa9a6d15cc4bfe85783" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="usd_2sdf_2types_8h_1aed39354ce0865bb4ce3d4e6f50346a60" kindref="member">SdfRelocatesMap</ref> &amp;</type>
        <definition>PCP_API const SdfRelocatesMap&amp; GetIncrementalRelocatesTargetToSource</definition>
        <argsstring>() const</argsstring>
        <name>GetIncrementalRelocatesTargetToSource</name>
        <briefdescription>
<para>Returns incremental relocation target-to-source mapping for this layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>See GetIncrementalRelocatesTargetToSource for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a79843952b87de015697667f6ea5d92b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const SdfPathVector &amp;</type>
        <definition>PCP_API const SdfPathVector&amp; GetPathsToPrimsWithRelocates</definition>
        <argsstring>() const</argsstring>
        <name>GetPathsToPrimsWithRelocates</name>
        <briefdescription>
<para>Returns a list of paths to all prims across all layers in this layer stack that contained relocates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a1ab0ed64a3129a64975fdfeee285a785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void Apply</definition>
        <argsstring>(const PcpLayerStackChanges &amp;changes, PcpLifeboat *lifeboat)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_changes" kindref="compound">PcpLayerStackChanges</ref> &amp;</type>
          <declname>changes</declname>
        </param>
        <param>
          <type><ref refid="class_pcp_lifeboat" kindref="compound">PcpLifeboat</ref> *</type>
          <declname>lifeboat</declname>
        </param>
        <briefdescription>
<para>Apply the changes in <computeroutput>changes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This blows caches. It&apos;s up to the client to pull on those caches again as needed.</para>
<para>Objects that are no longer needed and would be destroyed are retained in <computeroutput>lifeboat</computeroutput> and won&apos;t be destroyed until <computeroutput>lifeboat</computeroutput> is itself destroyed. This gives the client control over the timing of the destruction of those objects. Clients may choose to pull on the caches before destroying <computeroutput>lifeboat</computeroutput>. That may cause the caches to again retain the objects, meaning they won&apos;t be destroyed when <computeroutput>lifeboat</computeroutput> is destroyed.</para>
<para>For example, if blowing a cache means an <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> is no longer needed then <computeroutput>lifeboat</computeroutput> will hold an SdfLayerRefPtr to that layer. The client can then pull on that cache, which could cause the cache to hold an SdfLayerRefPtr to the layer again. If so then destroying <computeroutput>changes</computeroutput> will not destroy the layer. In any case, we don&apos;t destroy the layer and then read it again. However, if the client destroys <computeroutput>lifeboat</computeroutput> before pulling on the cache then we would destroy the layer then read it again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_layer_stack_1a90eda5cd10aec4697ab1e72652bb0f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>PCP_API PcpMapExpression GetExpressionForRelocatesAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetExpressionForRelocatesAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> representing the relocations that affect namespace at and below the given path. </para>
        </briefdescription>
        <detaileddescription>
<para>The value of this expression will continue to track the effective relocations if they are changed later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/layerStack.h" line="212" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a stack of layers that contribute opinions to composition. </para>
    </briefdescription>
    <detaileddescription>
<para>Each <ref refid="class_pcp_layer_stack" kindref="compound">PcpLayerStack</ref> is identified by a <ref refid="class_pcp_layer_stack_identifier" kindref="compound">PcpLayerStackIdentifier</ref>. This identifier contains all of the parameters needed to construct a layer stack, such as the root layer, session layer, and path resolver context.</para>
<para>PcpLayerStacks are constructed and managed by a Pcp_LayerStackRegistry. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4730">
        <label>PcpLayerStack</label>
        <link refid="class_pcp_layer_stack"/>
        <childnode refid="4731" relation="public-inheritance">
        </childnode>
        <childnode refid="4732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4732">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4731">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4733">
        <label>PcpLayerStack</label>
        <link refid="class_pcp_layer_stack"/>
        <childnode refid="4734" relation="public-inheritance">
        </childnode>
        <childnode refid="4735" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4735">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4734">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/pcp/layerStack.h" line="67" column="1" bodyfile="pxr/usd/pcp/layerStack.h" bodystart="67" bodyend="331"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_pcp_layer_stack_1a77246f4a1b80e2eaea597c7028bff2bb" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_BlowLayers</name></member>
      <member refid="class_pcp_layer_stack_1a86e90245e3b5385642085232c4e8a988" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_BlowRelocations</name></member>
      <member refid="class_pcp_layer_stack_1aa5083decd9b4404b61762c4c5a931132" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_BuildLayerStack</name></member>
      <member refid="class_pcp_layer_stack_1a79054125717a28ff92dab2ae8a1faa62" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_Compute</name></member>
      <member refid="class_pcp_layer_stack_1a67904dc6f0921a0767baf1217fc7eb8e" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_expressionVariableDependencies</name></member>
      <member refid="class_pcp_layer_stack_1a00cbe69dacbe025767a5e47993641d4f" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_expressionVariables</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>PcpLayerStack</scope><name>_HasRemnant</name></member>
      <member refid="class_pcp_layer_stack_1a1b0fc5cfd96e2495eafd6e7e26e8c47a" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_identifier</name></member>
      <member refid="class_pcp_layer_stack_1ab3416c040344078025f316fe76c71685" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_incrementalRelocatesSourceToTarget</name></member>
      <member refid="class_pcp_layer_stack_1a2054023739f72545ef3a1cc4e30f845b" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_incrementalRelocatesTargetToSource</name></member>
      <member refid="class_pcp_layer_stack_1ae9e893a20be42280bdf96b3219e8cc9d" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_isUsd</name></member>
      <member refid="class_pcp_layer_stack_1a661408cfd61bf96d1797e51cb404d705" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_layers</name></member>
      <member refid="class_pcp_layer_stack_1aecf1943cb905f170ab67987f4366ecd1" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_layerTree</name></member>
      <member refid="class_pcp_layer_stack_1a66f940131be4626a3dc47fe8ca70f4d4" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_localErrors</name></member>
      <member refid="class_pcp_layer_stack_1aac88a879bb0b96c5d2ed913c9556ac63" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_mapFunctions</name></member>
      <member refid="class_pcp_layer_stack_1aff4efcac69b8a69c7b7ee319515d666d" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_mutedAssetPaths</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>PcpLayerStack</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>PcpLayerStack</scope><name>_Register</name></member>
      <member refid="class_pcp_layer_stack_1aad7014b56e9796a09c2640a4fa9ba169" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_registry</name></member>
      <member refid="class_pcp_layer_stack_1a0fda09a475ec8500358072d3b0e0d3b7" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_relocatesPrimPaths</name></member>
      <member refid="class_pcp_layer_stack_1a698f914f0c15e4232e267342877e4942" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_relocatesSourceToTarget</name></member>
      <member refid="class_pcp_layer_stack_1a42c3034cb678146136a966051247504a" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_relocatesTargetToSource</name></member>
      <member refid="class_pcp_layer_stack_1a5443a45566b2289c920df2ae4780d5c5" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_relocatesVariables</name></member>
      <member refid="class_pcp_layer_stack_1aeeddd5b6fea6603356c27115a76e4684" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_relocatesVariablesMutex</name></member>
      <member refid="class_pcp_layer_stack_1af8711cf464371fe438e41c74345279a5" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_RelocatesVarMap</name></member>
      <member refid="class_pcp_layer_stack_1aa00095d879d1b4f143e4841df578e955" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_sublayerSourceInfo</name></member>
      <member refid="class_pcp_layer_stack_1aa6b728342b8eaeb4a154edd887600ee5" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>_timeCodesPerSecond</name></member>
      <member refid="class_pcp_layer_stack_1a1ab0ed64a3129a64975fdfeee285a785" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>Apply</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>EnableNotification2</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetCurrentCount</name></member>
      <member refid="class_pcp_layer_stack_1a90eda5cd10aec4697ab1e72652bb0f17" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetExpressionForRelocatesAtPath</name></member>
      <member refid="class_pcp_layer_stack_1aaaf843209ac86fd1b5f7a16bd127299c" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetExpressionVariableDependencies</name></member>
      <member refid="class_pcp_layer_stack_1abf29e0e4886b2a46de73d6124a219dcd" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetExpressionVariables</name></member>
      <member refid="class_pcp_layer_stack_1a8956d0ed6ead5101525e38a1ba8cccc5" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetIdentifier</name></member>
      <member refid="class_pcp_layer_stack_1aa02662c5beda4ed70f012fa8e5988d93" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetIncrementalRelocatesSourceToTarget</name></member>
      <member refid="class_pcp_layer_stack_1a0be7ddcfb8f37aa9a6d15cc4bfe85783" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetIncrementalRelocatesTargetToSource</name></member>
      <member refid="class_pcp_layer_stack_1ab6cedb921391c575f9a71e09409ee561" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLayerOffsetForLayer</name></member>
      <member refid="class_pcp_layer_stack_1a0d75cd0507ab1a2182e69d9a32485031" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLayerOffsetForLayer</name></member>
      <member refid="class_pcp_layer_stack_1ac91129b5f95cfa59dcc4ef1187ddc6c7" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLayerOffsetForLayer</name></member>
      <member refid="class_pcp_layer_stack_1a329e159cbe7fec06f5b8866dc5f8bc71" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLayers</name></member>
      <member refid="class_pcp_layer_stack_1acc61aa1aa2e39703927f7a20d3e66ed5" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLayerTree</name></member>
      <member refid="class_pcp_layer_stack_1a91f65b03ae904c26c54630aef3eb53a3" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetLocalErrors</name></member>
      <member refid="class_pcp_layer_stack_1a90e845386e1b8d659b8732926e2bf13e" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetMutedLayers</name></member>
      <member refid="class_pcp_layer_stack_1a79843952b87de015697667f6ea5d92b7" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetPathsToPrimsWithRelocates</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetRefCount</name></member>
      <member refid="class_pcp_layer_stack_1add85038cfde3f19ccd2ebacefb18794c" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetRelocatesSourceToTarget</name></member>
      <member refid="class_pcp_layer_stack_1a5eeabe8bc4f253ec06ebeecfaefda3b5" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetRelocatesTargetToSource</name></member>
      <member refid="class_pcp_layer_stack_1a27a4bc5b7244d922972ba4655d5d83b7" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetSessionLayers</name></member>
      <member refid="class_pcp_layer_stack_1a1d68e97a39389e9c7b2273edeb387c6c" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetTimeCodesPerSecond</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_pcp_layer_stack_1a2371b08320a0d0ba86d35cf40d68168a" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>HasLayer</name></member>
      <member refid="class_pcp_layer_stack_1afc126e7ebb057901f37b1c1acc9494e5" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>HasLayer</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>IsUnique</name></member>
      <member refid="class_pcp_layer_stack_1a85ce5aa05912d627285e53cd6f17e4da" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>PcpLayerStack</scope><name>operator=</name></member>
      <member refid="class_pcp_layer_stack_1a0693215874b49aeaaca41324e7a512d5" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>PcpCache</name></member>
      <member refid="class_pcp_layer_stack_1a18dfbc2317ef65972934a38b8c14f88c" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>PcpLayerStack</name></member>
      <member refid="class_pcp_layer_stack_1a3a6806adb9643a0b704d13532ff01ba2" prot="private" virt="non-virtual"><scope>PcpLayerStack</scope><name>PcpLayerStack</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>PcpLayerStack</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_pcp_layer_stack_1a6265bad3d077c145cc224361c53c3b78" prot="public" virt="virtual"><scope>PcpLayerStack</scope><name>~PcpLayerStack</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>PcpLayerStack</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>PcpLayerStack</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
