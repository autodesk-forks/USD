<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_prim_iterator" kind="class" language="C++" prot="public">
    <compoundname>PcpPrimIterator</compoundname>
    <includes refid="usd_2pcp_2iterator_8h" local="no">iterator.h</includes>
    <innerclass refid="class_pcp_prim_iterator_1_1___ptr_proxy" prot="private">PcpPrimIterator::_PtrProxy</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_prim_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="213" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_prim_iterator_1a092724127b5375a43cac391a3b9a493f" prot="public" static="no">
        <type><ref refid="class_sdf_site" kindref="compound">SdfSite</ref></type>
        <definition>using value_type =  SdfSite</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="214" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_prim_iterator_1a4410d793595ec613d9e0f877d3b2a7c7" prot="public" static="no">
        <type><ref refid="class_sdf_site" kindref="compound">SdfSite</ref></type>
        <definition>using reference =  SdfSite</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="215" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_prim_iterator_1a43aae23301e40e6834a080a920395b72" prot="public" static="no">
        <type>_PtrProxy</type>
        <definition>using pointer =  _PtrProxy</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="216" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_prim_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="217" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_prim_iterator_1a939186edb69c6334524df67d9175c0b6" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> *</type>
        <definition>const PcpPrimIndex* _primIndex</definition>
        <argsstring></argsstring>
        <name>_primIndex</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="336" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_prim_iterator_1a29da2ac74d983de0ddeb219cf0752f69" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _pos</definition>
        <argsstring></argsstring>
        <name>_pos</name>
        <initializer>= <ref refid="usd_2pcp_2types_8h_1a47d33cb3fadc3838de011adec4459efc" kindref="member">PCP_INVALID_INDEX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="337" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_prim_iterator_1a4ffe9332e39451ee640efd9d04cce317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPrimIterator</definition>
        <argsstring>()</argsstring>
        <name>PcpPrimIterator</name>
        <briefdescription>
<para>Constructs an invalid iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ae0bed5bcb376c3d22864b30bca6a6142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPrimIterator</definition>
        <argsstring>(const PcpPrimIndex *primIndex, size_t pos)</argsstring>
        <name>PcpPrimIterator</name>
        <param>
          <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> *</type>
          <declname>primIndex</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Constructs a prim iterator beginning at position <computeroutput>pos</computeroutput> in the prim stack of prim index <computeroutput>primIndex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1af47d37f6e9dc3e0593994ff4274967c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetNode</definition>
        <argsstring>() const</argsstring>
        <name>GetNode</name>
        <briefdescription>
<para>Returns the PcpNode from which the current prim originated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a496c129b2d06971adb96bbd3f3a2e082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API Pcp_SdSiteRef</type>
        <definition>PCP_API Pcp_SdSiteRef _GetSiteRef</definition>
        <argsstring>() const</argsstring>
        <name>_GetSiteRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_site" kindref="compound">reference</ref></type>
        <definition>reference operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="237" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="238" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_site" kindref="compound">reference</ref></type>
        <definition>reference operator[]</definition>
        <argsstring>(const difference_type index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const difference_type</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="239" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1af7ed4deadc5d6232803dbf0829b0ca53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type operator-</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="245" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a24cc82629eaa835444cb7e62baabbf1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
        <definition>PcpPrimIterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="249" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a3c2b9d88fd12d9fde43606f6fc27d167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
        <definition>PcpPrimIterator&amp; operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="254" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1afdf729ea45e46a1b9269505003a608b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref></type>
        <definition>PcpPrimIterator operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="259" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a5827c8425a377562090c72a450fccd42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref></type>
        <definition>PcpPrimIterator operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="265" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a857dbe83906c407248ee2b9c7f065702" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref></type>
        <definition>PcpPrimIterator operator+</definition>
        <argsstring>(const difference_type increment) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="271" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ac6bfff06290200c91ba1a3815909b18e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref></type>
        <definition>PcpPrimIterator operator-</definition>
        <argsstring>(const difference_type decrement) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="277" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ab8f6685f496228b3bd11e89817d82ff8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
        <definition>PcpPrimIterator&amp; operator+=</definition>
        <argsstring>(const difference_type increment)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="283" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a2da474cd16e8336a53a22162d991499e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
        <definition>PcpPrimIterator&amp; operator-=</definition>
        <argsstring>(const difference_type decrement)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="288" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1acbe0d2517de675f4e8e8d16df124adf1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="293" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a88d6bde1331867c3106bb49425fac029" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="297" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="297" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a5f37fc4025312f7908d7fa45c65331b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="301" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1acb8f95c24b7866526cd4e7914ac395f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="306" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a37d84cb287f192f9bab4207c149674f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="311" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ad14c09d59f6213d206f925294d663bc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="316" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="316" bodyend="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_prim_iterator_1adf65d7ed4832d910b7f592f264eb1b45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a529069fb78e22fe917d43eccb34dd905" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void decrement</definition>
        <argsstring>()</argsstring>
        <name>decrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ad2db8112f76d83435bb1334f0a65b8d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void advance</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>advance</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1ae4d61c463dabe0dc1252f14b27dd8af6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API difference_type</type>
        <definition>PCP_API difference_type distance_to</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>distance_to</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a075d2196344269ddcc5f78299fd6b896" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool equal</definition>
        <argsstring>(const PcpPrimIterator &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="class_pcp_prim_iterator" kindref="compound">PcpPrimIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_prim_iterator_1a4444c62425ef0ab27245d7556234efc7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_site" kindref="compound">reference</ref></type>
        <definition>PCP_API reference dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object used to iterate over prim specs in the prim index graph in strong-to-weak order. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/pcp/iterator.h" line="203" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="202" bodyend="338"/>
    <listofallmembers>
      <member refid="class_pcp_prim_iterator_1a496c129b2d06971adb96bbd3f3a2e082" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>_GetSiteRef</name></member>
      <member refid="class_pcp_prim_iterator_1a29da2ac74d983de0ddeb219cf0752f69" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>_pos</name></member>
      <member refid="class_pcp_prim_iterator_1a939186edb69c6334524df67d9175c0b6" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>_primIndex</name></member>
      <member refid="class_pcp_prim_iterator_1ad2db8112f76d83435bb1334f0a65b8d0" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>advance</name></member>
      <member refid="class_pcp_prim_iterator_1a529069fb78e22fe917d43eccb34dd905" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>decrement</name></member>
      <member refid="class_pcp_prim_iterator_1a4444c62425ef0ab27245d7556234efc7" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>dereference</name></member>
      <member refid="class_pcp_prim_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>difference_type</name></member>
      <member refid="class_pcp_prim_iterator_1ae4d61c463dabe0dc1252f14b27dd8af6" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>distance_to</name></member>
      <member refid="class_pcp_prim_iterator_1a075d2196344269ddcc5f78299fd6b896" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>equal</name></member>
      <member refid="class_pcp_prim_iterator_1af47d37f6e9dc3e0593994ff4274967c5" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>GetNode</name></member>
      <member refid="class_pcp_prim_iterator_1adf65d7ed4832d910b7f592f264eb1b45" prot="private" virt="non-virtual"><scope>PcpPrimIterator</scope><name>increment</name></member>
      <member refid="class_pcp_prim_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>iterator_category</name></member>
      <member refid="class_pcp_prim_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator *</name></member>
      <member refid="class_pcp_prim_iterator_1a88d6bde1331867c3106bb49425fac029" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator!=</name></member>
      <member refid="class_pcp_prim_iterator_1a857dbe83906c407248ee2b9c7f065702" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator+</name></member>
      <member refid="class_pcp_prim_iterator_1a24cc82629eaa835444cb7e62baabbf1b" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_prim_iterator_1afdf729ea45e46a1b9269505003a608b6" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_prim_iterator_1ab8f6685f496228b3bd11e89817d82ff8" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator+=</name></member>
      <member refid="class_pcp_prim_iterator_1af7ed4deadc5d6232803dbf0829b0ca53" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_prim_iterator_1ac6bfff06290200c91ba1a3815909b18e" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_prim_iterator_1a3c2b9d88fd12d9fde43606f6fc27d167" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_prim_iterator_1a5827c8425a377562090c72a450fccd42" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_prim_iterator_1a2da474cd16e8336a53a22162d991499e" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator-=</name></member>
      <member refid="class_pcp_prim_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator-&gt;</name></member>
      <member refid="class_pcp_prim_iterator_1a5f37fc4025312f7908d7fa45c65331b6" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator&lt;</name></member>
      <member refid="class_pcp_prim_iterator_1acb8f95c24b7866526cd4e7914ac395f6" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator&lt;=</name></member>
      <member refid="class_pcp_prim_iterator_1acbe0d2517de675f4e8e8d16df124adf1" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator==</name></member>
      <member refid="class_pcp_prim_iterator_1a37d84cb287f192f9bab4207c149674f5" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator&gt;</name></member>
      <member refid="class_pcp_prim_iterator_1ad14c09d59f6213d206f925294d663bc4" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator&gt;=</name></member>
      <member refid="class_pcp_prim_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>operator[]</name></member>
      <member refid="class_pcp_prim_iterator_1a4ffe9332e39451ee640efd9d04cce317" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>PcpPrimIterator</name></member>
      <member refid="class_pcp_prim_iterator_1ae0bed5bcb376c3d22864b30bca6a6142" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>PcpPrimIterator</name></member>
      <member refid="class_pcp_prim_iterator_1a43aae23301e40e6834a080a920395b72" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>pointer</name></member>
      <member refid="class_pcp_prim_iterator_1a4410d793595ec613d9e0f877d3b2a7c7" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>reference</name></member>
      <member refid="class_pcp_prim_iterator_1a092724127b5375a43cac391a3b9a493f" prot="public" virt="non-virtual"><scope>PcpPrimIterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
