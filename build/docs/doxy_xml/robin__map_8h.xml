<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="robin__map_8h" kind="file" language="C++">
    <compoundname>robin_map.h</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">functional</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes refid="robin__hash_8h" local="yes">robin_hash.h</includes>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includedby refid="predicate_library_8h" local="yes">pxr/usd/sdf/predicateLibrary.h</includedby>
    <incdepgraph>
      <node id="68190">
        <label>functional</label>
      </node>
      <node id="68202">
        <label>limits</label>
      </node>
      <node id="68201">
        <label>iterator</label>
      </node>
      <node id="68199">
        <label>cstdint</label>
      </node>
      <node id="68195">
        <label>robin_hash.h</label>
        <link refid="robin__hash_8h_source"/>
        <childnode refid="68196" relation="include">
        </childnode>
        <childnode refid="68197" relation="include">
        </childnode>
        <childnode refid="68198" relation="include">
        </childnode>
        <childnode refid="68189" relation="include">
        </childnode>
        <childnode refid="68199" relation="include">
        </childnode>
        <childnode refid="68200" relation="include">
        </childnode>
        <childnode refid="68201" relation="include">
        </childnode>
        <childnode refid="68202" relation="include">
        </childnode>
        <childnode refid="68192" relation="include">
        </childnode>
        <childnode refid="68203" relation="include">
        </childnode>
        <childnode refid="68204" relation="include">
        </childnode>
        <childnode refid="68193" relation="include">
        </childnode>
        <childnode refid="68194" relation="include">
        </childnode>
        <childnode refid="68205" relation="include">
        </childnode>
        <childnode refid="68206" relation="include">
        </childnode>
        <childnode refid="68210" relation="include">
        </childnode>
      </node>
      <node id="68198">
        <label>cmath</label>
      </node>
      <node id="68197">
        <label>cassert</label>
      </node>
      <node id="68203">
        <label>stdexcept</label>
      </node>
      <node id="68210">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="68200">
        <label>exception</label>
      </node>
      <node id="68209">
        <label>ratio</label>
      </node>
      <node id="68188">
        <label>pxr/base/tf/pxrTslRobinMap/robin_map.h</label>
        <link refid="robin__map_8h"/>
        <childnode refid="68189" relation="include">
        </childnode>
        <childnode refid="68190" relation="include">
        </childnode>
        <childnode refid="68191" relation="include">
        </childnode>
        <childnode refid="68192" relation="include">
        </childnode>
        <childnode refid="68193" relation="include">
        </childnode>
        <childnode refid="68194" relation="include">
        </childnode>
        <childnode refid="68195" relation="include">
        </childnode>
        <childnode refid="68210" relation="include">
        </childnode>
      </node>
      <node id="68204">
        <label>tuple</label>
      </node>
      <node id="68205">
        <label>vector</label>
      </node>
      <node id="68194">
        <label>utility</label>
      </node>
      <node id="68207">
        <label>array</label>
      </node>
      <node id="68206">
        <label>robin_growth_policy.h</label>
        <link refid="robin__growth__policy_8h_source"/>
        <childnode refid="68196" relation="include">
        </childnode>
        <childnode refid="68207" relation="include">
        </childnode>
        <childnode refid="68208" relation="include">
        </childnode>
        <childnode refid="68198" relation="include">
        </childnode>
        <childnode refid="68189" relation="include">
        </childnode>
        <childnode refid="68199" relation="include">
        </childnode>
        <childnode refid="68201" relation="include">
        </childnode>
        <childnode refid="68202" relation="include">
        </childnode>
        <childnode refid="68209" relation="include">
        </childnode>
        <childnode refid="68203" relation="include">
        </childnode>
        <childnode refid="68210" relation="include">
        </childnode>
        <childnode refid="68211" relation="include">
        </childnode>
      </node>
      <node id="68211">
        <label>iostream</label>
      </node>
      <node id="68189">
        <label>cstddef</label>
      </node>
      <node id="68208">
        <label>climits</label>
      </node>
      <node id="68193">
        <label>type_traits</label>
      </node>
      <node id="68196">
        <label>algorithm</label>
      </node>
      <node id="68192">
        <label>memory</label>
      </node>
      <node id="68191">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="68220">
        <label>pxr/usd/usdLux/diskLight.h</label>
        <link refid="disk_light_8h"/>
      </node>
      <node id="68252">
        <label>pxr/usdImaging/usdImaging/hermiteCurvesAdapter.h</label>
        <link refid="hermite_curves_adapter_8h"/>
      </node>
      <node id="68231">
        <label>pxr/usd/usdPhysics/collisionGroup.h</label>
        <link refid="collision_group_8h"/>
      </node>
      <node id="68213">
        <label>pxr/usd/sdf/predicateLibrary.h</label>
        <link refid="predicate_library_8h_source"/>
        <childnode refid="68214" relation="include">
        </childnode>
        <childnode refid="68291" relation="include">
        </childnode>
        <childnode refid="68292" relation="include">
        </childnode>
      </node>
      <node id="68225">
        <label>pxr/usd/usdLux/distantLight.h</label>
        <link refid="distant_light_8h"/>
      </node>
      <node id="68273">
        <label>pxr/usdImaging/usdImaging/lightFilterAdapter.h</label>
        <link refid="light_filter_adapter_8h"/>
        <childnode refid="68274" relation="include">
        </childnode>
        <childnode refid="68275" relation="include">
        </childnode>
        <childnode refid="68276" relation="include">
        </childnode>
        <childnode refid="68277" relation="include">
        </childnode>
      </node>
      <node id="68271">
        <label>pxr/usdImaging/usdImaging/rectLightAdapter.h</label>
        <link refid="rect_light_adapter_8h"/>
      </node>
      <node id="68292">
        <label>pxr/usd/usd/collectionPredicateLibrary.h</label>
        <link refid="collection_predicate_library_8h"/>
      </node>
      <node id="68262">
        <label>pxr/usdImaging/usdImaging/lightAdapter.h</label>
        <link refid="light_adapter_8h"/>
        <childnode refid="68263" relation="include">
        </childnode>
        <childnode refid="68264" relation="include">
        </childnode>
        <childnode refid="68265" relation="include">
        </childnode>
        <childnode refid="68266" relation="include">
        </childnode>
        <childnode refid="68267" relation="include">
        </childnode>
        <childnode refid="68268" relation="include">
        </childnode>
        <childnode refid="68269" relation="include">
        </childnode>
        <childnode refid="68270" relation="include">
        </childnode>
        <childnode refid="68271" relation="include">
        </childnode>
        <childnode refid="68272" relation="include">
        </childnode>
      </node>
      <node id="68233">
        <label>pxr/usd/usdRi/renderPassAPI.h</label>
        <link refid="render_pass_a_p_i_8h"/>
      </node>
      <node id="68257">
        <label>pxr/usdImaging/usdImaging/pointInstancerAdapter.h</label>
        <link refid="point_instancer_adapter_8h"/>
      </node>
      <node id="68216">
        <label>pxr/usd/usd/collectionAPI.h</label>
        <link refid="collection_a_p_i_8h"/>
        <childnode refid="68217" relation="include">
        </childnode>
        <childnode refid="68229" relation="include">
        </childnode>
        <childnode refid="68231" relation="include">
        </childnode>
        <childnode refid="68232" relation="include">
        </childnode>
        <childnode refid="68233" relation="include">
        </childnode>
        <childnode refid="68234" relation="include">
        </childnode>
        <childnode refid="68289" relation="include">
        </childnode>
        <childnode refid="68290" relation="include">
        </childnode>
      </node>
      <node id="68274">
        <label>pxr/usdImaging/usdImaging/pluginLightFilterAdapter.h</label>
        <link refid="plugin_light_filter_adapter_8h"/>
      </node>
      <node id="68269">
        <label>pxr/usdImaging/usdImaging/pluginLightAdapter.h</label>
        <link refid="plugin_light_adapter_8h"/>
      </node>
      <node id="68263">
        <label>pxr/usdImaging/usdImaging/cylinderLightAdapter.h</label>
        <link refid="cylinder_light_adapter_8h"/>
      </node>
      <node id="68285">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrIntegratorAdapter.h</label>
        <link refid="pxr_integrator_adapter_8h"/>
      </node>
      <node id="68228">
        <label>pxr/usd/usdLux/geometryLight.h</label>
        <link refid="geometry_light_8h"/>
      </node>
      <node id="68289">
        <label>pxr/usd/usdUtils/authoring.h</label>
        <link refid="authoring_8h"/>
      </node>
      <node id="68247">
        <label>pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h</label>
        <link refid="openvdb_asset_adapter_8h_source"/>
      </node>
      <node id="68217">
        <label>pxr/usd/usdLux/lightAPI.h</label>
        <link refid="light_a_p_i_8h"/>
        <childnode refid="68218" relation="include">
        </childnode>
        <childnode refid="68224" relation="include">
        </childnode>
      </node>
      <node id="68256">
        <label>pxr/usdImaging/usdImaging/planeAdapter.h</label>
        <link refid="plane_adapter_8h"/>
      </node>
      <node id="68222">
        <label>pxr/usd/usdLux/rectLight.h</label>
        <link refid="rect_light_8h"/>
      </node>
      <node id="68265">
        <label>pxr/usdImaging/usdImaging/distantLightAdapter.h</label>
        <link refid="distant_light_adapter_8h"/>
      </node>
      <node id="68280">
        <label>pxr/usdImaging/usdImaging/renderSettingsAdapter.h</label>
        <link refid="render_settings_adapter_8h"/>
      </node>
      <node id="68268">
        <label>pxr/usdImaging/usdImaging/geometryLightAdapter.h</label>
        <link refid="geometry_light_adapter_8h"/>
      </node>
      <node id="68215">
        <label>pxr/usd/usd/collectionMembershipQuery.h</label>
        <link refid="collection_membership_query_8h"/>
        <childnode refid="68216" relation="include">
        </childnode>
      </node>
      <node id="68218">
        <label>pxr/usd/usdLux/boundableLightBase.h</label>
        <link refid="boundable_light_base_8h"/>
        <childnode refid="68219" relation="include">
        </childnode>
        <childnode refid="68220" relation="include">
        </childnode>
        <childnode refid="68221" relation="include">
        </childnode>
        <childnode refid="68222" relation="include">
        </childnode>
        <childnode refid="68223" relation="include">
        </childnode>
      </node>
      <node id="68226">
        <label>pxr/usd/usdLux/domeLight.h</label>
        <link refid="dome_light_8h"/>
      </node>
      <node id="68230">
        <label>pxr/usd/usdLux/pluginLightFilter.h</label>
        <link refid="plugin_light_filter_8h"/>
      </node>
      <node id="68290">
        <label>pxr/usdImaging/usdImaging/collectionCache.h</label>
        <link refid="collection_cache_8h"/>
        <childnode refid="68236" relation="include">
        </childnode>
        <childnode refid="68239" relation="include">
        </childnode>
      </node>
      <node id="68284">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrDisplayFilterAdapter.h</label>
        <link refid="pxr_display_filter_adapter_8h"/>
      </node>
      <node id="68241">
        <label>pxr/usdImaging/usdImaging/cameraAdapter.h</label>
        <link refid="camera_adapter_8h"/>
      </node>
      <node id="68272">
        <label>pxr/usdImaging/usdImaging/sphereLightAdapter.h</label>
        <link refid="sphere_light_adapter_8h"/>
      </node>
      <node id="68240">
        <label>pxr/usdImaging/usdImaging/basisCurvesAdapter.h</label>
        <link refid="basis_curves_adapter_8h"/>
      </node>
      <node id="68223">
        <label>pxr/usd/usdLux/sphereLight.h</label>
        <link refid="sphere_light_8h"/>
      </node>
      <node id="68253">
        <label>pxr/usdImaging/usdImaging/meshAdapter.h</label>
        <link refid="mesh_adapter_8h"/>
      </node>
      <node id="68243">
        <label>pxr/usdImaging/usdImaging/cubeAdapter.h</label>
        <link refid="cube_adapter_8h"/>
      </node>
      <node id="68278">
        <label>pxr/usdImaging/usdImaging/materialAdapter.h</label>
        <link refid="material_adapter_8h"/>
      </node>
      <node id="68219">
        <label>pxr/usd/usdLux/cylinderLight.h</label>
        <link refid="cylinder_light_8h"/>
      </node>
      <node id="68250">
        <label>pxr/usdImaging/usdImaging/coneAdapter.h</label>
        <link refid="cone_adapter_8h"/>
      </node>
      <node id="68261">
        <label>pxr/usdImaging/usdImaging/instanceAdapter.h</label>
        <link refid="instance_adapter_8h"/>
      </node>
      <node id="68214">
        <label>pxr/usd/sdf/pathExpressionEval.h</label>
        <link refid="path_expression_eval_8h_source"/>
        <childnode refid="68215" relation="include">
        </childnode>
      </node>
      <node id="68227">
        <label>pxr/usd/usdLux/domeLight_1.h</label>
        <link refid="dome_light__1_8h"/>
      </node>
      <node id="68270">
        <label>pxr/usdImaging/usdImaging/portalLightAdapter.h</label>
        <link refid="portal_light_adapter_8h"/>
      </node>
      <node id="68264">
        <label>pxr/usdImaging/usdImaging/diskLightAdapter.h</label>
        <link refid="disk_light_adapter_8h"/>
      </node>
      <node id="68237">
        <label>pxr/usdImaging/usdImaging/indexProxy.h</label>
        <link refid="index_proxy_8h"/>
      </node>
      <node id="68229">
        <label>pxr/usd/usdLux/lightFilter.h</label>
        <link refid="usd_2usd_lux_2light_filter_8h"/>
        <childnode refid="68230" relation="include">
        </childnode>
      </node>
      <node id="68260">
        <label>pxr/usdImaging/usdImaging/volumeAdapter.h</label>
        <link refid="volume_adapter_8h"/>
      </node>
      <node id="68245">
        <label>pxr/usdImaging/usdImaging/fieldAdapter.h</label>
        <link refid="field_adapter_8h"/>
        <childnode refid="68246" relation="include">
        </childnode>
        <childnode refid="68247" relation="include">
        </childnode>
      </node>
      <node id="68258">
        <label>pxr/usdImaging/usdImaging/pointsAdapter.h</label>
        <link refid="points_adapter_8h"/>
      </node>
      <node id="68212">
        <label>pxr/base/tf/pxrTslRobinMap/robin_map.h</label>
        <link refid="robin__map_8h"/>
        <childnode refid="68213" relation="include">
        </childnode>
      </node>
      <node id="68239">
        <label>pxr/usdImaging/usdImaging/primAdapter.h</label>
        <link refid="prim_adapter_8h"/>
        <childnode refid="68240" relation="include">
        </childnode>
        <childnode refid="68241" relation="include">
        </childnode>
        <childnode refid="68242" relation="include">
        </childnode>
        <childnode refid="68243" relation="include">
        </childnode>
        <childnode refid="68244" relation="include">
        </childnode>
        <childnode refid="68245" relation="include">
        </childnode>
        <childnode refid="68248" relation="include">
        </childnode>
        <childnode refid="68252" relation="include">
        </childnode>
        <childnode refid="68261" relation="include">
        </childnode>
        <childnode refid="68262" relation="include">
        </childnode>
        <childnode refid="68273" relation="include">
        </childnode>
        <childnode refid="68278" relation="include">
        </childnode>
        <childnode refid="68253" relation="include">
        </childnode>
        <childnode refid="68254" relation="include">
        </childnode>
        <childnode refid="68255" relation="include">
        </childnode>
        <childnode refid="68257" relation="include">
        </childnode>
        <childnode refid="68258" relation="include">
        </childnode>
        <childnode refid="68279" relation="include">
        </childnode>
        <childnode refid="68280" relation="include">
        </childnode>
        <childnode refid="68281" relation="include">
        </childnode>
        <childnode refid="68282" relation="include">
        </childnode>
        <childnode refid="68259" relation="include">
        </childnode>
        <childnode refid="68260" relation="include">
        </childnode>
        <childnode refid="68283" relation="include">
        </childnode>
        <childnode refid="68284" relation="include">
        </childnode>
        <childnode refid="68285" relation="include">
        </childnode>
        <childnode refid="68286" relation="include">
        </childnode>
        <childnode refid="68287" relation="include">
        </childnode>
        <childnode refid="68288" relation="include">
        </childnode>
      </node>
      <node id="68283">
        <label>pxr/usdImaging/usdProcImaging/generativeProceduralAdapter.h</label>
        <link refid="generative_procedural_adapter_8h_source"/>
      </node>
      <node id="68246">
        <label>pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h</label>
        <link refid="field3d_asset_adapter_8h_source"/>
      </node>
      <node id="68238">
        <label>pxr/usdImaging/usdImaging/unitTestHelper.h</label>
        <link refid="usd_imaging_2usd_imaging_2unit_test_helper_8h"/>
      </node>
      <node id="68275">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrBarnLightFilterAdapter.h</label>
        <link refid="pxr_barn_light_filter_adapter_8h"/>
      </node>
      <node id="68281">
        <label>pxr/usdImaging/usdImaging/renderVarAdapter.h</label>
        <link refid="render_var_adapter_8h"/>
      </node>
      <node id="68288">
        <label>pxr/usdImaging/usdSkelImaging/skelRootAdapter.h</label>
        <link refid="skel_root_adapter_8h_source"/>
      </node>
      <node id="68276">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrIntMultLightFilterAdapter.h</label>
        <link refid="pxr_int_mult_light_filter_adapter_8h"/>
      </node>
      <node id="68259">
        <label>pxr/usdImaging/usdImaging/sphereAdapter.h</label>
        <link refid="sphere_adapter_8h"/>
      </node>
      <node id="68249">
        <label>pxr/usdImaging/usdImaging/capsuleAdapter.h</label>
        <link refid="capsule_adapter_8h"/>
      </node>
      <node id="68242">
        <label>pxr/usdImaging/usdImaging/coordSysAdapter.h</label>
        <link refid="coord_sys_adapter_8h"/>
      </node>
      <node id="68282">
        <label>pxr/usdImaging/usdImaging/representedByAncestorPrimAdapter.h</label>
        <link refid="represented_by_ancestor_prim_adapter_8h"/>
        <childnode refid="68278" relation="include">
        </childnode>
      </node>
      <node id="68277">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrRodLightFilterAdapter.h</label>
        <link refid="pxr_rod_light_filter_adapter_8h"/>
      </node>
      <node id="68291">
        <label>pxr/usd/sdf/predicateProgram.h</label>
        <link refid="predicate_program_8h_source"/>
        <childnode refid="68214" relation="include">
        </childnode>
      </node>
      <node id="68221">
        <label>pxr/usd/usdLux/portalLight.h</label>
        <link refid="portal_light_8h"/>
      </node>
      <node id="68267">
        <label>pxr/usdImaging/usdImaging/domeLightAdapter.h</label>
        <link refid="dome_light_adapter_8h"/>
      </node>
      <node id="68236">
        <label>pxr/usdImaging/usdImaging/delegate.h</label>
        <link refid="delegate_8h"/>
        <childnode refid="68237" relation="include">
        </childnode>
        <childnode refid="68238" relation="include">
        </childnode>
      </node>
      <node id="68255">
        <label>pxr/usdImaging/usdImaging/nurbsPatchAdapter.h</label>
        <link refid="nurbs_patch_adapter_8h"/>
      </node>
      <node id="68234">
        <label>pxr/usd/usdShade/materialBindingAPI.h</label>
        <link refid="material_binding_a_p_i_8h"/>
        <childnode refid="68235" relation="include">
        </childnode>
      </node>
      <node id="68254">
        <label>pxr/usdImaging/usdImaging/nurbsCurvesAdapter.h</label>
        <link refid="nurbs_curves_adapter_8h"/>
      </node>
      <node id="68279">
        <label>pxr/usdImaging/usdImaging/renderProductAdapter.h</label>
        <link refid="render_product_adapter_8h"/>
      </node>
      <node id="68266">
        <label>pxr/usdImaging/usdImaging/domeLight_1Adapter.h</label>
        <link refid="dome_light__1_adapter_8h"/>
      </node>
      <node id="68235">
        <label>pxr/usdImaging/usdImaging/resolvedAttributeCache.h</label>
        <link refid="resolved_attribute_cache_8h"/>
        <childnode refid="68236" relation="include">
        </childnode>
        <childnode refid="68239" relation="include">
        </childnode>
      </node>
      <node id="68248">
        <label>pxr/usdImaging/usdImaging/gprimAdapter.h</label>
        <link refid="gprim_adapter_8h"/>
        <childnode refid="68240" relation="include">
        </childnode>
        <childnode refid="68249" relation="include">
        </childnode>
        <childnode refid="68250" relation="include">
        </childnode>
        <childnode refid="68243" relation="include">
        </childnode>
        <childnode refid="68251" relation="include">
        </childnode>
        <childnode refid="68252" relation="include">
        </childnode>
        <childnode refid="68253" relation="include">
        </childnode>
        <childnode refid="68254" relation="include">
        </childnode>
        <childnode refid="68255" relation="include">
        </childnode>
        <childnode refid="68256" relation="include">
        </childnode>
        <childnode refid="68257" relation="include">
        </childnode>
        <childnode refid="68258" relation="include">
        </childnode>
        <childnode refid="68259" relation="include">
        </childnode>
        <childnode refid="68260" relation="include">
        </childnode>
      </node>
      <node id="68224">
        <label>pxr/usd/usdLux/nonboundableLightBase.h</label>
        <link refid="nonboundable_light_base_8h"/>
        <childnode refid="68225" relation="include">
        </childnode>
        <childnode refid="68226" relation="include">
        </childnode>
        <childnode refid="68227" relation="include">
        </childnode>
        <childnode refid="68228" relation="include">
        </childnode>
      </node>
      <node id="68251">
        <label>pxr/usdImaging/usdImaging/cylinderAdapter.h</label>
        <link refid="cylinder_adapter_8h"/>
      </node>
      <node id="68287">
        <label>pxr/usdImaging/usdSkelImaging/skeletonAdapter.h</label>
        <link refid="skeleton_adapter_8h_source"/>
      </node>
      <node id="68244">
        <label>pxr/usdImaging/usdImaging/drawModeAdapter.h</label>
        <link refid="draw_mode_adapter_8h_source"/>
      </node>
      <node id="68232">
        <label>pxr/usd/usdRender/pass.h</label>
        <link refid="pass_8h"/>
      </node>
      <node id="68286">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrSampleFilterAdapter.h</label>
        <link refid="pxr_sample_filter_adapter_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classpxr__tsl_1_1robin__map" prot="public">pxr_tsl::robin_map</innerclass>
    <innerclass refid="classpxr__tsl_1_1robin__map_1_1_key_select" prot="private">pxr_tsl::robin_map::KeySelect</innerclass>
    <innerclass refid="classpxr__tsl_1_1robin__map_1_1_value_select" prot="private">pxr_tsl::robin_map::ValueSelect</innerclass>
    <innernamespace refid="namespacepxr__tsl">pxr_tsl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>PXR_TSL_ROBIN_MAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_TSL_ROBIN_MAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;robin_hash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pixar<sp/>modification,<sp/>modify<sp/>namespace<sp/>for<sp/>isolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepxr__tsl" kindref="compound">pxr_tsl</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>std::hash&lt;Key&gt;,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KeyEqual<sp/>=<sp/>std::equal_to&lt;Key&gt;,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;std::pair&lt;Key,<sp/>T&gt;&gt;,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StoreHash<sp/>=<sp/>false,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>GrowthPolicy<sp/>=<sp/>pxr_tsl::rh::power_of_two_growth_policy&lt;2&gt;&gt;</highlight></codeline>
<codeline lineno="96" refid="classpxr__tsl_1_1robin__map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_is_transparent<sp/>=<sp/>pxr_tsl::detail_robin_hash::has_is_transparent&lt;U&gt;;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KeySelect<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>key_type<sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Key,<sp/>T&gt;&amp;<sp/>key_value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_value.first;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>key_type&amp;<sp/>operator()(std::pair&lt;Key,<sp/>T&gt;&amp;<sp/>key_value)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_value.first;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueSelect<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Key,<sp/>T&gt;&amp;<sp/>key_value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_value.second;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type&amp;<sp/>operator()(std::pair&lt;Key,<sp/>T&gt;&amp;<sp/>key_value)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_value.second;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash" kindref="compound">ht</ref><sp/>=<sp/><ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash" kindref="compound">detail_robin_hash::robin_hash&lt;std::pair&lt;Key, T&gt;</ref>,<sp/>KeySelect,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueSelect,<sp/>Hash,<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Allocator,<sp/>StoreHash,<sp/>GrowthPolicy&gt;;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>key_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::key_type;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>mapped_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::value_type;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::size_type;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::difference_type;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>hasher<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::hasher;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>key_equal<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::key_equal;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>allocator_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::allocator_type;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::reference;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::const_reference;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::pointer;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_pointer<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::const_pointer;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::iterator;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ht::const_iterator;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Constructors</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>()<sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(ht::DEFAULT_INIT_BUCKETS_SIZE)<sp/>{}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(size_type<sp/>bucket_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash<sp/>=<sp/>Hash(),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyEqual&amp;<sp/>equal<sp/>=<sp/>KeyEqual(),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_ht(bucket_count,<sp/>hash,<sp/>equal,<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(size_type<sp/>bucket_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(bucket_count,<sp/>Hash(),<sp/>KeyEqual(),<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(size_type<sp/>bucket_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(bucket_count,<sp/>hash,<sp/>KeyEqual(),<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(ht::DEFAULT_INIT_BUCKETS_SIZE,<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(InputIt<sp/>first,<sp/>InputIt<sp/>last,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>bucket_count<sp/>=<sp/>ht::DEFAULT_INIT_BUCKETS_SIZE,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash<sp/>=<sp/>Hash(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyEqual&amp;<sp/>equal<sp/>=<sp/>KeyEqual(),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(bucket_count,<sp/>hash,<sp/>equal,<sp/>alloc)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>insert(first,<sp/>last);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(InputIt<sp/>first,<sp/>InputIt<sp/>last,<sp/>size_type<sp/>bucket_count,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(first,<sp/>last,<sp/>bucket_count,<sp/>Hash(),<sp/>KeyEqual(),<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(InputIt<sp/>first,<sp/>InputIt<sp/>last,<sp/>size_type<sp/>bucket_count,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(first,<sp/>last,<sp/>bucket_count,<sp/>hash,<sp/>KeyEqual(),<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(std::initializer_list&lt;value_type&gt;<sp/>init,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>bucket_count<sp/>=<sp/>ht::DEFAULT_INIT_BUCKETS_SIZE,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash<sp/>=<sp/>Hash(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyEqual&amp;<sp/>equal<sp/>=<sp/>KeyEqual(),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc<sp/>=<sp/>Allocator())</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(init.begin(),<sp/>init.end(),<sp/>bucket_count,<sp/>hash,<sp/>equal,<sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(std::initializer_list&lt;value_type&gt;<sp/>init,<sp/>size_type<sp/>bucket_count,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(init.begin(),<sp/>init.end(),<sp/>bucket_count,<sp/>Hash(),<sp/>KeyEqual(),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(std::initializer_list&lt;value_type&gt;<sp/>init,<sp/>size_type<sp/>bucket_count,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Hash&amp;<sp/>hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>(init.begin(),<sp/>init.end(),<sp/>bucket_count,<sp/>hash,<sp/>KeyEqual(),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc)<sp/>{}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>&amp;<sp/>operator=(std::initializer_list&lt;value_type&gt;<sp/>ilist)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.clear();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.reserve(ilist.size());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.insert(ilist.begin(),<sp/>ilist.end());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>allocator_type<sp/>get_allocator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.get_allocator();<sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Iterators</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>iterator<sp/>begin()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.begin();<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.begin();<sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cbegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.cbegin();<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>iterator<sp/>end()<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.end();<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.end();<sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cend()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.cend();<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Capacity</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.empty();<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>size_type<sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.size();<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>size_type<sp/>max_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.max_size();<sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Modifiers</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>noexcept<sp/>{<sp/>m_ht.clear();<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>insert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert(value);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">P,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_constructible&lt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type,<sp/>P&amp;&amp;&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>insert(P&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.emplace(std::forward&lt;P&gt;(value));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>insert(value_type&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert(std::move(value));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_hint(hint,<sp/>value);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">P,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_constructible&lt;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type,<sp/>P&amp;&amp;&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>hint,<sp/>P&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.emplace_hint(hint,<sp/>std::forward&lt;P&gt;(value));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>hint,<sp/>value_type&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_hint(hint,<sp/>std::move(value));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(InputIt<sp/>first,<sp/>InputIt<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.insert(first,<sp/>last);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(std::initializer_list&lt;value_type&gt;<sp/>ilist)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.insert(ilist.begin(),<sp/>ilist.end());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>insert_or_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>k,<sp/>M&amp;&amp;<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_or_assign(k,<sp/>std::forward&lt;M&gt;(obj));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>insert_or_assign(key_type&amp;&amp;<sp/>k,<sp/>M&amp;&amp;<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_or_assign(std::move(k),<sp/>std::forward&lt;M&gt;(obj));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>iterator<sp/>insert_or_assign(const_iterator<sp/>hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>k,<sp/>M&amp;&amp;<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_or_assign(hint,<sp/>k,<sp/>std::forward&lt;M&gt;(obj));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>iterator<sp/>insert_or_assign(const_iterator<sp/>hint,<sp/>key_type&amp;&amp;<sp/>k,<sp/>M&amp;&amp;<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.insert_or_assign(hint,<sp/>std::move(k),<sp/>std::forward&lt;M&gt;(obj));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="303" refid="classpxr__tsl_1_1robin__map_1a3266031b8b423571de004ddf5bcddd24" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a3266031b8b423571de004ddf5bcddd24" kindref="member">emplace</ref>(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.emplace(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="315" refid="classpxr__tsl_1_1robin__map_1aaa893704f6fe9989f1ada11c2c503886" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1aaa893704f6fe9989f1ada11c2c503886" kindref="member">emplace_hint</ref>(const_iterator<sp/>hint,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.emplace_hint(hint,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>try_emplace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>k,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.try_emplace(k,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>bool&gt;<sp/>try_emplace(key_type&amp;&amp;<sp/>k,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.try_emplace(std::move(k),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>iterator<sp/>try_emplace(const_iterator<sp/>hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>k,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.try_emplace_hint(hint,<sp/>k,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>iterator<sp/>try_emplace(const_iterator<sp/>hint,<sp/>key_type&amp;&amp;<sp/>k,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.try_emplace_hint(hint,<sp/>std::move(k),</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>iterator<sp/>erase(iterator<sp/>pos)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(pos);<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>pos)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(pos);<sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>first,<sp/>const_iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(first,<sp/>last);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>size_type<sp/>erase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(key);<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classpxr__tsl_1_1robin__map_1aa0f50653fc58cc15e1ecdddf42078e74" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1aa0f50653fc58cc15e1ecdddf42078e74" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key_type&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="364" refid="classpxr__tsl_1_1robin__map_1adcb30fce010ea21568f9b6056af45b81" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1adcb30fce010ea21568f9b6056af45b81" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(key);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="378" refid="classpxr__tsl_1_1robin__map_1ae666d3fa05f9584e01e4e733ea7def05" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1ae666d3fa05f9584e01e4e733ea7def05" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.<ref refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash_1af7659d9799f06df763bf397101941dd7" kindref="member">erase</ref>(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>&amp;<sp/>other)<sp/>{<sp/>other.m_ht.swap(m_ht);<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Lookup</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>T&amp;<sp/>at(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key);<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classpxr__tsl_1_1robin__map_1a8b66aff80545226d490d9a04905a9db5" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a8b66aff80545226d490d9a04905a9db5" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>at(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key);<sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classpxr__tsl_1_1robin__map_1ac71b3544dac5a7c94d22b2e4bc89cdf3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1ac71b3544dac5a7c94d22b2e4bc89cdf3" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="415" refid="classpxr__tsl_1_1robin__map_1a0e3fb169febbf71088eb394f997cceb9" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a0e3fb169febbf71088eb394f997cceb9" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="429" refid="classpxr__tsl_1_1robin__map_1a1559cc866f6082c39a196eebf33dfad8" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a1559cc866f6082c39a196eebf33dfad8" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="439" refid="classpxr__tsl_1_1robin__map_1a588d387e9112cb7672e1352805f233f2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a588d387e9112cb7672e1352805f233f2" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="449" refid="classpxr__tsl_1_1robin__map_1a75de79b5baf8cb88e1284aeba85bcab9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a75de79b5baf8cb88e1284aeba85bcab9" kindref="member">at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.at(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>T&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht[key];<sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>T&amp;<sp/>operator[](Key&amp;&amp;<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht[std::move(key)];<sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>size_type<sp/>count(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.count(key);<sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="classpxr__tsl_1_1robin__map_1a4eefd88b96cf835514fd765dfff0498b" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1a4eefd88b96cf835514fd765dfff0498b" kindref="member">count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.count(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="475" refid="classpxr__tsl_1_1robin__map_1ab9302b6142f9037bb489e6717e0af56b" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1ab9302b6142f9037bb489e6717e0af56b" kindref="member">count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.count(key);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="489" refid="classpxr__tsl_1_1robin__map_1af9a9f3a334c8e885cb68883e252d87d9" refkind="member"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="classpxr__tsl_1_1robin__map_1af9a9f3a334c8e885cb68883e252d87d9" kindref="member">count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.count(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>iterator<sp/>find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key);<sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="classpxr__tsl_1_1robin__map_1aa3d4e52e5fcbace902503a645524760a" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1aa3d4e52e5fcbace902503a645524760a" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>const_iterator<sp/>find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key);<sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="classpxr__tsl_1_1robin__map_1a1e129b22f90474ce92d6b2b837554cc1" refkind="member"><highlight class="normal"><sp/><sp/>const_iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1a1e129b22f90474ce92d6b2b837554cc1" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="521" refid="classpxr__tsl_1_1robin__map_1ae482efbeca6bc4c4661659f855e05e30" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1ae482efbeca6bc4c4661659f855e05e30" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="535" refid="classpxr__tsl_1_1robin__map_1aab7e6161d9e44421a88e1127ac703b7e" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1aab7e6161d9e44421a88e1127ac703b7e" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="545" refid="classpxr__tsl_1_1robin__map_1a900919d13db42a973b642182c837af6f" refkind="member"><highlight class="normal"><sp/><sp/>const_iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1a900919d13db42a973b642182c837af6f" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="559" refid="classpxr__tsl_1_1robin__map_1a1c65830a6989831a96514c7dc75613cb" refkind="member"><highlight class="normal"><sp/><sp/>const_iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1a1c65830a6989831a96514c7dc75613cb" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.find(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.contains(key);<sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="classpxr__tsl_1_1robin__map_1a0f5822954e3c2e3debe2db48740892a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map_1a0f5822954e3c2e3debe2db48740892a7" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.contains(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="582" refid="classpxr__tsl_1_1robin__map_1ab1eb6dff57572f9e6e2360c7ca6bd456" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map_1ab1eb6dff57572f9e6e2360c7ca6bd456" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.contains(key);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="596" refid="classpxr__tsl_1_1robin__map_1a43904eb84db5090ff895ee1d90b3b154" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map_1a43904eb84db5090ff895ee1d90b3b154" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.contains(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>iterator&gt;<sp/>equal_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="classpxr__tsl_1_1robin__map_1ac580a1eb1053b5412102ad2d5d6489ca" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1ac580a1eb1053b5412102ad2d5d6489ca" kindref="member">equal_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>std::pair&lt;const_iterator,<sp/>const_iterator&gt;<sp/>equal_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="classpxr__tsl_1_1robin__map_1a7211f6328ab446351332e327503ceb5b" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;const_iterator,<sp/>const_iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a7211f6328ab446351332e327503ceb5b" kindref="member">equal_range</ref>(</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="634" refid="classpxr__tsl_1_1robin__map_1a063fa547f1200f2f9c464099c28a3366" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a063fa547f1200f2f9c464099c28a3366" kindref="member">equal_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="648" refid="classpxr__tsl_1_1robin__map_1a31955f79a9c3cf5b27bd738f633bcb28" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;iterator,<sp/>iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a31955f79a9c3cf5b27bd738f633bcb28" kindref="member">equal_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>precalculated_hash)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="659" refid="classpxr__tsl_1_1robin__map_1aab526ba688ea72265ac0f2b21801474b" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;const_iterator,<sp/>const_iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1aab526ba688ea72265ac0f2b21801474b" kindref="member">equal_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KE<sp/>=<sp/>KeyEqual,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;has_is_transparent&lt;KE&gt;::value&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="669" refid="classpxr__tsl_1_1robin__map_1a5e2535eea8e61800b2682356b3530f53" refkind="member"><highlight class="normal"><sp/><sp/>std::pair&lt;const_iterator,<sp/>const_iterator&gt;<sp/><ref refid="classpxr__tsl_1_1robin__map_1a5e2535eea8e61800b2682356b3530f53" kindref="member">equal_range</ref>(</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K&amp;<sp/>key,<sp/>std::size_t<sp/>precalculated_hash)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.equal_range(key,<sp/>precalculated_hash);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Bucket<sp/>interface</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>size_type<sp/>bucket_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.bucket_count();<sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>size_type<sp/>max_bucket_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.max_bucket_count();<sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/>Hash<sp/>policy</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>load_factor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.load_factor();<sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_load_factor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.min_load_factor();<sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_load_factor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.max_load_factor();<sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="classpxr__tsl_1_1robin__map_1a4899ac5f6e805d6796166b308a190988" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map_1a4899ac5f6e805d6796166b308a190988" kindref="member">min_load_factor</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ml)<sp/>{<sp/>m_ht.min_load_factor(ml);<sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>max_load_factor(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ml)<sp/>{<sp/>m_ht.max_load_factor(ml);<sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rehash(size_type<sp/>count_)<sp/>{<sp/>m_ht.rehash(count_);<sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reserve(size_type<sp/>count_)<sp/>{<sp/>m_ht.reserve(count_);<sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Observers</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>hasher<sp/>hash_function()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.hash_function();<sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>key_equal<sp/>key_eq()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.key_eq();<sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Other</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="716" refid="classpxr__tsl_1_1robin__map_1aa9a08d0e44e9e00fe05e2dfe467a98b5" refkind="member"><highlight class="normal"><sp/><sp/>iterator<sp/><ref refid="classpxr__tsl_1_1robin__map_1aa9a08d0e44e9e00fe05e2dfe467a98b5" kindref="member">mutable_iterator</ref>(const_iterator<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ht.mutable_iterator(pos);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Serializer&gt;</highlight></codeline>
<codeline lineno="734" refid="classpxr__tsl_1_1robin__map_1afaa50020d576b4292bdd62f16869fb97" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map_1afaa50020d576b4292bdd62f16869fb97" kindref="member">serialize</ref>(Serializer&amp;<sp/>serializer)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ht.serialize(serializer);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Deserializer&gt;</highlight></codeline>
<codeline lineno="765" refid="classpxr__tsl_1_1robin__map_1a22890733b2f18b07ecac71014fab9e6c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref><sp/><ref refid="classpxr__tsl_1_1robin__map_1a22890733b2f18b07ecac71014fab9e6c" kindref="member">deserialize</ref>(Deserializer&amp;<sp/>deserializer,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hash_compatible<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref><sp/>map(0);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>map.m_ht.deserialize(deserializer,<sp/>hash_compatible);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">robin_map</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.size()<sp/>!=<sp/>rhs.size())<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element_lhs<sp/>:<sp/>lhs)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_element_rhs<sp/>=<sp/>rhs.find(element_lhs.first);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it_element_rhs<sp/>==<sp/>rhs.cend()<sp/>||</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_lhs.second<sp/>!=<sp/>it_element_rhs-&gt;second)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>robin_map&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>robin_map&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(robin_map&amp;<sp/>lhs,<sp/>robin_map&amp;<sp/>rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>ht<sp/>m_ht;</highlight></codeline>
<codeline lineno="797"><highlight class="normal">};</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>std::hash&lt;Key&gt;,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KeyEqual<sp/>=<sp/>std::equal_to&lt;Key&gt;,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;std::pair&lt;Key,<sp/>T&gt;&gt;,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StoreHash<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacepxr__tsl_1a442ed6414ddf0253898a1d9327457dcb" kindref="member">robin_pg_map</ref><sp/>=<sp/>robin_map&lt;Key,<sp/>T,<sp/>Hash,<sp/>KeyEqual,<sp/>Allocator,<sp/>StoreHash,</highlight></codeline>
<codeline lineno="808" refid="namespacepxr__tsl_1a442ed6414ddf0253898a1d9327457dcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpxr__tsl_1_1rh_1_1prime__growth__policy" kindref="compound">pxr_tsl::rh::prime_growth_policy</ref>&gt;;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>pxr_tsl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/pxrTslRobinMap/robin_map.h"/>
  </compounddef>
</doxygen>
