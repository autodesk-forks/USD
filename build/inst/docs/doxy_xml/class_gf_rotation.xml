<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_rotation" kind="class" language="C++" prot="public">
    <compoundname>GfRotation</compoundname>
    <includes refid="rotation_8h" local="no">rotation.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_rotation_1a321696b21c898e25e2d22e40c947ebf7" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _axis</definition>
        <argsstring></argsstring>
        <name>_axis</name>
        <briefdescription>
<para>Axis storage. </para>
        </briefdescription>
        <detaileddescription>
<para>This axis is normalized to unit length whenever it is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="289" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_rotation_1a2cbe8eaf33680973ea42eb94abf44ebf" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _angle</definition>
        <argsstring></argsstring>
        <name>_angle</name>
        <briefdescription>
<para>Angle storage (represented in degrees). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="291" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_rotation_1a471238d8f42e8517679e0ddacba8d0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRotation</definition>
        <argsstring>()</argsstring>
        <name>GfRotation</name>
        <briefdescription>
<para>The default constructor leaves the rotation undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="59" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="59" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a7799409ce9f006e4cb7aaff0593d2b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRotation</definition>
        <argsstring>(const GfVec3d &amp;axis, double angle)</argsstring>
        <name>GfRotation</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the rotation to be <computeroutput>angle</computeroutput> degrees about <computeroutput>axis</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="64" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a0659565ab460eddd380763caa9c445b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRotation</definition>
        <argsstring>(const GfQuaternion &amp;quaternion)</argsstring>
        <name>GfRotation</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>quaternion</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the rotation from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="69" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1aab9e1870c71b6cfa9edbbd991a9994f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRotation</definition>
        <argsstring>(const GfQuatd &amp;quat)</argsstring>
        <name>GfRotation</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the rotation from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this constructor accepts <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> and <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> since they implicitly convert to <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="76" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a5e982568590f79be5cdded74b48a6250" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRotation</definition>
        <argsstring>(const GfVec3d &amp;rotateFrom, const GfVec3d &amp;rotateTo)</argsstring>
        <name>GfRotation</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>rotateFrom</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>rotateTo</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the rotation to one that brings the <computeroutput>rotateFrom</computeroutput> vector to align with <computeroutput>rotateTo</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed vectors need not be unit length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="82" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1aae7d01143234c2d2592676ff5e4dccf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GfRotation&amp; SetAxisAngle</definition>
        <argsstring>(const GfVec3d &amp;axis, double angle)</argsstring>
        <name>SetAxisAngle</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Sets the rotation to be <computeroutput>angle</computeroutput> degrees about <computeroutput>axis</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="87" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a1efa119a58dc875b78202768c7c30b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GF_API GfRotation&amp; SetQuat</definition>
        <argsstring>(const GfQuatd &amp;quat)</argsstring>
        <name>SetQuat</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>Sets the rotation from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this method accepts <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> and <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> since they implicitly convert to <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1adeb8656ec3d232412888b1d28531cde3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GfRotation&amp; SetQuaternion</definition>
        <argsstring>(const GfQuaternion &amp;quat)</argsstring>
        <name>SetQuaternion</name>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>Sets the rotation from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="101" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a25b83b0f0fac8b61ebbb80fdb66eb16a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GF_API GfRotation&amp; SetRotateInto</definition>
        <argsstring>(const GfVec3d &amp;rotateFrom, const GfVec3d &amp;rotateTo)</argsstring>
        <name>SetRotateInto</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>rotateFrom</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>rotateTo</declname>
        </param>
        <briefdescription>
<para>Sets the rotation to one that brings the <computeroutput>rotateFrom</computeroutput> vector to align with <computeroutput>rotateTo</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed vectors need not be unit length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a5b8bbfbdd1116a2d398949ca1e9ec115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GfRotation&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the rotation to an identity rotation. </para>
        </briefdescription>
        <detaileddescription>
<para>(This is chosen to be 0 degrees around the positive X axis.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="114" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a735fa53ea47c8aff9e3cd8ef826f4242" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetAxis</definition>
        <argsstring>() const</argsstring>
        <name>GetAxis</name>
        <briefdescription>
<para>Returns the axis of rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="121" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1aa8238cc457ba8f2b2ec938d5a3aa591b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetAngle</definition>
        <argsstring>() const</argsstring>
        <name>GetAngle</name>
        <briefdescription>
<para>Returns the rotation angle in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="126" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1abcfbd933dfe990258fc1fce9f432f619" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GfQuaternion GetQuaternion</definition>
        <argsstring>() const</argsstring>
        <name>GetQuaternion</name>
        <briefdescription>
<para>Returns the rotation expressed as a quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="131" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a9a1e745179540d72e9dc32016d5568a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GF_API GfQuatd GetQuat</definition>
        <argsstring>() const</argsstring>
        <name>GetQuat</name>
        <briefdescription>
<para>Returns the rotation expressed as a quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1ada1b78f7d9bc4aa32c0047fc4aa30205" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Returns the inverse of this rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="141" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a1484e72bfed4580e97c4277e3cb6c81f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d Decompose</definition>
        <argsstring>(const GfVec3d &amp;axis0, const GfVec3d &amp;axis1, const GfVec3d &amp;axis2) const</argsstring>
        <name>Decompose</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis2</declname>
        </param>
        <briefdescription>
<para>Decompose rotation about 3 orthogonal axes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the axes are not orthogonal, warnings will be spewed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1ad8b3c5901b2a5385903be27f4bfe5468" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f TransformDir</definition>
        <argsstring>(const GfVec3f &amp;vec) const</argsstring>
        <name>TransformDir</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms row vector <computeroutput>vec</computeroutput> by the rotation, returning the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a48d4efafdcf9d8a5ab24c1d3bc88df94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d TransformDir</definition>
        <argsstring>(const GfVec3d &amp;vec) const</argsstring>
        <name>TransformDir</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1ad876eea04108eb8b4da9b04d41afe7c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRotation &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise rotation equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The axes and angles must match exactly for rotations to be considered equal. (To compare equality of the actual rotations, you can convert both to quaternions and test the results for equality.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="230" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1ab53216af71062ec5660320e7b9bcc417" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRotation &amp;r) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise rotation inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The axes and angles must match exactly for rotations to be considered equal. (To compare equality of the actual rotations, you can convert both to quaternions and test the results for equality.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="239" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a783d2bf47b06d795b9d28ab1124d6079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GF_API GfRotation&amp; operator *=</definition>
        <argsstring>(const GfRotation &amp;r)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Post-multiplies rotation <computeroutput>r</computeroutput> into this rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1ac6af17e6278178bfccb45583e7dbd929" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GfRotation&amp; operator *=</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Scales rotation angle by multiplying by <computeroutput>scale</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="248" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a19d6f23d90d67aeb77d69c4606c88259" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>GfRotation&amp; operator/=</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Scales rotation angle by dividing by <computeroutput>scale</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="254" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="254" bodyend="257"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_rotation_1ab699660f4b748939b4fd596fb2fff0ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>static GF_API void DecomposeRotation</definition>
        <argsstring>(const GfMatrix4d &amp;rot, const GfVec3d &amp;TwAxis, const GfVec3d &amp;FBAxis, const GfVec3d &amp;LRAxis, double handedness, double *thetaTw, double *thetaFB, double *thetaLR, double *thetaSw=nullptr, bool useHint=false, const double *swShift=nullptr)</argsstring>
        <name>DecomposeRotation</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>TwAxis</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>FBAxis</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>LRAxis</declname>
        </param>
        <param>
          <type>double</type>
          <declname>handedness</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaTw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaFB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaLR</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaSw</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useHint</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double *</type>
          <declname>swShift</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a50254e9b8cee58711f0168433c182987" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>static GF_API GfRotation RotateOntoProjected</definition>
        <argsstring>(const GfVec3d &amp;v1, const GfVec3d &amp;v2, const GfVec3d &amp;axis)</argsstring>
        <name>RotateOntoProjected</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_rotation_1a61eeb913381c4747d727dcf5d4d887c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>static GF_API void MatchClosestEulerRotation</definition>
        <argsstring>(double targetTw, double targetFB, double targetLR, double targetSw, double *thetaTw, double *thetaFB, double *thetaLR, double *thetaSw)</argsstring>
        <name>MatchClosestEulerRotation</name>
        <param>
          <type>double</type>
          <declname>targetTw</declname>
        </param>
        <param>
          <type>double</type>
          <declname>targetFB</declname>
        </param>
        <param>
          <type>double</type>
          <declname>targetLR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>targetSw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaTw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaFB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaLR</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>thetaSw</declname>
        </param>
        <briefdescription>
<para>Replace the hint angles with the closest rotation of the given rotation to the hint. </para>
        </briefdescription>
        <detaileddescription>
<para>Each angle in the rotation will be within Pi of the corresponding hint angle and the sum of the differences with the hint will be minimized. If a given rotation value is null then that angle will be treated as 0.0 and ignored in the calculations.</para>
<para>All angles are in radians. The rotation order is Tw/FB/LR/Sw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_rotation_1aba8cfebf3791a408170beee370f82fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRotation &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="222" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_rotation_1ae83ee93c732489712e58136f9df9ebf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation operator *</definition>
        <argsstring>(const GfRotation &amp;r1, const GfRotation &amp;r2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>Returns composite rotation of rotations <computeroutput>r1</computeroutput> and <computeroutput>r2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="260" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_rotation_1aa78a165e4791087e8bdc5bf2cb62df65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation operator *</definition>
        <argsstring>(const GfRotation &amp;r, double scale)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Returns a rotation equivalent to <computeroutput>r</computeroutput> with its angle multiplied by <computeroutput>scale</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="268" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_rotation_1a46a369577ac963c3162058540ae55ff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation operator *</definition>
        <argsstring>(double scale, const GfRotation &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Returns a rotation equivalent to <computeroutput>r</computeroutput> with its angle multiplied by <computeroutput>scale</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="275" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_rotation_1a0b0ef767c36f651b6d64aad87ee04e3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation operator/</definition>
        <argsstring>(const GfRotation &amp;r, double scale)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Returns a rotation equivalent to <computeroutput>r</computeroutput> with its angle divided by <computeroutput>scale</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="281" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="281" bodyend="284"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 3-space rotation specification. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a rotation in 3-space. This stores an axis as a normalized vector of 3 <computeroutput>doubles</computeroutput> and an angle in degrees (as a double). Rotations follow the right-hand rule: a positive rotation about an axis vector appears counter-clockwise when looking from the end of the vector toward the origin. </para>
    </detaileddescription>
    <location file="pxr/base/gf/rotation.h" line="54" column="1" bodyfile="pxr/base/gf/rotation.h" bodystart="54" bodyend="292"/>
    <listofallmembers>
      <member refid="class_gf_rotation_1a2cbe8eaf33680973ea42eb94abf44ebf" prot="private" virt="non-virtual"><scope>GfRotation</scope><name>_angle</name></member>
      <member refid="class_gf_rotation_1a321696b21c898e25e2d22e40c947ebf7" prot="private" virt="non-virtual"><scope>GfRotation</scope><name>_axis</name></member>
      <member refid="class_gf_rotation_1a1484e72bfed4580e97c4277e3cb6c81f" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>Decompose</name></member>
      <member refid="class_gf_rotation_1ab699660f4b748939b4fd596fb2fff0ea" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>DecomposeRotation</name></member>
      <member refid="class_gf_rotation_1aa8238cc457ba8f2b2ec938d5a3aa591b" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GetAngle</name></member>
      <member refid="class_gf_rotation_1a735fa53ea47c8aff9e3cd8ef826f4242" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GetAxis</name></member>
      <member refid="class_gf_rotation_1ada1b78f7d9bc4aa32c0047fc4aa30205" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GetInverse</name></member>
      <member refid="class_gf_rotation_1a9a1e745179540d72e9dc32016d5568a2" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GetQuat</name></member>
      <member refid="class_gf_rotation_1abcfbd933dfe990258fc1fce9f432f619" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GetQuaternion</name></member>
      <member refid="class_gf_rotation_1a471238d8f42e8517679e0ddacba8d0d6" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GfRotation</name></member>
      <member refid="class_gf_rotation_1a7799409ce9f006e4cb7aaff0593d2b05" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GfRotation</name></member>
      <member refid="class_gf_rotation_1a0659565ab460eddd380763caa9c445b9" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GfRotation</name></member>
      <member refid="class_gf_rotation_1aab9e1870c71b6cfa9edbbd991a9994f2" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GfRotation</name></member>
      <member refid="class_gf_rotation_1a5e982568590f79be5cdded74b48a6250" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>GfRotation</name></member>
      <member refid="class_gf_rotation_1aba8cfebf3791a408170beee370f82fde" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>hash_value</name></member>
      <member refid="class_gf_rotation_1a61eeb913381c4747d727dcf5d4d887c9" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>MatchClosestEulerRotation</name></member>
      <member refid="class_gf_rotation_1ab53216af71062ec5660320e7b9bcc417" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator !=</name></member>
      <member refid="class_gf_rotation_1ae83ee93c732489712e58136f9df9ebf8" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator *</name></member>
      <member refid="class_gf_rotation_1aa78a165e4791087e8bdc5bf2cb62df65" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator *</name></member>
      <member refid="class_gf_rotation_1a46a369577ac963c3162058540ae55ff9" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator *</name></member>
      <member refid="class_gf_rotation_1a783d2bf47b06d795b9d28ab1124d6079" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator *=</name></member>
      <member refid="class_gf_rotation_1ac6af17e6278178bfccb45583e7dbd929" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator *=</name></member>
      <member refid="class_gf_rotation_1a0b0ef767c36f651b6d64aad87ee04e3e" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator/</name></member>
      <member refid="class_gf_rotation_1a19d6f23d90d67aeb77d69c4606c88259" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator/=</name></member>
      <member refid="class_gf_rotation_1ad876eea04108eb8b4da9b04d41afe7c5" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>operator==</name></member>
      <member refid="class_gf_rotation_1a50254e9b8cee58711f0168433c182987" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>RotateOntoProjected</name></member>
      <member refid="class_gf_rotation_1aae7d01143234c2d2592676ff5e4dccf7" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>SetAxisAngle</name></member>
      <member refid="class_gf_rotation_1a5b8bbfbdd1116a2d398949ca1e9ec115" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>SetIdentity</name></member>
      <member refid="class_gf_rotation_1a1efa119a58dc875b78202768c7c30b61" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>SetQuat</name></member>
      <member refid="class_gf_rotation_1adeb8656ec3d232412888b1d28531cde3" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>SetQuaternion</name></member>
      <member refid="class_gf_rotation_1a25b83b0f0fac8b61ebbb80fdb66eb16a" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>SetRotateInto</name></member>
      <member refid="class_gf_rotation_1ad8b3c5901b2a5385903be27f4bfe5468" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>TransformDir</name></member>
      <member refid="class_gf_rotation_1a48d4efafdcf9d8a5ab24c1d3bc88df94" prot="public" virt="non-virtual"><scope>GfRotation</scope><name>TransformDir</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
