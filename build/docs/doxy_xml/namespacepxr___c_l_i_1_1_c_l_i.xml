<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespacepxr___c_l_i_1_1_c_l_i" kind="namespace" language="C++">
    <compoundname>pxr_CLI::CLI</compoundname>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" prot="public">pxr_CLI::CLI::App</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_argument_mismatch" prot="public">pxr_CLI::CLI::ArgumentMismatch</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" prot="public">pxr_CLI::CLI::AsNumberWithUnit</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value" prot="public">pxr_CLI::CLI::AsSizeValue</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_bad_name_string" prot="public">pxr_CLI::CLI::BadNameString</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" prot="public">pxr_CLI::CLI::Bound</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_all_help" prot="public">pxr_CLI::CLI::CallForAllHelp</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_help" prot="public">pxr_CLI::CLI::CallForHelp</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_call_for_version" prot="public">pxr_CLI::CLI::CallForVersion</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" prot="public">pxr_CLI::CLI::CheckedTransformer</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" prot="public">pxr_CLI::CLI::Config</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" prot="public">pxr_CLI::CLI::ConfigBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_error" prot="public">pxr_CLI::CLI::ConfigError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_i_n_i" prot="public">pxr_CLI::CLI::ConfigINI</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_config_item" prot="public">pxr_CLI::CLI::ConfigItem</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_construction_error" prot="public">pxr_CLI::CLI::ConstructionError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_conversion_error" prot="public">pxr_CLI::CLI::ConversionError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator" prot="public">pxr_CLI::CLI::CustomValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_error" prot="public">pxr_CLI::CLI::Error</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_excludes_error" prot="public">pxr_CLI::CLI::ExcludesError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_extras_error" prot="public">pxr_CLI::CLI::ExtrasError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_error" prot="public">pxr_CLI::CLI::FileError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" prot="public">pxr_CLI::CLI::FileOnDefaultPath</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" prot="public">pxr_CLI::CLI::Formatter</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" prot="public">pxr_CLI::CLI::FormatterBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" prot="public">pxr_CLI::CLI::FormatterLambda</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_horrible_error" prot="public">pxr_CLI::CLI::HorribleError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_incorrect_construction" prot="public">pxr_CLI::CLI::IncorrectConstruction</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_invalid_error" prot="public">pxr_CLI::CLI::InvalidError</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool" prot="public">pxr_CLI::CLI::is_bool</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__bool_3_01bool_01_4" prot="public">pxr_CLI::CLI::is_bool&lt; bool &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__copyable__ptr" prot="public">pxr_CLI::CLI::is_copyable_ptr</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr" prot="public">pxr_CLI::CLI::is_shared_ptr</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01const_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pxr_CLI::CLI::is_shared_ptr&lt; const std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1is__shared__ptr_3_01std_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">pxr_CLI::CLI::is_shared_ptr&lt; std::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" prot="public">pxr_CLI::CLI::IsMember</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type" prot="public">pxr_CLI::CLI::IsMemberType</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1_is_member_type_3_01const_01char_01_5_01_4" prot="public">pxr_CLI::CLI::IsMemberType&lt; const char * &gt;</innerclass>
    <innerclass refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" prot="public">pxr_CLI::CLI::make_void</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option" prot="public">pxr_CLI::CLI::Option</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option__group" prot="public">pxr_CLI::CLI::Option_group</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_already_added" prot="public">pxr_CLI::CLI::OptionAlreadyAdded</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" prot="public">pxr_CLI::CLI::OptionBase</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" prot="public">pxr_CLI::CLI::OptionDefaults</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_not_found" prot="public">pxr_CLI::CLI::OptionNotFound</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_parse_error" prot="public">pxr_CLI::CLI::ParseError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" prot="public">pxr_CLI::CLI::Range</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_required_error" prot="public">pxr_CLI::CLI::RequiredError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_requires_error" prot="public">pxr_CLI::CLI::RequiresError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_runtime_error" prot="public">pxr_CLI::CLI::RuntimeError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_success" prot="public">pxr_CLI::CLI::Success</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" prot="public">pxr_CLI::CLI::Transformer</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" prot="public">pxr_CLI::CLI::TypeValidator</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_validation_error" prot="public">pxr_CLI::CLI::ValidationError</innerclass>
    <innerclass refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" prot="public">pxr_CLI::CLI::Validator</innerclass>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1detail">pxr_CLI::CLI::detail</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1enums">pxr_CLI::CLI::enums</innernamespace>
    <innernamespace refid="namespacepxr___c_l_i_1_1_c_l_i_1_1_failure_message">pxr_CLI::CLI::FailureMessage</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="_c_l_i11_8h_1aa42e4720836db951257ae5fc8312f661" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::pair&lt; std::string, T &gt; &gt;</type>
        <definition>using TransformPairs =  std::vector&lt;std::pair&lt;std::string, T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TransformPairs</name>
        <briefdescription>
<para>definition of the default transformation object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3319" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_l_i11_8h_1a57d3e17ccc53fff51c0ac9d7cba0894b" prot="public" static="no" mutable="no">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" kindref="compound">detail::ExistingFileValidator</ref></type>
        <definition>const detail::ExistingFileValidator ExistingFile</definition>
        <argsstring></argsstring>
        <name>ExistingFile</name>
        <briefdescription>
<para>Check for existing file (returns error message if check fails) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3003" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_l_i11_8h_1a123305d46c7dd535f319cf93888c3348" prot="public" static="no" mutable="no">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" kindref="compound">detail::ExistingDirectoryValidator</ref></type>
        <definition>const detail::ExistingDirectoryValidator ExistingDirectory</definition>
        <argsstring></argsstring>
        <name>ExistingDirectory</name>
        <briefdescription>
<para>Check for an existing directory (returns error message if check fails) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3006" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_l_i11_8h_1a8f49c6dfb9549e70867fd61f09f368a0" prot="public" static="no" mutable="no">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" kindref="compound">detail::ExistingPathValidator</ref></type>
        <definition>const detail::ExistingPathValidator ExistingPath</definition>
        <argsstring></argsstring>
        <name>ExistingPath</name>
        <briefdescription>
<para>Check for an existing path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3009" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_l_i11_8h_1a20f4251d0d9b92aa2d522ec687e8c5c5" prot="public" static="no" mutable="no">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" kindref="compound">detail::NonexistentPathValidator</ref></type>
        <definition>const detail::NonexistentPathValidator NonexistentPath</definition>
        <argsstring></argsstring>
        <name>NonexistentPath</name>
        <briefdescription>
<para>Check for an non-existing path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3012" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_c_l_i11_8h_1a72d7092af3ed2ef811c433f99ce16bd2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" kindref="compound">detail::IPV4Validator</ref></type>
        <definition>const detail::IPV4Validator ValidIPV4</definition>
        <argsstring></argsstring>
        <name>ValidIPV4</name>
        <briefdescription>
<para>Check for an IP4 address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3015" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ae722d4e5e5978bfae5a1760580800129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" kindref="compound">TypeValidator</ref>&lt; double &gt;</type>
        <definition>const TypeValidator&lt;double&gt; pxr_CLI::CLI::Number</definition>
        <argsstring>(&quot;NUMBER&quot;)</argsstring>
        <name>Number</name>
        <param>
          <type>&quot;NUMBER&quot;</type>
        </param>
        <briefdescription>
<para>Check for a number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3032" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1aef0affa26d6c1b7c63c2b24d1ffa2355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" kindref="compound">Range</ref></type>
        <definition>const Range pxr_CLI::CLI::NonNegativeNumber</definition>
        <argsstring>((std::numeric_limits&lt; double &gt;::max)(), &quot;NONNEGATIVE&quot;)</argsstring>
        <name>NonNegativeNumber</name>
        <param>
          <type>(std::numeric_limits&lt; double &gt;::max)()</type>
        </param>
        <param>
          <type>&quot;NONNEGATIVE&quot;</type>
        </param>
        <briefdescription>
<para>Check for a non negative number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3076" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1aa7726eebe1852e426cfaff3ba45be190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" kindref="compound">Range</ref></type>
        <definition>const Range pxr_CLI::CLI::PositiveNumber</definition>
        <argsstring>((std::numeric_limits&lt; double &gt;::min)(),(std::numeric_limits&lt; double &gt;::max)(), &quot;POSITIVE&quot;)</argsstring>
        <name>PositiveNumber</name>
        <param>
          <type>(std::numeric_limits&lt; double &gt;::min)()</type>
        </param>
        <param>
          <type>(std::numeric_limits&lt; double &gt;::max)()</type>
        </param>
        <param>
          <type>&quot;POSITIVE&quot;</type>
        </param>
        <briefdescription>
<para>Check for a positive valued number (val&gt;0.0), &lt;double&gt;::min here is the smallest positive number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3079" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a576aa31a0d1bc7b5787b3eca1fffbb84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pxr_CLI::CLI::ignore_case</definition>
        <argsstring>(std::string item)</argsstring>
        <name>ignore_case</name>
        <param>
          <type>std::string</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Helper function to allow ignore_case to be passed to <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref> or Transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3456" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3456" bodyend="3456"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ab462ed3d9e55ea2932c2a70a6f3bc5c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pxr_CLI::CLI::ignore_underscore</definition>
        <argsstring>(std::string item)</argsstring>
        <name>ignore_underscore</name>
        <param>
          <type>std::string</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Helper function to allow ignore_underscore to be passed to <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref> or Transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3459" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3459" bodyend="3459"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ad71e1850fab556e34e985439607511d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pxr_CLI::CLI::ignore_space</definition>
        <argsstring>(std::string item)</argsstring>
        <name>ignore_space</name>
        <param>
          <type>std::string</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Helper function to allow checks to ignore spaces to be passed to <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" kindref="compound">IsMember</ref> or Transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3462" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3462" bodyend="3466"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1af58c857143ab85b792e5ef7798da260c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref></type>
        <definition>AsNumberWithUnit::Options pxr_CLI::CLI::operator|</definition>
        <argsstring>(const AsNumberWithUnit::Options &amp;a, const AsNumberWithUnit::Options &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit_1adf7c3ac791f996a56160a12f379cbd99" kindref="member">AsNumberWithUnit::Options</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3606" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3606" bodyend="3608"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537" prot="public" static="no" strong="yes">
        <type></type>
        <name>ExitCodes</name>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a505a83f220c02df2f85c3810cd9ceb38" prot="public">
          <name>Success</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a903d95792f297008a1fd3fab8df69f79" prot="public">
          <name>IncorrectConstruction</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537ab319e260db27232cb74e2a23124b7a2c" prot="public">
          <name>BadNameString</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537ade33f5f54db87abfb2926228f0867038" prot="public">
          <name>OptionAlreadyAdded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a06344c468073b2b66824779ffa5105cc" prot="public">
          <name>FileError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a33f8a28d3c790e00d94cc848895dfb51" prot="public">
          <name>ConversionError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a8180c46099f957f51b2bc31f7f0f5c42" prot="public">
          <name>ValidationError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a9f418597ecc2a82cc220ea24b53505d3" prot="public">
          <name>RequiredError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a5a33e2f2a0eda1a6a9d8534c79459794" prot="public">
          <name>RequiresError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a180b6078f0a0618bbdbaeda656841923" prot="public">
          <name>ExcludesError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a12e25f67fcb619ec309d229ae4b9d75e" prot="public">
          <name>ExtrasError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a1053efdc7a34708782767df3ed95cded" prot="public">
          <name>ConfigError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537af65e8093ec3083c0c4909e321df2ece7" prot="public">
          <name>InvalidError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537aaadcc078255a085fcac00639a9519392" prot="public">
          <name>HorribleError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537aa40b471f8a3c0ca91e719ea8101aa46d" prot="public">
          <name>OptionNotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a347fac6a5a40acb21af1b8e7e81aab0e" prot="public">
          <name>ArgumentMismatch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1ac74ddc700cf9fcf91d688b6d31ff9537a45b3e4c35409fb597ea598dc4b984b8c" prot="public">
          <name>BaseClass</name>
          <initializer>= 127</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>These codes are part of every error in CLI. </para>
        </briefdescription>
        <detaileddescription>
<para>They can be obtained from e using e.exit_code or as a quick shortcut, int values from e.get_error_code(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="662" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="662" bodyend="680"/>
      </memberdef>
      <memberdef kind="enum" id="_c_l_i11_8h_1afb034f145c2047fe7abc4431970359b1" prot="public" static="no" strong="yes">
        <type></type>
        <name>AppFormatMode</name>
        <enumvalue id="_c_l_i11_8h_1afb034f145c2047fe7abc4431970359b1a960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <briefdescription>
<para>The normal, detailed help. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1afb034f145c2047fe7abc4431970359b1ab1c94ca2fbc3e78fc30069c8d0f01680" prot="public">
          <name>All</name>
          <briefdescription>
<para>A fully expanded help. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1afb034f145c2047fe7abc4431970359b1ae80155eceb940c89e2de63ad05868db2" prot="public">
          <name>Sub</name>
          <briefdescription>
<para>Used when printed as part of expanded subcommand. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This enum signifies the type of help requested. </para>
        </briefdescription>
        <detaileddescription>
<para>This is passed in by <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>; all user classes must accept this as the second argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="3987" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3987" bodyend="3991"/>
      </memberdef>
      <memberdef kind="enum" id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cb" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>MultiOptionPolicy</name>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cba8ce61dd2505effd96f937fa743b6491f" prot="public">
          <name>Throw</name>
          <briefdescription>
<para>Throw an error if any extra arguments were given. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cba91a7975e6be6ac082721192c7eb98891" prot="public">
          <name>TakeLast</name>
          <briefdescription>
<para>take only the last Expected number of arguments </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cba59a97fc8d11b2b3f89acfe1c3ac891df" prot="public">
          <name>TakeFirst</name>
          <briefdescription>
<para>take only the first Expected number of arguments </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cbaa286d9991c6a547ae25a5f5216164b8f" prot="public">
          <name>Join</name>
          <briefdescription>
<para>merge all the arguments together into a single string via the delimiter character default(&apos;<linebreak/>
&apos;) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cba571fa4972dd227b4097ab6a774ca1263" prot="public">
          <name>TakeAll</name>
          <briefdescription>
<para>just get all the passed argument regardless </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a9c3a9fbd28682838eb3e5ac59ac1b5cbaa0ec87054b5e5b7847d0d8780a01a3d5" prot="public">
          <name>Sum</name>
          <briefdescription>
<para>sum all the arguments together if numerical or concatenate directly without delimiter </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of the multiOption Policy selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4157" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4157" bodyend="4164"/>
      </memberdef>
      <memberdef kind="enum" id="_c_l_i11_8h_1a866d2d267dd96c158e9ddbe52f0e531a" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>config_extras_mode</name>
        <enumvalue id="_c_l_i11_8h_1a866d2d267dd96c158e9ddbe52f0e531aacb5e100e5a9a3e7f6d1fd97512215282" prot="public">
          <name>error</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a866d2d267dd96c158e9ddbe52f0e531aa567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a866d2d267dd96c158e9ddbe52f0e531aaf8fffd92dc01c6b6d02d482b82d5b315" prot="public">
          <name>ignore_all</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_l_i11_8h_1a866d2d267dd96c158e9ddbe52f0e531aad7ba9bbfda42b9657f14ee37ef76150b" prot="public">
          <name>capture</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enumeration of modes of how to deal with extras in config files </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5578" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5578" bodyend="5578"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_c_l_i11_8h_1a012819c9e8b5e04872a271f50f8b8196" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>class T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using enable_if_t =  typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
<para>A copy of enable_if_t from C++14, compatible with C++11. </para>
        </briefdescription>
        <detaileddescription>
<para>We could check to see if C++14 is being used, but it does not hurt to redefine this (even Google does this: <ulink url="https://github.com/google/skia/blob/main/include/private/SkTLogic.h">https://github.com/google/skia/blob/main/include/private/SkTLogic.h</ulink>) It is not in the std namespace anyway, so no harm done. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="993" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1a3bfb9467348a9297aee8c9ba0caed8f4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structpxr___c_l_i_1_1_c_l_i_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using void_t =  typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
<para>A copy of std::void_t from C++17 - same reasoning as enable_if_t, it does not hurt to redefine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="999" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1acdb0eff728aec08ed6fff07d2885ea9d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; B, T, F &gt;::type</type>
        <definition>using conditional_t =  typename std::conditional&lt;B, T, F&gt;::type</definition>
        <argsstring></argsstring>
        <name>conditional_t</name>
        <briefdescription>
<para>A copy of std::conditional_t from C++14 - same reasoning as enable_if_t, it does not hurt to redefine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1002" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1a1883755758db6f711130f6ddcb6856df" prot="public" static="no">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config_base" kindref="compound">ConfigBase</ref></type>
        <definition>using ConfigTOML =  ConfigBase</definition>
        <argsstring></argsstring>
        <name>ConfigTOML</name>
        <briefdescription>
<para>the default <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_config" kindref="compound">Config</ref> is the TOML file format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2801" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1a208c95f48423cc73ccd57fc5d8868943" prot="public" static="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>using results_t =  std::vector&lt;std::string&gt;</definition>
        <argsstring></argsstring>
        <name>results_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4148" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1abaef87dd771adac18290e1d5e3e8c84c" prot="public" static="no">
        <type>std::function&lt; bool(const results_t &amp;)&gt;</type>
        <definition>using callback_t =  std::function&lt;bool(const results_t &amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>callback_t</name>
        <briefdescription>
<para>callback function definition </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4150" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1adacde224f13c22bb4f26b9589e9559fd" prot="public" static="no">
        <type>std::unique_ptr&lt; Option &gt;</type>
        <definition>using Option_p =  std::unique_ptr&lt;Option&gt;</definition>
        <argsstring></argsstring>
        <name>Option_p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4155" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_l_i11_8h_1ac329f94ed97340905999194d652e3218" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &gt;</type>
        <definition>using App_p =  std::shared_ptr&lt;App&gt;</definition>
        <argsstring></argsstring>
        <name>App_p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="5582" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5582" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_l_i11_8h_1a5d60fe578d502a1ae8b9b89de17bedd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void TriggerOn</definition>
        <argsstring>(App *trigger_app, App *app_to_enable)</argsstring>
        <name>TriggerOn</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>trigger_app</declname>
        </param>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app_to_enable</declname>
        </param>
        <briefdescription>
<para>Helper function to enable one option group/subcommand when another is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6837" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8858" bodyend="8862"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ab1c8027344c63fa86c372aa26b377455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void TriggerOn</definition>
        <argsstring>(App *trigger_app, std::vector&lt; App * &gt; apps_to_enable)</argsstring>
        <name>TriggerOn</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>trigger_app</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
          <declname>apps_to_enable</declname>
        </param>
        <briefdescription>
<para>Helper function to enable one option group/subcommand when another is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6840" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8864" bodyend="8875"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ab4758c329d46457999667ce18c8c4339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void TriggerOff</definition>
        <argsstring>(App *trigger_app, App *app_to_enable)</argsstring>
        <name>TriggerOff</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>trigger_app</declname>
        </param>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app_to_enable</declname>
        </param>
        <briefdescription>
<para>Helper function to disable one option group/subcommand when another is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6843" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8877" bodyend="8881"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a52de62c7e0002d05328351a310e9fbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void TriggerOff</definition>
        <argsstring>(App *trigger_app, std::vector&lt; App * &gt; apps_to_enable)</argsstring>
        <name>TriggerOff</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>trigger_app</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> * &gt;</type>
          <declname>apps_to_enable</declname>
        </param>
        <briefdescription>
<para>Helper function to disable one option group/subcommand when another is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6846" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8883" bodyend="8894"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a95b32bdaa122269e1d9d4ee3d4fa460a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void deprecate_option</definition>
        <argsstring>(Option *opt, const std::string &amp;replacement=&quot;&quot;)</argsstring>
        <name>deprecate_option</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Helper function to mark an option as deprecated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6849" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8896" bodyend="8908"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a32a58869a631f3ec99f9fff57b8ae811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pxr_CLI::CLI::deprecate_option</definition>
        <argsstring>(App *app, const std::string &amp;option_name, const std::string &amp;replacement=&quot;&quot;)</argsstring>
        <name>deprecate_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Helper function to mark an option as deprecated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6852" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6852" bodyend="6855"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a83e2e41777db33190888dcbe8bc1051b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pxr_CLI::CLI::deprecate_option</definition>
        <argsstring>(App &amp;app, const std::string &amp;option_name, const std::string &amp;replacement=&quot;&quot;)</argsstring>
        <name>deprecate_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>replacement</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Helper function to mark an option as deprecated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6858" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="6858" bodyend="6861"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a6106e88b25c8803a3ec63a7a5ce5943b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void retire_option</definition>
        <argsstring>(App *app, Option *opt)</argsstring>
        <name>retire_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Helper function to mark an option as retired. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6864" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8910" bodyend="8932"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1a777e7113bc6fdf68ed70e512174fea52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void retire_option</definition>
        <argsstring>(App &amp;app, Option *opt)</argsstring>
        <name>retire_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Helper function to mark an option as retired. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6867" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8934" bodyend="8934"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1ab3ed6c27932bbedb4bd81f525422fdc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void retire_option</definition>
        <argsstring>(App *app, const std::string &amp;option_name)</argsstring>
        <name>retire_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Helper function to mark an option as retired. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6870" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8936" bodyend="8954"/>
      </memberdef>
      <memberdef kind="function" id="_c_l_i11_8h_1af84bbfe616428b100177d6710ab9672e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_INLINE void</type>
        <definition>CLI11_INLINE void retire_option</definition>
        <argsstring>(App &amp;app, const std::string &amp;option_name)</argsstring>
        <name>retire_option</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> &amp;</type>
          <declname>app</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
<para>Helper function to mark an option as retired. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="6873" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="8956" bodyend="8956"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="194" column="1"/>
  </compounddef>
</doxygen>
