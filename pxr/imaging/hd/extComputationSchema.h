//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.h file to make changes.

#ifndef PXR_IMAGING_HD_EXT_COMPUTATION_SCHEMA_H
#define PXR_IMAGING_HD_EXT_COMPUTATION_SCHEMA_H

#include "pxr/imaging/hd/api.h"

#include "pxr/imaging/hd/schema.h" 

PXR_NAMESPACE_OPEN_SCOPE

//-----------------------------------------------------------------------------

#define HDEXTCOMPUTATION_SCHEMA_TOKENS \
    (extComputation) \
    (inputValues) \
    (inputComputations) \
    (outputs) \
    (glslKernel) \
    (cpuCallback) \
    (dispatchCount) \
    (elementCount) \

TF_DECLARE_PUBLIC_TOKENS(HdExtComputationSchemaTokens, HD_API,
    HDEXTCOMPUTATION_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------

class HdExtComputationSchema : public HdSchema
{
public:
    HdExtComputationSchema(HdContainerDataSourceHandle container)
    : HdSchema(container) {}

    //ACCESSORS

    HD_API
    HdContainerDataSourceHandle GetInputValues();
    HD_API
    HdVectorDataSourceHandle GetInputComputations();
    HD_API
    HdVectorDataSourceHandle GetOutputs();
    HD_API
    HdStringDataSourceHandle GetGlslKernel();
    HD_API
    HdDataSourceBaseHandle GetCpuCallback();
    HD_API
    HdSizetDataSourceHandle GetDispatchCount();
    HD_API
    HdSizetDataSourceHandle GetElementCount();

    // RETRIEVING AND CONSTRUCTING

    HD_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdContainerDataSourceHandle &inputValues,
        const HdVectorDataSourceHandle &inputComputations,
        const HdVectorDataSourceHandle &outputs,
        const HdStringDataSourceHandle &glslKernel,
        const HdDataSourceBaseHandle &cpuCallback,
        const HdSizetDataSourceHandle &dispatchCount,
        const HdSizetDataSourceHandle &elementCount
    );

    class Builder
    {
    public:
        HD_API
        Builder &SetInputValues(
            const HdContainerDataSourceHandle &inputValues);
        HD_API
        Builder &SetInputComputations(
            const HdVectorDataSourceHandle &inputComputations);
        HD_API
        Builder &SetOutputs(
            const HdVectorDataSourceHandle &outputs);
        HD_API
        Builder &SetGlslKernel(
            const HdStringDataSourceHandle &glslKernel);
        HD_API
        Builder &SetCpuCallback(
            const HdDataSourceBaseHandle &cpuCallback);
        HD_API
        Builder &SetDispatchCount(
            const HdSizetDataSourceHandle &dispatchCount);
        HD_API
        Builder &SetElementCount(
            const HdSizetDataSourceHandle &elementCount);

        HD_API
        HdContainerDataSourceHandle Build();

    private:
        HdContainerDataSourceHandle _inputValues;
        HdVectorDataSourceHandle _inputComputations;
        HdVectorDataSourceHandle _outputs;
        HdStringDataSourceHandle _glslKernel;
        HdDataSourceBaseHandle _cpuCallback;
        HdSizetDataSourceHandle _dispatchCount;
        HdSizetDataSourceHandle _elementCount;
    };

    HD_API
    static HdExtComputationSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    HD_API
    static const HdDataSourceLocator &GetDefaultLocator();

    HD_API
    static const HdDataSourceLocator &GetInputValuesLocator();
    HD_API
    static const HdDataSourceLocator &GetInputComputationsLocator();
    HD_API
    static const HdDataSourceLocator &GetOutputsLocator();
    HD_API
    static const HdDataSourceLocator &GetDispatchCountLocator();
    HD_API
    static const HdDataSourceLocator &GetElementCountLocator();
    HD_API
    static const HdDataSourceLocator &GetGlslKernelLocator();

};

PXR_NAMESPACE_CLOSE_SCOPE

#endif