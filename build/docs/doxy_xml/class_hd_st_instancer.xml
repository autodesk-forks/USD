<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_instancer" kind="class" language="C++" prot="public">
    <compoundname>HdStInstancer</compoundname>
    <basecompoundref refid="class_hd_instancer" prot="public" virt="non-virtual">HdInstancer</basecompoundref>
    <includes refid="t_2instancer_8h" local="no">instancer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_instancer_1af693dae72f5d74302a40ad2a442af053" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _instancePrimvarNumElements</definition>
        <argsstring></argsstring>
        <name>_instancePrimvarNumElements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="104" column="1" bodyfile="pxr/imaging/hdSt/instancer.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_instancer_1a35f8786f0f1d878733940247ef55a59b" prot="private" static="no" mutable="no">
        <type>HdBufferArrayRangeSharedPtr</type>
        <definition>HdBufferArrayRangeSharedPtr _instancePrimvarRange</definition>
        <argsstring></argsstring>
        <name>_instancePrimvarRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="109" column="1" bodyfile="pxr/imaging/hdSt/instancer.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_instancer_1ab3d8554244e0c8fb5cc581684df80258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStInstancer</definition>
        <argsstring>(HdSceneDelegate *delegate, SdfPath const &amp;id)</argsstring>
        <name>HdStInstancer</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_instancer_1a1ff320f5516aeeb22fb8316c87ce08de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Sync</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, HdDirtyBits *dirtyBits) override</argsstring>
        <name>Sync</name>
        <reimplements refid="class_hd_instancer_1a22a4ee0efeaeb01071c64ae09f62b29b">Sync</reimplements>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_instancer_1af116052183a9228fcfdd120f97fd75c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBufferArrayRangeSharedPtr</type>
        <definition>HdBufferArrayRangeSharedPtr GetInstancePrimvarRange</definition>
        <argsstring>() const</argsstring>
        <name>GetInstancePrimvarRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="82" column="1" bodyfile="pxr/imaging/hdSt/instancer.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_instancer_1a0bd892a6262e12efca06436ab34afc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API VtIntArray</type>
        <definition>HDST_API VtIntArray GetInstanceIndices</definition>
        <argsstring>(SdfPath const &amp;prototypeId)</argsstring>
        <name>GetInstanceIndices</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>prototypeId</declname>
        </param>
        <briefdescription>
<para>Populates the instance index indirection buffer for <computeroutput>prototypeId</computeroutput> and returns a flat array of instance index tuples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_st_instancer_1a6094749b257fa63c12d9ab269df0c6af" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void _GetInstanceIndices</definition>
        <argsstring>(SdfPath const &amp;prototypeId, std::vector&lt; VtIntArray &gt; *instanceIndicesArray)</argsstring>
        <name>_GetInstanceIndices</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>prototypeId</declname>
        </param>
        <param>
          <type>std::vector&lt; VtIntArray &gt; *</type>
          <declname>instanceIndicesArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_instancer_1a8479c83c375154afd434c2ddb8a37319" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void _SyncPrimvars</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdDirtyBits *dirtyBits)</argsstring>
        <name>_SyncPrimvars</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/instancer.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>HdSt implements instancing by drawing each proto multiple times with a single draw call. </para>
    </briefdescription>
    <detaileddescription>
<para>Application of instance primvars (like transforms) is done in shaders. Instance transforms in particular are computed in ApplyInstanceTransform in instancing.glslfx.</para>
<para>If this instancer is nested, instance indices will be computed recursively by ascending the hierarchy. <ref refid="class_hd_st_instancer" kindref="compound">HdStInstancer</ref> computes a flattened index structure for each prototype by taking the cartesian product of the instance indices at each level.</para>
<para>For example:<itemizedlist>
<listitem><para>InstancerA draws instances [ProtoX, InstancerB, ProtoX, InstancerB]</para>
</listitem><listitem><para>InstancerB draws instances [ProtoY, ProtoZ, ProtoY] The flattened index for Proto Y is: [0, 0, 1]; [1, 0, 3]; [2, 2, 1]; [3, 2, 3]; where the first tuple element is the position in the flattened index; the second tuple element is the position in Instancer B; and the last tuple element is the position in Instancer A.</para>
</listitem></itemizedlist>
</para>
<para>The flattened index gives the number of times the proto is drawn, and the index tuple can be passed to the shader so that each instance can look up its instance primvars in the bound primvar arrays. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3189">
        <label>HdInstancer</label>
        <link refid="class_hd_instancer"/>
      </node>
      <node id="3188">
        <label>HdStInstancer</label>
        <link refid="class_hd_st_instancer"/>
        <childnode refid="3189" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3191">
        <label>HdInstancer</label>
        <link refid="class_hd_instancer"/>
      </node>
      <node id="3190">
        <label>HdStInstancer</label>
        <link refid="class_hd_st_instancer"/>
        <childnode refid="3191" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/instancer.h" line="68" column="1" bodyfile="pxr/imaging/hdSt/instancer.h" bodystart="68" bodyend="110"/>
    <listofallmembers>
      <member refid="class_hd_st_instancer_1a6094749b257fa63c12d9ab269df0c6af" prot="protected" virt="non-virtual"><scope>HdStInstancer</scope><name>_GetInstanceIndices</name></member>
      <member refid="class_hd_st_instancer_1af693dae72f5d74302a40ad2a442af053" prot="private" virt="non-virtual"><scope>HdStInstancer</scope><name>_instancePrimvarNumElements</name></member>
      <member refid="class_hd_st_instancer_1a35f8786f0f1d878733940247ef55a59b" prot="private" virt="non-virtual"><scope>HdStInstancer</scope><name>_instancePrimvarRange</name></member>
      <member refid="class_hd_instancer_1a72e2aaa50810b72b5c322ca5c93c42a8" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>_SyncInstancerAndParents</name></member>
      <member refid="class_hd_st_instancer_1a8479c83c375154afd434c2ddb8a37319" prot="protected" virt="non-virtual"><scope>HdStInstancer</scope><name>_SyncPrimvars</name></member>
      <member refid="class_hd_instancer_1aa0549b24aee8576e46bd2dbffddad752" prot="protected" virt="non-virtual"><scope>HdStInstancer</scope><name>_UpdateInstancer</name></member>
      <member refid="class_hd_instancer_1a385eed04c15e636796b187bfdf0fcbf0" prot="public" virt="virtual"><scope>HdStInstancer</scope><name>Finalize</name></member>
      <member refid="class_hd_instancer_1a0ac325c9543f5e9a831d1e87fc661348" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetBuiltinPrimvarNames</name></member>
      <member refid="class_hd_instancer_1a7a54e2c50b8cce793007581c7450b2af" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetDelegate</name></member>
      <member refid="class_hd_instancer_1a9301243d9273afcba6395e86047490ab" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetId</name></member>
      <member refid="class_hd_instancer_1ade051cd8ff53a108b7e6c27be99a5e3a" prot="public" virt="virtual"><scope>HdStInstancer</scope><name>GetInitialDirtyBitsMask</name></member>
      <member refid="class_hd_st_instancer_1a0bd892a6262e12efca06436ab34afc2c" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetInstanceIndices</name></member>
      <member refid="class_hd_st_instancer_1af116052183a9228fcfdd120f97fd75c7" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetInstancePrimvarRange</name></member>
      <member refid="class_hd_instancer_1afd35976486cc4ec447827980a44d97e5" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetInstancerNumLevels</name></member>
      <member refid="class_hd_instancer_1a1bb2fef816df9482f8c7f80799c312d1" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>GetParentId</name></member>
      <member refid="class_hd_instancer_1a68716c7888bc2c0125d10b6cd402c24d" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>HdInstancer</name></member>
      <member refid="class_hd_st_instancer_1ab3d8554244e0c8fb5cc581684df80258" prot="public" virt="non-virtual"><scope>HdStInstancer</scope><name>HdStInstancer</name></member>
      <member refid="class_hd_st_instancer_1a1ff320f5516aeeb22fb8316c87ce08de" prot="public" virt="virtual"><scope>HdStInstancer</scope><name>Sync</name></member>
      <member refid="class_hd_instancer_1abcc58e73a84dc6fe5ebaffe8fb2be87b" prot="public" virt="virtual"><scope>HdStInstancer</scope><name>~HdInstancer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
