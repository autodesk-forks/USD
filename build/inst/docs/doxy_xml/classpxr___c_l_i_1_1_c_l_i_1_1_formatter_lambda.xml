<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" kind="class" language="C++" prot="public" final="yes">
    <compoundname>pxr_CLI::CLI::FormatterLambda</compoundname>
    <basecompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" prot="public" virt="non-virtual">FormatterBase</basecompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a658f236969d49175d4dbef1872cc5305" prot="private" static="no">
        <type>std::function&lt; std::string(const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *, std::string, AppFormatMode)&gt;</type>
        <definition>using funct_t =  std::function&lt;std::string(const App *, std::string, AppFormatMode)&gt;</definition>
        <argsstring></argsstring>
        <name>funct_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4055" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4055" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1ad2e12ba2e6e93035f581d9996d6e71a7" prot="private" static="no" mutable="no">
        <type>funct_t</type>
        <definition>funct_t lambda_</definition>
        <argsstring></argsstring>
        <name>lambda_</name>
        <briefdescription>
<para>The lambda to hold and run. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4058" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4058" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1afcc46be22ce4f196583ef32954b0d2bf" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>FormatterLambda</definition>
        <argsstring>(funct_t funct)</argsstring>
        <name>FormatterLambda</name>
        <param>
          <type>funct_t</type>
          <declname>funct</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda" kindref="compound">FormatterLambda</ref> with a lambda function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4062" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4062" bodyend="4062"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1aadde7587188a11294aec276b4200a18c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~FormatterLambda</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~FormatterLambda</name>
        <briefdescription>
<para>Adding a destructor (mostly to make GCC 4.7 happy) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4065" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4065" bodyend="4065"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a87e41ec34986642e4e9900bedacdf2ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string make_help</definition>
        <argsstring>(const App *app, std::string name, AppFormatMode mode) const override</argsstring>
        <name>make_help</name>
        <reimplements refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a3c3a2300178ed17ecf98b0e04313a604">make_help</reimplements>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>AppFormatMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This will simply call the lambda function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4068" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4068" bodyend="4070"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a specialty override for lambda functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1206">
        <label>FormatterBase</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base"/>
      </node>
      <node id="1205">
        <label>FormatterLambda</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda"/>
        <childnode refid="1206" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1208">
        <label>FormatterBase</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base"/>
      </node>
      <node id="1207">
        <label>FormatterLambda</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda"/>
        <childnode refid="1208" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4054" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4054" bodyend="4071"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a9d49f5969dc6e08c8cfc7fd1f4a884e3" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>column_width</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>column_width_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1aae16b56c9f3cb42ce562e2cfc50be9b2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a2465b6a6e87a6836cbb1dddf600d6161" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ada3e2449e7eff5e8456599f1f2b8ad82" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1afcc46be22ce4f196583ef32954b0d2bf" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>FormatterLambda</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a658f236969d49175d4dbef1872cc5305" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>funct_t</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a0a00ae86f1d2262a981ec52aa3580f62" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>get_column_width</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>get_label</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a413bff586d9480543b25e5b05b5f279a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>label</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>labels_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1ad2e12ba2e6e93035f581d9996d6e71a7" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>lambda_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1a87e41ec34986642e4e9900bedacdf2ac" prot="public" virt="virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>make_help</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a05a272478763bef4528f38e3dbac1bbc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a5b34fbb21629142e6ddad35a0174667d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a55011f5b55ffaa71d04d05df2ea0e8e2" prot="public" virt="virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>~FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_lambda_1aadde7587188a11294aec276b4200a18c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::FormatterLambda</scope><name>~FormatterLambda</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
