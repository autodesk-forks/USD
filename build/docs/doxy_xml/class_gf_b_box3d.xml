<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_b_box3d" kind="class" language="C++" prot="public">
    <compoundname>GfBBox3d</compoundname>
    <includes refid="bbox3d_8h" local="no">bbox3d.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_b_box3d_1acef601a59200218a8818b7cdb73a965a" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d _box</definition>
        <argsstring></argsstring>
        <name>_box</name>
        <briefdescription>
<para>The axis-aligned box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="229" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_b_box3d_1ab887b8e3b267bb05b202a8ef4c990832" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d _matrix</definition>
        <argsstring></argsstring>
        <name>_matrix</name>
        <briefdescription>
<para>Transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="231" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_b_box3d_1a17fec0747213e258a6935d5ad61dd68b" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d _inverse</definition>
        <argsstring></argsstring>
        <name>_inverse</name>
        <briefdescription>
<para>Inverse of the transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="233" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_b_box3d_1a4ba8fb4811c1c2595665b50b9767f117" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isDegenerate</definition>
        <argsstring></argsstring>
        <name>_isDegenerate</name>
        <briefdescription>
<para>Flag indicating whether the matrix is degenerate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="235" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_b_box3d_1ab8649c0f6a220ab96aa15feaa76b5f0f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _hasZeroAreaPrimitives</definition>
        <argsstring></argsstring>
        <name>_hasZeroAreaPrimitives</name>
        <briefdescription>
<para>Flag indicating whether the bbox contains zero-area primitives. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="237" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_b_box3d_1a5bad92925c6549f3c24f6432f535207c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfBBox3d</definition>
        <argsstring>()</argsstring>
        <name>GfBBox3d</name>
        <briefdescription>
<para>The default constructor leaves the box empty, the transformation matrix identity, and the <ref refid="class_gf_b_box3d_1bbox3d_zeroAreaFlag" kindref="member">zero-area</ref>primitives flag" <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="91" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1afa26564bf84c858cd62b62d5d69a1feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfBBox3d</definition>
        <argsstring>(const GfRange3d &amp;box)</argsstring>
        <name>GfBBox3d</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
<para>This constructor takes a box and sets the matrix to identity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="99" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a10943a762aee7475ebb49adc5894361e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfBBox3d</definition>
        <argsstring>(const GfRange3d &amp;box, const GfMatrix4d &amp;matrix)</argsstring>
        <name>GfBBox3d</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>This constructor takes a box and a transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="108" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a33cf66638899b67da2c1c0b530511593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Set</definition>
        <argsstring>(const GfRange3d &amp;box, const GfMatrix4d &amp;matrix)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Sets the axis-aligned box and transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="114" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a18b43a6459443f7bbf785cf4bb3ab926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMatrix</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>SetMatrix</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Sets the transformation matrix only. </para>
        </briefdescription>
        <detaileddescription>
<para>The axis-aligned box is not modified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="121" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a9a9d4ee308067cd97bdc644fd50880d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRange</definition>
        <argsstring>(const GfRange3d &amp;box)</argsstring>
        <name>SetRange</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
<para>Sets the range of the axis-aligned box only. </para>
        </briefdescription>
        <detaileddescription>
<para>The transformation matrix is not modified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="127" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1ab5846341b40969000f209753753f3ec6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; GetRange</definition>
        <argsstring>() const</argsstring>
        <name>GetRange</name>
        <briefdescription>
<para>Returns the range of the axis-aligned untransformed box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="132" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a8bcc9f5549f7114ee86b4e51de673a27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; GetBox</definition>
        <argsstring>() const</argsstring>
        <name>GetBox</name>
        <briefdescription>
<para>Returns the range of the axis-aligned untransformed box. </para>
        </briefdescription>
        <detaileddescription>
<para>This synonym of <computeroutput>GetRange</computeroutput> exists for compatibility purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="138" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a480814b88014103802db7176a863963a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
        <definition>const GfMatrix4d&amp; GetMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetMatrix</name>
        <briefdescription>
<para>Returns the transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="143" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1acd259aecd8df4689e5c3a33fe299a56d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
        <definition>const GfMatrix4d&amp; GetInverseMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetInverseMatrix</name>
        <briefdescription>
<para>Returns the inverse of the transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the identity matrix if the transformation matrix is not invertible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="149" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a0064e921b737bf12143a36e08692bd77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetHasZeroAreaPrimitives</definition>
        <argsstring>(bool hasThem)</argsstring>
        <name>SetHasZeroAreaPrimitives</name>
        <param>
          <type>bool</type>
          <declname>hasThem</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="class_gf_b_box3d_1bbox3d_zeroAreaFlag" kindref="member">zero-area primitives flag</ref> to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="155" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a0500bd8e076695a0c9c6b886d26cc894" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasZeroAreaPrimitives</definition>
        <argsstring>() const</argsstring>
        <name>HasZeroAreaPrimitives</name>
        <briefdescription>
<para>Returns the current state of the <ref refid="class_gf_b_box3d_1bbox3d_zeroAreaFlag" kindref="member">zero-area</ref>primitives flag". </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="161" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a1d0b29aafae5f86daae413b3638f5688" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetVolume</definition>
        <argsstring>() const</argsstring>
        <name>GetVolume</name>
        <briefdescription>
<para>Returns the volume of the box (0 for an empty box). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a1b29e20ad84e3c38219966cb9a83fc60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Transform</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transforms the bounding box by the given matrix, which is assumed to be a global transformation to apply to the box. </para>
        </briefdescription>
        <detaileddescription>
<para>Therefore, this just post-multiplies the box&apos;s matrix by <computeroutput>matrix</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="172" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1aeef415cca35b7807ac60a72ed9e1af8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GF_API GfRange3d ComputeAlignedRange</definition>
        <argsstring>() const</argsstring>
        <name>ComputeAlignedRange</name>
        <briefdescription>
<para>Returns the axis-aligned range (as a <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput>) that results from applying the transformation matrix to the wxis-aligned box and aligning the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1aca5eb3958e87f185cdce528526d46a35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d ComputeAlignedBox</definition>
        <argsstring>() const</argsstring>
        <name>ComputeAlignedBox</name>
        <briefdescription>
<para>Returns the axis-aligned range (as a <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput>) that results from applying the transformation matrix to the axis-aligned box and aligning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This synonym for <computeroutput>ComputeAlignedRange</computeroutput> exists for compatibility purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="186" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1a532b118a47652e67bc2fe8542f2a9602" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d ComputeCentroid</definition>
        <argsstring>() const</argsstring>
        <name>ComputeCentroid</name>
        <briefdescription>
<para>Returns the centroid of the bounding box. </para>
        </briefdescription>
        <detaileddescription>
<para>The centroid is computed as the transformed centroid of the range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1afb8a5781197f19df7c65d074c5de6bb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfBBox3d &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Component-wise equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The axis-aligned boxes and transformation matrices match exactly for bboxes to be considered equal. (To compare equality of the actual boxes, you can compute both aligned boxes and test the results for equality.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="214" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_b_box3d_1ae41927b9f667532bae55987f80f8d806" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfBBox3d &amp;that) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>Component-wise inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The axis-aligned boxes and transformation matrices match exactly for bboxes to be considered equal. (To compare equality of the actual boxes, you can compute both aligned boxes and test the results for equality.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="223" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="223" bodyend="225"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_b_box3d_1ae3f73c6451d8887dad8a45109f0d4d40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>static GF_API GfBBox3d Combine</definition>
        <argsstring>(const GfBBox3d &amp;b1, const GfBBox3d &amp;b2)</argsstring>
        <name>Combine</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Combines two bboxes, returning a new bbox that contains both. </para>
        </briefdescription>
        <detaileddescription>
<para>This uses the coordinate space of one of the two original boxes as the space of the result; it uses the one that produces whe smaller of the two resulting boxes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="195" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_b_box3d_1ad8b4f308bf25cec17fbb10043c9ccff3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfBBox3d &amp;b)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="203" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="203" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_b_box3d_1a55b186ea45ec8f8e0a7ab5dd76f89216" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void _SetMatrices</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>_SetMatrices</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Sets the transformation matrix and the inverse, checking for degeneracies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="242" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_b_box3d_1a20d140e95371f329273eb434ac771537" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>static GfBBox3d _CombineInOrder</definition>
        <argsstring>(const GfBBox3d &amp;b1, const GfBBox3d &amp;b2)</argsstring>
        <name>_CombineInOrder</name>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>This is used by <computeroutput><ref refid="class_gf_b_box3d_1ae3f73c6451d8887dad8a45109f0d4d40" kindref="member">Combine()</ref></computeroutput> when it is determined which coordinate space to use to combine two boxes: <computeroutput>b2</computeroutput> is transformed into the space of <computeroutput>b1</computeroutput> and the results are merged in that space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="247" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: arbitrarily oriented 3D bounding box. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a three-dimensional bounding box as an axis-aligned box (<computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput>) and a matrix (<computeroutput><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></computeroutput>) to transform it into the correct space.</para>
<para>A <computeroutput><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></computeroutput> is more useful than using just <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> instances (which are always axis-aligned) for these reasons:</para>
<para><itemizedlist>
<listitem><para>When an axis-aligned bounding box is transformed several times, each transformation can result in inordinate growth of the bounding box. By storing the transformation separately, it can be applied once at the end, resulting in a much better fit. For example, if the bounding box at the leaf of a scene graph is transformed through several levels of the graph hierarchy to the coordinate space at the root, a <computeroutput><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></computeroutput> is generally much smaller than the <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> computed by transforming the box at each level.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem><para>When two or more such bounding boxes are combined, having the transformations stored separately means that there is a better opportunity to choose a better coordinate space in which to combine the boxes.</para>
</listitem>
</itemizedlist>
<anchor id="class_gf_b_box3d_1bbox3d_zeroAreaFlag"/><bold> The Zero-area Primitives Flag </bold></para>
<para>When bounding boxes are used in intersection test culling, it is sometimes useful to extend them a little bit to allow lower-dimensional objects with zero area, such as lines and points, to be intersected. For example, consider a cube constructed of line segments. The bounding box for this shape fits the cube exactly. If an application wants to allow a near-miss of the silhouette edges of the cube to be considered an intersection, it has to loosen the bbox culling test a little bit.</para>
<para>To distinguish when this loosening is necessary, each <computeroutput><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></computeroutput> instance maintains a flag indicating whether any zero-area primitives are contained within it. The application is responsible for setting this flag correctly by calling <computeroutput><ref refid="class_gf_b_box3d_1a0064e921b737bf12143a36e08692bd77" kindref="member">SetHasZeroAreaPrimitives()</ref></computeroutput>. The flag can be accessed during intersection tests by calling <computeroutput><ref refid="class_gf_b_box3d_1a0500bd8e076695a0c9c6b886d26cc894" kindref="member">HasZeroAreaPrimitives()</ref></computeroutput>. This flag is set by default in all constructors to <computeroutput>false</computeroutput>. </para>
    </detaileddescription>
    <location file="pxr/base/gf/bbox3d.h" line="84" column="1" bodyfile="pxr/base/gf/bbox3d.h" bodystart="84" bodyend="248"/>
    <listofallmembers>
      <member refid="class_gf_b_box3d_1acef601a59200218a8818b7cdb73a965a" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_box</name></member>
      <member refid="class_gf_b_box3d_1a20d140e95371f329273eb434ac771537" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_CombineInOrder</name></member>
      <member refid="class_gf_b_box3d_1ab8649c0f6a220ab96aa15feaa76b5f0f" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_hasZeroAreaPrimitives</name></member>
      <member refid="class_gf_b_box3d_1a17fec0747213e258a6935d5ad61dd68b" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_inverse</name></member>
      <member refid="class_gf_b_box3d_1a4ba8fb4811c1c2595665b50b9767f117" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_isDegenerate</name></member>
      <member refid="class_gf_b_box3d_1ab887b8e3b267bb05b202a8ef4c990832" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_matrix</name></member>
      <member refid="class_gf_b_box3d_1a55b186ea45ec8f8e0a7ab5dd76f89216" prot="private" virt="non-virtual"><scope>GfBBox3d</scope><name>_SetMatrices</name></member>
      <member refid="class_gf_b_box3d_1ae3f73c6451d8887dad8a45109f0d4d40" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>Combine</name></member>
      <member refid="class_gf_b_box3d_1aca5eb3958e87f185cdce528526d46a35" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>ComputeAlignedBox</name></member>
      <member refid="class_gf_b_box3d_1aeef415cca35b7807ac60a72ed9e1af8c" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>ComputeAlignedRange</name></member>
      <member refid="class_gf_b_box3d_1a532b118a47652e67bc2fe8542f2a9602" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>ComputeCentroid</name></member>
      <member refid="class_gf_b_box3d_1a8bcc9f5549f7114ee86b4e51de673a27" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GetBox</name></member>
      <member refid="class_gf_b_box3d_1acd259aecd8df4689e5c3a33fe299a56d" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GetInverseMatrix</name></member>
      <member refid="class_gf_b_box3d_1a480814b88014103802db7176a863963a" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GetMatrix</name></member>
      <member refid="class_gf_b_box3d_1ab5846341b40969000f209753753f3ec6" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GetRange</name></member>
      <member refid="class_gf_b_box3d_1a1d0b29aafae5f86daae413b3638f5688" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GetVolume</name></member>
      <member refid="class_gf_b_box3d_1a5bad92925c6549f3c24f6432f535207c" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GfBBox3d</name></member>
      <member refid="class_gf_b_box3d_1afa26564bf84c858cd62b62d5d69a1feb" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GfBBox3d</name></member>
      <member refid="class_gf_b_box3d_1a10943a762aee7475ebb49adc5894361e" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>GfBBox3d</name></member>
      <member refid="class_gf_b_box3d_1ad8b4f308bf25cec17fbb10043c9ccff3" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>hash_value</name></member>
      <member refid="class_gf_b_box3d_1a0500bd8e076695a0c9c6b886d26cc894" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>HasZeroAreaPrimitives</name></member>
      <member refid="class_gf_b_box3d_1ae41927b9f667532bae55987f80f8d806" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>operator !=</name></member>
      <member refid="class_gf_b_box3d_1afb8a5781197f19df7c65d074c5de6bb7" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>operator==</name></member>
      <member refid="class_gf_b_box3d_1a33cf66638899b67da2c1c0b530511593" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>Set</name></member>
      <member refid="class_gf_b_box3d_1a0064e921b737bf12143a36e08692bd77" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>SetHasZeroAreaPrimitives</name></member>
      <member refid="class_gf_b_box3d_1a18b43a6459443f7bbf785cf4bb3ab926" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>SetMatrix</name></member>
      <member refid="class_gf_b_box3d_1a9a9d4ee308067cd97bdc644fd50880d7" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>SetRange</name></member>
      <member refid="class_gf_b_box3d_1a1b29e20ad84e3c38219966cb9a83fc60" prot="public" virt="non-virtual"><scope>GfBBox3d</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
