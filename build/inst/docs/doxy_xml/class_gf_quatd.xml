<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_quatd" kind="class" language="C++" prot="public">
    <compoundname>GfQuatd</compoundname>
    <includes refid="quatd_8h" local="no">quatd.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_quatd_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="62" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_quatd_1a9ab2b274e8c061dfdd061ad84a788fed" prot="public" static="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>typedef GfVec3d ImaginaryType</definition>
        <argsstring></argsstring>
        <name>ImaginaryType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="63" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_quatd_1af62745c5016993fd2ea0a0bc3660b073" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _imaginary</definition>
        <argsstring></argsstring>
        <name>_imaginary</name>
        <briefdescription>
<para>Imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="256" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_quatd_1a94a434dfcd37e256aec323eaaec489ab" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
<para>Real part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="259" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_quatd_1ad6379bb8680e00cde07137fc2689f8a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatd</definition>
        <argsstring>()</argsstring>
        <name>GfQuatd</name>
        <briefdescription>
<para>Default constructor leaves the quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="66" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a31f1f8ff31d3930830e439305e9d6855" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatd</definition>
        <argsstring>(double realVal)</argsstring>
        <name>GfQuatd</name>
        <param>
          <type>double</type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>Initialize the real coefficient to <computeroutput>realVal</computeroutput> and the imaginary coefficients to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically must be normalized, reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="75" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a32c9f9c0c7110c71403b846f69f25074" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatd</definition>
        <argsstring>(double real, double i, double j, double k)</argsstring>
        <name>GfQuatd</name>
        <param>
          <type>double</type>
          <declname>real</declname>
        </param>
        <param>
          <type>double</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>j</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Initialize the real and imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="78" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a36941ce9941d3a88bec128d020afe347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatd</definition>
        <argsstring>(double real, const GfVec3d &amp;imaginary)</argsstring>
        <name>GfQuatd</name>
        <param>
          <type>double</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>Initialize the real and imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="84" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a9f2f5200b71d832f767711a10713b183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfQuatd</definition>
        <argsstring>(class GfQuatf const &amp;other)</argsstring>
        <name>GfQuatd</name>
        <param>
          <type>class <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a313447338811ad2ae8400c116b626074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfQuatd</definition>
        <argsstring>(class GfQuath const &amp;other)</argsstring>
        <name>GfQuatd</name>
        <param>
          <type>class <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_quath" kindref="compound">GfQuath</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a64a370c680cd9af05422246b07ea14e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Return the real coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="105" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1af17880b08ad6ae5a3d6437e5a85b12a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(double real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>double</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Set the real coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="108" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1ad2b8acb7c27178a2d4a3f42ccd0616fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetImaginary</definition>
        <argsstring>() const</argsstring>
        <name>GetImaginary</name>
        <briefdescription>
<para>Return the imaginary coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="111" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a9269c86ceaaa51d43e86907eb4e2d5a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImaginary</definition>
        <argsstring>(const GfVec3d &amp;imaginary)</argsstring>
        <name>SetImaginary</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>Set the imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="114" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1ab8b008b24bb64295fbec928e20b3f231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImaginary</definition>
        <argsstring>(double i, double j, double k)</argsstring>
        <name>SetImaginary</name>
        <param>
          <type>double</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>j</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Set the imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="119" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Return geometric length of this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="124" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a351411582f7bf8ea1fa5a831ad3712cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd GetNormalized</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>length of this quaternion is smaller than <computeroutput>eps</computeroutput>, return the identity quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="129" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a5907dbff2d555470fa5a69a819928f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double Normalize</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this quaternion in place to unit length, returning the length before normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a8f6523a99fe7a142ad3fe9e838b9d555" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd GetConjugate</definition>
        <argsstring>() const</argsstring>
        <name>GetConjugate</name>
        <briefdescription>
<para>Return this quaternion&apos;s conjugate, which is the quaternion with the same real coefficient and negated imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="143" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a8542aa1d65cd74272d2536b769fb7047" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Return this quaternion&apos;s inverse, or reciprocal. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the quaternion&apos;s conjugate divided by it&apos;s squared length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="149" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a40e6eacb77f6700322343c5cf8f6aff0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d Transform</definition>
        <argsstring>(const GfVec3d &amp;point) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Transform the <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the quaternion is normalized, the transformation is a rotation. Given a <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> q, q.Transform(point) is equivalent to: <verbatim>(q * GfQuatd(0, point) * q.GetInverse()).GetImaginary()
</verbatim></para>
<para>but is more efficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a604db50e0abfdca33ea4c8f50bba4b93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Component-wise negation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="169" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a8e9f206eaaf4db3527f0b5dd1392ea23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfQuatd &amp;q) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="175" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a9d035e9798b57d955a0dc7fde77099f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const GfQuatd &amp;q) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="182" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a62e3ad3f4054244acfb06da42150ce82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>GF_API GfQuatd&amp; operator *=</definition>
        <argsstring>(const GfQuatd &amp;q)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Post-multiply quaternion <computeroutput>q</computeroutput> into this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1abd7cbd3fe6e9e459b4c8b32a50729225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>GfQuatd&amp; operator *=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiply this quaternion&apos;s coefficients by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="191" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a081077d557ec86b8497c9dbfe71283e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>GfQuatd&amp; operator/=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Divide this quaternion&apos;s coefficients by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="198" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a3dc75000d1ffc52d0dc1cdc5b8516991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>GfQuatd&amp; operator+=</definition>
        <argsstring>(const GfQuatd &amp;q)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Add quaternion <computeroutput>q</computeroutput> to this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="205" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1abf3768bc391302540b6f2603497c5043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>GfQuatd&amp; operator -=</definition>
        <argsstring>(const GfQuatd &amp;q)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="212" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="212" bodyend="216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_quatd_1a98fa03b3299d06be49801143410b2b45" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>static GfQuatd GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Return the zero quaternion, with real coefficient 0 and an imaginary coefficients all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="98" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatd_1a13c86f5b99d17ce8f8a793dcc19ac27a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>static GfQuatd GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Return the identity quaternion, with real coefficient 1 and an imaginary coefficients all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="102" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="102" bodyend="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_quatd_1ad03210e4a2146a8a25bd77fafc6d4cff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfQuatd &amp;q)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="164" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1af84ffcb3e780e136f5a469d1a7b60584" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator+</definition>
        <argsstring>(const GfQuatd &amp;q1, const GfQuatd &amp;q2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="220" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1a5605afceff680600e37abf1f168b3694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator -</definition>
        <argsstring>(const GfQuatd &amp;q1, const GfQuatd &amp;q2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="226" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1ac544fff12a39e3bdfa5234f1e95a4dc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator *</definition>
        <argsstring>(const GfQuatd &amp;q1, const GfQuatd &amp;q2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternions <computeroutput>q1</computeroutput> and <computeroutput>q2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="232" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1a5d393088aa4c004749c86842ded552a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator *</definition>
        <argsstring>(const GfQuatd &amp;q, double s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="238" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1aea58379973d09d3738bfd5a622e77fee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator *</definition>
        <argsstring>(double s, const GfQuatd &amp;q)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="244" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatd_1aa12d33eac2ef45fea4bdb5304e4e65dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd operator/</definition>
        <argsstring>(const GfQuatd &amp;q, double s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="250" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="250" bodyend="252"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_quatd_1a841fe6ade459e6734da13495ee20ee84" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double _GetLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>_GetLengthSquared</name>
        <briefdescription>
<para>Returns the square of the length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="263" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="263" bodyend="265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: a quaternion, a complex number with a real coefficient and three imaginary coefficients, stored as a 3-vector. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/gf/quatd.h" line="60" column="1" bodyfile="pxr/base/gf/quatd.h" bodystart="59" bodyend="266"/>
    <listofallmembers>
      <member refid="class_gf_quatd_1a841fe6ade459e6734da13495ee20ee84" prot="private" virt="non-virtual"><scope>GfQuatd</scope><name>_GetLengthSquared</name></member>
      <member refid="class_gf_quatd_1af62745c5016993fd2ea0a0bc3660b073" prot="private" virt="non-virtual"><scope>GfQuatd</scope><name>_imaginary</name></member>
      <member refid="class_gf_quatd_1a94a434dfcd37e256aec323eaaec489ab" prot="private" virt="non-virtual"><scope>GfQuatd</scope><name>_real</name></member>
      <member refid="class_gf_quatd_1a8f6523a99fe7a142ad3fe9e838b9d555" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetConjugate</name></member>
      <member refid="class_gf_quatd_1a13c86f5b99d17ce8f8a793dcc19ac27a" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetIdentity</name></member>
      <member refid="class_gf_quatd_1ad2b8acb7c27178a2d4a3f42ccd0616fd" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetImaginary</name></member>
      <member refid="class_gf_quatd_1a8542aa1d65cd74272d2536b769fb7047" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetInverse</name></member>
      <member refid="class_gf_quatd_1adca4fce8e3ab8fd1eacd396af7c9adbb" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetLength</name></member>
      <member refid="class_gf_quatd_1a351411582f7bf8ea1fa5a831ad3712cf" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetNormalized</name></member>
      <member refid="class_gf_quatd_1a64a370c680cd9af05422246b07ea14e9" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetReal</name></member>
      <member refid="class_gf_quatd_1a98fa03b3299d06be49801143410b2b45" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GetZero</name></member>
      <member refid="class_gf_quatd_1ad6379bb8680e00cde07137fc2689f8a9" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1a31f1f8ff31d3930830e439305e9d6855" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1a32c9f9c0c7110c71403b846f69f25074" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1a36941ce9941d3a88bec128d020afe347" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1a9f2f5200b71d832f767711a10713b183" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1a313447338811ad2ae8400c116b626074" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>GfQuatd</name></member>
      <member refid="class_gf_quatd_1ad03210e4a2146a8a25bd77fafc6d4cff" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>hash_value</name></member>
      <member refid="class_gf_quatd_1a9ab2b274e8c061dfdd061ad84a788fed" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>ImaginaryType</name></member>
      <member refid="class_gf_quatd_1a5907dbff2d555470fa5a69a819928f13" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>Normalize</name></member>
      <member refid="class_gf_quatd_1ac544fff12a39e3bdfa5234f1e95a4dc7" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_quatd_1a5d393088aa4c004749c86842ded552a2" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_quatd_1aea58379973d09d3738bfd5a622e77fee" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_quatd_1a62e3ad3f4054244acfb06da42150ce82" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator *=</name></member>
      <member refid="class_gf_quatd_1abd7cbd3fe6e9e459b4c8b32a50729225" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator *=</name></member>
      <member refid="class_gf_quatd_1a5605afceff680600e37abf1f168b3694" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator -</name></member>
      <member refid="class_gf_quatd_1abf3768bc391302540b6f2603497c5043" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator -=</name></member>
      <member refid="class_gf_quatd_1a9d035e9798b57d955a0dc7fde77099f3" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator!=</name></member>
      <member refid="class_gf_quatd_1af84ffcb3e780e136f5a469d1a7b60584" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator+</name></member>
      <member refid="class_gf_quatd_1a3dc75000d1ffc52d0dc1cdc5b8516991" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator+=</name></member>
      <member refid="class_gf_quatd_1a604db50e0abfdca33ea4c8f50bba4b93" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator-</name></member>
      <member refid="class_gf_quatd_1aa12d33eac2ef45fea4bdb5304e4e65dd" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator/</name></member>
      <member refid="class_gf_quatd_1a081077d557ec86b8497c9dbfe71283e4" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator/=</name></member>
      <member refid="class_gf_quatd_1a8e9f206eaaf4db3527f0b5dd1392ea23" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>operator==</name></member>
      <member refid="class_gf_quatd_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>ScalarType</name></member>
      <member refid="class_gf_quatd_1a9269c86ceaaa51d43e86907eb4e2d5a3" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>SetImaginary</name></member>
      <member refid="class_gf_quatd_1ab8b008b24bb64295fbec928e20b3f231" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>SetImaginary</name></member>
      <member refid="class_gf_quatd_1af17880b08ad6ae5a3d6437e5a85b12a3" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>SetReal</name></member>
      <member refid="class_gf_quatd_1a40e6eacb77f6700322343c5cf8f6aff0" prot="public" virt="non-virtual"><scope>GfQuatd</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
