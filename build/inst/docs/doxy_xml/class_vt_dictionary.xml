<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_vt_dictionary" kind="class" language="C++" prot="public">
    <compoundname>VtDictionary</compoundname>
    <includes refid="dictionary_8h" local="no">dictionary.h</includes>
    <innerclass refid="class_vt_dictionary_1_1_iterator" prot="public">VtDictionary::Iterator</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_vt_dictionary_1a6b910328077bdba75e6f3959289d5d80" prot="private" static="no">
        <type>std::map&lt; std::string, <ref refid="class_vt_value" kindref="compound">VtValue</ref>, std::less&lt;&gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, VtValue, std::less&lt;&gt; &gt; _Map</definition>
        <argsstring></argsstring>
        <name>_Map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="61" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_vt_dictionary_1a49a424a8ec881de0faff7de15d20125d" prot="public" static="no">
        <type>_Map::key_type</type>
        <definition>typedef _Map::key_type key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="191" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a3ef1764d9e4f32b02d5d8951d8f1a58d" prot="public" static="no">
        <type>_Map::mapped_type</type>
        <definition>typedef _Map::mapped_type mapped_type</definition>
        <argsstring></argsstring>
        <name>mapped_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="192" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a84e50531262aec4a635531c5b0a5333a" prot="public" static="no">
        <type>_Map::value_type</type>
        <definition>typedef _Map::value_type value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="193" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a55af439bf5eafefed81c11d611c6e834" prot="public" static="no">
        <type>_Map::allocator_type</type>
        <definition>typedef _Map::allocator_type allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="194" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a1f95b828ca529ac28881debc126ca1a7" prot="public" static="no">
        <type>_Map::size_type</type>
        <definition>typedef _Map::size_type size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="195" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a9b9da8783c81d698f24c9efd56a7ba33" prot="public" static="no">
        <type>Iterator&lt; _Map *, _Map::iterator &gt;</type>
        <definition>typedef Iterator&lt;_Map*, _Map::iterator&gt; iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="197" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_dictionary_1a0948544be416b78afccc4b830b9e1c4a" prot="public" static="no">
        <type>Iterator&lt; _Map const  *, _Map::const_iterator &gt;</type>
        <definition>typedef Iterator&lt;_Map const*, _Map::const_iterator&gt; const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="198" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_vt_dictionary_1a25eefb4b87e5f8a00688c235aa05e0c0" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; _Map &gt;</type>
        <definition>std::unique_ptr&lt;_Map&gt; _dictMap</definition>
        <argsstring></argsstring>
        <name>_dictMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="62" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vt_dictionary_1a9e420d3d809d4c18fe1250e7ae971c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TF_MALLOC_TAG_NEW</definition>
        <argsstring>(&quot;Vt&quot;, &quot;VtDictionary&quot;)</argsstring>
        <name>TF_MALLOC_TAG_NEW</name>
        <param>
          <type>&quot;Vt&quot;</type>
        </param>
        <param>
          <type>&quot;VtDictionary&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a6ee8d832099d80445eda1f69d63a99a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtDictionary</definition>
        <argsstring>()</argsstring>
        <name>VtDictionary</name>
        <briefdescription>
<para>Creates an empty <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="201" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ac77018934635288d2bd46ce4d2c8d2e7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtDictionary</definition>
        <argsstring>(int size)</argsstring>
        <name>VtDictionary</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Creates an empty <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput> with at least <computeroutput>size</computeroutput> buckets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="204" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a739ea1b43d5519a0f28b01a408501fab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _InputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>VtDictionary</definition>
        <argsstring>(_InputIterator f, _InputIterator l)</argsstring>
        <name>VtDictionary</name>
        <param>
          <type>_InputIterator</type>
          <declname>f</declname>
        </param>
        <param>
          <type>_InputIterator</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput> with a copy of a range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="208" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ab4e55b9d8ccc2974f8d1e7e9f990530b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API</type>
        <definition>VT_API VtDictionary</definition>
        <argsstring>(VtDictionary const &amp;other)</argsstring>
        <name>VtDictionary</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a copy of the supplied <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ae693331004ace01e01ca8e1497c7facb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API</type>
        <definition>VT_API VtDictionary</definition>
        <argsstring>(VtDictionary &amp;&amp;other)=default</argsstring>
        <name>VtDictionary</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> by moving the supplied <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a551a67652392b9d08b8e9de406b40fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API</type>
        <definition>VT_API VtDictionary</definition>
        <argsstring>(std::initializer_list&lt; value_type &gt; init)</argsstring>
        <name>VtDictionary</name>
        <param>
          <type>std::initializer_list&lt; value_type &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>Creates a new <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> from a braced initializer list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a992ac149b5c220e51f4870b1c4c8c99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
        <definition>VT_API VtDictionary&amp; operator=</definition>
        <argsstring>(VtDictionary const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a99b20be817555b201c65964bae12c1b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
        <definition>VT_API VtDictionary&amp; operator=</definition>
        <argsstring>(VtDictionary &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a974a71126b813bd98e90e58ae1664a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>VT_API VtValue&amp; operator[]</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the <computeroutput><ref refid="class_vt_value" kindref="compound">VtValue</ref></computeroutput> that is associated with a particular key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a234be6e790444eb1953a8b961e7dd619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_type</type>
        <definition>VT_API size_type count</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Counts the number of elements whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ad8f69f6aa885673c6cf9db54a15159b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_type</type>
        <definition>VT_API size_type count</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>count</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Counts the number of elements whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a9c36307f75eee6dd75f032bd5aad1f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_type</type>
        <definition>VT_API size_type erase</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Erases the element whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a71755dd01d060eafa7bf32dab9aa645e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void erase</definition>
        <argsstring>(iterator it)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Erases the element pointed to by <computeroutput>it</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a7748d68c57aa5ddfb10e2b8af1e242e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void erase</definition>
        <argsstring>(iterator f, iterator l)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>f</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Erases all elements in a range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a3ade80a587943cb226049816ed5f5801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erases all of the elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ab22cbd635c03612b2e9829de4e70a58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API iterator</type>
        <definition>VT_API iterator find</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Finds an element whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a86e7bca192ec540138015492c8d562c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API iterator</type>
        <definition>VT_API iterator find</definition>
        <argsstring>(const char *key)</argsstring>
        <name>find</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Finds an element whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a998ce63b407003d327247b4d7280168a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API const_iterator</type>
        <definition>VT_API const_iterator find</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Finds an element whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ae9313ac339dd0188b7db80e04896021b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API const_iterator</type>
        <definition>VT_API const_iterator find</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>find</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Finds an element whose key is <computeroutput>key</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a451421f769551bb5a61ff450ec071c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API iterator</type>
        <definition>VT_API iterator begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an <computeroutput>iterator</computeroutput> pointing to the beginning of the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ae71b0f7949133c07acf9a9fbe28be2e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API const_iterator</type>
        <definition>VT_API const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an <computeroutput>iterator</computeroutput> pointing to the beginning of the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a990c15c15a891c761b71603eacfb0171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API iterator</type>
        <definition>VT_API iterator end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an <computeroutput>iterator</computeroutput> pointing to the end of the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a246fa2139cf9021bc67e1b3d03532e57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API const_iterator</type>
        <definition>VT_API const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an <computeroutput>iterator</computeroutput> pointing to the end of the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a0d8ab80b92923a3906b10f300ebf3082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API size_type</type>
        <definition>VT_API size_type size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ac8bfe1b3f6c458315a856eebdb593da2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API bool</type>
        <definition>VT_API bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref>&apos;s</computeroutput> size is 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a62581c2b4a765424db54f5aae363e545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void swap</definition>
        <argsstring>(VtDictionary &amp;dict)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
<para>Swaps the contents of two <computeroutput>VtDictionaries</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a89e513989c85861d034e21f39a06342c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void insert</definition>
        <argsstring>(_InputIterator f, _InputIterator l)</argsstring>
        <name>insert</name>
        <param>
          <type>_InputIterator</type>
          <declname>f</declname>
        </param>
        <param>
          <type>_InputIterator</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Inserts a range into the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="321" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a2f3d708e386d8e941120e3380980bb07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API std::pair&lt; iterator, bool &gt;</type>
        <definition>VT_API std::pair&lt;iterator, bool&gt; insert</definition>
        <argsstring>(const value_type &amp;obj)</argsstring>
        <name>insert</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>obj</computeroutput> into the <computeroutput><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a810a19ac064db865f109af228714bc13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref> const  *</type>
        <definition>VT_API VtValue const* GetValueAtPath</definition>
        <argsstring>(std::string const &amp;keyPath, char const *delimiters=&quot;:&quot;) const</argsstring>
        <name>GetValueAtPath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>delimiters</declname>
          <defval>&quot;:&quot;</defval>
        </param>
        <briefdescription>
<para>Return a pointer to the value at <computeroutput>keyPath</computeroutput> if one exists. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>keyPath</computeroutput> is a delimited string of sub-dictionary names. Key path elements are produced by calling <ref refid="group__group__tf___string_1gad12791e5ba9776711b996a6faa630d1b" kindref="member">TfStringTokenize()</ref> with <computeroutput>keyPath</computeroutput> and <computeroutput>delimiters</computeroutput>. <computeroutput>keyPath</computeroutput> may identify a leaf element or an entire sub-dictionary. Return null if no such element at <computeroutput>keyPath</computeroutput> exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a3f4e6c083bd736146f332af1706752ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API <ref refid="class_vt_value" kindref="compound">VtValue</ref> const  *</type>
        <definition>VT_API VtValue const* GetValueAtPath</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;keyPath) const</argsstring>
        <name>GetValueAtPath</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the value at <computeroutput>keyPath</computeroutput> if one exists. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>keyPath</computeroutput> may identify a leaf element or an entire sub-dictionary. Return null if no such element at <computeroutput>keyPath</computeroutput> exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a02de1a2a3ae1bf84aaaeedc7006098bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void SetValueAtPath</definition>
        <argsstring>(std::string const &amp;keyPath, VtValue const &amp;value, char const *delimiters=&quot;:&quot;)</argsstring>
        <name>SetValueAtPath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>delimiters</declname>
          <defval>&quot;:&quot;</defval>
        </param>
        <briefdescription>
<para>Set the value at <computeroutput>keyPath</computeroutput> to <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>keyPath</computeroutput> is a delimited string of sub-dictionary names. Key path elements are produced by calling <ref refid="group__group__tf___string_1gad12791e5ba9776711b996a6faa630d1b" kindref="member">TfStringTokenize()</ref> with <computeroutput>keyPath</computeroutput> and <computeroutput>delimiters</computeroutput>. Create sub-dictionaries as necessary according to the path elements in <computeroutput>keyPath</computeroutput>. If <computeroutput>keyPath</computeroutput> identifies a full sub-dictionary, replace the entire sub-dictionary with <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a3bee9522bec8c98a5bab4fdfdd33bb6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void SetValueAtPath</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;keyPath, VtValue const &amp;value)</argsstring>
        <name>SetValueAtPath</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value at <computeroutput>keyPath</computeroutput> to <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Create sub-dictionaries as necessary according to the path elements in <computeroutput>keyPath</computeroutput>. If <computeroutput>keyPath</computeroutput> identifies a full sub-dictionary, replace the entire sub-dictionary with <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a7dea63df6087570534888192ecf03a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void EraseValueAtPath</definition>
        <argsstring>(std::string const &amp;keyPath, char const *delimiters=&quot;:&quot;)</argsstring>
        <name>EraseValueAtPath</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>delimiters</declname>
          <defval>&quot;:&quot;</defval>
        </param>
        <briefdescription>
<para>Erase the value at <emphasis>keyPath</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>keyPath</computeroutput> is a delimited string of sub-dictionary names. Key path elements are produced by calling <ref refid="group__group__tf___string_1gad12791e5ba9776711b996a6faa630d1b" kindref="member">TfStringTokenize()</ref> with <computeroutput>keyPath</computeroutput> and <computeroutput>delimiters</computeroutput>. If no such element exists at <computeroutput>keyPath</computeroutput>, do nothing. If <computeroutput>keyPath</computeroutput> identifies a sub-dictionary, erase the entire sub-dictionary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1aa7812cb03370acbe0c290d3c6566a5fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VT_API void</type>
        <definition>VT_API void EraseValueAtPath</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;keyPath)</argsstring>
        <name>EraseValueAtPath</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Erase the value at <emphasis>keyPath</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such element exists at <computeroutput>keyPath</computeroutput>, do nothing. If <computeroutput>keyPath</computeroutput> identifies a sub-dictionary, erase the entire sub-dictionary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="381" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_vt_dictionary_1a7ffff769d43af0b32f626ce74c38956e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(VtDictionary &amp;lhs, VtDictionary &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="307" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_dictionary_1a71f1cad8810c482a83246d2b4fdc21d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(VtDictionary const &amp;dict)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> const &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="311" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="311" bodyend="317"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_vt_dictionary_1a8f1843688fdc695487e4409ce68d4537" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetValueAtPathImpl</definition>
        <argsstring>(std::vector&lt; std::string &gt;::const_iterator curKeyElem, std::vector&lt; std::string &gt;::const_iterator keyElemEnd, VtValue const &amp;value)</argsstring>
        <name>_SetValueAtPathImpl</name>
        <param>
          <type>std::vector&lt; std::string &gt;::const_iterator</type>
          <declname>curKeyElem</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;::const_iterator</type>
          <declname>keyElemEnd</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1a4686336ae2c266e397a274370f16135c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _EraseValueAtPathImpl</definition>
        <argsstring>(std::vector&lt; std::string &gt;::const_iterator curKeyElem, std::vector&lt; std::string &gt;::const_iterator keyElemEnd)</argsstring>
        <name>_EraseValueAtPathImpl</name>
        <param>
          <type>std::vector&lt; std::string &gt;::const_iterator</type>
          <declname>curKeyElem</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;::const_iterator</type>
          <declname>keyElemEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_dictionary_1ae3f9eb564eea79ae9439b2f07baaf7e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateDictIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>_CreateDictIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/dictionary.h" line="393" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A map with string keys and <ref refid="class_vt_value" kindref="compound">VtValue</ref> values. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> converts to and from a python dictionary as long as each element contains either<itemizedlist>
<listitem><para>another <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> (converts to a nested dictionary)</para>
</listitem><listitem><para>std::vector&lt;VtValue&gt; (converts to a nested list)</para>
</listitem><listitem><para><ref refid="class_vt_value" kindref="compound">VtValue</ref> with one of the supported Vt Types.</para>
</listitem></itemizedlist>
</para>
<para>For a list of functions that can manipulate <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> objects, see the</para>
<para><ref refid="group__group__vtdict__functions" kindref="compound">VtDictionary Functions </ref> group page . </para>
    </detaileddescription>
    <location file="pxr/base/vt/dictionary.h" line="60" column="1" bodyfile="pxr/base/vt/dictionary.h" bodystart="60" bodyend="395"/>
    <listofallmembers>
      <member refid="class_vt_dictionary_1ae3f9eb564eea79ae9439b2f07baaf7e3" prot="private" virt="non-virtual"><scope>VtDictionary</scope><name>_CreateDictIfNeeded</name></member>
      <member refid="class_vt_dictionary_1a25eefb4b87e5f8a00688c235aa05e0c0" prot="private" virt="non-virtual"><scope>VtDictionary</scope><name>_dictMap</name></member>
      <member refid="class_vt_dictionary_1a4686336ae2c266e397a274370f16135c" prot="private" virt="non-virtual"><scope>VtDictionary</scope><name>_EraseValueAtPathImpl</name></member>
      <member refid="class_vt_dictionary_1a6b910328077bdba75e6f3959289d5d80" prot="private" virt="non-virtual"><scope>VtDictionary</scope><name>_Map</name></member>
      <member refid="class_vt_dictionary_1a8f1843688fdc695487e4409ce68d4537" prot="private" virt="non-virtual"><scope>VtDictionary</scope><name>_SetValueAtPathImpl</name></member>
      <member refid="class_vt_dictionary_1a55af439bf5eafefed81c11d611c6e834" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>allocator_type</name></member>
      <member refid="class_vt_dictionary_1a451421f769551bb5a61ff450ec071c3b" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>begin</name></member>
      <member refid="class_vt_dictionary_1ae71b0f7949133c07acf9a9fbe28be2e1" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>begin</name></member>
      <member refid="class_vt_dictionary_1a3ade80a587943cb226049816ed5f5801" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>clear</name></member>
      <member refid="class_vt_dictionary_1a0948544be416b78afccc4b830b9e1c4a" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>const_iterator</name></member>
      <member refid="class_vt_dictionary_1a234be6e790444eb1953a8b961e7dd619" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>count</name></member>
      <member refid="class_vt_dictionary_1ad8f69f6aa885673c6cf9db54a15159b7" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>count</name></member>
      <member refid="class_vt_dictionary_1ac8bfe1b3f6c458315a856eebdb593da2" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>empty</name></member>
      <member refid="class_vt_dictionary_1a990c15c15a891c761b71603eacfb0171" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>end</name></member>
      <member refid="class_vt_dictionary_1a246fa2139cf9021bc67e1b3d03532e57" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>end</name></member>
      <member refid="class_vt_dictionary_1a9c36307f75eee6dd75f032bd5aad1f72" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>erase</name></member>
      <member refid="class_vt_dictionary_1a71755dd01d060eafa7bf32dab9aa645e" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>erase</name></member>
      <member refid="class_vt_dictionary_1a7748d68c57aa5ddfb10e2b8af1e242e7" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>erase</name></member>
      <member refid="class_vt_dictionary_1a7dea63df6087570534888192ecf03a9b" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>EraseValueAtPath</name></member>
      <member refid="class_vt_dictionary_1aa7812cb03370acbe0c290d3c6566a5fc" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>EraseValueAtPath</name></member>
      <member refid="class_vt_dictionary_1ab22cbd635c03612b2e9829de4e70a58c" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>find</name></member>
      <member refid="class_vt_dictionary_1a86e7bca192ec540138015492c8d562c7" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>find</name></member>
      <member refid="class_vt_dictionary_1a998ce63b407003d327247b4d7280168a" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>find</name></member>
      <member refid="class_vt_dictionary_1ae9313ac339dd0188b7db80e04896021b" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>find</name></member>
      <member refid="class_vt_dictionary_1a810a19ac064db865f109af228714bc13" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>GetValueAtPath</name></member>
      <member refid="class_vt_dictionary_1a3f4e6c083bd736146f332af1706752ad" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>GetValueAtPath</name></member>
      <member refid="class_vt_dictionary_1a71f1cad8810c482a83246d2b4fdc21d4" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>hash_value</name></member>
      <member refid="class_vt_dictionary_1a89e513989c85861d034e21f39a06342c" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>insert</name></member>
      <member refid="class_vt_dictionary_1a2f3d708e386d8e941120e3380980bb07" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>insert</name></member>
      <member refid="class_vt_dictionary_1a9b9da8783c81d698f24c9efd56a7ba33" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>iterator</name></member>
      <member refid="class_vt_dictionary_1a49a424a8ec881de0faff7de15d20125d" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>key_type</name></member>
      <member refid="class_vt_dictionary_1a3ef1764d9e4f32b02d5d8951d8f1a58d" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>mapped_type</name></member>
      <member refid="class_vt_dictionary_1a992ac149b5c220e51f4870b1c4c8c99a" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>operator=</name></member>
      <member refid="class_vt_dictionary_1a99b20be817555b201c65964bae12c1b9" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>operator=</name></member>
      <member refid="class_vt_dictionary_1a974a71126b813bd98e90e58ae1664a0d" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>operator[]</name></member>
      <member refid="class_vt_dictionary_1a02de1a2a3ae1bf84aaaeedc7006098bf" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>SetValueAtPath</name></member>
      <member refid="class_vt_dictionary_1a3bee9522bec8c98a5bab4fdfdd33bb6d" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>SetValueAtPath</name></member>
      <member refid="class_vt_dictionary_1a0d8ab80b92923a3906b10f300ebf3082" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>size</name></member>
      <member refid="class_vt_dictionary_1a1f95b828ca529ac28881debc126ca1a7" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>size_type</name></member>
      <member refid="class_vt_dictionary_1a62581c2b4a765424db54f5aae363e545" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>swap</name></member>
      <member refid="class_vt_dictionary_1a7ffff769d43af0b32f626ce74c38956e" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>swap</name></member>
      <member refid="class_vt_dictionary_1a9e420d3d809d4c18fe1250e7ae971c46" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>TF_MALLOC_TAG_NEW</name></member>
      <member refid="class_vt_dictionary_1a84e50531262aec4a635531c5b0a5333a" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>value_type</name></member>
      <member refid="class_vt_dictionary_1a6ee8d832099d80445eda1f69d63a99a8" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
      <member refid="class_vt_dictionary_1ac77018934635288d2bd46ce4d2c8d2e7" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
      <member refid="class_vt_dictionary_1a739ea1b43d5519a0f28b01a408501fab" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
      <member refid="class_vt_dictionary_1ab4e55b9d8ccc2974f8d1e7e9f990530b" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
      <member refid="class_vt_dictionary_1ae693331004ace01e01ca8e1497c7facb" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
      <member refid="class_vt_dictionary_1a551a67652392b9d08b8e9de406b40fab" prot="public" virt="non-virtual"><scope>VtDictionary</scope><name>VtDictionary</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
