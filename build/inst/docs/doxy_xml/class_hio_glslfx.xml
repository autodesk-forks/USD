<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hio_glslfx" kind="class" language="C++" prot="public">
    <compoundname>HioGlslfx</compoundname>
    <includes refid="glslfx_8h" local="no">glslfx.h</includes>
    <innerclass refid="class_hio_glslfx_1_1___parse_context" prot="private">HioGlslfx::_ParseContext</innerclass>
      <sectiondef kind="user-defined">
      <header>Access to commonly used shader sources.</header>
      <memberdef kind="function" id="class_hio_glslfx_1ad1e441ae6c7e7a3518e6695fd4d99082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API std::string</type>
        <definition>HIO_API std::string GetSurfaceSource</definition>
        <argsstring>() const</argsstring>
        <name>GetSurfaceSource</name>
        <briefdescription>
<para>Get the surface source string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a2cdb98a2e8e0ed02f406ec2622e78cb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API std::string</type>
        <definition>HIO_API std::string GetDisplacementSource</definition>
        <argsstring>() const</argsstring>
        <name>GetDisplacementSource</name>
        <briefdescription>
<para>Get the displacement source string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a39345cc844aea100e785146e093db6dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API std::string</type>
        <definition>HIO_API std::string GetVolumeSource</definition>
        <argsstring>() const</argsstring>
        <name>GetVolumeSource</name>
        <briefdescription>
<para>Get the volume source string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_hio_glslfx_1a3f85e771710b0ab40a689593f9567483" prot="private" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string, std::string&gt; _SourceMap</definition>
        <argsstring></argsstring>
        <name>_SourceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="279" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hio_glslfx_1a22e55c232a0cdf0898a20fdaaf6000fa" prot="private" static="no" mutable="no">
        <type>_ParseContext</type>
        <definition>_ParseContext _globalContext</definition>
        <argsstring></argsstring>
        <name>_globalContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="277" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1af6d34d2d6190293de4141a5a89ec3042" prot="private" static="no" mutable="no">
        <type>_SourceMap</type>
        <definition>_SourceMap _sourceMap</definition>
        <argsstring></argsstring>
        <name>_sourceMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="281" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1abe7d95a7ab2581ac2fa58d26a4ceffc1" prot="private" static="no" mutable="no">
        <type>_SourceMap</type>
        <definition>_SourceMap _layoutMap</definition>
        <argsstring></argsstring>
        <name>_layoutMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="282" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1af0718e0434ed67f273f690393b32b6f3" prot="private" static="no" mutable="no">
        <type>_SourceMap</type>
        <definition>_SourceMap _configMap</definition>
        <argsstring></argsstring>
        <name>_configMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="283" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1aec0830cb0f3037d278c827036a574657" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; _configOrder</definition>
        <argsstring></argsstring>
        <name>_configOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="284" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1a1c0ab523d8753ec25710982d5b920ffe" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; _seenFiles</definition>
        <argsstring></argsstring>
        <name>_seenFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="285" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1ad249608b87ab337a1e20060fe09d0ffe" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hio_glslfx_config" kindref="compound">HioGlslfxConfig</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HioGlslfxConfig&gt; _config</definition>
        <argsstring></argsstring>
        <name>_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="287" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1a9c917a8f19d201c354128f518a2809cc" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _technique</definition>
        <argsstring></argsstring>
        <name>_technique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="289" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1ae923f1f1af45226b3de4dd97f4d64c2c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _valid</definition>
        <argsstring></argsstring>
        <name>_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="291" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1a06719ddf1c42e33e15e586c69f23db7f" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _invalidReason</definition>
        <argsstring></argsstring>
        <name>_invalidReason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="292" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hio_glslfx_1ae059dfbd9014bb0672749a5fdb785c6e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _hash</definition>
        <argsstring></argsstring>
        <name>_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="293" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hio_glslfx_1a540d045fa6bf4270e70090051dcdb179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API</type>
        <definition>HIO_API HioGlslfx</definition>
        <argsstring>()</argsstring>
        <name>HioGlslfx</name>
        <briefdescription>
<para>Create an invalid glslfx object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aa2b2e2fb5ad9e9780c408071c693755b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API</type>
        <definition>HIO_API HioGlslfx</definition>
        <argsstring>(std::string const &amp;filePath, TfToken const &amp;technique=HioGlslfxTokens-&gt;defVal)</argsstring>
        <name>HioGlslfx</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>technique</declname>
          <defval>HioGlslfxTokens-&gt;defVal</defval>
        </param>
        <briefdescription>
<para>Create a glslfx object from a file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a913b3992eecc24857f01312c7d1e0873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API</type>
        <definition>HIO_API HioGlslfx</definition>
        <argsstring>(std::istream &amp;is, TfToken const &amp;technique=HioGlslfxTokens-&gt;defVal)</argsstring>
        <name>HioGlslfx</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>technique</declname>
          <defval>HioGlslfxTokens-&gt;defVal</defval>
        </param>
        <briefdescription>
<para>Create a glslfx object from a stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a9a597f88d41d74caf8f2a30f2c8e632f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API HioGlslfxConfig::Parameters</type>
        <definition>HIO_API HioGlslfxConfig::Parameters GetParameters</definition>
        <argsstring>() const</argsstring>
        <name>GetParameters</name>
        <briefdescription>
<para>Return the parameters specified in the configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a4db4057c64e8705e780a3d65940cd567" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API HioGlslfxConfig::Textures</type>
        <definition>HIO_API HioGlslfxConfig::Textures GetTextures</definition>
        <argsstring>() const</argsstring>
        <name>GetTextures</name>
        <briefdescription>
<para>Return the textures specified in the configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aef6f0042af4aec0cc7902f96f3d7d7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API HioGlslfxConfig::Attributes</type>
        <definition>HIO_API HioGlslfxConfig::Attributes GetAttributes</definition>
        <argsstring>() const</argsstring>
        <name>GetAttributes</name>
        <briefdescription>
<para>Return the attributes specified in the configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a974a053ba5d0e46b822248fda174e2e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API <ref refid="class_vt_dictionary" kindref="compound">HioGlslfxConfig::MetadataDictionary</ref></type>
        <definition>HIO_API HioGlslfxConfig::MetadataDictionary GetMetadata</definition>
        <argsstring>() const</argsstring>
        <name>GetMetadata</name>
        <briefdescription>
<para>Return the metadata specified in the configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a9deccd1ea8222d97c5120259f5ef7062" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API bool</type>
        <definition>HIO_API bool IsValid</definition>
        <argsstring>(std::string *reason=NULL) const</argsstring>
        <name>IsValid</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns true if this is a valid glslfx file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a2c8a77e26373354cf40b97d0bd7d359b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>HIO_API VtDictionary GetLayoutAsDictionary</definition>
        <argsstring>(const TfTokenVector &amp;shaderStageKeys, std::string *errorStr) const</argsstring>
        <name>GetLayoutAsDictionary</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>shaderStageKeys</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errorStr</declname>
        </param>
        <briefdescription>
<para>Get the layout config as a <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> parsed from the JSON layout config corresponding to the shader source associated with the given keys. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1abc72d89b3b856ddcfa01c4752529fcf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API std::string</type>
        <definition>HIO_API std::string GetSource</definition>
        <argsstring>(const TfToken &amp;shaderStageKey) const</argsstring>
        <name>GetSource</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>shaderStageKey</declname>
        </param>
        <briefdescription>
<para>Get the shader source associated with given key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1acc4185bafb600f38dda22d2e6364930f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetFilePath</definition>
        <argsstring>() const</argsstring>
        <name>GetFilePath</name>
        <briefdescription>
<para>Get the original file name passed to the constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="218" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aa1641e566cedd431eea01a3cb51577a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::set&lt; std::string &gt; &amp;</type>
        <definition>const std::set&lt;std::string&gt;&amp; GetFiles</definition>
        <argsstring>() const</argsstring>
        <name>GetFiles</name>
        <briefdescription>
<para>Return set of all files processed for this glslfx object. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes the original file given to the constructor as well as any other files that were imported. This set will only contain files that exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="224" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Return the computed hash value based on the string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="227" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="227" bodyend="227"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hio_glslfx_1a6335eb22d5e27ee86de0fcaad3e0b7ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HIO_API std::vector&lt; std::string &gt;</type>
        <definition>static HIO_API std::vector&lt;std::string&gt; ExtractImports</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>ExtractImports</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Extract imported files from the specified glslfx file. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned paths are as-authored, in the order of declaration, with possible duplicates. This function is not recursive <ndash/> it only extracts imports from the specified <computeroutput>filename</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="234" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hio_glslfx_1a2a0e10c25995512ce82d69eef23a6da7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ProcessFile</definition>
        <argsstring>(std::string const &amp;filePath, _ParseContext &amp;context)</argsstring>
        <name>_ProcessFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a0a85d6812a8d81d5799f2db12f899f96" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ProcessInput</definition>
        <argsstring>(std::istream *input, _ParseContext &amp;context)</argsstring>
        <name>_ProcessInput</name>
        <param>
          <type>std::istream *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aecd031b908c9d5676fc24959d93cb1e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ProcessImport</definition>
        <argsstring>(_ParseContext &amp;context)</argsstring>
        <name>_ProcessImport</name>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1ad6d51a2d021dda475e6949e867a656b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ParseSectionLine</definition>
        <argsstring>(_ParseContext &amp;context)</argsstring>
        <name>_ParseSectionLine</name>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aa362961ac6b23ee5db5a5dca213c93e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ParseGLSLSectionLine</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;tokens, _ParseContext &amp;context)</argsstring>
        <name>_ParseGLSLSectionLine</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1aca235593e4d0551187c6055a156fae36" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ParseLayoutSectionLine</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;tokens, _ParseContext &amp;context)</argsstring>
        <name>_ParseLayoutSectionLine</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a347ed342d16607cc08192095229dee5d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ParseVersionLine</definition>
        <argsstring>(std::vector&lt; std::string &gt; const &amp;tokens, _ParseContext &amp;context)</argsstring>
        <name>_ParseVersionLine</name>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a3d79eaef51c875df5952c9d80bfe3b18" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ParseConfigurationLine</definition>
        <argsstring>(_ParseContext &amp;context)</argsstring>
        <name>_ParseConfigurationLine</name>
        <param>
          <type>_ParseContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1af037ff8ac1812ac4c030a950b294125d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComposeConfiguration</definition>
        <argsstring>(std::string *reason)</argsstring>
        <name>_ComposeConfiguration</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1af9039859acf6fa8ac79c79bae7d5eff9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string _GetLayout</definition>
        <argsstring>(const TfToken &amp;shaderStageKey) const</argsstring>
        <name>_GetLayout</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>shaderStageKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a02af022915ea2efb1c337387741c97b7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string _GetSource</definition>
        <argsstring>(const TfToken &amp;shaderStageKey) const</argsstring>
        <name>_GetSource</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>shaderStageKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hio_glslfx_1a3c017b7bf245b1a352cf9b4f7717c65b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string _GetLayoutAsString</definition>
        <argsstring>(const TfTokenVector &amp;shaderStageKeys) const</argsstring>
        <name>_GetLayoutAsString</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>shaderStageKeys</declname>
        </param>
        <briefdescription>
<para>Get the layout config as a string formatted as JSON corresponding to the shader source associated with the given keys. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hio/glslfx.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class representing the config and shader source of a glslfx file. </para>
    </briefdescription>
    <detaileddescription>
<para>a <ref refid="class_hio_glslfx" kindref="compound">HioGlslfx</ref> object is constructed by providing the path of a file whose contents look something like this:</para>
<para><programlisting><codeline><highlight class="normal">--<sp/>glslfx<sp/>version<sp/>0.1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">--<sp/>configuration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;textures&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;texture_1&apos;:{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;documentation&apos;<sp/>:<sp/>&apos;a<sp/>useful<sp/>texture.&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;texture_2&apos;:{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;documentation&apos;<sp/>:<sp/>&apos;another<sp/>useful<sp/>texture.&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;parameters&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_1&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;<sp/>:<sp/>1.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;documentation&apos;<sp/>:<sp/>&apos;the<sp/>first<sp/>parameter&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_2&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;<sp/>:<sp/>[1.0,<sp/>1.0,<sp/>1.0],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;documentation&apos;<sp/>:<sp/>&apos;a<sp/>vec3f<sp/>parameter&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_3&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;<sp/>:<sp/>2.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_4&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;<sp/>:<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_5&apos;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;<sp/>:<sp/>[1.0,<sp/>1.0,<sp/>1.0],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;role&apos;<sp/>:<sp/>&apos;color&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;documentation&apos;<sp/>:<sp/>&apos;specifies<sp/>a<sp/>color<sp/>for<sp/>use<sp/>in<sp/>the<sp/>shader&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;parameterOrder&apos;:<sp/>[&apos;param_1&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_2&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_3&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_4&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;param_5&apos;],</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;techniques&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;default&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;fragmentShader&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;source&apos;:<sp/>[<sp/>&apos;MyFragment&apos;<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;metal&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;fragmentShader&apos;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;source&apos;:<sp/>[<sp/>&apos;MyFragment.Metal&apos;<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">--<sp/>glsl<sp/>MyFragment</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uniform<sp/>float<sp/>param_1;</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>float<sp/>param_2;</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>float<sp/>param_3;</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>float<sp/>param_4;</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>float<sp/>param_5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>glsl<sp/>code<sp/>which<sp/>consumes<sp/>the<sp/>various<sp/>uniforms,<sp/>and<sp/>perhaps<sp/>sets</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>gl_FragColor<sp/>=<sp/>someOutputColor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/imaging/hio/glslfx.h" line="151" column="1" bodyfile="pxr/imaging/hio/glslfx.h" bodystart="150" bodyend="294"/>
    <listofallmembers>
      <member refid="class_hio_glslfx_1af037ff8ac1812ac4c030a950b294125d" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ComposeConfiguration</name></member>
      <member refid="class_hio_glslfx_1ad249608b87ab337a1e20060fe09d0ffe" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_config</name></member>
      <member refid="class_hio_glslfx_1af0718e0434ed67f273f690393b32b6f3" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_configMap</name></member>
      <member refid="class_hio_glslfx_1aec0830cb0f3037d278c827036a574657" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_configOrder</name></member>
      <member refid="class_hio_glslfx_1af9039859acf6fa8ac79c79bae7d5eff9" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_GetLayout</name></member>
      <member refid="class_hio_glslfx_1a3c017b7bf245b1a352cf9b4f7717c65b" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_GetLayoutAsString</name></member>
      <member refid="class_hio_glslfx_1a02af022915ea2efb1c337387741c97b7" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_GetSource</name></member>
      <member refid="class_hio_glslfx_1a22e55c232a0cdf0898a20fdaaf6000fa" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_globalContext</name></member>
      <member refid="class_hio_glslfx_1ae059dfbd9014bb0672749a5fdb785c6e" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_hash</name></member>
      <member refid="class_hio_glslfx_1a06719ddf1c42e33e15e586c69f23db7f" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_invalidReason</name></member>
      <member refid="class_hio_glslfx_1abe7d95a7ab2581ac2fa58d26a4ceffc1" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_layoutMap</name></member>
      <member refid="class_hio_glslfx_1a3d79eaef51c875df5952c9d80bfe3b18" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ParseConfigurationLine</name></member>
      <member refid="class_hio_glslfx_1aa362961ac6b23ee5db5a5dca213c93e7" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ParseGLSLSectionLine</name></member>
      <member refid="class_hio_glslfx_1aca235593e4d0551187c6055a156fae36" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ParseLayoutSectionLine</name></member>
      <member refid="class_hio_glslfx_1ad6d51a2d021dda475e6949e867a656b2" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ParseSectionLine</name></member>
      <member refid="class_hio_glslfx_1a347ed342d16607cc08192095229dee5d" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ParseVersionLine</name></member>
      <member refid="class_hio_glslfx_1a2a0e10c25995512ce82d69eef23a6da7" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ProcessFile</name></member>
      <member refid="class_hio_glslfx_1aecd031b908c9d5676fc24959d93cb1e6" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ProcessImport</name></member>
      <member refid="class_hio_glslfx_1a0a85d6812a8d81d5799f2db12f899f96" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_ProcessInput</name></member>
      <member refid="class_hio_glslfx_1a1c0ab523d8753ec25710982d5b920ffe" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_seenFiles</name></member>
      <member refid="class_hio_glslfx_1a3f85e771710b0ab40a689593f9567483" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_SourceMap</name></member>
      <member refid="class_hio_glslfx_1af6d34d2d6190293de4141a5a89ec3042" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_sourceMap</name></member>
      <member refid="class_hio_glslfx_1a9c917a8f19d201c354128f518a2809cc" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_technique</name></member>
      <member refid="class_hio_glslfx_1ae923f1f1af45226b3de4dd97f4d64c2c" prot="private" virt="non-virtual"><scope>HioGlslfx</scope><name>_valid</name></member>
      <member refid="class_hio_glslfx_1a6335eb22d5e27ee86de0fcaad3e0b7ed" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>ExtractImports</name></member>
      <member refid="class_hio_glslfx_1aef6f0042af4aec0cc7902f96f3d7d7fb" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetAttributes</name></member>
      <member refid="class_hio_glslfx_1a2cdb98a2e8e0ed02f406ec2622e78cb1" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetDisplacementSource</name></member>
      <member refid="class_hio_glslfx_1acc4185bafb600f38dda22d2e6364930f" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetFilePath</name></member>
      <member refid="class_hio_glslfx_1aa1641e566cedd431eea01a3cb51577a0" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetFiles</name></member>
      <member refid="class_hio_glslfx_1aa99b522cc14f7d4a22d78368b476e12a" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetHash</name></member>
      <member refid="class_hio_glslfx_1a2c8a77e26373354cf40b97d0bd7d359b" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetLayoutAsDictionary</name></member>
      <member refid="class_hio_glslfx_1a974a053ba5d0e46b822248fda174e2e6" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetMetadata</name></member>
      <member refid="class_hio_glslfx_1a9a597f88d41d74caf8f2a30f2c8e632f" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetParameters</name></member>
      <member refid="class_hio_glslfx_1abc72d89b3b856ddcfa01c4752529fcf1" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetSource</name></member>
      <member refid="class_hio_glslfx_1ad1e441ae6c7e7a3518e6695fd4d99082" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetSurfaceSource</name></member>
      <member refid="class_hio_glslfx_1a4db4057c64e8705e780a3d65940cd567" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetTextures</name></member>
      <member refid="class_hio_glslfx_1a39345cc844aea100e785146e093db6dd" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>GetVolumeSource</name></member>
      <member refid="class_hio_glslfx_1a540d045fa6bf4270e70090051dcdb179" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>HioGlslfx</name></member>
      <member refid="class_hio_glslfx_1aa2b2e2fb5ad9e9780c408071c693755b" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>HioGlslfx</name></member>
      <member refid="class_hio_glslfx_1a913b3992eecc24857f01312c7d1e0873" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>HioGlslfx</name></member>
      <member refid="class_hio_glslfx_1a9deccd1ea8222d97c5120259f5ef7062" prot="public" virt="non-virtual"><scope>HioGlslfx</scope><name>IsValid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
