<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_dual_quatd" kind="class" language="C++" prot="public" final="yes">
    <compoundname>GfDualQuatd</compoundname>
    <includes refid="dual_quatd_8h" local="no">dualQuatd.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_dual_quatd_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="69" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_dual_quatd_1a9669bbaec7eb9411a66243153028bd90" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="265" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_dual_quatd_1a201bb7950281f5a2ab988eb09e8a3290" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref></type>
        <definition>GfQuatd _dual</definition>
        <argsstring></argsstring>
        <name>_dual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="266" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_dual_quatd_1ae9ee974440c555e6fec4a975c7b8ea77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatd</definition>
        <argsstring>()</argsstring>
        <name>GfDualQuatd</name>
        <briefdescription>
<para>The default constructor leaves the dual quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="72" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1ae747c8ca9414a265a856c907c7a7936c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatd</definition>
        <argsstring>(double realVal)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>double</type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>realVal</computeroutput> and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically must be normalized, reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="81" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a93b4c688dbef897987b8b531c1690377" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatd</definition>
        <argsstring>(const GfQuatd &amp;real)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>real</computeroutput> quaternion and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="86" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a654e7a68686203e6a4b8f51492bd412a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatd</definition>
        <argsstring>(const GfQuatd &amp;real, const GfQuatd &amp;dual)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the real and dual parts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="91" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1aa2bf9433826aca1b60e433ba6024f734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatd</definition>
        <argsstring>(const GfQuatd &amp;rotation, const GfVec3d &amp;translation)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>This constructor initializes from a rotation and a translation components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="96" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a99f82d9163c51dcad6970f7e1c3c01e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuatd</definition>
        <argsstring>(const GfDualQuatf &amp;other)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a0d26710c6a051a86a8ab0f4dce86348a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuatd</definition>
        <argsstring>(const GfDualQuath &amp;other)</argsstring>
        <name>GfDualQuatd</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a5cbab19a54a770f70bb0088c9f84cc61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(const GfQuatd &amp;real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Sets the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="109" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1af009822ca28794c572c18fa85d54c09e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetDual</definition>
        <argsstring>(const GfQuatd &amp;dual)</argsstring>
        <name>SetDual</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>Sets the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="114" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a860f74252e87f9a8b3ec5a908afec062" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>const GfQuatd&amp; GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Returns the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="119" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1aebe37158bdb5d111bd9296f4e516645d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
        <definition>const GfQuatd&amp; GetDual</definition>
        <argsstring>() const</argsstring>
        <name>GetDual</name>
        <briefdescription>
<para>Returns the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="124" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a4543cf53d1305ad360b92dd8881eb204" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; double, double &gt;</type>
        <definition>GF_API std::pair&lt;double, double&gt; GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Returns geometric length of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a53fcf27decc6cb1d9e3cc67ae5f970d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GF_API GfDualQuatd GetNormalized</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Returns a normalized (unit-length) version of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this returns the identity dual quaternion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a34b1a35ae7d7da8e327ab581b918b5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; double, double &gt;</type>
        <definition>GF_API std::pair&lt;double, double&gt; Normalize</definition>
        <argsstring>(double eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this dual quaternion in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this dual quaternion in place to unit length, returning the length before normalization. If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the dual quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a2bfa08fd7def54f168dc51df2f9bc199" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GF_API GfDualQuatd GetConjugate</definition>
        <argsstring>() const</argsstring>
        <name>GetConjugate</name>
        <briefdescription>
<para>Returns the conjugate of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a97030f68902b3829e59c621c81fb2a83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GF_API GfDualQuatd GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Returns the inverse of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1ac55c19d38a88354ca2d7218076dd3d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetTranslation</definition>
        <argsstring>(const GfVec3d &amp;translation)</argsstring>
        <name>SetTranslation</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Set the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a8abe15a18eb6eddf6f376492158a3715" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d GetTranslation</definition>
        <argsstring>() const</argsstring>
        <name>GetTranslation</name>
        <briefdescription>
<para>Get the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a3a286581d70dc4aeccef7f79e48a254f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfDualQuatd &amp;dq) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="180" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a8f597e91b96981d8b9f23177e8fab7ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfDualQuatd &amp;dq) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="187" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1af6909ad659585598287b2c22828229f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
        <definition>GfDualQuatd&amp; operator+=</definition>
        <argsstring>(const GfDualQuatd &amp;dq)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="192" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a1c982e77ef4fee7ed8f61f56099f9d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
        <definition>GfDualQuatd&amp; operator -=</definition>
        <argsstring>(const GfDualQuatd &amp;dq)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="199" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1ac7c10c8101b1b03b7fcec182aeb61dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
        <definition>GF_API GfDualQuatd&amp; operator *=</definition>
        <argsstring>(const GfDualQuatd &amp;dq)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Post-multiplies dual quaternion <computeroutput>dq</computeroutput> into this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1a55f12c4387f35c16764d8e65389f7c6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
        <definition>GfDualQuatd&amp; operator *=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="210" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1ad9d53f3f7a948b74b926ea4411c33813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
        <definition>GfDualQuatd&amp; operator/=</definition>
        <argsstring>(double s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="217" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1ab75379d5a74cbcb59dbbc77ec1893275" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d Transform</definition>
        <argsstring>(const GfVec3d &amp;vec) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="262" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_dual_quatd_1ab13af10d1c22094ab0b98c30cd7cc467" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>static GfDualQuatd GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Returns the zero dual quaternion, which has a real part of (0,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="130" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatd_1aed78c37622e1cb14ce545a8054927f01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>static GfDualQuatd GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Returns the identity dual quaternion, which has a real part of (1,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="136" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="136" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_dual_quatd_1ae84f7794641a5f86ee37cc7be942c7b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfDualQuatd &amp;dq)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="174" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1a8c0cc19936f1ce7bbf2556abda909768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator+</definition>
        <argsstring>(const GfDualQuatd &amp;dq1, const GfDualQuatd &amp;dq2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="222" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1aa095c6e4983e9f2e4b72b82c3c14895d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator -</definition>
        <argsstring>(const GfDualQuatd &amp;dq1, const GfDualQuatd &amp;dq2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="229" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1aa2930cb2586ca082d819cb8301d0feec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator *</definition>
        <argsstring>(const GfDualQuatd &amp;dq1, const GfDualQuatd &amp;dq2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternions <computeroutput>dq1</computeroutput> and <computeroutput>dq2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="236" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="236" bodyend="240"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1af504c707b2f013e30146ce14e74d9910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator *</definition>
        <argsstring>(const GfDualQuatd &amp;dq, double s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="243" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1aa75356ac6725bad1b1151a1a0e09b9c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator *</definition>
        <argsstring>(double s, const GfDualQuatd &amp;dq)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="249" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatd_1a885bad3e12b3246cc0cc88f41a68bbee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref></type>
        <definition>GfDualQuatd operator/</definition>
        <argsstring>(const GfDualQuatd &amp;dq, double s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="255" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="255" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: a real part quaternion and a dual part quaternion. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a generalized dual quaternion that has a real part and a dual part quaternions. Dual quaternions are used to represent a combination of rotation and translation.</para>
<para>References: <ulink url="https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf">https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf</ulink> <ulink url="http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf">http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf</ulink> </para>
    </detaileddescription>
    <location file="pxr/base/gf/dualQuatd.h" line="67" column="1" bodyfile="pxr/base/gf/dualQuatd.h" bodystart="66" bodyend="267"/>
    <listofallmembers>
      <member refid="class_gf_dual_quatd_1a201bb7950281f5a2ab988eb09e8a3290" prot="private" virt="non-virtual"><scope>GfDualQuatd</scope><name>_dual</name></member>
      <member refid="class_gf_dual_quatd_1a9669bbaec7eb9411a66243153028bd90" prot="private" virt="non-virtual"><scope>GfDualQuatd</scope><name>_real</name></member>
      <member refid="class_gf_dual_quatd_1a2bfa08fd7def54f168dc51df2f9bc199" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetConjugate</name></member>
      <member refid="class_gf_dual_quatd_1aebe37158bdb5d111bd9296f4e516645d" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetDual</name></member>
      <member refid="class_gf_dual_quatd_1aed78c37622e1cb14ce545a8054927f01" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetIdentity</name></member>
      <member refid="class_gf_dual_quatd_1a97030f68902b3829e59c621c81fb2a83" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetInverse</name></member>
      <member refid="class_gf_dual_quatd_1a4543cf53d1305ad360b92dd8881eb204" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetLength</name></member>
      <member refid="class_gf_dual_quatd_1a53fcf27decc6cb1d9e3cc67ae5f970d5" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetNormalized</name></member>
      <member refid="class_gf_dual_quatd_1a860f74252e87f9a8b3ec5a908afec062" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetReal</name></member>
      <member refid="class_gf_dual_quatd_1a8abe15a18eb6eddf6f376492158a3715" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetTranslation</name></member>
      <member refid="class_gf_dual_quatd_1ab13af10d1c22094ab0b98c30cd7cc467" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GetZero</name></member>
      <member refid="class_gf_dual_quatd_1ae9ee974440c555e6fec4a975c7b8ea77" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1ae747c8ca9414a265a856c907c7a7936c" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1a93b4c688dbef897987b8b531c1690377" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1a654e7a68686203e6a4b8f51492bd412a" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1aa2bf9433826aca1b60e433ba6024f734" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1a99f82d9163c51dcad6970f7e1c3c01e8" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1a0d26710c6a051a86a8ab0f4dce86348a" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>GfDualQuatd</name></member>
      <member refid="class_gf_dual_quatd_1ae84f7794641a5f86ee37cc7be942c7b8" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>hash_value</name></member>
      <member refid="class_gf_dual_quatd_1a34b1a35ae7d7da8e327ab581b918b5e3" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>Normalize</name></member>
      <member refid="class_gf_dual_quatd_1a8f597e91b96981d8b9f23177e8fab7ac" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator !=</name></member>
      <member refid="class_gf_dual_quatd_1aa2930cb2586ca082d819cb8301d0feec" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatd_1af504c707b2f013e30146ce14e74d9910" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatd_1aa75356ac6725bad1b1151a1a0e09b9c5" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatd_1ac7c10c8101b1b03b7fcec182aeb61dba" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quatd_1a55f12c4387f35c16764d8e65389f7c6c" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quatd_1aa095c6e4983e9f2e4b72b82c3c14895d" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator -</name></member>
      <member refid="class_gf_dual_quatd_1a1c982e77ef4fee7ed8f61f56099f9d14" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator -=</name></member>
      <member refid="class_gf_dual_quatd_1a8c0cc19936f1ce7bbf2556abda909768" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator+</name></member>
      <member refid="class_gf_dual_quatd_1af6909ad659585598287b2c22828229f7" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator+=</name></member>
      <member refid="class_gf_dual_quatd_1a885bad3e12b3246cc0cc88f41a68bbee" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator/</name></member>
      <member refid="class_gf_dual_quatd_1ad9d53f3f7a948b74b926ea4411c33813" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator/=</name></member>
      <member refid="class_gf_dual_quatd_1a3a286581d70dc4aeccef7f79e48a254f" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>operator==</name></member>
      <member refid="class_gf_dual_quatd_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>ScalarType</name></member>
      <member refid="class_gf_dual_quatd_1af009822ca28794c572c18fa85d54c09e" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>SetDual</name></member>
      <member refid="class_gf_dual_quatd_1a5cbab19a54a770f70bb0088c9f84cc61" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>SetReal</name></member>
      <member refid="class_gf_dual_quatd_1ac55c19d38a88354ca2d7218076dd3d75" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>SetTranslation</name></member>
      <member refid="class_gf_dual_quatd_1ab75379d5a74cbcb59dbbc77ec1893275" prot="public" virt="non-virtual"><scope>GfDualQuatd</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
