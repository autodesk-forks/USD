<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_malloc_tag_1_1_auto" kind="class" language="C++" prot="public">
    <compoundname>TfMallocTag::Auto</compoundname>
    <includes refid="malloc_tag_8h" local="no">mallocTag.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_malloc_tag_1_1_auto_1ac35b65b67687da8a2b2273bda93162fb" prot="private" static="no" mutable="no">
        <type>_ThreadData *</type>
        <definition>_ThreadData* _threadData</definition>
        <argsstring></argsstring>
        <name>_threadData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="329" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_malloc_tag_1_1_auto_1a6e7e41f3fc833b859803f1b3c7897a0f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _nTags</definition>
        <argsstring></argsstring>
        <name>_nTags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="330" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_malloc_tag_1_1_auto_1a737355e5790f2da1ddfa7303379a99cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfMallocTag</definition>
        <argsstring></argsstring>
        <name>TfMallocTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="332" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a8f81ded3b2712a8c9787f2b91b30f219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Auto</definition>
        <argsstring>(const Auto &amp;)=delete</argsstring>
        <name>Auto</name>
        <param>
          <type>const <ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1ab41308b0e141cc21cf6bdbdf4406c51e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;</type>
        <definition>Auto&amp; operator=</definition>
        <argsstring>(const Auto &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1aed0847b3189286e75acec19297fbd0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Auto</definition>
        <argsstring>(Auto &amp;&amp;)=delete</argsstring>
        <name>Auto</name>
        <param>
          <type><ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a344b7f30416c9ede9237ccf7b1bb7ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;</type>
        <definition>Auto&amp; operator=</definition>
        <argsstring>(Auto &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">Auto</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a0568be3a5a3e9b0cc9b6c172a5ce6d28" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Str</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Strs</declname>
            <defname>Strs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Auto</definition>
        <argsstring>(Str &amp;&amp;name1, Strs &amp;&amp;... nameN)</argsstring>
        <name>Auto</name>
        <param>
          <type>Str &amp;&amp;</type>
          <declname>name1</declname>
        </param>
        <param>
          <type>Strs &amp;&amp;...</type>
          <declname>nameN</declname>
        </param>
        <briefdescription>
<para>Push one or more memory tags onto the local-call stack with names <computeroutput>name1</computeroutput> ... </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nameN</computeroutput>. The passed names should be either string literals, const char pointers, or std::strings.</para>
<para>If <computeroutput><ref refid="class_tf_malloc_tag_1a9ce0eae963544ac6d083e4f95d4a9b36" kindref="member">TfMallocTag::Initialize()</ref></computeroutput> has not been called, this constructor does essentially no work, assuming the names are string literals or a pointer to an existing c-string. However if any of the names are expressions that evaluate to <computeroutput>std::string</computeroutput> objects, the work done constructing those strings will still be incurred. If this is an issue, you can query <computeroutput><ref refid="class_tf_malloc_tag_1ab2c217951b4362bb6661a1e863105320" kindref="member">TfMallocTag::IsInitialized()</ref></computeroutput> to avoid unneeded work when tagging is inactive.</para>
<para>Objects of this class should only be created as local variables; never as member variables, global variables, or via <computeroutput>new</computeroutput>. If you can&apos;t create your object as a local variable, you can make manual calls to <computeroutput><ref refid="class_tf_malloc_tag_1a74ab306ad41ec3ea17f4082be70bd60d" kindref="member">TfMallocTag::Push()</ref></computeroutput> and <computeroutput><ref refid="class_tf_malloc_tag_1ab7dd1bc7d631e417135051f4405ee177" kindref="member">TfMallocTag::Pop()</ref></computeroutput>, though you should do this only as a last resort. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="281" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a94c93747c8daa99d65c2a04c6be0748c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <briefdescription>
<para>Pop the tag from the stack before it is destructed. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally you should not use this. The normal destructor is preferable because it ensures proper release order. If you call <computeroutput><ref refid="class_tf_malloc_tag_1_1_auto_1a94c93747c8daa99d65c2a04c6be0748c" kindref="member">Release()</ref></computeroutput>, make sure all tags are released in the opposite order they were declared in. It is better to use sub-scopes to control the life span of tags, but if that won&apos;t work, <computeroutput><ref refid="class_tf_malloc_tag_1_1_auto_1a94c93747c8daa99d65c2a04c6be0748c" kindref="member">Release()</ref></computeroutput> is still preferable to <computeroutput><ref refid="class_tf_malloc_tag_1a74ab306ad41ec3ea17f4082be70bd60d" kindref="member">TfMallocTag::Push()</ref></computeroutput> and <computeroutput><ref refid="class_tf_malloc_tag_1ab7dd1bc7d631e417135051f4405ee177" kindref="member">TfMallocTag::Pop()</ref></computeroutput> because it isn&apos;t vulnerable to early returns or exceptions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="297" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a7e6a94b61c9cc87f344f283a41ef671b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~Auto</definition>
        <argsstring>()</argsstring>
        <name>~Auto</name>
        <briefdescription>
<para>Pop a memory tag from the local-call stack. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput><ref refid="class_tf_malloc_tag_1a9ce0eae963544ac6d083e4f95d4a9b36" kindref="member">TfMallocTag::Initialize()</ref></computeroutput> was not called when this tag was pushed onto the stack, popping the tag from the stack does essentially no (measurable) work. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="309" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="309" bodyend="311"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a2dbfd7cb52db57b2ea56cfd48be5add3" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* _CStr</definition>
        <argsstring>(char const *cstr) const</argsstring>
        <name>_CStr</name>
        <param>
          <type>char const *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="315" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a604fef9c7a026531776b08f07a7ee850" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* _CStr</definition>
        <argsstring>(std::string const &amp;str) const</argsstring>
        <name>_CStr</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="316" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1ab338266cb4f291a397481819ffa5a42e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Str</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Strs</declname>
            <defname>Strs</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int _PushImpl</definition>
        <argsstring>(Str &amp;&amp;tag, Strs &amp;&amp;... rest)</argsstring>
        <name>_PushImpl</name>
        <param>
          <type>Str &amp;&amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Strs &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="319" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_malloc_tag_1_1_auto_1a5c67773b9843869287733ff050c8ec03" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int _PushImpl</definition>
        <argsstring>()</argsstring>
        <name>_PushImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/mallocTag.h" line="324" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="324" bodyend="327"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Scoped (i.e. </para>
    </briefdescription>
    <detaileddescription>
<para>local) object for creating/destroying memory tags.</para>
<para>Note: <computeroutput>TfAutoMallocTag</computeroutput> is a typedef to <computeroutput><ref refid="class_tf_malloc_tag_1_1_auto" kindref="compound">TfMallocTag::Auto</ref></computeroutput>; the convention is to use <computeroutput>TfAutoMallocTag</computeroutput> to make it clear that the local object exists only because its constructor and destructor modify program state.</para>
<para>A <computeroutput>TfAutoMallocTag</computeroutput> object is used to push memory tags onto the current call stack; destruction of the object pops the tags. Note that each thread has its own tag-stack.</para>
<para>There is very little cost to creating or destroying memory tags if <computeroutput><ref refid="class_tf_malloc_tag_1a9ce0eae963544ac6d083e4f95d4a9b36" kindref="member">TfMallocTag::Initialize()</ref></computeroutput> has not been called: an inline read of a global variable and a branch. If tagging has been initialized, then there is a small cost associated with pushing and popping memory tags on the local stack. Most of the cost is taking a shared/read lock on a mutex and looking up the tag data structures in hash tables. Pushing or popping the call stack does not actually cause any memory allocation unless this is the first time that the given named tag has been encountered. </para>
    </detaileddescription>
    <location file="pxr/base/tf/mallocTag.h" line="255" column="1" bodyfile="pxr/base/tf/mallocTag.h" bodystart="255" bodyend="333"/>
    <listofallmembers>
      <member refid="class_tf_malloc_tag_1_1_auto_1a2dbfd7cb52db57b2ea56cfd48be5add3" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_CStr</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a604fef9c7a026531776b08f07a7ee850" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_CStr</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a6e7e41f3fc833b859803f1b3c7897a0f" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_nTags</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1ab338266cb4f291a397481819ffa5a42e" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_PushImpl</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a5c67773b9843869287733ff050c8ec03" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_PushImpl</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1ac35b65b67687da8a2b2273bda93162fb" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>_threadData</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a8f81ded3b2712a8c9787f2b91b30f219" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>Auto</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1aed0847b3189286e75acec19297fbd0dd" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>Auto</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a0568be3a5a3e9b0cc9b6c172a5ce6d28" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>Auto</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1ab41308b0e141cc21cf6bdbdf4406c51e" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>operator=</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a344b7f30416c9ede9237ccf7b1bb7ba9" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>operator=</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a94c93747c8daa99d65c2a04c6be0748c" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>Release</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a737355e5790f2da1ddfa7303379a99cb" prot="private" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>TfMallocTag</name></member>
      <member refid="class_tf_malloc_tag_1_1_auto_1a7e6a94b61c9cc87f344f283a41ef671b" prot="public" virt="non-virtual"><scope>TfMallocTag::Auto</scope><name>~Auto</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
