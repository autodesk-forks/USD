<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_primvar" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomPrimvar</compoundname>
    <includes refid="primvar_8h" local="no">primvar.h</includes>
      <sectiondef kind="user-defined">
      <header>UsdAttribute API</header>
      <memberdef kind="function" id="class_usd_geom_primvar_1aa7de176ee0f6bf8890f1812e93e43ce7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator UsdAttribute const &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator UsdAttribute const &amp;</name>
        <briefdescription>
<para>Allow <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> to auto-convert to <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>, so you can pass a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> to any function that accepts a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> or const-ref thereto. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="397" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a1d68bd302d71917d30a1ff9e4e30d220" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const  &amp;</type>
        <definition>UsdAttribute const&amp; GetAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetAttr</name>
        <briefdescription>
<para>Explicit <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> extractor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="400" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="400" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsDefined</definition>
        <argsstring>() const</argsstring>
        <name>IsDefined</name>
        <briefdescription>
<para>Return true if the underlying <ref refid="class_usd_property_1a409637b99e0b5b487b9e7d1d2016dbfc" kindref="member">UsdAttribute::IsDefined()</ref>, and in addition the attribute is identified as a Primvar. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not imply that the primvar provides a value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="405" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="405" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ae26b73bbf70dc88433be39df364ca7c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasValue</definition>
        <argsstring>() const</argsstring>
        <name>HasValue</name>
        <briefdescription>
<para>Return true if the underlying attribute has a value, either from authored scene description or a fallback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="409" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a8a41a61d2763aeeab90f688c239a509c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasAuthoredValue</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredValue</name>
        <briefdescription>
<para>Return true if the underlying attribute has an unblocked, authored value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="413" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><anchor id="class_usd_geom_primvar_1UsdGeomPrimvar_bool"/>Return true if this Primvar is valid for querying and authoring values and metadata, which is identically equivalent to <ref refid="class_usd_geom_primvar_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">IsDefined()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="418" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a7e0e19c72edf9def26749f35edf63ba2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const  &amp;</type>
        <definition>TfToken const&amp; GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_object_1ae57e12beedf10c423e11c5b889343f6d" kindref="member">UsdAttribute::GetName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="423" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a74937608623e5746fcee1a6d08959a7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDGEOM_API TfToken GetPrimvarName</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvarName</name>
        <briefdescription>
<para>Returns the primvar&apos;s name, devoid of the &quot;primvars:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the name by which clients should refer to the primvar, if not by its full attribute name - i.e. they should <bold>not</bold>, in general, use <ref refid="class_usd_geom_primvar_1a06dcc2a106605fc3fcd2127a0a4f01c8" kindref="member">GetBaseName()</ref>. In the error condition in which this Primvar object is not backed by a properly namespaced <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>, return an empty <ref refid="class_tf_token" kindref="compound">TfToken</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a4f6bd363f8325aeb8d55c8ab7c41603b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool NameContainsNamespaces</definition>
        <argsstring>() const</argsstring>
        <name>NameContainsNamespaces</name>
        <briefdescription>
<para>Does this primvar contain any namespaces other than the &quot;primvars:&quot; namespace? </para>
        </briefdescription>
        <detaileddescription>
<para>Some clients may only wish to consume primvars that have no extra namespaces in their names, for ease of translating to other systems that do not allow namespaces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a06dcc2a106605fc3fcd2127a0a4f01c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetBaseName</definition>
        <argsstring>() const</argsstring>
        <name>GetBaseName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_property_1a2011318cd445c9fc30a1a00df5318a86" kindref="member">UsdAttribute::GetBaseName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="444" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a676767b8647a9c3ab90e86c1f11836c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetNamespace</definition>
        <argsstring>() const</argsstring>
        <name>GetNamespace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_property_1a914ef5e6cffe6c3c85f7b1085bea0cf2" kindref="member">UsdAttribute::GetNamespace()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="447" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="447" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1af9a0f70764746e029bfb439129de47dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; SplitName</definition>
        <argsstring>() const</argsstring>
        <name>SplitName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_property_1a7253ab8dc19d4e7540b49b70bcc82ff6" kindref="member">UsdAttribute::SplitName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="450" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ab7b5443a6619155d73db00d22419d361" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SdfValueTypeName GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a81ff07cc76cab8a0efd51b8938b9a124" kindref="member">UsdAttribute::GetTypeName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="453" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="453" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Get</definition>
        <argsstring>(T *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Get the attribute value of the Primvar at <computeroutput>time</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Usd_Handling_Indexed_Primvars for proper handling of <ref refid="class_usd_geom_primvar_1Usd_Handling_Indexed_Primvars" kindref="member">indexed primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="460" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a7fd0957eecddb7cfcd222cccd51e23e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Set</definition>
        <argsstring>(const T &amp;value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Set</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the attribute value of the Primvar at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="466" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="466" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a0384cb87a595fa56c29463ff4fe73015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetTimeSamples</definition>
        <argsstring>(std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamples</name>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times for this primvar. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false on error.</para>
<para>This considers any timeSamples authored on the associated &quot;indices&quot; attribute if the primvar is indexed.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetTimeSamplesInInterval</definition>
        <argsstring>(const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamplesInInterval</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times in <computeroutput>interval</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This considers any timeSamples authored on the associated &quot;indices&quot; attribute if the primvar is indexed.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" kindref="member">UsdAttribute::GetTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1afd49c6ff61ad34f9bfaa9f0eb2495207" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ValueMightBeTimeVarying</definition>
        <argsstring>() const</argsstring>
        <name>ValueMightBeTimeVarying</name>
        <briefdescription>
<para>Return true if it is possible, but not certain, that this primvar&apos;s value changes over time, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This considers time-varyingness of the associated &quot;indices&quot; attribute if the primvar is indexed.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1adc2ce35114eb530bfa1d4b46c3d8fabc" kindref="member">UsdAttribute::ValueMightBeTimeVarying</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="498" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Indexed primvars API</header>
      <description><para><anchor id="class_usd_geom_primvar_1UsdGeomPrimvar_Indexed_primvars"/></para>
<para>For non-constant values of interpolation, it is often the case that the same value is repeated many times in the array value of a primvar. An indexed primvar can be used in such cases to optimize for data storage if the primvar&apos;s interpolation is uniform, varying, or vertex. For <bold>faceVarying primvars</bold>, however, indexing serves a higher purpose (and should be used <emphasis>only</emphasis> for this purpose, since renderers and OpenSubdiv will assume it) of establishing a surface topology for the primvar. That is, faceVarying primvars use indexing to unambiguously define discontinuities in their functions at edges and vertices. Please see the <ulink url="http://graphics.pixar.com/opensubdiv/docs/subdivision_surfaces.html#face-varying-interpolation-rules">OpenSubdiv documentation on FaceVarying Primvars</ulink> for more information.</para>
<para>To create an indexed primvar, the value of the attribute associated with the primvar is set to an array consisting of all the unique values that appear in the primvar array. A separate namespaced &quot;indices&quot; attribute is set to an integer array containing indices into the array with all the unique elements. The final value of the primvar is computed using the indices array and the attribute value array.</para>
<para>See also <ref refid="class_usd_geom_primvar_1Usd_Handling_Indexed_Primvars" kindref="member">Proper Client Handling of &quot;Indexed&quot; Primvars</ref> </para>
</description>
      <memberdef kind="function" id="class_usd_geom_primvar_1a4d8cc49a0344ff0a5dbad1618fb4b1b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetIndices</definition>
        <argsstring>(const VtIntArray &amp;indices, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>SetIndices</name>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Sets the indices value of the indexed primvar at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values in the indices array must be valid indices into the authored array returned by <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref>. The element numerality of the primvar&apos;s &apos;interpolation&apos; metadata applies to the &quot;indices&quot; array, not the attribute value array (returned by <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1afc956605fa86dd0ecc18924aae57a0a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetIndices</definition>
        <argsstring>(VtIntArray *indices, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>GetIndices</name>
        <param>
          <type>VtIntArray *</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the value of the indices array associated with the indexed primvar at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1a4d8cc49a0344ff0a5dbad1618fb4b1b7" kindref="member">SetIndices()</ref>, <ref refid="class_usd_geom_primvar_1Usd_Handling_Indexed_Primvars" kindref="member">Proper Client Handling of &quot;Indexed&quot; Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1aec7f855676def21ea29008f7131aeba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void BlockIndices</definition>
        <argsstring>() const</argsstring>
        <name>BlockIndices</name>
        <briefdescription>
<para>Block the indices that were previously set. </para>
        </briefdescription>
        <detaileddescription>
<para>This effectively makes an indexed primvar no longer indexed. This is useful when overriding an existing primvar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ad3a2dc86a80af7c071ddb9c418f42b9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool IsIndexed</definition>
        <argsstring>() const</argsstring>
        <name>IsIndexed</name>
        <briefdescription>
<para>Returns true if the primvar is indexed, i.e., if it has an associated &quot;indices&quot; attribute. </para>
        </briefdescription>
        <detaileddescription>
<para>If you are going to query the indices anyways, prefer to simply consult the return-value of <ref refid="class_usd_geom_primvar_1afc956605fa86dd0ecc18924aae57a0a9" kindref="member">GetIndices()</ref>, which will be more efficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1adc3cf34c4a7aa5689619d84474b55cfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetIndicesAttr</name>
        <briefdescription>
<para>Returns a valid indices attribute if the primvar is indexed. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an invalid attribute otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a853cfdc7140662ad33c66eede0c5cc76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateIndicesAttr</definition>
        <argsstring>() const</argsstring>
        <name>CreateIndicesAttr</name>
        <briefdescription>
<para>Returns the existing indices attribute if the primvar is indexed or creates a new one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a6ddedae6939f8e0907961772d0423638" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetUnauthoredValuesIndex</definition>
        <argsstring>(int unauthoredValuesIndex) const</argsstring>
        <name>SetUnauthoredValuesIndex</name>
        <param>
          <type>int</type>
          <declname>unauthoredValuesIndex</declname>
        </param>
        <briefdescription>
<para>Set the index that represents unauthored values in the indices array. </para>
        </briefdescription>
        <detaileddescription>
<para>Some apps (like Maya) allow you to author primvars sparsely over a surface. Since most apps can&apos;t handle sparse primvars, Maya needs to provide a value even for the elements it didn&apos;t author. This metadatum provides a way to recover the information in apps that do support sparse authoring / representation of primvars.</para>
<para>The fallback value of unauthoredValuesIndex is -1, which indicates that there are no unauthored values.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1a5b283c231bdee5c04f956cfd0f901ee5" kindref="member">GetUnauthoredValuesIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a5b283c231bdee5c04f956cfd0f901ee5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API int</type>
        <definition>USDGEOM_API int GetUnauthoredValuesIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetUnauthoredValuesIndex</name>
        <briefdescription>
<para>Returns the index that represents unauthored values in the indices array. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1a6ddedae6939f8e0907961772d0423638" kindref="member">SetUnauthoredValuesIndex()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a3ff95fac2aa8a267d96fa17a2453ba31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ComputeFlattened</definition>
        <argsstring>(VtArray&lt; ScalarType &gt; *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>ComputeFlattened</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; ScalarType &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes the flattened value of the primvar at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the primvar is not indexed or if the value type of this primvar is a scalar, this returns the authored value, which is the same as <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref>. Hence, it&apos;s safe to call <ref refid="class_usd_geom_primvar_1a3ff95fac2aa8a267d96fa17a2453ba31" kindref="member">ComputeFlattened()</ref> on non-indexed primvars. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="599" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="823" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a3163a48cab6f324c8872f4612818d533" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ComputeFlattened</definition>
        <argsstring>(VtValue *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>ComputeFlattened</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Computes the flattened value of the primvar at <computeroutput>time</computeroutput> as a <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the primvar is not indexed or if the value type of this primvar is a scalar, this returns the authored value, which is the same as <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref>. Hence, it&apos;s safe to call <ref refid="class_usd_geom_primvar_1a3ff95fac2aa8a267d96fa17a2453ba31" kindref="member">ComputeFlattened()</ref> on non-indexed primvars. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a6871038b2d5413a95b9a5f3b02c17a51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool ComputeFlattened</definition>
        <argsstring>(VtValue *value, const VtValue &amp;attrVal, const VtIntArray &amp;indices, std::string *errString)</argsstring>
        <name>ComputeFlattened</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>attrVal</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errString</declname>
        </param>
        <briefdescription>
<para>Computes the flattened value of <computeroutput>attrValue</computeroutput> given <computeroutput>indices</computeroutput>, assuming an elementSize of 1. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is a static convenience function that performs the main work of ComputeFlattened above without needing an instance of a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>.</para>
<para>Returns <computeroutput>false</computeroutput> if the value contained in <computeroutput>attrVal</computeroutput> is not a supported type for flattening. Otherwise returns <computeroutput>true</computeroutput>. The output <computeroutput>errString</computeroutput> variable may be populated with an error string if an error is encountered during flattening. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a5042653708628ea116b027f07d2ec23f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool ComputeFlattened</definition>
        <argsstring>(VtValue *value, const VtValue &amp;attrVal, const VtIntArray &amp;indices, int elementSize, std::string *errString)</argsstring>
        <name>ComputeFlattened</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>attrVal</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errString</declname>
        </param>
        <briefdescription>
<para>Computes the flattened value of <computeroutput>attrValue</computeroutput> given <computeroutput>indices</computeroutput> and <computeroutput>elementSize</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is a static convenience function that performs the main work of ComputeFlattened above without needing an instance of a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>.</para>
<para>Returns <computeroutput>false</computeroutput> if the value contained in <computeroutput>attrVal</computeroutput> is not a supported type for flattening. Otherwise returns <computeroutput>true</computeroutput>. The output <computeroutput>errString</computeroutput> variable may be populated with an error string if an error is encountered during flattening. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="641" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Id attribute API</header>
      <description><para><anchor id="class_usd_geom_primvar_1UsdGeomPrimvar_Id_primvars"/></para>
<para>Often there is the need to identify a prim within a scene (e.g. a mesh on which a procedural should operate, or a shader to inherit). A string or string[] -typed primvar can be turned into an &quot;Id Path&quot; primvar by calling <ref refid="class_usd_geom_primvar_1ac7e1a8e33e65f71ec890c8016fa24baf" kindref="member">SetIdTarget()</ref> with the path of any object on the current stage. When the primvar is subsequently queried via <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref>, the returned value will be the stringified value of the targeted object&apos;s path in whatever namespace is defined by the querying stage&apos;s root layer. In other words, authoring an Id primvar into a published model will return the path-to-target in the model, but when the model is referenced into a larger scene, it will return the complete scene path.</para>
<para>This works by adding a paired <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> in a &quot;:idFrom&quot; namespace &quot;below&quot; the string primvar. <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> evaluates <ref refid="class_usd_relationship_1a66140abeac945df3998b3297e52ca99b" kindref="member">UsdRelationship::GetForwardedTargets()</ref> to determine the id-string. Thus, this mechanism will always produce a unique identifier for every object in a scene, regardless of how many times an asset is referenced into a scene. Providing a mesh with a unique identifier primvar can be especially useful for renderers that allow plugins/shaders access to processed scene data based on user-provided string identifiers.</para>
<para>If an Id primvar has both an <emphasis>authored</emphasis> string value and a <ref refid="class_usd_geom_primvar_1ac7e1a8e33e65f71ec890c8016fa24baf" kindref="member">SetIdTarget()</ref>&apos;d target, the target path takes precedence.</para>
<para>Currently Id primvars can have only a single target, so the only useful interpolation is constant. </para>
</description>
      <memberdef kind="function" id="class_usd_geom_primvar_1a5cfc59da483718853d76f913d489907b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool IsIdTarget</definition>
        <argsstring>() const</argsstring>
        <name>IsIdTarget</name>
        <briefdescription>
<para>Returns true if the primvar is an Id primvar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_Id_primvars" kindref="member">UsdGeomPrimvar_Id_primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ac7e1a8e33e65f71ec890c8016fa24baf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetIdTarget</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>SetIdTarget</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>This primvar must be of String or StringArray type for this method to succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>If not, a coding error is raised.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_Id_primvars" kindref="member">UsdGeomPrimvar_Id_primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="692" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3" prot="private" static="no" strong="no">
        <type></type>
        <name>_IdTargetStatus</name>
        <enumvalue id="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a4ee4297e641584336eb8b00dc3f599d0" prot="private">
          <name>IdTargetUninitialized</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3aa68e1489db953bf7285d59b272b60376" prot="private">
          <name>IdTargetInitializing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a32da1b3197c08d5bc02c796c2a1b8634" prot="private">
          <name>IdTargetImpossible</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a571e7ff31cc42c4c2bde0374fc77937e" prot="private">
          <name>IdTargetPossible</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="800" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="800" bodyend="804"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_primvar_1a80dcf6da53e1f6300736285ea4015ae9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdGeomImageable</definition>
        <argsstring></argsstring>
        <name>UsdGeomImageable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="728" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1ae6740917e333f813c09ef7baa421cf16" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdGeomPrimvarsAPI</definition>
        <argsstring></argsstring>
        <name>UsdGeomPrimvarsAPI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="729" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1a6915fca52483ce6cbc5114db9dd2b591" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const UsdGeomPrimvar &amp;lhs, const UsdGeomPrimvar &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> represent the same <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="698" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1a525134c48c9f078bcf28e2d2ffb40bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const UsdGeomPrimvar &amp;lhs, const UsdGeomPrimvar &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>Return false if <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> represent the same UsdPrimvar, true otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="704" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="704" bodyend="706"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1af4e44be670450ff8c70d3bc827cff9e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const UsdGeomPrimvar &amp;lhs, const UsdGeomPrimvar &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-than operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if <emphasis>lhs</emphasis> &lt; <emphasis>rhs</emphasis>.</para>
<para>This simply compares the paths of the underlyingattributes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="711" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1a57dcc9f15fc5c19e7562053185627da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const UsdGeomPrimvar &amp;obj)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="717" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="717" bodyend="719"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_primvar_1a7f5fc84be1e635230694a4ffbf57dfcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const UsdGeomPrimvar &amp;obj)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="722" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="722" bodyend="724"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_geom_primvar_1a5264980b5cd3db34a397bfda54c1b566" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>UsdAttribute _attr</definition>
        <argsstring></argsstring>
        <name>_attr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="768" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_primvar_1a08fd547ec4ca45efaf2274801101030b" prot="private" static="no" mutable="yes">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _idTargetRelName</definition>
        <argsstring></argsstring>
        <name>_idTargetRelName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="806" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_primvar_1ac423adeafcbb31fa57eb3ded19300324" prot="private" static="no" mutable="yes">
        <type>std::atomic&lt; _IdTargetStatus &gt;</type>
        <definition>std::atomic&lt;_IdTargetStatus&gt; _idTargetStatus</definition>
        <argsstring></argsstring>
        <name>_idTargetStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="807" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_primvar_1adaab5fdc84be7605f646d1d4eb6ce8fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomPrimvar</definition>
        <argsstring>()</argsstring>
        <name>UsdGeomPrimvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="267" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a8666b2b5076603ab040b551b5d09e800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API</type>
        <definition>USDGEOM_API UsdGeomPrimvar</definition>
        <argsstring>(const UsdGeomPrimvar &amp;other)</argsstring>
        <name>UsdGeomPrimvar</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy construct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a403ea5e3c5c182524e8f96de40dadccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
        <definition>USDGEOM_API UsdGeomPrimvar&amp; operator=</definition>
        <argsstring>(const UsdGeomPrimvar &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assign. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a086836872837e4939914496b3e0922de" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>USDGEOM_API</type>
        <definition>USDGEOM_API UsdGeomPrimvar</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>UsdGeomPrimvar</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Speculative constructor that will produce a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> when <computeroutput>attr</computeroutput> already represents an attribute that is Primvar, and produces an <emphasis>invalid</emphasis> Primvar otherwise (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_bool" kindref="member">operator bool()</ref> will return false).</para>
<para>Calling <computeroutput>UsdGeomPrimvar::IsPrimvar(attr)</computeroutput> will return the same truth value as this constructor, but if you plan to subsequently use the Primvar anyways, just use this constructor, as demonstrated in the <ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_Using_Primvar" kindref="member">class documentation</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ac162e5f39dca188e6d7f5244ccb1e39b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDGEOM_API TfToken GetInterpolation</definition>
        <argsstring>() const</argsstring>
        <name>GetInterpolation</name>
        <briefdescription>
<para>Return the Primvar&apos;s interpolation, which is <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">UsdGeomTokens-&gt;constant</ref> if unauthored. </para>
        </briefdescription>
        <detaileddescription>
<para>Interpolation determines how the Primvar interpolates over a geometric primitive. See <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">Interpolation of Geometric Primitive Variables</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a6ba136d4b6688c648bdbbd2927e37827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetInterpolation</definition>
        <argsstring>(const TfToken &amp;interpolation)</argsstring>
        <name>SetInterpolation</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>interpolation</declname>
        </param>
        <briefdescription>
<para>Set the Primvar&apos;s interpolation. </para>
        </briefdescription>
        <detaileddescription>
<para>Errors and returns false if <computeroutput>interpolation</computeroutput> is out of range as defined by <ref refid="class_usd_geom_primvar_1a1ae3fbc88f1a7f9719682da74494d22a" kindref="member">IsValidInterpolation()</ref>. No attempt is made to validate that the Primvar&apos;s value contains the right number of elements to match its interpolation to its topology.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1ac162e5f39dca188e6d7f5244ccb1e39b" kindref="member">GetInterpolation()</ref>, <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">Interpolation of Geometric Primitive Variables</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1aeadcc1cf3eacff1b4e55eafcc4314d0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool HasAuthoredInterpolation</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredInterpolation</name>
        <briefdescription>
<para>Has interpolation been explicitly authored on this Primvar? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>GetInterpolationSize() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API int</type>
        <definition>USDGEOM_API int GetElementSize</definition>
        <argsstring>() const</argsstring>
        <name>GetElementSize</name>
        <briefdescription>
<para>Return the &quot;element size&quot; for this Primvar, which is 1 if unauthored. </para>
        </briefdescription>
        <detaileddescription>
<para>If this Primvar&apos;s type is <emphasis>not</emphasis> an array type, (e.g. &quot;Vec3f[]&quot;), then elementSize is irrelevant.</para>
<para>ElementSize does <emphasis>not</emphasis> generally encode the length of an array-type primvar, and rarely needs to be authored. ElementSize can be thought of as a way to create an &quot;aggregate interpolatable type&quot;, by dictating how many consecutive elements in the value array should be taken as an atomic element to be interpolated over a gprim.</para>
<para>For example, spherical harmonics are often represented as a collection of nine floating-point coefficients, and the coefficients need to be sampled across a gprim&apos;s surface: a perfect case for primvars. However, USD has no <computeroutput>float9</computeroutput> datatype. But we can communicate the aggregation of nine floats successfully to renderers by declaring a simple float-array valued primvar, and setting its <emphasis>elementSize</emphasis> to 9. To author a <emphasis>uniform</emphasis> spherical harmonic primvar on a Mesh of 42 faces, the primvar&apos;s array value would contain 9*42 = 378 float elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a69304057fea770dd0d8539e8560defad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetElementSize</definition>
        <argsstring>(int eltSize)</argsstring>
        <name>SetElementSize</name>
        <param>
          <type>int</type>
          <declname>eltSize</declname>
        </param>
        <briefdescription>
<para>Set the elementSize for this Primvar. </para>
        </briefdescription>
        <detaileddescription>
<para>Errors and returns false if <computeroutput>eltSize</computeroutput> less than 1.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" kindref="member">GetElementSize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a000129833c30aa855a4c30bb34e89067" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool HasAuthoredElementSize</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredElementSize</name>
        <briefdescription>
<para>Has elementSize been explicitly authored on this Primvar? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" kindref="member">GetElementSize()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a7aeac1c9d963c500cd59506cf3cf3a58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void GetDeclarationInfo</definition>
        <argsstring>(TfToken *name, SdfValueTypeName *typeName, TfToken *interpolation, int *elementSize) const</argsstring>
        <name>GetDeclarationInfo</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> *</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>interpolation</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementSize</declname>
        </param>
        <briefdescription>
<para>Convenience function for fetching all information required to properly declare this Primvar. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>name</computeroutput> returned is the &quot;client name&quot;, stripped of the &quot;primvars&quot; namespace, i.e. equivalent to <ref refid="class_usd_geom_primvar_1a74937608623e5746fcee1a6d08959a7f" kindref="member">GetPrimvarName()</ref></para>
<para>May also be more efficient than querying key individually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a838946d26bd1f47716f7495c618091ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool Get</definition>
        <argsstring>(std::string *value, UsdTimeCode time) const</argsstring>
        <name>Get</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a298cadb22073d96c61d53a25e335916f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool Get</definition>
        <argsstring>(VtStringArray *value, UsdTimeCode time) const</argsstring>
        <name>Get</name>
        <param>
          <type>VtStringArray *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1acba219a8bc36786210f0bd3a4f3c0a16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool Get</definition>
        <argsstring>(VtValue *value, UsdTimeCode time) const</argsstring>
        <name>Get</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="819" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_primvar_1a42d797fc438a7fa52875d2c7db006cd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsPrimvar</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>IsPrimvar</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Test whether a given <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> represents valid Primvar, which implies that creating a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> from the attribute will succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>Success implies that <computeroutput>attr.IsDefined()</computeroutput> is true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a9e9aa5203934807c404b7af614ade18d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsValidPrimvarName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>IsValidPrimvarName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Test whether a given <computeroutput>name</computeroutput> represents a valid name of a primvar, which implies that creating a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> with the given name will succeed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a657439a0bca230d608522b786da8bcf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static USDGEOM_API TfToken StripPrimvarsName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>StripPrimvarsName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>name</computeroutput>, devoid of the &quot;primvars:&quot; token if present, otherwise returns the <computeroutput>name</computeroutput> unchanged. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a1ae3fbc88f1a7f9719682da74494d22a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsValidInterpolation</definition>
        <argsstring>(const TfToken &amp;interpolation)</argsstring>
        <name>IsValidInterpolation</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>interpolation</declname>
        </param>
        <briefdescription>
<para>Validate that the provided <computeroutput>interpolation</computeroutput> is a valid setting for interpolation as defined by <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">Interpolation of Geometric Primitive Variables</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="377" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_primvar_1a73a0a13bcf8259a8226abcef5a65300d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsNamespaced</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>_IsNamespaced</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Validate that the given <computeroutput>name</computeroutput> contains the primvars namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not validate name as a legal property identifier </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="733" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a224ed1e54875e4366010b843042b2f73" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static TfToken _MakeNamespaced</definition>
        <argsstring>(const TfToken &amp;name, bool quiet=false)</argsstring>
        <name>_MakeNamespaced</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return <computeroutput>name</computeroutput> prepended with the proper primvars namespace, if it is not already prefixed. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not validate name as a legal property identifier, but will verify that <computeroutput>name</computeroutput> contains no reserved keywords, and will return an empty <ref refid="class_tf_token" kindref="compound">TfToken</ref> if it does. If <computeroutput>quiet</computeroutput> is true, the verification will be silent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a1064507566db85c10e53a1697343c807" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const  &amp;</type>
        <definition>static TfToken const&amp; _GetNamespacePrefix</definition>
        <argsstring>()</argsstring>
        <name>_GetNamespacePrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a7472745f0025e5810238ae793b1e153f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _ComputeFlattenedHelper</definition>
        <argsstring>(const VtArray&lt; ScalarType &gt; &amp;authored, const VtIntArray &amp;indices, int elementSize, VtArray&lt; ScalarType &gt; *value, std::string *errString)</argsstring>
        <name>_ComputeFlattenedHelper</name>
        <param>
          <type>const <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; ScalarType &gt; &amp;</type>
          <declname>authored</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; ScalarType &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="775" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="856" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1ac8e822afd86925aeb8e1bc570b23d285" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ArrayType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _ComputeFlattenedArray</definition>
        <argsstring>(const VtValue &amp;attrVal, const VtIntArray &amp;indices, int elementSize, VtValue *value, std::string *errString)</argsstring>
        <name>_ComputeFlattenedArray</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>attrVal</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="784" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_primvar_1ae3254bbda1e70754d3641b292d24ee7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UsdGeomPrimvar</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;attrName, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>UsdGeomPrimvar</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Factory for <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref>&apos;s use, so that we can encapsulate the logic of what discriminates Primvar in this class, while preserving the pattern that attributes can only be created via their container objects. </para>
        </briefdescription>
        <detaileddescription>
<para>The name of the created attribute may or may not be the specified <computeroutput>attrName</computeroutput>, due to the possible need to apply property namespacing for Primvar.</para>
<para>The behavior with respect to the provided <computeroutput>typeName</computeroutput> is the same as for UsdAttributes::Create().</para>
<para><simplesect kind="return"><para>an invalid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> if we failed to create a valid attribute, a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> otherwise. It is not an error to create over an existing, compatible attribute.</para>
</simplesect>
It is a failed verification for <computeroutput>prim</computeroutput> to be invalid/expired</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">UsdPrim::CreateAttribute()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a4925305d9f6a21dad2ed84e88fae5a18" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>UsdAttribute _GetIndicesAttr</definition>
        <argsstring>(bool create) const</argsstring>
        <name>_GetIndicesAttr</name>
        <param>
          <type>bool</type>
          <declname>create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="771" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a681e56c158bbce00ccf151b83b285a28" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>UsdRelationship _GetIdTargetRel</definition>
        <argsstring>(bool create) const</argsstring>
        <name>_GetIdTargetRel</name>
        <param>
          <type>bool</type>
          <declname>create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="791" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvar_1a824784d0edfbefaa7a3081f816c07309" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComputeIdTargetPossibility</definition>
        <argsstring>() const</argsstring>
        <name>_ComputeIdTargetPossibility</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvar.h" line="798" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Schema wrapper for <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> for authoring and introspecting attributes that are primvars. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> provides API for authoring and retrieving the additional data required to encode an attribute as a &quot;Primvar&quot;, which is a convenient contraction of RenderMan&apos;s &quot;Primitive Variable&quot; concept, which is represented in Alembic as &quot;arbitrary geometry parameters&quot; (arbGeomParams).</para>
<para>This includes the attribute&apos;s <ref refid="class_usd_geom_primvar_1ac162e5f39dca188e6d7f5244ccb1e39b" kindref="member">interpolation</ref> across the primitive (which RenderMan refers to as its <ref refid="class_usd_geom_primvar_1Usd_InterpolationVals" kindref="member">class specifier</ref> and Alembic as its <ulink url="https://github.com/alembic/alembic/blob/master/lib/Alembic/AbcGeom/GeometryScope.h#L47">&quot;geometry scope&quot;</ulink>); it also includes the attribute&apos;s <ref refid="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" kindref="member">elementSize</ref>, which states how many values in the value array must be aggregated for each element on the primitive. An attribute&apos;s <ref refid="class_usd_attribute_1a81ff07cc76cab8a0efd51b8938b9a124" kindref="member">TypeName</ref> also factors into the encoding of Primvar.</para>
<sect1 id="class_usd_geom_primvar_1Usd_What_Is_Primvar">
<title>What is the Purpose of a Primvar?</title>
<para>There are three key aspects of Primvar identity: <itemizedlist>
<listitem><para>Primvars define a value that can vary across the primitive on which they are defined, via prescribed interpolation rules </para>
</listitem>
<listitem><para>Taken collectively on a prim, its Primvars describe the &quot;per-primitive
    overrides&quot; to the material to which the prim is bound. Different renderers may communicate the variables to the shaders using different mechanisms over which Usd has no control; Primvars simply provide the classification that any renderer should use to locate potential overrides. Do please note that primvars override parameters on <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref> objects, <emphasis>not</emphasis> <ref refid="class_usd_shade_node_graph_1UsdShadeNodeGraph_Interfaces" kindref="member">Interface Attributes</ref> on <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> prims. </para>
</listitem>
<listitem><para><emphasis>Primvars inherit down scene namespace.</emphasis> Regular USD attributes only apply to the prim on which they are specified, but primvars implicitly also apply to any child prims, unless those child prims have their own opinions about those primvars. This capability necessarily entails added cost to check for inherited values, but the benefit is that it allows concise encoding of certain opinions that broadly affect large amounts of geometry. See UsdGeomImageable::FindInheritedPrimvars().</para>
</listitem>
</itemizedlist>
</para>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_Creating_and_Accessing_Primvars">
<title>Creating and Accessing Primvars</title>
<para>The <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref> schema provides a complete interface for creating and querying prims for primvars.</para>
<para>The <bold>only</bold> way to create a new Primvar in scene description is by calling <ref refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" kindref="member">UsdGeomPrimvarsAPI::CreatePrimvar()</ref>. One cannot &quot;enhance&quot; or &quot;promote&quot; an already existing attribute into a Primvar, because doing so may require a namespace edit to rename the attribute, which cannot, in general, be done within a single <ref refid="class_usd_edit_context" kindref="compound">UsdEditContext</ref>. Instead, create a new <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> of the desired name using <ref refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" kindref="member">UsdGeomPrimvarsAPI::CreatePrimvar()</ref>, and then copy the existing attribute onto the new <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>.</para>
<para>Primvar names can contain arbitrary sub-namespaces. The behavior of UsdGeomImageable::GetPrimvar(TfToken const &amp;name) is to prepend &quot;primvars:&quot; onto &apos;name&apos; if it is not already a prefix, and return the result, which means we do not have any ambiguity between the primvars &quot;primvars:nsA:foo&quot; and &quot;primvars:nsB:foo&quot;. <bold>There are reserved keywords that may not be used as the base names of primvars,</bold> and attempting to create Primvars of these names will result in a coding error. The reserved keywords are tokens the Primvar uses internally to encode various features, such as the &quot;indices&quot; keyword used by <ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_Indexed_primvars" kindref="member">Indexed Primvars</ref>.</para>
<para><anchor id="class_usd_geom_primvar_1UsdGeomPrimvar_Using_Primvar"/>If a client wishes to access an already-extant attribute as a Primvar, (which may or may not actually be valid Primvar), they can use the speculative constructor; typically, a primvar is only &quot;interesting&quot; if it additionally provides a value. This might look like: <programlisting><codeline><highlight class="normal">UsdGeomPrimvar<sp/>primvar<sp/>=<sp/>UsdGeomPrimvar(usdAttr);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(primvar.HasValue())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>VtValue<sp/>values;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>primvar.Get(&amp;values,<sp/>timeCode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TfToken<sp/>interpolation<sp/>=<sp/>primvar.GetInterpolation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/>elementSize<sp/>=<sp/>primvar.GetElementSize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>or, because <ref refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">Get()</ref> returns <computeroutput>true</computeroutput> if and only if it found a value: <programlisting><codeline><highlight class="normal">UsdGeomPrimvar<sp/>primvar<sp/>=<sp/>UsdGeomPrimvar(usdAttr);</highlight></codeline>
<codeline><highlight class="normal">VtValue<sp/>values;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(primvar.Get(&amp;values,<sp/>timeCode))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TfToken<sp/>interpolation<sp/>=<sp/>primvar.GetInterpolation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/>elementSize<sp/>=<sp/>primvar.GetElementSize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<sect2 id="class_usd_geom_primvar_1Usd_Handling_Indexed_Primvars">
<title>Proper Client Handling of &quot;Indexed&quot; Primvars</title>
<para>As discussed in greater detail in <ref refid="class_usd_geom_primvar_1UsdGeomPrimvar_Indexed_primvars" kindref="member">Indexed Primvars</ref>, primvars can optionally contain a (possibly time-varying) indexing attribute that establishes a sharing topology for elements of the primvar. Consumers can always chose to ignore the possibility of indexed data by exclusively using the <ref refid="class_usd_geom_primvar_1a3ff95fac2aa8a267d96fa17a2453ba31" kindref="member">ComputeFlattened()</ref> API. If a client wishes to preserve indexing in their processing of a primvar, we suggest a pattern like the following, which accounts for the fact that a stronger layer can <ref refid="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" kindref="member">block</ref> a primvar&apos;s indexing from a weaker layer, via <ref refid="class_usd_geom_primvar_1aec7f855676def21ea29008f7131aeba3" kindref="member">UsdGeomPrimvar::BlockIndices()</ref>: <programlisting><codeline><highlight class="normal">VtValue<sp/>values;</highlight></codeline>
<codeline><highlight class="normal">VtIntArray<sp/>indices;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(primvar.Get(&amp;values,<sp/>timeCode)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(primvar.GetIndices(&amp;indices,<sp/>timeCode)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>primvar<sp/>is<sp/>indexed:<sp/>validate/process<sp/>values<sp/>and<sp/>indices<sp/>together</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>primvar<sp/>is<sp/>not<sp/>indexed:<sp/>validate/process<sp/>values<sp/>as<sp/>flat<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="class_usd_geom_primvar_1Usd_Primvar_As_Attribute">
<title>UsdGeomPrimvar and UsdAttribute API</title>
<para><ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> presents a small slice of the <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> API - enough to extract the data that comprises the &quot;Declaration info&quot;, and get/set of the attribute value. A <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> also auto-converts to <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>, so you can pass a <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> to any function that accepts a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> or const-ref thereto.</para>
</sect2>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_Primvar_Types">
<title>Primvar Allowed Scene Description Types and Plurality</title>
<para>There are no limitations imposed on the allowable scene description types for Primvars; it is the responsibility of each consuming client to perform renderer-specific conversions, if need be (the USD distribution will include reference RenderMan conversion utilities).</para>
<para>A note about type plurality of Primvars: It is legitimate for a Primvar to be of scalar or array type, and again, consuming clients must be prepared to accommodate both. However, while it is not possible, in all cases, for USD to <emphasis>prevent</emphasis> one from <emphasis>changing</emphasis> the type of an attribute in different layers or variants of an asset, it is never a good idea to do so. This is relevant because, except in a few special cases, it is not possible to encode an <emphasis>interpolation</emphasis> of any value greater than <emphasis>constant</emphasis> without providing multiple (i.e. array) data values. Therefore, if there is any possibility that downstream clients might need to change a Primvar&apos;s interpolation, the Primvar-creator should encode it as an array rather than a scalar.</para>
<para>Why allow scalar values at all, then? First, sometimes it brings clarity to (use of) a shader&apos;s API to acknowledge that some parameters are meant to be single-valued over a shaded primitive. Second, many DCC&apos;s provide far richer affordances for editing scalars than they do array values, and we feel it is safer to let the content creator make the decision/tradeoff of which kind of flexibility is more relevant, rather than leaving it to an importer/exporter pair to interpret.</para>
<para>Also, like all attributes, Primvars can be time-sampled, and values can be authored and consumed just as any other attribute. There is currently no validation that the length of value arrays matches to the size required by a gprim&apos;s topology, interpolation, and elementSize.</para>
<para>For consumer convenience, we provide <ref refid="class_usd_geom_primvar_1a7aeac1c9d963c500cd59506cf3cf3a58" kindref="member">GetDeclarationInfo()</ref>, which returns all the type information (other than topology) needed to compute the required array size, which is also all the information required to prepare the Primvar&apos;s value for consumption by a renderer.</para>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_UsdGeomPrimvar_Lifetime">
<title>Lifetime Management and Primvar Validity</title>
<para><ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> has an explicit bool operator that validates that the attribute <ref refid="class_usd_geom_primvar_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">IsDefined()</ref> and thus valid for querying and authoring values and metadata. This is a fairly expensive query that we do <bold>not</bold> cache, so if client code retains <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> objects, it should manage its object validity closely, for performance. An ideal pattern is to listen for <ref refid="class_usd_notice_1_1_stage_contents_changed" kindref="compound">UsdNotice::StageContentsChanged</ref> notifications, and revalidate/refetch its retained <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> s only then, and otherwise use them without validity checking.</para>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_InterpolationVals">
<title>Interpolation of Geometric Primitive Variables</title>
<para>In the following explanation of the meaning of the various kinds/levels of Primvar interpolation, each bolded bullet gives the name of the token in <ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">UsdGeomTokens</ref> that provides the value. So to set a Primvar&apos;s interpolation to &quot;varying&quot;, one would: <programlisting><codeline><highlight class="normal">primvar.SetInterpolation(UsdGeomTokens-&gt;varying);</highlight></codeline>
</programlisting></para>
<para>Reprinted and adapted from <ulink url="http://renderman.pixar.com/resources/current/rps/appnote.22.html#classSpecifiers">the RPS documentation</ulink>, which contains further details, <emphasis>interpolation</emphasis> describes how the Primvar will be interpolated over the uv parameter space of a surface primitive (or curve or pointcloud). The possible values are: <itemizedlist>
<listitem><para><bold>constant</bold> One value remains constant over the entire surface primitive. </para>
</listitem>
<listitem><para><bold>uniform</bold> One value remains constant for each uv patch segment of the surface primitive (which is a <emphasis>face</emphasis> for meshes). </para>
</listitem>
<listitem><para><bold>varying</bold> Four values are interpolated over each uv patch segment of the surface. Bilinear interpolation is used for interpolation between the four values. </para>
</listitem>
<listitem><para><bold>vertex</bold> Values are interpolated between each vertex in the surface primitive. The basis function of the surface is used for interpolation between vertices. </para>
</listitem>
<listitem><para><bold>faceVarying</bold> For polygons and subdivision surfaces, four values are interpolated over each face of the mesh. Bilinear interpolation is used for interpolation between the four values.</para>
</listitem>
</itemizedlist>
</para>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_Extending_UsdObject_Classes">
<title>UsdGeomPrimvar As Example of Attribute Schema</title>
<para>Just as <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> and its subclasses provide the pattern for how to layer schema onto the generic <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> object, <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> provides an example of how to layer schema onto a generic <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> object. In both cases, the schema object wraps and contains the <ref refid="class_usd_object" kindref="compound">UsdObject</ref>.</para>
</sect1>
<sect1 id="class_usd_geom_primvar_1Usd_UsdGeomPrimvar_Inheritance">
<title>Primvar Namespace Inheritance</title>
<para>Constant interpolation primvar values can be inherited down namespace. That is, a primvar value set on a prim will also apply to any child prims, unless those children have their own opinions about those named primvars. For complete details on how primvars inherit, see usdGeom_PrimvarInheritance .</para>
<para><simplesect kind="see"><para>UsdGeomImageable::FindInheritablePrimvars(). </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <location file="pxr/usd/usdGeom/primvar.h" line="262" column="1" bodyfile="pxr/usd/usdGeom/primvar.h" bodystart="261" bodyend="808"/>
    <listofallmembers>
      <member refid="class_usd_geom_primvar_1a5264980b5cd3db34a397bfda54c1b566" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_attr</name></member>
      <member refid="class_usd_geom_primvar_1ac8e822afd86925aeb8e1bc570b23d285" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_ComputeFlattenedArray</name></member>
      <member refid="class_usd_geom_primvar_1a7472745f0025e5810238ae793b1e153f" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_ComputeFlattenedHelper</name></member>
      <member refid="class_usd_geom_primvar_1a824784d0edfbefaa7a3081f816c07309" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_ComputeIdTargetPossibility</name></member>
      <member refid="class_usd_geom_primvar_1a681e56c158bbce00ccf151b83b285a28" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_GetIdTargetRel</name></member>
      <member refid="class_usd_geom_primvar_1a4925305d9f6a21dad2ed84e88fae5a18" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_GetIndicesAttr</name></member>
      <member refid="class_usd_geom_primvar_1a1064507566db85c10e53a1697343c807" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_GetNamespacePrefix</name></member>
      <member refid="class_usd_geom_primvar_1a08fd547ec4ca45efaf2274801101030b" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_idTargetRelName</name></member>
      <member refid="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_IdTargetStatus</name></member>
      <member refid="class_usd_geom_primvar_1ac423adeafcbb31fa57eb3ded19300324" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_idTargetStatus</name></member>
      <member refid="class_usd_geom_primvar_1a73a0a13bcf8259a8226abcef5a65300d" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_IsNamespaced</name></member>
      <member refid="class_usd_geom_primvar_1a224ed1e54875e4366010b843042b2f73" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>_MakeNamespaced</name></member>
      <member refid="class_usd_geom_primvar_1aec7f855676def21ea29008f7131aeba3" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>BlockIndices</name></member>
      <member refid="class_usd_geom_primvar_1a3ff95fac2aa8a267d96fa17a2453ba31" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>ComputeFlattened</name></member>
      <member refid="class_usd_geom_primvar_1a3163a48cab6f324c8872f4612818d533" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>ComputeFlattened</name></member>
      <member refid="class_usd_geom_primvar_1a6871038b2d5413a95b9a5f3b02c17a51" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>ComputeFlattened</name></member>
      <member refid="class_usd_geom_primvar_1a5042653708628ea116b027f07d2ec23f" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>ComputeFlattened</name></member>
      <member refid="class_usd_geom_primvar_1a853cfdc7140662ad33c66eede0c5cc76" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>CreateIndicesAttr</name></member>
      <member refid="class_usd_geom_primvar_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>Get</name></member>
      <member refid="class_usd_geom_primvar_1a838946d26bd1f47716f7495c618091ab" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>Get</name></member>
      <member refid="class_usd_geom_primvar_1a298cadb22073d96c61d53a25e335916f" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>Get</name></member>
      <member refid="class_usd_geom_primvar_1acba219a8bc36786210f0bd3a4f3c0a16" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>Get</name></member>
      <member refid="class_usd_geom_primvar_1a1d68bd302d71917d30a1ff9e4e30d220" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetAttr</name></member>
      <member refid="class_usd_geom_primvar_1a06dcc2a106605fc3fcd2127a0a4f01c8" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetBaseName</name></member>
      <member refid="class_usd_geom_primvar_1a7aeac1c9d963c500cd59506cf3cf3a58" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetDeclarationInfo</name></member>
      <member refid="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetElementSize</name></member>
      <member refid="class_usd_geom_primvar_1afc956605fa86dd0ecc18924aae57a0a9" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetIndices</name></member>
      <member refid="class_usd_geom_primvar_1adc3cf34c4a7aa5689619d84474b55cfa" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetIndicesAttr</name></member>
      <member refid="class_usd_geom_primvar_1ac162e5f39dca188e6d7f5244ccb1e39b" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetInterpolation</name></member>
      <member refid="class_usd_geom_primvar_1a7e0e19c72edf9def26749f35edf63ba2" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetName</name></member>
      <member refid="class_usd_geom_primvar_1a676767b8647a9c3ab90e86c1f11836c5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetNamespace</name></member>
      <member refid="class_usd_geom_primvar_1a74937608623e5746fcee1a6d08959a7f" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetPrimvarName</name></member>
      <member refid="class_usd_geom_primvar_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_primvar_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_primvar_1ab7b5443a6619155d73db00d22419d361" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetTypeName</name></member>
      <member refid="class_usd_geom_primvar_1a5b283c231bdee5c04f956cfd0f901ee5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>GetUnauthoredValuesIndex</name></member>
      <member refid="class_usd_geom_primvar_1a000129833c30aa855a4c30bb34e89067" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>HasAuthoredElementSize</name></member>
      <member refid="class_usd_geom_primvar_1aeadcc1cf3eacff1b4e55eafcc4314d0d" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>HasAuthoredInterpolation</name></member>
      <member refid="class_usd_geom_primvar_1a8a41a61d2763aeeab90f688c239a509c" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>HasAuthoredValue</name></member>
      <member refid="class_usd_geom_primvar_1a7f5fc84be1e635230694a4ffbf57dfcd" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>hash_value</name></member>
      <member refid="class_usd_geom_primvar_1ae26b73bbf70dc88433be39df364ca7c1" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>HasValue</name></member>
      <member refid="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a32da1b3197c08d5bc02c796c2a1b8634" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IdTargetImpossible</name></member>
      <member refid="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3aa68e1489db953bf7285d59b272b60376" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IdTargetInitializing</name></member>
      <member refid="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a571e7ff31cc42c4c2bde0374fc77937e" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IdTargetPossible</name></member>
      <member refid="class_usd_geom_primvar_1a997eaa90c94fda75104656b42b4076e3a4ee4297e641584336eb8b00dc3f599d0" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IdTargetUninitialized</name></member>
      <member refid="class_usd_geom_primvar_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsDefined</name></member>
      <member refid="class_usd_geom_primvar_1a5cfc59da483718853d76f913d489907b" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsIdTarget</name></member>
      <member refid="class_usd_geom_primvar_1ad3a2dc86a80af7c071ddb9c418f42b9a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsIndexed</name></member>
      <member refid="class_usd_geom_primvar_1a42d797fc438a7fa52875d2c7db006cd4" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsPrimvar</name></member>
      <member refid="class_usd_geom_primvar_1a1ae3fbc88f1a7f9719682da74494d22a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsValidInterpolation</name></member>
      <member refid="class_usd_geom_primvar_1a9e9aa5203934807c404b7af614ade18d" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>IsValidPrimvarName</name></member>
      <member refid="class_usd_geom_primvar_1a4f6bd363f8325aeb8d55c8ab7c41603b" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>NameContainsNamespaces</name></member>
      <member refid="class_usd_geom_primvar_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_primvar_1aa7de176ee0f6bf8890f1812e93e43ce7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator UsdAttribute const &amp;</name></member>
      <member refid="class_usd_geom_primvar_1a525134c48c9f078bcf28e2d2ffb40bd5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator!=</name></member>
      <member refid="class_usd_geom_primvar_1af4e44be670450ff8c70d3bc827cff9e5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator&lt;</name></member>
      <member refid="class_usd_geom_primvar_1a403ea5e3c5c182524e8f96de40dadccc" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator=</name></member>
      <member refid="class_usd_geom_primvar_1a6915fca52483ce6cbc5114db9dd2b591" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>operator==</name></member>
      <member refid="class_usd_geom_primvar_1a7fd0957eecddb7cfcd222cccd51e23e6" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>Set</name></member>
      <member refid="class_usd_geom_primvar_1a69304057fea770dd0d8539e8560defad" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SetElementSize</name></member>
      <member refid="class_usd_geom_primvar_1ac7e1a8e33e65f71ec890c8016fa24baf" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SetIdTarget</name></member>
      <member refid="class_usd_geom_primvar_1a4d8cc49a0344ff0a5dbad1618fb4b1b7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SetIndices</name></member>
      <member refid="class_usd_geom_primvar_1a6ba136d4b6688c648bdbbd2927e37827" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SetInterpolation</name></member>
      <member refid="class_usd_geom_primvar_1a6ddedae6939f8e0907961772d0423638" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SetUnauthoredValuesIndex</name></member>
      <member refid="class_usd_geom_primvar_1af9a0f70764746e029bfb439129de47dd" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>SplitName</name></member>
      <member refid="class_usd_geom_primvar_1a657439a0bca230d608522b786da8bcf3" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>StripPrimvarsName</name></member>
      <member refid="class_usd_geom_primvar_1a57dcc9f15fc5c19e7562053185627da5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>TfHashAppend</name></member>
      <member refid="class_usd_geom_primvar_1a80dcf6da53e1f6300736285ea4015ae9" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_primvar_1adaab5fdc84be7605f646d1d4eb6ce8fd" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomPrimvar</name></member>
      <member refid="class_usd_geom_primvar_1a8666b2b5076603ab040b551b5d09e800" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomPrimvar</name></member>
      <member refid="class_usd_geom_primvar_1a086836872837e4939914496b3e0922de" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomPrimvar</name></member>
      <member refid="class_usd_geom_primvar_1ae3254bbda1e70754d3641b292d24ee7f" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomPrimvar</name></member>
      <member refid="class_usd_geom_primvar_1ae6740917e333f813c09ef7baa421cf16" prot="private" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>UsdGeomPrimvarsAPI</name></member>
      <member refid="class_usd_geom_primvar_1afd49c6ff61ad34f9bfaa9f0eb2495207" prot="public" virt="non-virtual"><scope>UsdGeomPrimvar</scope><name>ValueMightBeTimeVarying</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
