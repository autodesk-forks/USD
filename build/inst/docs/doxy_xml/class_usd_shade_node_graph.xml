<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_shade_node_graph" kind="class" language="C++" prot="public">
    <compoundname>UsdShadeNodeGraph</compoundname>
    <basecompoundref refid="class_usd_typed" prot="public" virt="non-virtual">UsdTyped</basecompoundref>
    <derivedcompoundref refid="class_usd_shade_material" prot="public" virt="non-virtual">UsdShadeMaterial</derivedcompoundref>
    <includes refid="node_graph_8h" local="no">nodeGraph.h</includes>
    <innerclass refid="struct_usd_shade_node_graph_1_1_node_graph_equal_fn" prot="public">UsdShadeNodeGraph::NodeGraphEqualFn</innerclass>
    <innerclass refid="struct_usd_shade_node_graph_1_1_node_graph_hasher" prot="public">UsdShadeNodeGraph::NodeGraphHasher</innerclass>
      <sectiondef kind="user-defined">
      <header>Outputs of a node-graph. These typically connect to outputs of</header>
      <description><para><anchor id="class_usd_shade_node_graph_1UsdShadeNodeGraph_Output"/> shaders or nested node-graphs within the node-graph. </para>
</description>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a3ee6f709731f13f92a807e8ab3a1c7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDSHADE_API UsdShadeOutput CreateOutput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName) const</argsstring>
        <name>CreateOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an output which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the output is created in the &quot;outputs:&quot; namespace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1acc6d5f29062faa83e9a7e61be6f97618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDSHADE_API UsdShadeOutput GetOutput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested output if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1ac9882b5f0511e292428b35514b943240" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdShadeOutput&gt; GetOutputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetOutputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Outputs are represented by attributes in the &quot;outputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a76a3c863585af75adece34394f7ae79b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref></type>
        <definition>USDSHADE_API UsdShadeShader ComputeOutputSource</definition>
        <argsstring>(const TfToken &amp;outputName, TfToken *sourceName, UsdShadeAttributeType *sourceType) const</argsstring>
        <name>ComputeOutputSource</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>outputName</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>sourceName</declname>
        </param>
        <param>
          <type>UsdShadeAttributeType *</type>
          <declname>sourceType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000115"><xreftitle>Deprecated</xreftitle><xrefdescription><para>in favor of GetValueProducingAttributes on <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> Resolves the connection source of the requested output, identified by <computeroutput>outputName</computeroutput> to a shader output.</para>
</xrefdescription></xrefsect></para>
<para><computeroutput>sourceName</computeroutput> is an output parameter that is set to the name of the resolved output, if the node-graph output is connected to a valid shader source.</para>
<para><computeroutput>sourceType</computeroutput> is an output parameter that is set to the type of the resolved output, if the node-graph output is connected to a valid shader source.</para>
<para><simplesect kind="return"><para>Returns a valid shader object if the specified output exists and is connected to one. Return an empty shader object otherwise. The python version of this method returns a tuple containing three elements (the source shader, sourceName, sourceType). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="251" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Interface inputs of a node-graph.</header>
      <description><para><anchor id="class_usd_shade_node_graph_1UsdShadeNodeGraph_Interfaces"/></para>
<para>In addition to serving as the &quot;head&quot; for all of the shading networks that describe each render target&apos;s particular node-graph, the node-graph prim provides a unified &quot;interface&quot; that allows node-graphs to share shading networks while retaining the ability for each to specify its own set of unique values for the interface inputs that users may need to modify.</para>
<para>A &quot;Node-graph Interface&quot; is a combination of: <itemizedlist>
<listitem><para>a flat collection of attributes, of arbitrary names </para>
</listitem>
<listitem><para>for each such attribute, a list of UsdShaderInput targets whose attributes on Shader prims should be driven by the interface input.</para>
</listitem>
</itemizedlist>
A single interface input can drive multiple shader inputs and be consumed by multiple render targets. The set of interface inputs itself is intentionally flat, to encourage sharing of the interface between render targets. Clients are always free to create interface inputs with namespacing to segregate &quot;private&quot; attributes exclusive to the render target, but we hope this will be an exception.</para>
<para>To facilitate connecting, qualifying, and interrogating interface attributes, we use the attribute schema <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref>, which also serves as an abstraction for shader inputs.</para>
<para><bold>Scoped Interfaces</bold></para>
</description>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a8a03fdcc294aa2fae8a42e8e1cde57a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDSHADE_API UsdShadeInput CreateInput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName) const</argsstring>
        <name>CreateInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an Input which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the input is created in the &quot;inputs:&quot; namespace.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a6424c331cdf1248389dcafc2c651cf72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDSHADE_API UsdShadeInput GetInput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested input if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1acd083a8223f0a5cb1402c38bad9dccb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdShadeInput&gt; GetInputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetInputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns all inputs present on the node-graph. </para>
        </briefdescription>
        <detaileddescription>
<para>These are represented by attributes in the &quot;inputs:&quot; namespace. If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="313" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Interface Inputs</header>
      <description><para><anchor id="class_usd_shade_node_graph_1UsdShadeNodeGraph_InterfaceInputs"/></para>
<para>API to query the inputs that form the interface of the node-graph and their connections. </para>
</description>
      <memberdef kind="typedef" id="class_usd_shade_node_graph_1a237557b6ace8a23f99df0dc159a4395c" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref>, std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;, <ref refid="struct_usd_shade_input_1_1_hash" kindref="compound">UsdShadeInput::Hash</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;UsdShadeInput, std::vector&lt;UsdShadeInput&gt;, UsdShadeInput::Hash&gt; InterfaceInputConsumersMap</definition>
        <argsstring></argsstring>
        <name>InterfaceInputConsumersMap</name>
        <briefdescription>
<para>Map of interface inputs to corresponding vectors of inputs that consume their values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="355" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_shade_node_graph_1ac6516b6b87ba9dcd3cef169fa2fcde83" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>, <ref refid="class_usd_shade_node_graph_1a237557b6ace8a23f99df0dc159a4395c" kindref="member">InterfaceInputConsumersMap</ref>, <ref refid="struct_usd_shade_node_graph_1_1_node_graph_hasher" kindref="compound">NodeGraphHasher</ref>, <ref refid="struct_usd_shade_node_graph_1_1_node_graph_equal_fn" kindref="compound">NodeGraphEqualFn</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;UsdShadeNodeGraph, InterfaceInputConsumersMap, NodeGraphHasher, NodeGraphEqualFn&gt; NodeGraphInputConsumersMap</definition>
        <argsstring></argsstring>
        <name>NodeGraphInputConsumersMap</name>
        <briefdescription>
<para>Map of node-graphs to their associated input-consumers map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="362" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a539edcd2a9c7f24c3151d54c633e1fcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdShadeInput&gt; GetInterfaceInputs</definition>
        <argsstring>() const</argsstring>
        <name>GetInterfaceInputs</name>
        <briefdescription>
<para>Returns all the &quot;Interface Inputs&quot; of the node-graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same as <ref refid="class_usd_shade_node_graph_1acd083a8223f0a5cb1402c38bad9dccb5" kindref="member">GetInputs()</ref>, but is provided as a convenience, to allow clients to distinguish between inputs on shaders vs. interface-inputs on node-graphs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a08aec767b99c7b3a2530f7006b6a6635" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_node_graph_1a237557b6ace8a23f99df0dc159a4395c" kindref="member">InterfaceInputConsumersMap</ref></type>
        <definition>USDSHADE_API InterfaceInputConsumersMap ComputeInterfaceInputConsumersMap</definition>
        <argsstring>(bool computeTransitiveConsumers=false) const</argsstring>
        <name>ComputeInterfaceInputConsumersMap</name>
        <param>
          <type>bool</type>
          <declname>computeTransitiveConsumers</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Walks the namespace subtree below the node-graph and computes a map containing the list of all inputs on the node-graph and the associated vector of consumers of their values. </para>
        </briefdescription>
        <detaileddescription>
<para>The consumers can be inputs on shaders within the node-graph or on nested node-graphs).</para>
<para>If <computeroutput>computeTransitiveConsumers</computeroutput> is true, then value consumers belonging to <bold>node-graphs</bold> are resolved transitively to compute the transitive mapping from inputs on the node-graph to inputs on shaders inside the material. Note that inputs on node-graphs that don&apos;t have value consumers will continue to be included in the result.</para>
<para>This API is provided for use by DCC&apos;s that want to present node-graph interface / shader connections in the opposite direction than they are encoded in USD. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="380" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_shade_node_graph_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="86" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_shade_node_graph_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="164" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_shade_node_graph_1af887742937393a1ea8e54d405fcf078c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeNodeGraph</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdShadeNodeGraph</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_shade_node_graph_1adb19a78238c28903827e870b844a5a8a" kindref="member">UsdShadeNodeGraph::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="92" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a1b1604242583150f7003f1b41056ad99" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeNodeGraph</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdShadeNodeGraph</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="100" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a76156ef256a30405ada0b004ed894503" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API</type>
        <definition>virtual USDSHADE_API ~UsdShadeNodeGraph</definition>
        <argsstring>()</argsstring>
        <name>~UsdShadeNodeGraph</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a1cb3b88cbcfc3b4181a372e012a74e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API</type>
        <definition>USDSHADE_API UsdShadeNodeGraph</definition>
        <argsstring>(const UsdShadeConnectableAPI &amp;connectable)</argsstring>
        <name>UsdShadeNodeGraph</name>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>connectable</declname>
        </param>
        <briefdescription>
<para>Constructor that takes a ConnectableAPI object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allow implicit (auto) conversion of <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> to <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>, so that a ConnectableAPI can be passed into any function that accepts a NodeGraph.</para>
<para><simplesect kind="note"><para>that the conversion may produce an invalid NodeGraph object, because not all <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref>s are <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref>s </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1a23107227401fa5432854ace9769500b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref></type>
        <definition>USDSHADE_API UsdShadeConnectableAPI ConnectableAPI</definition>
        <argsstring>() const</argsstring>
        <name>ConnectableAPI</name>
        <briefdescription>
<para>Contructs and returns a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object with this node-graph. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that most tasks can be accomplished without explicitly constructing a UsdShadeConnectable API, since connection-related API such as <ref refid="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" kindref="member">UsdShadeConnectableAPI::ConnectToSource()</ref> are static methods, and <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> will auto-convert to a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> when passed to functions that want to act generically on a connectable <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="206" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_shade_node_graph_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDSHADE_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1adb19a78238c28903827e870b844a5a8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref></type>
        <definition>static USDSHADE_API UsdShadeNodeGraph Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdShadeNodeGraph(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1ae8fec8af0c7558cfd344941f6f1659ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_node_graph" kindref="compound">UsdShadeNodeGraph</ref></type>
        <definition>static USDSHADE_API UsdShadeNodeGraph Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="153" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_shade_node_graph_1a9b47498492265f1a224b6ec58b109a88" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDSHADE_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_typed_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="160" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_shade_node_graph_1aa9360fb676c331455b1c118acc45d8e9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDSHADE_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_node_graph_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="168" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_shade_node_graph_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDSHADE_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_typed_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/nodeGraph.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A node-graph is a container for shading nodes, as well as other node-graphs. </para>
    </briefdescription>
    <detaileddescription>
<para>It has a public input interface and provides a list of public outputs.</para>
<para><bold>Node Graph Interfaces</bold></para>
<para>One of the most important functions of a node-graph is to host the &quot;interface&quot; with which clients of already-built shading networks will interact. Please see <ref refid="class_usd_shade_node_graph_1UsdShadeNodeGraph_Interfaces" kindref="member">Interface Inputs</ref> for a detailed explanation of what the interface provides, and how to construct and use it, to effectively share/instance shader networks.</para>
<para><bold>Node Graph Outputs</bold></para>
<para>These behave like outputs on a shader and are typically connected to an output on a shader inside the node-graph. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8185">
        <label>UsdShadeMaterial</label>
        <link refid="class_usd_shade_material"/>
        <childnode refid="8182" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8183">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="8184" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8184">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8182">
        <label>UsdShadeNodeGraph</label>
        <link refid="class_usd_shade_node_graph"/>
        <childnode refid="8183" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8187">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="8188" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8188">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8186">
        <label>UsdShadeNodeGraph</label>
        <link refid="class_usd_shade_node_graph"/>
        <childnode refid="8187" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdShade/nodeGraph.h" line="81" column="1" bodyfile="pxr/usd/usdShade/nodeGraph.h" bodystart="80" bodyend="385"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_shade_node_graph_1a9b47498492265f1a224b6ec58b109a88" prot="protected" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_shade_node_graph_1aa9360fb676c331455b1c118acc45d8e9" prot="private" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_shade_node_graph_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_shade_node_graph_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_shade_node_graph_1a08aec767b99c7b3a2530f7006b6a6635" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>ComputeInterfaceInputConsumersMap</name></member>
      <member refid="class_usd_shade_node_graph_1a76a3c863585af75adece34394f7ae79b" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>ComputeOutputSource</name></member>
      <member refid="class_usd_shade_node_graph_1a23107227401fa5432854ace9769500b7" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>ConnectableAPI</name></member>
      <member refid="class_usd_shade_node_graph_1a8a03fdcc294aa2fae8a42e8e1cde57a5" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>CreateInput</name></member>
      <member refid="class_usd_shade_node_graph_1a3ee6f709731f13f92a807e8ab3a1c7fb" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>CreateOutput</name></member>
      <member refid="class_usd_shade_node_graph_1ae8fec8af0c7558cfd344941f6f1659ef" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>Define</name></member>
      <member refid="class_usd_shade_node_graph_1adb19a78238c28903827e870b844a5a8a" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>Get</name></member>
      <member refid="class_usd_shade_node_graph_1a6424c331cdf1248389dcafc2c651cf72" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetInput</name></member>
      <member refid="class_usd_shade_node_graph_1acd083a8223f0a5cb1402c38bad9dccb5" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetInputs</name></member>
      <member refid="class_usd_shade_node_graph_1a539edcd2a9c7f24c3151d54c633e1fcd" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetInterfaceInputs</name></member>
      <member refid="class_usd_shade_node_graph_1acc6d5f29062faa83e9a7e61be6f97618" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetOutput</name></member>
      <member refid="class_usd_shade_node_graph_1ac9882b5f0511e292428b35514b943240" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetOutputs</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetPrim</name></member>
      <member refid="class_usd_shade_node_graph_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_shade_node_graph_1a237557b6ace8a23f99df0dc159a4395c" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>InterfaceInputConsumersMap</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>IsTyped</name></member>
      <member refid="class_usd_shade_node_graph_1ac6516b6b87ba9dcd3cef169fa2fcde83" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>NodeGraphInputConsumersMap</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>operator bool</name></member>
      <member refid="class_usd_shade_node_graph_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>schemaKind</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_shade_node_graph_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_shade_node_graph_1af887742937393a1ea8e54d405fcf078c" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdShadeNodeGraph</name></member>
      <member refid="class_usd_shade_node_graph_1a1b1604242583150f7003f1b41056ad99" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdShadeNodeGraph</name></member>
      <member refid="class_usd_shade_node_graph_1a1cb3b88cbcfc3b4181a372e012a74e68" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdShadeNodeGraph</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdShadeNodeGraph</scope><name>UsdTyped</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_shade_node_graph_1a76156ef256a30405ada0b004ed894503" prot="public" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>~UsdShadeNodeGraph</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdShadeNodeGraph</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
