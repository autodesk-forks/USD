<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_attribute_query" kind="class" language="C++" prot="public">
    <compoundname>UsdAttributeQuery</compoundname>
    <includes refid="attribute_query_8h" local="no">attributeQuery.h</includes>
      <sectiondef kind="user-defined">
      <header>Query information</header>
      <memberdef kind="function" id="class_usd_attribute_query_1af702df2c88deb21dade83ad10251f7b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
        <definition>USD_API const UsdAttribute&amp; GetAttribute</definition>
        <argsstring>() const</argsstring>
        <name>GetAttribute</name>
        <briefdescription>
<para>Return the attribute associated with this query. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Return true if this query is valid (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>it is associated with a valid attribute), false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="128" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the query object is valid, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="134" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1aa27b5b6bc0b119b0b65c10f0809536ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
        <definition>USD_API UsdAttributeQuery&amp; operator=</definition>
        <argsstring>(const UsdAttributeQuery &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a6007d9821bc5a53bad2d89d5bddb6d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
        <definition>USD_API UsdAttributeQuery&amp; operator=</definition>
        <argsstring>(UsdAttributeQuery &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value &amp; Time-Sample Accessors</header>
      <memberdef kind="function" id="class_usd_attribute_query_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Get</definition>
        <argsstring>(T *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Perform value resolution to fetch the value of the attribute associated with this query at the requested <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdAttribute::Get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="159" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1aabe72aba718e7b6d90f85cfe77826a37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Get</definition>
        <argsstring>(VtValue *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Type-erased access, often not as efficient as typed access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a0aba275933a77f28ab44b750964aa9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetTimeSamples</definition>
        <argsstring>(std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamples</name>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false only on error. Behaves identically to <ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_query_1a47ff5d05a3872ef5061e8908fde2d559" kindref="member">UsdAttributeQuery::GetTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a47ff5d05a3872ef5061e8908fde2d559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetTimeSamplesInInterval</definition>
        <argsstring>(const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamplesInInterval</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates a vector with authored sample times in <computeroutput>interval</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false only on an error.</para>
<para>Behaves identically to <ref refid="class_usd_attribute_1a47ff5d05a3872ef5061e8908fde2d559" kindref="member">UsdAttribute::GetTimeSamplesInInterval()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1adb2e41f8b3e68d9acbbb05918ee9fbd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t GetNumTimeSamples</definition>
        <argsstring>() const</argsstring>
        <name>GetNumTimeSamples</name>
        <briefdescription>
<para>Returns the number of time samples that have been authored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1adb2e41f8b3e68d9acbbb05918ee9fbd9" kindref="member">UsdAttribute::GetNumTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a1f73bf9822e7300dcf4f009e07ae453f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetBracketingTimeSamples</definition>
        <argsstring>(double desiredTime, double *lower, double *upper, bool *hasTimeSamples) const</argsstring>
        <name>GetBracketingTimeSamples</name>
        <param>
          <type>double</type>
          <declname>desiredTime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>hasTimeSamples</declname>
        </param>
        <briefdescription>
<para>Populate <emphasis>lower</emphasis> and <emphasis>upper</emphasis> with the next greater and lesser value relative to the <emphasis>desiredTime</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a1f73bf9822e7300dcf4f009e07ae453f" kindref="member">UsdAttribute::GetBracketingTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a7d33522bff62860c930f407afdada858" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasValue</definition>
        <argsstring>() const</argsstring>
        <name>HasValue</name>
        <briefdescription>
<para>Return true if the attribute associated with this query has an authored default value, authored time samples or a fallback value provided by a registered schema. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a7d33522bff62860c930f407afdada858" kindref="member">UsdAttribute::HasValue</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a5af0f9735689c7dbf67a6a72da967666" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredValueOpinion</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredValueOpinion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000064"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This method is deprecated because it returns <computeroutput>true</computeroutput> even when an attribute is blocked.</para>
</xrefdescription></xrefsect>Please use <ref refid="class_usd_attribute_query_1af1fa2ef2a3852eb0b163183e7bbf1cb9" kindref="member">HasAuthoredValue()</ref> instead. If you truly need to know whether the attribute has <bold>any</bold> authored value opinions, <emphasis>including blocks</emphasis>, you can make the following query: <computeroutput>query.GetAttribute().GetResolveInfo().<ref refid="class_usd_attribute_query_1a5af0f9735689c7dbf67a6a72da967666" kindref="member">HasAuthoredValueOpinion()</ref></computeroutput></para>
<para>Return true if this attribute has either an authored default value or authored time samples. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1af1fa2ef2a3852eb0b163183e7bbf1cb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredValue</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredValue</name>
        <briefdescription>
<para>Return true if this attribute has either an authored default value or authored time samples. </para>
        </briefdescription>
        <detaileddescription>
<para>If the attribute has been <ref refid="class_usd_attribute_1Usd_AttributeBlocking" kindref="member">blocked</ref>, then return <computeroutput>false</computeroutput> <simplesect kind="see"><para><ref refid="class_usd_attribute_1af1fa2ef2a3852eb0b163183e7bbf1cb9" kindref="member">UsdAttribute::HasAuthoredValue()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1ab2d1fe152bf22c9ca8fe1250ec9b77c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasFallbackValue</definition>
        <argsstring>() const</argsstring>
        <name>HasFallbackValue</name>
        <briefdescription>
<para>Return true if the attribute associated with this query has a fallback value provided by a registered schema. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1ab2d1fe152bf22c9ca8fe1250ec9b77c0" kindref="member">UsdAttribute::HasFallbackValue</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1adc2ce35114eb530bfa1d4b46c3d8fabc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ValueMightBeTimeVarying</definition>
        <argsstring>() const</argsstring>
        <name>ValueMightBeTimeVarying</name>
        <briefdescription>
<para>Return true if it is possible, but not certain, that this attribute&apos;s value changes over time, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1adc2ce35114eb530bfa1d4b46c3d8fabc" kindref="member">UsdAttribute::ValueMightBeTimeVarying</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a4da4478aa7c2b91aee5b38402133f4a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool GetUnionedTimeSamples</definition>
        <argsstring>(const std::vector&lt; UsdAttributeQuery &gt; &amp;attrQueries, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetUnionedTimeSamples</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &gt; &amp;</type>
          <declname>attrQueries</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates the given vector, <computeroutput>times</computeroutput> with the union of all the authored sample times on all of the given attribute-query objects, <computeroutput>attrQueries</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Behaves identically to <ref refid="class_usd_attribute_1a6187801e648b03d584d0bf2c3d18aeec" kindref="member">UsdAttribute::GetUnionedTimeSamples()</ref></para>
<para><simplesect kind="return"><para>false if one or more attribute-queries in <computeroutput>attrQueries</computeroutput> are invalid or if there&apos;s an error fetching time-samples for any of the attribute-query objects.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a6187801e648b03d584d0bf2c3d18aeec" kindref="member">UsdAttribute::GetUnionedTimeSamples</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_query_1ad13723207822cd45bd2c5328065d6b5e" kindref="member">UsdAttributeQuery::GetUnionedTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1ad13723207822cd45bd2c5328065d6b5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool GetUnionedTimeSamplesInInterval</definition>
        <argsstring>(const std::vector&lt; UsdAttributeQuery &gt; &amp;attrQueries, const GfInterval &amp;interval, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetUnionedTimeSamplesInInterval</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &gt; &amp;</type>
          <declname>attrQueries</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Populates the given vector, <computeroutput>times</computeroutput> with the union of all the authored sample times in the <ref refid="class_gf_interval" kindref="compound">GfInterval</ref>, <computeroutput>interval</computeroutput> on all of the given attribute-query objects, <computeroutput>attrQueries</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Behaves identically to <ref refid="class_usd_attribute_1a63885479b8152704ee4d724a32b58d9d" kindref="member">UsdAttribute::GetUnionedTimeSamplesInInterval()</ref></para>
<para><simplesect kind="return"><para>false if one or more attribute-queries in <computeroutput>attrQueries</computeroutput> are invalid or if there&apos;s an error fetching time-samples for any of the attribute-query objects.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_attribute_1a63885479b8152704ee4d724a32b58d9d" kindref="member">UsdAttribute::GetUnionedTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="215" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_attribute_query_1a5264980b5cd3db34a397bfda54c1b566" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>UsdAttribute _attr</definition>
        <argsstring></argsstring>
        <name>_attr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="289" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_attribute_query_1abfc315e2ae7efe801844f597d02c84bb" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_resolve_info" kindref="compound">UsdResolveInfo</ref></type>
        <definition>UsdResolveInfo _resolveInfo</definition>
        <argsstring></argsstring>
        <name>_resolveInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="290" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_attribute_query_1a49cbcc12f7815cc052de7991c4c8574a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> &gt;</type>
        <definition>std::unique_ptr&lt;UsdResolveTarget&gt; _resolveTarget</definition>
        <argsstring></argsstring>
        <name>_resolveTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="291" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_attribute_query_1a05412173158cd9622cf63927d0c3dd14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>()</argsstring>
        <name>UsdAttributeQuery</name>
        <briefdescription>
<para>Construct an invalid query object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a357b3191079b09b69e1196c19a58a619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>(const UsdAttributeQuery &amp;other)</argsstring>
        <name>UsdAttributeQuery</name>
        <param>
          <type>const <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a3fb6da5ebbd2d7af236fac9046899020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>(UsdAttributeQuery &amp;&amp;other)=default</argsstring>
        <name>UsdAttributeQuery</name>
        <param>
          <type><ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1abb3526549966fcd24a83816439c87a21" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>UsdAttributeQuery</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Construct a new query for the attribute <computeroutput>attr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a561d464c6a453042192892ecb7fe681c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;attrName)</argsstring>
        <name>UsdAttributeQuery</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Construct a new query for the attribute named <computeroutput>attrName</computeroutput> under the prim <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1a4514bbe8f201930e602f4d647533eaf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdAttributeQuery</definition>
        <argsstring>(const UsdAttribute &amp;attr, const UsdResolveTarget &amp;resolveTarget)</argsstring>
        <name>UsdAttributeQuery</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> &amp;</type>
          <declname>resolveTarget</declname>
        </param>
        <briefdescription>
<para>Construct a new query for the attribute <computeroutput>attr</computeroutput> with the given resolve target <computeroutput>resolveTarget</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that a <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> is associated with a particular prim so only resolve targets for the attribute&apos;s owning prim are allowed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="106" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_attribute_query_1abad31cf529084456eb36c9c2687894f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &gt;</type>
        <definition>static USD_API std::vector&lt;UsdAttributeQuery&gt; CreateQueries</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfTokenVector &amp;attrNames)</argsstring>
        <name>CreateQueries</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>attrNames</declname>
        </param>
        <briefdescription>
<para>Construct new queries for the attributes named in <computeroutput>attrNames</computeroutput> under the prim <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The objects in the returned vector will line up 1-to-1 with <computeroutput>attrNames</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_attribute_query_1ae229ebda3ceb1f6b51687126a833aa40" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Initialize</definition>
        <argsstring>()</argsstring>
        <name>_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1acadc201981ee4b131ce904a67bf484fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Initialize</definition>
        <argsstring>(const UsdResolveTarget &amp;resolveTarget)</argsstring>
        <name>_Initialize</name>
        <param>
          <type>const <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref> &amp;</type>
          <declname>resolveTarget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_attribute_query_1ad9111f306cbc19f96d6dcf4efcc72d58" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>USD_API bool</type>
        <definition>USD_API bool _Get</definition>
        <argsstring>(T *value, UsdTimeCode time) const</argsstring>
        <name>_Get</name>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/attributeQuery.h" line="286" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object for efficiently making repeated queries for attribute values. </para>
    </briefdescription>
    <detaileddescription>
<para>Retrieving an attribute&apos;s value at a particular time requires determining the source of strongest opinion for that value. Often (i.e. unless the attribute is affected by <ref refid="_usd__page__value_clips" kindref="compound">Value Clips</ref>) this source does not vary over time. <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> uses this fact to speed up repeated value queries by caching the source information for an attribute. It is safe to use a <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> for any attribute - if the attribute <emphasis>is</emphasis> affected by Value Clips, the performance gain will just be less.</para>
<sect1 id="class_usd_attribute_query_1Resolve_targets">
<title>Resolve targets</title>
<para>An attribute query can also be constructed for an attribute along with a <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref>. A resolve target allows value resolution to consider only a subrange of the prim stack instead of the entirety of it. All of the methods of an attribute query created with a resolve target will perform value resolution within that resolve target. This can be useful for finding the value of an attribute resolved up to a particular layer or for determining if a value authored on layer would be overridden by a stronger opinion.</para>
</sect1>
<sect1 id="class_usd_attribute_query_1Thread_safety">
<title>Thread safety</title>
<para>This object provides the basic thread-safety guarantee. Multiple threads may call the value accessor functions simultaneously.</para>
</sect1>
<sect1 id="class_usd_resolve_target_1Invalidation">
<title>Invalidation</title>
<para>This object does not listen for change notification. If a consumer is holding on to a <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref>, it is their responsibility to dispose of it in response to a resync change to the associated attribute. Failing to do so may result in incorrect values or crashes due to dereferencing invalid objects. </para>
</sect1>
    </detaileddescription>
    <location file="pxr/usd/usd/attributeQuery.h" line="77" column="1" bodyfile="pxr/usd/usd/attributeQuery.h" bodystart="76" bodyend="292"/>
    <listofallmembers>
      <member refid="class_usd_attribute_query_1a5264980b5cd3db34a397bfda54c1b566" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_attr</name></member>
      <member refid="class_usd_attribute_query_1ad9111f306cbc19f96d6dcf4efcc72d58" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_Get</name></member>
      <member refid="class_usd_attribute_query_1ae229ebda3ceb1f6b51687126a833aa40" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_Initialize</name></member>
      <member refid="class_usd_attribute_query_1acadc201981ee4b131ce904a67bf484fe" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_Initialize</name></member>
      <member refid="class_usd_attribute_query_1abfc315e2ae7efe801844f597d02c84bb" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_resolveInfo</name></member>
      <member refid="class_usd_attribute_query_1a49cbcc12f7815cc052de7991c4c8574a" prot="private" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>_resolveTarget</name></member>
      <member refid="class_usd_attribute_query_1abad31cf529084456eb36c9c2687894f4" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>CreateQueries</name></member>
      <member refid="class_usd_attribute_query_1a9d41bc223be86408ba7d7f74df7c35a9" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>Get</name></member>
      <member refid="class_usd_attribute_query_1aabe72aba718e7b6d90f85cfe77826a37" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>Get</name></member>
      <member refid="class_usd_attribute_query_1af702df2c88deb21dade83ad10251f7b3" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetAttribute</name></member>
      <member refid="class_usd_attribute_query_1a1f73bf9822e7300dcf4f009e07ae453f" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetBracketingTimeSamples</name></member>
      <member refid="class_usd_attribute_query_1adb2e41f8b3e68d9acbbb05918ee9fbd9" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetNumTimeSamples</name></member>
      <member refid="class_usd_attribute_query_1a0aba275933a77f28ab44b750964aa9a2" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_attribute_query_1a47ff5d05a3872ef5061e8908fde2d559" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_attribute_query_1a4da4478aa7c2b91aee5b38402133f4a7" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetUnionedTimeSamples</name></member>
      <member refid="class_usd_attribute_query_1ad13723207822cd45bd2c5328065d6b5e" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>GetUnionedTimeSamplesInInterval</name></member>
      <member refid="class_usd_attribute_query_1af1fa2ef2a3852eb0b163183e7bbf1cb9" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>HasAuthoredValue</name></member>
      <member refid="class_usd_attribute_query_1a5af0f9735689c7dbf67a6a72da967666" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>HasAuthoredValueOpinion</name></member>
      <member refid="class_usd_attribute_query_1ab2d1fe152bf22c9ca8fe1250ec9b77c0" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>HasFallbackValue</name></member>
      <member refid="class_usd_attribute_query_1a7d33522bff62860c930f407afdada858" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>HasValue</name></member>
      <member refid="class_usd_attribute_query_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>IsValid</name></member>
      <member refid="class_usd_attribute_query_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>operator bool</name></member>
      <member refid="class_usd_attribute_query_1aa27b5b6bc0b119b0b65c10f0809536ba" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>operator=</name></member>
      <member refid="class_usd_attribute_query_1a6007d9821bc5a53bad2d89d5bddb6d6b" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>operator=</name></member>
      <member refid="class_usd_attribute_query_1a05412173158cd9622cf63927d0c3dd14" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1a357b3191079b09b69e1196c19a58a619" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1a3fb6da5ebbd2d7af236fac9046899020" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1abb3526549966fcd24a83816439c87a21" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1a561d464c6a453042192892ecb7fe681c" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1a4514bbe8f201930e602f4d647533eaf9" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>UsdAttributeQuery</name></member>
      <member refid="class_usd_attribute_query_1adc2ce35114eb530bfa1d4b46c3d8fabc" prot="public" virt="non-virtual"><scope>UsdAttributeQuery</scope><name>ValueMightBeTimeVarying</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
