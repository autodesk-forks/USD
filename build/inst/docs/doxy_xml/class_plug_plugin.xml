<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_plug_plugin" kind="class" language="C++" prot="public">
    <compoundname>PlugPlugin</compoundname>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="plugin_8h" local="no">plugin.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3" prot="private" static="no" strong="no">
        <type></type>
        <name>_Type</name>
        <enumvalue id="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3acdd3c8fa821e92d10c1bfe508cd81315" prot="private">
          <name>LibraryType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3a638e25c8bb4d50b7188eb1bd144a5717" prot="private">
          <name>PythonType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3aed120c7a23eff4527e6ab0e9dd9952f8" prot="private">
          <name>ResourceType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="117" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="117" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_plug_plugin_1aaf2ed934b37cbbd236fdd1b01a5f5005" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="186" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1a18564f99a748f8daffbf8f5ffaa2a0cb" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _path</definition>
        <argsstring></argsstring>
        <name>_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="187" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1a5cc71f566e5f6f5434dd9b739495c27b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _resourcePath</definition>
        <argsstring></argsstring>
        <name>_resourcePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="188" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1a06e5b4093cbdc6c71b787553950d12df" prot="private" static="no" mutable="no">
        <type>JsObject</type>
        <definition>JsObject _dict</definition>
        <argsstring></argsstring>
        <name>_dict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="189" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1af4a6d172f632c6c18774f45134c77900" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* _handle</definition>
        <argsstring></argsstring>
        <name>_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="190" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1a5af8e7f3bf45899f7986b20aad283623" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; _isLoaded</definition>
        <argsstring></argsstring>
        <name>_isLoaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="191" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_plug_plugin_1ade25a5b91351cbbbe0b72cbb09f32fe6" prot="private" static="no" mutable="no">
        <type>_Type</type>
        <definition>_Type _type</definition>
        <argsstring></argsstring>
        <name>_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="192" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_plug_plugin_1a1fd809d936e9caf4de2119494f4e106a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PlugRegistry</definition>
        <argsstring></argsstring>
        <name>PlugRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="194" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_plug_plugin_1aa92017ed4f633acae5d64d3227dace02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API</type>
        <definition>PLUG_API ~PlugPlugin</definition>
        <argsstring>()</argsstring>
        <name>~PlugPlugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1ab65418b6bc7bf785aae19102650cdd0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API bool</type>
        <definition>PLUG_API bool Load</definition>
        <argsstring>()</argsstring>
        <name>Load</name>
        <briefdescription>
<para>Loads the plugin. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a noop if the plugin is already loaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a2b0f98f281d7fc49610ecfb3e3b9b013" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API bool</type>
        <definition>PLUG_API bool IsLoaded</definition>
        <argsstring>() const</argsstring>
        <name>IsLoaded</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the plugin is currently loaded. </para>
        </briefdescription>
        <detaileddescription>
<para>Resource plugins always report as loaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1af46b94db76af9fbd095e82d35887a4b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API bool</type>
        <definition>PLUG_API bool IsPythonModule</definition>
        <argsstring>() const</argsstring>
        <name>IsPythonModule</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the plugin is a python module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1afdee803647d351067657617506f480de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API bool</type>
        <definition>PLUG_API bool IsResource</definition>
        <argsstring>() const</argsstring>
        <name>IsResource</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the plugin is resource-only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1abda83d396351e1d12d383a6f816becdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API JsObject</type>
        <definition>PLUG_API JsObject GetMetadata</definition>
        <argsstring>()</argsstring>
        <name>GetMetadata</name>
        <briefdescription>
<para>Returns the dictionary containing meta-data for the plugin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a424e6ad3184057a3a23601473dcc9806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API JsObject</type>
        <definition>PLUG_API JsObject GetMetadataForType</definition>
        <argsstring>(const TfType &amp;type)</argsstring>
        <name>GetMetadataForType</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Returns the metadata sub-dictionary for a particular type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a8eab286730a159291308b7083da12855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API JsObject</type>
        <definition>PLUG_API JsObject GetDependencies</definition>
        <argsstring>()</argsstring>
        <name>GetDependencies</name>
        <briefdescription>
<para>Returns the dictionary containing the dependencies for the plugin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a78a50ad16cdfab00cdc08fee45654e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API bool</type>
        <definition>PLUG_API bool DeclaresType</definition>
        <argsstring>(const TfType &amp;type, bool includeSubclasses=false) const</argsstring>
        <name>DeclaresType</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSubclasses</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>type</computeroutput> is declared by this plugin. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>includeSubclasses</computeroutput> is specified, also returns true if any subclasses of <computeroutput>type</computeroutput> have been declared. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1aed3ce8807bc2a1360288d9b9a3bf7f6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const&amp; GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the plugin&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="92" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a6650f0c2f02c7131f42e8f822dfa8339" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const&amp; GetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the plugin&apos;s filesystem path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="97" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1ad6914ad8ac30e452bfbe4bc0f1726ac0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const&amp; GetResourcePath</definition>
        <argsstring>() const</argsstring>
        <name>GetResourcePath</name>
        <briefdescription>
<para>Returns the plugin&apos;s resources filesystem path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="102" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1aace153d44fbadf800ddcdeae86d6a0ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API std::string</type>
        <definition>PLUG_API std::string MakeResourcePath</definition>
        <argsstring>(const std::string &amp;path) const</argsstring>
        <name>MakeResourcePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Build a plugin resource path by returning a given absolute path or combining the plugin&apos;s resource path with a given relative path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1adb980ae5586fa7acf3a3231537795221" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_API std::string</type>
        <definition>PLUG_API std::string FindPluginResource</definition>
        <argsstring>(const std::string &amp;path, bool verify=true) const</argsstring>
        <name>FindPluginResource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Find a plugin resource by absolute or relative path optionally verifying that file exists. </para>
        </briefdescription>
        <detaileddescription>
<para>If verification fails an empty path is returned. Relative paths are relative to the plugin&apos;s resource path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_plug_plugin_1acb4bbf29b422c066e691ccc8d2b8d4a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL</type>
        <definition>PLUG_LOCAL PlugPlugin</definition>
        <argsstring>(const std::string &amp;path, const std::string &amp;name, const std::string &amp;resourcePath, const JsObject &amp;plugInfo, _Type type)</argsstring>
        <name>PlugPlugin</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resourcePath</declname>
        </param>
        <param>
          <type>const JsObject &amp;</type>
          <declname>plugInfo</declname>
        </param>
        <param>
          <type>_Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a51ee6eac934091729d55767d8d9ec600" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL bool</type>
        <definition>PLUG_LOCAL bool _Load</definition>
        <argsstring>()</argsstring>
        <name>_Load</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1adb67ec2f1e989feb9170ed92bb5caddf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>PLUG_LOCAL void _DeclareAliases</definition>
        <argsstring>(TfType t, const JsObject &amp;metadata)</argsstring>
        <name>_DeclareAliases</name>
        <param>
          <type><ref refid="class_tf_type" kindref="compound">TfType</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const JsObject &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a133307e7dafdfaaf2cbcb4248768ca25" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>PLUG_LOCAL void _DeclareTypes</definition>
        <argsstring>()</argsstring>
        <name>_DeclareTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1acfb13e60ec3dba5be3b2fd607dd475eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>PLUG_LOCAL void _DeclareType</definition>
        <argsstring>(const std::string &amp;name, const JsObject &amp;dict)</argsstring>
        <name>_DeclareType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const JsObject &amp;</type>
          <declname>dict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1adc165e18b2c5681b6dc3781b5af4c327" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL bool</type>
        <definition>PLUG_LOCAL bool _LoadWithDependents</definition>
        <argsstring>(_SeenPlugins *seenPlugins)</argsstring>
        <name>_LoadWithDependents</name>
        <param>
          <type>_SeenPlugins *</type>
          <declname>seenPlugins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="177" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_plug_plugin_1abff021dafb2c3f1e4b4f6d6f73d6d1c9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL PlugPluginPtr</type>
        <definition>static PLUG_LOCAL PlugPluginPtr _GetPluginForType</definition>
        <argsstring>(const TfType &amp;type)</argsstring>
        <name>_GetPluginForType</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a3803e40ad4704e14a30a7ffb2a77ef49" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>static PLUG_LOCAL void _RegisterAllPlugins</definition>
        <argsstring>()</argsstring>
        <name>_RegisterAllPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a226c03e3418cef358646a5cfce67dd63" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL PlugPluginPtr</type>
        <definition>static PLUG_LOCAL PlugPluginPtr _GetPluginWithName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>_GetPluginWithName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a8ad87ea5e10d051e2e74d0682a037ecd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL PlugPluginPtrVector</type>
        <definition>static PLUG_LOCAL PlugPluginPtrVector _GetAllPlugins</definition>
        <argsstring>()</argsstring>
        <name>_GetAllPlugins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a247a7f7d09a4f68e2a8b429f302db869" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PluginMap</type>
          </param>
        </templateparamlist>
        <type>PLUG_LOCAL std::pair&lt; PlugPluginPtr, bool &gt;</type>
        <definition>static PLUG_LOCAL std::pair&lt;PlugPluginPtr, bool&gt; _NewPlugin</definition>
        <argsstring>(const Plug_RegistrationMetadata &amp;metadata, _Type pluginType, const std::string &amp;pluginCreationPath, PluginMap *allPluginsByNamePtr)</argsstring>
        <name>_NewPlugin</name>
        <param>
          <type>const Plug_RegistrationMetadata &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>_Type</type>
          <declname>pluginType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pluginCreationPath</declname>
        </param>
        <param>
          <type>PluginMap *</type>
          <declname>allPluginsByNamePtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a461c9c21282428cd67dcbbcb15198dd3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL std::pair&lt; PlugPluginPtr, bool &gt;</type>
        <definition>static PLUG_LOCAL std::pair&lt;PlugPluginPtr, bool&gt; _NewDynamicLibraryPlugin</definition>
        <argsstring>(const Plug_RegistrationMetadata &amp;metadata)</argsstring>
        <name>_NewDynamicLibraryPlugin</name>
        <param>
          <type>const Plug_RegistrationMetadata &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a3c5aaf83e35829a7d374a13c1a58ca46" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL std::pair&lt; PlugPluginPtr, bool &gt;</type>
        <definition>static PLUG_LOCAL std::pair&lt;PlugPluginPtr, bool&gt; _NewPythonModulePlugin</definition>
        <argsstring>(const Plug_RegistrationMetadata &amp;metadata)</argsstring>
        <name>_NewPythonModulePlugin</name>
        <param>
          <type>const Plug_RegistrationMetadata &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a98b06923e9b22a62b09d6a93111156ab" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL std::pair&lt; PlugPluginPtr, bool &gt;</type>
        <definition>static PLUG_LOCAL std::pair&lt;PlugPluginPtr, bool&gt; _NewResourcePlugin</definition>
        <argsstring>(const Plug_RegistrationMetadata &amp;metadata)</argsstring>
        <name>_NewResourcePlugin</name>
        <param>
          <type>const Plug_RegistrationMetadata &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a2be4327130962f3faef09b066cd0efd4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>static PLUG_LOCAL void _DefineType</definition>
        <argsstring>(TfType t)</argsstring>
        <name>_DefineType</name>
        <param>
          <type><ref refid="class_tf_type" kindref="compound">TfType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1ad1be40dacf9e48d2bcc765b53f0f7ea3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL void</type>
        <definition>static PLUG_LOCAL void _UpdatePluginMaps</definition>
        <argsstring>(const TfType &amp;baseType)</argsstring>
        <name>_UpdatePluginMaps</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>baseType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_plug_plugin_1a5be6fe2a4fede97cf281da9582dd5b07" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PLUG_LOCAL constexpr char const  *</type>
        <definition>static PLUG_LOCAL constexpr char const* _GetPluginTypeDisplayName</definition>
        <argsstring>(_Type type)</argsstring>
        <name>_GetPluginTypeDisplayName</name>
        <param>
          <type>_Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/plug/plugin.h" line="183" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines an interface to registered plugins. </para>
    </briefdescription>
    <detaileddescription>
<para>Plugins are registered using the interfaces in <computeroutput><ref refid="class_plug_registry" kindref="compound">PlugRegistry</ref></computeroutput>.</para>
<para>For each registered plugin, there is an instance of <computeroutput><ref refid="class_plug_plugin" kindref="compound">PlugPlugin</ref></computeroutput> which can be used to load and unload the plugin and to retrieve information about the classes implemented by the plugin. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4802">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4801">
        <label>PlugPlugin</label>
        <link refid="class_plug_plugin"/>
        <childnode refid="4802" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4804">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4803">
        <label>PlugPlugin</label>
        <link refid="class_plug_plugin"/>
        <childnode refid="4804" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/plug/plugin.h" line="57" column="1" bodyfile="pxr/base/plug/plugin.h" bodystart="57" bodyend="195"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_plug_plugin_1adb67ec2f1e989feb9170ed92bb5caddf" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_DeclareAliases</name></member>
      <member refid="class_plug_plugin_1acfb13e60ec3dba5be3b2fd607dd475eb" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_DeclareType</name></member>
      <member refid="class_plug_plugin_1a133307e7dafdfaaf2cbcb4248768ca25" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_DeclareTypes</name></member>
      <member refid="class_plug_plugin_1a2be4327130962f3faef09b066cd0efd4" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_DefineType</name></member>
      <member refid="class_plug_plugin_1a06e5b4093cbdc6c71b787553950d12df" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_dict</name></member>
      <member refid="class_plug_plugin_1a8ad87ea5e10d051e2e74d0682a037ecd" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_GetAllPlugins</name></member>
      <member refid="class_plug_plugin_1abff021dafb2c3f1e4b4f6d6f73d6d1c9" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_GetPluginForType</name></member>
      <member refid="class_plug_plugin_1a5be6fe2a4fede97cf281da9582dd5b07" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_GetPluginTypeDisplayName</name></member>
      <member refid="class_plug_plugin_1a226c03e3418cef358646a5cfce67dd63" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_GetPluginWithName</name></member>
      <member refid="class_plug_plugin_1af4a6d172f632c6c18774f45134c77900" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_handle</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>PlugPlugin</scope><name>_HasRemnant</name></member>
      <member refid="class_plug_plugin_1a5af8e7f3bf45899f7986b20aad283623" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_isLoaded</name></member>
      <member refid="class_plug_plugin_1a51ee6eac934091729d55767d8d9ec600" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_Load</name></member>
      <member refid="class_plug_plugin_1adc165e18b2c5681b6dc3781b5af4c327" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_LoadWithDependents</name></member>
      <member refid="class_plug_plugin_1aaf2ed934b37cbbd236fdd1b01a5f5005" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_name</name></member>
      <member refid="class_plug_plugin_1a461c9c21282428cd67dcbbcb15198dd3" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_NewDynamicLibraryPlugin</name></member>
      <member refid="class_plug_plugin_1a247a7f7d09a4f68e2a8b429f302db869" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_NewPlugin</name></member>
      <member refid="class_plug_plugin_1a3c5aaf83e35829a7d374a13c1a58ca46" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_NewPythonModulePlugin</name></member>
      <member refid="class_plug_plugin_1a98b06923e9b22a62b09d6a93111156ab" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_NewResourcePlugin</name></member>
      <member refid="class_plug_plugin_1a18564f99a748f8daffbf8f5ffaa2a0cb" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_path</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>PlugPlugin</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>PlugPlugin</scope><name>_Register</name></member>
      <member refid="class_plug_plugin_1a3803e40ad4704e14a30a7ffb2a77ef49" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_RegisterAllPlugins</name></member>
      <member refid="class_plug_plugin_1a5cc71f566e5f6f5434dd9b739495c27b" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_resourcePath</name></member>
      <member refid="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_Type</name></member>
      <member refid="class_plug_plugin_1ade25a5b91351cbbbe0b72cbb09f32fe6" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_type</name></member>
      <member refid="class_plug_plugin_1ad1be40dacf9e48d2bcc765b53f0f7ea3" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>_UpdatePluginMaps</name></member>
      <member refid="class_plug_plugin_1a78a50ad16cdfab00cdc08fee45654e4c" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>DeclaresType</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>EnableNotification2</name></member>
      <member refid="class_plug_plugin_1adb980ae5586fa7acf3a3231537795221" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>FindPluginResource</name></member>
      <member refid="class_plug_plugin_1a8eab286730a159291308b7083da12855" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetDependencies</name></member>
      <member refid="class_plug_plugin_1abda83d396351e1d12d383a6f816becdc" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetMetadata</name></member>
      <member refid="class_plug_plugin_1a424e6ad3184057a3a23601473dcc9806" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetMetadataForType</name></member>
      <member refid="class_plug_plugin_1aed3ce8807bc2a1360288d9b9a3bf7f6f" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetName</name></member>
      <member refid="class_plug_plugin_1a6650f0c2f02c7131f42e8f822dfa8339" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetPath</name></member>
      <member refid="class_plug_plugin_1ad6914ad8ac30e452bfbe4bc0f1726ac0" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetResourcePath</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_plug_plugin_1a2b0f98f281d7fc49610ecfb3e3b9b013" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>IsLoaded</name></member>
      <member refid="class_plug_plugin_1af46b94db76af9fbd095e82d35887a4b1" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>IsPythonModule</name></member>
      <member refid="class_plug_plugin_1afdee803647d351067657617506f480de" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>IsResource</name></member>
      <member refid="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3acdd3c8fa821e92d10c1bfe508cd81315" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>LibraryType</name></member>
      <member refid="class_plug_plugin_1ab65418b6bc7bf785aae19102650cdd0b" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>Load</name></member>
      <member refid="class_plug_plugin_1aace153d44fbadf800ddcdeae86d6a0ab" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>MakeResourcePath</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>operator=</name></member>
      <member refid="class_plug_plugin_1acb4bbf29b422c066e691ccc8d2b8d4a0" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>PlugPlugin</name></member>
      <member refid="class_plug_plugin_1a1fd809d936e9caf4de2119494f4e106a" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>PlugRegistry</name></member>
      <member refid="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3a638e25c8bb4d50b7188eb1bd144a5717" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>PythonType</name></member>
      <member refid="class_plug_plugin_1aee777019d0884c4c38d9a4b33b447af3aed120c7a23eff4527e6ab0e9dd9952f8" prot="private" virt="non-virtual"><scope>PlugPlugin</scope><name>ResourceType</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>TfWeakBase</name></member>
      <member refid="class_plug_plugin_1aa92017ed4f633acae5d64d3227dace02" prot="public" virt="non-virtual"><scope>PlugPlugin</scope><name>~PlugPlugin</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>PlugPlugin</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
