<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_device" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLDevice</compoundname>
    <includes refid="device_8h" local="no">device.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_device_1a0941a96ca85a771ec73fc900af69212b" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_g_l_context_arena" kindref="compound">HgiGLContextArena</ref></type>
        <definition>HgiGLContextArena _defaultArena</definition>
        <argsstring></argsstring>
        <name>_defaultArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="86" column="1" bodyfile="pxr/imaging/hgiGL/device.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_device_1abcb7901055e03a27282ba1c4b5400124" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_g_l_context_arena" kindref="compound">HgiGLContextArena</ref> *</type>
        <definition>HgiGLContextArena* _activeArena</definition>
        <argsstring></argsstring>
        <name>_activeArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="87" column="1" bodyfile="pxr/imaging/hgiGL/device.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_device_1ac03ff5105c8abcf62ff276d5b0932497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLDevice</definition>
        <argsstring>()</argsstring>
        <name>HgiGLDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1aeb75f673023efc635e507d8371a43c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLDevice</definition>
        <argsstring>()</argsstring>
        <name>~HgiGLDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1a223950799b94891f959c95815c18be01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void SubmitOps</definition>
        <argsstring>(HgiGLOpsVector const &amp;ops)</argsstring>
        <name>SubmitOps</name>
        <param>
          <type>HgiGLOpsVector const &amp;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>Execute the provided functions / ops. This will emit the GL calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1aaae0421b9550feaa38c2830247a18092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void SetCurrentArena</definition>
        <argsstring>(HgiGLContextArenaHandle const &amp;arenaHandle)</argsstring>
        <name>SetCurrentArena</name>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGLContextArenaHandle</ref> const &amp;</type>
          <declname>arenaHandle</declname>
        </param>
        <briefdescription>
<para>Sets the active arena to use when submitting commands. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used for management of resources tied to a GL context such as FBOs. The default arena is used if a valid handle isn&apos;t provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1aa52f69ba2bf6486728570758fb08ca31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API uint32_t</type>
        <definition>HGIGL_API uint32_t AcquireFramebuffer</definition>
        <argsstring>(HgiGraphicsCmdsDesc const &amp;desc, bool resolved=false)</argsstring>
        <name>AcquireFramebuffer</name>
        <param>
          <type><ref refid="struct_hgi_graphics_cmds_desc" kindref="compound">HgiGraphicsCmdsDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resolved</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns a framebuffer object id that is managed by the active arena. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1a6864f110b4163e3476b53cae40844cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void GarbageCollect</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollect</name>
        <briefdescription>
<para>Garbage collect resources in the active arena. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_device_1a349797d9889af0a519b2245decdc38c1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_context_arena" kindref="compound">HgiGLContextArena</ref> const  *</type>
        <definition>HgiGLContextArena const* _GetArena</definition>
        <argsstring>() const</argsstring>
        <name>_GetArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1a10157e4d6f43306c3f310d0e7d2fb602" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_context_arena" kindref="compound">HgiGLContextArena</ref> *</type>
        <definition>HgiGLContextArena* _GetArena</definition>
        <argsstring>()</argsstring>
        <name>_GetArena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1aa0f6ea5f9445c0530fcc151dcb4c1f69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> &amp;</type>
        <definition>HgiGLDevice&amp; operator=</definition>
        <argsstring>(const HgiGLDevice &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_device_1a60aa2e9901727d74d2e171782276804f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLDevice</definition>
        <argsstring>(const HgiGLDevice &amp;)=delete</argsstring>
        <name>HgiGLDevice</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="79" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hgi_g_l_device_1ae9eee0136bfb53ae095c1ed9c5a24957" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ofstream &amp;</type>
        <definition>std::ofstream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ofstream &amp;out, const HgiGLDevice &amp;dev)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> &amp;</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/device.h" line="81" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenGL implementation of GPU device. </para>
    </briefdescription>
    <detaileddescription>
<para>Note: <ref refid="class_hgi_g_l" kindref="compound">HgiGL</ref> does not concern itself with GL context management. See notes in <ref refid="_l_2hgi_8h_source" kindref="compound">hgiGL/hgi.h</ref> </para>
    </detaileddescription>
    <location file="pxr/imaging/hgiGL/device.h" line="46" column="1" bodyfile="pxr/imaging/hgiGL/device.h" bodystart="46" bodyend="88"/>
    <listofallmembers>
      <member refid="class_hgi_g_l_device_1abcb7901055e03a27282ba1c4b5400124" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>_activeArena</name></member>
      <member refid="class_hgi_g_l_device_1a0941a96ca85a771ec73fc900af69212b" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>_defaultArena</name></member>
      <member refid="class_hgi_g_l_device_1a349797d9889af0a519b2245decdc38c1" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>_GetArena</name></member>
      <member refid="class_hgi_g_l_device_1a10157e4d6f43306c3f310d0e7d2fb602" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>_GetArena</name></member>
      <member refid="class_hgi_g_l_device_1aa52f69ba2bf6486728570758fb08ca31" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>AcquireFramebuffer</name></member>
      <member refid="class_hgi_g_l_device_1a6864f110b4163e3476b53cae40844cf1" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>GarbageCollect</name></member>
      <member refid="class_hgi_g_l_device_1ac03ff5105c8abcf62ff276d5b0932497" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>HgiGLDevice</name></member>
      <member refid="class_hgi_g_l_device_1a60aa2e9901727d74d2e171782276804f" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>HgiGLDevice</name></member>
      <member refid="class_hgi_g_l_device_1ae9eee0136bfb53ae095c1ed9c5a24957" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_hgi_g_l_device_1aa0f6ea5f9445c0530fcc151dcb4c1f69" prot="private" virt="non-virtual"><scope>HgiGLDevice</scope><name>operator=</name></member>
      <member refid="class_hgi_g_l_device_1aaae0421b9550feaa38c2830247a18092" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>SetCurrentArena</name></member>
      <member refid="class_hgi_g_l_device_1a223950799b94891f959c95815c18be01" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>SubmitOps</name></member>
      <member refid="class_hgi_g_l_device_1aeb75f673023efc635e507d8371a43c48" prot="public" virt="non-virtual"><scope>HgiGLDevice</scope><name>~HgiGLDevice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
