<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_reference" kind="class" language="C++" prot="public">
    <compoundname>SdfReference</compoundname>
    <includes refid="reference_8h" local="no">reference.h</includes>
    <innerclass refid="struct_sdf_reference_1_1_identity_equal" prot="public">SdfReference::IdentityEqual</innerclass>
    <innerclass refid="struct_sdf_reference_1_1_identity_less_than" prot="public">SdfReference::IdentityLessThan</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_reference_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _assetPath</definition>
        <argsstring></argsstring>
        <name>_assetPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="223" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_reference_1a78a733f36374bd59db63f4cc98f9cc60" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _primPath</definition>
        <argsstring></argsstring>
        <name>_primPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="226" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_reference_1ae2351f5e7272eb6ef8a60cfa752ee6c3" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SdfLayerOffset _layerOffset</definition>
        <argsstring></argsstring>
        <name>_layerOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="229" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_reference_1ab74a773553dafc98dce36c9652da2adb" prot="private" static="no" mutable="no">
        <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>VtDictionary _customData</definition>
        <argsstring></argsstring>
        <name>_customData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="232" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_reference_1a17e8db1155139476dceb6ce31ef6c16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfReference</definition>
        <argsstring>(const std::string &amp;assetPath=std::string(), const SdfPath &amp;primPath=SdfPath(), const SdfLayerOffset &amp;layerOffset=SdfLayerOffset(), const VtDictionary &amp;customData=VtDictionary())</argsstring>
        <name>SdfReference</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
          <defval><ref refid="class_sdf_path" kindref="compound">SdfPath</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
          <defval><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>customData</declname>
          <defval><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref>()</defval>
        </param>
        <briefdescription>
<para>Creates a reference with all its meta data. </para>
        </briefdescription>
        <detaileddescription>
<para>The default reference is an internal reference to the default prim. See <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> for what characters are valid in <computeroutput>assetPath</computeroutput>. If <computeroutput>assetPath</computeroutput> contains invalid characters, issue an error and set this reference&apos;s asset path to the empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1abd3402ffb33a7f0a857d67f8ef8bfa24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetAssetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetPath</name>
        <briefdescription>
<para>Returns the asset path to the root layer of the referenced layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be empty in the case of an internal reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="92" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a597bda0a5ffcb1da8fb3710afb44c917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetAssetPath</definition>
        <argsstring>(const std::string &amp;assetPath)</argsstring>
        <name>SetAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Sets the asset path for the root layer of the referenced layer stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This may be set to an empty string to specify an internal reference. See <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> for what characters are valid in <computeroutput>assetPath</computeroutput>. If <computeroutput>assetPath</computeroutput> contains invalid characters, issue an error and set this reference&apos;s asset path to the empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="101" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1ae980898ec578c6f8082717ceac44a11e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>const SdfPath&amp; GetPrimPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimPath</name>
        <briefdescription>
<para>Returns the path of the referenced prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be empty if the referenced prim is the default prim specified in the referenced layer stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="111" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a485bc50d4241e8e59ac24c5d745436db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPrimPath</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>SetPrimPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Sets the path of the referenced prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This may be set to an empty path to specify a reference to the default prim in the referenced layer stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="119" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a1ceeb51413f68c10a2bd4efc1ba18d33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
        <definition>const SdfLayerOffset&amp; GetLayerOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerOffset</name>
        <briefdescription>
<para>Returns the layer offset associated with the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="125" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a4c2cb9b99ee841e1b24c0d0679383e56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetLayerOffset</definition>
        <argsstring>(const SdfLayerOffset &amp;layerOffset)</argsstring>
        <name>SetLayerOffset</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>layerOffset</declname>
        </param>
        <briefdescription>
<para>Sets a new layer offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="131" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a0e9c0edced421c779978fcd7fb2aa22d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
        <definition>const VtDictionary&amp; GetCustomData</definition>
        <argsstring>() const</argsstring>
        <name>GetCustomData</name>
        <briefdescription>
<para>Returns the custom data associated with the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="137" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a669172a17f97960550f9ace3c4c6bb56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetCustomData</definition>
        <argsstring>(const VtDictionary &amp;customData)</argsstring>
        <name>SetCustomData</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>customData</declname>
        </param>
        <briefdescription>
<para>Sets the custom data associated with the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="143" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a99305c665e0c209304be5d7ad769e7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetCustomData</definition>
        <argsstring>(const std::string &amp;name, const VtValue &amp;value)</argsstring>
        <name>SetCustomData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a custom data entry for the reference. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>value</emphasis> is empty, then this removes the given custom data entry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a4752e049e0aad6f7f3211673541158b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SwapCustomData</definition>
        <argsstring>(VtDictionary &amp;customData)</argsstring>
        <name>SwapCustomData</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>customData</declname>
        </param>
        <briefdescription>
<para>Swaps the custom data dictionary for this reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="154" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1ac9a0af9553b71a2fb2b9fb97f4589d1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsInternal</definition>
        <argsstring>() const</argsstring>
        <name>IsInternal</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> in the case of an internal reference. </para>
        </briefdescription>
        <detaileddescription>
<para>An internal reference is a reference with an empty asset path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1aedb6a4618556d1d94ab01d3fd02c9f1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether this reference equals <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a87f08e7a36c424ab6dbb37b69551293d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfReference::operator==(const SdfReference&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="177" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a1e2ab3f84b352452bf9750a20cf06166" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator&lt;</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether this reference is less than <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The meaning of less than is somewhat arbitrary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1a60bcba9a9a41f3ba5493ff0419295b88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfReference::operator&lt;(const SdfReference&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="186" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1ad8bff9f85bdedb86593e1ed60d9dda15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfReference::operator&lt;(const SdfReference&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="191" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_reference_1abbcf035fce3128cfec90cbee1e664dff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const SdfReference &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SdfReference::operator&lt;(const SdfReference&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="196" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="196" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_reference_1a608fb67349ad989572182e011371947b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfReference &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/reference.h" line="164" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="164" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a reference and all its meta data. </para>
    </briefdescription>
    <detaileddescription>
<para>A reference is expressed on a prim in a given layer and it identifies a prim in a layer stack. All opinions in the namespace hierarchy under the referenced prim will be composed with the opinions in the namespace hierarchy under the referencing prim.</para>
<para>The asset path specifies the layer stack being referenced. If this asset path is non-empty, this reference is considered an &apos;external&apos; reference to the layer stack rooted at the specified layer. If this is empty, this reference is considered an &apos;internal&apos; reference to the layer stack containing (but not necessarily rooted at) the layer where the reference is authored.</para>
<para>The prim path specifies the prim in the referenced layer stack from which opinions will be composed. If this prim path is empty, it will be considered a reference to the default prim specified in the root layer of the referenced layer stack <ndash/> see <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">SdfLayer::GetDefaultPrim</ref>.</para>
<para>The meta data for a reference is its layer offset and custom data. The layer offset is an affine transformation applied to all anim splines in the referenced prim&apos;s namespace hierarchy, see <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> for details. Custom data is for use by plugins or other non-tools supplied extensions that need to be able to store data associated with references. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/reference.h" line="75" column="1" bodyfile="pxr/usd/sdf/reference.h" bodystart="75" bodyend="233"/>
    <listofallmembers>
      <member refid="class_sdf_reference_1a992a1f143a767ed5ac21944bf9effc4b" prot="private" virt="non-virtual"><scope>SdfReference</scope><name>_assetPath</name></member>
      <member refid="class_sdf_reference_1ab74a773553dafc98dce36c9652da2adb" prot="private" virt="non-virtual"><scope>SdfReference</scope><name>_customData</name></member>
      <member refid="class_sdf_reference_1ae2351f5e7272eb6ef8a60cfa752ee6c3" prot="private" virt="non-virtual"><scope>SdfReference</scope><name>_layerOffset</name></member>
      <member refid="class_sdf_reference_1a78a733f36374bd59db63f4cc98f9cc60" prot="private" virt="non-virtual"><scope>SdfReference</scope><name>_primPath</name></member>
      <member refid="class_sdf_reference_1abd3402ffb33a7f0a857d67f8ef8bfa24" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>GetAssetPath</name></member>
      <member refid="class_sdf_reference_1a0e9c0edced421c779978fcd7fb2aa22d" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>GetCustomData</name></member>
      <member refid="class_sdf_reference_1a1ceeb51413f68c10a2bd4efc1ba18d33" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>GetLayerOffset</name></member>
      <member refid="class_sdf_reference_1ae980898ec578c6f8082717ceac44a11e" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>GetPrimPath</name></member>
      <member refid="class_sdf_reference_1a608fb67349ad989572182e011371947b" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>hash_value</name></member>
      <member refid="class_sdf_reference_1ac9a0af9553b71a2fb2b9fb97f4589d1d" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>IsInternal</name></member>
      <member refid="class_sdf_reference_1a87f08e7a36c424ab6dbb37b69551293d" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator!=</name></member>
      <member refid="class_sdf_reference_1a1e2ab3f84b352452bf9750a20cf06166" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_reference_1ad8bff9f85bdedb86593e1ed60d9dda15" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_reference_1aedb6a4618556d1d94ab01d3fd02c9f1f" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator==</name></member>
      <member refid="class_sdf_reference_1a60bcba9a9a41f3ba5493ff0419295b88" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_reference_1abbcf035fce3128cfec90cbee1e664dff" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_reference_1a17e8db1155139476dceb6ce31ef6c16c" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SdfReference</name></member>
      <member refid="class_sdf_reference_1a597bda0a5ffcb1da8fb3710afb44c917" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SetAssetPath</name></member>
      <member refid="class_sdf_reference_1a669172a17f97960550f9ace3c4c6bb56" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SetCustomData</name></member>
      <member refid="class_sdf_reference_1a99305c665e0c209304be5d7ad769e7e7" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SetCustomData</name></member>
      <member refid="class_sdf_reference_1a4c2cb9b99ee841e1b24c0d0679383e56" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SetLayerOffset</name></member>
      <member refid="class_sdf_reference_1a485bc50d4241e8e59ac24c5d745436db" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SetPrimPath</name></member>
      <member refid="class_sdf_reference_1a4752e049e0aad6f7f3211673541158b0" prot="public" virt="non-virtual"><scope>SdfReference</scope><name>SwapCustomData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
