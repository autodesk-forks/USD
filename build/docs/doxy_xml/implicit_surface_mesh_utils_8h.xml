<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="implicit_surface_mesh_utils_8h" kind="file" language="C++">
    <compoundname>implicitSurfaceMeshUtils.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_imaging_2usd_imaging_2api_8h" local="yes">pxr/usdImaging/usdImaging/api.h</includes>
    <includes refid="base_2vt_2types_8h" local="yes">pxr/base/vt/types.h</includes>
    <incdepgraph>
      <node id="271118">
        <label>atomic</label>
      </node>
      <node id="271080">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="271081" relation="include">
        </childnode>
        <childnode refid="271082" relation="include">
        </childnode>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271074" relation="include">
        </childnode>
        <childnode refid="271083" relation="include">
        </childnode>
      </node>
      <node id="271073">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271090">
        <label>limits</label>
      </node>
      <node id="271082">
        <label>cstdint</label>
      </node>
      <node id="271117">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271104">
        <label>cmath</label>
      </node>
      <node id="271102">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271096" relation="include">
        </childnode>
        <childnode refid="271103" relation="include">
        </childnode>
        <childnode refid="271080" relation="include">
        </childnode>
        <childnode refid="271105" relation="include">
        </childnode>
        <childnode refid="271106" relation="include">
        </childnode>
      </node>
      <node id="271116">
        <label>pxr/base/tf/pointerAndBits.h</label>
        <link refid="pointer_and_bits_8h_source"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271117" relation="include">
        </childnode>
        <childnode refid="271082" relation="include">
        </childnode>
        <childnode refid="271079" relation="include">
        </childnode>
        <childnode refid="271106" relation="include">
        </childnode>
      </node>
      <node id="271108">
        <label>string</label>
      </node>
      <node id="271095">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271073" relation="include">
        </childnode>
      </node>
      <node id="271109">
        <label>map</label>
      </node>
      <node id="271081">
        <label>cinttypes</label>
      </node>
      <node id="271071">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="271115">
        <label>unordered_set</label>
      </node>
      <node id="271076">
        <label>pxr/base/vt/api.h</label>
        <link refid="base_2vt_2api_8h_source"/>
        <childnode refid="271073" relation="include">
        </childnode>
      </node>
      <node id="271100">
        <label>stddef.h</label>
      </node>
      <node id="271096">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271078">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271086">
        <label>pxr/base/gf/ilmbase_half.h</label>
        <link refid="ilmbase__half_8h_source"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271087" relation="include">
        </childnode>
        <childnode refid="271088" relation="include">
        </childnode>
      </node>
      <node id="271085">
        <label>pxr/base/gf/half.h</label>
        <link refid="half_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271086" relation="include">
        </childnode>
        <childnode refid="271089" relation="include">
        </childnode>
        <childnode refid="271091" relation="include">
        </childnode>
      </node>
      <node id="271087">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="271073" relation="include">
        </childnode>
      </node>
      <node id="271083">
        <label>sys/types.h</label>
      </node>
      <node id="271092">
        <label>pxr/base/tf/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271093" relation="include">
        </childnode>
        <childnode refid="271094" relation="include">
        </childnode>
        <childnode refid="271101" relation="include">
        </childnode>
        <childnode refid="271114" relation="include">
        </childnode>
        <childnode refid="271116" relation="include">
        </childnode>
        <childnode refid="271118" relation="include">
        </childnode>
        <childnode refid="271088" relation="include">
        </childnode>
        <childnode refid="271108" relation="include">
        </childnode>
        <childnode refid="271113" relation="include">
        </childnode>
        <childnode refid="271111" relation="include">
        </childnode>
      </node>
      <node id="271072">
        <label>pxr/usdImaging/usdImaging/api.h</label>
        <link refid="usd_imaging_2usd_imaging_2api_8h_source"/>
        <childnode refid="271073" relation="include">
        </childnode>
      </node>
      <node id="271103">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271074" relation="include">
        </childnode>
        <childnode refid="271080" relation="include">
        </childnode>
        <childnode refid="271104" relation="include">
        </childnode>
      </node>
      <node id="271113">
        <label>vector</label>
      </node>
      <node id="271093">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="271073" relation="include">
        </childnode>
      </node>
      <node id="271089">
        <label>pxr/base/gf/ilmbase_halfLimits.h</label>
        <link refid="ilmbase__half_limits_8h_source"/>
        <childnode refid="271090" relation="include">
        </childnode>
        <childnode refid="271086" relation="include">
        </childnode>
      </node>
      <node id="271106">
        <label>utility</label>
      </node>
      <node id="271074">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="271077">
        <label>pxr/base/vt/traits.h</label>
        <link refid="vt_2traits_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271076" relation="include">
        </childnode>
        <childnode refid="271078" relation="include">
        </childnode>
        <childnode refid="271079" relation="include">
        </childnode>
      </node>
      <node id="271097">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271101">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271102" relation="include">
        </childnode>
        <childnode refid="271093" relation="include">
        </childnode>
        <childnode refid="271107" relation="include">
        </childnode>
        <childnode refid="271108" relation="include">
        </childnode>
        <childnode refid="271109" relation="include">
        </childnode>
        <childnode refid="271110" relation="include">
        </childnode>
        <childnode refid="271111" relation="include">
        </childnode>
        <childnode refid="271112" relation="include">
        </childnode>
        <childnode refid="271079" relation="include">
        </childnode>
        <childnode refid="271106" relation="include">
        </childnode>
        <childnode refid="271113" relation="include">
        </childnode>
      </node>
      <node id="271105">
        <label>math.h</label>
      </node>
      <node id="271088">
        <label>iosfwd</label>
      </node>
      <node id="271098">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271093" relation="include">
        </childnode>
        <childnode refid="271099" relation="include">
        </childnode>
        <childnode refid="271100" relation="include">
        </childnode>
      </node>
      <node id="271075">
        <label>pxr/base/vt/types.h</label>
        <link refid="base_2vt_2types_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271076" relation="include">
        </childnode>
        <childnode refid="271077" relation="include">
        </childnode>
        <childnode refid="271080" relation="include">
        </childnode>
        <childnode refid="271084" relation="include">
        </childnode>
        <childnode refid="271085" relation="include">
        </childnode>
        <childnode refid="271078" relation="include">
        </childnode>
        <childnode refid="271092" relation="include">
        </childnode>
        <childnode refid="271119" relation="include">
        </childnode>
        <childnode refid="271120" relation="include">
        </childnode>
        <childnode refid="271121" relation="include">
        </childnode>
        <childnode refid="271107" relation="include">
        </childnode>
        <childnode refid="271108" relation="include">
        </childnode>
      </node>
      <node id="271121">
        <label>cstddef</label>
      </node>
      <node id="271084">
        <label>pxr/base/gf/declare.h</label>
        <link refid="base_2gf_2declare_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
      </node>
      <node id="271070">
        <label>pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h</label>
        <link refid="implicit_surface_mesh_utils_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271072" relation="include">
        </childnode>
        <childnode refid="271075" relation="include">
        </childnode>
      </node>
      <node id="271094">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271095" relation="include">
        </childnode>
        <childnode refid="271093" relation="include">
        </childnode>
        <childnode refid="271096" relation="include">
        </childnode>
        <childnode refid="271097" relation="include">
        </childnode>
        <childnode refid="271098" relation="include">
        </childnode>
        <childnode refid="271100" relation="include">
        </childnode>
      </node>
      <node id="271120">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="271079">
        <label>type_traits</label>
      </node>
      <node id="271111">
        <label>set</label>
      </node>
      <node id="271099">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="271074" relation="include">
        </childnode>
      </node>
      <node id="271107">
        <label>cstring</label>
      </node>
      <node id="271091">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271079" relation="include">
        </childnode>
      </node>
      <node id="271110">
        <label>memory</label>
      </node>
      <node id="271114">
        <label>pxr/base/tf/hashset.h</label>
        <link refid="hashset_8h_source"/>
        <childnode refid="271071" relation="include">
        </childnode>
        <childnode refid="271074" relation="include">
        </childnode>
        <childnode refid="271115" relation="include">
        </childnode>
      </node>
      <node id="271112">
        <label>typeindex</label>
      </node>
      <node id="271119">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a919bf985c9c062c624146ea49d662419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetUnitSphereMeshTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitSphereMeshTopology</name>
        <briefdescription>
<para>Return a topology object for the canonical &quot;unit sphere&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all spheres. The indices refer to the points array returned by UsdImagingGetUnitSphereMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a80c249b8637577ceae002214f5f80459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const VtVec3fArray &amp;</type>
        <definition>USDIMAGING_API const VtVec3fArray&amp; UsdImagingGetUnitSphereMeshPoints</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitSphereMeshPoints</name>
        <briefdescription>
<para>Return an array of points for the canonical &quot;unit sphere&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a mesh describing a sphere that fits in a unit-sized bounding box, centered on the origin. Note that this means the diameter, not radius, is one unit!</para>
<para>These points are constructed once and are identical for all spheres, with topology provided by UsdImagingGetUnitSphereMeshTopology(). To represent spheres of a different size, use with the transform produced by the companion function UsdImagingGenerateSphereOrCubeTransform(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a2beeaf85cbf3c50f1aa4325a6a6933fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetUnitCubeMeshTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitCubeMeshTopology</name>
        <briefdescription>
<para>Return a topology object for the canonical &quot;unit cube&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all cubes. The indices refer to the points array returned by UsdImagingGetUnitCubeMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a86edd95e2098d08b2fc706efe3064814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const VtVec3fArray &amp;</type>
        <definition>USDIMAGING_API const VtVec3fArray&amp; UsdImagingGetUnitCubeMeshPoints</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitCubeMeshPoints</name>
        <briefdescription>
<para>Return an array of points for the canonical &quot;unit cube&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a mesh describing a cube with unit-length edges, centered on the origin.</para>
<para>These points are constructed once and are identical for all cubes, with topology provided by UsdImagingGetUnitCubeMeshTopology(). To represent cubes of a different size, use with the transform produced by the companion function UsdImagingGenerateSphereOrCubeTransform(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1ad03f1434b73c4220c555c494ee6c8bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetUnitConeMeshTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitConeMeshTopology</name>
        <briefdescription>
<para>Return a topology object for the canonical &quot;unit cone&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all cones. The indices refer to the points array returned by UsdImagingGetUnitConeMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1abddc0c928c12427e5c19c467b831ac19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const VtVec3fArray &amp;</type>
        <definition>USDIMAGING_API const VtVec3fArray&amp; UsdImagingGetUnitConeMeshPoints</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitConeMeshPoints</name>
        <briefdescription>
<para>Return an array of points for the canonical &quot;unit cone&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a mesh describing a cone that fits in a unit-sized bounding box, centered on the origin. Note that this means the diameter, not radius, is one unit! The circular-disk face of the cone lies in the XY plane, with the large end on the negative-Z side and the cone point on the positive-Z side.</para>
<para>These points are constructed once and are identical for all cones, with topology provided by UsdImagingGetUnitConeMeshTopology(). To represent cones of a different radius, height, or axis orientation, use with the transform produced by the companion function UsdImagingGenerateConeOrCylinderTransform(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1abc2b65b1aa97b99312ad2339d29647ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetUnitCylinderMeshTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitCylinderMeshTopology</name>
        <briefdescription>
<para>Return a topology object for the canonical &quot;unit cylinder&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all cylinders. The indices refer to the points array returned by UsdImagingGetUnitCylinderMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a74e9c18ef7e1dd42913e0427db4cfebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const VtVec3fArray &amp;</type>
        <definition>USDIMAGING_API const VtVec3fArray&amp; UsdImagingGetUnitCylinderMeshPoints</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetUnitCylinderMeshPoints</name>
        <briefdescription>
<para>Return an array of points for the canonical &quot;unit cylinder&quot; mesh. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a mesh describing a cylinder that fits in a unit-sized bounding box, centered on the origin. Note that this means the diameter, not radius, is one unit! The circular-disk face of the cone lies in the XY plane, with the height of the cylinder aligned along the Z axis.</para>
<para>These points are constructed once and are identical for all cylinders, with topology provided by UsdImagingGetUnitCylinderMeshTopology(). To represent cylinders of a different radius, height, or axis orientation, use with the transform produced by the companion function UsdImagingGenerateConeOrCylinderTransform(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1aa891e276da944dbce456e318d78d946e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetCapsuleMeshTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetCapsuleMeshTopology</name>
        <briefdescription>
<para>Return a topology object for use with all generated &quot;capsule&quot; meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all capsules. The indices refer to the points array returned by UsdImagingGenerateCapsuleMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a83744b150e80d30235171417f89d2549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API VtVec3fArray</type>
        <definition>USDIMAGING_API VtVec3fArray UsdImagingGenerateCapsuleMeshPoints</definition>
        <argsstring>(const double height, const double radius, const TfToken &amp;axis)</argsstring>
        <name>UsdImagingGenerateCapsuleMeshPoints</name>
        <param>
          <type>const double</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Generate an array of points describing a &quot;capsule&quot;: a cylinder with hemispherical caps on each end. </para>
        </briefdescription>
        <detaileddescription>
<para>The given height is the length of the cylinder portion exclusively, and the given radius applies to both cylinder and hemisphere components. The cylinder will be oriented along the given axis.</para>
<para>Unlike the other primitives in this library, it&apos;s not possible to use a constant set of points and effect radius and height adjustments by varying the transform matrix. This function will generate the points with the requested parameters, and no additional transform is required. The returned points are for use with the topology provided by UsdImagingGetCapsuleMeshTopology(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a7eacd19cd12955a3f0d845700ad29f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API const <ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref> &amp;</type>
        <definition>USDIMAGING_API const PxOsdMeshTopology&amp; UsdImagingGetPlaneTopology</definition>
        <argsstring>()</argsstring>
        <name>UsdImagingGetPlaneTopology</name>
        <briefdescription>
<para>Return a topology object for use with all generated &quot;Plane&quot; meshes. </para>
        </briefdescription>
        <detaileddescription>
<para>This is constructed once and is identical for all planes. The indices refer to the points array returned by UsdImagingGeneratePlaneMeshPoints(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a8c7ac2bc1a0aaa9c30a959a4523f7586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API VtVec3fArray</type>
        <definition>USDIMAGING_API VtVec3fArray UsdImagingGeneratePlaneMeshPoints</definition>
        <argsstring>(const double width, const double length, const TfToken &amp;axis)</argsstring>
        <name>UsdImagingGeneratePlaneMeshPoints</name>
        <param>
          <type>const double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Generate an array of points describing a &quot;plane&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a mesh describing a double-sided plane aligned to an axis, with a width and length along the other cardinal axes.</para>
<para>Unlike most other primitives in this library, it&apos;s not possible to use a constant set of points and effect width and length adjustments by varying the transform matrix. This function will generate the points with the requested parameters, and no additional transform is required. The returned points are for use with the topology provided by UsdImagingGetPlaneTopology(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1a0ef7b94611c7d5dfe8789c72fc5f4e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>USDIMAGING_API GfMatrix4d UsdImagingGenerateSphereOrCubeTransform</definition>
        <argsstring>(const double size)</argsstring>
        <name>UsdImagingGenerateSphereOrCubeTransform</name>
        <param>
          <type>const double</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Generate a transform to inflate the &quot;unit sphere&quot; or &quot;unit cube&quot; mesh to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a uniform scale matrix. Note that the parameter is the net scale, so when using with the &quot;unit sphere&quot; mesh be sure to pass the desired diameter (not radius)! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="implicit_surface_mesh_utils_8h_1ab70e70f9db10d4200ea85aff6f057f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDIMAGING_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>USDIMAGING_API GfMatrix4d UsdImagingGenerateConeOrCylinderTransform</definition>
        <argsstring>(const double height, const double radius, const TfToken &amp;axis)</argsstring>
        <name>UsdImagingGenerateConeOrCylinderTransform</name>
        <param>
          <type>const double</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Generate a transform for use with the &quot;unit cone&quot; or &quot;unit cylinder&quot; meshes, which transforms the mesh to have the specified height and radius, while aligned along the specified axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a combination of rotation and nonuniform scales. This function is for use only with the cone and cylinder primitives, hence its parameterization by radius; the net scale for the radial axes will be twice the given value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h" line="199" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_IMAGING_USD_IMAGING_IMPLICIT_SURFACE_MESH_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_IMAGING_USD_IMAGING_IMPLICIT_SURFACE_MESH_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usdImaging/usdImaging/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2vt_2types_8h" kindref="compound">pxr/base/vt/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_token" kindref="compound">TfToken</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">UsdImagingGetUnitSphereMeshTopology();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VtVec3fArray&amp;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">UsdImagingGetUnitSphereMeshPoints();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">UsdImagingGetUnitCubeMeshTopology();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VtVec3fArray&amp;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">UsdImagingGetUnitCubeMeshPoints();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">UsdImagingGetUnitConeMeshTopology();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VtVec3fArray&amp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">UsdImagingGetUnitConeMeshPoints();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cylinder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">UsdImagingGetUnitCylinderMeshTopology();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VtVec3fArray&amp;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">UsdImagingGetUnitCylinderMeshPoints();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Capsule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">UsdImagingGetCapsuleMeshTopology();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="147"><highlight class="normal">VtVec3fArray</highlight></codeline>
<codeline lineno="148"><highlight class="normal">UsdImagingGenerateCapsuleMeshPoints(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref>&amp;<sp/>axis);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_px_osd_mesh_topology" kindref="compound">PxOsdMeshTopology</ref>&amp;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">UsdImagingGetPlaneTopology();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="173"><highlight class="normal">VtVec3fArray</highlight></codeline>
<codeline lineno="174"><highlight class="normal">UsdImagingGeneratePlaneMeshPoints(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref>&amp;<sp/>axis);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></highlight></codeline>
<codeline lineno="188"><highlight class="normal">UsdImagingGenerateSphereOrCubeTransform(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_tf_token_1a259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">USDIMAGING_API</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></highlight></codeline>
<codeline lineno="199"><highlight class="normal">UsdImagingGenerateConeOrCylinderTransform(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref>&amp;<sp/>axis);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_IMAGING_USD_IMAGING_IMPLICIT_SURFACE_MESH_UTILS_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usdImaging/usdImaging/implicitSurfaceMeshUtils.h"/>
  </compounddef>
</doxygen>
