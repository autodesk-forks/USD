<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_safe_output_file" kind="class" language="C++" prot="public">
    <compoundname>TfSafeOutputFile</compoundname>
    <includes refid="safe_output_file_8h" local="no">safeOutputFile.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_safe_output_file_1ab6ff60a43f6b3e9326c5079f40d27065" prot="private" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* _file</definition>
        <argsstring></argsstring>
        <name>_file</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="103" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_safe_output_file_1ae50cb114895477e51e55bfc0e54c85cb" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _targetFileName</definition>
        <argsstring></argsstring>
        <name>_targetFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="104" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_safe_output_file_1a2bf0768c71bfbae4cd88ed513800ee70" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _tempFileName</definition>
        <argsstring></argsstring>
        <name>_tempFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="105" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_safe_output_file_1a3def99c2f6fe54779781bdb63cddbd0d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfSafeOutputFile</definition>
        <argsstring>(TfSafeOutputFile const &amp;)=delete</argsstring>
        <name>TfSafeOutputFile</name>
        <param>
          <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1aebb720f506e3943cba943c64de16288c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> &amp;</type>
        <definition>TfSafeOutputFile&amp; operator=</definition>
        <argsstring>(TfSafeOutputFile const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="52" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_safe_output_file_1acd501de78c2fcfd9c2b363fff0387c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfSafeOutputFile</definition>
        <argsstring>()=default</argsstring>
        <name>TfSafeOutputFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1add308153101a26b1e69c36b05cc5345b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfSafeOutputFile</definition>
        <argsstring>(TfSafeOutputFile &amp;&amp;other)</argsstring>
        <name>TfSafeOutputFile</name>
        <param>
          <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="56" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a3eea2e7280bcc9e43d8d0e6a5edaa935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> &amp;</type>
        <definition>TfSafeOutputFile&amp; operator=</definition>
        <argsstring>(TfSafeOutputFile &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="62" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1ae85911a044edf7caf6e1d7f2edc14648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API ~TfSafeOutputFile</definition>
        <argsstring>()</argsstring>
        <name>~TfSafeOutputFile</name>
        <briefdescription>
<para>Destructor invokes <ref refid="class_tf_safe_output_file_1ac8a869db22014e241c65bbd93d2941fb" kindref="member">Close()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1ac8a869db22014e241c65bbd93d2941fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription>
<para>Close the file. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file was opened with <ref refid="class_tf_safe_output_file_1a41eb5880471722105ee00682efda47b8" kindref="member">Replace()</ref>, rename the temporary file over the target file to replace it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a7486b0a858355b25b6f0de1079ab44c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void Discard</definition>
        <argsstring>()</argsstring>
        <name>Discard</name>
        <briefdescription>
<para>Close the file. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file was opened with <ref refid="class_tf_safe_output_file_1a41eb5880471722105ee00682efda47b8" kindref="member">Replace()</ref>, the temporary file is removed and not renamed over the target file. It is an error to call this for files opened for Update. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a6933370337e2e09bf72c3471173efcc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Return the opened FILE *. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="91" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a10eb8d1ced7501e12a8c1868edd10cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API FILE *</type>
        <definition>TF_API FILE* ReleaseUpdatedFile</definition>
        <argsstring>()</argsstring>
        <name>ReleaseUpdatedFile</name>
        <briefdescription>
<para>If the underlying file was opened by <ref refid="class_tf_safe_output_file_1a44414ad05cd0bec0d4871e97c42a72f6" kindref="member">Update()</ref>, return it. </para>
        </briefdescription>
        <detaileddescription>
<para>The caller takes responsibility for closing the file later. It is an error to call this for files opened for Replace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a0bb06aac7608afc13edf5a8489255b1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool IsOpenForUpdate</definition>
        <argsstring>() const</argsstring>
        <name>IsOpenForUpdate</name>
        <briefdescription>
<para>Return true if this <ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref> was created by a call to <ref refid="class_tf_safe_output_file_1a44414ad05cd0bec0d4871e97c42a72f6" kindref="member">Update()</ref>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_tf_safe_output_file_1a44414ad05cd0bec0d4871e97c42a72f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref></type>
        <definition>static TF_API TfSafeOutputFile Update</definition>
        <argsstring>(std::string const &amp;fileName)</argsstring>
        <name>Update</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Open <computeroutput>fileName</computeroutput> for update (&quot;r+&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_safe_output_file_1a41eb5880471722105ee00682efda47b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_safe_output_file" kindref="compound">TfSafeOutputFile</ref></type>
        <definition>static TF_API TfSafeOutputFile Replace</definition>
        <argsstring>(std::string const &amp;fileName)</argsstring>
        <name>Replace</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Arrange for <computeroutput>fileName</computeroutput> to be replaced. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a sibling temporary file and open that for writing. When <ref refid="class_tf_safe_output_file_1ac8a869db22014e241c65bbd93d2941fb" kindref="member">Close()</ref> is called (or the destructor is run) close the temporary file and rename it over <computeroutput>fileName</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/safeOutputFile.h" line="79" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Opens a file for output, either for update &quot;r+&quot; or to completely replace &quot;w+&quot;. </para>
    </briefdescription>
    <detaileddescription>
<para>In the case of complete replacement, create a sibling temporary file to write to instead. When writing is complete, rename the temporary file over the target file. This provides some safety to other processes reading the existing file (at least on unix-like OSs). They will continue to see the existing contents of the old file. If we overwrote the file itself, then those other processes would see undefined, possibly partially updated content. </para>
    </detaileddescription>
    <location file="pxr/base/tf/safeOutputFile.h" line="50" column="1" bodyfile="pxr/base/tf/safeOutputFile.h" bodystart="49" bodyend="106"/>
    <listofallmembers>
      <member refid="class_tf_safe_output_file_1ab6ff60a43f6b3e9326c5079f40d27065" prot="private" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>_file</name></member>
      <member refid="class_tf_safe_output_file_1ae50cb114895477e51e55bfc0e54c85cb" prot="private" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>_targetFileName</name></member>
      <member refid="class_tf_safe_output_file_1a2bf0768c71bfbae4cd88ed513800ee70" prot="private" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>_tempFileName</name></member>
      <member refid="class_tf_safe_output_file_1ac8a869db22014e241c65bbd93d2941fb" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>Close</name></member>
      <member refid="class_tf_safe_output_file_1a7486b0a858355b25b6f0de1079ab44c1" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>Discard</name></member>
      <member refid="class_tf_safe_output_file_1a6933370337e2e09bf72c3471173efcc0" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>Get</name></member>
      <member refid="class_tf_safe_output_file_1a0bb06aac7608afc13edf5a8489255b1d" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>IsOpenForUpdate</name></member>
      <member refid="class_tf_safe_output_file_1aebb720f506e3943cba943c64de16288c" prot="private" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>operator=</name></member>
      <member refid="class_tf_safe_output_file_1a3eea2e7280bcc9e43d8d0e6a5edaa935" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>operator=</name></member>
      <member refid="class_tf_safe_output_file_1a10eb8d1ced7501e12a8c1868edd10cf9" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>ReleaseUpdatedFile</name></member>
      <member refid="class_tf_safe_output_file_1a41eb5880471722105ee00682efda47b8" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>Replace</name></member>
      <member refid="class_tf_safe_output_file_1a3def99c2f6fe54779781bdb63cddbd0d" prot="private" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>TfSafeOutputFile</name></member>
      <member refid="class_tf_safe_output_file_1acd501de78c2fcfd9c2b363fff0387c95" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>TfSafeOutputFile</name></member>
      <member refid="class_tf_safe_output_file_1add308153101a26b1e69c36b05cc5345b" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>TfSafeOutputFile</name></member>
      <member refid="class_tf_safe_output_file_1a44414ad05cd0bec0d4871e97c42a72f6" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>Update</name></member>
      <member refid="class_tf_safe_output_file_1ae85911a044edf7caf6e1d7f2edc14648" prot="public" virt="non-virtual"><scope>TfSafeOutputFile</scope><name>~TfSafeOutputFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
