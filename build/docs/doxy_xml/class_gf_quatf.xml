<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_quatf" kind="class" language="C++" prot="public">
    <compoundname>GfQuatf</compoundname>
    <includes refid="quatf_8h" local="no">quatf.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_quatf_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" static="no">
        <type>float</type>
        <definition>typedef float ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="62" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_quatf_1a931a522806d2a81eaa847bf8884d3396" prot="public" static="no">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>typedef GfVec3f ImaginaryType</definition>
        <argsstring></argsstring>
        <name>ImaginaryType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="63" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_quatf_1ad292e00604ae36bb641f1de8e4234081" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f _imaginary</definition>
        <argsstring></argsstring>
        <name>_imaginary</name>
        <briefdescription>
<para>Imaginary part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="256" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_quatf_1a15fed92f60152628d0da2eb30bd1b07a" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
<para>Real part. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="259" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_quatf_1aab7198ae11818611a3f50b0293bc63c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatf</definition>
        <argsstring>()</argsstring>
        <name>GfQuatf</name>
        <briefdescription>
<para>Default constructor leaves the quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="66" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a3c6420796274b82f74d2fc466a7c7d6e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatf</definition>
        <argsstring>(float realVal)</argsstring>
        <name>GfQuatf</name>
        <param>
          <type>float</type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>Initialize the real coefficient to <computeroutput>realVal</computeroutput> and the imaginary coefficients to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically must be normalized, reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="75" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a781cffeee14aa3ba3f89de7d6df5a035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatf</definition>
        <argsstring>(float real, float i, float j, float k)</argsstring>
        <name>GfQuatf</name>
        <param>
          <type>float</type>
          <declname>real</declname>
        </param>
        <param>
          <type>float</type>
          <declname>i</declname>
        </param>
        <param>
          <type>float</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Initialize the real and imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="78" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1af73a2d912f01f8a605e7e645b154a7d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfQuatf</definition>
        <argsstring>(float real, const GfVec3f &amp;imaginary)</argsstring>
        <name>GfQuatf</name>
        <param>
          <type>float</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>Initialize the real and imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="84" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a117ac488ebac22c748a22ba4773b219c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfQuatf</definition>
        <argsstring>(class GfQuatd const &amp;other)</argsstring>
        <name>GfQuatf</name>
        <param>
          <type>class <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1ab59634623006394d602c307cfa6a2827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfQuatf</definition>
        <argsstring>(class GfQuath const &amp;other)</argsstring>
        <name>GfQuatf</name>
        <param>
          <type>class <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_quath" kindref="compound">GfQuath</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a758dedf91557459765485dd30189b34a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Return the real coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="105" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a5452433e1013c564e25a21218d2457e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(float real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>float</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Set the real coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="108" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a122b23f45742c90ac98791410fc50ce8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>const GfVec3f&amp; GetImaginary</definition>
        <argsstring>() const</argsstring>
        <name>GetImaginary</name>
        <briefdescription>
<para>Return the imaginary coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="111" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1accd6510ce4a99cc285a99c821f7cf9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImaginary</definition>
        <argsstring>(const GfVec3f &amp;imaginary)</argsstring>
        <name>SetImaginary</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>imaginary</declname>
        </param>
        <briefdescription>
<para>Set the imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="114" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a5a2ccb37ed494773f92711d597a59c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImaginary</definition>
        <argsstring>(float i, float j, float k)</argsstring>
        <name>SetImaginary</name>
        <param>
          <type>float</type>
          <declname>i</declname>
        </param>
        <param>
          <type>float</type>
          <declname>j</declname>
        </param>
        <param>
          <type>float</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Set the imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="119" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a71b1c47012e0b48dcddfc2bd1bb3915f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Return geometric length of this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="124" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1acb602eee9ceab99f746d5e048acddb20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf GetNormalized</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>length of this quaternion is smaller than <computeroutput>eps</computeroutput>, return the identity quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="129" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a27cbab402bae3237efeb1013d581ed68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float Normalize</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this quaternion in place to unit length, returning the length before normalization. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1abdd0a291055d17f03e41717c28974c3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf GetConjugate</definition>
        <argsstring>() const</argsstring>
        <name>GetConjugate</name>
        <briefdescription>
<para>Return this quaternion&apos;s conjugate, which is the quaternion with the same real coefficient and negated imaginary coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="143" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1ab479d2941a2018a716a3b160415e52cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Return this quaternion&apos;s inverse, or reciprocal. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the quaternion&apos;s conjugate divided by it&apos;s squared length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="149" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1aa135173ee0051281bad20ba97b2a3255" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f Transform</definition>
        <argsstring>(const GfVec3f &amp;point) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Transform the <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> point. </para>
        </briefdescription>
        <detaileddescription>
<para>If the quaternion is normalized, the transformation is a rotation. Given a <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> q, q.Transform(point) is equivalent to: <verbatim>(q * GfQuatf(0, point) * q.GetInverse()).GetImaginary()
</verbatim></para>
<para>but is more efficient. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1af235feff7327fecad0f27f1a3babb723" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Component-wise negation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="169" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a1a5aff21c9c9f263afb2a5dc42e51b05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfQuatf &amp;q) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="175" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1af5977e738d92d21aa8900b9bc7bffc71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const GfQuatf &amp;q) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and imaginary parts must match exactly for quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="182" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a027ba683465864864086876ddce2868a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>GF_API GfQuatf&amp; operator *=</definition>
        <argsstring>(const GfQuatf &amp;q)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Post-multiply quaternion <computeroutput>q</computeroutput> into this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1aa600b4729bf5c009e36f2c48266e76c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>GfQuatf&amp; operator *=</definition>
        <argsstring>(float s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiply this quaternion&apos;s coefficients by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="191" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a6502989ef917b14ebfbc8d424aaf15e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>GfQuatf&amp; operator/=</definition>
        <argsstring>(float s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Divide this quaternion&apos;s coefficients by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="198" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1aa6f048e4f75efc003eaaf7be1e79f8df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>GfQuatf&amp; operator+=</definition>
        <argsstring>(const GfQuatf &amp;q)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Add quaternion <computeroutput>q</computeroutput> to this quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="205" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1a11a9217696534643e233ffdc839a344f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>GfQuatf&amp; operator -=</definition>
        <argsstring>(const GfQuatf &amp;q)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="212" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="212" bodyend="216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_quatf_1aa279689e51d163144703fb706a7cf91c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>static GfQuatf GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Return the zero quaternion, with real coefficient 0 and an imaginary coefficients all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="98" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_quatf_1af7361af510ca71bf1aa5f6ba99f0e46a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>static GfQuatf GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Return the identity quaternion, with real coefficient 1 and an imaginary coefficients all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="102" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="102" bodyend="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_quatf_1a17c33387a57aa78bd648792ee416e846" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfQuatf &amp;q)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="164" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1adb552bf0bb311cdb871f2c1fdf4af7b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator+</definition>
        <argsstring>(const GfQuatf &amp;q1, const GfQuatf &amp;q2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="220" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1a3cc231d869a360702f44a9517ae80dcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator -</definition>
        <argsstring>(const GfQuatf &amp;q1, const GfQuatf &amp;q2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="226" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1a73b2fb69d182f9edb51e8bebd0849aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator *</definition>
        <argsstring>(const GfQuatf &amp;q1, const GfQuatf &amp;q2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternions <computeroutput>q1</computeroutput> and <computeroutput>q2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="232" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1a7bbf6d69c1b5b13c396c5bff3fcf67ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator *</definition>
        <argsstring>(const GfQuatf &amp;q, float s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="238" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1ad6fadadb778a0ad2664a58d973016e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator *</definition>
        <argsstring>(float s, const GfQuatf &amp;q)</argsstring>
        <name>operator *</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="244" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_quatf_1ada9f6c4517764710a164ec36ce06156d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf operator/</definition>
        <argsstring>(const GfQuatf &amp;q, float s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of quaternion <computeroutput>q</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="250" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="250" bodyend="252"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_quatf_1ae4ef32b9a5792cde5314814d990e6177" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float _GetLengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>_GetLengthSquared</name>
        <briefdescription>
<para>Returns the square of the length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="263" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="263" bodyend="265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: a quaternion, a complex number with a real coefficient and three imaginary coefficients, stored as a 3-vector. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/gf/quatf.h" line="60" column="1" bodyfile="pxr/base/gf/quatf.h" bodystart="59" bodyend="266"/>
    <listofallmembers>
      <member refid="class_gf_quatf_1ae4ef32b9a5792cde5314814d990e6177" prot="private" virt="non-virtual"><scope>GfQuatf</scope><name>_GetLengthSquared</name></member>
      <member refid="class_gf_quatf_1ad292e00604ae36bb641f1de8e4234081" prot="private" virt="non-virtual"><scope>GfQuatf</scope><name>_imaginary</name></member>
      <member refid="class_gf_quatf_1a15fed92f60152628d0da2eb30bd1b07a" prot="private" virt="non-virtual"><scope>GfQuatf</scope><name>_real</name></member>
      <member refid="class_gf_quatf_1abdd0a291055d17f03e41717c28974c3a" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetConjugate</name></member>
      <member refid="class_gf_quatf_1af7361af510ca71bf1aa5f6ba99f0e46a" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetIdentity</name></member>
      <member refid="class_gf_quatf_1a122b23f45742c90ac98791410fc50ce8" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetImaginary</name></member>
      <member refid="class_gf_quatf_1ab479d2941a2018a716a3b160415e52cc" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetInverse</name></member>
      <member refid="class_gf_quatf_1a71b1c47012e0b48dcddfc2bd1bb3915f" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetLength</name></member>
      <member refid="class_gf_quatf_1acb602eee9ceab99f746d5e048acddb20" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetNormalized</name></member>
      <member refid="class_gf_quatf_1a758dedf91557459765485dd30189b34a" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetReal</name></member>
      <member refid="class_gf_quatf_1aa279689e51d163144703fb706a7cf91c" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GetZero</name></member>
      <member refid="class_gf_quatf_1aab7198ae11818611a3f50b0293bc63c2" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1a3c6420796274b82f74d2fc466a7c7d6e" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1a781cffeee14aa3ba3f89de7d6df5a035" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1af73a2d912f01f8a605e7e645b154a7d7" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1a117ac488ebac22c748a22ba4773b219c" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1ab59634623006394d602c307cfa6a2827" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>GfQuatf</name></member>
      <member refid="class_gf_quatf_1a17c33387a57aa78bd648792ee416e846" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>hash_value</name></member>
      <member refid="class_gf_quatf_1a931a522806d2a81eaa847bf8884d3396" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>ImaginaryType</name></member>
      <member refid="class_gf_quatf_1a27cbab402bae3237efeb1013d581ed68" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>Normalize</name></member>
      <member refid="class_gf_quatf_1a73b2fb69d182f9edb51e8bebd0849aa5" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_quatf_1a7bbf6d69c1b5b13c396c5bff3fcf67ae" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_quatf_1ad6fadadb778a0ad2664a58d973016e43" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_quatf_1a027ba683465864864086876ddce2868a" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator *=</name></member>
      <member refid="class_gf_quatf_1aa600b4729bf5c009e36f2c48266e76c8" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator *=</name></member>
      <member refid="class_gf_quatf_1a3cc231d869a360702f44a9517ae80dcf" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator -</name></member>
      <member refid="class_gf_quatf_1a11a9217696534643e233ffdc839a344f" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator -=</name></member>
      <member refid="class_gf_quatf_1af5977e738d92d21aa8900b9bc7bffc71" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator!=</name></member>
      <member refid="class_gf_quatf_1adb552bf0bb311cdb871f2c1fdf4af7b6" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator+</name></member>
      <member refid="class_gf_quatf_1aa6f048e4f75efc003eaaf7be1e79f8df" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator+=</name></member>
      <member refid="class_gf_quatf_1af235feff7327fecad0f27f1a3babb723" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator-</name></member>
      <member refid="class_gf_quatf_1ada9f6c4517764710a164ec36ce06156d" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator/</name></member>
      <member refid="class_gf_quatf_1a6502989ef917b14ebfbc8d424aaf15e9" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator/=</name></member>
      <member refid="class_gf_quatf_1a1a5aff21c9c9f263afb2a5dc42e51b05" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>operator==</name></member>
      <member refid="class_gf_quatf_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>ScalarType</name></member>
      <member refid="class_gf_quatf_1accd6510ce4a99cc285a99c821f7cf9f0" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>SetImaginary</name></member>
      <member refid="class_gf_quatf_1a5a2ccb37ed494773f92711d597a59c76" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>SetImaginary</name></member>
      <member refid="class_gf_quatf_1a5452433e1013c564e25a21218d2457e2" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>SetReal</name></member>
      <member refid="class_gf_quatf_1aa135173ee0051281bad20ba97b2a3255" prot="public" virt="non-virtual"><scope>GfQuatf</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
