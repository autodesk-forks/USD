<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_utils_stage_cache" kind="class" language="C++" prot="public">
    <compoundname>UsdUtilsStageCache</compoundname>
    <includes refid="tils_2stage_cache_8h" local="no">stageCache.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_utils_stage_cache_1a8a9713bc7f568ecb9af8d3eacb2dfd88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUTILS_API <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
        <definition>static USDUTILS_API UsdStageCache&amp; Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Returns the singleton stage cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUtils/stageCache.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_utils_stage_cache_1a39a3157281d8b95c25cae1c302858703" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUTILS_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static USDUTILS_API SdfLayerRefPtr GetSessionLayerForVariantSelections</definition>
        <argsstring>(const TfToken &amp;modelName, const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;variantSelections)</argsstring>
        <name>GetSessionLayerForVariantSelections</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>modelName</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;</type>
          <declname>variantSelections</declname>
        </param>
        <briefdescription>
<para>Given variant selections as a vector of pairs (vector in case order matters to the client), constructs a session layer with overs on the given root modelName with the variant selections, or returns a cached session layer with those opinions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUtils/stageCache.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="class_usd_utils_stage_cache" kindref="compound">UsdUtilsStageCache</ref> class provides a simple interface for handling a singleton usd stage cache for use by all USD clients. </para>
    </briefdescription>
    <detaileddescription>
<para>This way code from any location can make use of the same cache to maximize stage reuse. </para>
    </detaileddescription>
    <location file="pxr/usd/usdUtils/stageCache.h" line="51" column="1" bodyfile="pxr/usd/usdUtils/stageCache.h" bodystart="51" bodyend="66"/>
    <listofallmembers>
      <member refid="class_usd_utils_stage_cache_1a8a9713bc7f568ecb9af8d3eacb2dfd88" prot="public" virt="non-virtual"><scope>UsdUtilsStageCache</scope><name>Get</name></member>
      <member refid="class_usd_utils_stage_cache_1a39a3157281d8b95c25cae1c302858703" prot="public" virt="non-virtual"><scope>UsdUtilsStageCache</scope><name>GetSessionLayerForVariantSelections</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
