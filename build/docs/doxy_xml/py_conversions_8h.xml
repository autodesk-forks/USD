<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="py_conversions_8h" kind="file" language="C++">
    <compoundname>pyConversions.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_2usd_2api_8h" local="yes">pxr/usd/usd/api.h</includes>
    <includes refid="py_obj_wrapper_8h" local="yes">pxr/base/tf/pyObjWrapper.h</includes>
    <incdepgraph>
      <node id="202644">
        <label>locale</label>
      </node>
      <node id="202638">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="202639" relation="include">
        </childnode>
      </node>
      <node id="202646">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="202642">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="202639" relation="include">
        </childnode>
      </node>
      <node id="202637">
        <label>pxr/usd/usd/api.h</label>
        <link refid="usd_2usd_2api_8h_source"/>
        <childnode refid="202638" relation="include">
        </childnode>
      </node>
      <node id="202636">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="202635">
        <label>pxr/usd/usd/pyConversions.h</label>
        <link refid="py_conversions_8h"/>
        <childnode refid="202636" relation="include">
        </childnode>
        <childnode refid="202637" relation="include">
        </childnode>
        <childnode refid="202640" relation="include">
        </childnode>
      </node>
      <node id="202643">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="202642" relation="include">
        </childnode>
        <childnode refid="202644" relation="include">
        </childnode>
        <childnode refid="202645" relation="include">
        </childnode>
      </node>
      <node id="202648">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="202647">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="202641">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="202638" relation="include">
        </childnode>
      </node>
      <node id="202639">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="202649">
        <label>iosfwd</label>
      </node>
      <node id="202645">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="202640">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="202636" relation="include">
        </childnode>
        <childnode refid="202641" relation="include">
        </childnode>
        <childnode refid="202642" relation="include">
        </childnode>
        <childnode refid="202643" relation="include">
        </childnode>
        <childnode refid="202646" relation="include">
        </childnode>
        <childnode refid="202647" relation="include">
        </childnode>
        <childnode refid="202648" relation="include">
        </childnode>
        <childnode refid="202649" relation="include">
        </childnode>
        <childnode refid="202650" relation="include">
        </childnode>
      </node>
      <node id="202650">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="py_conversions_8h_1a621846b2f04708f5025874ca51aea3ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></type>
        <definition>USD_API TfPyObjWrapper UsdVtValueToPython</definition>
        <argsstring>(const VtValue &amp;value)</argsstring>
        <name>UsdVtValueToPython</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/pyConversions.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="py_conversions_8h_1ab1eb7c4fe7e9d0235c0372270945d6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>USD_API VtValue UsdPythonToSdfType</definition>
        <argsstring>(TfPyObjWrapper pyVal, SdfValueTypeName const &amp;targetType)</argsstring>
        <name>UsdPythonToSdfType</name>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></type>
          <declname>pyVal</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> const &amp;</type>
          <declname>targetType</declname>
        </param>
        <briefdescription>
<para>Helper for converting a python value to the target Usd/Sdf type, if possible. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes <ref refid="class_vt_value_1a1f73b97ac0f17c57eadc798050070c85" kindref="member">VtValue::CastToTypeOf()</ref> to do the conversion, if required. This internally handles python buffers (e.g. numpy) -&gt; <ref refid="class_vt_array" kindref="compound">VtArray</ref> and some python tuple/list -&gt; <ref refid="class_vt_array" kindref="compound">VtArray</ref> conversions. If conversion fails, returns a <ref refid="class_vt_value" kindref="compound">VtValue</ref> extracted from the pyVal, which may produce a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a python object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/pyConversions.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="py_conversions_8h_1a24c91c92d70b911c6219a3baff3bf509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool UsdPythonToMetadataValue</definition>
        <argsstring>(const TfToken &amp;key, const TfToken &amp;keyPath, TfPyObjWrapper pyVal, VtValue *result)</argsstring>
        <name>UsdPythonToMetadataValue</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref></type>
          <declname>pyVal</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Helper for converting a python value to a metadata value for metadata known to the <ref refid="class_sdf_schema" kindref="compound">SdfSchema</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a coding error if <computeroutput>key</computeroutput> is unknown to the <ref refid="class_sdf_schema" kindref="compound">SdfSchema</ref>.</para>
<para>For dictionary-valued metadata, <computeroutput>keyPath</computeroutput> may be specified as the path in the dictionary we are targeting, so that if the dictionary was registered with a fallback for that dictionary subcomponent, we will convert appropriately to its type.</para>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> on successful conversion, which can happen even if the converted <computeroutput>result</computeroutput> is an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/pyConversions.h" line="64" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_USD_PY_CONVERSIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_USD_PY_CONVERSIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/usd/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyObjWrapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vt_value" kindref="compound">VtValue</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_token" kindref="compound">TfToken</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XXX:<sp/>DEPRECATED.<sp/><sp/>This<sp/>function<sp/>does<sp/>nothing<sp/>except<sp/>convert<sp/>\p<sp/>value<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>python.<sp/><sp/>Do<sp/>not<sp/>call,<sp/>it<sp/>will<sp/>be<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">USD_API</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/>UsdVtValueToPython(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>&amp;value);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">USD_API</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>UsdPythonToSdfType(<ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/>pyVal,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;targetType);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">USD_API</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UsdPythonToMetadataValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref><sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref><sp/>&amp;keyPath,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/>pyVal,<sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>*result);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_USD_PY_CONVERSIONS_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usd/usd/pyConversions.h"/>
  </compounddef>
</doxygen>
