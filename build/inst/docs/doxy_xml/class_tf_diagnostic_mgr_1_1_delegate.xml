<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_diagnostic_mgr_1_1_delegate" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>TfDiagnosticMgr::Delegate</compoundname>
    <derivedcompoundref refid="class_usd_utils_coalescing_diagnostic_delegate" prot="public" virt="non-virtual">UsdUtilsCoalescingDiagnosticDelegate</derivedcompoundref>
    <derivedcompoundref refid="class_usd_utils_conditional_abort_diagnostic_delegate" prot="public" virt="non-virtual">UsdUtilsConditionalAbortDiagnosticDelegate</derivedcompoundref>
    <includes refid="diagnostic_mgr_8h" local="no">diagnosticMgr.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1ae96b831195b4f58f2755dd6c5d6c99b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>TF_API</type>
        <definition>virtual TF_API ~Delegate</definition>
        <argsstring>()=0</argsstring>
        <name>~Delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1a4a71214af7408a829d79b0127648516e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IssueError</definition>
        <argsstring>(TfError const &amp;err)=0</argsstring>
        <name>IssueError</name>
        <reimplementedby refid="class_usd_utils_coalescing_diagnostic_delegate_1a6d98216c7d46cc31da20159cedb4f395">IssueError</reimplementedby>
        <reimplementedby refid="class_usd_utils_conditional_abort_diagnostic_delegate_1af4704d5546b58bc28db85dd6be6d028c">IssueError</reimplementedby>
        <param>
          <type><ref refid="class_tf_error" kindref="compound">TfError</ref> const &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Called when a <computeroutput><ref refid="class_tf_error" kindref="compound">TfError</ref></computeroutput> is posted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1ac4ef12d57756fe3a5de89de7cfa8f866" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IssueFatalError</definition>
        <argsstring>(TfCallContext const &amp;context, std::string const &amp;msg)=0</argsstring>
        <name>IssueFatalError</name>
        <reimplementedby refid="class_usd_utils_coalescing_diagnostic_delegate_1a5fc87e363ed1b7e48616d63b687f6cd7">IssueFatalError</reimplementedby>
        <reimplementedby refid="class_usd_utils_conditional_abort_diagnostic_delegate_1abf364af897e33b1ffc67253dcf8733a9">IssueFatalError</reimplementedby>
        <param>
          <type>TfCallContext const &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Called when a <computeroutput>TF_FATAL_ERROR</computeroutput> is issued (or a failed <computeroutput>TF_AXIOM</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1a3f80bd49fe9478472ef37ed5ca10befc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IssueStatus</definition>
        <argsstring>(TfStatus const &amp;status)=0</argsstring>
        <name>IssueStatus</name>
        <reimplementedby refid="class_usd_utils_coalescing_diagnostic_delegate_1a001692b1a33e3b779ab4cd8242531dc2">IssueStatus</reimplementedby>
        <reimplementedby refid="class_usd_utils_conditional_abort_diagnostic_delegate_1a94873437c454eb40964d4ed251d40ee6">IssueStatus</reimplementedby>
        <param>
          <type><ref refid="class_tf_status" kindref="compound">TfStatus</ref> const &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Called when a <computeroutput><ref refid="group__group__tf___diagnostic_1ga97dfb3da2a7be92953eda1e4ad268301" kindref="member">TF_STATUS()</ref></computeroutput> is issued. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1aa28e6dcae9b9131fb358a8706c841ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IssueWarning</definition>
        <argsstring>(TfWarning const &amp;warning)=0</argsstring>
        <name>IssueWarning</name>
        <reimplementedby refid="class_usd_utils_coalescing_diagnostic_delegate_1a47eb2866d94d1a99f2a89b0eb73f34c2">IssueWarning</reimplementedby>
        <reimplementedby refid="class_usd_utils_conditional_abort_diagnostic_delegate_1af826dd5cf2bd2e7553afddbd3291217e">IssueWarning</reimplementedby>
        <param>
          <type><ref refid="class_tf_warning" kindref="compound">TfWarning</ref> const &amp;</type>
          <declname>warning</declname>
        </param>
        <briefdescription>
<para>Called when a <computeroutput>TF_WARNING()</computeroutput> is issued. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_tf_diagnostic_mgr_1_1_delegate_1a88dcc2a1d6c3096c3382b9f3590a4ebc" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void _UnhandledAbort</definition>
        <argsstring>() const</argsstring>
        <name>_UnhandledAbort</name>
        <briefdescription>
<para>Abort the program, but avoid the session logging mechanism. </para>
        </briefdescription>
        <detaileddescription>
<para>This is intended to be used for fatal error cases where any information has already been logged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticMgr.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>One may set a delegate with the <computeroutput><ref refid="class_tf_diagnostic_mgr" kindref="compound">TfDiagnosticMgr</ref></computeroutput> which will be called to respond to errors and diagnostics. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>None of the methods in <computeroutput><ref refid="class_tf_diagnostic_mgr_1_1_delegate" kindref="compound">TfDiagnosticMgr::Delegate</ref></computeroutput> can be reentrant.</para>
</simplesect>
Practically speaking, this means they cannot invoke:</para>
<para><itemizedlist>
<listitem><para>TF_ERROR</para>
</listitem><listitem><para>TF_RUNTIME_ERROR</para>
</listitem><listitem><para>TF_CODING_ERROR</para>
</listitem><listitem><para>TF_WARN</para>
</listitem><listitem><para>TF_STATUS</para>
</listitem></itemizedlist>
</para>
<para>For a more complete list, see diagnostic.h </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1080">
        <label>UsdUtilsConditionalAbortDiagnosticDelegate</label>
        <link refid="class_usd_utils_conditional_abort_diagnostic_delegate"/>
        <childnode refid="1078" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1079">
        <label>UsdUtilsCoalescingDiagnosticDelegate</label>
        <link refid="class_usd_utils_coalescing_diagnostic_delegate"/>
        <childnode refid="1078" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1078">
        <label>TfDiagnosticMgr::Delegate</label>
        <link refid="class_tf_diagnostic_mgr_1_1_delegate"/>
      </node>
    </inheritancegraph>
    <location file="pxr/base/tf/diagnosticMgr.h" line="128" column="1" bodyfile="pxr/base/tf/diagnosticMgr.h" bodystart="128" bodyend="153"/>
    <listofallmembers>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1a88dcc2a1d6c3096c3382b9f3590a4ebc" prot="protected" virt="non-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>_UnhandledAbort</name></member>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1a4a71214af7408a829d79b0127648516e" prot="public" virt="pure-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>IssueError</name></member>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1ac4ef12d57756fe3a5de89de7cfa8f866" prot="public" virt="pure-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>IssueFatalError</name></member>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1a3f80bd49fe9478472ef37ed5ca10befc" prot="public" virt="pure-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>IssueStatus</name></member>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1aa28e6dcae9b9131fb358a8706c841ea9" prot="public" virt="pure-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>IssueWarning</name></member>
      <member refid="class_tf_diagnostic_mgr_1_1_delegate_1ae96b831195b4f58f2755dd6c5d6c99b4" prot="public" virt="pure-virtual"><scope>TfDiagnosticMgr::Delegate</scope><name>~Delegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
