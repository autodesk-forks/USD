<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_volume" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdStVolume</compoundname>
    <basecompoundref refid="class_hd_volume" prot="public" virt="non-virtual">HdVolume</basecompoundref>
    <includes refid="imaging_2hd_st_2volume_8h" local="no">volume.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_hd_st_volume_1a46951d84c88bbc389c0ce4f1f6194d95" prot="private" static="no" strong="no">
        <type></type>
        <name>DrawingCoord</name>
        <enumvalue id="class_hd_st_volume_1a46951d84c88bbc389c0ce4f1f6194d95ae5768758878aa52064b4fa5f45a5e0b1" prot="private">
          <name>InstancePrimvar</name>
          <initializer>= HdDrawingCoord::CustomSlotsBegin</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="91" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="91" bodyend="93"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_hd_st_volume_1af914b094c28e786b03eb74acb43d1e35" prot="public" static="yes" mutable="no">
        <type>HDST_API const float</type>
        <definition>HDST_API const float defaultStepSize</definition>
        <argsstring></argsstring>
        <name>defaultStepSize</name>
        <briefdescription>
<para>Default step size used for raymarching. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="63" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_volume_1a171278386ef6befc678399c4041d4de0" prot="public" static="yes" mutable="no">
        <type>HDST_API const float</type>
        <definition>HDST_API const float defaultStepSizeLighting</definition>
        <argsstring></argsstring>
        <name>defaultStepSizeLighting</name>
        <briefdescription>
<para>Default step size used for raymarching for lighting computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="67" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_volume_1ae4868f2ab56e6945f36b2086710aba3d" prot="public" static="yes" mutable="no">
        <type>HDST_API const float</type>
        <definition>HDST_API const float defaultMaxTextureMemoryPerField</definition>
        <argsstring></argsstring>
        <name>defaultMaxTextureMemoryPerField</name>
        <briefdescription>
<para>Default memory limit for a field texture (in Mb) if not overridden by field prim with textureMemory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="72" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_volume_1a3afa6bcabc7b78d7f09ad57c19057641" prot="private" static="no" mutable="no">
        <type>HdReprSharedPtr</type>
        <definition>HdReprSharedPtr _volumeRepr</definition>
        <argsstring></argsstring>
        <name>_volumeRepr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="95" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_volume_1a1b6fd6a6f53a390d6a40e4d4849a35e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStVolume</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>HdStVolume</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1a7b57564ebaa81db931b7d77ae74be818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStVolume</definition>
        <argsstring>() override</argsstring>
        <name>~HdStVolume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1a59b589b9042f2173054e853d4d58036f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API HdDirtyBits</type>
        <definition>HDST_API HdDirtyBits GetInitialDirtyBitsMask</definition>
        <argsstring>() const override</argsstring>
        <name>GetInitialDirtyBitsMask</name>
        <reimplements refid="class_hd_rprim_1ac05e81662ee475cfe52ce97e84e7205d">GetInitialDirtyBitsMask</reimplements>
        <briefdescription>
<para>Returns the set of dirty bits that should be added to the change tracker for this prim, when this prim is inserted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1a1dd447a19bfb779147fe23a7cd152852" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void UpdateRenderTag</definition>
        <argsstring>(HdSceneDelegate *delegate, HdRenderParam *renderParam) override</argsstring>
        <name>UpdateRenderTag</name>
        <reimplements refid="class_hd_rprim_1af4ab6abf1e3c972387514dca88ebddce">UpdateRenderTag</reimplements>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1a072a970822c6880f78f513372dab87c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Sync</definition>
        <argsstring>(HdSceneDelegate *delegate, HdRenderParam *renderParam, HdDirtyBits *dirtyBits, TfToken const &amp;reprToken) override</argsstring>
        <name>Sync</name>
        <reimplements refid="class_hd_rprim_1accb912c87d0f4772cec8b9b51c6bed89">Sync</reimplements>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>reprToken</declname>
        </param>
        <briefdescription>
<para>Pull invalidated scene data and prepare/update the renderable representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is told which scene data to pull through the dirtyBits parameter. The first time it&apos;s called, dirtyBits comes from _GetInitialDirtyBits(), which provides initial dirty state, but after that it&apos;s driven by invalidation tracking in the scene delegate.</para>
<para>The contract for this function is that the prim can only pull on scene delegate buffers that are marked dirty. Scene delegates can and do implement just-in-time data schemes that mean that pulling on clean data will be at best incorrect, and at worst a crash.</para>
<para>This function is called in parallel from worker threads, so it needs to be threadsafe; calls into <ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> are ok.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sceneDelegate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data source for this geometry item. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>renderParam</parametername>
</parameternamelist>
<parameterdescription>
<para>A render delegate object that holds rendering parameters that scene geometry may use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirtyBits</parametername>
</parameternamelist>
<parameterdescription>
<para>A specifier for which scene data has changed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reprToken</parametername>
</parameternamelist>
<parameterdescription>
<para>The representation that needs to be updated. This is useful for backends that support multiple display representations for an rprim. A given representation may choose to pull on a subset of the dirty state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirtyBits</parametername>
</parameternamelist>
<parameterdescription>
<para>On input specifies which state is dirty and can be pulled from the scene delegate. On output specifies which bits are still dirty and were not cleaned by the sync. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1afacd7217dce1f83fe450e78b1624a8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Finalize</definition>
        <argsstring>(HdRenderParam *renderParam) override</argsstring>
        <name>Finalize</name>
        <reimplements refid="class_hd_rprim_1a385eed04c15e636796b187bfdf0fcbf0">Finalize</reimplements>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <briefdescription>
<para>Finalizes object resources. </para>
        </briefdescription>
        <detaileddescription>
<para>This function might not delete resources, but it should deal with resource ownership so that the rprim is deletable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_st_volume_1aaff1f31f3a8de2a19c2914877542925d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void _InitRepr</definition>
        <argsstring>(TfToken const &amp;reprToken, HdDirtyBits *dirtyBits) override</argsstring>
        <name>_InitRepr</name>
        <reimplements refid="class_hd_rprim_1ae8808b3a20d4f5c297884e53490eafdc">_InitRepr</reimplements>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>reprToken</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
<para>Initialize the given representation of this Rprim. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called prior to syncing the prim, the first time the repr is used.</para>
<para>reprToken is the name of the representation to initalize.</para>
<para>dirtyBits is an in/out value. It is initialized to the dirty bits from the change tracker. InitRepr can then set additional dirty bits if additional data is required from the scene delegate when this repr is synced. InitRepr occurs before dirty bit propagation.</para>
<para>See <ref refid="class_hd_rprim_1af62f2311f5580ddc32ecd571a0f559d4" kindref="member">HdRprim::InitRepr()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1a04b208502c8ebe4ff8946f8d5b5be064" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HdDirtyBits</type>
        <definition>HdDirtyBits _PropagateDirtyBits</definition>
        <argsstring>(HdDirtyBits bits) const override</argsstring>
        <name>_PropagateDirtyBits</name>
        <reimplements refid="class_hd_rprim_1a6ab9057a8d24d811a6f99f8cfb2fc0fd">_PropagateDirtyBits</reimplements>
        <param>
          <type>HdDirtyBits</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>This callback from Rprim gives the prim an opportunity to set additional dirty bits based on those already set. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done before the dirty bits are passed to the scene delegate, so can be used to communicate that extra information is needed by the prim to process the changes.</para>
<para>The return value is the new set of dirty bits, which replaces the bits passed in.</para>
<para>See <ref refid="class_hd_rprim_1af80a9b6a6565e86769cf248698122958" kindref="member">HdRprim::PropagateRprimDirtyBits()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_volume_1ad9c75cfd6e0d776f011ee18046428abd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdateRepr</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, TfToken const &amp;reprToken, HdDirtyBits *dirtyBitsState)</argsstring>
        <name>_UpdateRepr</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>reprToken</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBitsState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_volume_1a70980824124a07ec6eb862618b63aa66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdateDrawItem</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, HdStDrawItem *drawItem, HdDirtyBits *dirtyBits)</argsstring>
        <name>_UpdateDrawItem</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdStDrawItem *</type>
          <declname>drawItem</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/volume.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a Volume Prim. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3391">
        <label>HdRprim</label>
        <link refid="class_hd_rprim"/>
      </node>
      <node id="3390">
        <label>HdVolume</label>
        <link refid="class_hd_volume"/>
        <childnode refid="3391" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3389">
        <label>HdStVolume</label>
        <link refid="class_hd_st_volume"/>
        <childnode refid="3390" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3394">
        <label>HdRprim</label>
        <link refid="class_hd_rprim"/>
        <childnode refid="3395" relation="usage">
          <edgelabel>_renderTag</edgelabel>
        </childnode>
        <childnode refid="3396" relation="usage">
          <edgelabel>_authoredReprSelector</edgelabel>
        </childnode>
      </node>
      <node id="3393">
        <label>HdVolume</label>
        <link refid="class_hd_volume"/>
        <childnode refid="3394" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3395">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
      <node id="3392">
        <label>HdStVolume</label>
        <link refid="class_hd_st_volume"/>
        <childnode refid="3393" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3396">
        <label>HdReprSelector</label>
        <link refid="class_hd_repr_selector"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/volume.h" line="38" column="1" bodyfile="pxr/imaging/hdSt/volume.h" bodystart="38" bodyend="96"/>
    <listofallmembers>
      <member refid="class_hd_rprim_1af99cc7d4b20df2fd31786a21ebe68331" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_authoredReprSelector</name></member>
      <member refid="class_hd_rprim_1a7536f2dc14a09b5e59047a845435d895" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_GetRepr</name></member>
      <member refid="class_hd_st_volume_1aaff1f31f3a8de2a19c2914877542925d" prot="protected" virt="virtual"><scope>HdStVolume</scope><name>_InitRepr</name></member>
      <member refid="class_hd_st_volume_1a04b208502c8ebe4ff8946f8d5b5be064" prot="protected" virt="virtual"><scope>HdStVolume</scope><name>_PropagateDirtyBits</name></member>
      <member refid="class_hd_rprim_1ad83e4473062b97f26cf76c844bf7a3a1" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_renderTag</name></member>
      <member refid="class_hd_rprim_1a136710a8b140e2e6350f01f80f1d85a4" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_reprs</name></member>
      <member refid="class_hd_rprim_1aad438bd2af17cf2eafbfbd90cc2a2db1" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_ReprVector</name></member>
      <member refid="class_hd_rprim_1ab47ac9b77df39ee8de77b10486ea24c5" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_sharedData</name></member>
      <member refid="class_hd_st_volume_1a70980824124a07ec6eb862618b63aa66" prot="private" virt="non-virtual"><scope>HdStVolume</scope><name>_UpdateDrawItem</name></member>
      <member refid="class_hd_rprim_1a07b717bf883db5ca574acb6a17b0c192" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_UpdateInstancer</name></member>
      <member refid="class_hd_st_volume_1ad9c75cfd6e0d776f011ee18046428abd" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_UpdateRepr</name></member>
      <member refid="class_hd_rprim_1a2a2640835d0c96bfa94425428ec00633" prot="protected" virt="non-virtual"><scope>HdStVolume</scope><name>_UpdateVisibility</name></member>
      <member refid="class_hd_st_volume_1a3afa6bcabc7b78d7f09ad57c19057641" prot="private" virt="non-virtual"><scope>HdStVolume</scope><name>_volumeRepr</name></member>
      <member refid="class_hd_rprim_1ac363dc6fc79936a3e2147e4676b07472" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>CanSkipDirtyBitPropagationAndSync</name></member>
      <member refid="class_hd_st_volume_1ae4868f2ab56e6945f36b2086710aba3d" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>defaultMaxTextureMemoryPerField</name></member>
      <member refid="class_hd_st_volume_1af914b094c28e786b03eb74acb43d1e35" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>defaultStepSize</name></member>
      <member refid="class_hd_st_volume_1a171278386ef6befc678399c4041d4de0" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>defaultStepSizeLighting</name></member>
      <member refid="class_hd_st_volume_1a46951d84c88bbc389c0ce4f1f6194d95" prot="private" virt="non-virtual"><scope>HdStVolume</scope><name>DrawingCoord</name></member>
      <member refid="class_hd_st_volume_1afacd7217dce1f83fe450e78b1624a8b4" prot="public" virt="virtual"><scope>HdStVolume</scope><name>Finalize</name></member>
      <member refid="class_hd_volume_1a9538b3d6f03d3ff12f61734caaa559a9" prot="public" virt="virtual"><scope>HdStVolume</scope><name>GetBuiltinPrimvarNames</name></member>
      <member refid="class_hd_rprim_1acdeab568daeb62af72f3cf5f7359f216" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetDrawItems</name></member>
      <member refid="class_hd_rprim_1a606da02b739d7eb4d1b19fe04d985f2e" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetExtent</name></member>
      <member refid="class_hd_rprim_1a9301243d9273afcba6395e86047490ab" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetId</name></member>
      <member refid="class_hd_rprim_1a81f906afa368c0de559aba39fc57bff8" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetIndexedPrimvar</name></member>
      <member refid="class_hd_st_volume_1a59b589b9042f2173054e853d4d58036f" prot="public" virt="virtual"><scope>HdStVolume</scope><name>GetInitialDirtyBitsMask</name></member>
      <member refid="class_hd_rprim_1a7119f60143f27b3e561ffa04464c1ca7" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetInstancerId</name></member>
      <member refid="class_hd_rprim_1a8b6da4a9d65f37cc07b2647808093bbe" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetInstancerTransforms</name></member>
      <member refid="class_hd_rprim_1a8124f95bf477fa1aedd20bbb2dbf589e" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetMaterialId</name></member>
      <member refid="class_hd_rprim_1ae37ae1625cd178d6d940eebcea42698f" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetPrimId</name></member>
      <member refid="class_hd_rprim_1a9065fe959f49db479d2e37e6daed9b2d" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetPrimvar</name></member>
      <member refid="class_hd_rprim_1a6d78d1d22dab6a2e814277c49f77d8da" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetPrimvarDescriptors</name></member>
      <member refid="class_hd_rprim_1ad69d62d157f59712c736b827eb212100" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetRenderTag</name></member>
      <member refid="class_hd_rprim_1ac759696985c687f4047ed065c999c3c1" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetRenderTag</name></member>
      <member refid="class_hd_rprim_1ae0a7b4f61b90ca488a28a7b075543612" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>GetReprSelector</name></member>
      <member refid="class_hd_rprim_1a3a4bcc257ba5af64bf9627291cc7ddb5" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>HdRprim</name></member>
      <member refid="class_hd_st_volume_1a1b6fd6a6f53a390d6a40e4d4849a35e2" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>HdStVolume</name></member>
      <member refid="class_hd_volume_1a14d909d27b886038cf6b04d86d7b01f4" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>HdVolume</name></member>
      <member refid="class_hd_rprim_1af62f2311f5580ddc32ecd571a0f559d4" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>InitRepr</name></member>
      <member refid="class_hd_st_volume_1a46951d84c88bbc389c0ce4f1f6194d95ae5768758878aa52064b4fa5f45a5e0b1" prot="private" virt="non-virtual"><scope>HdStVolume</scope><name>InstancePrimvar</name></member>
      <member refid="class_hd_rprim_1a894cef8181ed5adf7abc88616c3a8e94" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>IsDirty</name></member>
      <member refid="class_hd_rprim_1a638cd13b75c2dd9d1ccd84e9dd311d6f" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>IsVisible</name></member>
      <member refid="class_hd_rprim_1af80a9b6a6565e86769cf248698122958" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>PropagateRprimDirtyBits</name></member>
      <member refid="class_hd_rprim_1a9fc27f601b7bb56ab9f7c62f76bcb6fb" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>SetMaterialId</name></member>
      <member refid="class_hd_rprim_1a348af2854c0f8c81d848ed55795a1751" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>SetPrimId</name></member>
      <member refid="class_hd_st_volume_1a072a970822c6880f78f513372dab87c2" prot="public" virt="virtual"><scope>HdStVolume</scope><name>Sync</name></member>
      <member refid="class_hd_st_volume_1a1dd447a19bfb779147fe23a7cd152852" prot="public" virt="virtual"><scope>HdStVolume</scope><name>UpdateRenderTag</name></member>
      <member refid="class_hd_rprim_1af70add9253213db0665940375da392a0" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>UpdateReprSelector</name></member>
      <member refid="class_hd_rprim_1a84054b7edae1ba797c1bd4f8b121001c" prot="public" virt="virtual"><scope>HdStVolume</scope><name>~HdRprim</name></member>
      <member refid="class_hd_st_volume_1a7b57564ebaa81db931b7d77ae74be818" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>~HdStVolume</name></member>
      <member refid="class_hd_volume_1a7f099a39f6a0a0e54e35da17f57afab4" prot="public" virt="non-virtual"><scope>HdStVolume</scope><name>~HdVolume</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
