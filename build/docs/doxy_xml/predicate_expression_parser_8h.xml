<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="predicate_expression_parser_8h" kind="file" language="C++">
    <compoundname>predicateExpressionParser.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_2sdf_2api_8h" local="yes">pxr/usd/sdf/api.h</includes>
    <includes refid="base_2tf_2diagnostic_8h" local="yes">pxr/base/tf/diagnostic.h</includes>
    <includes refid="vt_2value_8h" local="yes">pxr/base/vt/value.h</includes>
    <includes local="yes">pxr/base/tf/pxrPEGTL/pegtl.h</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="182512">
        <label>list</label>
      </node>
      <node id="182473">
        <label>locale</label>
      </node>
      <node id="182520">
        <label>atomic</label>
      </node>
      <node id="182475">
        <label>stdarg.h</label>
      </node>
      <node id="182497">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="182498" relation="include">
        </childnode>
        <childnode refid="182493" relation="include">
        </childnode>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
        <childnode refid="182499" relation="include">
        </childnode>
      </node>
      <node id="182516">
        <label>functional</label>
      </node>
      <node id="182458">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182533">
        <label>limits</label>
      </node>
      <node id="182481">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="182541">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="182493">
        <label>cstdint</label>
      </node>
      <node id="182472">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182466" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
        <childnode refid="182473" relation="include">
        </childnode>
        <childnode refid="182474" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
      </node>
      <node id="182478">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182504">
        <label>cmath</label>
      </node>
      <node id="182502">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182468" relation="include">
        </childnode>
        <childnode refid="182503" relation="include">
        </childnode>
        <childnode refid="182497" relation="include">
        </childnode>
        <childnode refid="182505" relation="include">
        </childnode>
        <childnode refid="182494" relation="include">
        </childnode>
      </node>
      <node id="182492">
        <label>pxr/base/tf/pointerAndBits.h</label>
        <link refid="pointer_and_bits_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182478" relation="include">
        </childnode>
        <childnode refid="182493" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182494" relation="include">
        </childnode>
      </node>
      <node id="182511">
        <label>cstdarg</label>
      </node>
      <node id="182464">
        <label>string</label>
      </node>
      <node id="182525">
        <label>pxr/base/tf/functionRef.h</label>
        <link refid="function_ref_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182494" relation="include">
        </childnode>
      </node>
      <node id="182466">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182542">
        <label>pxr/base/tf/pxrPEGTL/pegtl.h</label>
      </node>
      <node id="182507">
        <label>map</label>
      </node>
      <node id="182498">
        <label>cinttypes</label>
      </node>
      <node id="182456">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="182537">
        <label>unordered_set</label>
      </node>
      <node id="182518">
        <label>pxr/base/tf/type_Impl.h</label>
        <link refid="type___impl_8h_source"/>
        <childnode refid="182519" relation="include">
        </childnode>
      </node>
      <node id="182487">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182462" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182489" relation="include">
        </childnode>
      </node>
      <node id="182522">
        <label>pxr/base/vt/api.h</label>
        <link refid="base_2vt_2api_8h_source"/>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182457">
        <label>pxr/usd/sdf/api.h</label>
        <link refid="usd_2sdf_2api_8h_source"/>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182471">
        <label>stddef.h</label>
      </node>
      <node id="182468">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182510">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182495">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
      </node>
      <node id="182530">
        <label>pxr/base/gf/ilmbase_half.h</label>
        <link refid="ilmbase__half_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182531" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
      </node>
      <node id="182529">
        <label>pxr/base/gf/half.h</label>
        <link refid="half_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182530" relation="include">
        </childnode>
        <childnode refid="182532" relation="include">
        </childnode>
        <childnode refid="182534" relation="include">
        </childnode>
      </node>
      <node id="182531">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182479">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="182478" relation="include">
        </childnode>
        <childnode refid="182473" relation="include">
        </childnode>
        <childnode refid="182480" relation="include">
        </childnode>
      </node>
      <node id="182474">
        <label>any</label>
      </node>
      <node id="182499">
        <label>sys/types.h</label>
      </node>
      <node id="182455">
        <label>pxr/usd/sdf/predicateExpressionParser.h</label>
        <link refid="predicate_expression_parser_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182457" relation="include">
        </childnode>
        <childnode refid="182460" relation="include">
        </childnode>
        <childnode refid="182476" relation="include">
        </childnode>
        <childnode refid="182542" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
      </node>
      <node id="182500">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
        <childnode refid="182487" relation="include">
        </childnode>
        <childnode refid="182501" relation="include">
        </childnode>
        <childnode refid="182510" relation="include">
        </childnode>
        <childnode refid="182495" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
      </node>
      <node id="182488">
        <label>typeinfo</label>
      </node>
      <node id="182483">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="182482">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="182535">
        <label>pxr/base/tf/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182465" relation="include">
        </childnode>
        <childnode refid="182501" relation="include">
        </childnode>
        <childnode refid="182536" relation="include">
        </childnode>
        <childnode refid="182492" relation="include">
        </childnode>
        <childnode refid="182520" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
        <childnode refid="182508" relation="include">
        </childnode>
      </node>
      <node id="182519">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182520" relation="include">
        </childnode>
        <childnode refid="182521" relation="include">
        </childnode>
        <childnode refid="182493" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
      </node>
      <node id="182503">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
        <childnode refid="182497" relation="include">
        </childnode>
        <childnode refid="182504" relation="include">
        </childnode>
      </node>
      <node id="182509">
        <label>vector</label>
      </node>
      <node id="182523">
        <label>pxr/base/vt/hash.h</label>
        <link refid="vt_2hash_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182522" relation="include">
        </childnode>
        <childnode refid="182501" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182494" relation="include">
        </childnode>
      </node>
      <node id="182467">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182486">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182479" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
      </node>
      <node id="182532">
        <label>pxr/base/gf/ilmbase_halfLimits.h</label>
        <link refid="ilmbase__half_limits_8h_source"/>
        <childnode refid="182533" relation="include">
        </childnode>
        <childnode refid="182530" relation="include">
        </childnode>
      </node>
      <node id="182494">
        <label>utility</label>
      </node>
      <node id="182513">
        <label>sstream</label>
      </node>
      <node id="182461">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182462" relation="include">
        </childnode>
        <childnode refid="182463" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
      </node>
      <node id="182459">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="182526">
        <label>pxr/base/vt/traits.h</label>
        <link refid="vt_2traits_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182522" relation="include">
        </childnode>
        <childnode refid="182510" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
      </node>
      <node id="182469">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182501">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182502" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182506" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182507" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
        <childnode refid="182508" relation="include">
        </childnode>
        <childnode refid="182489" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182494" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
      </node>
      <node id="182505">
        <label>math.h</label>
      </node>
      <node id="182496">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182466" relation="include">
        </childnode>
        <childnode refid="182469" relation="include">
        </childnode>
        <childnode refid="182497" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182500" relation="include">
        </childnode>
        <childnode refid="182511" relation="include">
        </childnode>
        <childnode refid="182506" relation="include">
        </childnode>
        <childnode refid="182512" relation="include">
        </childnode>
        <childnode refid="182508" relation="include">
        </childnode>
        <childnode refid="182513" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
      </node>
      <node id="182484">
        <label>iosfwd</label>
      </node>
      <node id="182521">
        <label>cstdlib</label>
      </node>
      <node id="182470">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182463" relation="include">
        </childnode>
        <childnode refid="182471" relation="include">
        </childnode>
      </node>
      <node id="182514">
        <label>pxr/base/tf/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182515" relation="include">
        </childnode>
        <childnode refid="182517" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
        <childnode refid="182508" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182509" relation="include">
        </childnode>
        <childnode refid="182518" relation="include">
        </childnode>
      </node>
      <node id="182480">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="182527">
        <label>pxr/base/vt/types.h</label>
        <link refid="base_2vt_2types_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182522" relation="include">
        </childnode>
        <childnode refid="182526" relation="include">
        </childnode>
        <childnode refid="182497" relation="include">
        </childnode>
        <childnode refid="182528" relation="include">
        </childnode>
        <childnode refid="182529" relation="include">
        </childnode>
        <childnode refid="182510" relation="include">
        </childnode>
        <childnode refid="182535" relation="include">
        </childnode>
        <childnode refid="182538" relation="include">
        </childnode>
        <childnode refid="182539" relation="include">
        </childnode>
        <childnode refid="182540" relation="include">
        </childnode>
        <childnode refid="182506" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
      </node>
      <node id="182540">
        <label>cstddef</label>
      </node>
      <node id="182528">
        <label>pxr/base/gf/declare.h</label>
        <link refid="base_2gf_2declare_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
      </node>
      <node id="182517">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
      </node>
      <node id="182465">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182466" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182468" relation="include">
        </childnode>
        <childnode refid="182469" relation="include">
        </childnode>
        <childnode refid="182470" relation="include">
        </childnode>
        <childnode refid="182471" relation="include">
        </childnode>
      </node>
      <node id="182477">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182478" relation="include">
        </childnode>
        <childnode refid="182479" relation="include">
        </childnode>
        <childnode refid="182481" relation="include">
        </childnode>
        <childnode refid="182482" relation="include">
        </childnode>
        <childnode refid="182483" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182485" relation="include">
        </childnode>
      </node>
      <node id="182539">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="182491">
        <label>type_traits</label>
      </node>
      <node id="182508">
        <label>set</label>
      </node>
      <node id="182490">
        <label>pxr/base/tf/anyUniquePtr.h</label>
        <link refid="any_unique_ptr_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
      </node>
      <node id="182462">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="182458" relation="include">
        </childnode>
      </node>
      <node id="182463">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="182459" relation="include">
        </childnode>
      </node>
      <node id="182506">
        <label>cstring</label>
      </node>
      <node id="182534">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
      </node>
      <node id="182485">
        <label>memory</label>
      </node>
      <node id="182515">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182466" relation="include">
        </childnode>
        <childnode refid="182510" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182516" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
      </node>
      <node id="182460">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182461" relation="include">
        </childnode>
        <childnode refid="182465" relation="include">
        </childnode>
        <childnode refid="182467" relation="include">
        </childnode>
        <childnode refid="182469" relation="include">
        </childnode>
        <childnode refid="182472" relation="include">
        </childnode>
        <childnode refid="182471" relation="include">
        </childnode>
        <childnode refid="182475" relation="include">
        </childnode>
        <childnode refid="182464" relation="include">
        </childnode>
      </node>
      <node id="182536">
        <label>pxr/base/tf/hashset.h</label>
        <link refid="hashset_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182459" relation="include">
        </childnode>
        <childnode refid="182537" relation="include">
        </childnode>
      </node>
      <node id="182489">
        <label>typeindex</label>
      </node>
      <node id="182476">
        <label>pxr/base/vt/value.h</label>
        <link refid="vt_2value_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182477" relation="include">
        </childnode>
        <childnode refid="182486" relation="include">
        </childnode>
        <childnode refid="182487" relation="include">
        </childnode>
        <childnode refid="182469" relation="include">
        </childnode>
        <childnode refid="182478" relation="include">
        </childnode>
        <childnode refid="182490" relation="include">
        </childnode>
        <childnode refid="182492" relation="include">
        </childnode>
        <childnode refid="182495" relation="include">
        </childnode>
        <childnode refid="182496" relation="include">
        </childnode>
        <childnode refid="182502" relation="include">
        </childnode>
        <childnode refid="182514" relation="include">
        </childnode>
        <childnode refid="182522" relation="include">
        </childnode>
        <childnode refid="182523" relation="include">
        </childnode>
        <childnode refid="182524" relation="include">
        </childnode>
        <childnode refid="182526" relation="include">
        </childnode>
        <childnode refid="182527" relation="include">
        </childnode>
        <childnode refid="182541" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
      </node>
      <node id="182538">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="182524">
        <label>pxr/base/vt/streamOut.h</label>
        <link refid="stream_out_8h_source"/>
        <childnode refid="182456" relation="include">
        </childnode>
        <childnode refid="182522" relation="include">
        </childnode>
        <childnode refid="182500" relation="include">
        </childnode>
        <childnode refid="182525" relation="include">
        </childnode>
        <childnode refid="182484" relation="include">
        </childnode>
        <childnode refid="182488" relation="include">
        </childnode>
        <childnode refid="182491" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_sdf_predicate_expr_builder" prot="public">SdfPredicateExprBuilder</innerclass>
    <innerclass refid="struct_sdf_predicate_expr_builder_1_1___stack" prot="private">SdfPredicateExprBuilder::_Stack</innerclass>
    <innernamespace refid="namespacetao_1_1_t_a_o___p_e_g_t_l___n_a_m_e_s_p_a_c_e">tao::TAO_PEGTL_NAMESPACE</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_SDF_PREDICATE_EXPRESSION_PARSER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_SDF_PREDICATE_EXPRESSION_PARSER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/sdf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2diagnostic_8h" kindref="compound">pxr/base/tf/diagnostic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/value.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pxrPEGTL/pegtl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fwd<sp/>decl,<sp/>from<sp/>parserHelpers.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="42"><highlight class="normal">Sdf_EvalQuotedString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trimBothSides,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>numLines=NULL);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SdfPredicateExprBuilder</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>SdfPredicateExprBuilder()<sp/>{<sp/>OpenGroup();<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushOp(<ref refid="class_sdf_predicate_expression_1a588e6b56097e045c733b60d25c4d45ab" kindref="member">SdfPredicateExpression::Op</ref><sp/>op)<sp/>{<sp/>_stacks.back().PushOp(op);<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushCall(<ref refid="struct_sdf_predicate_expression_1_1_fn_call_1aa10c9e8951b8ccf714a59ec321bdac5b" kindref="member">SdfPredicateExpression::FnCall::Kind</ref><sp/>kind)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stacks.back().PushCall(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kind,<sp/>std::move(_funcName),<sp/>std::move(_funcArgs));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcName.clear();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcArgs.clear();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetFuncName(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcName<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddFuncArg(<ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcArgs.push_back({<sp/>std::move(_funcKwArgName),<sp/>val<sp/>});</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcKwArgName.clear();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetFuncArgKWName(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;kw)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcKwArgName<sp/>=<sp/>kw;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpenGroup()<sp/>{<sp/>_stacks.emplace_back();<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CloseGroup()<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>innerExpr<sp/>=<sp/>_stacks.back().Finish();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stacks.pop_back();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stacks.back().PushExpr(std::move(innerExpr));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>Finish()<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>result<sp/>=<sp/>_stacks.back().Finish();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stacks.clear();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcArgs.clear();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_funcName.clear();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Stack<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushOp(<ref refid="class_sdf_predicate_expression_1a588e6b56097e045c733b60d25c4d45ab" kindref="member">SdfPredicateExpression::Op</ref><sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Op<sp/>=<sp/><ref refid="class_sdf_predicate_expression_1a588e6b56097e045c733b60d25c4d45ab" kindref="member">SdfPredicateExpression::Op</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>higherPrec<sp/>=<sp/>[](Op<sp/>left,<sp/>Op<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>right)<sp/>||<sp/>(left<sp/>==<sp/>right<sp/>&amp;&amp;<sp/>left<sp/>!=<sp/>Op::Not);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>while<sp/>prior<sp/>ops<sp/>have<sp/>higher<sp/>precendence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!opStack.empty()<sp/>&amp;&amp;<sp/>higherPrec(opStack.back(),<sp/>op))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Reduce();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opStack.push_back(op);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushCall(<ref refid="struct_sdf_predicate_expression_1_1_fn_call_1aa10c9e8951b8ccf714a59ec321bdac5b" kindref="member">SdfPredicateExpression::FnCall::Kind</ref><sp/>kind,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>&amp;&amp;name,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/>&amp;&amp;args)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.push_back(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression_1ab61972aa01b493d3130d2570273389b9" kindref="member">SdfPredicateExpression::MakeCall</ref>({</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kind,<sp/>std::move(name),<sp/>std::move(args)<sp/>}));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushExpr(<ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>&amp;&amp;expr)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.push_back(std::move(expr));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>Finish()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!opStack.empty())<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Reduce();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>ret<sp/>=<sp/>std::move(exprStack.back());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.clear();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Reduce()<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression_1a588e6b56097e045c733b60d25c4d45ab" kindref="member">SdfPredicateExpression::Op</ref><sp/>op<sp/>=<sp/>opStack.back();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opStack.pop_back();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>right<sp/>=<sp/>std::move(exprStack.back());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.pop_back();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>SdfPredicateExpression::Not)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>is<sp/>the<sp/>only<sp/>unary<sp/>op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.push_back(</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression_1a7055191a022f285a076bb5b7c31f3bef" kindref="member">SdfPredicateExpression::MakeNot</ref>(std::move(right)));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>ops<sp/>are<sp/>all<sp/>binary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/>left<sp/>=<sp/>std::move(exprStack.back());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.pop_back();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprStack.push_back(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression_1a6b1b067ecc4aec8a436d4c39e2e1460e" kindref="member">SdfPredicateExpression::MakeOp</ref>(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,<sp/>std::move(left),<sp/>std::move(right))</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Working<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::Op&gt;<sp/>opStack;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression&gt;<sp/>exprStack;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;_Stack&gt;<sp/>_stacks;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_funcName;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>_funcKwArgName;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/>_funcArgs;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="comment">//<sp/>Grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">tao::TAO_PEGTL_NAMESPACE;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rule,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Sep&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LookaheadList<sp/>=<sp/>seq&lt;Rule,<sp/>star&lt;at&lt;Sep,<sp/>Rule&gt;,<sp/>Sep,<sp/>Rule&gt;&gt;;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rule&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OptSpaced<sp/>=<sp/>pad&lt;Rule,<sp/>blank&gt;;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OptSpacedComma<sp/>=<sp/>OptSpaced&lt;one&lt;&apos;,&apos;&gt;&gt;;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">//<sp/>Predicate<sp/>expression<sp/>grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NotKW<sp/>:<sp/>keyword&lt;&apos;n&apos;,&apos;o&apos;,&apos;t&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AndKW<sp/>:<sp/>keyword&lt;&apos;a&apos;,&apos;n&apos;,&apos;d&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OrKW<sp/><sp/>:<sp/>keyword&lt;&apos;o&apos;,&apos;r&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Inf<sp/>:<sp/>keyword&lt;&apos;i&apos;,&apos;n&apos;,&apos;f&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">True<sp/>:<sp/>keyword&lt;&apos;t&apos;,&apos;r&apos;,&apos;u&apos;,&apos;e&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">False<sp/>:<sp/>keyword&lt;&apos;f&apos;,&apos;a&apos;,&apos;l&apos;,&apos;s&apos;,&apos;e&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ImpliedAnd<sp/>:<sp/>plus&lt;blank&gt;<sp/>{};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReservedWord<sp/>:<sp/>sor&lt;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>NotKW,<sp/>AndKW,<sp/>OrKW,<sp/>Inf,<sp/>True,<sp/>False&gt;<sp/>{};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Digits<sp/>:<sp/>plus&lt;range&lt;&apos;0&apos;,&apos;9&apos;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Exp<sp/>:<sp/>seq&lt;one&lt;&apos;e&apos;,&apos;E&apos;&gt;,<sp/>opt&lt;one&lt;&apos;-&apos;,&apos;+&apos;&gt;&gt;,<sp/>must&lt;Digits&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Frac<sp/>:<sp/>if_must&lt;one&lt;&apos;.&apos;&gt;,<sp/>Digits&gt;<sp/>{};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredArgFloat<sp/>:<sp/>seq&lt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>opt&lt;one&lt;&apos;-&apos;&gt;&gt;,<sp/>sor&lt;Inf,<sp/>seq&lt;Digits,<sp/>if_then_else&lt;Frac,<sp/>opt&lt;Exp&gt;,<sp/>Exp&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>{};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredArgInt<sp/>:<sp/>seq&lt;opt&lt;one&lt;&apos;-&apos;&gt;&gt;,<sp/>Digits&gt;<sp/>{};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredArgBool<sp/>:<sp/>sor&lt;True,<sp/>False&gt;<sp/>{};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Quote&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Escaped<sp/>:<sp/>sor&lt;Quote,<sp/>one&lt;&apos;\\&apos;,<sp/>&apos;b&apos;,<sp/>&apos;f&apos;,<sp/>&apos;n&apos;,<sp/>&apos;r&apos;,<sp/>&apos;t&apos;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Quote&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unescaped<sp/>:<sp/>minus&lt;utf8::range&lt;0x20,<sp/>0x10FFFF&gt;,<sp/>Quote&gt;<sp/>{};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Quote&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringChar<sp/>:<sp/>if_then_else&lt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>one&lt;&apos;\\&apos;&gt;,<sp/>must&lt;Escaped&lt;Quote&gt;&gt;,<sp/>Unescaped&lt;Quote&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">QuotedString<sp/>:<sp/>sor&lt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>if_must&lt;one&lt;&apos;&quot;&apos;&gt;,<sp/>until&lt;one&lt;&apos;&quot;&apos;&gt;,<sp/>StringChar&lt;one&lt;&apos;&quot;&apos;&gt;&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>if_must&lt;one&lt;&apos;\&apos;&apos;&gt;,<sp/>until&lt;one&lt;&apos;\&apos;&apos;&gt;,<sp/>StringChar&lt;one&lt;&apos;\&apos;&apos;&gt;&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>{};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnquotedStringChar</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>sor&lt;identifier_other,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one&lt;&apos;~&apos;,<sp/>&apos;!&apos;,<sp/>&apos;@&apos;,<sp/>&apos;#&apos;,<sp/>&apos;$&apos;,<sp/>&apos;%&apos;,<sp/>&apos;^&apos;,<sp/>&apos;&amp;&apos;,<sp/>&apos;*&apos;,<sp/>&apos;-&apos;,<sp/>&apos;+&apos;,<sp/>&apos;=&apos;,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;|&apos;,<sp/>&apos;\\&apos;,<sp/>&apos;.&apos;,<sp/>&apos;?&apos;,<sp/>&apos;/&apos;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnquotedString<sp/>:<sp/>star&lt;UnquotedStringChar&gt;<sp/>{};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredArgString<sp/>:<sp/>sor&lt;QuotedString,<sp/>UnquotedString&gt;<sp/>{};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredArgVal<sp/>:<sp/>sor&lt;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>PredArgFloat,<sp/>PredArgInt,<sp/>PredArgBool,<sp/>PredArgString&gt;<sp/>{};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredKWArgName<sp/>:<sp/>minus&lt;identifier,<sp/>ReservedWord&gt;<sp/>{};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredKWArgPrefix<sp/>:<sp/>seq&lt;PredKWArgName,<sp/>OptSpaced&lt;one&lt;&apos;=&apos;&gt;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredKWArg<sp/>:<sp/>if_must&lt;PredKWArgPrefix,<sp/>PredArgVal&gt;<sp/>{};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredParenPosArg<sp/>:<sp/>seq&lt;not_at&lt;PredKWArgPrefix&gt;,<sp/>PredArgVal&gt;<sp/>{};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredFuncName<sp/>:<sp/>minus&lt;identifier,<sp/>ReservedWord&gt;<sp/>{};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredParenArgs</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>if_then_else&lt;list&lt;PredParenPosArg,<sp/>OptSpacedComma&gt;,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt&lt;OptSpacedComma,<sp/>list&lt;PredKWArg,<sp/>OptSpacedComma&gt;&gt;,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt&lt;list&lt;PredKWArg,<sp/>OptSpacedComma&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredColonArgs<sp/>:<sp/>list&lt;PredArgVal,<sp/>one&lt;&apos;,&apos;&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredColonCall<sp/>:<sp/>if_must&lt;seq&lt;PredFuncName,<sp/>one&lt;&apos;:&apos;&gt;&gt;,<sp/>PredColonArgs&gt;<sp/>{};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredParenCall<sp/>:<sp/>seq&lt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>PredFuncName,<sp/>OptSpaced&lt;one&lt;&apos;(&apos;&gt;&gt;,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>must&lt;PredParenArgs,<sp/>star&lt;blank&gt;,<sp/>one&lt;&apos;)&apos;&gt;&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredBareCall<sp/>:<sp/>PredFuncName<sp/>{};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredExpr;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredOpenGroup<sp/>:<sp/>one&lt;&apos;(&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="253"><highlight class="normal">struct<sp/>PredCloseGroup<sp/>:<sp/>one&lt;&apos;)&apos;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAtom</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>sor&lt;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>PredColonCall,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>PredParenCall,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>PredBareCall,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>if_must&lt;PredOpenGroup,<sp/>OptSpaced&lt;PredExpr&gt;,<sp/>PredCloseGroup&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredFactor<sp/>:<sp/>seq&lt;opt&lt;OptSpaced&lt;list&lt;NotKW,<sp/>plus&lt;blank&gt;&gt;&gt;&gt;,<sp/>PredAtom&gt;<sp/>{};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredOperator<sp/>:<sp/>sor&lt;OptSpaced&lt;AndKW&gt;,<sp/>OptSpaced&lt;OrKW&gt;,<sp/>ImpliedAnd&gt;<sp/>{};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredExpr<sp/>:<sp/>LookaheadList&lt;PredFactor,<sp/>PredOperator&gt;<sp/>{};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Actions<sp/>///////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Rule&gt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction<sp/>:<sp/>nothing&lt;Rule&gt;<sp/>{};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;SdfPredicateExpression::Op<sp/>op&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredOpAction</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.PushOp(op);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;NotKW&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredOpAction&lt;SdfPredicateExpression::Not&gt;<sp/>{};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;AndKW&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredOpAction&lt;SdfPredicateExpression::And&gt;<sp/>{};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;OrKW&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredOpAction&lt;SdfPredicateExpression::Or&gt;<sp/>{};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;ImpliedAnd&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredOpAction&lt;SdfPredicateExpression::ImpliedAnd&gt;<sp/>{};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredOpenGroup&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.OpenGroup();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredCloseGroup&gt;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.CloseGroup();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredFuncName&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.SetFuncName(in.string());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredArgInt&gt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>outOfRange<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>ival<sp/>=<sp/><ref refid="group__group__tf___string_1ga03fa88100e2c0093f0c593acaaa4c396" kindref="member">TfStringToInt64</ref>(in.string(),<sp/>&amp;outOfRange);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outOfRange)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.AddFuncArg(<ref refid="class_vt_value" kindref="compound">VtValue</ref>(ival));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredArgBool&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.AddFuncArg(<ref refid="class_vt_value" kindref="compound">VtValue</ref>(in.string()[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredArgFloat&gt;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;instr<sp/>=<sp/>in.string();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fval;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fval<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instr<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-inf&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fval<sp/>=<sp/>-std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fval<sp/>=<sp/><ref refid="group__group__tf___string_1gaeab03b8ef5e730ae50cd19cacf4fbb65" kindref="member">TfStringToDouble</ref>(instr);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.AddFuncArg(<ref refid="class_vt_value" kindref="compound">VtValue</ref>(fval));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal">};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredArgString&gt;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;instr<sp/>=<sp/>in.string();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trimAmount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instr.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((instr.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>instr.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(instr.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>instr.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimAmount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.AddFuncArg(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>(Sdf_EvalQuotedString(</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instr.c_str(),<sp/>instr.size(),<sp/>trimAmount)));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredKWArgName&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.SetFuncArgKWName(in.string());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;SdfPredicateExpression::FnCall::Kind<sp/>callKind&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredCallAction</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Input&gt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply(Input<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;in,<sp/>SdfPredicateExprBuilder<sp/>&amp;builder)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.PushCall(callKind);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredBareCall&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredCallAction&lt;SdfPredicateExpression::FnCall::BareCall&gt;<sp/>{};</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredParenCall&gt;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredCallAction&lt;SdfPredicateExpression::FnCall::ParenCall&gt;<sp/>{};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PredAction&lt;PredColonCall&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>PredCallAction&lt;SdfPredicateExpression::FnCall::ColonCall&gt;<sp/>{};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Grammar&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Analyze()<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numIssues<sp/>=<sp/>analyze&lt;Grammar&gt;();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numIssues)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga7cbfc0e6eb2af388e728ad675086a348" kindref="member">TF_FATAL_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;%zu<sp/>issues<sp/>found<sp/>in<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>numIssues,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga7c6c741bdf765244df0b58d6ef2fb35a" kindref="member">TF_FUNC_NAME</ref>().c_str());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_SDF_PREDICATE_EXPRESSION_PARSER_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usd/sdf/predicateExpressionParser.h"/>
  </compounddef>
</doxygen>
