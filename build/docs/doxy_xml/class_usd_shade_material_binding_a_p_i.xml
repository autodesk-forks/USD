<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_shade_material_binding_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdShadeMaterialBindingAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="material_binding_a_p_i_8h" local="no">materialBindingAPI.h</includes>
    <innerclass refid="struct_usd_shade_material_binding_a_p_i_1_1_bindings_at_prim" prot="public">UsdShadeMaterialBindingAPI::BindingsAtPrim</innerclass>
    <innerclass refid="class_usd_shade_material_binding_a_p_i_1_1_collection_binding" prot="public">UsdShadeMaterialBindingAPI::CollectionBinding</innerclass>
    <innerclass refid="class_usd_shade_material_binding_a_p_i_1_1_direct_binding" prot="public">UsdShadeMaterialBindingAPI::DirectBinding</innerclass>
      <sectiondef kind="user-defined">
      <header>Schema property and associated data retrieval API</header>
      <description><para><anchor id="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_SchemaProperties"/></para>
<para>This section contains API for fetching the two kinds of binding relationships and for computing the corresponding bindings. </para>
</description>
      <memberdef kind="typedef" id="class_usd_shade_material_binding_a_p_i_1a739afa0918dd03e8237ac0ff3784841c" prot="public" static="no">
        <type>std::vector&lt; <ref refid="class_usd_shade_material_binding_a_p_i_1_1_collection_binding" kindref="compound">CollectionBinding</ref> &gt;</type>
        <definition>using CollectionBindingVector =  std::vector&lt;CollectionBinding&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionBindingVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="431" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aa763d2d24d9f12b26bcca7d711eff7d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDSHADE_API UsdRelationship GetDirectBindingRel</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>GetDirectBindingRel</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Returns the direct material-binding relationship on this prim for the given material purpose. </para>
        </briefdescription>
        <detaileddescription>
<para>The material purpose of the relationship that&apos;s returned will match the specified <computeroutput>materialPurpose</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aa06d78748549f133d1de1fca5cac1053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDSHADE_API UsdRelationship GetCollectionBindingRel</definition>
        <argsstring>(const TfToken &amp;bindingName, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>GetCollectionBindingRel</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Returns the collection-based material-binding relationship with the given <computeroutput>bindingName</computeroutput> and <computeroutput>materialPurpose</computeroutput> on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>For info on <computeroutput>bindingName</computeroutput>, see <ref refid="class_usd_shade_material_binding_a_p_i_1a9e6ca94c7d1d6ffeb4372641be0a8432" kindref="member">UsdShadeMaterialBindingAPI::Bind()</ref>. The material purpose of the relationship that&apos;s returned will match the specified <computeroutput>materialPurpose</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a7d0a90ab378da4797a78064fdcdcdb0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdRelationship&gt; GetCollectionBindingRels</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>GetCollectionBindingRels</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Returns the list of collection-based material binding relationships on this prim for the given material purpose, <computeroutput>materialPurpose</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned list of binding relationships will be in native property order. See <ref refid="class_usd_prim_1aab0e1b744dac924c02abd6416321ee9f" kindref="member">UsdPrim::GetPropertyOrder()</ref>, <ref refid="class_usd_prim_1a7285692cfe69b46e890ec25756d02c37" kindref="member">UsdPrim::SetPropertyOrder()</ref>. Bindings that appear earlier in the property order are considered to be stronger than the ones that come later. See rule #6 in <ref refid="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution" kindref="member">UsdShadeMaterialBindingAPI_MaterialResolution</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a10f47d610330759462c779a87d894c27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_material_binding_a_p_i_1_1_direct_binding" kindref="compound">DirectBinding</ref></type>
        <definition>USDSHADE_API DirectBinding GetDirectBinding</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>GetDirectBinding</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Computes and returns the direct binding for the given material purpose on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned binding always has the specified <computeroutput>materialPurpose</computeroutput> (i.e. the all-purpose binding is not returned if a special purpose binding is requested).</para>
<para>If the direct binding is to a prim that is not a Material, this does not generate an error, but the returned Material will be invalid (i.e. evaluate to false). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1af3d1f9bc7db96518c2ca169aa13d2e93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API CollectionBindingVector</type>
        <definition>USDSHADE_API CollectionBindingVector GetCollectionBindings</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>GetCollectionBindings</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Returns all the collection-based bindings on this prim for the given material purpose. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="class_usd_shade_material_binding_a_p_i_1_1_collection_binding" kindref="compound">CollectionBinding</ref> objects always have the specified <computeroutput>materialPurpose</computeroutput> (i.e. the all-purpose binding is not returned if a special purpose binding is requested).</para>
<para>If one or more collection based bindings are to prims that are not Materials, this does not generate an error, but the corresponding Material(s) will be invalid (i.e. evaluate to false).</para>
<para>The python version of this API returns a tuple containing the vector of <ref refid="class_usd_shade_material_binding_a_p_i_1_1_collection_binding" kindref="compound">CollectionBinding</ref> objects and the corresponding vector of binding relationships.</para>
<para>The returned list of collection-bindings will be in native property order of the associated binding relationships. See <ref refid="class_usd_prim_1aab0e1b744dac924c02abd6416321ee9f" kindref="member">UsdPrim::GetPropertyOrder()</ref>, <ref refid="class_usd_prim_1a7285692cfe69b46e890ec25756d02c37" kindref="member">UsdPrim::SetPropertyOrder()</ref>. Binding relationships that come earlier in the list are considered to be stronger than the ones that come later. See rule #6 in <ref refid="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution" kindref="member">UsdShadeMaterialBindingAPI_MaterialResolution</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a080383d84003f27f1ef34629014d1c7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static USDSHADE_API TfToken GetMaterialBindingStrength</definition>
        <argsstring>(const UsdRelationship &amp;bindingRel)</argsstring>
        <name>GetMaterialBindingStrength</name>
        <param>
          <type>const <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &amp;</type>
          <declname>bindingRel</declname>
        </param>
        <briefdescription>
<para>Resolves the &apos;bindMaterialAs&apos; token-valued metadata on the given binding relationship and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>If the resolved value is empty, this returns the fallback value UsdShadeTokens-&gt;weakerThanDescendants.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_shade_material_binding_a_p_i_1a12e6f34da614e14b18a07a4044a688c7" kindref="member">UsdShadeMaterialBindingAPI::SetMaterialBindingStrength()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a12e6f34da614e14b18a07a4044a688c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool SetMaterialBindingStrength</definition>
        <argsstring>(const UsdRelationship &amp;bindingRel, const TfToken &amp;bindingStrength)</argsstring>
        <name>SetMaterialBindingStrength</name>
        <param>
          <type>const <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &amp;</type>
          <declname>bindingRel</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingStrength</declname>
        </param>
        <briefdescription>
<para>Sets the &apos;bindMaterialAs&apos; token-valued metadata on the given binding relationship. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>bindingStrength</computeroutput> is <emphasis>UsdShadeTokens-&gt;fallbackStrength</emphasis>, the value UsdShadeTokens-&gt;weakerThanDescendants is authored sparsely, i.e. only when there is a different existing bindingStrength value. To stamp out the bindingStrength value explicitly, clients can pass in UsdShadeTokens-&gt;weakerThanDescendants or UsdShadeTokens-&gt;strongerThanDescendants directly. Returns true on success, false otherwise.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_shade_material_binding_a_p_i_1a080383d84003f27f1ef34629014d1c7e" kindref="member">UsdShadeMaterialBindingAPI::GetMaterialBindingStrength()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="496" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Binding authoring and clearing API</header>
      <description><para><anchor id="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_Binding"/></para>
<para>This section provides API for authoring and clearing both direct and collection-based material bindings on a prim. </para>
</description>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a9e6ca94c7d1d6ffeb4372641be0a8432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool Bind</definition>
        <argsstring>(const UsdShadeMaterial &amp;material, const TfToken &amp;bindingStrength=UsdShadeTokens-&gt;fallbackStrength, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>Bind</name>
        <param>
          <type>const <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> &amp;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingStrength</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;fallbackStrength</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Authors a direct binding to the given <computeroutput>material</computeroutput> on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>bindingStrength</computeroutput> is UsdShadeTokens-&gt;fallbackStrength, the value UsdShadeTokens-&gt;weakerThanDescendants is authored sparsely. To stamp out the bindingStrength value explicitly, clients can pass in UsdShadeTokens-&gt;weakerThanDescendants or UsdShadeTokens-&gt;strongerThanDescendants directly.</para>
<para>If <computeroutput>materialPurpose</computeroutput> is specified and isn&apos;t equal to UsdShadeTokens-&gt;allPurpose, the binding only applies to the specified material purpose.</para>
<para>Note that <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> is a SingleAppliedAPI schema which when applied updates the prim definition accordingly. This information on the prim definition is helpful in multiple queries and more performant. Hence its recommended to call <ref refid="class_usd_shade_material_binding_a_p_i_1a2f53a2b7092b62b49308efc966790b02" kindref="member">UsdShadeMaterialBindingAPI::Apply()</ref> when Binding a material.</para>
<para>Returns true on success, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a6aae72a298d18f8e9d9f021c29fe2a57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool Bind</definition>
        <argsstring>(const UsdCollectionAPI &amp;collection, const UsdShadeMaterial &amp;material, const TfToken &amp;bindingName=TfToken(), const TfToken &amp;bindingStrength=UsdShadeTokens-&gt;fallbackStrength, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>Bind</name>
        <param>
          <type>const <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> &amp;</type>
          <declname>collection</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> &amp;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingStrength</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;fallbackStrength</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Authors a collection-based binding, which binds the given <computeroutput>material</computeroutput> to the given <computeroutput>collection</computeroutput> on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>bindingName</computeroutput> establishes an identity for the binding that is unique on the prim. Attempting to establish two collection bindings of the same name on the same prim will result in the first binding simply being overridden. If <computeroutput>bindingName</computeroutput> is empty, it is set to the base-name of the collection being bound (which is the collection-name with any namespaces stripped out). If there are multiple collections with the same base-name being bound at the same prim, clients should pass in a unique binding name per binding, in order to preserve all bindings. The binding name used in constructing the collection-binding relationship name shoud not contain namespaces. Hence, a coding error is issued and no binding is authored if the provided value of <computeroutput>bindingName</computeroutput> is non-empty and contains namespaces.</para>
<para>If <computeroutput>bindingStrength</computeroutput> is <emphasis>UsdShadeTokens-&gt;fallbackStrength</emphasis>, the value UsdShadeTokens-&gt;weakerThanDescendants is authored sparsely, i.e. only when there is an existing binding with a different bindingStrength. To stamp out the bindingStrength value explicitly, clients can pass in UsdShadeTokens-&gt;weakerThanDescendants or UsdShadeTokens-&gt;strongerThanDescendants directly.</para>
<para>If <computeroutput>materialPurpose</computeroutput> is specified and isn&apos;t equal to UsdShadeTokens-&gt;allPurpose, the binding only applies to the specified material purpose.</para>
<para>Note that <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> is a SingleAppliedAPI schema which when applied updates the prim definition accordingly. This information on the prim definition is helpful in multiple queries and more performant. Hence its recommended to call <ref refid="class_usd_shade_material_binding_a_p_i_1a2f53a2b7092b62b49308efc966790b02" kindref="member">UsdShadeMaterialBindingAPI::Apply()</ref> when Binding a material.</para>
<para>Returns true on success, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a63a300bdd2c05ac7f287be95ee3a4bdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool UnbindDirectBinding</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>UnbindDirectBinding</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Unbinds the direct binding for the given material purpose (<computeroutput>materialPurpose</computeroutput>) on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>It accomplishes this by blocking the targets of the binding relationship in the current edit target.</para>
<para>This does not remove the <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> schema application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1af4585a2fa2f21f7ff50a08242bb1b932" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool UnbindCollectionBinding</definition>
        <argsstring>(const TfToken &amp;bindingName, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose) const</argsstring>
        <name>UnbindCollectionBinding</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <briefdescription>
<para>Unbinds the collection-based binding with the given <computeroutput>bindingName</computeroutput>, for the given <computeroutput>materialPurpose</computeroutput> on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>It accomplishes this by blocking the targets of the associated binding relationship in the current edit target.</para>
<para>If a binding was created without specifying a <computeroutput>bindingName</computeroutput>, then the correct <computeroutput>bindingName</computeroutput> to use for unbinding is the instance name of the targetted collection.</para>
<para>This does not remove the <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> schema application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a4aabc2a3c5aa77bb0e68e15856351026" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool UnbindAllBindings</definition>
        <argsstring>() const</argsstring>
        <name>UnbindAllBindings</name>
        <briefdescription>
<para>Unbinds all direct and collection-based bindings on this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1ad1feb52f8eade0d468d58d7d9d3517f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool RemovePrimFromBindingCollection</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;bindingName, const TfToken &amp;materialPurpose) const</argsstring>
        <name>RemovePrimFromBindingCollection</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
        </param>
        <briefdescription>
<para>Removes the specified <computeroutput>prim</computeroutput> from the collection targeted by the binding relationship corresponding to given <computeroutput>bindingName</computeroutput> and <computeroutput>materialPurpose</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the collection-binding relationship doesn&apos;t exist or if the targeted collection does not include the <computeroutput>prim</computeroutput>, then this does nothing and returns true.</para>
<para>If the targeted collection includes <computeroutput>prim</computeroutput>, then this modifies the collection by removing the prim from it (by invoking UsdCollectionAPI::RemovePrim()). This method can be used in conjunction with the Unbind*() methods (if desired) to guarantee that a prim has no resolved material binding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1ac88354cf7cf3dc1e3f12db6c71eaa1e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool AddPrimToBindingCollection</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;bindingName, const TfToken &amp;materialPurpose) const</argsstring>
        <name>AddPrimToBindingCollection</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
        </param>
        <briefdescription>
<para>Adds the specified <computeroutput>prim</computeroutput> to the collection targeted by the binding relationship corresponding to given <computeroutput>bindingName</computeroutput> and <computeroutput>materialPurpose</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the collection-binding relationship doesn&apos;t exist or if the targeted collection already includes the <computeroutput>prim</computeroutput>, then this does nothing and returns true.</para>
<para>If the targeted collection does not include <computeroutput>prim</computeroutput> (or excludes it explicitly), then this modifies the collection by adding the prim to it (by invoking UsdCollectionAPI::AddPrim()). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="636" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Bound Material Resolution</header>
      <description><para><anchor id="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution"/></para>
<para>Material resolution is the process of determining the final bound material for a given gprim (or <ref refid="class_usd_geom_subset" kindref="compound">UsdGeomSubset</ref>), for a given value of material purpose. It involves examining all the bindings on the prim and its ancestors, until a matching binding is found. The following set of rules are applied in the process: <itemizedlist>
<listitem>
<para>[1] Material bindings are inherited down the namespace chain. Bindings lower in namespace (closer to leaf gprims) are stronger than bindings on ancestors, unless they have their binding-strength set to <emphasis>UsdShadeTokens-&gt;strongerThanDescendants</emphasis>. </para>
</listitem>
<listitem>
<para>[2] A collection binding only applies to members of the collection that are at or beneath the prim owning the binding relationship. </para>
</listitem>
<listitem>
<para>[3] The purpose of the resolved material binding must either match the requested special (i.e. restricted) purpose or be an all-purpose binding. The restricted purpose binding, if available is preferred over an all-purpose binding. </para>
</listitem>
<listitem>
<para>[4] At any given prim, the collection-based bindings are considered to be stronger than the direct bindings. This reflects our belief that the combination would appear primarily to define a &quot;fallback&quot; material to be used by any child prims that are not targeted by a more specific assignment </para>
</listitem>
<listitem>
<para>[5] Collection-based binding relationships are applied in native property order, with the earlier ordered binding relationships being stronger. </para>
</listitem>
<listitem>
<para>[6] The &quot;namespace specificity&quot; with which a prim is included in a collection is irrelevant to the binding strength of the collection. For example, if a prim contains the ordered collection bindings material:binding:collection:metalBits and material:binding:collection:plasticBits, each of which targets a collection of the same name, then if metalBits includes &lt;/Chair/Back&gt;, while plasticBits includes &lt;/Chair/Back/Brace/Rivet&gt;, the binding for &lt;/Chair/Back/Brace/Rivet&gt; will be metalBits, because the metalBits collection is bound more strongly than the plasticBits, and includes an ancestor of &lt;/Chair/Back/Brace/Rivet&gt;.  </para>
</listitem>
</itemizedlist>
</para>
<para><simplesect kind="note"><para>If a material binding relationship is a built-in property defined as part of a typed prim schema, a fallback value should not be provided for it. This is because the &quot;material resolution&quot; algorithm only conisders <emphasis>authored</emphasis> properties. </para>
</simplesect>
</para>
</description>
      <memberdef kind="typedef" id="class_usd_shade_material_binding_a_p_i_1a1635d02ff22ede6e905293a85fb505bf" prot="public" static="no">
        <type>tbb::concurrent_unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, std::unique_ptr&lt; <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionAPI::MembershipQuery</ref> &gt;, SdfPath::Hash &gt;</type>
        <definition>using CollectionQueryCache =  tbb::concurrent_unordered_map&lt;SdfPath, std::unique_ptr&lt;UsdCollectionAPI::MembershipQuery&gt;, SdfPath::Hash&gt;</definition>
        <argsstring></argsstring>
        <name>CollectionQueryCache</name>
        <briefdescription>
<para>An unordered list of collection paths mapped to the associated collection&apos;s MembershipQuery object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to cache the MembershipQuery objects for collections that are encountered during binding resolution for a tree of prims. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="694" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_shade_material_binding_a_p_i_1abdeccfa43c1785117fc134df3cdf7fb2" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="class_usd_shade_material_binding_a_p_i_1_1_direct_binding" kindref="compound">DirectBinding</ref> &gt;</type>
        <definition>using DirectBindingPtr =  std::unique_ptr&lt;DirectBinding&gt;</definition>
        <argsstring></argsstring>
        <name>DirectBindingPtr</name>
        <briefdescription>
<para>Alias for a unique_ptr to a <ref refid="class_usd_shade_material_binding_a_p_i_1_1_direct_binding" kindref="compound">DirectBinding</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="699" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_shade_material_binding_a_p_i_1aba030c381c98770af0b032ceef3def05" prot="public" static="no">
        <type>tbb::concurrent_unordered_map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, std::unique_ptr&lt; <ref refid="class_usd_shade_material_binding_a_p_i_1a2e91b78350472c07774396cfd7b640cf" kindref="member">BindingsAtPrim</ref> &gt;, SdfPath::Hash &gt;</type>
        <definition>using BindingsCache =  tbb::concurrent_unordered_map&lt;SdfPath, std::unique_ptr&lt;BindingsAtPrim&gt;, SdfPath::Hash&gt;</definition>
        <argsstring></argsstring>
        <name>BindingsCache</name>
        <briefdescription>
<para>An unordered list of prim-paths mapped to the corresponding set of bindings at the associated prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used when computing resolved bindings to avoid redundant computations for the shared ancestor prims and to re-use the computed results for leaf prims. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="735" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_shade_material_binding_a_p_i_1a2e91b78350472c07774396cfd7b640cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct BindingsAtPrim</definition>
        <argsstring></argsstring>
        <name>BindingsAtPrim</name>
        <briefdescription>
<para>BindingsAtPrim needs to invoke private _GetCollectionBindings(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="729" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1afac301f1d27508ac63f22c0bdbf597a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref></type>
        <definition>USDSHADE_API UsdShadeMaterial ComputeBoundMaterial</definition>
        <argsstring>(BindingsCache *bindingsCache, CollectionQueryCache *collectionQueryCache, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose, UsdRelationship *bindingRel=nullptr, bool supportLegacyBindings=true) const</argsstring>
        <name>ComputeBoundMaterial</name>
        <param>
          <type><ref refid="class_usd_shade_material_binding_a_p_i_1aba030c381c98770af0b032ceef3def05" kindref="member">BindingsCache</ref> *</type>
          <declname>bindingsCache</declname>
        </param>
        <param>
          <type><ref refid="class_usd_shade_material_binding_a_p_i_1a1635d02ff22ede6e905293a85fb505bf" kindref="member">CollectionQueryCache</ref> *</type>
          <declname>collectionQueryCache</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <param>
          <type><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> *</type>
          <declname>bindingRel</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>supportLegacyBindings</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Computes the resolved bound material for this prim, for the given material purpose. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload of ComputeBoundMaterial makes use of the BindingsCache (<computeroutput>bindingsCache</computeroutput>) and CollectionQueryCache (<computeroutput>collectionQueryCache</computeroutput>) that are passed in, to avoid redundant binding computations and computations of MembershipQuery objects for collections. It would be beneficial to make use of these when resolving bindings for a tree of prims. These caches are populated lazily as more and more bindings are resolved.</para>
<para>When the goal is to compute the bound material for a range (or list) of prims, it is recommended to use this version of <ref refid="class_usd_shade_material_binding_a_p_i_1afac301f1d27508ac63f22c0bdbf597a1" kindref="member">ComputeBoundMaterial()</ref>. Here&apos;s how you could compute the bindings of a range of prims efficiently in C++:</para>
<para><programlisting><codeline><highlight class="normal">std::vector&lt;std::pair&lt;UsdPrim,<sp/>UsdShadeMaterial&gt;<sp/>primBindings;<sp/></highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterialBindingAPI::BindingsCache<sp/>bindingsCache;</highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterialBindingAPI::CollectionQueryCache<sp/>collQueryCache;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(auto<sp/>prim<sp/>:<sp/>UsdPrimRange(rootPrim))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UsdShadeMaterial<sp/>boundMaterial<sp/>=<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UsdShadeMaterialBindingAPI(prim).ComputeBoundMaterial(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bindingsCache,<sp/>&amp;collQueryCache);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(boundMaterial)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primBindings.emplace_back({prim,<sp/>boundMaterial});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If <computeroutput>bindingRel</computeroutput> is not null, then it is set to the &quot;winning&quot; binding relationship.</para>
<para>Note the resolved bound material is considered valid if the target path of the binding relationship is a valid non-empty prim path. This makes sure winning binding relationship and the bound material remain consistent consistent irrespective of the presence/absence of prim at material path. For ascenario where ComputeBoundMaterial returns a invalid <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> with a valid winning bindingRel, clients can use the</para>
<para>static method <ref refid="class_usd_shade_material_binding_a_p_i_1aab37285c3d1f5c112a0c2e98e593417c" kindref="member">UsdShadeMaterialBindingAPI::GetResolvedTargetPathFromBindingRel</ref> to get the path of the resolved target identified by the winning bindingRel.</para>
<para>In order for backward compatibility with old assets not having MaterialBindingAPI applied, <computeroutput>supportLegacyBindings</computeroutput> defaults to true. Though its recommended for clients to update the assets to have MaterialBindingAPI applied for optimized computation of bound material.</para>
<para>Note: In a future release the default for <computeroutput>supportLegacyBindings</computeroutput> will be updated to &quot;false&quot;.</para>
<para>See <ref refid="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution" kindref="member">Bound Material Resolution</ref> for details on the material resolution process.</para>
<para>The python version of this method returns a tuple containing the bound material and the &quot;winning&quot; binding relationship. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a561daa02caa1227060372fc234729656" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref></type>
        <definition>USDSHADE_API UsdShadeMaterial ComputeBoundMaterial</definition>
        <argsstring>(const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose, UsdRelationship *bindingRel=nullptr, bool supportLegacyBindings=true) const</argsstring>
        <name>ComputeBoundMaterial</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <param>
          <type><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> *</type>
          <declname>bindingRel</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>supportLegacyBindings</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Computes the resolved bound material for this prim, for the given material purpose. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload does not utilize cached MembershipQuery object. However, it only computes the MembershipQuery of every collection that bound in the ancestor chain at most once.</para>
<para>If <computeroutput>bindingRel</computeroutput> is not null, then it is set to the winning binding relationship.</para>
<para>In order for backward compatibility with old assets not having MaterialBindingAPI applied, <computeroutput>supportLegacyBindings</computeroutput> defaults to true. Though its recommended for clients to update the assets to have MaterialBindingAPI applied for optimized computation of bound material.</para>
<para>Note: In a future release the default for <computeroutput>supportLegacyBindings</computeroutput> will be updated to &quot;false&quot;.</para>
<para>See <ref refid="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution" kindref="member">Bound Material Resolution</ref> for details on the material resolution process.</para>
<para>The python version of this method returns a tuple containing the bound material and the &quot;winning&quot; binding relationship. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a1efcadc0a7395b8ef68ad07b747e0a5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>static USDSHADE_API TfTokenVector GetMaterialPurposes</definition>
        <argsstring>()</argsstring>
        <name>GetMaterialPurposes</name>
        <briefdescription>
<para>Returns a vector of the possible values for the &apos;material purpose&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aab37285c3d1f5c112a0c2e98e593417c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>static USDSHADE_API const SdfPath GetResolvedTargetPathFromBindingRel</definition>
        <argsstring>(const UsdRelationship &amp;bindingRel)</argsstring>
        <name>GetResolvedTargetPathFromBindingRel</name>
        <param>
          <type>const <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &amp;</type>
          <declname>bindingRel</declname>
        </param>
        <briefdescription>
<para>returns the path of the resolved target identified by <computeroutput>bindingRel</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a2e91952be64d977bf1e91be3c6d09659" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> &gt;</type>
        <definition>static USDSHADE_API std::vector&lt;UsdShadeMaterial&gt; ComputeBoundMaterials</definition>
        <argsstring>(const std::vector&lt; UsdPrim &gt; &amp;prims, const TfToken &amp;materialPurpose=UsdShadeTokens-&gt;allPurpose, std::vector&lt; UsdRelationship &gt; *bindingRels=nullptr, bool supportLegacyBindings=true)</argsstring>
        <name>ComputeBoundMaterials</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt; &amp;</type>
          <declname>prims</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
          <defval><ref refid="usd_2usd_shade_2tokens_8h_1acd5d180f50410c958d4a0b2a88de0ac5" kindref="member">UsdShadeTokens</ref>-&gt;allPurpose</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &gt; *</type>
          <declname>bindingRels</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>supportLegacyBindings</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Static API for efficiently and concurrently computing the resolved material bindings for a vector of UsdPrims, <computeroutput>prims</computeroutput> for the given <computeroutput>materialPurpose</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the returned vector always matches the size of the input vector, <computeroutput>prims</computeroutput>. If a prim is not bound to any material, an invalid or empty <ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref> is returned at the index corresponding to it.</para>
<para>If the pointer <computeroutput>bindingRels</computeroutput> points to a valid vector, then it is populated with the set of all &quot;winning&quot; binding relationships.</para>
<para>In order for backward compatibility with old assets not having MaterialBindingAPI applied, <computeroutput>supportLegacyBindings</computeroutput> defaults to true. Though its recommended for clients to update the assets to have MaterialBindingAPI applied for optimized computation of bound material.</para>
<para>Note: In a future release the default for <computeroutput>supportLegacyBindings</computeroutput> will be updated to &quot;false&quot;.</para>
<para>The python version of this method returns a tuple containing two lists - the bound materials and the corresponding &quot;winning&quot; binding relationships. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="865" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Binding materials to subsets</header>
      <description><para><anchor id="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_Subsets"/></para>
<para>API to create, access and query the presence of GeomSubsets that are created for the purpose of binding materials.</para>
<para><simplesect kind="note"><para>GeomSubsets can only be created on valid <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> prims. Hence, this API only works when the prim held by the MaterialBindingAPI schema object is an imageable prim.</para>
</simplesect>
<simplesect kind="note"><para>Material bindings authored on GeomSubsets are honored by renderers only if their familyName is <bold>UsdShadeTokens-&gt;materialBind</bold>. This allows robust interchange of subset bindings between multiple DCC apps.</para>
</simplesect>
<simplesect kind="note"><para>The family type of the <emphasis>materialBind</emphasis> family of subsets defaults to UsdGeomTokens-&gt;nonOverlapping. It can be set to UsdGeomTokens-&gt;partition, using the API SetMaterialBindFaceSubsetsFamilyType(). It should never be set to UsdGeomTokens-&gt;unrestricted, since it is invalid for a piece of geometry to be bound to multiple materials.</para>
</simplesect>
Here&apos;s some sample code that shows how to create &quot;face&quot; subsets and and bind materials to them. <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>imageable<sp/>prim<sp/>under<sp/>which<sp/>subsets<sp/>must<sp/>be<sp/>created<sp/>and</highlight></codeline>
<codeline><highlight class="normal">//<sp/>bound.</highlight></codeline>
<codeline><highlight class="normal">UsdGeomImageable<sp/>mesh<sp/>=<sp/>UsdGeomImageable::Get(stage,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SdfPath(&quot;/path/to/meshPrim&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>materials<sp/>to<sp/>bind<sp/>to.</highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterial<sp/>plastic<sp/>=<sp/>UsdShadeMaterial::Get(stage,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SdfPath(&quot;/path/to/PlasticMaterial&quot;);</highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterial<sp/>metal<sp/>=<sp/>UsdShadeMaterial::Get(stage,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SdfPath(&quot;/path/to/MetalMaterial&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">VtIntArray<sp/>plasticFaces,<sp/>metalFaces;</highlight></codeline>
<codeline><highlight class="normal">//..<sp/>populate<sp/>faceIndices<sp/>here.</highlight></codeline>
<codeline><highlight class="normal">//..<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UsdShadeMaterialBindingAPI<sp/>meshBindingAPI(mesh.GetPrim());</highlight></codeline>
<codeline><highlight class="normal">UsdGeomSubset<sp/>plasticSubset<sp/>=<sp/>meshBindingAPI.CreateMaterialBindSubset(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;plasticSubset&quot;,<sp/>plasticFaces);</highlight></codeline>
<codeline><highlight class="normal">UsdGeomSubset<sp/>metalSubset<sp/>=<sp/>meshBindingAPI.CreateMaterialBindSubset(<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;metalSubset&quot;,<sp/>metalFaces);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Bind<sp/>materials<sp/>to<sp/>the<sp/>created<sp/>geom-subsets.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterialBindingAPI::Apply(plasticSubset.GetPrim()).Bind(plastic)</highlight></codeline>
<codeline><highlight class="normal">UsdShadeMaterialBindingAPI::Apply(metalSubset.GetPrim()).Bind(metal)</highlight></codeline>
</programlisting> </para>
</description>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a32d3590228a297a335855c150c4dea64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_geom_subset" kindref="compound">UsdGeomSubset</ref></type>
        <definition>USDSHADE_API UsdGeomSubset CreateMaterialBindSubset</definition>
        <argsstring>(const TfToken &amp;subsetName, const VtIntArray &amp;indices, const TfToken &amp;elementType=UsdGeomTokens-&gt;face)</argsstring>
        <name>CreateMaterialBindSubset</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>subsetName</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>elementType</declname>
          <defval><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">UsdGeomTokens</ref>-&gt;face</defval>
        </param>
        <briefdescription>
<para>Creates a GeomSubset named <computeroutput>subsetName</computeroutput> with element type, <computeroutput>elementType</computeroutput> and familyName <bold>materialBind<bold> below this prim. </bold></bold></para>
        </briefdescription>
        <detaileddescription>
<para>If a GeomSubset named <computeroutput>subsetName</computeroutput> already exists, then its &quot;familyName&quot; is updated to be UsdShadeTokens-&gt;materialBind and its indices (at <emphasis>default</emphasis> timeCode) are updated with the provided <computeroutput>indices</computeroutput> value before returning.</para>
<para>This method forces the familyType of the &quot;materialBind&quot; family of subsets to UsdGeomTokens-&gt;nonOverlapping if it&apos;s unset or explicitly set to UsdGeomTokens-&gt;unrestricted.</para>
<para>The default value <computeroutput>elementType</computeroutput> is UsdGeomTokens-&gt;face, as we expect materials to be bound most often to subsets of faces on meshes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="941" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1ae863ec4078344334e2c392223bc009fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::vector&lt; <ref refid="class_usd_geom_subset" kindref="compound">UsdGeomSubset</ref> &gt;</type>
        <definition>USDSHADE_API std::vector&lt;UsdGeomSubset&gt; GetMaterialBindSubsets</definition>
        <argsstring>()</argsstring>
        <name>GetMaterialBindSubsets</name>
        <briefdescription>
<para>Returns all the existing GeomSubsets with familyName=UsdShadeTokens-&gt;materialBind below this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1ac2124a9dff635a88a6e779c1e3d73ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>USDSHADE_API bool SetMaterialBindSubsetsFamilyType</definition>
        <argsstring>(const TfToken &amp;familyType)</argsstring>
        <name>SetMaterialBindSubsetsFamilyType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>familyType</declname>
        </param>
        <briefdescription>
<para>Author the <emphasis>familyType</emphasis> of the &quot;materialBind&quot; family of GeomSubsets on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The default <computeroutput>familyType</computeroutput> is <emphasis>UsdGeomTokens-&gt;nonOverlapping<emphasis>. It can be set to <emphasis>UsdGeomTokens-&gt;partition</emphasis> to indicate that the entire imageable prim is included in the union of all the &quot;materialBind&quot; subsets. The family type should never be set to UsdGeomTokens-&gt;unrestricted, since it is invalid for a single piece of geometry (in this case, a subset) to be bound to more than one material. Hence, a coding error is issued if <computeroutput>familyType</computeroutput> is UsdGeomTokens-&gt;unrestricted.</emphasis></emphasis></para>
<para><emphasis><emphasis><simplesect kind="see"><para><ref refid="class_usd_geom_subset_1ad0c186e761984f80850e2e820f5ac6f9" kindref="member">UsdGeomSubset::SetFamilyType</ref> </para>
</simplesect>
</emphasis></emphasis></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a1e136ce795a8e1d696cd9d9e58f32b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDSHADE_API TfToken GetMaterialBindSubsetsFamilyType</definition>
        <argsstring>()</argsstring>
        <name>GetMaterialBindSubsetsFamilyType</name>
        <briefdescription>
<para>Returns the familyType of the family of &quot;materialBind&quot; GeomSubsets on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, materialBind subsets have familyType=&quot;nonOverlapping&quot;, but they can also be tagged as a &quot;partition&quot;, using SetMaterialBindFaceSubsetsFamilyType().</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_subset_1af278c1bd6603a66ffcb1a033f395a876" kindref="member">UsdGeomSubset::GetFamilyNameAttr</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="976" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aa0ac5978f3a715972da087f4bd8acabf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanContainPropertyName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>CanContainPropertyName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Test whether a given <computeroutput>name</computeroutput> contains the &quot;material:binding:&quot; prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="981" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_shade_material_binding_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="157" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_shade_material_binding_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="249" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1acd0e5eab9c41c5676b448005366f868e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeMaterialBindingAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdShadeMaterialBindingAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_shade_material_binding_a_p_i_1a06debb084cfca6d77ce69b8c25407ac1" kindref="member">UsdShadeMaterialBindingAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="163" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aa11b3893c72c1702ee266f6aecb27d9c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdShadeMaterialBindingAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdShadeMaterialBindingAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="171" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1ade63f046ab09aafaa675d3e2c8551cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API</type>
        <definition>virtual USDSHADE_API ~UsdShadeMaterialBindingAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdShadeMaterialBindingAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="178" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDSHADE_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a06debb084cfca6d77ce69b8c25407ac1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref></type>
        <definition>static USDSHADE_API UsdShadeMaterialBindingAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdShadeMaterialBindingAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a8fc116152496d8b782d16b80bba3c949" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API bool</type>
        <definition>static USDSHADE_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a2f53a2b7092b62b49308efc966790b02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref></type>
        <definition>static USDSHADE_API UsdShadeMaterialBindingAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;MaterialBindingAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="238" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a9b47498492265f1a224b6ec58b109a88" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDSHADE_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="245" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1aa9360fb676c331455b1c118acc45d8e9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDSHADE_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="253" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDSHADE_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDSHADE_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a0fdac0fc8de70d04d6c51be6be7593c7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>UsdRelationship _CreateDirectBindingRel</definition>
        <argsstring>(const TfToken &amp;materialPurpose) const</argsstring>
        <name>_CreateDirectBindingRel</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a636ad0f4b744038b6279980f4c4f5339" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>UsdRelationship _CreateCollectionBindingRel</definition>
        <argsstring>(const TfToken &amp;bindingName, const TfToken &amp;materialPurpose) const</argsstring>
        <name>_CreateCollectionBindingRel</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>materialPurpose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="990" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_material_binding_a_p_i_1a0f7aee9560ccc0fe47ab99d8a88d6a43" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CollectionBindingVector</type>
        <definition>CollectionBindingVector _GetCollectionBindings</definition>
        <argsstring>(const TfTokenVector &amp;collBindingPropertyNames) const</argsstring>
        <name>_GetCollectionBindings</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>collBindingPropertyNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/materialBindingAPI.h" line="997" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_shade_material_binding_a_p_i" kindref="compound">UsdShadeMaterialBindingAPI</ref> is an API schema that provides an interface for binding materials to prims or collections of prims (represented by <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> objects). </para>
    </briefdescription>
    <detaileddescription>
<para>In the USD shading model, each renderable gprim computes a single <bold>resolved Material</bold> that will be used to shade the gprim (exceptions, of course, for gprims that possess UsdGeomSubsets, as each subset can be shaded by a different Material). A gprim <bold>and each of its ancestor prims</bold> can possess, through the MaterialBindingAPI, both a <bold>direct</bold> binding to a Material, and any number of <bold>collection-based</bold> bindings to Materials; each binding can be generic or declared for a particular <bold>purpose</bold>, and given a specific <bold>binding strength</bold>. It is the process of &quot;material resolution&quot; (see <ref refid="class_usd_shade_material_binding_a_p_i_1UsdShadeMaterialBindingAPI_MaterialResolution" kindref="member">UsdShadeMaterialBindingAPI_MaterialResolution</ref>) that examines all of these bindings, and selects the one Material that best matches the client&apos;s needs.</para>
<para>The intent of <bold>purpose</bold> is that each gprim should be able to resolve a Material for any given purpose, which implies it can have differently bound materials for different purposes. There are two <emphasis>special</emphasis> values of <bold>purpose</bold> defined in UsdShade, although the API fully supports specifying arbitrary values for it, for the sake of extensibility: <itemizedlist>
<listitem>
<para><bold>UsdShadeTokens-&gt;full</bold>: to be used when the purpose of the render is entirely to visualize the truest representation of a scene, considering all lighting and material information, at highest fidelity.</para>
<para></para>
</listitem>
<listitem>
<para><bold>UsdShadeTokens-&gt;preview</bold>: to be used when the render is in service of a goal other than a high fidelity &quot;full&quot; render (such as scene manipulation, modeling, or realtime playback). Latency and speed are generally of greater concern for preview renders, therefore preview materials are generally designed to be &quot;lighterweight&quot; compared to full materials.</para>
</listitem>
</itemizedlist>
A binding can also have no specific purpose at all, in which case, it is considered to be the fallback or all-purpose binding (denoted by the empty-valued token <bold>UsdShadeTokens-&gt;allPurpose</bold>).</para>
<para>The <bold>purpose</bold> of a material binding is encoded in the name of the binding relationship. <itemizedlist>
<listitem>
<para>In the case of a direct binding, the <emphasis>allPurpose</emphasis> binding is represented by the relationship named <bold>material:binding</bold>. Special-purpose direct bindings are represented by relationships named <bold>material:binding:<emphasis>purpose</emphasis></bold>. A direct binding relationship must have a single target path that points to a <bold><ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref></bold>. </para>
</listitem>
<listitem>
<para>In the case of a collection-based binding, the <emphasis>allPurpose</emphasis> binding is represented by a relationship named <bold>material:binding:collection:<emphasis>bindingName</emphasis></bold>, where <bold>bindingName</bold> establishes an identity for the binding that is unique on the prim. Attempting to establish two collection bindings of the same name on the same prim will result in the first binding simply being overridden. A special-purpose collection-based binding is represented by a relationship named <bold>material:binding:collection:<emphasis>purpose:bindingName</emphasis></bold>. A collection-based binding relationship must have exacly two targets, one of which should be a collection-path (see ef <ref refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" kindref="member">UsdCollectionAPI::GetCollectionPath()</ref>) and the other should point to a <bold><ref refid="class_usd_shade_material" kindref="compound">UsdShadeMaterial</ref></bold>. In the future, we may allow a single collection binding to target multiple collections, if we can establish a reasonable round-tripping pattern for applications that only allow a single collection to be associated with each Material.  </para>
</listitem>
</itemizedlist>
</para>
<para><bold>Note:</bold> Both <bold>bindingName</bold> and <bold>purpose</bold> must be non-namespaced tokens. This allows us to know the role of a binding relationship simply from the number of tokens in it. <itemizedlist>
<listitem>
<para><bold>Two tokens</bold>: the fallback, &quot;all purpose&quot;, direct binding, <emphasis>material:binding</emphasis> </para>
</listitem>
<listitem>
<para><bold>Three tokens</bold>: a purpose-restricted, direct, fallback binding, e.g. material:binding:preview </para>
</listitem>
<listitem>
<para><bold>Four tokens</bold>: an all-purpose, collection-based binding, e.g. material:binding:collection:metalBits </para>
</listitem>
<listitem>
<para><bold>Five tokens</bold>: a purpose-restricted, collection-based binding, e.g. material:binding:collection:full:metalBits </para>
</listitem>
</itemizedlist>
</para>
<para>A <bold>binding-strength</bold> value is used to specify whether a binding authored on a prim should be weaker or stronger than bindings that appear lower in namespace. We encode the binding strength with as token-valued metadata <bold>&apos;bindMaterialAs&apos;</bold> for future flexibility, even though for now, there are only two possible values: <emphasis>UsdShadeTokens-&gt;weakerThanDescendants</emphasis> and <emphasis>UsdShadeTokens-&gt;strongerThanDescendants</emphasis>. When binding-strength is not authored (i.e. empty) on a binding-relationship, the default behavior matches UsdShadeTokens-&gt;weakerThanDescendants.</para>
<para><simplesect kind="note"><para>If a material binding relationship is a built-in property defined as part of a typed prim&apos;s schema, a fallback value should not be provided for it. This is because the &quot;material resolution&quot; algorithm only conisders <emphasis>authored</emphasis> properties. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8170">
        <label>UsdShadeMaterialBindingAPI</label>
        <link refid="class_usd_shade_material_binding_a_p_i"/>
        <childnode refid="8171" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8172">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8171">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8172" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8173">
        <label>UsdShadeMaterialBindingAPI</label>
        <link refid="class_usd_shade_material_binding_a_p_i"/>
        <childnode refid="8174" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8175">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8174">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8175" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdShade/materialBindingAPI.h" line="152" column="1" bodyfile="pxr/usd/usdShade/materialBindingAPI.h" bodystart="151" bodyend="999"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a636ad0f4b744038b6279980f4c4f5339" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_CreateCollectionBindingRel</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a0fdac0fc8de70d04d6c51be6be7593c7" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_CreateDirectBindingRel</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a0f7aee9560ccc0fe47ab99d8a88d6a43" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetCollectionBindings</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a9b47498492265f1a224b6ec58b109a88" prot="protected" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aa9360fb676c331455b1c118acc45d8e9" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a5dfe3da94c3b2153585c9bd276122e76" prot="private" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1ac88354cf7cf3dc1e3f12db6c71eaa1e5" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>AddPrimToBindingCollection</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a2f53a2b7092b62b49308efc966790b02" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>Apply</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a9e6ca94c7d1d6ffeb4372641be0a8432" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>Bind</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a6aae72a298d18f8e9d9f021c29fe2a57" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>Bind</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a2e91b78350472c07774396cfd7b640cf" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>BindingsAtPrim</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aba030c381c98770af0b032ceef3def05" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>BindingsCache</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a8fc116152496d8b782d16b80bba3c949" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aa0ac5978f3a715972da087f4bd8acabf" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>CanContainPropertyName</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a739afa0918dd03e8237ac0ff3784841c" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>CollectionBindingVector</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a1635d02ff22ede6e905293a85fb505bf" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>CollectionQueryCache</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1afac301f1d27508ac63f22c0bdbf597a1" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>ComputeBoundMaterial</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a561daa02caa1227060372fc234729656" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>ComputeBoundMaterial</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a2e91952be64d977bf1e91be3c6d09659" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>ComputeBoundMaterials</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a32d3590228a297a335855c150c4dea64" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>CreateMaterialBindSubset</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1abdeccfa43c1785117fc134df3cdf7fb2" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>DirectBindingPtr</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a06debb084cfca6d77ce69b8c25407ac1" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>Get</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aa06d78748549f133d1de1fca5cac1053" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetCollectionBindingRel</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a7d0a90ab378da4797a78064fdcdcdb0f" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetCollectionBindingRels</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1af3d1f9bc7db96518c2ca169aa13d2e93" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetCollectionBindings</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a10f47d610330759462c779a87d894c27" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetDirectBinding</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aa763d2d24d9f12b26bcca7d711eff7d7" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetDirectBindingRel</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a080383d84003f27f1ef34629014d1c7e" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetMaterialBindingStrength</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1ae863ec4078344334e2c392223bc009fa" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetMaterialBindSubsets</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a1e136ce795a8e1d696cd9d9e58f32b57" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetMaterialBindSubsetsFamilyType</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a1efcadc0a7395b8ef68ad07b747e0a5c" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetMaterialPurposes</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aab37285c3d1f5c112a0c2e98e593417c" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetResolvedTargetPathFromBindingRel</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1abf3ddf536a1d8f4757037f1d1958b5e1" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1ad1feb52f8eade0d468d58d7d9d3517f5" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>RemovePrimFromBindingCollection</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a12e6f34da614e14b18a07a4044a688c7" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>SetMaterialBindingStrength</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1ac2124a9dff635a88a6e779c1e3d73ea9" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>SetMaterialBindSubsetsFamilyType</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a4aabc2a3c5aa77bb0e68e15856351026" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UnbindAllBindings</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1af4585a2fa2f21f7ff50a08242bb1b932" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UnbindCollectionBinding</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1a63a300bdd2c05ac7f287be95ee3a4bdf" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UnbindDirectBinding</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1acd0e5eab9c41c5676b448005366f868e" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdShadeMaterialBindingAPI</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1aa11b3893c72c1702ee266f6aecb27d9c" prot="public" virt="non-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>UsdShadeMaterialBindingAPI</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_shade_material_binding_a_p_i_1ade63f046ab09aafaa675d3e2c8551cea" prot="public" virt="virtual"><scope>UsdShadeMaterialBindingAPI</scope><name>~UsdShadeMaterialBindingAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
