<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_matrix2f" kind="class" language="C++" prot="public">
    <compoundname>GfMatrix2f</compoundname>
    <includes refid="matrix2f_8h" local="no">matrix2f.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_matrix2f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" static="no">
        <type>float</type>
        <definition>typedef float ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="64" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_matrix2f_1aa1e57e1649aa43fa284959654bc9784a" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="66" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_matrix2f_1a0d7184866d68bd99f6685029368bf09e" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numColumns</definition>
        <argsstring></argsstring>
        <name>numColumns</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="67" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_matrix2f_1a677fce5e8e702626b5e084ef1c046fba" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix_data" kindref="compound">GfMatrixData</ref>&lt; float, 2, 2 &gt;</type>
        <definition>GfMatrixData&lt;float, 2, 2&gt; _mtx</definition>
        <argsstring></argsstring>
        <name>_mtx</name>
        <briefdescription>
<para>Matrix storage, in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="352" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_matrix2f_1a566b8980a12a1004609d5d97549cb729" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GfMatrix2d</definition>
        <argsstring></argsstring>
        <name>GfMatrix2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="355" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1abbdf9c7e427b813d43fec06d1405b489" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfMatrix2f const &amp;m)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="225" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1afe9d68c25596c1bf8db050f0ab6aacbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator *</definition>
        <argsstring>(const GfMatrix2f &amp;m1, double d)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="282" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1ac6b98a8d5af0b82a3025fc15d8957b23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator *</definition>
        <argsstring>(double d, const GfMatrix2f &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="290" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1ae5f4b49c3c385e019e578d091850dcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GF_API friend GfMatrix2f operator -</definition>
        <argsstring>(const GfMatrix2f &amp;m)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the unary negation of matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1acff428b869214e19e9ad5201d2f5ba44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator+</definition>
        <argsstring>(const GfMatrix2f &amp;m1, const GfMatrix2f &amp;m2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m2</emphasis> to <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="308" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1a3f32a2b98ab0ff792d2241f7db04478d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator -</definition>
        <argsstring>(const GfMatrix2f &amp;m1, const GfMatrix2f &amp;m2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m2</emphasis> from <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="316" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1ac04e229ac0e3aa827c9a22290bc94ec9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator *</definition>
        <argsstring>(const GfMatrix2f &amp;m1, const GfMatrix2f &amp;m2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Multiplies matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="324" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1aa31c87186d054d32f0b1713011bf2776" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GfMatrix2f operator/</definition>
        <argsstring>(const GfMatrix2f &amp;m1, const GfMatrix2f &amp;m2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Divides matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis> (that is, <computeroutput>m1 * inv(m2)</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="332" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1ad85937e3f55ded10727d6c3368eb2d39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f operator *</definition>
        <argsstring>(const GfMatrix2f &amp;m, const GfVec2f &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="338" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2f_1aa0772dd7bfb68429d0a91fb08e3f0815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f operator *</definition>
        <argsstring>(const GfVec2f &amp;vec, const GfMatrix2f &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="344" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="344" bodyend="347"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_matrix2f_1a2ba55e69d282d6943b2676975bc41203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>()=default</argsstring>
        <name>GfMatrix2f</name>
        <briefdescription>
<para>Default constructor. Leaves the matrix component values undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a7b703ce572d8d12d22507107b8ecc9d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>(float m00, float m01, float m10, float m11)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>float</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m11</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from 4 independent <computeroutput>float</computeroutput> values, specified in row-major order. For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="75" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a557471909adc1fe3e707e839000bf659" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>(const float m[2][2])</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>const float</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from a 2x2 array of <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="83" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1aecbc22e44b6caa3a4e07293f52eeff71" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>(float s)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="89" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a3de368b144f3b4d3fb8bfb6dac0a9f27" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>(int s)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>This explicit constructor initializes the matrix to <computeroutput>s</computeroutput> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="95" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a92b37462d462b2d16e247679f1ce367b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2f</definition>
        <argsstring>(const GfVec2f &amp;v)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to diagonal form, with the <emphasis>i</emphasis> th element on the diagonal set to <computeroutput>v[i]</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="101" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ac6dc8ccd81734a4710fa77a46448817c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2f</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of double. The vector is expected to be 2x2. If it is too big, only the first 2 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a973c29b575ac298997f2d71a6c46ee7e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2f</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of float. The vector is expected to be 2x2. If it is too big, only the first 2 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ae7a307d4aa9110b342952b997f269bf0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2f</definition>
        <argsstring>(const class GfMatrix2d &amp;m)</argsstring>
        <name>GfMatrix2f</name>
        <param>
          <type>const class <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This explicit constructor converts a &quot;double&quot; matrix to a &quot;float&quot; matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a8af4b1a62bab79a05b337c7ba2eb9645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRow</definition>
        <argsstring>(int i, const GfVec2f &amp;v)</argsstring>
        <name>SetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a row of the matrix from a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="128" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a80753be534afd2a160944ea74912a97e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetColumn</definition>
        <argsstring>(int i, const GfVec2f &amp;v)</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a column of the matrix from a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="134" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ae6e74277ee59a43363eda10e7aa3cf82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f GetRow</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a row of the matrix as a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="140" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1af6702ab937f0a26e84745a7bb73bdf79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GfVec2f GetColumn</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a column of the matrix as a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="145" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1abf8596bb3cd398fcf15e1d06d49df712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GfMatrix2f&amp; Set</definition>
        <argsstring>(float m00, float m01, float m10, float m11)</argsstring>
        <name>Set</name>
        <param>
          <type>float</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m11</declname>
        </param>
        <briefdescription>
<para>Sets the matrix from 4 independent <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="152" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a7a5940988acb3a836192527c5ed8a091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GfMatrix2f&amp; Set</definition>
        <argsstring>(const float m[2][2])</argsstring>
        <name>Set</name>
        <param>
          <type>const float</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Sets the matrix from a 2x2 array of <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="161" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a0f31f7cdd2e2b00a359fd2c1f3a0b132" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GfMatrix2f&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the matrix to the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="170" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1aa076e4703c67a19398ccabf5c70be619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GfMatrix2f&amp; SetZero</definition>
        <argsstring>()</argsstring>
        <name>SetZero</name>
        <briefdescription>
<para>Sets the matrix to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="175" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a1deb10d4e0592c572b309937dddd338b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; SetDiagonal</definition>
        <argsstring>(float s)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a23d832c748858a8f1404e0624be2e81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; SetDiagonal</definition>
        <argsstring>(const GfVec2f &amp;)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Sets the matrix to have diagonal (<computeroutput>v[0], v[1]</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1adf22c5c32237bb9903a77e716f13dd17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float *</type>
        <definition>GF_API float* Get</definition>
        <argsstring>(float m[2][2]) const</argsstring>
        <name>Get</name>
        <param>
          <type>float</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Fills a 2x2 array of <computeroutput>float</computeroutput> values with the values in the matrix, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a0983a49fcb2351e470bd415722cc4682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns raw access to components of matrix as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="194" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1aebe8a34a6aeec01aa4b8bc6fad8de6ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns const raw access to components of matrix as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="200" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a09baf4d047c68ac25c606ac7234e9fa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* GetArray</definition>
        <argsstring>()</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="205" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a688e9b95af734597fbfe3f83d15ef6b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as a const array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="210" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a9af5d45c48cba0e867e5ce49c44e4ff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* operator []</definition>
        <argsstring>(int i)</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 2 <computeroutput>float</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="217" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1aca0d3027d7c3e01fa1418715eab760ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* operator []</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 2 <computeroutput>float</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="222" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ab3dd93deadd44c7af8ed4ad2de9940d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix2d &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a57a6b96b954f1604ca1ba257ef356df0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix2f &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a85ce5682db3678af3b8a001ba07fde2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix2d &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="246" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ab0b10afcb45578fcef29f893d6d23f60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix2f &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="252" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1af19310209a127c2ec06e1de21dbccaf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GF_API GfMatrix2f GetTranspose</definition>
        <argsstring>() const</argsstring>
        <name>GetTranspose</name>
        <briefdescription>
<para>Returns the transpose of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1ae80f79e4e79a4b1b1391387b6315031b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref></type>
        <definition>GF_API GfMatrix2f GetInverse</definition>
        <argsstring>(double *det=NULL, double eps=0) const</argsstring>
        <name>GetInverse</name>
        <param>
          <type>double *</type>
          <declname>det</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the inverse of the matrix, or FLT_MAX * <ref refid="class_gf_matrix2f_1a0f31f7cdd2e2b00a359fd2c1f3a0b132" kindref="member">SetIdentity()</ref> if the matrix is singular. </para>
        </briefdescription>
        <detaileddescription>
<para>(FLT_MAX is the largest value a <computeroutput>float</computeroutput> can have, as defined by the system.) The matrix is considered singular if the determinant is less than or equal to the optional parameter <emphasis>eps</emphasis>. If <emphasis>det</emphasis> is non-null, <computeroutput>*det</computeroutput> is set to the determinant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDeterminant</definition>
        <argsstring>() const</argsstring>
        <name>GetDeterminant</name>
        <briefdescription>
<para>Returns the determinant of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a82c922b3d96cfd4f167010ab276a7856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; operator *=</definition>
        <argsstring>(const GfMatrix2f &amp;m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Post-multiplies matrix <emphasis>m</emphasis> into this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a35835954b090b78332cc9ea4bf700b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; operator *=</definition>
        <argsstring>(double)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Multiplies the matrix by a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a53afc1f53ba8b340f194895a32cf0af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; operator+=</definition>
        <argsstring>(const GfMatrix2f &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m</emphasis> to this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2f_1a3411bc2c555c338ebb6f34404c38cb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
        <definition>GF_API GfMatrix2f&amp; operator -=</definition>
        <argsstring>(const GfMatrix2f &amp;m)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m</emphasis> from this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="301" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores a 2x2 matrix of <computeroutput>float</computeroutput> elements. </para>
    </briefdescription>
    <detaileddescription>
<para>A basic type.</para>
<para>Matrices are defined to be in row-major order, so <computeroutput>matrix[i][j]</computeroutput> indexes the element in the <emphasis>i</emphasis> th row and the <emphasis>j</emphasis> th column. </para>
    </detaileddescription>
    <location file="pxr/base/gf/matrix2f.h" line="62" column="1" bodyfile="pxr/base/gf/matrix2f.h" bodystart="61" bodyend="356"/>
    <listofallmembers>
      <member refid="class_gf_matrix2f_1a677fce5e8e702626b5e084ef1c046fba" prot="private" virt="non-virtual"><scope>GfMatrix2f</scope><name>_mtx</name></member>
      <member refid="class_gf_matrix2f_1a0983a49fcb2351e470bd415722cc4682" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>data</name></member>
      <member refid="class_gf_matrix2f_1aebe8a34a6aeec01aa4b8bc6fad8de6ce" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>data</name></member>
      <member refid="class_gf_matrix2f_1adf22c5c32237bb9903a77e716f13dd17" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>Get</name></member>
      <member refid="class_gf_matrix2f_1a09baf4d047c68ac25c606ac7234e9fa3" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix2f_1a688e9b95af734597fbfe3f83d15ef6b8" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix2f_1af6702ab937f0a26e84745a7bb73bdf79" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetColumn</name></member>
      <member refid="class_gf_matrix2f_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetDeterminant</name></member>
      <member refid="class_gf_matrix2f_1ae80f79e4e79a4b1b1391387b6315031b" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetInverse</name></member>
      <member refid="class_gf_matrix2f_1ae6e74277ee59a43363eda10e7aa3cf82" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetRow</name></member>
      <member refid="class_gf_matrix2f_1af19310209a127c2ec06e1de21dbccaf0" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GetTranspose</name></member>
      <member refid="class_gf_matrix2f_1a566b8980a12a1004609d5d97549cb729" prot="private" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2f_1a2ba55e69d282d6943b2676975bc41203" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1a7b703ce572d8d12d22507107b8ecc9d0" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1a557471909adc1fe3e707e839000bf659" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1aecbc22e44b6caa3a4e07293f52eeff71" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1a3de368b144f3b4d3fb8bfb6dac0a9f27" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1a92b37462d462b2d16e247679f1ce367b" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1ac6dc8ccd81734a4710fa77a46448817c" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1a973c29b575ac298997f2d71a6c46ee7e" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1ae7a307d4aa9110b342952b997f269bf0" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2f_1abbdf9c7e427b813d43fec06d1405b489" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>hash_value</name></member>
      <member refid="class_gf_matrix2f_1a0d7184866d68bd99f6685029368bf09e" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>numColumns</name></member>
      <member refid="class_gf_matrix2f_1aa1e57e1649aa43fa284959654bc9784a" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>numRows</name></member>
      <member refid="class_gf_matrix2f_1a85ce5682db3678af3b8a001ba07fde2e" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix2f_1ab0b10afcb45578fcef29f893d6d23f60" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix2f_1afe9d68c25596c1bf8db050f0ab6aacbb" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2f_1ac6b98a8d5af0b82a3025fc15d8957b23" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2f_1ac04e229ac0e3aa827c9a22290bc94ec9" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2f_1ad85937e3f55ded10727d6c3368eb2d39" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2f_1aa0772dd7bfb68429d0a91fb08e3f0815" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2f_1a82c922b3d96cfd4f167010ab276a7856" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix2f_1a35835954b090b78332cc9ea4bf700b58" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix2f_1ae5f4b49c3c385e019e578d091850dcb6" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator -</name></member>
      <member refid="class_gf_matrix2f_1a3f32a2b98ab0ff792d2241f7db04478d" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator -</name></member>
      <member refid="class_gf_matrix2f_1a3411bc2c555c338ebb6f34404c38cb2a" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator -=</name></member>
      <member refid="class_gf_matrix2f_1a9af5d45c48cba0e867e5ce49c44e4ff9" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator []</name></member>
      <member refid="class_gf_matrix2f_1aca0d3027d7c3e01fa1418715eab760ea" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator []</name></member>
      <member refid="class_gf_matrix2f_1acff428b869214e19e9ad5201d2f5ba44" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator+</name></member>
      <member refid="class_gf_matrix2f_1a53afc1f53ba8b340f194895a32cf0af5" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator+=</name></member>
      <member refid="class_gf_matrix2f_1aa31c87186d054d32f0b1713011bf2776" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator/</name></member>
      <member refid="class_gf_matrix2f_1ab3dd93deadd44c7af8ed4ad2de9940d7" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator==</name></member>
      <member refid="class_gf_matrix2f_1a57a6b96b954f1604ca1ba257ef356df0" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>operator==</name></member>
      <member refid="class_gf_matrix2f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>ScalarType</name></member>
      <member refid="class_gf_matrix2f_1abf8596bb3cd398fcf15e1d06d49df712" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>Set</name></member>
      <member refid="class_gf_matrix2f_1a7a5940988acb3a836192527c5ed8a091" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>Set</name></member>
      <member refid="class_gf_matrix2f_1a80753be534afd2a160944ea74912a97e" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetColumn</name></member>
      <member refid="class_gf_matrix2f_1a1deb10d4e0592c572b309937dddd338b" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix2f_1a23d832c748858a8f1404e0624be2e81c" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix2f_1a0f31f7cdd2e2b00a359fd2c1f3a0b132" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetIdentity</name></member>
      <member refid="class_gf_matrix2f_1a8af4b1a62bab79a05b337c7ba2eb9645" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetRow</name></member>
      <member refid="class_gf_matrix2f_1aa076e4703c67a19398ccabf5c70be619" prot="public" virt="non-virtual"><scope>GfMatrix2f</scope><name>SetZero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
