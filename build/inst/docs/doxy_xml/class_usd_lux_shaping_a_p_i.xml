<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_shaping_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxShapingAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="shaping_a_p_i_8h" local="no">shapingAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Conversion to and from UsdShadeConnectableAPI</header>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a536bc2374d49743b58c6288d21a07163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API</type>
        <definition>USDLUX_API UsdLuxShapingAPI</definition>
        <argsstring>(const UsdShadeConnectableAPI &amp;connectable)</argsstring>
        <name>UsdLuxShapingAPI</name>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>connectable</declname>
        </param>
        <briefdescription>
<para>Constructor that takes a ConnectableAPI object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allow implicit conversion of <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> to <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref></type>
        <definition>USDLUX_API UsdShadeConnectableAPI ConnectableAPI</definition>
        <argsstring>() const</argsstring>
        <name>ConnectableAPI</name>
        <briefdescription>
<para>Contructs and returns a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object with this shaping API prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that a valid <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> will only return a valid <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> if the its prim&apos;s Typed schema type is actually connectable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="360" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Outputs API</header>
      <description><para>Outputs represent a typed attribute on a shaping API whose value is computed externally. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a2ba17066845267892079570da4eadef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput CreateOutput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an output which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the output is created in the &quot;outputs:&quot; namespace. Outputs on a shaping API cannot be connected, as their value is assumed to be computed externally. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput GetOutput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested output if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a7ceff029383f362ac833a4414aa932cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeOutput&gt; GetOutputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetOutputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Outputs are represented by attributes in the &quot;outputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="391" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inputs API</header>
      <description><para>Inputs are connectable attribute with a typed value.</para>
<para>Shaping API parameters are encoded as inputs. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a49f83c685591e60db110db9e9b32c10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput CreateInput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an input which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the input is created in the &quot;inputs:&quot; namespace. Inputs on shaping API are connectable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput GetInput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested input if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a9a5eca34d13a31c615dad2391d20576f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeInput&gt; GetInputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetInputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Inputs are represented by attributes in the &quot;inputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="423" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_shaping_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="66" column="1" bodyfile="pxr/usd/usdLux/shapingAPI.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_shaping_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="158" column="1" bodyfile="pxr/usd/usdLux/shapingAPI.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ab4d330f5351bd69f745f0e3cc39ac1d1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxShapingAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxShapingAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_shaping_a_p_i_1a326570342c099ef34cfba06770391969" kindref="member">UsdLuxShapingAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="72" column="1" bodyfile="pxr/usd/usdLux/shapingAPI.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a4dff3fc3534a8998b3c959b1bef1e0cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxShapingAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxShapingAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="80" column="1" bodyfile="pxr/usd/usdLux/shapingAPI.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ad592fa32476e23077339a430cf50efb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxShapingAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxShapingAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a9633181196ab006be886f8d24fa0a633" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingFocusAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingFocusAttr</name>
        <briefdescription>
<para>A control to shape the spread of light. </para>
        </briefdescription>
        <detaileddescription>
<para>Higher focus values pull light towards the center and narrow the spread. Implemented as an off-axis cosine power exponent. TODO: clarify semantics</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:shaping:focus = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a5f61c99cdf3baf6b00718ed9b2bd0a6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingFocusAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingFocusAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1a9633181196ab006be886f8d24fa0a633" kindref="member">GetShapingFocusAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a52c73639f1efbf3f38d3fadce6d3e6b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingFocusTintAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingFocusTintAttr</name>
        <briefdescription>
<para>Off-axis color tint. </para>
        </briefdescription>
        <detaileddescription>
<para>This tints the emission in the falloff region. The default tint is black. TODO: clarify semantics</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>color3f inputs:shaping:focusTint = (0, 0, 0)</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Color3f   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1abab9f5c23fe37c5310435aa205d5e61f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingFocusTintAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingFocusTintAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1a52c73639f1efbf3f38d3fadce6d3e6b2" kindref="member">GetShapingFocusTintAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ac913b40277e487974568762431fdec62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingConeAngleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingConeAngleAttr</name>
        <briefdescription>
<para>Angular limit off the primary axis to restrict the light spread. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:shaping:cone:angle = 90</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a3ebabd5683833ebc6d7f1516c7fcc948" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingConeAngleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingConeAngleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1ac913b40277e487974568762431fdec62" kindref="member">GetShapingConeAngleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a70a07f3acf3a8898fb7cbadb28ae4c5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingConeSoftnessAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingConeSoftnessAttr</name>
        <briefdescription>
<para>Controls the cutoff softness for cone angle. </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: clarify semantics</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:shaping:cone:softness = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1afe8eba95ef51374da0eb0942a37ea4ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingConeSoftnessAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingConeSoftnessAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1a70a07f3acf3a8898fb7cbadb28ae4c5b" kindref="member">GetShapingConeSoftnessAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a77f9ac08490944d8096d075c14829e3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingIesFileAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingIesFileAttr</name>
        <briefdescription>
<para>An IES (Illumination Engineering Society) light profile describing the angular distribution of light. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>asset inputs:shaping:ies:file</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Asset   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a625cef5825c4c6a29734ca7543bb7811" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingIesFileAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingIesFileAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1a77f9ac08490944d8096d075c14829e3f" kindref="member">GetShapingIesFileAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a36b62167bddbf3125fc922d78d104d0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingIesAngleScaleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingIesAngleScaleAttr</name>
        <briefdescription>
<para>Rescales the angular distribution of the IES profile. </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: clarify semantics</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:shaping:ies:angleScale = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1acc94348bfed7dd21a7c6640e11adfc27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingIesAngleScaleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingIesAngleScaleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1a36b62167bddbf3125fc922d78d104d0c" kindref="member">GetShapingIesAngleScaleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1aec21256e93c403d0fa1871cf1a5cc457" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShapingIesNormalizeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShapingIesNormalizeAttr</name>
        <briefdescription>
<para>Normalizes the IES profile so that it affects the shaping of the light while preserving the overall energy output. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>bool inputs:shaping:ies:normalize = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1aeba4c1e5eea85a6d4780cef9a9324f32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShapingIesNormalizeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShapingIesNormalizeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_shaping_a_p_i_1aec21256e93c403d0fa1871cf1a5cc457" kindref="member">GetShapingIesNormalizeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="330" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a326570342c099ef34cfba06770391969" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref></type>
        <definition>static USDLUX_API UsdLuxShapingAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxShapingAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API bool</type>
        <definition>static USDLUX_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1affa1230c989fbfecfd0184309dbf832f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref></type>
        <definition>static USDLUX_API UsdLuxShapingAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;ShapingAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_lux_shaping_a_p_i" kindref="compound">UsdLuxShapingAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_shaping_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/shapingAPI.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Controls for shaping a light&apos;s emission. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7655">
        <label>UsdLuxShapingAPI</label>
        <link refid="class_usd_lux_shaping_a_p_i"/>
        <childnode refid="7656" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7657">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7656">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7657" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7658">
        <label>UsdLuxShapingAPI</label>
        <link refid="class_usd_lux_shaping_a_p_i"/>
        <childnode refid="7659" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7660">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7659">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7660" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/shapingAPI.h" line="61" column="1" bodyfile="pxr/usd/usdLux/shapingAPI.h" bodystart="60" bodyend="426"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1affa1230c989fbfecfd0184309dbf832f" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>Apply</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>ConnectableAPI</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a49f83c685591e60db110db9e9b32c10a" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateInput</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a2ba17066845267892079570da4eadef4" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateOutput</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a3ebabd5683833ebc6d7f1516c7fcc948" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingConeAngleAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1afe8eba95ef51374da0eb0942a37ea4ea" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingConeSoftnessAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a5f61c99cdf3baf6b00718ed9b2bd0a6a" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingFocusAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1abab9f5c23fe37c5310435aa205d5e61f" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingFocusTintAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1acc94348bfed7dd21a7c6640e11adfc27" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingIesAngleScaleAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a625cef5825c4c6a29734ca7543bb7811" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingIesFileAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1aeba4c1e5eea85a6d4780cef9a9324f32" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>CreateShapingIesNormalizeAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a326570342c099ef34cfba06770391969" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>Get</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetInput</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a9a5eca34d13a31c615dad2391d20576f" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetInputs</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetOutput</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a7ceff029383f362ac833a4414aa932cd" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetOutputs</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ac913b40277e487974568762431fdec62" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingConeAngleAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a70a07f3acf3a8898fb7cbadb28ae4c5b" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingConeSoftnessAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a9633181196ab006be886f8d24fa0a633" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingFocusAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a52c73639f1efbf3f38d3fadce6d3e6b2" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingFocusTintAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a36b62167bddbf3125fc922d78d104d0c" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingIesAngleScaleAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a77f9ac08490944d8096d075c14829e3f" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingIesFileAttr</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1aec21256e93c403d0fa1871cf1a5cc457" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>GetShapingIesNormalizeAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ab4d330f5351bd69f745f0e3cc39ac1d1" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdLuxShapingAPI</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a4dff3fc3534a8998b3c959b1bef1e0cd" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdLuxShapingAPI</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1a536bc2374d49743b58c6288d21a07163" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdLuxShapingAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxShapingAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdLuxShapingAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_shaping_a_p_i_1ad592fa32476e23077339a430cf50efb1" prot="public" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>~UsdLuxShapingAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxShapingAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
