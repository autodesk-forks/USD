<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_dual_quath" kind="class" language="C++" prot="public" final="yes">
    <compoundname>GfDualQuath</compoundname>
    <includes refid="dual_quath_8h" local="no">dualQuath.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_dual_quath_1a512284adad2afc1cb29997cf585d965d" prot="public" static="no">
        <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
        <definition>typedef GfHalf ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="70" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_dual_quath_1a4542d883dab678e836f82601a318c7e0" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quath" kindref="compound">GfQuath</ref></type>
        <definition>GfQuath _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="266" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_dual_quath_1af317d16994cc75e0018e911ca5f45727" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quath" kindref="compound">GfQuath</ref></type>
        <definition>GfQuath _dual</definition>
        <argsstring></argsstring>
        <name>_dual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="267" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_dual_quath_1a5aadc96e2319501c2326e17ef852ed05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuath</definition>
        <argsstring>()</argsstring>
        <name>GfDualQuath</name>
        <briefdescription>
<para>The default constructor leaves the dual quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="73" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a9e2dcef27aa464cf944d575cd9047824" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuath</definition>
        <argsstring>(GfHalf realVal)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>realVal</computeroutput> and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically must be normalized, reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="82" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a8a3e6f36366bff5fd8b6df92c7cbb076" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuath</definition>
        <argsstring>(const GfQuath &amp;real)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>real</computeroutput> quaternion and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="87" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a880be366bc2ac31f35d5ec46ca8a07c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuath</definition>
        <argsstring>(const GfQuath &amp;real, const GfQuath &amp;dual)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the real and dual parts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="92" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a8840a4ccbc2f527a03055aff38de2160" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuath</definition>
        <argsstring>(const GfQuath &amp;rotation, const GfVec3h &amp;translation)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>This constructor initializes from a rotation and a translation components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="97" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1ab95ef1c284406043ee1bab34a705ab26" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuath</definition>
        <argsstring>(const GfDualQuatd &amp;other)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a09d6b38090d9dc20f4a3431148c08fbb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuath</definition>
        <argsstring>(const GfDualQuatf &amp;other)</argsstring>
        <name>GfDualQuath</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1ae048339bbc5a5f4c14af2218d75f68b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(const GfQuath &amp;real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Sets the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="110" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1aa2c9dada386f8eb727a30811e9c685f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetDual</definition>
        <argsstring>(const GfQuath &amp;dual)</argsstring>
        <name>SetDual</name>
        <param>
          <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>Sets the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="115" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a073d8c6d51d59eaf4c3c6cf93a926a0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
        <definition>const GfQuath&amp; GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Returns the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="120" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a1f95102dee7243d5aef2a377b663d445" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quath" kindref="compound">GfQuath</ref> &amp;</type>
        <definition>const GfQuath&amp; GetDual</definition>
        <argsstring>() const</argsstring>
        <name>GetDual</name>
        <briefdescription>
<para>Returns the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="125" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a8069e703be349ad98d60cbc40e02613e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; <ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref>, <ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref> &gt;</type>
        <definition>GF_API std::pair&lt;GfHalf, GfHalf&gt; GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Returns geometric length of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1aa893cdccd612f3c1e051b61b68f42b69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GF_API GfDualQuath GetNormalized</definition>
        <argsstring>(GfHalf eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Returns a normalized (unit-length) version of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this returns the identity dual quaternion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1ae334c2aac45c13732ae2db02e384ecb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; <ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref>, <ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref> &gt;</type>
        <definition>GF_API std::pair&lt;GfHalf, GfHalf&gt; Normalize</definition>
        <argsstring>(GfHalf eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this dual quaternion in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this dual quaternion in place to unit length, returning the length before normalization. If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the dual quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a01b76f67a46f644b1669c94107266d52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GF_API GfDualQuath GetConjugate</definition>
        <argsstring>() const</argsstring>
        <name>GetConjugate</name>
        <briefdescription>
<para>Returns the conjugate of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a124d969b907e807379a2b1d387b42b78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GF_API GfDualQuath GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Returns the inverse of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1aec4ed92edc876f2c6402141b72d7c0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetTranslation</definition>
        <argsstring>(const GfVec3h &amp;translation)</argsstring>
        <name>SetTranslation</name>
        <param>
          <type>const <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Set the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1aaaee29cabc367009e1ae9d9e412f4d55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref></type>
        <definition>GF_API GfVec3h GetTranslation</definition>
        <argsstring>() const</argsstring>
        <name>GetTranslation</name>
        <briefdescription>
<para>Get the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1add5bd1b50bee82065191869c16610838" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfDualQuath &amp;dq) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="181" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1afc631d63a209bd9a34733d026660cd4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfDualQuath &amp;dq) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="188" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a61864176be148902dfede8f1c3f098df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
        <definition>GfDualQuath&amp; operator+=</definition>
        <argsstring>(const GfDualQuath &amp;dq)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="193" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1ae355712a7e174d56548a15d9901e0fad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
        <definition>GfDualQuath&amp; operator -=</definition>
        <argsstring>(const GfDualQuath &amp;dq)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="200" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="200" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a234d111b9e95e55203c5b350c52210b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
        <definition>GF_API GfDualQuath&amp; operator *=</definition>
        <argsstring>(const GfDualQuath &amp;dq)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Post-multiplies dual quaternion <computeroutput>dq</computeroutput> into this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1aec3716f720c2fbf77118e916338d91b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
        <definition>GfDualQuath&amp; operator *=</definition>
        <argsstring>(GfHalf s)</argsstring>
        <name>operator *=</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="211" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1a0884f8579797c533d5b2024e19b1a989" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
        <definition>GfDualQuath&amp; operator/=</definition>
        <argsstring>(GfHalf s)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="218" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1ad2517d099c926fadaeb45067be24105d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref></type>
        <definition>GF_API GfVec3h Transform</definition>
        <argsstring>(const GfVec3h &amp;vec) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="263" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_dual_quath_1aa96b553b33af97a0ea2b1133d829b5a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>static GfDualQuath GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Returns the zero dual quaternion, which has a real part of (0,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="131" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quath_1afda36f3b04b57e3326baa26df6df6522" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>static GfDualQuath GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Returns the identity dual quaternion, which has a real part of (1,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="137" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="137" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_dual_quath_1a40444ad66965a4202001c948d0d85931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfDualQuath &amp;dq)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="175" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1aa9f398abb4f42c401356a967fa2f1d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator+</definition>
        <argsstring>(const GfDualQuath &amp;dq1, const GfDualQuath &amp;dq2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="223" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1a1c53c3a9a31c732e362740fd943bfd9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator -</definition>
        <argsstring>(const GfDualQuath &amp;dq1, const GfDualQuath &amp;dq2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="230" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1a3bb736c661a95bb5791b1a7d2e00d766" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator *</definition>
        <argsstring>(const GfDualQuath &amp;dq1, const GfDualQuath &amp;dq2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternions <computeroutput>dq1</computeroutput> and <computeroutput>dq2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="237" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1a10b203dfafd43a32999a1be264896d8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator *</definition>
        <argsstring>(const GfDualQuath &amp;dq, GfHalf s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="244" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1a64444b22df2051c96d71e7edc82590ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator *</definition>
        <argsstring>(GfHalf s, const GfDualQuath &amp;dq)</argsstring>
        <name>operator *</name>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="250" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quath_1ace49f75fed2304e3c3fadac9cdf068c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref></type>
        <definition>GfDualQuath operator/</definition>
        <argsstring>(const GfDualQuath &amp;dq, GfHalf s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type><ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="256" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="256" bodyend="259"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: a real part quaternion and a dual part quaternion. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a generalized dual quaternion that has a real part and a dual part quaternions. Dual quaternions are used to represent a combination of rotation and translation.</para>
<para>References: <ulink url="https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf">https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf</ulink> <ulink url="http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf">http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf</ulink> </para>
    </detaileddescription>
    <location file="pxr/base/gf/dualQuath.h" line="68" column="1" bodyfile="pxr/base/gf/dualQuath.h" bodystart="67" bodyend="268"/>
    <listofallmembers>
      <member refid="class_gf_dual_quath_1af317d16994cc75e0018e911ca5f45727" prot="private" virt="non-virtual"><scope>GfDualQuath</scope><name>_dual</name></member>
      <member refid="class_gf_dual_quath_1a4542d883dab678e836f82601a318c7e0" prot="private" virt="non-virtual"><scope>GfDualQuath</scope><name>_real</name></member>
      <member refid="class_gf_dual_quath_1a01b76f67a46f644b1669c94107266d52" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetConjugate</name></member>
      <member refid="class_gf_dual_quath_1a1f95102dee7243d5aef2a377b663d445" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetDual</name></member>
      <member refid="class_gf_dual_quath_1afda36f3b04b57e3326baa26df6df6522" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetIdentity</name></member>
      <member refid="class_gf_dual_quath_1a124d969b907e807379a2b1d387b42b78" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetInverse</name></member>
      <member refid="class_gf_dual_quath_1a8069e703be349ad98d60cbc40e02613e" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetLength</name></member>
      <member refid="class_gf_dual_quath_1aa893cdccd612f3c1e051b61b68f42b69" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetNormalized</name></member>
      <member refid="class_gf_dual_quath_1a073d8c6d51d59eaf4c3c6cf93a926a0c" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetReal</name></member>
      <member refid="class_gf_dual_quath_1aaaee29cabc367009e1ae9d9e412f4d55" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetTranslation</name></member>
      <member refid="class_gf_dual_quath_1aa96b553b33af97a0ea2b1133d829b5a7" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GetZero</name></member>
      <member refid="class_gf_dual_quath_1a5aadc96e2319501c2326e17ef852ed05" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a9e2dcef27aa464cf944d575cd9047824" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a8a3e6f36366bff5fd8b6df92c7cbb076" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a880be366bc2ac31f35d5ec46ca8a07c1" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a8840a4ccbc2f527a03055aff38de2160" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1ab95ef1c284406043ee1bab34a705ab26" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a09d6b38090d9dc20f4a3431148c08fbb" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>GfDualQuath</name></member>
      <member refid="class_gf_dual_quath_1a40444ad66965a4202001c948d0d85931" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>hash_value</name></member>
      <member refid="class_gf_dual_quath_1ae334c2aac45c13732ae2db02e384ecb7" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>Normalize</name></member>
      <member refid="class_gf_dual_quath_1afc631d63a209bd9a34733d026660cd4a" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator !=</name></member>
      <member refid="class_gf_dual_quath_1a3bb736c661a95bb5791b1a7d2e00d766" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quath_1a10b203dfafd43a32999a1be264896d8b" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quath_1a64444b22df2051c96d71e7edc82590ad" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quath_1a234d111b9e95e55203c5b350c52210b9" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quath_1aec3716f720c2fbf77118e916338d91b7" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quath_1a1c53c3a9a31c732e362740fd943bfd9d" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator -</name></member>
      <member refid="class_gf_dual_quath_1ae355712a7e174d56548a15d9901e0fad" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator -=</name></member>
      <member refid="class_gf_dual_quath_1aa9f398abb4f42c401356a967fa2f1d56" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator+</name></member>
      <member refid="class_gf_dual_quath_1a61864176be148902dfede8f1c3f098df" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator+=</name></member>
      <member refid="class_gf_dual_quath_1ace49f75fed2304e3c3fadac9cdf068c7" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator/</name></member>
      <member refid="class_gf_dual_quath_1a0884f8579797c533d5b2024e19b1a989" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator/=</name></member>
      <member refid="class_gf_dual_quath_1add5bd1b50bee82065191869c16610838" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>operator==</name></member>
      <member refid="class_gf_dual_quath_1a512284adad2afc1cb29997cf585d965d" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>ScalarType</name></member>
      <member refid="class_gf_dual_quath_1aa2c9dada386f8eb727a30811e9c685f1" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>SetDual</name></member>
      <member refid="class_gf_dual_quath_1ae048339bbc5a5f4c14af2218d75f68b6" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>SetReal</name></member>
      <member refid="class_gf_dual_quath_1aec4ed92edc876f2c6402141b72d7c0a1" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>SetTranslation</name></member>
      <member refid="class_gf_dual_quath_1ad2517d099c926fadaeb45067be24105d" prot="public" virt="non-virtual"><scope>GfDualQuath</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
