<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_buffer" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLBuffer</compoundname>
    <basecompoundref refid="class_hgi_buffer" prot="public" virt="non-virtual">HgiBuffer</basecompoundref>
    <includes refid="_l_2buffer_8h" local="no">buffer.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hgi_g_l_buffer_1a459c65427f4c47c738022928ea52ecae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HgiGL</definition>
        <argsstring></argsstring>
        <name>HgiGL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="60" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_buffer_1a47d96c1e9f1419c39834803dea867c2c" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t _bufferId</definition>
        <argsstring></argsstring>
        <name>_bufferId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="70" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_buffer_1a569760602bd8c1b3b76e9d6368afdc50" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* _mapped</definition>
        <argsstring></argsstring>
        <name>_mapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="71" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_buffer_1a348add62c83c041f1b8a84054e678d72" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* _cpuStaging</definition>
        <argsstring></argsstring>
        <name>_cpuStaging</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="72" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_buffer_1a83bfe53fffb54069642771dc0bb99bfc" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t _bindlessGPUAddress</definition>
        <argsstring></argsstring>
        <name>_bindlessGPUAddress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="73" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a5955aea5e0f72bc9ccd9686852b8c8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLBuffer</definition>
        <argsstring>() override</argsstring>
        <name>~HgiGLBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1aaf2f07918f87f57adccda3e250297da7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API size_t</type>
        <definition>HGIGL_API size_t GetByteSizeOfResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetByteSizeOfResource</name>
        <reimplements refid="class_hgi_buffer_1afb9f5da99a13e9adcab7f87cb9a6ad94">GetByteSizeOfResource</reimplements>
        <briefdescription>
<para>Returns the byte size of the GPU buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be helpful if the application wishes to tally up memory usage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API uint64_t</type>
        <definition>HGIGL_API uint64_t GetRawResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetRawResource</name>
        <reimplements refid="class_hgi_buffer_1a1c1b84de203362af87c23d73c8f8d395">GetRawResource</reimplements>
        <briefdescription>
<para>This function returns the handle to the <ref refid="class_hgi" kindref="compound">Hgi</ref> backend&apos;s gpu resource, cast to a uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should avoid using this function and instead use <ref refid="class_hgi" kindref="compound">Hgi</ref> base classes so that client code works with any <ref refid="class_hgi" kindref="compound">Hgi</ref> platform. For transitioning code to <ref refid="class_hgi" kindref="compound">Hgi</ref>, it can however we useful to directly access a platform&apos;s internal resource handles. There is no safety provided in using this. If you by accident pass a HgiMetal resource into an OpenGL call, bad things may happen. In OpenGL this returns the GLuint resource name. In Metal this returns the id&lt;MTLBuffer&gt; as uint64_t. In Vulkan this returns the VkBuffer as uint64_t. In DX12 this returns the ID3D12Resource pointer as uint64_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a593f93ecb0a534d0100b3f9bb0db8fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void *</type>
        <definition>HGIGL_API void* GetCPUStagingAddress</definition>
        <argsstring>() override</argsstring>
        <name>GetCPUStagingAddress</name>
        <reimplements refid="class_hgi_buffer_1a18a81f9f7059180f7f2660dab2ab5128">GetCPUStagingAddress</reimplements>
        <briefdescription>
<para>Returns the &apos;staging area&apos; in which new buffer data is copied before it is flushed to GPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Some implementations (e.g. Metal) may have build in support for queueing up CPU-&gt;GPU copies. Those implementations can return the CPU pointer to the buffer&apos;s content directly. The caller should not assume that the data from the CPU staging area is automatically flushed to the GPU. Instead, after copying is finished, the caller should use BlitCmds CopyBufferCpuToGpu to ensure the transfer from the staging area to the GPU is scheduled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a15bf03d88dc739662d710fd04b60dd1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t GetBufferId</definition>
        <argsstring>() const</argsstring>
        <name>GetBufferId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="53" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1af158cbee9277fc37b15ddacd63064c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API uint64_t</type>
        <definition>HGIGL_API uint64_t GetBindlessGPUAddress</definition>
        <argsstring>()</argsstring>
        <name>GetBindlessGPUAddress</name>
        <briefdescription>
<para>Returns the bindless gpu address (caller must verify extension support) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="57" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a03ceb4b74e9922fea2e46dd5651687b1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLBuffer</definition>
        <argsstring>(HgiBufferDesc const &amp;desc)</argsstring>
        <name>HgiGLBuffer</name>
        <param>
          <type><ref refid="struct_hgi_buffer_desc" kindref="compound">HgiBufferDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a50fcc5d7c62f28190f501a1bba83feed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLBuffer</definition>
        <argsstring>()=delete</argsstring>
        <name>HgiGLBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a75e646fa52d37cadbf0bc4ee69129d79" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_buffer" kindref="compound">HgiGLBuffer</ref> &amp;</type>
        <definition>HgiGLBuffer&amp; operator=</definition>
        <argsstring>(const HgiGLBuffer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_buffer" kindref="compound">HgiGLBuffer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_buffer_1a7ac41c057f2184a22498ff2d478199f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLBuffer</definition>
        <argsstring>(const HgiGLBuffer &amp;)=delete</argsstring>
        <name>HgiGLBuffer</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_buffer" kindref="compound">HgiGLBuffer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/buffer.h" line="68" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an OpenGL GPU buffer resource. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3794">
        <label>HgiBuffer</label>
        <link refid="class_hgi_buffer"/>
      </node>
      <node id="3793">
        <label>HgiGLBuffer</label>
        <link refid="class_hgi_g_l_buffer"/>
        <childnode refid="3794" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3797">
        <label>HgiBufferDesc</label>
        <link refid="struct_hgi_buffer_desc"/>
      </node>
      <node id="3796">
        <label>HgiBuffer</label>
        <link refid="class_hgi_buffer"/>
        <childnode refid="3797" relation="usage">
          <edgelabel>_descriptor</edgelabel>
        </childnode>
      </node>
      <node id="3795">
        <label>HgiGLBuffer</label>
        <link refid="class_hgi_g_l_buffer"/>
        <childnode refid="3796" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgiGL/buffer.h" line="39" column="1" bodyfile="pxr/imaging/hgiGL/buffer.h" bodystart="38" bodyend="74"/>
    <listofallmembers>
      <member refid="class_hgi_g_l_buffer_1a83bfe53fffb54069642771dc0bb99bfc" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>_bindlessGPUAddress</name></member>
      <member refid="class_hgi_g_l_buffer_1a47d96c1e9f1419c39834803dea867c2c" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>_bufferId</name></member>
      <member refid="class_hgi_g_l_buffer_1a348add62c83c041f1b8a84054e678d72" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>_cpuStaging</name></member>
      <member refid="class_hgi_buffer_1a9503a55f0cf51236333fd92bd7b2e94f" prot="protected" virt="non-virtual"><scope>HgiGLBuffer</scope><name>_descriptor</name></member>
      <member refid="class_hgi_g_l_buffer_1a569760602bd8c1b3b76e9d6368afdc50" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>_mapped</name></member>
      <member refid="class_hgi_g_l_buffer_1af158cbee9277fc37b15ddacd63064c78" prot="public" virt="non-virtual"><scope>HgiGLBuffer</scope><name>GetBindlessGPUAddress</name></member>
      <member refid="class_hgi_g_l_buffer_1a15bf03d88dc739662d710fd04b60dd1c" prot="public" virt="non-virtual"><scope>HgiGLBuffer</scope><name>GetBufferId</name></member>
      <member refid="class_hgi_g_l_buffer_1aaf2f07918f87f57adccda3e250297da7" prot="public" virt="virtual"><scope>HgiGLBuffer</scope><name>GetByteSizeOfResource</name></member>
      <member refid="class_hgi_g_l_buffer_1a593f93ecb0a534d0100b3f9bb0db8fb5" prot="public" virt="virtual"><scope>HgiGLBuffer</scope><name>GetCPUStagingAddress</name></member>
      <member refid="class_hgi_buffer_1a2a56ff95e6030dfda51b8e0d607923d0" prot="public" virt="non-virtual"><scope>HgiGLBuffer</scope><name>GetDescriptor</name></member>
      <member refid="class_hgi_g_l_buffer_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" virt="virtual"><scope>HgiGLBuffer</scope><name>GetRawResource</name></member>
      <member refid="class_hgi_buffer_1ae28fc23ddf021e75e99b19b4dd3caa52" prot="protected" virt="non-virtual"><scope>HgiGLBuffer</scope><name>HgiBuffer</name></member>
      <member refid="class_hgi_g_l_buffer_1a459c65427f4c47c738022928ea52ecae" prot="protected" virt="non-virtual"><scope>HgiGLBuffer</scope><name>HgiGL</name></member>
      <member refid="class_hgi_g_l_buffer_1a03ceb4b74e9922fea2e46dd5651687b1" prot="protected" virt="non-virtual"><scope>HgiGLBuffer</scope><name>HgiGLBuffer</name></member>
      <member refid="class_hgi_g_l_buffer_1a50fcc5d7c62f28190f501a1bba83feed" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>HgiGLBuffer</name></member>
      <member refid="class_hgi_g_l_buffer_1a7ac41c057f2184a22498ff2d478199f3" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>HgiGLBuffer</name></member>
      <member refid="class_hgi_g_l_buffer_1a75e646fa52d37cadbf0bc4ee69129d79" prot="private" virt="non-virtual"><scope>HgiGLBuffer</scope><name>operator=</name></member>
      <member refid="class_hgi_buffer_1a3c24fa32e0717efd33a255a27ed4d1c8" prot="public" virt="virtual"><scope>HgiGLBuffer</scope><name>~HgiBuffer</name></member>
      <member refid="class_hgi_g_l_buffer_1a5955aea5e0f72bc9ccd9686852b8c8df" prot="public" virt="non-virtual"><scope>HgiGLBuffer</scope><name>~HgiGLBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
