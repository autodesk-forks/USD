<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_model_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdModelAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="model_a_p_i_8h" local="no">modelAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Kind and Model-ness</header>
      <description><para><anchor id="class_usd_model_a_p_i_1Usd_ModelKind"/></para>
</description>
      <memberdef kind="enum" id="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430e" prot="public" static="no" strong="no">
        <type></type>
        <name>KindValidation</name>
        <enumvalue id="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430eae13ed86f7d8655c5e8a1d335bb756636" prot="public">
          <name>KindValidationNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430ead756689b1913c6f80f6fb11f155aa4d5" prot="public">
          <name>KindValidationModelHierarchy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Option for validating queries to a prim&apos;s kind metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_model_a_p_i_1ae163c8eb7d77b2488ddfa27bb1ca3c98" kindref="member">IsKind()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="161" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a3c54c7584441d0f92eeb6893068f92d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetKind</definition>
        <argsstring>(TfToken *kind) const</argsstring>
        <name>GetKind</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Retrieve the authored <computeroutput>kind</computeroutput> for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if there was an authored kind that was successfully read, otherwise false.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a3c54c7584441d0f92eeb6893068f92d2" kindref="member">UsdPrim::GetKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a1d091aa55a2380411e0ab738397ca5fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetKind</definition>
        <argsstring>(const TfToken &amp;kind) const</argsstring>
        <name>SetKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Author a <computeroutput>kind</computeroutput> for this prim, at the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <computeroutput>kind</computeroutput> was successully authored, otherwise false.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a1d091aa55a2380411e0ab738397ca5fc" kindref="member">UsdPrim::SetKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1ae163c8eb7d77b2488ddfa27bb1ca3c98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsKind</definition>
        <argsstring>(const TfToken &amp;baseKind, KindValidation validation=KindValidationModelHierarchy) const</argsstring>
        <name>IsKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseKind</declname>
        </param>
        <param>
          <type><ref refid="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430e" kindref="member">KindValidation</ref></type>
          <declname>validation</declname>
          <defval>KindValidationModelHierarchy</defval>
        </param>
        <briefdescription>
<para>Return true if the prim&apos;s kind metadata is or inherits from <computeroutput>baseKind</computeroutput> as defined by the Kind Registry. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>validation</computeroutput> is KindValidationModelHierarchy (the default), then this also ensures that if baseKind is a model, the prim conforms to the rules of model hierarchy, as defined by IsModel. If set to KindValidationNone, no additional validation is done.</para>
<para>IsModel and IsGroup are preferrable to IsKind(&quot;model&quot;) as they are optimized for fast traversal.</para>
<para><simplesect kind="note"><para>If a prim&apos;s model hierarchy is not valid, it is possible that that prim.IsModel() and prim.IsKind(&quot;model&quot;, Usd.ModelAPI.KindValidationNone) return different answers. (As a corallary, this is also true for for prim.IsGroup()) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a93b30174f032a6c64ea5b49f6c5560b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsModel</definition>
        <argsstring>() const</argsstring>
        <name>IsModel</name>
        <briefdescription>
<para>Return true if this prim represents a model, based on its kind metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1acbdf5ab167023b90469048d18cbb4874" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsGroup</definition>
        <argsstring>() const</argsstring>
        <name>IsGroup</name>
        <briefdescription>
<para>Return true if this prim represents a model group, based on its kind metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Model Asset Info API</header>
      <description><para><anchor id="class_usd_model_a_p_i_1Usd_Model_AssetInfo"/></para>
</description>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a6ce3f1e41ffa3a74911a856526c755d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetAssetIdentifier</definition>
        <argsstring>(SdfAssetPath *identifier) const</argsstring>
        <name>GetAssetIdentifier</name>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> *</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Returns the model&apos;s asset identifier as authored in the composed assetInfo dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para>The asset identifier can be used to resolve the model&apos;s root layer via the asset resolver plugin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1ae85ade23511c966402841ca7160bbb8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetAssetIdentifier</definition>
        <argsstring>(const SdfAssetPath &amp;identifier) const</argsstring>
        <name>SetAssetIdentifier</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Sets the model&apos;s asset identifier to the given asset path, <computeroutput>identifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_model_a_p_i_1a6ce3f1e41ffa3a74911a856526c755d2" kindref="member">GetAssetIdentifier()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a3bf20969a59715cb331fb156ba7db379" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetAssetName</definition>
        <argsstring>(std::string *assetName) const</argsstring>
        <name>GetAssetName</name>
        <param>
          <type>std::string *</type>
          <declname>assetName</declname>
        </param>
        <briefdescription>
<para>Returns the model&apos;s asset name from the composed assetInfo dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para>The asset name is the name of the asset, as would be used in a database query. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a0edae4209af46bf5a53f74f32f525918" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetAssetName</definition>
        <argsstring>(const std::string &amp;assetName) const</argsstring>
        <name>SetAssetName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetName</declname>
        </param>
        <briefdescription>
<para>Sets the model&apos;s asset name to <computeroutput>assetName</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_model_a_p_i_1a3bf20969a59715cb331fb156ba7db379" kindref="member">GetAssetName()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a89899e2ae2c0e79f51a70372b8a53ffc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetAssetVersion</definition>
        <argsstring>(std::string *version) const</argsstring>
        <name>GetAssetVersion</name>
        <param>
          <type>std::string *</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Returns the model&apos;s resolved asset version. </para>
        </briefdescription>
        <detaileddescription>
<para>If you publish assets with an embedded version, then you may receive that version string. You may, however, cause your authoring tools to record the resolved version <emphasis>at the time at which a reference to the asset was added to an aggregate</emphasis>, at the referencing site. In such a pipeline, this API will always return that stronger opinion, even if the asset is republished with a newer version, and even though that newer version may be the one that is resolved when the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> is opened. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1aff8147200031c5056d34f4933d64aad4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetAssetVersion</definition>
        <argsstring>(const std::string &amp;version) const</argsstring>
        <name>SetAssetVersion</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Sets the model&apos;s asset version string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_model_a_p_i_1a89899e2ae2c0e79f51a70372b8a53ffc" kindref="member">GetAssetVersion()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a1e492d104c4de57bc470e9468000ef4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetPayloadAssetDependencies</definition>
        <argsstring>(VtArray&lt; SdfAssetPath &gt; *assetDeps) const</argsstring>
        <name>GetPayloadAssetDependencies</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; *</type>
          <declname>assetDeps</declname>
        </param>
        <briefdescription>
<para>Returns the list of asset dependencies referenced inside the payload of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>This typically contains identifiers of external assets that are referenced inside the model&apos;s payload. When the model is created, this list is compiled and set at the root of the model. This enables efficient dependency analysis without the need to include the model&apos;s payload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1aba08b9c389fe53a079637f2a7fa03e76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetPayloadAssetDependencies</definition>
        <argsstring>(const VtArray&lt; SdfAssetPath &gt; &amp;assetDeps) const</argsstring>
        <name>SetPayloadAssetDependencies</name>
        <param>
          <type>const <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; &amp;</type>
          <declname>assetDeps</declname>
        </param>
        <briefdescription>
<para>Sets the list of external asset dependencies referenced inside the payload of a model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_model_a_p_i_1a1e492d104c4de57bc470e9468000ef4c" kindref="member">GetPayloadAssetDependencies()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a342032d243dacf826c52ae7616e0595f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetAssetInfo</definition>
        <argsstring>(VtDictionary *info) const</argsstring>
        <name>GetAssetInfo</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Returns the model&apos;s composed assetInfo dictionary. </para>
        </briefdescription>
        <detaileddescription>
<para>The asset info dictionary is used to annotate models with various data related to asset management. For example, asset name, identifier, version etc.</para>
<para>The elements of this dictionary are composed element-wise, and are nestable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a247d08e9f7b43709bf78a88dda1d0ca6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetAssetInfo</definition>
        <argsstring>(const VtDictionary &amp;info) const</argsstring>
        <name>SetAssetInfo</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Sets the model&apos;s assetInfo dictionary to <computeroutput>info</computeroutput> in the current edit target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="307" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_model_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741ad802a365d69ea33e7b2921b9c4f58ba4" kindref="member">UsdSchemaKind::NonAppliedAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="78" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_model_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="131" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_model_a_p_i_1aad39206eb292887358c1dcb0d868479c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdModelAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdModelAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_model_a_p_i_1a673e532e5eb0f4c98c50e61f84e884aa" kindref="member">UsdModelAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="84" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a88f03d1d9a91a0e6d187fb54c72a68d2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdModelAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdModelAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="92" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a4bc4f828f6069bc6323be233c1bd9c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USD_API</type>
        <definition>virtual USD_API ~UsdModelAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdModelAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_model_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USD_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a673e532e5eb0f4c98c50e61f84e884aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref></type>
        <definition>static USD_API UsdModelAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdModelAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_model_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USD_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1a2acc63dab0e984e9de9f4eeff01ac551" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool _GetAssetInfoByKey</definition>
        <argsstring>(const TfToken &amp;key, T *val) const</argsstring>
        <name>_GetAssetInfoByKey</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="314" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="314" bodyend="321"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_model_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USD_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_model_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_model_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USD_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/modelAPI.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> is an API schema that provides an interface to a prim&apos;s model qualities, if it does, in fact, represent the root prim of a model. </para>
    </briefdescription>
    <detaileddescription>
<para>The first and foremost model quality is its <emphasis>kind</emphasis>, i.e. the metadata that establishes it as a model (See <ref refid="class_kind_registry" kindref="compound">KindRegistry</ref>). <ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> provides various methods for setting and querying the prim&apos;s kind, as well as queries (also available on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>) for asking what category of model the prim is. See <ref refid="class_usd_model_a_p_i_1Usd_ModelKind" kindref="member">Kind and Model-ness</ref>.</para>
<para><ref refid="class_usd_model_a_p_i" kindref="compound">UsdModelAPI</ref> also provides access to a prim&apos;s <ref refid="class_usd_model_a_p_i_1Usd_Model_AssetInfo" kindref="member">assetInfo</ref> data. While any prim <emphasis>can</emphasis> host assetInfo, it is common that published (referenced) assets are packaged as models, therefore it is convenient to provide access to the one from the other.</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7703">
        <label>UsdModelAPI</label>
        <link refid="class_usd_model_a_p_i"/>
        <childnode refid="7704" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7705">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7704">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7705" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7706">
        <label>UsdModelAPI</label>
        <link refid="class_usd_model_a_p_i"/>
        <childnode refid="7707" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7708">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7707">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7708" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/modelAPI.h" line="73" column="1" bodyfile="pxr/usd/usd/modelAPI.h" bodystart="72" bodyend="322"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_model_a_p_i_1a2acc63dab0e984e9de9f4eeff01ac551" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>_GetAssetInfoByKey</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_model_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" virt="virtual"><scope>UsdModelAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdModelAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_model_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" virt="non-virtual"><scope>UsdModelAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_model_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" virt="virtual"><scope>UsdModelAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdModelAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_model_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdModelAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_model_a_p_i_1a673e532e5eb0f4c98c50e61f84e884aa" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>Get</name></member>
      <member refid="class_usd_model_a_p_i_1a6ce3f1e41ffa3a74911a856526c755d2" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetAssetIdentifier</name></member>
      <member refid="class_usd_model_a_p_i_1a342032d243dacf826c52ae7616e0595f" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetAssetInfo</name></member>
      <member refid="class_usd_model_a_p_i_1a3bf20969a59715cb331fb156ba7db379" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetAssetName</name></member>
      <member refid="class_usd_model_a_p_i_1a89899e2ae2c0e79f51a70372b8a53ffc" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetAssetVersion</name></member>
      <member refid="class_usd_model_a_p_i_1a3c54c7584441d0f92eeb6893068f92d2" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetKind</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_model_a_p_i_1a1e492d104c4de57bc470e9468000ef4c" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetPayloadAssetDependencies</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_model_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_model_a_p_i_1acbdf5ab167023b90469048d18cbb4874" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsGroup</name></member>
      <member refid="class_usd_model_a_p_i_1ae163c8eb7d77b2488ddfa27bb1ca3c98" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsKind</name></member>
      <member refid="class_usd_model_a_p_i_1a93b30174f032a6c64ea5b49f6c5560b5" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsModel</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430e" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>KindValidation</name></member>
      <member refid="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430ead756689b1913c6f80f6fb11f155aa4d5" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>KindValidationModelHierarchy</name></member>
      <member refid="class_usd_model_a_p_i_1a43a54448ec238b56d5f3fd9337c1430eae13ed86f7d8655c5e8a1d335bb756636" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>KindValidationNone</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_model_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_model_a_p_i_1ae85ade23511c966402841ca7160bbb8c" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetAssetIdentifier</name></member>
      <member refid="class_usd_model_a_p_i_1a247d08e9f7b43709bf78a88dda1d0ca6" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetAssetInfo</name></member>
      <member refid="class_usd_model_a_p_i_1a0edae4209af46bf5a53f74f32f525918" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetAssetName</name></member>
      <member refid="class_usd_model_a_p_i_1aff8147200031c5056d34f4933d64aad4" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetAssetVersion</name></member>
      <member refid="class_usd_model_a_p_i_1a1d091aa55a2380411e0ab738397ca5fc" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetKind</name></member>
      <member refid="class_usd_model_a_p_i_1aba08b9c389fe53a079637f2a7fa03e76" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>SetPayloadAssetDependencies</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_model_a_p_i_1aad39206eb292887358c1dcb0d868479c" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdModelAPI</name></member>
      <member refid="class_usd_model_a_p_i_1a88f03d1d9a91a0e6d187fb54c72a68d2" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdModelAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_model_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdModelAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdModelAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_model_a_p_i_1a4bc4f828f6069bc6323be233c1bd9c16" prot="public" virt="virtual"><scope>UsdModelAPI</scope><name>~UsdModelAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdModelAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
