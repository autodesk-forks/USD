<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_error_mark" kind="class" language="C++" prot="public">
    <compoundname>TfErrorMark</compoundname>
    <includes refid="error_mark_8h" local="no">errorMark.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_error_mark_1aa74451b2381fcdafecedf79e413924cc" prot="public" static="no">
        <type><ref refid="class_tf_diagnostic_mgr_1aebfc293adf0bdea39fc3ef0e858561b3" kindref="member">TfDiagnosticMgr::ErrorIterator</ref></type>
        <definition>typedef TfDiagnosticMgr::ErrorIterator Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="70" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_error_mark_1aacef328a407e124aa544bda4238e78c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfDiagnosticMgr</definition>
        <argsstring></argsstring>
        <name>TfDiagnosticMgr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="176" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_error_mark_1ade5d9d8331578ffde363e6c2bd93df2a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _mark</definition>
        <argsstring></argsstring>
        <name>_mark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="184" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_error_mark_1a216189a92436084c57102ddd77ffb8aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfErrorMark</definition>
        <argsstring>(const TfErrorMark &amp;)=delete</argsstring>
        <name>TfErrorMark</name>
        <param>
          <type>const <ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a5363c3095ef8fb548f8cc5123cd9b215" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref> &amp;</type>
        <definition>TfErrorMark&amp; operator=</definition>
        <argsstring>(const TfErrorMark &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a76c4c8b701036ec60e5524c42fbc7f34" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool _IsCleanImpl</definition>
        <argsstring>(TfDiagnosticMgr &amp;mgr) const</argsstring>
        <name>_IsCleanImpl</name>
        <param>
          <type><ref refid="class_tf_diagnostic_mgr" kindref="compound">TfDiagnosticMgr</ref> &amp;</type>
          <declname>mgr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1ac038b01277d48123dfd693ffc9b40b40" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ReportErrors</definition>
        <argsstring>(TfDiagnosticMgr &amp;mgr) const</argsstring>
        <name>_ReportErrors</name>
        <param>
          <type><ref refid="class_tf_diagnostic_mgr" kindref="compound">TfDiagnosticMgr</ref> &amp;</type>
          <declname>mgr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="182" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_error_mark_1a3fd426b03da0b2222f30ec6553efac00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfErrorMark</definition>
        <argsstring>()</argsstring>
        <name>TfErrorMark</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The default constructor automatically calls <computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput> at the point of declaration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a220556845cead7b39d7cbe983d740752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API ~TfErrorMark</definition>
        <argsstring>()</argsstring>
        <name>~TfErrorMark</name>
        <briefdescription>
<para>Destroy this ErrorMark. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is the last ErrorMark on this thread of execution and there are pending errors, this will report them via the diagnostic delegate (if one is installed) otherwise by printing to stderr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1ad62b656dd331177505410389b522800f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMark</definition>
        <argsstring>()</argsstring>
        <name>SetMark</name>
        <briefdescription>
<para>Record future errors. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput> arranges to record future errors in <computeroutput>*this</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="88" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1aaedab14a2e51166764950e331b7b11d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsClean</definition>
        <argsstring>() const</argsstring>
        <name>IsClean</name>
        <briefdescription>
<para>Return true if no new errors were posted in this thread since the last call to <computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>When no threads are issuing errors the cost of this function is an atomic integer read and comparison. Otherwise thread-specific data is accessed to make the determination. Thus, this function is fast when diagnostics are not being issued. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="99" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a1bc59c1e78a9f8218c6f5ebe2bc86af3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Clear</definition>
        <argsstring>() const</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Remove all errors in this mark from the error system. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if any errors were cleared, false if there were no errors in this mark.</para>
<para>Clear all errors contained in this mark from the error system. Subsequently, these errors will be considered handled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="109" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="109" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a8cb520487e1a12b3c38a752d90b34f4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref></type>
        <definition>TfErrorTransport Transport</definition>
        <argsstring>() const</argsstring>
        <name>Transport</name>
        <briefdescription>
<para>Remove all errors in this mark fom the error system and return them in a <ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used to transfer errors from one thread to another. See <ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref> for more information. As with <ref refid="class_tf_error_mark_1a1bc59c1e78a9f8218c6f5ebe2bc86af3" kindref="member">Clear()</ref>, all the removed errors are considered handled for this thread. See also <ref refid="class_tf_error_mark_1a692adf55b3f11cce02f2bba2c73ee56a" kindref="member">TransportTo()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="126" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a692adf55b3f11cce02f2bba2c73ee56a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TransportTo</definition>
        <argsstring>(TfErrorTransport &amp;dest) const</argsstring>
        <name>TransportTo</name>
        <param>
          <type><ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Remove all errors in this mark fom the error system and return them in a <ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a variant of <ref refid="class_tf_error_mark_1a8cb520487e1a12b3c38a752d90b34f4a" kindref="member">Transport()</ref>. Instead of returning a new <ref refid="class_tf_error_transport" kindref="compound">TfErrorTransport</ref> object it fills an existing one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="137" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a6da0ecbabc3489878fdeb717d7cd5373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator GetBegin</definition>
        <argsstring>(size_t *nErrors=0) const</argsstring>
        <name>GetBegin</name>
        <param>
          <type>size_t *</type>
          <declname>nErrors</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return an iterator to the first error added to the error list after <computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there are no errors on the error list that were not already present when <computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput> was called, the iterator returned is equal to the iterator returned by <computeroutput><ref refid="class_tf_diagnostic_mgr_1a6958bc575fe7141f9fb6183047d6e5fa" kindref="member">TfDiagnosticMgr::GetErrorEnd()</ref></computeroutput>. Otherwise, the iterator points to the earliest error added to the list since <computeroutput><ref refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" kindref="member">SetMark()</ref></computeroutput> was called.</para>
<para>This function takes O(n) time where n is the number of errors from the end of the list to the mark i.e. <computeroutput>GetMark()</computeroutput> walks the list from the end until it finds the mark and then returns an iterator to that spot.</para>
<para>If <computeroutput>nErrors</computeroutput> is non-NULL, then <computeroutput>*nErrors</computeroutput> is set to the number of errors between the returned iterator and the end of the list. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="156" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1aa129db8c73038ada18bbbe57bfa3d1f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator GetEnd</definition>
        <argsstring>() const</argsstring>
        <name>GetEnd</name>
        <briefdescription>
<para>Return an iterator past the last error in the error system. </para>
        </briefdescription>
        <detaileddescription>
<para>This iterator is always equivalent to the iterator returned by <computeroutput><ref refid="class_tf_diagnostic_mgr_1a6958bc575fe7141f9fb6183047d6e5fa" kindref="member">TfDiagnosticMgr::GetErrorEnd()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="165" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a09dd208593b9721a30a83ed978ede577" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Equivalent to <ref refid="class_tf_error_mark_1a6da0ecbabc3489878fdeb717d7cd5373" kindref="member">GetBegin()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="170" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_error_mark_1a62469461ed7c932afba3808f4da0fe3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Equivalent to <ref refid="class_tf_error_mark_1aa129db8c73038ada18bbbe57bfa3d1f7" kindref="member">GetEnd()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/errorMark.h" line="173" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="173" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class used to record the end of the error-list. </para>
    </briefdescription>
    <detaileddescription>
<para>See <ref refid="page_tf__tf_error" kindref="compound">The TfError Error Posting System</ref> for a detailed description.</para>
<para>A <computeroutput><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref></computeroutput> is used as follows: <programlisting><codeline><highlight class="normal">TfErrorMark<sp/>m;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">m.SetMark();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(A)</highlight></codeline>
<codeline><highlight class="normal">...<sp/>;</highlight></codeline>
<codeline><highlight class="normal">...<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(B)</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!m.IsClean())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>errors<sp/>occurred<sp/>between<sp/>(A)<sp/>and<sp/>(B)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Another common pattern is <programlisting><codeline><highlight class="normal">TfErrorMark<sp/>m;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(TF_HAS_ERRORS(m,<sp/>expr))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>errors;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/base/tf/errorMark.h" line="65" column="1" bodyfile="pxr/base/tf/errorMark.h" bodystart="64" bodyend="185"/>
    <listofallmembers>
      <member refid="class_tf_error_mark_1a76c4c8b701036ec60e5524c42fbc7f34" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>_IsCleanImpl</name></member>
      <member refid="class_tf_error_mark_1ade5d9d8331578ffde363e6c2bd93df2a" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>_mark</name></member>
      <member refid="class_tf_error_mark_1ac038b01277d48123dfd693ffc9b40b40" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>_ReportErrors</name></member>
      <member refid="class_tf_error_mark_1a09dd208593b9721a30a83ed978ede577" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>begin</name></member>
      <member refid="class_tf_error_mark_1a1bc59c1e78a9f8218c6f5ebe2bc86af3" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>Clear</name></member>
      <member refid="class_tf_error_mark_1a62469461ed7c932afba3808f4da0fe3d" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>end</name></member>
      <member refid="class_tf_error_mark_1a6da0ecbabc3489878fdeb717d7cd5373" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>GetBegin</name></member>
      <member refid="class_tf_error_mark_1aa129db8c73038ada18bbbe57bfa3d1f7" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>GetEnd</name></member>
      <member refid="class_tf_error_mark_1aaedab14a2e51166764950e331b7b11d0" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>IsClean</name></member>
      <member refid="class_tf_error_mark_1aa74451b2381fcdafecedf79e413924cc" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>Iterator</name></member>
      <member refid="class_tf_error_mark_1a5363c3095ef8fb548f8cc5123cd9b215" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>operator=</name></member>
      <member refid="class_tf_error_mark_1ad62b656dd331177505410389b522800f" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>SetMark</name></member>
      <member refid="class_tf_error_mark_1aacef328a407e124aa544bda4238e78c9" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>TfDiagnosticMgr</name></member>
      <member refid="class_tf_error_mark_1a216189a92436084c57102ddd77ffb8aa" prot="private" virt="non-virtual"><scope>TfErrorMark</scope><name>TfErrorMark</name></member>
      <member refid="class_tf_error_mark_1a3fd426b03da0b2222f30ec6553efac00" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>TfErrorMark</name></member>
      <member refid="class_tf_error_mark_1a8cb520487e1a12b3c38a752d90b34f4a" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>Transport</name></member>
      <member refid="class_tf_error_mark_1a692adf55b3f11cce02f2bba2c73ee56a" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>TransportTo</name></member>
      <member refid="class_tf_error_mark_1a220556845cead7b39d7cbe983d740752" prot="public" virt="non-virtual"><scope>TfErrorMark</scope><name>~TfErrorMark</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
