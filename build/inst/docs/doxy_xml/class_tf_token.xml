<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_token" kind="class" language="C++" prot="public">
    <compoundname>TfToken</compoundname>
    <includes refid="token_8h" local="no">token.h</includes>
    <innerclass refid="struct_tf_token_1_1___rep" prot="private">TfToken::_Rep</innerclass>
    <innerclass refid="struct_tf_token_1_1_hash_functor" prot="public">TfToken::HashFunctor</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_tf_token_1aeb4955086aeceb328daded19a8d0194f" prot="public" static="no" strong="no">
        <type></type>
        <name>_ImmortalTag</name>
        <enumvalue id="class_tf_token_1aeb4955086aeceb328daded19a8d0194fafc215204e85d00ed3f1dbe63253426d9" prot="public">
          <name>Immortal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="90" column="1" bodyfile="pxr/base/tf/token.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_token_1a47a247622efbb7fcbd329894e5144ffd" prot="public" static="no">
        <type>TfHashSet&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="struct_tf_token_1_1_hash_functor" kindref="compound">TfToken::HashFunctor</ref> &gt;</type>
        <definition>TfHashSet&lt; TfToken, TfToken::HashFunctor &gt; HashSet</definition>
        <argsstring></argsstring>
        <name>HashSet</name>
        <briefdescription>
<para>Predefined type for TfHashSet of tokens, since it&apos;s so awkward to manually specify. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="175" column="1" bodyfile="pxr/base/tf/token.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_token_1a1cb3dc318038c0a24f3c39427b05b977" prot="public" static="no">
        <type>std::set&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="struct_tf_token_fast_arbitrary_less_than" kindref="compound">TfTokenFastArbitraryLessThan</ref> &gt;</type>
        <definition>std::set&lt; TfToken, TfTokenFastArbitraryLessThan &gt; Set</definition>
        <argsstring></argsstring>
        <name>Set</name>
        <briefdescription>
<para>Predefined type for set of tokens, for when faster lookup is desired, without paying the memory or initialization cost of a TfHashSet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="183" column="1" bodyfile="pxr/base/tf/token.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_token_1adf6b9ef58b7cf0df3fb0fc35a9d0a494" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct TfTokenFastArbitraryLessThan</definition>
        <argsstring></argsstring>
        <name>TfTokenFastArbitraryLessThan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="408" column="1" bodyfile="pxr/base/tf/token.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1a8cc2da0791568427afa439aa5c231c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(std::string const &amp;o, TfToken const &amp;t)</argsstring>
        <name>operator==</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="237" column="1" bodyfile="pxr/base/tf/token.h" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1a53d8ec867f167ac82d8979302a94e4be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const char *o, TfToken const &amp;t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const char *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="242" column="1" bodyfile="pxr/base/tf/token.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1a4e221c271bea2e5dfe0c93041cb90083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(std::string const &amp;o, TfToken const &amp;t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="253" column="1" bodyfile="pxr/base/tf/token.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1a12c76c8cdbbae632878dcfdc50d8cbc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(char const *o, TfToken const &amp;t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>char const *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="264" column="1" bodyfile="pxr/base/tf/token.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1aab67f5887f6b619aada6d84dff9afa3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend TF_API std::ostream &amp;</type>
        <definition>TF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;stream, TfToken const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Stream insertion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1af09d65262d71c0f1b704844cf1d5f459" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, TfToken const &amp;token)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para><ref refid="class_tf_hash" kindref="compound">TfHash</ref> support. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="313" column="1" bodyfile="pxr/base/tf/token.h" bodystart="313" bodyend="315"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_token_1af8c856185f682663f0dae0dd912aa17f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(TfToken &amp;lhs, TfToken &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="319" column="1" bodyfile="pxr/base/tf/token.h" bodystart="319" bodyend="321"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_token_1a290a0f9f961ec0270ad320e8a77adf3a" prot="private" static="no" mutable="yes">
        <type><ref refid="class_tf_pointer_and_bits" kindref="compound">TfPointerAndBits</ref>&lt; const _Rep &gt;</type>
        <definition>TfPointerAndBits&lt;const _Rep&gt; _rep</definition>
        <argsstring></argsstring>
        <name>_rep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="413" column="1" bodyfile="pxr/base/tf/token.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_token_1a3493a316090b07a940523d08a74d689e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr TfToken</definition>
        <argsstring>() noexcept</argsstring>
        <name>TfToken</name>
        <briefdescription>
<para>Create the empty token, containing the empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="93" column="1" bodyfile="pxr/base/tf/token.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a36bc8330138f04e2a01d13676c9395ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfToken</definition>
        <argsstring>(TfToken const &amp;rhs) noexcept</argsstring>
        <name>TfToken</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="96" column="1" bodyfile="pxr/base/tf/token.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a1fb3fbb8fc97a966993c8acbaa3a7ba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfToken</definition>
        <argsstring>(TfToken &amp;&amp;rhs) noexcept</argsstring>
        <name>TfToken</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="99" column="1" bodyfile="pxr/base/tf/token.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a430149ae1357b38755f15278f89c0364" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>TfToken&amp; operator=</definition>
        <argsstring>(TfToken const &amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="104" column="1" bodyfile="pxr/base/tf/token.h" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1ab4cfc841bacf064eb8a9dcfcd6ef65e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>TfToken&amp; operator=</definition>
        <argsstring>(TfToken &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="114" column="1" bodyfile="pxr/base/tf/token.h" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1abb7a7ceaf354c65386eec9f2bd971c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~TfToken</definition>
        <argsstring>()</argsstring>
        <name>~TfToken</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="124" column="1" bodyfile="pxr/base/tf/token.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a90276f09c72d4a9f5d21127c9ac50ef8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfToken</definition>
        <argsstring>(std::string const &amp;s)</argsstring>
        <name>TfToken</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Acquire a token for the given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a26cb3fa744c4a5fbad77160febd0fb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfToken</definition>
        <argsstring>(std::string const &amp;s, _ImmortalTag)</argsstring>
        <name>TfToken</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>_ImmortalTag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1aa0f2dae1ccc3bf1b8978afbb9f621f8a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfToken</definition>
        <argsstring>(char const *s)</argsstring>
        <name>TfToken</name>
        <param>
          <type>char const *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Acquire a token for the given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a5117db7143fd61e5f724f8da3d48931f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfToken</definition>
        <argsstring>(char const *s, _ImmortalTag)</argsstring>
        <name>TfToken</name>
        <param>
          <type>char const *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>_ImmortalTag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1ac43e0b9c3df70959ccafb5932818843b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Hash</definition>
        <argsstring>() const</argsstring>
        <name>Hash</name>
        <briefdescription>
<para>Return a size_t hash for this token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="163" column="1" bodyfile="pxr/base/tf/token.h" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a259cb5a711406a8c3e5d937eb9350cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the size of the string that this token represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="186" column="1" bodyfile="pxr/base/tf/token.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a1a9ca1f914304f597726901f72e108a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* GetText</definition>
        <argsstring>() const</argsstring>
        <name>GetText</name>
        <briefdescription>
<para>Return the text that this token represents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The returned pointer value is not valid after this <ref refid="class_tf_token" kindref="compound">TfToken</ref> object has been destroyed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="196" column="1" bodyfile="pxr/base/tf/token.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1ab15b2b33b4ac21a2db2eb551caa90834" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char const  *</type>
        <definition>char const* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Synonym for <ref refid="class_tf_token_1a1a9ca1f914304f597726901f72e108a3" kindref="member">GetText()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="202" column="1" bodyfile="pxr/base/tf/token.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a0c35383184d889e9edb7e1d3882a4062" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const&amp; GetString</definition>
        <argsstring>() const</argsstring>
        <name>GetString</name>
        <briefdescription>
<para>Return the string that this token represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="207" column="1" bodyfile="pxr/base/tf/token.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a7340443182bc1a5f8542a1c4b2893e3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Swap</definition>
        <argsstring>(TfToken &amp;other)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this token with another. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="213" column="1" bodyfile="pxr/base/tf/token.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a82ecc49db7b79638eeb37ee6b8f4d8a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(TfToken const &amp;o) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="218" column="1" bodyfile="pxr/base/tf/token.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a63d7eb68006cf176ccf90ddd06b49c7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(TfToken const &amp;o) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="224" column="1" bodyfile="pxr/base/tf/token.h" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a7de7006bca641929d49ac382499eaa4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool operator==</definition>
        <argsstring>(std::string const &amp;o) const</argsstring>
        <name>operator==</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Equality operator for <computeroutput>char</computeroutput> strings. </para>
        </briefdescription>
        <detaileddescription>
<para>Not as fast as direct token to token equality testing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a9c4e5c2bd7d232fae9db5a4754613448" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool operator==</definition>
        <argsstring>(const char *) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
<para>Equality operator for <computeroutput>char</computeroutput> strings. </para>
        </briefdescription>
        <detaileddescription>
<para>Not as fast as direct token to token equality testing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1af49d8cbd3de41825f237e4c7e9067e55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(std::string const &amp;o) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Inequality operator for <computeroutput>string&apos;s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Not as fast as direct token to token equality testing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="248" column="1" bodyfile="pxr/base/tf/token.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a37d401c70ed864c3fd0a57199f12f3d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(char const *o) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>char const *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Inequality operator for <computeroutput>char</computeroutput> strings. </para>
        </briefdescription>
        <detaileddescription>
<para>Not as fast as direct token to token equality testing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="259" column="1" bodyfile="pxr/base/tf/token.h" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1ab7b091ddf4388f6932f8b947809bbce0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(TfToken const &amp;r) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Less-than operator that compares tokenized strings lexicographically. </para>
        </briefdescription>
        <detaileddescription>
<para>Allows <computeroutput><ref refid="class_tf_token" kindref="compound">TfToken</ref></computeroutput> to be used in <computeroutput>std::set</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="270" column="1" bodyfile="pxr/base/tf/token.h" bodystart="270" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a4bb3b22f5fe4bbd68242f26d682397e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(TfToken const &amp;o) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than operator that compares tokenized strings lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="282" column="1" bodyfile="pxr/base/tf/token.h" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1aa384ea1d963dc26c1865467fc765185f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(TfToken const &amp;o) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than-or-equal operator that compares tokenized strings lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="288" column="1" bodyfile="pxr/base/tf/token.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a38e64a05a89dc9acdab25a721c6c5809" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(TfToken const &amp;o) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Less-than-or-equal operator that compares tokenized strings lexicographically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="294" column="1" bodyfile="pxr/base/tf/token.h" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a667081e36bab45b1cfbafd76a0a461e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator std::string const &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::string const &amp;</name>
        <briefdescription>
<para>Allow <computeroutput><ref refid="class_tf_token" kindref="compound">TfToken</ref></computeroutput> to be auto-converted to <computeroutput>string</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="299" column="1" bodyfile="pxr/base/tf/token.h" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff this token contains the empty string <computeroutput>&quot;&quot;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="302" column="1" bodyfile="pxr/base/tf/token.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1ad326c00b97a0ad4e458aa83551d0a136" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsImmortal</definition>
        <argsstring>() const</argsstring>
        <name>IsImmortal</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> iff this is an immortal token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="305" column="1" bodyfile="pxr/base/tf/token.h" bodystart="305" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_tf_token_1a0de91bf55685912f2079db1882391f3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static TF_API TfToken Find</definition>
        <argsstring>(std::string const &amp;s)</argsstring>
        <name>Find</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Find the token for the given string, if one exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="156" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_token_1a6e7d967eb68402fa7112b75ec28263a6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _AddRef</definition>
        <argsstring>() const</argsstring>
        <name>_AddRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="323" column="1" bodyfile="pxr/base/tf/token.h" bodystart="323" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a9a4de9350ccc533e4d14aeb36cc644f6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _RemoveRef</definition>
        <argsstring>() const</argsstring>
        <name>_RemoveRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="333" column="1" bodyfile="pxr/base/tf/token.h" bodystart="333" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_token_1a9b992b36780b7ac0d1b1a90ee4f6ce13" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void TF_API</type>
        <definition>void TF_API _PossiblyDestroyRep</definition>
        <argsstring>() const</argsstring>
        <name>_PossiblyDestroyRep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="363" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_token_1a4f274d73753aac188d28a0fc9d9f4e20" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string const  &amp;</type>
        <definition>static TF_API std::string const&amp; _GetEmptyString</definition>
        <argsstring>()</argsstring>
        <name>_GetEmptyString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/token.h" line="411" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Token for efficient comparison, assignment, and hashing of known strings. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_tf_token" kindref="compound">TfToken</ref> is a handle for a registered string, and can be compared, assigned, and hashed in constant time. It is useful when a bounded number of strings are used as fixed symbols (but never modified).</para>
<para>For example, the set of avar names in a shot is large but bounded, and once an avar name is discovered, it is never manipulated. If these names were passed around as strings, every comparison and hash would be linear in the number of characters. (String assignment itself is sometimes a constant time operation, but it is sometimes linear in the length of the string as well as requiring a memory allocation.)</para>
<para>To use <ref refid="class_tf_token" kindref="compound">TfToken</ref>, simply create an instance from a string or const char*. If the string hasn&apos;t been seen before, a copy of it is added to a global table. The resulting <ref refid="class_tf_token" kindref="compound">TfToken</ref> is simply a wrapper around an string*, pointing that canonical copy of the string. Thus, operations on the token are very fast. (The string&apos;s hash is simply the address of the canonical copy, so hashing the string is constant time.)</para>
<para>The free functions <computeroutput><ref refid="token_8h_1ab9cecbb72e9c25edd66b0e736836db07" kindref="member">TfToTokenVector()</ref></computeroutput> and <computeroutput><ref refid="token_8h_1ad05c96b44e37addec807e3e15156e5da" kindref="member">TfToStringVector()</ref></computeroutput> provide conversions to and from vectors of <computeroutput>string</computeroutput>.</para>
<para>Note: Access to the global table is protected by a mutex. This is a good idea as long as clients do not construct tokens from strings too frequently. Construct tokens only as often as you must (for example, as you read data files), and <emphasis>never</emphasis> in inner loops. Of course, once you have a token, feel free to compare, assign, and hash it as often as you like. (That&apos;s what it&apos;s for.) In order to help prevent tokens from being re-created over and over, auto type conversion from <computeroutput>string</computeroutput> and <computeroutput>char*</computeroutput> to <computeroutput><ref refid="class_tf_token" kindref="compound">TfToken</ref></computeroutput> is disabled (you must use the explicit <computeroutput><ref refid="class_tf_token" kindref="compound">TfToken</ref></computeroutput> constructors). However, auto conversion from <computeroutput><ref refid="class_tf_token" kindref="compound">TfToken</ref></computeroutput> to <computeroutput>string</computeroutput> and <computeroutput>char*</computeroutput> is provided. </para>
    </detaileddescription>
    <location file="pxr/base/tf/token.h" line="88" column="1" bodyfile="pxr/base/tf/token.h" bodystart="87" bodyend="414"/>
    <listofallmembers>
      <member refid="class_tf_token_1a6e7d967eb68402fa7112b75ec28263a6" prot="private" virt="non-virtual"><scope>TfToken</scope><name>_AddRef</name></member>
      <member refid="class_tf_token_1a4f274d73753aac188d28a0fc9d9f4e20" prot="private" virt="non-virtual"><scope>TfToken</scope><name>_GetEmptyString</name></member>
      <member refid="class_tf_token_1aeb4955086aeceb328daded19a8d0194f" prot="public" virt="non-virtual"><scope>TfToken</scope><name>_ImmortalTag</name></member>
      <member refid="class_tf_token_1a9b992b36780b7ac0d1b1a90ee4f6ce13" prot="private" virt="non-virtual"><scope>TfToken</scope><name>_PossiblyDestroyRep</name></member>
      <member refid="class_tf_token_1a9a4de9350ccc533e4d14aeb36cc644f6" prot="private" virt="non-virtual"><scope>TfToken</scope><name>_RemoveRef</name></member>
      <member refid="class_tf_token_1a290a0f9f961ec0270ad320e8a77adf3a" prot="private" virt="non-virtual"><scope>TfToken</scope><name>_rep</name></member>
      <member refid="class_tf_token_1ab15b2b33b4ac21a2db2eb551caa90834" prot="public" virt="non-virtual"><scope>TfToken</scope><name>data</name></member>
      <member refid="class_tf_token_1a0de91bf55685912f2079db1882391f3d" prot="public" virt="non-virtual"><scope>TfToken</scope><name>Find</name></member>
      <member refid="class_tf_token_1a0c35383184d889e9edb7e1d3882a4062" prot="public" virt="non-virtual"><scope>TfToken</scope><name>GetString</name></member>
      <member refid="class_tf_token_1a1a9ca1f914304f597726901f72e108a3" prot="public" virt="non-virtual"><scope>TfToken</scope><name>GetText</name></member>
      <member refid="class_tf_token_1ac43e0b9c3df70959ccafb5932818843b" prot="public" virt="non-virtual"><scope>TfToken</scope><name>Hash</name></member>
      <member refid="class_tf_token_1a47a247622efbb7fcbd329894e5144ffd" prot="public" virt="non-virtual"><scope>TfToken</scope><name>HashSet</name></member>
      <member refid="class_tf_token_1aeb4955086aeceb328daded19a8d0194fafc215204e85d00ed3f1dbe63253426d9" prot="public" virt="non-virtual"><scope>TfToken</scope><name>Immortal</name></member>
      <member refid="class_tf_token_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>TfToken</scope><name>IsEmpty</name></member>
      <member refid="class_tf_token_1ad326c00b97a0ad4e458aa83551d0a136" prot="public" virt="non-virtual"><scope>TfToken</scope><name>IsImmortal</name></member>
      <member refid="class_tf_token_1a667081e36bab45b1cfbafd76a0a461e2" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator std::string const &amp;</name></member>
      <member refid="class_tf_token_1a63d7eb68006cf176ccf90ddd06b49c7b" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator!=</name></member>
      <member refid="class_tf_token_1af49d8cbd3de41825f237e4c7e9067e55" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator!=</name></member>
      <member refid="class_tf_token_1a4e221c271bea2e5dfe0c93041cb90083" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator!=</name></member>
      <member refid="class_tf_token_1a37d401c70ed864c3fd0a57199f12f3d1" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator!=</name></member>
      <member refid="class_tf_token_1a12c76c8cdbbae632878dcfdc50d8cbc6" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator!=</name></member>
      <member refid="class_tf_token_1ab7b091ddf4388f6932f8b947809bbce0" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator&lt;</name></member>
      <member refid="class_tf_token_1aab67f5887f6b619aada6d84dff9afa3e" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_tf_token_1a38e64a05a89dc9acdab25a721c6c5809" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator&lt;=</name></member>
      <member refid="class_tf_token_1a430149ae1357b38755f15278f89c0364" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator=</name></member>
      <member refid="class_tf_token_1ab4cfc841bacf064eb8a9dcfcd6ef65e4" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator=</name></member>
      <member refid="class_tf_token_1a82ecc49db7b79638eeb37ee6b8f4d8a0" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator==</name></member>
      <member refid="class_tf_token_1a7de7006bca641929d49ac382499eaa4d" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator==</name></member>
      <member refid="class_tf_token_1a9c4e5c2bd7d232fae9db5a4754613448" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator==</name></member>
      <member refid="class_tf_token_1a8cc2da0791568427afa439aa5c231c9e" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator==</name></member>
      <member refid="class_tf_token_1a53d8ec867f167ac82d8979302a94e4be" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator==</name></member>
      <member refid="class_tf_token_1a4bb3b22f5fe4bbd68242f26d682397e8" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator&gt;</name></member>
      <member refid="class_tf_token_1aa384ea1d963dc26c1865467fc765185f" prot="public" virt="non-virtual"><scope>TfToken</scope><name>operator&gt;=</name></member>
      <member refid="class_tf_token_1a1cb3dc318038c0a24f3c39427b05b977" prot="public" virt="non-virtual"><scope>TfToken</scope><name>Set</name></member>
      <member refid="class_tf_token_1a259cb5a711406a8c3e5d937eb9350cca" prot="public" virt="non-virtual"><scope>TfToken</scope><name>size</name></member>
      <member refid="class_tf_token_1af8c856185f682663f0dae0dd912aa17f" prot="private" virt="non-virtual"><scope>TfToken</scope><name>swap</name></member>
      <member refid="class_tf_token_1a7340443182bc1a5f8542a1c4b2893e3c" prot="public" virt="non-virtual"><scope>TfToken</scope><name>Swap</name></member>
      <member refid="class_tf_token_1af09d65262d71c0f1b704844cf1d5f459" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfHashAppend</name></member>
      <member refid="class_tf_token_1a3493a316090b07a940523d08a74d689e" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1a36bc8330138f04e2a01d13676c9395ca" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1a1fb3fbb8fc97a966993c8acbaa3a7ba6" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1a90276f09c72d4a9f5d21127c9ac50ef8" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1a26cb3fa744c4a5fbad77160febd0fb4b" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1aa0f2dae1ccc3bf1b8978afbb9f621f8a" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1a5117db7143fd61e5f724f8da3d48931f" prot="public" virt="non-virtual"><scope>TfToken</scope><name>TfToken</name></member>
      <member refid="class_tf_token_1adf6b9ef58b7cf0df3fb0fc35a9d0a494" prot="private" virt="non-virtual"><scope>TfToken</scope><name>TfTokenFastArbitraryLessThan</name></member>
      <member refid="class_tf_token_1abb7a7ceaf354c65386eec9f2bd971c78" prot="public" virt="non-virtual"><scope>TfToken</scope><name>~TfToken</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
