<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_map_expression" kind="class" language="C++" prot="public">
    <compoundname>PcpMapExpression</compoundname>
    <includes refid="map_expression_8h" local="no">mapExpression.h</includes>
    <innerclass refid="class_pcp_map_expression_1_1___node" prot="private">PcpMapExpression::_Node</innerclass>
    <innerclass refid="class_pcp_map_expression_1_1_variable" prot="public">PcpMapExpression::Variable</innerclass>
      <sectiondef kind="user-defined">
      <header>Creating expressions</header>
      <memberdef kind="typedef" id="class_pcp_map_expression_1a658f347e635bfae194c2e248dd4c97fb" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="class_pcp_map_expression_1_1_variable" kindref="compound">Variable</ref> &gt;</type>
        <definition>typedef std::unique_ptr&lt;Variable&gt; VariableUniquePtr</definition>
        <argsstring></argsstring>
        <name>VariableUniquePtr</name>
        <briefdescription>
<para>Variables are held by reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="113" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a900cd786dbe5cf794ee26b45fe3ed28f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>PCP_API PcpMapExpression Compose</definition>
        <argsstring>(const PcpMapExpression &amp;f) const</argsstring>
        <name>Compose</name>
        <param>
          <type>const <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> representing the application of f&apos;s value, followed by the application of this expression&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a6c9fe58574cf815fb0d70eec7538100c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>PCP_API PcpMapExpression Inverse</definition>
        <argsstring>() const</argsstring>
        <name>Inverse</name>
        <briefdescription>
<para>Create a new <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> representing the inverse of f. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a8e4fa2f84a33a7ced5db3c4f60d04081" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>PCP_API PcpMapExpression AddRootIdentity</definition>
        <argsstring>() const</argsstring>
        <name>AddRootIdentity</name>
        <briefdescription>
<para>Return a new expression representing this expression with an added (if necessary) mapping from &lt;/&gt; to &lt;/&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a104a1559b7897e3a6239b018e54c23ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsConstantIdentity</definition>
        <argsstring>() const</argsstring>
        <name>IsConstantIdentity</name>
        <briefdescription>
<para>Return true if the map function is the constant identity function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="139" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a577953e5fd7849b9a4f3e54ef7ae9ce2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>static PCP_API PcpMapExpression Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Return an expression representing <ref refid="class_pcp_map_function_1a8cac88e657aab74c7c1e93ed88a33a91" kindref="member">PcpMapFunction::Identity()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a5d3714142cad69e1dfdb6fa3c5a9277b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref></type>
        <definition>static PCP_API PcpMapExpression Constant</definition>
        <argsstring>(const Value &amp;constValue)</argsstring>
        <name>Constant</name>
        <param>
          <type>const <ref refid="class_pcp_map_expression_1aadb3717979c36d83d423522671062c4b" kindref="member">Value</ref> &amp;</type>
          <declname>constValue</declname>
        </param>
        <briefdescription>
<para>Create a new constant. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1aad640866525565f38639654abb8a9037" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_expression_1a658f347e635bfae194c2e248dd4c97fb" kindref="member">VariableUniquePtr</ref></type>
        <definition>static PCP_API VariableUniquePtr NewVariable</definition>
        <argsstring>(Value &amp;&amp;initialValue)</argsstring>
        <name>NewVariable</name>
        <param>
          <type><ref refid="class_pcp_map_expression_1aadb3717979c36d83d423522671062c4b" kindref="member">Value</ref> &amp;&amp;</type>
          <declname>initialValue</declname>
        </param>
        <briefdescription>
<para>Create a new variable. </para>
        </briefdescription>
        <detaileddescription>
<para>The client is expected to retain the reference for as long as it wishes to continue being able to set the value of the variable. After the reference is dropped, expressions using the variable will continue to be valid, but there will be no way to further change the value of the variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="122" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Convenience API</header>
      <description><para>The following API just forwards through to the underlying evaluated mapfunction value. </para>
</description>
      <memberdef kind="function" id="class_pcp_map_expression_1a0aea46e26477e1aba8fc2b6291d19610" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsIdentity</definition>
        <argsstring>() const</argsstring>
        <name>IsIdentity</name>
        <briefdescription>
<para>Return true if the evaluated map function is the identity function. </para>
        </briefdescription>
        <detaileddescription>
<para>For identity, <ref refid="class_pcp_map_expression_1afa4300f28995d3c9cd77bf9d3c7e33b9" kindref="member">MapSourceToTarget()</ref> always returns the path unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="153" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1afa4300f28995d3c9cd77bf9d3c7e33b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath MapSourceToTarget</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>MapSourceToTarget</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Map a path in the source namespace to the target. </para>
        </briefdescription>
        <detaileddescription>
<para>If the path is not in the domain, returns an empty path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="159" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a090900553f4a28ac8ac866a044e88911" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath MapTargetToSource</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>MapTargetToSource</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Map a path in the target namespace to the source. </para>
        </briefdescription>
        <detaileddescription>
<para>If the path is not in the co-domain, returns an empty path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="165" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a8113b7544dcabb159bc75671a5197ed0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
        <definition>const SdfLayerOffset&amp; GetTimeOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeOffset</name>
        <briefdescription>
<para>The time offset of the mapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="170" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a764f99b38cb3cd18ab87c5261321e063" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetString</definition>
        <argsstring>() const</argsstring>
        <name>GetString</name>
        <briefdescription>
<para>Returns a string representation of this mapping for debugging purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="176" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="176" bodyend="178"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0f" prot="private" static="no" strong="no">
        <type></type>
        <name>_Op</name>
        <enumvalue id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa1c5cedbc9946fe6e2d5dec3808cc863d" prot="private">
          <name>_OpConstant</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa89dfcc3dbabb113b3a0a1f7526a7ed4d" prot="private">
          <name>_OpVariable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0facaf14e3b54b3199fb14706535de85dda" prot="private">
          <name>_OpInverse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa6549455ea6ff67e9b1b0dab0f865ccaf" prot="private">
          <name>_OpCompose</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa5fc2e6e8ce8fcd7788a160cc983b8702" prot="private">
          <name>_OpAddRootIdentity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="193" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_map_expression_1aeae56b08617f94e971b4f92b00f8160a" prot="private" static="no">
        <type>boost::intrusive_ptr&lt; _Node &gt;</type>
        <definition>typedef boost::intrusive_ptr&lt;_Node&gt; _NodeRefPtr</definition>
        <argsstring></argsstring>
        <name>_NodeRefPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="188" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_map_expression_1aadb3717979c36d83d423522671062c4b" prot="public" static="no">
        <type><ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref></type>
        <definition>typedef PcpMapFunction Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <briefdescription>
<para>The value type of <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> is a <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="60" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_map_expression_1a809676cb18b014b52831ab4491d0d708" prot="private" static="no" mutable="no">
        <type>_NodeRefPtr</type>
        <definition>_NodeRefPtr _node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="282" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_map_expression_1a449e4b8a39db4982a9683e6fc293cc64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_map_expression_1aadb3717979c36d83d423522671062c4b" kindref="member">Value</ref> &amp;</type>
        <definition>PCP_API const Value&amp; Evaluate</definition>
        <argsstring>() const</argsstring>
        <name>Evaluate</name>
        <briefdescription>
<para>Evaluate this expression, yielding a <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> value. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed result is cached. The return value is a reference to the internal cached value. The cache is automatically invalidated as needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1aff6ceb7ae064ba8fafbbcc7eec3c25fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpMapExpression</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>PcpMapExpression</name>
        <briefdescription>
<para>Default-construct a NULL expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a454785f9114dde23827af9693bafd5c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Swap</definition>
        <argsstring>(PcpMapExpression &amp;other) noexcept</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this expression with the other. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="73" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_expression_1a27909eb1d61b8b261d259be7c70c58dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsNull</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsNull</name>
        <briefdescription>
<para>Return true if this is a null expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="78" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_map_expression_1a3a7c3388a80ac67241e445638ea3c557" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpMapExpression</definition>
        <argsstring>(const _NodeRefPtr &amp;node)</argsstring>
        <name>PcpMapExpression</name>
        <param>
          <type>const _NodeRefPtr &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="190" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="190" bodyend="190"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_map_expression_1a4d46b46fe2fdba625d17dcf661632c43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend PCP_API void</type>
        <definition>PCP_API void intrusive_ptr_add_ref</definition>
        <argsstring>(_Node *)</argsstring>
        <name>intrusive_ptr_add_ref</name>
        <param>
          <type>_Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_pcp_map_expression_1a4b16acb3ea0f4c5f5afbfed658564710" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend PCP_API void</type>
        <definition>PCP_API void intrusive_ptr_release</definition>
        <argsstring>(_Node *)</argsstring>
        <name>intrusive_ptr_release</name>
        <param>
          <type>_Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapExpression.h" line="280" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An expression that yields a <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> value. </para>
    </briefdescription>
    <detaileddescription>
<para>Expressions comprise constant values, variables, and operators applied to sub-expressions. Expressions cache their computed values internally. Assigning a new value to a variable automatically invalidates the cached values of dependent expressions. Common (sub-)expressions are automatically detected and shared.</para>
<para><ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> exists solely to support efficient incremental handling of relocates edits. It represents a tree of the namespace mapping operations and their inputs, so we can narrowly redo the computation when one of the inputs changes. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/mapExpression.h" line="57" column="1" bodyfile="pxr/usd/pcp/mapExpression.h" bodystart="56" bodyend="283"/>
    <listofallmembers>
      <member refid="class_pcp_map_expression_1a809676cb18b014b52831ab4491d0d708" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_node</name></member>
      <member refid="class_pcp_map_expression_1aeae56b08617f94e971b4f92b00f8160a" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_NodeRefPtr</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0f" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_Op</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa5fc2e6e8ce8fcd7788a160cc983b8702" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_OpAddRootIdentity</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa6549455ea6ff67e9b1b0dab0f865ccaf" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_OpCompose</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa1c5cedbc9946fe6e2d5dec3808cc863d" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_OpConstant</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0facaf14e3b54b3199fb14706535de85dda" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_OpInverse</name></member>
      <member refid="class_pcp_map_expression_1a013470bfe2d85b24119af2e5ae70ce0fa89dfcc3dbabb113b3a0a1f7526a7ed4d" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>_OpVariable</name></member>
      <member refid="class_pcp_map_expression_1a8e4fa2f84a33a7ced5db3c4f60d04081" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>AddRootIdentity</name></member>
      <member refid="class_pcp_map_expression_1a900cd786dbe5cf794ee26b45fe3ed28f" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Compose</name></member>
      <member refid="class_pcp_map_expression_1a5d3714142cad69e1dfdb6fa3c5a9277b" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Constant</name></member>
      <member refid="class_pcp_map_expression_1a449e4b8a39db4982a9683e6fc293cc64" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Evaluate</name></member>
      <member refid="class_pcp_map_expression_1a764f99b38cb3cd18ab87c5261321e063" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>GetString</name></member>
      <member refid="class_pcp_map_expression_1a8113b7544dcabb159bc75671a5197ed0" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>GetTimeOffset</name></member>
      <member refid="class_pcp_map_expression_1a577953e5fd7849b9a4f3e54ef7ae9ce2" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Identity</name></member>
      <member refid="class_pcp_map_expression_1a4d46b46fe2fdba625d17dcf661632c43" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>intrusive_ptr_add_ref</name></member>
      <member refid="class_pcp_map_expression_1a4b16acb3ea0f4c5f5afbfed658564710" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>intrusive_ptr_release</name></member>
      <member refid="class_pcp_map_expression_1a6c9fe58574cf815fb0d70eec7538100c" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Inverse</name></member>
      <member refid="class_pcp_map_expression_1a104a1559b7897e3a6239b018e54c23ec" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>IsConstantIdentity</name></member>
      <member refid="class_pcp_map_expression_1a0aea46e26477e1aba8fc2b6291d19610" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>IsIdentity</name></member>
      <member refid="class_pcp_map_expression_1a27909eb1d61b8b261d259be7c70c58dd" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>IsNull</name></member>
      <member refid="class_pcp_map_expression_1afa4300f28995d3c9cd77bf9d3c7e33b9" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>MapSourceToTarget</name></member>
      <member refid="class_pcp_map_expression_1a090900553f4a28ac8ac866a044e88911" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>MapTargetToSource</name></member>
      <member refid="class_pcp_map_expression_1aad640866525565f38639654abb8a9037" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>NewVariable</name></member>
      <member refid="class_pcp_map_expression_1aff6ceb7ae064ba8fafbbcc7eec3c25fc" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>PcpMapExpression</name></member>
      <member refid="class_pcp_map_expression_1a3a7c3388a80ac67241e445638ea3c557" prot="private" virt="non-virtual"><scope>PcpMapExpression</scope><name>PcpMapExpression</name></member>
      <member refid="class_pcp_map_expression_1a454785f9114dde23827af9693bafd5c9" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Swap</name></member>
      <member refid="class_pcp_map_expression_1aadb3717979c36d83d423522671062c4b" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>Value</name></member>
      <member refid="class_pcp_map_expression_1a658f347e635bfae194c2e248dd4c97fb" prot="public" virt="non-virtual"><scope>PcpMapExpression</scope><name>VariableUniquePtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
