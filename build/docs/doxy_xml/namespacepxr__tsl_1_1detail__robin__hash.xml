<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespacepxr__tsl_1_1detail__robin__hash" kind="namespace" language="C++">
    <compoundname>pxr_tsl::detail_robin_hash</compoundname>
    <innerclass refid="classpxr__tsl_1_1detail__robin__hash_1_1bucket__entry" prot="public">pxr_tsl::detail_robin_hash::bucket_entry</innerclass>
    <innerclass refid="classpxr__tsl_1_1detail__robin__hash_1_1bucket__entry__hash" prot="public">pxr_tsl::detail_robin_hash::bucket_entry_hash</innerclass>
    <innerclass refid="classpxr__tsl_1_1detail__robin__hash_1_1bucket__entry__hash_3_01true_01_4" prot="public">pxr_tsl::detail_robin_hash::bucket_entry_hash&lt; true &gt;</innerclass>
    <innerclass refid="structpxr__tsl_1_1detail__robin__hash_1_1has__is__transparent" prot="public">pxr_tsl::detail_robin_hash::has_is_transparent</innerclass>
    <innerclass refid="structpxr__tsl_1_1detail__robin__hash_1_1has__is__transparent_3_01_t_00_01typename_01make__void_066cfe1ee7a67331a7c042f25fb9d77d" prot="public">pxr_tsl::detail_robin_hash::has_is_transparent&lt; T, typename make_void&lt; typename T::is_transparent &gt;::type &gt;</innerclass>
    <innerclass refid="structpxr__tsl_1_1detail__robin__hash_1_1is__power__of__two__policy" prot="public">pxr_tsl::detail_robin_hash::is_power_of_two_policy</innerclass>
    <innerclass refid="structpxr__tsl_1_1detail__robin__hash_1_1is__power__of__two__policy_3_01pxr__tsl_1_1rh_1_1power_942104d425c7ebae6265c93c2fe1e508" prot="public">pxr_tsl::detail_robin_hash::is_power_of_two_policy&lt; pxr_tsl::rh::power_of_two_growth_policy&lt; GrowthFactor &gt; &gt;</innerclass>
    <innerclass refid="structpxr__tsl_1_1detail__robin__hash_1_1make__void" prot="public">pxr_tsl::detail_robin_hash::make_void</innerclass>
    <innerclass refid="classpxr__tsl_1_1detail__robin__hash_1_1robin__hash" prot="public">pxr_tsl::detail_robin_hash::robin_hash</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="robin__hash_8h_1aac40d2164bc2a51c5f88bc8721109b34" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using slz_size_type =  std::uint64_t</definition>
        <argsstring></argsstring>
        <name>slz_size_type</name>
        <briefdescription>
<para>Fixed size type used to represent size_type values on serialization. </para>
        </briefdescription>
        <detaileddescription>
<para>Need to be big enough to represent a std::size_t on 32 and 64 bits platforms, and must be the same size on both platforms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="113" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_hash.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="robin__hash_8h_1a344b39028c8ec8dec83548f3f1cbf52e" prot="public" static="no">
        <type>std::uint32_t</type>
        <definition>using truncated_hash_type =  std::uint32_t</definition>
        <argsstring></argsstring>
        <name>truncated_hash_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="118" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_hash.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="robin__hash_8h_1ab6f8dad180bfd70c64e59f1a3bb0b1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; pxr_tsl::detail_robin_hash::clamp</definition>
        <argsstring>(const T &amp;v, const T &amp;lo, const T &amp;hi)</argsstring>
        <name>clamp</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="75" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_hash.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="robin__hash_8h_1a4307d71f0f868d1cb468bf6335e0bc21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T pxr_tsl::detail_robin_hash::numeric_cast</definition>
        <argsstring>(U value, const char *error_message=&quot;numeric_cast() failed.&quot;)</argsstring>
        <name>numeric_cast</name>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error_message</declname>
          <defval>&quot;numeric_cast() failed.&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="80" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_hash.h" bodystart="80" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="robin__hash_8h_1abf5da44a87efbaf031ba6eab098d140a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Deserializer</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T pxr_tsl::detail_robin_hash::deserialize_value</definition>
        <argsstring>(Deserializer &amp;deserializer)</argsstring>
        <name>deserialize_value</name>
        <param>
          <type>Deserializer &amp;</type>
          <declname>deserializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="98" column="1" bodyfile="pxr/base/tf/pxrTslRobinMap/robin_hash.h" bodystart="98" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/pxrTslRobinMap/robin_hash.h" line="51" column="1"/>
  </compounddef>
</doxygen>
