<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_matrix2d" kind="class" language="C++" prot="public">
    <compoundname>GfMatrix2d</compoundname>
    <includes refid="matrix2d_8h" local="no">matrix2d.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_matrix2d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="64" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_matrix2d_1aa1e57e1649aa43fa284959654bc9784a" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="66" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_matrix2d_1a0d7184866d68bd99f6685029368bf09e" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numColumns</definition>
        <argsstring></argsstring>
        <name>numColumns</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="67" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_matrix2d_1ad361c7842ac6519c49e4912c48d40a10" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix_data" kindref="compound">GfMatrixData</ref>&lt; double, 2, 2 &gt;</type>
        <definition>GfMatrixData&lt;double, 2, 2&gt; _mtx</definition>
        <argsstring></argsstring>
        <name>_mtx</name>
        <briefdescription>
<para>Matrix storage, in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="362" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_matrix2d_1ac8f61f00cad5fc781cf272d7c641474e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GfMatrix2f</definition>
        <argsstring></argsstring>
        <name>GfMatrix2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="365" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a7d067a0e8d00f008e4c142f2ddf14c08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfMatrix2d const &amp;m)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="225" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a81f3e5083a9cae2aa0e33a55da5ffff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator *</definition>
        <argsstring>(const GfMatrix2d &amp;m1, double d)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="282" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a838c9161131197c64dfe4d8e0fe5e60f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator *</definition>
        <argsstring>(double d, const GfMatrix2d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="290" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a415622d6ddc79bdc4ee8240efe7d7d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GF_API friend GfMatrix2d operator -</definition>
        <argsstring>(const GfMatrix2d &amp;m)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the unary negation of matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a83fd4a025c87177885982a48bbd686aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator+</definition>
        <argsstring>(const GfMatrix2d &amp;m1, const GfMatrix2d &amp;m2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m2</emphasis> to <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="308" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1ad070d9c214d06bf30f13e1a838068634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator -</definition>
        <argsstring>(const GfMatrix2d &amp;m1, const GfMatrix2d &amp;m2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m2</emphasis> from <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="316" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1ae51e217f1171016ac896c4e57a79ef24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator *</definition>
        <argsstring>(const GfMatrix2d &amp;m1, const GfMatrix2d &amp;m2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Multiplies matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="324" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a8e3da8111e6e8b4243fd43f7a460f478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GfMatrix2d operator/</definition>
        <argsstring>(const GfMatrix2d &amp;m1, const GfMatrix2d &amp;m2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Divides matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis> (that is, <computeroutput>m1 * inv(m2)</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="332" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a0ca47687de92a30138ee0188a2b02ef9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator *</definition>
        <argsstring>(const GfMatrix2d &amp;m, const GfVec2d &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="338" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1adfda0f946ab539d159588253ab8ca460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d operator *</definition>
        <argsstring>(const GfVec2d &amp;vec, const GfMatrix2d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="344" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a6be0faedb10cf8fb53219daa9c64d9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GF_API friend GfVec2f operator *</definition>
        <argsstring>(const GfMatrix2d &amp;m, const GfVec2f &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the return type is a <computeroutput><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix2d_1a41b07e36e8d40f8ee6c22e26f3f061a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></type>
        <definition>GF_API friend GfVec2f operator *</definition>
        <argsstring>(const GfVec2f &amp;vec, const GfMatrix2d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the return type is a <computeroutput><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="357" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_matrix2d_1ac146365a953b1ff4290b72c71498fbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>()=default</argsstring>
        <name>GfMatrix2d</name>
        <briefdescription>
<para>Default constructor. Leaves the matrix component values undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a8b57292faea456e7a7b2d2053366a1b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>(double m00, double m01, double m10, double m11)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>double</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m11</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from 4 independent <computeroutput>double</computeroutput> values, specified in row-major order. For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="75" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a5475d0fafd2d162e9138ec6a6dc5de5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>(const double m[2][2])</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>const double</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from a 2x2 array of <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="83" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a0d5ce7ba6fd6cd5c90aa3e21ad282ef5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>(double s)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="89" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1aa8b6bfff4bd14aae5618b072aa72e9ea" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>(int s)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>This explicit constructor initializes the matrix to <computeroutput>s</computeroutput> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="95" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a446a6c96895efa59594d1d3ddac0f0e3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix2d</definition>
        <argsstring>(const GfVec2d &amp;v)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to diagonal form, with the <emphasis>i</emphasis> th element on the diagonal set to <computeroutput>v[i]</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="101" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a5265a8e91a23d765d3c5533e01010662" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2d</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of double. The vector is expected to be 2x2. If it is too big, only the first 2 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a945bdc805df5568a0988479373863c41" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2d</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of float. The vector is expected to be 2x2. If it is too big, only the first 2 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a0a1bd16b609cece2d815281367d0e3cf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix2d</definition>
        <argsstring>(const class GfMatrix2f &amp;m)</argsstring>
        <name>GfMatrix2d</name>
        <param>
          <type>const class <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This explicit constructor converts a &quot;float&quot; matrix to a &quot;double&quot; matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1ad56db9beda70534bc19cbd54959d9139" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRow</definition>
        <argsstring>(int i, const GfVec2d &amp;v)</argsstring>
        <name>SetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a row of the matrix from a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="128" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1aff144a7c4e19c97c294eaf04309fdd5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetColumn</definition>
        <argsstring>(int i, const GfVec2d &amp;v)</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a column of the matrix from a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="134" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a331ca69770cdda77d0c716ccfa44d1f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetRow</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a row of the matrix as a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="140" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1ae6b2e2275a8beb64fe120b6ef765bca9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetColumn</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a column of the matrix as a Vec2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="145" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a26ac1d7a8ad9d8735fd492462d2a4c0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GfMatrix2d&amp; Set</definition>
        <argsstring>(double m00, double m01, double m10, double m11)</argsstring>
        <name>Set</name>
        <param>
          <type>double</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m11</declname>
        </param>
        <briefdescription>
<para>Sets the matrix from 4 independent <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="152" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="152" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a6926476cf655018eacf81215ff485397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GfMatrix2d&amp; Set</definition>
        <argsstring>(const double m[2][2])</argsstring>
        <name>Set</name>
        <param>
          <type>const double</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Sets the matrix from a 2x2 array of <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="161" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1ad3d5c76d1e3e0ea28c80551c13d3765a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GfMatrix2d&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the matrix to the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="170" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a62eeaf01968699de6a856c80ac96811d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GfMatrix2d&amp; SetZero</definition>
        <argsstring>()</argsstring>
        <name>SetZero</name>
        <briefdescription>
<para>Sets the matrix to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="175" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a41a34da1755f4ca54abab2786ca1e11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; SetDiagonal</definition>
        <argsstring>(double s)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a7d2106eb40d669b1ef3b52c709fb0bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; SetDiagonal</definition>
        <argsstring>(const GfVec2d &amp;)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Sets the matrix to have diagonal (<computeroutput>v[0], v[1]</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a1b2872f5746e740dade3dd715383c911" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double *</type>
        <definition>GF_API double* Get</definition>
        <argsstring>(double m[2][2]) const</argsstring>
        <name>Get</name>
        <param>
          <type>double</type>
          <declname>m</declname>
          <array>[2][2]</array>
        </param>
        <briefdescription>
<para>Fills a 2x2 array of <computeroutput>double</computeroutput> values with the values in the matrix, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns raw access to components of matrix as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="194" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a7f7e2f3c293a2b97b148237518286df5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns const raw access to components of matrix as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="200" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a171cbf6466407c4ca85526568ea72007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* GetArray</definition>
        <argsstring>()</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="205" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1aad5ac705f630a4839b6903f86d341900" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as a const array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="210" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a61d2488dcd1ebac5455fee5f0fd5a0be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* operator []</definition>
        <argsstring>(int i)</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 2 <computeroutput>double</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="217" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1adb0caf805bb92683254c945958b9fc93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* operator []</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 2 <computeroutput>double</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="222" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1ab3dd93deadd44c7af8ed4ad2de9940d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix2d &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a57a6b96b954f1604ca1ba257ef356df0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix2f &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a85ce5682db3678af3b8a001ba07fde2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix2d &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="246" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1ab0b10afcb45578fcef29f893d6d23f60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix2f &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="252" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a85d3e4e86e2c4ac465115042c0c1427b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GF_API GfMatrix2d GetTranspose</definition>
        <argsstring>() const</argsstring>
        <name>GetTranspose</name>
        <briefdescription>
<para>Returns the transpose of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a76313270da3e41b2bed9763d1a3bd90a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref></type>
        <definition>GF_API GfMatrix2d GetInverse</definition>
        <argsstring>(double *det=NULL, double eps=0) const</argsstring>
        <name>GetInverse</name>
        <param>
          <type>double *</type>
          <declname>det</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the inverse of the matrix, or FLT_MAX * <ref refid="class_gf_matrix2d_1ad3d5c76d1e3e0ea28c80551c13d3765a" kindref="member">SetIdentity()</ref> if the matrix is singular. </para>
        </briefdescription>
        <detaileddescription>
<para>(FLT_MAX is the largest value a <computeroutput>float</computeroutput> can have, as defined by the system.) The matrix is considered singular if the determinant is less than or equal to the optional parameter <emphasis>eps</emphasis>. If <emphasis>det</emphasis> is non-null, <computeroutput>*det</computeroutput> is set to the determinant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDeterminant</definition>
        <argsstring>() const</argsstring>
        <name>GetDeterminant</name>
        <briefdescription>
<para>Returns the determinant of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1af49036209c5ffafa55e4cb6abe290b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; operator *=</definition>
        <argsstring>(const GfMatrix2d &amp;m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Post-multiplies matrix <emphasis>m</emphasis> into this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a64f35dde5b43849c5341a8151c69a5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; operator *=</definition>
        <argsstring>(double)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Multiplies the matrix by a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a6ca3a75d269e469578af121ce9c6aff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; operator+=</definition>
        <argsstring>(const GfMatrix2d &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m</emphasis> to this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix2d_1a4ed4e1a1669216d9ad48f76552f9ebc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
        <definition>GF_API GfMatrix2d&amp; operator -=</definition>
        <argsstring>(const GfMatrix2d &amp;m)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m</emphasis> from this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="301" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores a 2x2 matrix of <computeroutput>double</computeroutput> elements. </para>
    </briefdescription>
    <detaileddescription>
<para>A basic type.</para>
<para>Matrices are defined to be in row-major order, so <computeroutput>matrix[i][j]</computeroutput> indexes the element in the <emphasis>i</emphasis> th row and the <emphasis>j</emphasis> th column. </para>
    </detaileddescription>
    <location file="pxr/base/gf/matrix2d.h" line="62" column="1" bodyfile="pxr/base/gf/matrix2d.h" bodystart="61" bodyend="366"/>
    <listofallmembers>
      <member refid="class_gf_matrix2d_1ad361c7842ac6519c49e4912c48d40a10" prot="private" virt="non-virtual"><scope>GfMatrix2d</scope><name>_mtx</name></member>
      <member refid="class_gf_matrix2d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>data</name></member>
      <member refid="class_gf_matrix2d_1a7f7e2f3c293a2b97b148237518286df5" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>data</name></member>
      <member refid="class_gf_matrix2d_1a1b2872f5746e740dade3dd715383c911" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>Get</name></member>
      <member refid="class_gf_matrix2d_1a171cbf6466407c4ca85526568ea72007" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix2d_1aad5ac705f630a4839b6903f86d341900" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix2d_1ae6b2e2275a8beb64fe120b6ef765bca9" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetColumn</name></member>
      <member refid="class_gf_matrix2d_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetDeterminant</name></member>
      <member refid="class_gf_matrix2d_1a76313270da3e41b2bed9763d1a3bd90a" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetInverse</name></member>
      <member refid="class_gf_matrix2d_1a331ca69770cdda77d0c716ccfa44d1f2" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetRow</name></member>
      <member refid="class_gf_matrix2d_1a85d3e4e86e2c4ac465115042c0c1427b" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GetTranspose</name></member>
      <member refid="class_gf_matrix2d_1ac146365a953b1ff4290b72c71498fbb6" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a8b57292faea456e7a7b2d2053366a1b8" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a5475d0fafd2d162e9138ec6a6dc5de5d" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a0d5ce7ba6fd6cd5c90aa3e21ad282ef5" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1aa8b6bfff4bd14aae5618b072aa72e9ea" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a446a6c96895efa59594d1d3ddac0f0e3" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a5265a8e91a23d765d3c5533e01010662" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a945bdc805df5568a0988479373863c41" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1a0a1bd16b609cece2d815281367d0e3cf" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2d</name></member>
      <member refid="class_gf_matrix2d_1ac8f61f00cad5fc781cf272d7c641474e" prot="private" virt="non-virtual"><scope>GfMatrix2d</scope><name>GfMatrix2f</name></member>
      <member refid="class_gf_matrix2d_1a7d067a0e8d00f008e4c142f2ddf14c08" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>hash_value</name></member>
      <member refid="class_gf_matrix2d_1a0d7184866d68bd99f6685029368bf09e" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>numColumns</name></member>
      <member refid="class_gf_matrix2d_1aa1e57e1649aa43fa284959654bc9784a" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>numRows</name></member>
      <member refid="class_gf_matrix2d_1a85ce5682db3678af3b8a001ba07fde2e" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix2d_1ab0b10afcb45578fcef29f893d6d23f60" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix2d_1a81f3e5083a9cae2aa0e33a55da5ffff5" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1a838c9161131197c64dfe4d8e0fe5e60f" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1ae51e217f1171016ac896c4e57a79ef24" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1a0ca47687de92a30138ee0188a2b02ef9" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1adfda0f946ab539d159588253ab8ca460" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1a6be0faedb10cf8fb53219daa9c64d9a5" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1a41b07e36e8d40f8ee6c22e26f3f061a6" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix2d_1af49036209c5ffafa55e4cb6abe290b83" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix2d_1a64f35dde5b43849c5341a8151c69a5bb" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix2d_1a415622d6ddc79bdc4ee8240efe7d7d28" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator -</name></member>
      <member refid="class_gf_matrix2d_1ad070d9c214d06bf30f13e1a838068634" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator -</name></member>
      <member refid="class_gf_matrix2d_1a4ed4e1a1669216d9ad48f76552f9ebc4" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator -=</name></member>
      <member refid="class_gf_matrix2d_1a61d2488dcd1ebac5455fee5f0fd5a0be" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator []</name></member>
      <member refid="class_gf_matrix2d_1adb0caf805bb92683254c945958b9fc93" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator []</name></member>
      <member refid="class_gf_matrix2d_1a83fd4a025c87177885982a48bbd686aa" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator+</name></member>
      <member refid="class_gf_matrix2d_1a6ca3a75d269e469578af121ce9c6aff4" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator+=</name></member>
      <member refid="class_gf_matrix2d_1a8e3da8111e6e8b4243fd43f7a460f478" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator/</name></member>
      <member refid="class_gf_matrix2d_1ab3dd93deadd44c7af8ed4ad2de9940d7" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator==</name></member>
      <member refid="class_gf_matrix2d_1a57a6b96b954f1604ca1ba257ef356df0" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>operator==</name></member>
      <member refid="class_gf_matrix2d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>ScalarType</name></member>
      <member refid="class_gf_matrix2d_1a26ac1d7a8ad9d8735fd492462d2a4c0b" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>Set</name></member>
      <member refid="class_gf_matrix2d_1a6926476cf655018eacf81215ff485397" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>Set</name></member>
      <member refid="class_gf_matrix2d_1aff144a7c4e19c97c294eaf04309fdd5a" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetColumn</name></member>
      <member refid="class_gf_matrix2d_1a41a34da1755f4ca54abab2786ca1e11d" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix2d_1a7d2106eb40d669b1ef3b52c709fb0bdd" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix2d_1ad3d5c76d1e3e0ea28c80551c13d3765a" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetIdentity</name></member>
      <member refid="class_gf_matrix2d_1ad56db9beda70534bc19cbd54959d9139" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetRow</name></member>
      <member refid="class_gf_matrix2d_1a62eeaf01968699de6a856c80ac96811d" prot="public" virt="non-virtual"><scope>GfMatrix2d</scope><name>SetZero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
