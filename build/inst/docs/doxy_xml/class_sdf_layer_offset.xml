<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_layer_offset" kind="class" language="C++" prot="public">
    <compoundname>SdfLayerOffset</compoundname>
    <includes refid="layer_offset_8h" local="no">layerOffset.h</includes>
    <innerclass refid="struct_sdf_layer_offset_1_1_hash" prot="public">SdfLayerOffset::Hash</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_sdf_layer_offset_1a9ad82872160741268c27eae714f73630" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfLayerOffset</definition>
        <argsstring>(double offset=0.0, double scale=1.0)</argsstring>
        <name>SdfLayerOffset</name>
        <param>
          <type>double</type>
          <declname>offset</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Constructs a new <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="68" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="class_sdf_layer_offset_1aa7e7281837f93d333c243b6cf0e2f0ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetOffset</name>
        <briefdescription>
<para>Returns the time offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="76" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a073500c7bf85d4fed293f6e787a47c74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetScale</definition>
        <argsstring>() const</argsstring>
        <name>GetScale</name>
        <briefdescription>
<para>Returns the time scale factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="79" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1aa60074f31dc585ae39a24533862fa166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetOffset</definition>
        <argsstring>(double newOffset)</argsstring>
        <name>SetOffset</name>
        <param>
          <type>double</type>
          <declname>newOffset</declname>
        </param>
        <briefdescription>
<para>Sets the time offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="82" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1ad4cde4071eff744d853a77777ee3b67e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetScale</definition>
        <argsstring>(double newScale)</argsstring>
        <name>SetScale</name>
        <param>
          <type>double</type>
          <declname>newScale</declname>
        </param>
        <briefdescription>
<para>Sets the time scale factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="85" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a99651139effb85f40571b6fb8fd8c6f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsIdentity</definition>
        <argsstring>() const</argsstring>
        <name>IsIdentity</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this is an identity transformation, with an offset of 0.0 and a scale of 1.0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a209b768a9b8a50ffa420dadc2794c028" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this offset is valid, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>both the offset and scale are finite (not infinite or NaN). Note that a valid layer offset&apos;s inverse may be invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a1a896eccac211e4d03e7ba92b5d8a942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SDF_API SdfLayerOffset GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Gets the inverse offset, which performs the opposite transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hashing</header>
      <memberdef kind="function" id="class_sdf_layer_offset_1adfbdfb799dda7294fd8c4ecfe9fa771e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API size_t</type>
        <definition>SDF_API size_t GetHash</definition>
        <argsstring>() const</argsstring>
        <name>GetHash</name>
        <briefdescription>
<para>Returns hash for this offset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_layer_offset_1aa35d5e0140f905e9afbeb3dd326ba7f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const SdfLayerOffset &amp;offset)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="116" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="116" bodyend="118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Operators</header>
      <memberdef kind="function" id="class_sdf_layer_offset_1a77e6bdf2a9369d9b04f2f14dbe279411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether the offsets are equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a58a277ff92953a2f9109411e3258ab84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_offset_1a77e6bdf2a9369d9b04f2f14dbe279411" kindref="member">SdfLayerOffset::operator==</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="130" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a78a482d8728638187f91f9b7debd8e99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator&lt;</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns whether this offset is less than another. </para>
        </briefdescription>
        <detaileddescription>
<para>The meaning of less than is somewhat arbitrary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a03987f909e479e3f20ba615a05d1936d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_offset_1a78a482d8728638187f91f9b7debd8e99" kindref="member">SdfLayerOffset::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="140" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a4b125ed6bfc1349dd97bee977801957e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_offset_1a78a482d8728638187f91f9b7debd8e99" kindref="member">SdfLayerOffset::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="145" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a7e04949e1826c0a206ba443ce467288a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_offset_1a78a482d8728638187f91f9b7debd8e99" kindref="member">SdfLayerOffset::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="150" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1a1e181ef8d024fde640a804ffef8b62e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SDF_API SdfLayerOffset operator *</definition>
        <argsstring>(const SdfLayerOffset &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Composes this with the offset <emphasis>rhs</emphasis>, such that the resulting offset is equivalent to first applying <emphasis>rhs</emphasis> and then <emphasis>*this</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1ae61a1fddc9e9744ff840b172631512d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API double</type>
        <definition>SDF_API double operator *</definition>
        <argsstring>(double rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Applies the offset to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_offset_1aa9b32a38d0a203c1e2b8a8b787560c5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref></type>
        <definition>SDF_API SdfTimeCode operator *</definition>
        <argsstring>(const SdfTimeCode &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Applies the offset to the given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_layer_offset_1af5498e77a60e830637246fcc5731e612" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _offset</definition>
        <argsstring></argsstring>
        <name>_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="170" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_offset_1a2e085cb6f3a447f5247d7adc798fec8c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _scale</definition>
        <argsstring></argsstring>
        <name>_scale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layerOffset.h" line="171" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a time offset and scale between layers. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> class is an affine transform, providing both a scale and a translate. It supports vector algebra semantics for composing SdfLayerOffsets together via multiplication. The <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> class is unitless: it does not refer to seconds or frames.</para>
<para>For example, suppose layer A uses layer B, with an offset of X:</para>
<para>when bringing animation from B into A, you first apply the scale of X, and then the offset. Suppose you have a scale of 2 and an offset of 24: first multiply B&apos;s frame numbers by 2, and then add 24. The animation from B as seen in A will take twice as long and start 24 frames later.</para>
<para>Offsets are typically used in either sublayers or prim references. For more information, see the SetSubLayerOffset() method of the <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> class (the subLayerOffsets property in Python), as well as the SetReference() and GetReferenceLayerOffset() methods (the latter is the referenceLayerOffset property in Python) of the <ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref> class. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/layerOffset.h" line="61" column="1" bodyfile="pxr/usd/sdf/layerOffset.h" bodystart="60" bodyend="172"/>
    <listofallmembers>
      <member refid="class_sdf_layer_offset_1af5498e77a60e830637246fcc5731e612" prot="private" virt="non-virtual"><scope>SdfLayerOffset</scope><name>_offset</name></member>
      <member refid="class_sdf_layer_offset_1a2e085cb6f3a447f5247d7adc798fec8c" prot="private" virt="non-virtual"><scope>SdfLayerOffset</scope><name>_scale</name></member>
      <member refid="class_sdf_layer_offset_1adfbdfb799dda7294fd8c4ecfe9fa771e" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>GetHash</name></member>
      <member refid="class_sdf_layer_offset_1a1a896eccac211e4d03e7ba92b5d8a942" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>GetInverse</name></member>
      <member refid="class_sdf_layer_offset_1aa7e7281837f93d333c243b6cf0e2f0ed" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>GetOffset</name></member>
      <member refid="class_sdf_layer_offset_1a073500c7bf85d4fed293f6e787a47c74" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>GetScale</name></member>
      <member refid="class_sdf_layer_offset_1aa35d5e0140f905e9afbeb3dd326ba7f3" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>hash_value</name></member>
      <member refid="class_sdf_layer_offset_1a99651139effb85f40571b6fb8fd8c6f3" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>IsIdentity</name></member>
      <member refid="class_sdf_layer_offset_1a209b768a9b8a50ffa420dadc2794c028" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>IsValid</name></member>
      <member refid="class_sdf_layer_offset_1a1e181ef8d024fde640a804ffef8b62e8" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator *</name></member>
      <member refid="class_sdf_layer_offset_1ae61a1fddc9e9744ff840b172631512d2" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator *</name></member>
      <member refid="class_sdf_layer_offset_1aa9b32a38d0a203c1e2b8a8b787560c5e" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator *</name></member>
      <member refid="class_sdf_layer_offset_1a58a277ff92953a2f9109411e3258ab84" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator!=</name></member>
      <member refid="class_sdf_layer_offset_1a78a482d8728638187f91f9b7debd8e99" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_layer_offset_1a7e04949e1826c0a206ba443ce467288a" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_layer_offset_1a77e6bdf2a9369d9b04f2f14dbe279411" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator==</name></member>
      <member refid="class_sdf_layer_offset_1a03987f909e479e3f20ba615a05d1936d" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_layer_offset_1a4b125ed6bfc1349dd97bee977801957e" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_layer_offset_1a9ad82872160741268c27eae714f73630" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>SdfLayerOffset</name></member>
      <member refid="class_sdf_layer_offset_1aa60074f31dc585ae39a24533862fa166" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>SetOffset</name></member>
      <member refid="class_sdf_layer_offset_1ad4cde4071eff744d853a77777ee3b67e" prot="public" virt="non-virtual"><scope>SdfLayerOffset</scope><name>SetScale</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
