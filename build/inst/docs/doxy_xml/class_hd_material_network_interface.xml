<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_material_network_interface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HdMaterialNetworkInterface</compoundname>
    <derivedcompoundref refid="class_hd_data_source_material_network_interface" prot="public" virt="non-virtual">HdDataSourceMaterialNetworkInterface</derivedcompoundref>
    <derivedcompoundref refid="class_hd_material_network2_interface" prot="public" virt="non-virtual">HdMaterialNetwork2Interface</derivedcompoundref>
    <includes refid="material_network_interface_8h" local="no">materialNetworkInterface.h</includes>
    <innerclass refid="struct_hd_material_network_interface_1_1_input_connection" prot="public">HdMaterialNetworkInterface::InputConnection</innerclass>
    <innerclass refid="struct_hd_material_network_interface_1_1_node_param_data" prot="public">HdMaterialNetworkInterface::NodeParamData</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_hd_material_network_interface_1ae5d022ea3f4769910081a06cc8eea222" prot="public" static="no">
        <type><ref refid="class_tf_small_vector" kindref="compound">TfSmallVector</ref>&lt; InputConnection, 4 &gt;</type>
        <definition>using InputConnectionVector =  TfSmallVector&lt;InputConnection, 4&gt;</definition>
        <argsstring></argsstring>
        <name>InputConnectionVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="97" column="1" bodyfile="pxr/imaging/hd/materialNetworkInterface.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_material_network_interface_1abff3986e4f64b5d6e46e25bea29b8dae" prot="public" static="no">
        <type>std::pair&lt; bool, InputConnection &gt;</type>
        <definition>using InputConnectionResult =  std::pair&lt;bool, InputConnection&gt;</definition>
        <argsstring></argsstring>
        <name>InputConnectionResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="136" column="1" bodyfile="pxr/imaging/hd/materialNetworkInterface.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_material_network_interface_1a558498fa215bc46261a1f38745a4f87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~HdMaterialNetworkInterface</definition>
        <argsstring>()=default</argsstring>
        <name>~HdMaterialNetworkInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a0101bd55c26f4e543301448f3bf795fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual SdfPath GetMaterialPrimPath</definition>
        <argsstring>() const =0</argsstring>
        <name>GetMaterialPrimPath</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a95ac71a80db2f333914ceae5d35066a9">GetMaterialPrimPath</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a95ac71a80db2f333914ceae5d35066a9">GetMaterialPrimPath</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a0031ff9f7829a27e030998a10901fdee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string GetModelAssetName</definition>
        <argsstring>() const =0</argsstring>
        <name>GetModelAssetName</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a6cd1384e3b97c8d3a1b9e20be1b091f5">GetModelAssetName</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a6cd1384e3b97c8d3a1b9e20be1b091f5">GetModelAssetName</reimplementedby>
        <briefdescription>
<para>Returns the nearest enclosing model asset name, as described by the model schema, or empty string if none is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a5fd06b354c55e37c38dc8521115c53df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual TfTokenVector GetNodeNames</definition>
        <argsstring>() const =0</argsstring>
        <name>GetNodeNames</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a7ec07a9456800aaf12b7db258785e319">GetNodeNames</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a7ec07a9456800aaf12b7db258785e319">GetNodeNames</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a424e58dd7794d77c514999f5db321766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>virtual TfToken GetNodeType</definition>
        <argsstring>(const TfToken &amp;nodeName) const =0</argsstring>
        <name>GetNodeType</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a4ae699ccb44f1ae4c12167dc72cb7b73">GetNodeType</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a4ae699ccb44f1ae4c12167dc72cb7b73">GetNodeType</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1acf5e6c0d545f86dbc2036af0634fd019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual TfTokenVector GetNodeTypeInfoKeys</definition>
        <argsstring>(const TfToken &amp;nodeName) const =0</argsstring>
        <name>GetNodeTypeInfoKeys</name>
        <reimplementedby refid="class_hd_material_network2_interface_1ad703ede911c94051d9513f387c5f140b">GetNodeTypeInfoKeys</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1ad703ede911c94051d9513f387c5f140b">GetNodeTypeInfoKeys</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
<para>Node type info is a collection of data related to the node type, often used to determine the node type. </para>
        </briefdescription>
        <detaileddescription>
<para>For now, we only have getters for this, as we aren&apos;t really intending on mutating this in any filter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a52e8eb5bd7ef5aaf81c3ffc49ceee913" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual VtValue GetNodeTypeInfoValue</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;key) const =0</argsstring>
        <name>GetNodeTypeInfoValue</name>
        <reimplementedby refid="class_hd_material_network2_interface_1aeb2a4bc95637b96af990777013fba5ae">GetNodeTypeInfoValue</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a5112a1a89ff918f106f44b8ea71e382e">GetNodeTypeInfoValue</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a3a8a4d56cb9b471058aa291b0349658e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual TfTokenVector GetAuthoredNodeParameterNames</definition>
        <argsstring>(const TfToken &amp;nodeName) const =0</argsstring>
        <name>GetAuthoredNodeParameterNames</name>
        <reimplementedby refid="class_hd_material_network2_interface_1ac7a393509eae21e25577d08c3136ae53">GetAuthoredNodeParameterNames</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1ac7a393509eae21e25577d08c3136ae53">GetAuthoredNodeParameterNames</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a52b031fc3b4d2feb203afa78e5473733" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual VtValue GetNodeParameterValue</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;paramName) const =0</argsstring>
        <name>GetNodeParameterValue</name>
        <reimplementedby refid="class_hd_material_network2_interface_1acbf1e7d97345c2c4a0175aeb0c699ba1">GetNodeParameterValue</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1acbf1e7d97345c2c4a0175aeb0c699ba1">GetNodeParameterValue</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1ab13ae2bdd3f7a1a3b2831c54099ecf36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>NodeParamData</type>
        <definition>virtual NodeParamData GetNodeParameterData</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;paramName) const =0</argsstring>
        <name>GetNodeParameterData</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a5c9acb1177038064e50e7397b218e6fb">GetNodeParameterData</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a4c8973ad31350a7a23672a425ea561f4">GetNodeParameterData</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a188e7ec5fb039cb744db202b28cb093f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual TfTokenVector GetNodeInputConnectionNames</definition>
        <argsstring>(const TfToken &amp;nodeName) const =0</argsstring>
        <name>GetNodeInputConnectionNames</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a2307af2ef1e1244adda25a33d47c2897">GetNodeInputConnectionNames</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a2307af2ef1e1244adda25a33d47c2897">GetNodeInputConnectionNames</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1ab09028c64280b21f2bbda1e0a291923d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_tf_small_vector" kindref="compound">InputConnectionVector</ref></type>
        <definition>virtual InputConnectionVector GetNodeInputConnection</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;inputName) const =0</argsstring>
        <name>GetNodeInputConnection</name>
        <reimplementedby refid="class_hd_material_network2_interface_1af3f77436373bf0eb20b13300818c7f46">GetNodeInputConnection</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1af3f77436373bf0eb20b13300818c7f46">GetNodeInputConnection</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>inputName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1aaa6965805078ffb458b5ad27c7a95498" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DeleteNode</definition>
        <argsstring>(const TfToken &amp;nodeName)=0</argsstring>
        <name>DeleteNode</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a8f10cf1b0df209c88df4445321ae9606">DeleteNode</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a8f10cf1b0df209c88df4445321ae9606">DeleteNode</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1ac7bcb6a035430248f613f093ee894586" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetNodeType</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;nodeType)=0</argsstring>
        <name>SetNodeType</name>
        <reimplementedby refid="class_hd_material_network2_interface_1ac74b68479d957b8ebd21b28f87461e6b">SetNodeType</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1ac74b68479d957b8ebd21b28f87461e6b">SetNodeType</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1ae9d9bfc8c7682d4c35577cb885878400" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetNodeParameterValue</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;paramName, const VtValue &amp;value)=0</argsstring>
        <name>SetNodeParameterValue</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a1948f2eee3493ff89b4dd035b8a1bd9f">SetNodeParameterValue</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a1948f2eee3493ff89b4dd035b8a1bd9f">SetNodeParameterValue</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1abc9b87a102bb0f1e66e14a9b091ee430" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetNodeParameterData</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;paramName, const NodeParamData &amp;paramData)=0</argsstring>
        <name>SetNodeParameterData</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a8d71687d66c349358eed782a37ba0fda">SetNodeParameterData</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a8d71687d66c349358eed782a37ba0fda">SetNodeParameterData</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>const NodeParamData &amp;</type>
          <declname>paramData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1aa0745d2a77259a012c7938bd5dd79e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DeleteNodeParameter</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;paramName)=0</argsstring>
        <name>DeleteNodeParameter</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a1847b3fee522257f7b949e9aedca0929">DeleteNodeParameter</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a1847b3fee522257f7b949e9aedca0929">DeleteNodeParameter</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a88eaf537100bb6d68b3d79cdb39bc7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetNodeInputConnection</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;inputName, const InputConnectionVector &amp;connections)=0</argsstring>
        <name>SetNodeInputConnection</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a86645a4aacbe8d2efd7ab2d1e1491cff">SetNodeInputConnection</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a86645a4aacbe8d2efd7ab2d1e1491cff">SetNodeInputConnection</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>inputName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_small_vector" kindref="compound">InputConnectionVector</ref> &amp;</type>
          <declname>connections</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a54df68cc21fdb558f435d3c90a84b20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DeleteNodeInputConnection</definition>
        <argsstring>(const TfToken &amp;nodeName, const TfToken &amp;inputName)=0</argsstring>
        <name>DeleteNodeInputConnection</name>
        <reimplementedby refid="class_hd_material_network2_interface_1ab88545381f8f3b1abc35e57f8b107edd">DeleteNodeInputConnection</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1ab88545381f8f3b1abc35e57f8b107edd">DeleteNodeInputConnection</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>inputName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a260db40b35870cb8fb6f8eed4c4a8326" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual TfTokenVector GetTerminalNames</definition>
        <argsstring>() const =0</argsstring>
        <name>GetTerminalNames</name>
        <reimplementedby refid="class_hd_material_network2_interface_1a452e12e29d5be3eccf99d106cee95044">GetTerminalNames</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1a452e12e29d5be3eccf99d106cee95044">GetTerminalNames</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Terminal query &amp; mutation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a385eddb4a6a5241ef88d9735548b4ee6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>InputConnectionResult</type>
        <definition>virtual InputConnectionResult GetTerminalConnection</definition>
        <argsstring>(const TfToken &amp;terminalName) const =0</argsstring>
        <name>GetTerminalConnection</name>
        <reimplementedby refid="class_hd_material_network2_interface_1acf379aab71ee3df2fe7419be20a70f0b">GetTerminalConnection</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1acf379aab71ee3df2fe7419be20a70f0b">GetTerminalConnection</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>terminalName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1a65bc9497aca3bd530a4c03e54b9fd1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void DeleteTerminal</definition>
        <argsstring>(const TfToken &amp;terminalName)=0</argsstring>
        <name>DeleteTerminal</name>
        <reimplementedby refid="class_hd_material_network2_interface_1aa9fe096ae74f3cc87896c26e7fda988d">DeleteTerminal</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1aa9fe096ae74f3cc87896c26e7fda988d">DeleteTerminal</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>terminalName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_material_network_interface_1ae122bb4a937dfa61a61f6d30d1664f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SetTerminalConnection</definition>
        <argsstring>(const TfToken &amp;terminalName, const InputConnection &amp;connection)=0</argsstring>
        <name>SetTerminalConnection</name>
        <reimplementedby refid="class_hd_material_network2_interface_1aaf31ada81a5ed85784da0b0138b39226">SetTerminalConnection</reimplementedby>
        <reimplementedby refid="class_hd_data_source_material_network_interface_1aaf31ada81a5ed85784da0b0138b39226">SetTerminalConnection</reimplementedby>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>terminalName</declname>
        </param>
        <param>
          <type>const InputConnection &amp;</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/materialNetworkInterface.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract interface for querying and mutating a material network. </para>
    </briefdescription>
    <detaileddescription>
<para>This is useful for implementing matfilt functions which can be reused by future scene index implementations.</para>
<para>NOTE: Subclasses make no guarantee of thread-safety even for the const accessors as they might make use of internal caching for optimization. Should you want to read from a material from multiple threads, create a thread-specific interface instance. The non-const methods should never be considered thread-safe from multiple interface instances backed from the same concrete data. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2214">
        <label>HdDataSourceMaterialNetworkInterface</label>
        <link refid="class_hd_data_source_material_network_interface"/>
        <childnode refid="2213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2215">
        <label>HdMaterialNetwork2Interface</label>
        <link refid="class_hd_material_network2_interface"/>
        <childnode refid="2213" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2213">
        <label>HdMaterialNetworkInterface</label>
        <link refid="class_hd_material_network_interface"/>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/hd/materialNetworkInterface.h" line="49" column="1" bodyfile="pxr/imaging/hd/materialNetworkInterface.h" bodystart="48" bodyend="146"/>
    <listofallmembers>
      <member refid="class_hd_material_network_interface_1aaa6965805078ffb458b5ad27c7a95498" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>DeleteNode</name></member>
      <member refid="class_hd_material_network_interface_1a54df68cc21fdb558f435d3c90a84b20a" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>DeleteNodeInputConnection</name></member>
      <member refid="class_hd_material_network_interface_1aa0745d2a77259a012c7938bd5dd79e63" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>DeleteNodeParameter</name></member>
      <member refid="class_hd_material_network_interface_1a65bc9497aca3bd530a4c03e54b9fd1f9" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>DeleteTerminal</name></member>
      <member refid="class_hd_material_network_interface_1a3a8a4d56cb9b471058aa291b0349658e" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetAuthoredNodeParameterNames</name></member>
      <member refid="class_hd_material_network_interface_1a0101bd55c26f4e543301448f3bf795fa" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetMaterialPrimPath</name></member>
      <member refid="class_hd_material_network_interface_1a0031ff9f7829a27e030998a10901fdee" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetModelAssetName</name></member>
      <member refid="class_hd_material_network_interface_1ab09028c64280b21f2bbda1e0a291923d" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeInputConnection</name></member>
      <member refid="class_hd_material_network_interface_1a188e7ec5fb039cb744db202b28cb093f" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeInputConnectionNames</name></member>
      <member refid="class_hd_material_network_interface_1a5fd06b354c55e37c38dc8521115c53df" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeNames</name></member>
      <member refid="class_hd_material_network_interface_1ab13ae2bdd3f7a1a3b2831c54099ecf36" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeParameterData</name></member>
      <member refid="class_hd_material_network_interface_1a52b031fc3b4d2feb203afa78e5473733" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeParameterValue</name></member>
      <member refid="class_hd_material_network_interface_1a424e58dd7794d77c514999f5db321766" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeType</name></member>
      <member refid="class_hd_material_network_interface_1acf5e6c0d545f86dbc2036af0634fd019" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeTypeInfoKeys</name></member>
      <member refid="class_hd_material_network_interface_1a52e8eb5bd7ef5aaf81c3ffc49ceee913" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetNodeTypeInfoValue</name></member>
      <member refid="class_hd_material_network_interface_1a385eddb4a6a5241ef88d9735548b4ee6" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetTerminalConnection</name></member>
      <member refid="class_hd_material_network_interface_1a260db40b35870cb8fb6f8eed4c4a8326" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>GetTerminalNames</name></member>
      <member refid="class_hd_material_network_interface_1abff3986e4f64b5d6e46e25bea29b8dae" prot="public" virt="non-virtual"><scope>HdMaterialNetworkInterface</scope><name>InputConnectionResult</name></member>
      <member refid="class_hd_material_network_interface_1ae5d022ea3f4769910081a06cc8eea222" prot="public" virt="non-virtual"><scope>HdMaterialNetworkInterface</scope><name>InputConnectionVector</name></member>
      <member refid="class_hd_material_network_interface_1a88eaf537100bb6d68b3d79cdb39bc7e1" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>SetNodeInputConnection</name></member>
      <member refid="class_hd_material_network_interface_1abc9b87a102bb0f1e66e14a9b091ee430" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>SetNodeParameterData</name></member>
      <member refid="class_hd_material_network_interface_1ae9d9bfc8c7682d4c35577cb885878400" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>SetNodeParameterValue</name></member>
      <member refid="class_hd_material_network_interface_1ac7bcb6a035430248f613f093ee894586" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>SetNodeType</name></member>
      <member refid="class_hd_material_network_interface_1ae122bb4a937dfa61a61f6d30d1664f8c" prot="public" virt="pure-virtual"><scope>HdMaterialNetworkInterface</scope><name>SetTerminalConnection</name></member>
      <member refid="class_hd_material_network_interface_1a558498fa215bc46261a1f38745a4f87f" prot="public" virt="virtual"><scope>HdMaterialNetworkInterface</scope><name>~HdMaterialNetworkInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
