<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_embree_render_delegate" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdEmbreeRenderDelegate</compoundname>
    <basecompoundref prot="public" virt="non-virtual">HdRenderDelegate</basecompoundref>
    <includes refid="mbree_2render_delegate_8h" local="no">renderDelegate.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1adb9d9cf51f3103873f26670768778d9c" prot="private" static="yes" mutable="no">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>const TfTokenVector SUPPORTED_RPRIM_TYPES</definition>
        <argsstring></argsstring>
        <name>SUPPORTED_RPRIM_TYPES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="242" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1af061994bbb0eed3335fd825e894c8297" prot="private" static="yes" mutable="no">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>const TfTokenVector SUPPORTED_SPRIM_TYPES</definition>
        <argsstring></argsstring>
        <name>SUPPORTED_SPRIM_TYPES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="243" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1af9343cfc1c9da2266d3b61cf072f03d0" prot="private" static="yes" mutable="no">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>const TfTokenVector SUPPORTED_BPRIM_TYPES</definition>
        <argsstring></argsstring>
        <name>SUPPORTED_BPRIM_TYPES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="244" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1ae342e04c114a4d80f266d006919633c5" prot="private" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex _mutexResourceRegistry</definition>
        <argsstring></argsstring>
        <name>_mutexResourceRegistry</name>
        <briefdescription>
<para>Resource registry used in this render delegate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="247" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1a0f3c42f3f80d181e1a8bfaa6da2728e9" prot="private" static="yes" mutable="no">
        <type>std::atomic_int</type>
        <definition>std::atomic_int _counterResourceRegistry</definition>
        <argsstring></argsstring>
        <name>_counterResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="248" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1aff7f1524d0cd2d7b0ae2f51eea3ffac7" prot="private" static="yes" mutable="no">
        <type>HdResourceRegistrySharedPtr</type>
        <definition>HdResourceRegistrySharedPtr _resourceRegistry</definition>
        <argsstring></argsstring>
        <name>_resourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="249" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1a611362fcd4c289b41d5c7c4fc3a9abc0" prot="private" static="no" mutable="no">
        <type>RTCDevice</type>
        <definition>RTCDevice _rtcDevice</definition>
        <argsstring></argsstring>
        <name>_rtcDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="259" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1aab4550197919e591d06355ee399ed4ab" prot="private" static="no" mutable="no">
        <type>RTCScene</type>
        <definition>RTCScene _rtcScene</definition>
        <argsstring></argsstring>
        <name>_rtcScene</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="262" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1aafc5d55124a5de58dfd34a856e0f35d6" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; _sceneVersion</definition>
        <argsstring></argsstring>
        <name>_sceneVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="265" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1ab9ea33cd8a94e38bfe49842938903c57" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="class_hd_embree_render_param" kindref="compound">HdEmbreeRenderParam</ref> &gt;</type>
        <definition>std::shared_ptr&lt;HdEmbreeRenderParam&gt; _renderParam</definition>
        <argsstring></argsstring>
        <name>_renderParam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="269" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1a46de596c2d068031a2694b9788ddd9e7" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_render_thread" kindref="compound">HdRenderThread</ref></type>
        <definition>HdRenderThread _renderThread</definition>
        <argsstring></argsstring>
        <name>_renderThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="274" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1a85047f2a1ae0d3acf46fbabf81145de7" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_embree_renderer" kindref="compound">HdEmbreeRenderer</ref></type>
        <definition>HdEmbreeRenderer _renderer</definition>
        <argsstring></argsstring>
        <name>_renderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="277" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_embree_render_delegate_1ac529131252a4f0a04716d03974f9d6d3" prot="private" static="no" mutable="no">
        <type>HdRenderSettingDescriptorList</type>
        <definition>HdRenderSettingDescriptorList _settingDescriptors</definition>
        <argsstring></argsstring>
        <name>_settingDescriptors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="280" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_embree_render_delegate_1abd073b32b799a053fa7b00edb929227e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdEmbreeRenderDelegate</definition>
        <argsstring>()</argsstring>
        <name>HdEmbreeRenderDelegate</name>
        <briefdescription>
<para>Render delegate constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This method creates the RTC device and scene, and links embree error handling to hydra error handling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1accb1d24afea4e2cf39fe6b7f55274957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdEmbreeRenderDelegate</definition>
        <argsstring>(HdRenderSettingsMap const &amp;settingsMap)</argsstring>
        <name>HdEmbreeRenderDelegate</name>
        <param>
          <type>HdRenderSettingsMap const &amp;</type>
          <declname>settingsMap</declname>
        </param>
        <briefdescription>
<para>Render delegate constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This method creates the RTC device and scene, and links embree error ahndling to hydra error handling. It also populates initial render settings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a1b816c7f0bdc86027eebc071dfe8b0ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HdEmbreeRenderDelegate</definition>
        <argsstring>() override</argsstring>
        <name>~HdEmbreeRenderDelegate</name>
        <briefdescription>
<para>Render delegate destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This method destroys the RTC device and scene. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a9322d8711ae197da581e14589d168d7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
        <definition>HdRenderParam* GetRenderParam</definition>
        <argsstring>() const override</argsstring>
        <name>GetRenderParam</name>
        <briefdescription>
<para>Return this delegate&apos;s render param. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A shared instance of <ref refid="class_hd_embree_render_param" kindref="compound">HdEmbreeRenderParam</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ac1de968704869f08a6115474081130c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>const TfTokenVector&amp; GetSupportedRprimTypes</definition>
        <argsstring>() const override</argsstring>
        <name>GetSupportedRprimTypes</name>
        <briefdescription>
<para>Return a list of which Rprim types can be created by this class&apos;s CreateRprim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1acdca894026b011178df120b5d082719a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>const TfTokenVector&amp; GetSupportedSprimTypes</definition>
        <argsstring>() const override</argsstring>
        <name>GetSupportedSprimTypes</name>
        <briefdescription>
<para>Return a list of which Sprim types can be created by this class&apos;s CreateSprim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ae23b5fe980e03534a8eec03b950b1db7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>const TfTokenVector&amp; GetSupportedBprimTypes</definition>
        <argsstring>() const override</argsstring>
        <name>GetSupportedBprimTypes</name>
        <briefdescription>
<para>Return a list of which Bprim types can be created by this class&apos;s CreateBprim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1aaede284610a6454217827bac50d7e0d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HdResourceRegistrySharedPtr</type>
        <definition>HdResourceRegistrySharedPtr GetResourceRegistry</definition>
        <argsstring>() const override</argsstring>
        <name>GetResourceRegistry</name>
        <briefdescription>
<para>Returns the <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> instance used by this render delegate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1afad6293ff805967a54bc5599e86378d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HdRenderSettingDescriptorList</type>
        <definition>HdRenderSettingDescriptorList GetRenderSettingDescriptors</definition>
        <argsstring>() const override</argsstring>
        <name>GetRenderSettingDescriptors</name>
        <briefdescription>
<para>Returns a list of user-configurable render settings. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a reflection API for the render settings dictionary; it need not be exhaustive, but can be used for populating application settings UI. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a8e8dba398a8d08afe2137fafea41af94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsPauseSupported</definition>
        <argsstring>() const override</argsstring>
        <name>IsPauseSupported</name>
        <briefdescription>
<para>Return true to indicate that pausing and resuming are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a19ac387c39abac7f416ff8308709c138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Pause</definition>
        <argsstring>() override</argsstring>
        <name>Pause</name>
        <briefdescription>
<para>Pause background rendering threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a054ccc7ab6fe7a030920ea2118a16db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Resume</definition>
        <argsstring>() override</argsstring>
        <name>Resume</name>
        <briefdescription>
<para>Resume background rendering threads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a3c3e903b6ce8f0cecce6227ee719a6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdRenderPassSharedPtr</type>
        <definition>HdRenderPassSharedPtr CreateRenderPass</definition>
        <argsstring>(HdRenderIndex *index, HdRprimCollection const &amp;collection) override</argsstring>
        <name>CreateRenderPass</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_hd_rprim_collection" kindref="compound">HdRprimCollection</ref> const &amp;</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Create a renderpass. </para>
        </briefdescription>
        <detaileddescription>
<para>Hydra renderpasses are responsible for drawing a subset of the scene (specified by the &quot;collection&quot; parameter) to the current framebuffer. This class creates objects of type <ref refid="class_hd_embree_render_pass" kindref="compound">HdEmbreeRenderPass</ref>, which draw using embree&apos;s raycasting API. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The render index this renderpass will be bound to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>collection</parametername>
</parameternamelist>
<parameterdescription>
<para>A specifier for which parts of the scene should be drawn. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree renderpass object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ae00ebb2c54ed7aed08c6c3a741a8e17a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_instancer" kindref="compound">HdInstancer</ref> *</type>
        <definition>HdInstancer* CreateInstancer</definition>
        <argsstring>(HdSceneDelegate *delegate, SdfPath const &amp;id) override</argsstring>
        <name>CreateInstancer</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create an instancer. </para>
        </briefdescription>
        <detaileddescription>
<para>Hydra instancers store data needed for an instanced object to draw itself multiple times. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delegate</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene delegate providing data for this instancer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene graph ID of this instancer, used when pulling data from a scene delegate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree instancer object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1abfdc21ea1c6e48220ca40b7761de197f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyInstancer</definition>
        <argsstring>(HdInstancer *instancer) override</argsstring>
        <name>DestroyInstancer</name>
        <param>
          <type><ref refid="class_hd_instancer" kindref="compound">HdInstancer</ref> *</type>
          <declname>instancer</declname>
        </param>
        <briefdescription>
<para>Destroy an instancer created with CreateInstancer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instancer</parametername>
</parameternamelist>
<parameterdescription>
<para>The instancer to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a5fad048d79be9f3da37331489346568d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_rprim" kindref="compound">HdRprim</ref> *</type>
        <definition>HdRprim* CreateRprim</definition>
        <argsstring>(TfToken const &amp;typeId, SdfPath const &amp;rprimId) override</argsstring>
        <name>CreateRprim</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>typeId</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>rprimId</declname>
        </param>
        <briefdescription>
<para>Create a hydra Rprim, representing scene geometry. </para>
        </briefdescription>
        <detaileddescription>
<para>This class creates embree-specialized geometry containers like <ref refid="class_hd_embree_mesh" kindref="compound">HdEmbreeMesh</ref> which map scene data to embree scene graph objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The rprim type to create. This must be one of the types from <ref refid="class_hd_embree_render_delegate_1ac1de968704869f08a6115474081130c4" kindref="member">GetSupportedRprimTypes()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rprimId</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene graph ID of this rprim, used when pulling data from a scene delegate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree rprim object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a0f307b9b1713b9c3be5366f640d08600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyRprim</definition>
        <argsstring>(HdRprim *rPrim) override</argsstring>
        <name>DestroyRprim</name>
        <param>
          <type><ref refid="class_hd_rprim" kindref="compound">HdRprim</ref> *</type>
          <declname>rPrim</declname>
        </param>
        <briefdescription>
<para>Destroy an Rprim created with CreateRprim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rPrim</parametername>
</parameternamelist>
<parameterdescription>
<para>The rprim to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ac9fae72c682880bdbab81d5198f0c167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_sprim" kindref="compound">HdSprim</ref> *</type>
        <definition>HdSprim* CreateSprim</definition>
        <argsstring>(TfToken const &amp;typeId, SdfPath const &amp;sprimId) override</argsstring>
        <name>CreateSprim</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>typeId</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>sprimId</declname>
        </param>
        <briefdescription>
<para>Create a hydra Sprim, representing scene or viewport state like cameras or lights. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The sprim type to create. This must be one of the types from <ref refid="class_hd_embree_render_delegate_1acdca894026b011178df120b5d082719a" kindref="member">GetSupportedSprimTypes()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sprimId</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene graph ID of this sprim, used when pulling data from a scene delegate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree sprim object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ae7c38dc2755030000b106a621c9567a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_sprim" kindref="compound">HdSprim</ref> *</type>
        <definition>HdSprim* CreateFallbackSprim</definition>
        <argsstring>(TfToken const &amp;typeId) override</argsstring>
        <name>CreateFallbackSprim</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>typeId</declname>
        </param>
        <briefdescription>
<para>Create a hydra Sprim using default values, and with no scene graph binding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The sprim type to create. This must be one of the types from <ref refid="class_hd_embree_render_delegate_1acdca894026b011178df120b5d082719a" kindref="member">GetSupportedSprimTypes()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree fallback sprim object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a22ae64c84798fe31777d24f67485cde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroySprim</definition>
        <argsstring>(HdSprim *sPrim) override</argsstring>
        <name>DestroySprim</name>
        <param>
          <type><ref refid="class_hd_sprim" kindref="compound">HdSprim</ref> *</type>
          <declname>sPrim</declname>
        </param>
        <briefdescription>
<para>Destroy an Sprim created with CreateSprim or CreateFallbackSprim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sPrim</parametername>
</parameternamelist>
<parameterdescription>
<para>The sprim to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a8ae40e28aebb7e1e0baf24a6275ce9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_bprim" kindref="compound">HdBprim</ref> *</type>
        <definition>HdBprim* CreateBprim</definition>
        <argsstring>(TfToken const &amp;typeId, SdfPath const &amp;bprimId) override</argsstring>
        <name>CreateBprim</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>typeId</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>bprimId</declname>
        </param>
        <briefdescription>
<para>Create a hydra Bprim, representing data buffers such as textures. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The bprim type to create. This must be one of the types from <ref refid="class_hd_embree_render_delegate_1ae23b5fe980e03534a8eec03b950b1db7" kindref="member">GetSupportedBprimTypes()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bprimId</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene graph ID of this bprim, used when pulling data from a scene delegate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree bprim object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a28412b9cc5f6e314c08192113744558b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_bprim" kindref="compound">HdBprim</ref> *</type>
        <definition>HdBprim* CreateFallbackBprim</definition>
        <argsstring>(TfToken const &amp;typeId) override</argsstring>
        <name>CreateFallbackBprim</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>typeId</declname>
        </param>
        <briefdescription>
<para>Create a hydra Bprim using default values, and with no scene graph binding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typeId</parametername>
</parameternamelist>
<parameterdescription>
<para>The bprim type to create. This must be one of the types from <ref refid="class_hd_embree_render_delegate_1ae23b5fe980e03534a8eec03b950b1db7" kindref="member">GetSupportedBprimTypes()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An embree fallback bprim object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1acd8c101c32feac81f85bb2feaf29deef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DestroyBprim</definition>
        <argsstring>(HdBprim *bPrim) override</argsstring>
        <name>DestroyBprim</name>
        <param>
          <type><ref refid="class_hd_bprim" kindref="compound">HdBprim</ref> *</type>
          <declname>bPrim</declname>
        </param>
        <briefdescription>
<para>Destroy a Bprim created with CreateBprim or CreateFallbackBprim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bPrim</parametername>
</parameternamelist>
<parameterdescription>
<para>The bprim to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a24a884ec95f0d0e916ae6affe3e842e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommitResources</definition>
        <argsstring>(HdChangeTracker *tracker) override</argsstring>
        <name>CommitResources</name>
        <param>
          <type><ref refid="class_hd_change_tracker" kindref="compound">HdChangeTracker</ref> *</type>
          <declname>tracker</declname>
        </param>
        <briefdescription>
<para>This function is called after new scene data is pulled during prim Sync(), but before any tasks (such as draw tasks) are run, and gives the render delegate a chance to transfer any invalidated resources to the rendering kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tracker</parametername>
</parameternamelist>
<parameterdescription>
<para>The change tracker passed to prim Sync(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ada5da09f9eef998a61727cbf5132c9cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetMaterialBindingPurpose</definition>
        <argsstring>() const override</argsstring>
        <name>GetMaterialBindingPurpose</name>
        <briefdescription>
<para>This function tells the scene which material variant to reference. </para>
        </briefdescription>
        <detaileddescription>
<para>Embree doesn&apos;t currently use materials but raytraced backends generally specify &quot;full&quot;. <simplesect kind="return"><para>A token specifying which material variant this renderer prefers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="224" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1afd2e772a3fce3f8491cdac28faa1debd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_hd_aov_descriptor" kindref="compound">HdAovDescriptor</ref></type>
        <definition>HdAovDescriptor GetDefaultAovDescriptor</definition>
        <argsstring>(TfToken const &amp;name) const override</argsstring>
        <name>GetDefaultAovDescriptor</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This function returns the default AOV descriptor for a given named AOV. </para>
        </briefdescription>
        <detaileddescription>
<para>This mechanism lets the renderer decide things like what format a given AOV will be written as. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the AOV whose descriptor we want. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A descriptor specifying things like what format the AOV output buffer should be. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ae116fdfbc0f538fcd54c7f1ec93874ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>VtDictionary GetRenderStats</definition>
        <argsstring>() const override</argsstring>
        <name>GetRenderStats</name>
        <briefdescription>
<para>This function allows the renderer to report back some useful statistics that the application can display to the user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="239" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a890bcaeda125a5631309a16ac5fd00ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdEmbreeRenderDelegate</definition>
        <argsstring>(const HdEmbreeRenderDelegate &amp;)=delete</argsstring>
        <name>HdEmbreeRenderDelegate</name>
        <param>
          <type>const <ref refid="class_hd_embree_render_delegate" kindref="compound">HdEmbreeRenderDelegate</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1af345167e4f3f3e49bf2580fb9b9b03e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_embree_render_delegate" kindref="compound">HdEmbreeRenderDelegate</ref> &amp;</type>
        <definition>HdEmbreeRenderDelegate&amp; operator=</definition>
        <argsstring>(const HdEmbreeRenderDelegate &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hd_embree_render_delegate" kindref="compound">HdEmbreeRenderDelegate</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_embree_render_delegate_1ae229ebda3ceb1f6b51687126a833aa40" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Initialize</definition>
        <argsstring>()</argsstring>
        <name>_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="256" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_hd_embree_render_delegate_1a573c4d55a1913bbaf9f6ebba6500ed63" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void HandleRtcError</definition>
        <argsstring>(void *userPtr, RTCError code, const char *msg)</argsstring>
        <name>HandleRtcError</name>
        <param>
          <type>void *</type>
          <declname>userPtr</declname>
        </param>
        <param>
          <type>RTCError</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="284" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Render delegates provide renderer-specific functionality to the render index, the main hydra state management structure. </para>
    </briefdescription>
    <detaileddescription>
<para>The render index uses the render delegate to create and delete scene primitives, which include geometry and also non-drawable objects. The render delegate is also responsible for creating renderpasses, which know how to draw this renderer&apos;s scene primitives.</para>
<para>Primitives in Hydra are split into Rprims (drawables), Sprims (state objects like cameras and materials), and Bprims (buffer objects like textures). The minimum set of primitives a renderer needs to support is one Rprim (so the scene&apos;s not empty) and the &quot;camera&quot; Sprim, which is required by <ref refid="class_hdx_render_task" kindref="compound">HdxRenderTask</ref>, the task implementing basic hydra drawing.</para>
<para>A render delegate can report which prim types it supports via <ref refid="class_hd_embree_render_delegate_1ac1de968704869f08a6115474081130c4" kindref="member">GetSupportedRprimTypes()</ref> (and Sprim, Bprim), and well-behaved applications won&apos;t call <ref refid="class_hd_embree_render_delegate_1a5fad048d79be9f3da37331489346568d" kindref="member">CreateRprim()</ref> (Sprim, Bprim) for prim types that aren&apos;t supported. The core hydra prim types are &quot;mesh&quot;, &quot;basisCurves&quot;, and &quot;points&quot;, but a custom render delegate and a custom scene delegate could add support for other prims such as implicit surfaces or volumes.</para>
<para>HdEmbree Rprims create embree geometry objects in the render delegate&apos;s top-level embree scene; and HdEmbree&apos;s render pass draws by casting rays into the top-level scene. The renderpass writes to renderbuffers, which are then composited into the GL framebuffer.</para>
<para>The render delegate also has a hook for the main hydra execution algorithm (<ref refid="class_hd_engine_1a75a0815239165c0bf1826a09415013a5" kindref="member">HdEngine::Execute()</ref>): between <ref refid="class_hd_render_index_1a4c0c8384764f03418660e24b66fa4c90" kindref="member">HdRenderIndex::SyncAll()</ref>, which pulls new scene data, and execution of tasks, the engine calls back to <ref refid="class_hd_embree_render_delegate_1a24a884ec95f0d0e916ae6affe3e842e3" kindref="member">CommitResources()</ref>. This can be used to commit GPU buffers, or as a place to schedule a final BVH build (though Embree doesn&apos;t currenlty use it). Importantly, no scene updates are processed after <ref refid="class_hd_embree_render_delegate_1a24a884ec95f0d0e916ae6affe3e842e3" kindref="member">CommitResources()</ref>. </para>
    </detaileddescription>
    <location file="pxr/imaging/hdEmbree/renderDelegate.h" line="85" column="1" bodyfile="pxr/imaging/hdEmbree/renderDelegate.h" bodystart="84" bodyend="285"/>
    <listofallmembers>
      <member refid="class_hd_embree_render_delegate_1a0f3c42f3f80d181e1a8bfaa6da2728e9" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_counterResourceRegistry</name></member>
      <member refid="class_hd_embree_render_delegate_1ae229ebda3ceb1f6b51687126a833aa40" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_Initialize</name></member>
      <member refid="class_hd_embree_render_delegate_1ae342e04c114a4d80f266d006919633c5" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_mutexResourceRegistry</name></member>
      <member refid="class_hd_render_delegate_1a15a319edf2505b8137b284cc78485a7b" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_PopulateDefaultSettings</name></member>
      <member refid="class_hd_embree_render_delegate_1a85047f2a1ae0d3acf46fbabf81145de7" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_renderer</name></member>
      <member refid="class_hd_embree_render_delegate_1ab9ea33cd8a94e38bfe49842938903c57" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_renderParam</name></member>
      <member refid="class_hd_embree_render_delegate_1a46de596c2d068031a2694b9788ddd9e7" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_renderThread</name></member>
      <member refid="class_hd_embree_render_delegate_1aff7f1524d0cd2d7b0ae2f51eea3ffac7" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_resourceRegistry</name></member>
      <member refid="class_hd_embree_render_delegate_1a611362fcd4c289b41d5c7c4fc3a9abc0" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_rtcDevice</name></member>
      <member refid="class_hd_embree_render_delegate_1aab4550197919e591d06355ee399ed4ab" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_rtcScene</name></member>
      <member refid="class_hd_embree_render_delegate_1aafc5d55124a5de58dfd34a856e0f35d6" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_sceneVersion</name></member>
      <member refid="class_hd_embree_render_delegate_1ac529131252a4f0a04716d03974f9d6d3" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_settingDescriptors</name></member>
      <member refid="class_hd_render_delegate_1ad868068eecfedd08749da58fe6602c75" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_settingsMap</name></member>
      <member refid="class_hd_render_delegate_1a0afdb18e14681352fe309aa7744ebed8" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>_settingsVersion</name></member>
      <member refid="class_hd_embree_render_delegate_1a24a884ec95f0d0e916ae6affe3e842e3" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CommitResources</name></member>
      <member refid="class_hd_embree_render_delegate_1a8ae40e28aebb7e1e0baf24a6275ce9b0" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateBprim</name></member>
      <member refid="class_hd_embree_render_delegate_1a28412b9cc5f6e314c08192113744558b" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateFallbackBprim</name></member>
      <member refid="class_hd_embree_render_delegate_1ae7c38dc2755030000b106a621c9567a7" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateFallbackSprim</name></member>
      <member refid="class_hd_embree_render_delegate_1ae00ebb2c54ed7aed08c6c3a741a8e17a" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateInstancer</name></member>
      <member refid="class_hd_embree_render_delegate_1a3c3e903b6ce8f0cecce6227ee719a6ea" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateRenderPass</name></member>
      <member refid="class_hd_render_delegate_1a49249045bdc41fa4d3d4a6c1f21c2314" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateRenderPassState</name></member>
      <member refid="class_hd_embree_render_delegate_1a5fad048d79be9f3da37331489346568d" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateRprim</name></member>
      <member refid="class_hd_embree_render_delegate_1ac9fae72c682880bdbab81d5198f0c167" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>CreateSprim</name></member>
      <member refid="class_hd_embree_render_delegate_1acd8c101c32feac81f85bb2feaf29deef" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>DestroyBprim</name></member>
      <member refid="class_hd_embree_render_delegate_1abfdc21ea1c6e48220ca40b7761de197f" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>DestroyInstancer</name></member>
      <member refid="class_hd_embree_render_delegate_1a0f307b9b1713b9c3be5366f640d08600" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>DestroyRprim</name></member>
      <member refid="class_hd_embree_render_delegate_1a22ae64c84798fe31777d24f67485cde4" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>DestroySprim</name></member>
      <member refid="class_hd_render_delegate_1a6c15bf7c659dee2ec0bf8830fdd61050" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetCapabilities</name></member>
      <member refid="class_hd_render_delegate_1a791eff4377f6420ef79da7b4f5f18d53" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetCommandDescriptors</name></member>
      <member refid="class_hd_embree_render_delegate_1afd2e772a3fce3f8491cdac28faa1debd" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetDefaultAovDescriptor</name></member>
      <member refid="class_hd_embree_render_delegate_1ada5da09f9eef998a61727cbf5132c9cc" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetMaterialBindingPurpose</name></member>
      <member refid="class_hd_render_delegate_1a77ac539951b4e06d17dbf8faceedd4dd" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetMaterialNetworkSelector</name></member>
      <member refid="class_hd_render_delegate_1afd8fc4f024cc70db74b389a85f47625c" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetMaterialRenderContexts</name></member>
      <member refid="class_hd_render_delegate_1a8510f67c1402a0e4c73469e32f4b4e30" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRendererDisplayName</name></member>
      <member refid="class_hd_embree_render_delegate_1a9322d8711ae197da581e14589d168d7e" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderParam</name></member>
      <member refid="class_hd_render_delegate_1a0182b5e55fa3c5f77f6c115fbafe1657" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderSetting</name></member>
      <member refid="class_hd_render_delegate_1a03dfab242be992760f9f3376ded04af8" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderSetting</name></member>
      <member refid="class_hd_embree_render_delegate_1afad6293ff805967a54bc5599e86378d9" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderSettingDescriptors</name></member>
      <member refid="class_hd_render_delegate_1a3cc793424ae4ff6e5c866b67134f6ceb" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderSettingsNamespaces</name></member>
      <member refid="class_hd_render_delegate_1aec5c6b9c337c561b691a7aa997bef486" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderSettingsVersion</name></member>
      <member refid="class_hd_embree_render_delegate_1ae116fdfbc0f538fcd54c7f1ec93874ca" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetRenderStats</name></member>
      <member refid="class_hd_embree_render_delegate_1aaede284610a6454217827bac50d7e0d6" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetResourceRegistry</name></member>
      <member refid="class_hd_render_delegate_1a48b70f591edcd8d68ffcb3b60b7c081c" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetShaderSourceTypes</name></member>
      <member refid="class_hd_embree_render_delegate_1ae23b5fe980e03534a8eec03b950b1db7" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetSupportedBprimTypes</name></member>
      <member refid="class_hd_embree_render_delegate_1ac1de968704869f08a6115474081130c4" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetSupportedRprimTypes</name></member>
      <member refid="class_hd_embree_render_delegate_1acdca894026b011178df120b5d082719a" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>GetSupportedSprimTypes</name></member>
      <member refid="class_hd_embree_render_delegate_1a573c4d55a1913bbaf9f6ebba6500ed63" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HandleRtcError</name></member>
      <member refid="class_hd_embree_render_delegate_1abd073b32b799a053fa7b00edb929227e" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdEmbreeRenderDelegate</name></member>
      <member refid="class_hd_embree_render_delegate_1accb1d24afea4e2cf39fe6b7f55274957" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdEmbreeRenderDelegate</name></member>
      <member refid="class_hd_embree_render_delegate_1a890bcaeda125a5631309a16ac5fd00ab" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdEmbreeRenderDelegate</name></member>
      <member refid="class_hd_render_delegate_1a618f63ed40a2ab3b84a28add2a611895" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdRenderDelegate</name></member>
      <member refid="class_hd_render_delegate_1aa2fa9c147b1519e5b8064f3789c51c50" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdRenderDelegate</name></member>
      <member refid="class_hd_render_delegate_1ac31f4ddb634032a5742c8805279fbd3b" prot="protected" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>HdRenderDelegate</name></member>
      <member refid="class_hd_render_delegate_1a3f1f808ae7ec7730b7fb61fa706d0312" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>InvokeCommand</name></member>
      <member refid="class_hd_render_delegate_1a5d698fce657915c24a3426f46ad66f4b" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>IsPaused</name></member>
      <member refid="class_hd_embree_render_delegate_1a8e8dba398a8d08afe2137fafea41af94" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>IsPauseSupported</name></member>
      <member refid="class_hd_render_delegate_1a65efe702e968ba6342e986932b7b97fe" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>IsPrimvarFilteringNeeded</name></member>
      <member refid="class_hd_render_delegate_1a61c90c349b5e1bf3af8724dffd901688" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>IsStopped</name></member>
      <member refid="class_hd_render_delegate_1a4b32c31de429cb778d390cfcfcac91f0" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>IsStopSupported</name></member>
      <member refid="class_hd_embree_render_delegate_1af345167e4f3f3e49bf2580fb9b9b03e3" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>operator=</name></member>
      <member refid="class_hd_render_delegate_1a151c9839d2cde9150a772af783770f9e" prot="protected" virt="non-virtual" ambiguityscope="HdRenderDelegate::"><scope>HdEmbreeRenderDelegate</scope><name>operator=</name></member>
      <member refid="class_hd_embree_render_delegate_1a19ac387c39abac7f416ff8308709c138" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>Pause</name></member>
      <member refid="class_hd_render_delegate_1a35a456e1a68583c0fe686a34558f9bdc" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>Restart</name></member>
      <member refid="class_hd_embree_render_delegate_1a054ccc7ab6fe7a030920ea2118a16db2" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>Resume</name></member>
      <member refid="class_hd_render_delegate_1a7cf3390988347ccf6a19c93f453f679a" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>SetDrivers</name></member>
      <member refid="class_hd_render_delegate_1a7a177e50744da27dc21daeedf80e788c" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>SetRenderSetting</name></member>
      <member refid="class_hd_render_delegate_1ab6940cd31eb8619fe9546d2eabbc4bc4" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>SetTerminalSceneIndex</name></member>
      <member refid="class_hd_render_delegate_1ace920051c2911b0efa782b30c36441ae" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>Stop</name></member>
      <member refid="class_hd_embree_render_delegate_1af9343cfc1c9da2266d3b61cf072f03d0" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>SUPPORTED_BPRIM_TYPES</name></member>
      <member refid="class_hd_embree_render_delegate_1adb9d9cf51f3103873f26670768778d9c" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>SUPPORTED_RPRIM_TYPES</name></member>
      <member refid="class_hd_embree_render_delegate_1af061994bbb0eed3335fd825e894c8297" prot="private" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>SUPPORTED_SPRIM_TYPES</name></member>
      <member refid="class_hd_render_delegate_1af59871eb7fab18e76f9e2e50198b033e" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>Update</name></member>
      <member refid="class_hd_embree_render_delegate_1a1b816c7f0bdc86027eebc071dfe8b0ef" prot="public" virt="non-virtual"><scope>HdEmbreeRenderDelegate</scope><name>~HdEmbreeRenderDelegate</name></member>
      <member refid="class_hd_render_delegate_1adc731ea9bdbf26cbcec5d513a32f10de" prot="public" virt="virtual"><scope>HdEmbreeRenderDelegate</scope><name>~HdRenderDelegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
