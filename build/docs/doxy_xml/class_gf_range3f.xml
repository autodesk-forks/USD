<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range3f" kind="class" language="C++" prot="public">
    <compoundname>GfRange3f</compoundname>
    <includes refid="range3f_8h" local="no">range3f.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range3f_1ad1c25f45d592e026bc7fbaa06a373f19" prot="public" static="no">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>typedef GfVec3f MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="68" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range3f_1aa6367d45b5ca4f5de6b8f19ec5bc593c" prot="public" static="no">
        <type><ref refid="class_gf_vec3f_1ad5c19ca4f47d3f8ec21232a5af2624e5" kindref="member">GfVec3f::ScalarType</ref></type>
        <definition>typedef GfVec3f::ScalarType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="71" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range3f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= GfVec3f::dimension</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="70" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range3f_1a3e0c5e735920ef591dd2e874f6338c72" prot="public" static="yes" mutable="no">
        <type>GF_API const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GF_API const GfRange3f UnitCube</definition>
        <argsstring></argsstring>
        <name>UnitCube</name>
        <briefdescription>
<para>The unit cube. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="341" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range3f_1ae5cda8cf0ff6243f8027158a6240ed41" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="345" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range3f_1a85a9bbcee925f1623b8cba54796364ac" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="345" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range3f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="75" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a80a36c9f1207c243fd1483fd31d529b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange3f</definition>
        <argsstring>()</argsstring>
        <name>GfRange3f</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="81" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a68101f2075a787f9f1756a986ca1eba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange3f</definition>
        <argsstring>(const GfVec3f &amp;min, const GfVec3f &amp;max)</argsstring>
        <name>GfRange3f</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="86" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a62bbaab5d3b24fef3726b7183235f8d6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange3f</definition>
        <argsstring>(class GfRange3d const &amp;other)</argsstring>
        <name>GfRange3f</name>
        <param>
          <type>class <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1ae4125b6e21b928d1b5e2702ee81c1576" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>const GfVec3f&amp; GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="97" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a872f4d2ed5e1f6a578cc2d5938d7f907" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
        <definition>const GfVec3f&amp; GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="100" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a0d864731b2001b806e05439161d5ea00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="103" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1aa0661c84e5da9dc7f621d64606a48db2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range3f_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="108" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a25893efaa003e62663d385f175411353" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(const GfVec3f &amp;min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="114" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a72a5815732f42fedd1b6743b7e05e0de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(const GfVec3f &amp;max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="117" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="120" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a8cfff8e77cd451a7a266f9af5ab72ae7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfVec3f &amp;point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000046"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="126" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a15c759b0086de7a1e8e0d3d37ec2a6d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange3f &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000047"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="130" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a78b4581d49bd776f3561a7fdd6861132" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfVec3f &amp;point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="134" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1ab355eb1fad49375ae1b6f58a084cab97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange3f &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="143" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1acdb8af0c63b32bf27663933c27a1fb0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfVec3f &amp;point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000048"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a78b4581d49bd776f3561a7fdd6861132" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="150" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1addbb6d691d222f5cae7cbc304fc1f8df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange3f &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000049"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a78b4581d49bd776f3561a7fdd6861132" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="158" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1add11fc490f6c5f1c7fde8d9cecb250af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange3f &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="165" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; UnionWith</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="180" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a5e3c734500209cbd6e50f04a7a3ae425" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; UnionWith</definition>
        <argsstring>(const GfVec3f &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="187" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a7ed707ecd937091d8814b3c49caa878f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; Union</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000051"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="201" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1ac1a38c1319c4b55bf2482111e926fefe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; Union</definition>
        <argsstring>(const GfVec3f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000052"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="207" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a7239afb23042c6d138533837bd05ba22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; IntersectWith</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="227" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a3f4ef13782509840aa29732254346718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>const GfRange3f&amp; Intersection</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000054"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a7239afb23042c6d138533837bd05ba22" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="236" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a49aef55182617693e0e64e80562feb37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>GfRange3f&amp; operator+=</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="241" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1ac798b82e73f7d30a7d05d252ca5620d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>GfRange3f&amp; operator -=</definition>
        <argsstring>(const GfRange3f &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="248" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1adf73599646372be8208582941bc3f724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>GfRange3f&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="255" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a13dbb6891a90cc1967be853e971192ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
        <definition>GfRange3f&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="268" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1afe77f10e9113d53cc0f7e2c45e0d22b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GfRange3f operator+</definition>
        <argsstring>(const GfRange3f &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="273" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a9b991dea6bbea6478c68b6ab1125719f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GfRange3f operator -</definition>
        <argsstring>(const GfRange3f &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="279" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1af03272131c745629a4c3a4c34afd8d4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange3f &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="308" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1abcc78f18bc96cfee032e93e662e3e0b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange3f &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="312" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a32847b00958652e8d10716ada0119c61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange3d &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="320" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a0d5928e2a2a01ec3067927ad5268bb35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange3d &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="321" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a691f3d9f4add4769f698e578a8bb18dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(const GfVec3f &amp;p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a2aa85887fad582a800edef621be80510" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f GetCorner</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetCorner</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith corner of the range, in the following order: LDB, RDB, LUB, RUB, LDF, RDF, LUF, RUF. </para>
        </briefdescription>
        <detaileddescription>
<para>Where L/R is left/right, D/U is down/up, and B/F is back/front. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a70a41cedf456d3fe56249ade5e72d4e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GF_API GfRange3f GetOctant</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetOctant</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith octant of the range, in the following order: LDB, RDB, LUB, RUB, LDF, RDF, LUF, RUF. </para>
        </briefdescription>
        <detaileddescription>
<para>Where L/R is left/right, D/U is down/up, and B/F is back/front. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="337" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range3f_1a26b697fda9efd0f5adf3382863f1cfee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>static GfRange3f GetUnion</definition>
        <argsstring>(const GfRange3f &amp;a, const GfRange3f &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="172" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="172" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a41a8d2c22c2919580e45e6721f3dba9d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>static GfRange3f Union</definition>
        <argsstring>(const GfRange3f &amp;a, const GfRange3f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000050"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a26b697fda9efd0f5adf3382863f1cfee" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="195" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a3641cbda29b2f532b79132ab75feda94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>static GfRange3f GetIntersection</definition>
        <argsstring>(const GfRange3f &amp;a, const GfRange3f &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="212" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1a690d91a3649bdcb2ff237f9945a11209" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>static GfRange3f Intersection</definition>
        <argsstring>(const GfRange3f &amp;a, const GfRange3f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000053"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3f_1a3641cbda29b2f532b79132ab75feda94" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="221" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="221" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range3f_1aec2eb158aac31e1c747e8f75a8ea88cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GfRange3f operator *</definition>
        <argsstring>(double m, const GfRange3f &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="284" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3f_1a43c607a095fada7b3c4e8d46dcbaee82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GfRange3f operator *</definition>
        <argsstring>(const GfRange3f &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="291" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3f_1a50870f337afc4b3fb0aed97402453afc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref></type>
        <definition>GfRange3f operator/</definition>
        <argsstring>(const GfRange3f &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="298" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3f_1a0faa964618b4ec8e215f1b3f40afc1cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange3f &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="303" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="303" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range3f_1a96b18d68e640592ccabf780266adaf86" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(GfVec3f &amp;dest, const GfVec3f &amp;point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="348" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3f_1ad3faaae470bc77a6c65ff59d2e93f5fe" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(GfVec3f &amp;dest, const GfVec3f &amp;point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="355" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="355" bodyend="359"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 3-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 3-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1397">
        <label>GfRange3f</label>
        <link refid="class_gf_range3f"/>
        <childnode refid="1397" relation="usage">
          <edgelabel>UnitCube</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/gf/range3f.h" line="64" column="1" bodyfile="pxr/base/gf/range3f.h" bodystart="63" bodyend="360"/>
    <listofallmembers>
      <member refid="class_gf_range3f_1ad3faaae470bc77a6c65ff59d2e93f5fe" prot="private" virt="non-virtual"><scope>GfRange3f</scope><name>_FindMax</name></member>
      <member refid="class_gf_range3f_1a96b18d68e640592ccabf780266adaf86" prot="private" virt="non-virtual"><scope>GfRange3f</scope><name>_FindMin</name></member>
      <member refid="class_gf_range3f_1a85a9bbcee925f1623b8cba54796364ac" prot="private" virt="non-virtual"><scope>GfRange3f</scope><name>_max</name></member>
      <member refid="class_gf_range3f_1ae5cda8cf0ff6243f8027158a6240ed41" prot="private" virt="non-virtual"><scope>GfRange3f</scope><name>_min</name></member>
      <member refid="class_gf_range3f_1a78b4581d49bd776f3561a7fdd6861132" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Contains</name></member>
      <member refid="class_gf_range3f_1ab355eb1fad49375ae1b6f58a084cab97" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Contains</name></member>
      <member refid="class_gf_range3f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>dimension</name></member>
      <member refid="class_gf_range3f_1a8cfff8e77cd451a7a266f9af5ab72ae7" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range3f_1a15c759b0086de7a1e8e0d3d37ec2a6d8" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range3f_1a2aa85887fad582a800edef621be80510" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetCorner</name></member>
      <member refid="class_gf_range3f_1a691f3d9f4add4769f698e578a8bb18dd" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range3f_1a3641cbda29b2f532b79132ab75feda94" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range3f_1a872f4d2ed5e1f6a578cc2d5938d7f907" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetMax</name></member>
      <member refid="class_gf_range3f_1aa0661c84e5da9dc7f621d64606a48db2" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range3f_1ae4125b6e21b928d1b5e2702ee81c1576" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetMin</name></member>
      <member refid="class_gf_range3f_1a70a41cedf456d3fe56249ade5e72d4e9" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetOctant</name></member>
      <member refid="class_gf_range3f_1a0d864731b2001b806e05439161d5ea00" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetSize</name></member>
      <member refid="class_gf_range3f_1a26b697fda9efd0f5adf3382863f1cfee" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GetUnion</name></member>
      <member refid="class_gf_range3f_1a80a36c9f1207c243fd1483fd31d529b1" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GfRange3f</name></member>
      <member refid="class_gf_range3f_1a68101f2075a787f9f1756a986ca1eba2" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GfRange3f</name></member>
      <member refid="class_gf_range3f_1a62bbaab5d3b24fef3726b7183235f8d6" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>GfRange3f</name></member>
      <member refid="class_gf_range3f_1a0faa964618b4ec8e215f1b3f40afc1cd" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>hash_value</name></member>
      <member refid="class_gf_range3f_1a690d91a3649bdcb2ff237f9945a11209" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Intersection</name></member>
      <member refid="class_gf_range3f_1a3f4ef13782509840aa29732254346718" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Intersection</name></member>
      <member refid="class_gf_range3f_1a7239afb23042c6d138533837bd05ba22" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range3f_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range3f_1acdb8af0c63b32bf27663933c27a1fb0b" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>IsInside</name></member>
      <member refid="class_gf_range3f_1addbb6d691d222f5cae7cbc304fc1f8df" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>IsInside</name></member>
      <member refid="class_gf_range3f_1add11fc490f6c5f1c7fde8d9cecb250af" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>IsOutside</name></member>
      <member refid="class_gf_range3f_1ad1c25f45d592e026bc7fbaa06a373f19" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range3f_1abcc78f18bc96cfee032e93e662e3e0b2" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator !=</name></member>
      <member refid="class_gf_range3f_1a0d5928e2a2a01ec3067927ad5268bb35" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator !=</name></member>
      <member refid="class_gf_range3f_1aec2eb158aac31e1c747e8f75a8ea88cd" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator *</name></member>
      <member refid="class_gf_range3f_1a43c607a095fada7b3c4e8d46dcbaee82" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator *</name></member>
      <member refid="class_gf_range3f_1adf73599646372be8208582941bc3f724" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator *=</name></member>
      <member refid="class_gf_range3f_1a9b991dea6bbea6478c68b6ab1125719f" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator -</name></member>
      <member refid="class_gf_range3f_1ac798b82e73f7d30a7d05d252ca5620d5" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator -=</name></member>
      <member refid="class_gf_range3f_1afe77f10e9113d53cc0f7e2c45e0d22b4" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator+</name></member>
      <member refid="class_gf_range3f_1a49aef55182617693e0e64e80562feb37" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator+=</name></member>
      <member refid="class_gf_range3f_1a50870f337afc4b3fb0aed97402453afc" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator/</name></member>
      <member refid="class_gf_range3f_1a13dbb6891a90cc1967be853e971192ae" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator/=</name></member>
      <member refid="class_gf_range3f_1af03272131c745629a4c3a4c34afd8d4d" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator==</name></member>
      <member refid="class_gf_range3f_1a32847b00958652e8d10716ada0119c61" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>operator==</name></member>
      <member refid="class_gf_range3f_1aa6367d45b5ca4f5de6b8f19ec5bc593c" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>ScalarType</name></member>
      <member refid="class_gf_range3f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range3f_1a72a5815732f42fedd1b6743b7e05e0de" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>SetMax</name></member>
      <member refid="class_gf_range3f_1a25893efaa003e62663d385f175411353" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>SetMin</name></member>
      <member refid="class_gf_range3f_1a41a8d2c22c2919580e45e6721f3dba9d" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Union</name></member>
      <member refid="class_gf_range3f_1a7ed707ecd937091d8814b3c49caa878f" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Union</name></member>
      <member refid="class_gf_range3f_1ac1a38c1319c4b55bf2482111e926fefe" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>Union</name></member>
      <member refid="class_gf_range3f_1a77fac01f6617b291ccec295f5299cb54" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>UnionWith</name></member>
      <member refid="class_gf_range3f_1a5e3c734500209cbd6e50f04a7a3ae425" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>UnionWith</name></member>
      <member refid="class_gf_range3f_1a3e0c5e735920ef591dd2e874f6338c72" prot="public" virt="non-virtual"><scope>GfRange3f</scope><name>UnitCube</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
