<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_utf8_code_point_view" kind="class" language="C++" prot="public" final="yes">
    <compoundname>TfUtf8CodePointView</compoundname>
    <includes refid="unicode_utils_8h" local="no">unicodeUtils.h</includes>
    <innerclass refid="class_tf_utf8_code_point_view_1_1_past_the_end_sentinel" prot="public">TfUtf8CodePointView::PastTheEndSentinel</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_utf8_code_point_view_1a0542f741323dfa1984d17b5178263b98" prot="public" static="no">
        <type><ref refid="class_tf_utf8_code_point_iterator" kindref="compound">TfUtf8CodePointIterator</ref></type>
        <definition>using const_iterator =  TfUtf8CodePointIterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="61" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_utf8_code_point_view_1a45e3268833533677dfdf82e7d90e3241" prot="private" static="no" mutable="no">
        <type>std::string_view</type>
        <definition>std::string_view _view</definition>
        <argsstring></argsstring>
        <name>_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="97" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1aacdef283fd1d884e515825d2a7f12dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfUtf8CodePointView</definition>
        <argsstring>()=default</argsstring>
        <name>TfUtf8CodePointView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1aaac712d60336f67627c2eb5cb69e0f13" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfUtf8CodePointView</definition>
        <argsstring>(const std::string_view &amp;view)</argsstring>
        <name>TfUtf8CodePointView</name>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="70" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1a457be19f3dbb67315bfa95607f9de129" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_utf8_code_point_iterator" kindref="compound">const_iterator</ref></type>
        <definition>TfUtf8CodePointView::const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="72" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1a2077736475044a634aa1013a40f7fd64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_utf8_code_point_view_1_1_past_the_end_sentinel" kindref="compound">PastTheEndSentinel</ref></type>
        <definition>PastTheEndSentinel end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>The sentinel will compare as equal with any iterator at or past the end of the underlying string_view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="76" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1a17b7bf845c5a91199c78536cab5a2cae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_utf8_code_point_iterator" kindref="compound">const_iterator</ref></type>
        <definition>TfUtf8CodePointView::const_iterator cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="81" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1af33cf34235a2c84eef75c79195690640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_utf8_code_point_view_1_1_past_the_end_sentinel" kindref="compound">PastTheEndSentinel</ref></type>
        <definition>PastTheEndSentinel cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>The out of range sentinel will compare as equal with any iterator at or past the end of the underlying string_view&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="85" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_utf8_code_point_view_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if the underlying view is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/unicodeUtils.h" line="91" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="91" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for a UTF-8 encoded <computeroutput>std::string_view</computeroutput> that can be iterated over as code points instead of bytes. </para>
    </briefdescription>
    <detaileddescription>
<para>Because of the variable length encoding, the <computeroutput>Utf8StringView</computeroutput> iterator is a ForwardIterator and is read only.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">std::string<sp/>value{</highlight><highlight class="stringliteral">&quot;âˆ«dx&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_tf_utf8_code_point_view" kindref="compound">TfUtf8CodePointView</ref><sp/>view{value};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>codePoint<sp/>:<sp/>view)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(codePoint<sp/>==<sp/>TfTfUtf8CodePointIterator::INVALID_CODE_POINT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1gaba2e638edaae9e9c6e5180e020f12ccf" kindref="member">TF_WARN</ref>(</highlight><highlight class="stringliteral">&quot;String<sp/>cannot<sp/>be<sp/>decoded.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">(The<sp/><ref refid="class_tf_utf8_code_point_view" kindref="compound">TfUtf8CodePointView</ref></highlight><highlight class="stringliteral">&apos;s<sp/>sentinel<sp/>end()<sp/>will<sp/>make<sp/>it<sp/>compatible<sp/>with</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/>the<sp/>STL<sp/>ranges<sp/>library).</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="pxr/base/tf/unicodeUtils.h" line="59" column="1" bodyfile="pxr/base/tf/unicodeUtils.h" bodystart="59" bodyend="98"/>
    <listofallmembers>
      <member refid="class_tf_utf8_code_point_view_1a45e3268833533677dfdf82e7d90e3241" prot="private" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>_view</name></member>
      <member refid="class_tf_utf8_code_point_view_1a457be19f3dbb67315bfa95607f9de129" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>begin</name></member>
      <member refid="class_tf_utf8_code_point_view_1a17b7bf845c5a91199c78536cab5a2cae" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>cbegin</name></member>
      <member refid="class_tf_utf8_code_point_view_1af33cf34235a2c84eef75c79195690640" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>cend</name></member>
      <member refid="class_tf_utf8_code_point_view_1a0542f741323dfa1984d17b5178263b98" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>const_iterator</name></member>
      <member refid="class_tf_utf8_code_point_view_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>empty</name></member>
      <member refid="class_tf_utf8_code_point_view_1a2077736475044a634aa1013a40f7fd64" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>end</name></member>
      <member refid="class_tf_utf8_code_point_view_1aacdef283fd1d884e515825d2a7f12dc8" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>TfUtf8CodePointView</name></member>
      <member refid="class_tf_utf8_code_point_view_1aaac712d60336f67627c2eb5cb69e0f13" prot="public" virt="non-virtual"><scope>TfUtf8CodePointView</scope><name>TfUtf8CodePointView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
