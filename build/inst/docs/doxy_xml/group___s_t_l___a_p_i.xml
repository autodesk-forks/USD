<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group___s_t_l___a_p_i" kind="group">
    <compoundname>STL_API</compoundname>
    <title>STL-like API</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" prot="public" static="no">
        <type>ElementType *</type>
        <definition>using iterator =  ElementType *</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="238" column="1" bodyfile="pxr/base/vt/array.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" prot="public" static="no">
        <type>ElementType const *</type>
        <definition>using const_iterator =  ElementType const *</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Const iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="240" column="1" bodyfile="pxr/base/vt/array.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga92b881db836646f4039adcbb73c8595f" prot="public" static="no">
        <type>std::reverse_iterator&lt; iterator &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>Reverse iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="243" column="1" bodyfile="pxr/base/vt/array.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" prot="public" static="no">
        <type>std::reverse_iterator&lt; const_iterator &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>Reverse const iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="245" column="1" bodyfile="pxr/base/vt/array.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga062a81994c6351d45faae2eeae251571" prot="public" static="no">
        <type>ElementType &amp;</type>
        <definition>typedef ElementType&amp; reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Reference type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="248" column="1" bodyfile="pxr/base/vt/array.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" prot="public" static="no">
        <type>ElementType const  &amp;</type>
        <definition>typedef ElementType const&amp; const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Const reference type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="250" column="1" bodyfile="pxr/base/vt/array.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga554a8ecb4d7d6ad1b90e6cdd34ab7406" prot="public" static="no">
        <type>ElementType *</type>
        <definition>typedef ElementType* pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Pointer type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="252" column="1" bodyfile="pxr/base/vt/array.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga8aa6ec70e98bab51e33e8c7a31dbeeeb" prot="public" static="no">
        <type>ElementType const  *</type>
        <definition>typedef ElementType const* const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Const pointer type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="254" column="1" bodyfile="pxr/base/vt/array.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gad69bd11391be1a1dba5c8202259664f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return a non-const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="379" column="1" bodyfile="pxr/base/vt/array.h" bodystart="379" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gacad38d52497a975bfb6f2f6acd76631f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a non-const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="382" column="1" bodyfile="pxr/base/vt/array.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga29305669b60ca1680752e2fc3592ba99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return a const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="385" column="1" bodyfile="pxr/base/vt/array.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaccf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return a const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="387" column="1" bodyfile="pxr/base/vt/array.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga39112ae08f6ffc7ee58c6aa79772e094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Return a const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="390" column="1" bodyfile="pxr/base/vt/array.h" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga93791e61ab486b4022c389d634b4facc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Return a const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="392" column="1" bodyfile="pxr/base/vt/array.h" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gacea44ed500a54b2bb93e16b86e81afa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a non-const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="396" column="1" bodyfile="pxr/base/vt/array.h" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga68c599ddcbfddc65170de524ac165e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="399" column="1" bodyfile="pxr/base/vt/array.h" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaf086cceac199bd735c7a97c2a8d7ed21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="402" column="1" bodyfile="pxr/base/vt/array.h" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga07da1fdc890b6949f1a20a1961c6fc44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a const reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="406" column="1" bodyfile="pxr/base/vt/array.h" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga81f80a31923e85af56a7b1ae0712a33b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="411" column="1" bodyfile="pxr/base/vt/array.h" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gabef9dfc7607c7e1a3854788ba56a4f34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Return a const reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="413" column="1" bodyfile="pxr/base/vt/array.h" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga36e4d11a00a3572c87bf7e913e9b5ca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a non-const pointer to this array&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="417" column="1" bodyfile="pxr/base/vt/array.h" bodystart="417" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga3428c77f74e61bb1e0e4a836e2b68004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_pointer</type>
        <definition>const_pointer data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a const pointer to this array&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="419" column="1" bodyfile="pxr/base/vt/array.h" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga1890be7d2bb072293497cff06617c9ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_pointer</type>
        <definition>const_pointer cdata</definition>
        <argsstring>() const</argsstring>
        <name>cdata</name>
        <briefdescription>
<para>Return a const pointer to the data held by this array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="421" column="1" bodyfile="pxr/base/vt/array.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Initializes a new element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" kindref="member">push_back(ElementType const&amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" kindref="member">push_back(ElementType&amp;&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="429" column="1" bodyfile="pxr/base/vt/array.h" bodystart="429" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void push_back</definition>
        <argsstring>(ElementType const &amp;element)</argsstring>
        <name>push_back</name>
        <param>
          <type>ElementType const &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Appends an element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" kindref="member">emplace_back</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" kindref="member">push_back(ElementType&amp;&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="459" column="1" bodyfile="pxr/base/vt/array.h" bodystart="459" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void push_back</definition>
        <argsstring>(ElementType &amp;&amp;element)</argsstring>
        <name>push_back</name>
        <param>
          <type>ElementType &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Appends an element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" kindref="member">emplace_back</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" kindref="member">push_back(ElementType const&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="468" column="1" bodyfile="pxr/base/vt/array.h" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga058bda4957df6a97b1ea6c9fd783f672" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Remove the last element of an array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="474" column="1" bodyfile="pxr/base/vt/array.h" bodystart="474" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the total number of elements in this array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="488" column="1" bodyfile="pxr/base/vt/array.h" bodystart="488" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga7223528283cd4e5872e0cc716bf9bd9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Return the number of items this container can grow to hold without triggering a (re)allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if the underlying data is not uniquely owned, a reallocation can occur upon object insertion even if there is remaining capacity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="494" column="1" bodyfile="pxr/base/vt/array.h" bodystart="494" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga3407699345c5de0bb98eb92ed03e2f72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Return a theoretical maximum size limit for the container. </para>
        </briefdescription>
        <detaileddescription>
<para>In practice this size is unachievable due to the amount of available memory or other system limitations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="506" column="1" bodyfile="pxr/base/vt/array.h" bodystart="506" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga644718bb2fb240de962dc3c9a1fdf0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if this array contains no elements, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="514" column="1" bodyfile="pxr/base/vt/array.h" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga38219a474fc83b17becfa5838a06db37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reserve</definition>
        <argsstring>(size_t num)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Ensure enough memory is allocated to hold <computeroutput>num</computeroutput> elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this currently does not ensure that the underlying data is uniquely owned. If that is desired, invoke a method like <ref refid="group___s_t_l___a_p_i_1ga36e4d11a00a3572c87bf7e913e9b5ca1" kindref="member">data()</ref> first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="519" column="1" bodyfile="pxr/base/vt/array.h" bodystart="519" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga6a48363b4355f6f5b441637774f79a59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return a non-const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="533" column="1" bodyfile="pxr/base/vt/array.h" bodystart="533" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga0ae6b4f9719202f7ddb334c16fb03d80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return a const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="536" column="1" bodyfile="pxr/base/vt/array.h" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaeea74d6d743836c57fef3d0d4e6c982b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference cfront</definition>
        <argsstring>() const</argsstring>
        <name>cfront</name>
        <briefdescription>
<para>Return a const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="539" column="1" bodyfile="pxr/base/vt/array.h" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaf71e6c1eccbc12e9339c00a86a981a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Return a reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="544" column="1" bodyfile="pxr/base/vt/array.h" bodystart="544" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga61772c77ad2abfbb296912e7281e154c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>Return a const reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="547" column="1" bodyfile="pxr/base/vt/array.h" bodystart="547" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga6c4a8ea059e1302891cfde5aa1707e07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference cback</definition>
        <argsstring>() const</argsstring>
        <name>cback</name>
        <briefdescription>
<para>Return a const reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="550" column="1" bodyfile="pxr/base/vt/array.h" bodystart="550" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga77b12cbee1acfefe67940bb34d6d02d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, value-initialize any newly added elements. For example, calling resize(10) on an array of size 5 would change the size to 10, the first 5 elements would be left unchanged and the last 5 elements would be value-initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="557" column="1" bodyfile="pxr/base/vt/array.h" bodystart="557" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gab3f1a15635e98c1c919fe506803547cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type const &amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="563" column="1" bodyfile="pxr/base/vt/array.h" bodystart="563" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga04046f3c8c4df8067d8fa4dcff578d96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type &amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="572" column="1" bodyfile="pxr/base/vt/array.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga7b981212a5a3e3e992df0aae2de7aab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type &amp;&amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="578" column="1" bodyfile="pxr/base/vt/array.h" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gae0e1201e90eefe8e8bfa40f67e6cfa8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FillElemsFn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, FillElemsFn &amp;&amp;fillElems)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>FillElemsFn &amp;&amp;</type>
          <declname>fillElems</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by calling <computeroutput>fillElems(first, last)</computeroutput>. Note that this function is passed pointers to uninitialized memory, so the elements must be filled with something like placement-new. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="587" column="1" bodyfile="pxr/base/vt/array.h" bodystart="587" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gac8bb3912a3ce86b15842e79d0b421204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Equivalent to resize(0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="642" column="1" bodyfile="pxr/base/vt/array.h" bodystart="642" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga29790c28710ec0e64b48c2f4edd0b08c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator erase</definition>
        <argsstring>(const_iterator pos)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Removes a single element at <computeroutput>pos</computeroutput> from the array. </para>
        </briefdescription>
        <detaileddescription>
<para>To match the behavior of std::vector, returns an iterator pointing to the position following the removed element.</para>
<para>Since the returned iterator is mutable, when the array is not uniquely owned, a copy will be required.</para>
<para>Erase invalidates all iterators (unlike std::vector where iterators prior to <computeroutput>pos</computeroutput> remain valid).</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gaa3af768723cd533218ea3d83af440713" kindref="member">erase(const_iterator, const_iterator)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="670" column="1" bodyfile="pxr/base/vt/array.h" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaa3af768723cd533218ea3d83af440713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator erase</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Remove a range of elements [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) from the array. </para>
        </briefdescription>
        <detaileddescription>
<para>To match the behavior of std::vector, returns an iterator at the position following the removed element. If no elements are removed, a non-const iterator pointing to last will be returned.</para>
<para>Since the returned iterator is mutable, when the array is not uniquely owned, a copy will be required even when the contents are unchanged.</para>
<para>Erase invalidates all iterators (unlike std::vector where iterators prior to <computeroutput>first</computeroutput> remain valid).</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga29790c28710ec0e64b48c2f4edd0b08c" kindref="member">erase(const_iterator)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="690" column="1" bodyfile="pxr/base/vt/array.h" bodystart="690" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga9fe001f2e5e60d621aae49ff7426656e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIter</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_integral&lt; ForwardIter &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_integral&lt;ForwardIter&gt;::value&gt;::type assign</definition>
        <argsstring>(ForwardIter first, ForwardIter last)</argsstring>
        <name>assign</name>
        <param>
          <type>ForwardIter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Assign array contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">array.resize(std::distance(first,<sp/>last));</highlight></codeline>
<codeline><highlight class="normal">std::copy(first,<sp/>last,<sp/>array.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="742" column="1" bodyfile="pxr/base/vt/array.h" bodystart="742" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga5cd26abc6cd03d02552ee7858024aab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(size_t n, const value_type &amp;fill)</argsstring>
        <name>assign</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const value_type &amp;</type>
          <declname>fill</declname>
        </param>
        <briefdescription>
<para>Assign array contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">array.resize(n);</highlight></codeline>
<codeline><highlight class="normal">std::fill(array.begin(),<sp/>array.end(),<sp/>fill);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="759" column="1" bodyfile="pxr/base/vt/array.h" bodystart="759" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga057c4b4b4b354783b2bc0887dccc0d7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(std::initializer_list&lt; ELEM &gt; initializerList)</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; ELEM &gt;</type>
          <declname>initializerList</declname>
        </param>
        <briefdescription>
<para>Assign array contents via intializer list Equivalent to: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">array.assign(list.begin(),<sp/>list.end());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="775" column="1" bodyfile="pxr/base/vt/array.h" bodystart="775" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga47aa265438facb25492ef73d389ca718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(VtArray &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this array with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="780" column="1" bodyfile="pxr/base/vt/array.h" bodystart="780" bodyend="784"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
