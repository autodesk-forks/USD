<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_ar_resolver_scoped_cache" kind="class" language="C++" prot="public">
    <compoundname>ArResolverScopedCache</compoundname>
    <includes refid="resolver_scoped_cache_8h" local="no">resolverScopedCache.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ar_resolver_scoped_cache_1a28be074bd67d517c5d3e80c09fd909d0" prot="private" static="no" mutable="no">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue _cacheScopeData</definition>
        <argsstring></argsstring>
        <name>_cacheScopeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="78" column="1" bodyfile="pxr/usd/ar/resolverScopedCache.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ar_resolver_scoped_cache_1a7c2e1b6c83b3b30565c98d334374b7a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ArResolverScopedCache</definition>
        <argsstring>(const ArResolverScopedCache &amp;)=delete</argsstring>
        <name>ArResolverScopedCache</name>
        <param>
          <type>const <ref refid="class_ar_resolver_scoped_cache" kindref="compound">ArResolverScopedCache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_scoped_cache_1a81cdc5a623ecaecfbf2d613ab567514d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ar_resolver_scoped_cache" kindref="compound">ArResolverScopedCache</ref> &amp;</type>
        <definition>ArResolverScopedCache&amp; operator=</definition>
        <argsstring>(const ArResolverScopedCache &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_ar_resolver_scoped_cache" kindref="compound">ArResolverScopedCache</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_scoped_cache_1a4003a13e1eef07999651d373f4d94983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API</type>
        <definition>AR_API ArResolverScopedCache</definition>
        <argsstring>()</argsstring>
        <name>ArResolverScopedCache</name>
        <briefdescription>
<para>Begin an asset resolver cache scope. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="class_ar_resolver_1a522ae6b8a14dc87c9116109e619f062b" kindref="member">ArResolver::BeginCacheScope</ref> on the configured asset resolver and saves the cacheScopeData populated by that function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_scoped_cache_1a977210ef8d4c31999b4808db93559ef4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>AR_API</type>
        <definition>AR_API ArResolverScopedCache</definition>
        <argsstring>(const ArResolverScopedCache *parent)</argsstring>
        <name>ArResolverScopedCache</name>
        <param>
          <type>const <ref refid="class_ar_resolver_scoped_cache" kindref="compound">ArResolverScopedCache</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Begin an asset resolver cache scope that shares data with the given <computeroutput>parent</computeroutput> scope. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="class_ar_resolver_1a522ae6b8a14dc87c9116109e619f062b" kindref="member">ArResolver::BeginCacheScope</ref> on the configured asset resolver, saves the cacheScopeData stored in <computeroutput>parent</computeroutput> and passes that to that function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_resolver_scoped_cache_1a761900cf41a1788d4de88bd74c223333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API</type>
        <definition>AR_API ~ArResolverScopedCache</definition>
        <argsstring>()</argsstring>
        <name>~ArResolverScopedCache</name>
        <briefdescription>
<para>End an asset resolver cache scope. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="class_ar_resolver_1a266aaced9fc6decb4ae2ad884bd46517" kindref="member">ArResolver::EndCacheScope</ref> on the configured asset resolver, passing the saved cacheScopeData to that function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/resolverScopedCache.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper object for managing asset resolver cache scopes. </para>
    </briefdescription>
    <detaileddescription>
<para>A scoped resolution cache indicates to the resolver that results of calls to Resolve should be cached for a certain scope. This is important for performance and also for consistency <ndash/> it ensures that repeated calls to Resolve with the same parameters will return the same result.</para>
<para><simplesect kind="see"><para><ref refid="class_ar_resolver_1ArResolver_scopedCache" kindref="member">Scoped Resolution Cache</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="pxr/usd/ar/resolverScopedCache.h" line="47" column="1" bodyfile="pxr/usd/ar/resolverScopedCache.h" bodystart="46" bodyend="79"/>
    <listofallmembers>
      <member refid="class_ar_resolver_scoped_cache_1a28be074bd67d517c5d3e80c09fd909d0" prot="private" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>_cacheScopeData</name></member>
      <member refid="class_ar_resolver_scoped_cache_1a7c2e1b6c83b3b30565c98d334374b7a7" prot="public" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>ArResolverScopedCache</name></member>
      <member refid="class_ar_resolver_scoped_cache_1a4003a13e1eef07999651d373f4d94983" prot="public" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>ArResolverScopedCache</name></member>
      <member refid="class_ar_resolver_scoped_cache_1a977210ef8d4c31999b4808db93559ef4" prot="public" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>ArResolverScopedCache</name></member>
      <member refid="class_ar_resolver_scoped_cache_1a81cdc5a623ecaecfbf2d613ab567514d" prot="public" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>operator=</name></member>
      <member refid="class_ar_resolver_scoped_cache_1a761900cf41a1788d4de88bd74c223333" prot="public" virt="non-virtual"><scope>ArResolverScopedCache</scope><name>~ArResolverScopedCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
