<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="wrap_array_8h" kind="file" language="C++">
    <compoundname>wrapArray.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2vt_2api_8h" local="yes">pxr/base/vt/api.h</includes>
    <includes refid="array_8h" local="yes">pxr/base/vt/array.h</includes>
    <includes refid="base_2vt_2types_8h" local="yes">pxr/base/vt/types.h</includes>
    <includes refid="vt_2value_8h" local="yes">pxr/base/vt/value.h</includes>
    <includes refid="py_operators_8h" local="yes">pxr/base/vt/pyOperators.h</includes>
    <includes refid="functions_8h" local="yes">pxr/base/vt/functions.h</includes>
    <includes refid="arch_2math_8h" local="yes">pxr/base/arch/math.h</includes>
    <includes refid="inttypes_8h" local="yes">pxr/base/arch/inttypes.h</includes>
    <includes refid="pragmas_8h" local="yes">pxr/base/arch/pragmas.h</includes>
    <includes refid="half_8h" local="yes">pxr/base/gf/half.h</includes>
    <includes refid="gf_2traits_8h" local="yes">pxr/base/gf/traits.h</includes>
    <includes refid="py_container_conversions_8h" local="yes">pxr/base/tf/pyContainerConversions.h</includes>
    <includes refid="py_function_8h" local="yes">pxr/base/tf/pyFunction.h</includes>
    <includes refid="py_lock_8h" local="yes">pxr/base/tf/pyLock.h</includes>
    <includes refid="py_obj_wrapper_8h" local="yes">pxr/base/tf/pyObjWrapper.h</includes>
    <includes refid="py_result_conversions_8h" local="yes">pxr/base/tf/pyResultConversions.h</includes>
    <includes refid="base_2tf_2py_utils_8h" local="yes">pxr/base/tf/pyUtils.h</includes>
    <includes refid="base_2tf_2iterator_8h" local="yes">pxr/base/tf/iterator.h</includes>
    <includes refid="meta_8h" local="yes">pxr/base/tf/meta.h</includes>
    <includes refid="span_8h" local="yes">pxr/base/tf/span.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes refid="tf_8h" local="yes">pxr/base/tf/tf.h</includes>
    <includes refid="wrap_type_helpers_8h" local="yes">pxr/base/tf/wrapTypeHelpers.h</includes>
    <includes local="no">boost/preprocessor/punctuation/comma_if.hpp</includes>
    <includes local="no">boost/preprocessor/repetition/repeat.hpp</includes>
    <includes local="no">boost/preprocessor/seq/for_each.hpp</includes>
    <includes local="no">boost/python/class.hpp</includes>
    <includes local="no">boost/python/copy_const_reference.hpp</includes>
    <includes local="no">boost/python/def.hpp</includes>
    <includes local="no">boost/python/detail/api_placeholder.hpp</includes>
    <includes local="no">boost/python/extract.hpp</includes>
    <includes local="no">boost/python/implicit.hpp</includes>
    <includes local="no">boost/python/iterator.hpp</includes>
    <includes local="no">boost/python/make_constructor.hpp</includes>
    <includes local="no">boost/python/object.hpp</includes>
    <includes local="no">boost/python/operators.hpp</includes>
    <includes local="no">boost/python/return_arg.hpp</includes>
    <includes local="no">boost/python/slice.hpp</includes>
    <includes local="no">boost/python/type_id.hpp</includes>
    <includes local="no">boost/python/overloads.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">numeric</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="97004">
        <label>boost/python/iterator.hpp</label>
      </node>
      <node id="96932">
        <label>list</label>
      </node>
      <node id="96913">
        <label>locale</label>
      </node>
      <node id="96906">
        <label>atomic</label>
      </node>
      <node id="96915">
        <label>stdarg.h</label>
      </node>
      <node id="96861">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="96862" relation="include">
        </childnode>
        <childnode refid="96863" relation="include">
        </childnode>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96864" relation="include">
        </childnode>
      </node>
      <node id="96936">
        <label>functional</label>
      </node>
      <node id="96853">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="96855">
        <label>pxr/base/vt/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96856" relation="include">
        </childnode>
        <childnode refid="96878" relation="include">
        </childnode>
        <childnode refid="96886" relation="include">
        </childnode>
        <childnode refid="96887" relation="include">
        </childnode>
        <childnode refid="96900" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96910" relation="include">
        </childnode>
        <childnode refid="96916" relation="include">
        </childnode>
        <childnode refid="96918" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
        <childnode refid="96917" relation="include">
        </childnode>
        <childnode refid="96919" relation="include">
        </childnode>
        <childnode refid="96893" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96920" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96893">
        <label>limits</label>
      </node>
      <node id="96925">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="96955">
        <label>pxr/base/tf/iterator.h</label>
        <link refid="base_2tf_2iterator_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96919" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
      </node>
      <node id="96939">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="96919">
        <label>iterator</label>
      </node>
      <node id="96988">
        <label>boost/python/converter/registered.hpp</label>
      </node>
      <node id="96863">
        <label>cstdint</label>
      </node>
      <node id="96970">
        <label>pxr/base/tf/errorMark.h</label>
        <link refid="error_mark_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96971" relation="include">
        </childnode>
        <childnode refid="96984" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96947">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96857" relation="include">
        </childnode>
        <childnode refid="96948" relation="include">
        </childnode>
        <childnode refid="96949" relation="include">
        </childnode>
        <childnode refid="96883" relation="include">
        </childnode>
        <childnode refid="96937" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
      </node>
      <node id="96943">
        <label>boost/preprocessor/iterate.hpp</label>
      </node>
      <node id="96912">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96913" relation="include">
        </childnode>
        <childnode refid="96914" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96905">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="97000">
        <label>boost/python/copy_const_reference.hpp</label>
      </node>
      <node id="97009">
        <label>boost/python/overloads.hpp</label>
      </node>
      <node id="96940">
        <label>pxr/base/vt/pyOperators.h</label>
        <link refid="py_operators_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
      </node>
      <node id="96963">
        <label>boost/python/list.hpp</label>
      </node>
      <node id="96865">
        <label>cmath</label>
      </node>
      <node id="96858">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96859" relation="include">
        </childnode>
        <childnode refid="96860" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96866" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
      </node>
      <node id="96958">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="96975">
        <label>numeric</label>
      </node>
      <node id="97005">
        <label>boost/python/make_constructor.hpp</label>
      </node>
      <node id="96949">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96950" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96904">
        <label>pxr/base/tf/pointerAndBits.h</label>
        <link refid="pointer_and_bits_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96863" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
      </node>
      <node id="96994">
        <label>pxr/base/tf/span.h</label>
        <link refid="span_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96910" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
        <childnode refid="96919" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96931">
        <label>cstdarg</label>
      </node>
      <node id="96870">
        <label>string</label>
      </node>
      <node id="96885">
        <label>pxr/base/tf/functionRef.h</label>
        <link refid="function_ref_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
      </node>
      <node id="96897">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96853" relation="include">
        </childnode>
      </node>
      <node id="96959">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="96981">
        <label>pxr/base/tf/warning.h</label>
        <link refid="warning_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96978" relation="include">
        </childnode>
      </node>
      <node id="96871">
        <label>map</label>
      </node>
      <node id="96862">
        <label>cinttypes</label>
      </node>
      <node id="96851">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="96903">
        <label>unordered_set</label>
      </node>
      <node id="96967">
        <label>pxr/base/tf/pyFunction.h</label>
        <link refid="py_function_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96968" relation="include">
        </childnode>
        <childnode refid="96928" relation="include">
        </childnode>
        <childnode refid="96922" relation="include">
        </childnode>
        <childnode refid="96956" relation="include">
        </childnode>
        <childnode refid="96987" relation="include">
        </childnode>
        <childnode refid="96988" relation="include">
        </childnode>
        <childnode refid="96989" relation="include">
        </childnode>
        <childnode refid="96961" relation="include">
        </childnode>
        <childnode refid="96958" relation="include">
        </childnode>
        <childnode refid="96959" relation="include">
        </childnode>
        <childnode refid="96990" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
      </node>
      <node id="96938">
        <label>pxr/base/tf/type_Impl.h</label>
        <link refid="type___impl_8h_source"/>
        <childnode refid="96916" relation="include">
        </childnode>
      </node>
      <node id="96946">
        <label>pxr/base/tf/pyContainerConversions.h</label>
        <link refid="py_container_conversions_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96951" relation="include">
        </childnode>
        <childnode refid="96910" relation="include">
        </childnode>
        <childnode refid="96955" relation="include">
        </childnode>
        <childnode refid="96956" relation="include">
        </childnode>
        <childnode refid="96963" relation="include">
        </childnode>
        <childnode refid="96964" relation="include">
        </childnode>
        <childnode refid="96961" relation="include">
        </childnode>
        <childnode refid="96965" relation="include">
        </childnode>
        <childnode refid="96966" relation="include">
        </childnode>
        <childnode refid="96932" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96880">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96881" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96874" relation="include">
        </childnode>
      </node>
      <node id="97008">
        <label>boost/python/slice.hpp</label>
      </node>
      <node id="96852">
        <label>pxr/base/vt/api.h</label>
        <link refid="base_2vt_2api_8h_source"/>
        <childnode refid="96853" relation="include">
        </childnode>
      </node>
      <node id="96982">
        <label>tbb/enumerable_thread_specific.h</label>
      </node>
      <node id="96992">
        <label>pxr/base/tf/meta.h</label>
        <link refid="meta_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
        <childnode refid="96993" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96901">
        <label>stddef.h</label>
      </node>
      <node id="96859">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="97010">
        <label>ostream</label>
      </node>
      <node id="96971">
        <label>pxr/base/tf/diagnosticMgr.h</label>
        <link refid="diagnostic_mgr_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96899" relation="include">
        </childnode>
        <childnode refid="96972" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96977" relation="include">
        </childnode>
        <childnode refid="96979" relation="include">
        </childnode>
        <childnode refid="96980" relation="include">
        </childnode>
        <childnode refid="96930" relation="include">
        </childnode>
        <childnode refid="96981" relation="include">
        </childnode>
        <childnode refid="96951" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96900" relation="include">
        </childnode>
        <childnode refid="96982" relation="include">
        </childnode>
        <childnode refid="96983" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96931" relation="include">
        </childnode>
        <childnode refid="96932" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96986">
        <label>boost/python/call.hpp</label>
      </node>
      <node id="96882">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="96957">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96958" relation="include">
        </childnode>
        <childnode refid="96959" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96950">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
      </node>
      <node id="96883">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
      </node>
      <node id="96953">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96990">
        <label>boost/function.hpp</label>
      </node>
      <node id="96890">
        <label>pxr/base/gf/ilmbase_half.h</label>
        <link refid="ilmbase__half_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96891" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
      </node>
      <node id="96889">
        <label>pxr/base/gf/half.h</label>
        <link refid="half_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96890" relation="include">
        </childnode>
        <childnode refid="96892" relation="include">
        </childnode>
        <childnode refid="96894" relation="include">
        </childnode>
      </node>
      <node id="96891">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="96853" relation="include">
        </childnode>
      </node>
      <node id="96923">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96913" relation="include">
        </childnode>
        <childnode refid="96924" relation="include">
        </childnode>
      </node>
      <node id="96983">
        <label>tbb/spin_rw_mutex.h</label>
      </node>
      <node id="97003">
        <label>boost/python/implicit.hpp</label>
      </node>
      <node id="96914">
        <label>any</label>
      </node>
      <node id="96977">
        <label>pxr/base/tf/error.h</label>
        <link refid="tf_2error_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96978" relation="include">
        </childnode>
      </node>
      <node id="96941">
        <label>pxr/base/vt/functions.h</label>
        <link refid="functions_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96855" relation="include">
        </childnode>
        <childnode refid="96942" relation="include">
        </childnode>
        <childnode refid="96943" relation="include">
        </childnode>
        <childnode refid="96944" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96945" relation="include">
        </childnode>
      </node>
      <node id="96960">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="96864">
        <label>sys/types.h</label>
      </node>
      <node id="96973">
        <label>pxr/base/tf/stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96974" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
      </node>
      <node id="96954">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96910" relation="include">
        </childnode>
        <childnode refid="96857" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96952" relation="include">
        </childnode>
        <childnode refid="96880" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96995">
        <label>pxr/base/tf/wrapTypeHelpers.h</label>
        <link refid="wrap_type_helpers_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96922" relation="include">
        </childnode>
        <childnode refid="96934" relation="include">
        </childnode>
        <childnode refid="96996" relation="include">
        </childnode>
        <childnode refid="96997" relation="include">
        </childnode>
      </node>
      <node id="96879">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96880" relation="include">
        </childnode>
        <childnode refid="96857" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96883" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96877">
        <label>typeinfo</label>
      </node>
      <node id="96976">
        <label>cstdio</label>
      </node>
      <node id="96964">
        <label>boost/python/tuple.hpp</label>
      </node>
      <node id="96927">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="96926">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="96993">
        <label>tuple</label>
      </node>
      <node id="96951">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96948" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96858" relation="include">
        </childnode>
        <childnode refid="96952" relation="include">
        </childnode>
        <childnode refid="96954" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96895">
        <label>pxr/base/tf/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96857" relation="include">
        </childnode>
        <childnode refid="96902" relation="include">
        </childnode>
        <childnode refid="96904" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
      </node>
      <node id="97007">
        <label>boost/python/return_arg.hpp</label>
      </node>
      <node id="96916">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96917" relation="include">
        </childnode>
        <childnode refid="96863" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96850">
        <label>pxr/base/vt/wrapArray.h</label>
        <link refid="wrap_array_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96855" relation="include">
        </childnode>
        <childnode refid="96887" relation="include">
        </childnode>
        <childnode refid="96921" relation="include">
        </childnode>
        <childnode refid="96940" relation="include">
        </childnode>
        <childnode refid="96941" relation="include">
        </childnode>
        <childnode refid="96860" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96889" relation="include">
        </childnode>
        <childnode refid="96894" relation="include">
        </childnode>
        <childnode refid="96946" relation="include">
        </childnode>
        <childnode refid="96967" relation="include">
        </childnode>
        <childnode refid="96928" relation="include">
        </childnode>
        <childnode refid="96922" relation="include">
        </childnode>
        <childnode refid="96991" relation="include">
        </childnode>
        <childnode refid="96956" relation="include">
        </childnode>
        <childnode refid="96955" relation="include">
        </childnode>
        <childnode refid="96992" relation="include">
        </childnode>
        <childnode refid="96994" relation="include">
        </childnode>
        <childnode refid="96930" relation="include">
        </childnode>
        <childnode refid="96858" relation="include">
        </childnode>
        <childnode refid="96995" relation="include">
        </childnode>
        <childnode refid="96998" relation="include">
        </childnode>
        <childnode refid="96999" relation="include">
        </childnode>
        <childnode refid="96907" relation="include">
        </childnode>
        <childnode refid="96996" relation="include">
        </childnode>
        <childnode refid="97000" relation="include">
        </childnode>
        <childnode refid="97001" relation="include">
        </childnode>
        <childnode refid="97002" relation="include">
        </childnode>
        <childnode refid="96961" relation="include">
        </childnode>
        <childnode refid="97003" relation="include">
        </childnode>
        <childnode refid="97004" relation="include">
        </childnode>
        <childnode refid="97005" relation="include">
        </childnode>
        <childnode refid="96959" relation="include">
        </childnode>
        <childnode refid="97006" relation="include">
        </childnode>
        <childnode refid="97007" relation="include">
        </childnode>
        <childnode refid="97008" relation="include">
        </childnode>
        <childnode refid="96962" relation="include">
        </childnode>
        <childnode refid="97009" relation="include">
        </childnode>
        <childnode refid="96918" relation="include">
        </childnode>
        <childnode refid="96975" relation="include">
        </childnode>
        <childnode refid="97010" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96860">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96865" relation="include">
        </childnode>
      </node>
      <node id="96876">
        <label>vector</label>
      </node>
      <node id="96856">
        <label>pxr/base/vt/hash.h</label>
        <link refid="vt_2hash_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96857" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
      </node>
      <node id="96991">
        <label>pxr/base/tf/pyResultConversions.h</label>
        <link refid="py_result_conversions_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96956" relation="include">
        </childnode>
        <childnode refid="96964" relation="include">
        </childnode>
        <childnode refid="96963" relation="include">
        </childnode>
        <childnode refid="96960" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96868">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="96853" relation="include">
        </childnode>
      </node>
      <node id="96928">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96923" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96974">
        <label>pxr/base/arch/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96881" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96918" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96919" relation="include">
        </childnode>
        <childnode refid="96975" relation="include">
        </childnode>
      </node>
      <node id="96920">
        <label>new</label>
      </node>
      <node id="96985">
        <label>boost/python/default_call_policies.hpp</label>
      </node>
      <node id="96961">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="96892">
        <label>pxr/base/gf/ilmbase_halfLimits.h</label>
        <link refid="ilmbase__half_limits_8h_source"/>
        <childnode refid="96893" relation="include">
        </childnode>
        <childnode refid="96890" relation="include">
        </childnode>
      </node>
      <node id="96867">
        <label>utility</label>
      </node>
      <node id="96968">
        <label>pxr/base/tf/pyCall.h</label>
        <link refid="py_call_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96969" relation="include">
        </childnode>
        <childnode refid="96928" relation="include">
        </childnode>
        <childnode refid="96922" relation="include">
        </childnode>
        <childnode refid="96986" relation="include">
        </childnode>
      </node>
      <node id="96933">
        <label>sstream</label>
      </node>
      <node id="96911">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96881" relation="include">
        </childnode>
        <childnode refid="96900" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96997">
        <label>boost/python/def_visitor.hpp</label>
      </node>
      <node id="96945">
        <label>BOOST_PP_ITERATE()</label>
      </node>
      <node id="96948">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96998">
        <label>boost/preprocessor/punctuation/comma_if.hpp</label>
      </node>
      <node id="96854">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="96972">
        <label>pxr/base/tf/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96858" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96935" relation="include">
        </childnode>
        <childnode refid="96973" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
        <childnode refid="96976" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96886">
        <label>pxr/base/vt/traits.h</label>
        <link refid="vt_2traits_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96898">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="96857">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96858" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96869" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96871" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
        <childnode refid="96874" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96867" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96866">
        <label>math.h</label>
      </node>
      <node id="96930">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96931" relation="include">
        </childnode>
        <childnode refid="96869" relation="include">
        </childnode>
        <childnode refid="96932" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
        <childnode refid="96933" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
      </node>
      <node id="96956">
        <label>pxr/base/tf/pyUtils.h</label>
        <link refid="base_2tf_2py_utils_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96951" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96923" relation="include">
        </childnode>
        <childnode refid="96957" relation="include">
        </childnode>
        <childnode refid="96928" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96960" relation="include">
        </childnode>
        <childnode refid="96961" relation="include">
        </childnode>
        <childnode refid="96958" relation="include">
        </childnode>
        <childnode refid="96959" relation="include">
        </childnode>
        <childnode refid="96962" relation="include">
        </childnode>
      </node>
      <node id="96884">
        <label>iosfwd</label>
      </node>
      <node id="96917">
        <label>cstdlib</label>
      </node>
      <node id="96899">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96900" relation="include">
        </childnode>
        <childnode refid="96901" relation="include">
        </childnode>
      </node>
      <node id="96934">
        <label>pxr/base/tf/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96935" relation="include">
        </childnode>
        <childnode refid="96937" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
        <childnode refid="96873" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96876" relation="include">
        </childnode>
        <childnode refid="96938" relation="include">
        </childnode>
      </node>
      <node id="96924">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="96887">
        <label>pxr/base/vt/types.h</label>
        <link refid="base_2vt_2types_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96886" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96888" relation="include">
        </childnode>
        <childnode refid="96889" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96895" relation="include">
        </childnode>
        <childnode refid="96907" relation="include">
        </childnode>
        <childnode refid="96908" relation="include">
        </childnode>
        <childnode refid="96909" relation="include">
        </childnode>
        <childnode refid="96869" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96909">
        <label>cstddef</label>
      </node>
      <node id="96888">
        <label>pxr/base/gf/declare.h</label>
        <link refid="base_2gf_2declare_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
      </node>
      <node id="96999">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="96966">
        <label>deque</label>
      </node>
      <node id="96979">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
      </node>
      <node id="96937">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
      </node>
      <node id="96896">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96859" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96899" relation="include">
        </childnode>
        <childnode refid="96901" relation="include">
        </childnode>
      </node>
      <node id="96942">
        <label>boost/preprocessor/enum_params.hpp</label>
      </node>
      <node id="96922">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96923" relation="include">
        </childnode>
        <childnode refid="96925" relation="include">
        </childnode>
        <childnode refid="96926" relation="include">
        </childnode>
        <childnode refid="96927" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96872" relation="include">
        </childnode>
      </node>
      <node id="97001">
        <label>boost/python/def.hpp</label>
      </node>
      <node id="96908">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="96984">
        <label>pxr/base/tf/errorTransport.h</label>
        <link refid="error_transport_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96971" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
      </node>
      <node id="96969">
        <label>pxr/base/tf/pyError.h</label>
        <link refid="py_error_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96970" relation="include">
        </childnode>
        <childnode refid="96985" relation="include">
        </childnode>
      </node>
      <node id="96875">
        <label>type_traits</label>
      </node>
      <node id="96965">
        <label>boost/python/to_python_converter.hpp</label>
      </node>
      <node id="96873">
        <label>set</label>
      </node>
      <node id="96962">
        <label>boost/python/type_id.hpp</label>
      </node>
      <node id="96929">
        <label>pxr/base/tf/anyUniquePtr.h</label>
        <link refid="any_unique_ptr_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96881">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="96853" relation="include">
        </childnode>
      </node>
      <node id="96900">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="96854" relation="include">
        </childnode>
      </node>
      <node id="96918">
        <label>algorithm</label>
      </node>
      <node id="97006">
        <label>boost/python/operators.hpp</label>
      </node>
      <node id="96869">
        <label>cstring</label>
      </node>
      <node id="96894">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96978">
        <label>pxr/base/tf/diagnosticBase.h</label>
        <link refid="diagnostic_base_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96899" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96949" relation="include">
        </childnode>
        <childnode refid="96930" relation="include">
        </childnode>
        <childnode refid="96951" relation="include">
        </childnode>
        <childnode refid="96861" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96911" relation="include">
        </childnode>
        <childnode refid="96914" relation="include">
        </childnode>
        <childnode refid="96931" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96944">
        <label>boost/preprocessor/repeat.hpp</label>
      </node>
      <node id="96980">
        <label>pxr/base/tf/status.h</label>
        <link refid="status_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96978" relation="include">
        </childnode>
      </node>
      <node id="96987">
        <label>boost/python/converter/from_python.hpp</label>
      </node>
      <node id="96952">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96953" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96906" relation="include">
        </childnode>
      </node>
      <node id="97002">
        <label>boost/python/detail/api_placeholder.hpp</label>
      </node>
      <node id="96872">
        <label>memory</label>
      </node>
      <node id="96935">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96897" relation="include">
        </childnode>
        <childnode refid="96882" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
      </node>
      <node id="96910">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96911" relation="include">
        </childnode>
        <childnode refid="96896" relation="include">
        </childnode>
        <childnode refid="96868" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96912" relation="include">
        </childnode>
        <childnode refid="96901" relation="include">
        </childnode>
        <childnode refid="96915" relation="include">
        </childnode>
        <childnode refid="96870" relation="include">
        </childnode>
      </node>
      <node id="96989">
        <label>boost/python/converter/rvalue_from_python_data.hpp</label>
      </node>
      <node id="96902">
        <label>pxr/base/tf/hashset.h</label>
        <link refid="hashset_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96903" relation="include">
        </childnode>
      </node>
      <node id="96874">
        <label>typeindex</label>
      </node>
      <node id="96921">
        <label>pxr/base/vt/value.h</label>
        <link refid="vt_2value_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96922" relation="include">
        </childnode>
        <childnode refid="96928" relation="include">
        </childnode>
        <childnode refid="96880" relation="include">
        </childnode>
        <childnode refid="96898" relation="include">
        </childnode>
        <childnode refid="96905" relation="include">
        </childnode>
        <childnode refid="96929" relation="include">
        </childnode>
        <childnode refid="96904" relation="include">
        </childnode>
        <childnode refid="96883" relation="include">
        </childnode>
        <childnode refid="96930" relation="include">
        </childnode>
        <childnode refid="96858" relation="include">
        </childnode>
        <childnode refid="96934" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96856" relation="include">
        </childnode>
        <childnode refid="96878" relation="include">
        </childnode>
        <childnode refid="96886" relation="include">
        </childnode>
        <childnode refid="96887" relation="include">
        </childnode>
        <childnode refid="96939" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
      <node id="96996">
        <label>boost/python/class.hpp</label>
      </node>
      <node id="96907">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="96878">
        <label>pxr/base/vt/streamOut.h</label>
        <link refid="stream_out_8h_source"/>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96879" relation="include">
        </childnode>
        <childnode refid="96885" relation="include">
        </childnode>
        <childnode refid="96884" relation="include">
        </childnode>
        <childnode refid="96877" relation="include">
        </childnode>
        <childnode refid="96875" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="wrap_array_8h_1ad8c88fdfaaf323b285684f9b2442254b" prot="public" static="no">
        <name>WRITE</name>
        <param><defname>z</defname></param>
        <param><defname>n</defname></param>
        <param><defname>data</defname></param>
        <initializer>BOOST_PP_COMMA_IF(n) data</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="526" column="9"/>
      </memberdef>
      <memberdef kind="define" id="wrap_array_8h_1ad794203b8ac6c98aa905d3251fd31be8" prot="public" static="no">
        <name>VtCat_DEF</name>
        <param><defname>z</defname></param>
        <param><defname>n</defname></param>
        <param><defname>unused</defname></param>
        <initializer>def(&quot;Cat&quot;,(VtArray&lt;Type&gt; (*)( BOOST_PP_REPEAT(n, WRITE, <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt;Type&gt; const &amp;) ))<ref refid="functions_8h_1a44ae40117a8a4ce40d89463bfa24d871" kindref="member">VtCat</ref>&lt;Type&gt;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="527" column="9"/>
      </memberdef>
      <memberdef kind="define" id="wrap_array_8h_1a4fe8a7818bb0caffd1b1fc1490ce8c79" prot="public" static="no">
        <name>VT_WRAP_ARRAY</name>
        <param><defname>r</defname></param>
        <param><defname>unused</defname></param>
        <param><defname>elem</defname></param>
        <initializer>VtWrapArray&lt; <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; VT_TYPE(elem) &gt; &gt;();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="645" column="9" bodyfile="pxr/base/vt/wrapArray.h" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="wrap_array_8h_1a310aa6cbe420b99dd3f2020b6283c434" prot="public" static="no">
        <name>VT_WRAP_COMPARISON</name>
        <param><defname>r</defname></param>
        <param><defname>unused</defname></param>
        <param><defname>elem</defname></param>
        <initializer>VtWrapComparisonFunctions&lt; <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; VT_TYPE(elem) &gt; &gt;();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="647" column="9" bodyfile="pxr/base/vt/wrapArray.h" bodystart="647" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="wrap_array_8h_1aa00498605d35997827291895c64ba458" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string _VtStr</definition>
        <argsstring>(T const &amp;self)</argsstring>
        <name>_VtStr</name>
        <param>
          <type>T const &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="443" column="1" bodyfile="pxr/base/vt/wrapArray.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="wrap_array_8h_1ac1897a5c50755ea8d1e143114e2f7e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void VtWrapArray</definition>
        <argsstring>()</argsstring>
        <name>VtWrapArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="449" column="1" bodyfile="pxr/base/vt/wrapArray.h" bodystart="449" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="wrap_array_8h_1ae6012cadf54ed2345d58d46628cc9219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void VtWrapComparisonFunctions</definition>
        <argsstring>()</argsstring>
        <name>VtWrapComparisonFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="548" column="1" bodyfile="pxr/base/vt/wrapArray.h" bodystart="548" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="wrap_array_8h_1af88944b39f7b1e5a454dbe83c435e338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Elem</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void VtRegisterValueCastsFromPythonSequencesToArray</definition>
        <argsstring>()</argsstring>
        <name>VtRegisterValueCastsFromPythonSequencesToArray</name>
        <briefdescription>
<para>Register casts with <ref refid="class_vt_value" kindref="compound">VtValue</ref> from python sequences to <ref refid="class_vt_array" kindref="compound">VtArray</ref> types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/wrapArray.h" line="638" column="1" bodyfile="pxr/base/vt/wrapArray.h" bodystart="638" bodyend="643"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_VT_WRAP_ARRAY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_VT_WRAP_ARRAY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">pxr/base/vt/array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2vt_2types_8h" kindref="compound">pxr/base/vt/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/value.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/pyOperators.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functions_8h" kindref="compound">pxr/base/vt/functions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arch_2math_8h" kindref="compound">pxr/base/arch/math.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inttypes_8h" kindref="compound">pxr/base/arch/inttypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pragmas_8h" kindref="compound">pxr/base/arch/pragmas.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="half_8h" kindref="compound">pxr/base/gf/half.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/gf/traits.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="py_container_conversions_8h" kindref="compound">pxr/base/tf/pyContainerConversions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyFunction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyLock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyObjWrapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyResultConversions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2py_utils_8h" kindref="compound">pxr/base/tf/pyUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2iterator_8h" kindref="compound">pxr/base/tf/iterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/meta.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="span_8h" kindref="compound">pxr/base/tf/span.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tf_8h" kindref="compound">pxr/base/tf/tf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/wrapTypeHelpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/punctuation/comma_if.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/repetition/repeat.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/seq/for_each.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/class.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/copy_const_reference.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/def.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/detail/api_placeholder.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/extract.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/implicit.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/make_constructor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/operators.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/return_arg.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/slice.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/type_id.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/overloads.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Vt_WrapArray<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::python;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unique_ptr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">getitem_ellipsis(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>idx)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>ellipsis<sp/>=<sp/>object(handle&lt;&gt;(borrowed(Py_Ellipsis)));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>!=<sp/>ellipsis)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>index<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">getitem_index(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>idx)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>throwError<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>idx<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1ad38b8ff722651dcb4f12a9f8557a9964" kindref="member">TfPyNormalizeIndex</ref>(idx,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(),<sp/>throwError);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(</highlight><highlight class="keyword">self</highlight><highlight class="normal">[idx]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">getitem_slice(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>slice<sp/>idx)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice::range&lt;typename<sp/>VtArray&lt;T&gt;::const_iterator&gt;<sp/>range<sp/>=</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.get_indices(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.begin(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.end());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>setSize<sp/>=<sp/>1<sp/>+<sp/>(range.stop<sp/>-<sp/>range.start)<sp/>/<sp/>range.step;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>result(setSize);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>range.start<sp/>!=<sp/>range.stop;<sp/>range.start<sp/>+=<sp/>range.step,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>*range.start;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>*range.start;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object(result);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::invalid_argument<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>object();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">setArraySlice(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>S<sp/>value,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slice::range&lt;T*&gt;&amp;<sp/>range,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>setSize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>len(value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1ad2d8866c8310c48a8d790e60a827a975" kindref="member">TfPyThrowValueError</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>values<sp/>with<sp/>which<sp/>to<sp/>set<sp/>array<sp/>slice.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tile<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>setSize)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>values<sp/>to<sp/>set<sp/>slice.<sp/><sp/>Expected<sp/>%zu,<sp/>got<sp/>%zu.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSize,<sp/>length);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1ad2d8866c8310c48a8d790e60a827a975" kindref="member">TfPyThrowValueError</ref>(msg);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>values<sp/>before<sp/>setting<sp/>any.<sp/><sp/>If<sp/>we<sp/>can<sp/>extract<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whole<sp/>vector<sp/>at<sp/>once<sp/>then<sp/>do<sp/>that<sp/>since<sp/>it<sp/>should<sp/>be<sp/>faster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>extracted;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>extract&lt;std::vector&lt;T&gt;<sp/>&gt;<sp/>vectorExtraction(value);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vectorExtraction.check())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>tmp<sp/>=<sp/>vectorExtraction();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extracted.swap(tmp);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extracted.reserve(length);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extracted.push_back(extract&lt;T&gt;(value[i]));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>fine,<sp/>go<sp/>through<sp/>and<sp/>set<sp/>them.<sp/><sp/>Handle<sp/>common<sp/>case<sp/>as<sp/>a<sp/>fast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range.step<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>length<sp/>&gt;=<sp/>setSize)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(extracted.begin(),<sp/>extracted.begin()<sp/>+<sp/>setSize,<sp/>range.start);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>setSize;<sp/>range.start<sp/>+=<sp/>range.step,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*range.start<sp/>=<sp/>extracted[i<sp/>%<sp/>length];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">setArraySlice(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>slice<sp/>idx,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>slice::range&lt;T*&gt;<sp/>range;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.data();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range<sp/>=<sp/>idx.get_indices(data,<sp/>data<sp/>+<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::invalid_argument<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>items<sp/>to<sp/>be<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>setSize<sp/>=<sp/>1<sp/>+<sp/>(range.stop<sp/>-<sp/>range.start)<sp/>/<sp/>range.step;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>from<sp/>VtArray.<sp/><sp/>We<sp/>only<sp/>want<sp/>to<sp/>take<sp/>this<sp/>path<sp/>if<sp/>the<sp/>passed<sp/>value<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*exactly*<sp/>a<sp/>VtArray.<sp/><sp/>That<sp/>is,<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>take<sp/>this<sp/>path<sp/>if<sp/>it<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merely<sp/>*convert*<sp/>to<sp/>a<sp/>VtArray,<sp/>so<sp/>we<sp/>check<sp/>that<sp/>we<sp/>can<sp/>extract<sp/>a<sp/>mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lvalue<sp/>reference<sp/>from<sp/>the<sp/>python<sp/>object,<sp/>which<sp/>requires<sp/>that<sp/>there<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>real<sp/>VtArray<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(extract&lt;<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;&gt;(value).check())<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>val<sp/>=<sp/>extract&lt;<sp/>VtArray&lt;T&gt;<sp/>&gt;(value);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>val.<ref refid="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1ad2d8866c8310c48a8d790e60a827a975" kindref="member">TfPyThrowValueError</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>values<sp/>with<sp/>which<sp/>to<sp/>set<sp/>array<sp/>slice.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tile<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>setSize)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>values<sp/>to<sp/>set<sp/>slice.<sp/><sp/>Expected<sp/>%zu,<sp/>got<sp/>%zu.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSize,<sp/>length);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1ad2d8866c8310c48a8d790e60a827a975" kindref="member">TfPyThrowValueError</ref>(msg);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>fine,<sp/>go<sp/>through<sp/>and<sp/>set<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>setSize;<sp/>range.start<sp/>+=<sp/>range.step,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*range.start<sp/>=<sp/>val[i<sp/>%<sp/>length];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>from<sp/>scalar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extract&lt;T&gt;(value).check())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tile)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>--<sp/>We&apos;re<sp/>allowing<sp/>implicit<sp/>tiling;<sp/><sp/>do<sp/>we<sp/>want<sp/>to?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TfPyThrowValueError(&quot;can<sp/>only<sp/>assign<sp/>an<sp/>iterable.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>scalar<sp/>to<sp/>fill<sp/>entire<sp/>slice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val<sp/>=<sp/>extract&lt;T&gt;(value);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>setSize;<sp/>range.start<sp/>+=<sp/>range.step,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*range.start<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>from<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extract&lt;list&gt;(value).check())<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>extract&lt;list&gt;(value)(),<sp/>range,<sp/>setSize,<sp/>tile);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>from<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extract&lt;tuple&gt;(value).check())<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>extract&lt;tuple&gt;(value)(),<sp/>range,<sp/>setSize,<sp/>tile);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>from<sp/>iterable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>list(value),<sp/>range,<sp/>setSize,<sp/>tile);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">setitem_ellipsis(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>ellipsis<sp/>=<sp/>object(handle&lt;&gt;(borrowed(Py_Ellipsis)));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>!=<sp/>ellipsis)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;unsupported<sp/>index<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_error_already_set();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>slice(0,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size()),<sp/>value);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">setitem_index(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>idx,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>idx<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1ad38b8ff722651dcb4f12a9f8557a9964" kindref="member">TfPyNormalizeIndex</ref>(idx,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(),<sp/></highlight><highlight class="comment">/*throwError=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>slice(idx,<sp/>idx+1),<sp/>value,<sp/></highlight><highlight class="comment">/*tile=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">setitem_slice(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>slice<sp/>idx,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>setArraySlice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>idx,<sp/>value);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">VT_API<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>GetVtArrayName();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Vt_IsAnySameImpl(TfMetaList&lt;Ts...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;T,<sp/>Ts&gt;<sp/>||<sp/>...);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TypeList&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Vt_IsAnySame()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vt_IsAnySameImpl&lt;T&gt;(TypeList{});</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>same<sp/>types<sp/>as<sp/>in<sp/>VT_INTEGRAL_BUILTIN_VALUE_TYPES<sp/>with<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>bool<sp/>types<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Vt_OptimizedStreamIntegralTypes<sp/>=</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>TfMetaList&lt;short,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicitly<sp/>convert<sp/>half<sp/>to<sp/>float<sp/>here<sp/>instead<sp/>of<sp/>relying<sp/>on<sp/>implicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conversion<sp/>to<sp/>float<sp/>to<sp/>work<sp/>around<sp/>the<sp/>fact<sp/>that<sp/>libc++<sp/>only<sp/>provides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementations<sp/>of<sp/>std::isfinite<sp/>for<sp/>types<sp/>where<sp/>std::is_arithmetic<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsFinite(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isfinite(value);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsFinite(<ref refid="half_8h_1a45f2f25266e2a34e02c26a2e61f67bd5" kindref="member">GfHalf</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isfinite(static_cast&lt;float&gt;(value));</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamValue(std::ostringstream<sp/>&amp;stream,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>overhead<sp/>we<sp/>stream<sp/>out<sp/>certain<sp/>builtin<sp/>types<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>calling<sp/>TfPyRepr().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(Vt_IsAnySame&lt;T,<sp/>Vt_OptimizedStreamIntegralTypes&gt;())<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>float<sp/>types<sp/>we<sp/>need<sp/>to<sp/>be<sp/>make<sp/>sure<sp/>to<sp/>represent<sp/>infs<sp/>and<sp/>nans<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr(<ref refid="struct_gf_is_floating_point" kindref="compound">GfIsFloatingPoint&lt;T&gt;::value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_IsFinite(value))<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="base_2tf_2py_utils_8h_1adf73f4221c9b96206ee651ccb9901360" kindref="member">TfPyRepr</ref>(value);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="base_2tf_2py_utils_8h_1adf73f4221c9b96206ee651ccb9901360" kindref="member">TfPyRepr</ref>(value);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">Vt_ComputeEffectiveRankAndLastDimSize(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>Vt_ShapeData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*sd,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*lastDimSize)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>sd-&gt;GetRank();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>divisor<sp/>=<sp/>std::accumulate(</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sd-&gt;otherDims,<sp/>sd-&gt;otherDims<sp/>+<sp/>rank-1,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y)<sp/>{<sp/>return<sp/>x<sp/>*<sp/>y;<sp/>});</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/>divisor<sp/>?<sp/>sd-&gt;totalSize<sp/>%<sp/>divisor<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>*lastDimSize<sp/>=<sp/>divisor<sp/>?<sp/>sd-&gt;totalSize<sp/>/<sp/>divisor<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>__repr__(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.empty())</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="base_2tf_2py_utils_8h_1a920cdc08de8702b4ab7941ac029e732d" kindref="member">TF_PY_REPR_PREFIX</ref><sp/>+</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s()&quot;</highlight><highlight class="normal">,<sp/>GetVtArrayName&lt;<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&gt;().c_str());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>stream;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>stream.precision(17);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>(i<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamValue(stream,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">[i]);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size()<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>repr<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1a920cdc08de8702b4ab7941ac029e732d" kindref="member">TF_PY_REPR_PREFIX</ref><sp/>+</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s(%zd,<sp/>%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetVtArrayName&lt;<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>&gt;().c_str(),</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(),<sp/>stream.str().c_str());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>This<sp/>is<sp/>to<sp/>deal<sp/>with<sp/>legacy<sp/>shaped<sp/>arrays<sp/>and<sp/>should<sp/>be<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>all<sp/>shaped<sp/>arrays<sp/>have<sp/>been<sp/>eliminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>nice<sp/>way<sp/>to<sp/>make<sp/>an<sp/>eval()able<sp/>__repr__<sp/>for<sp/>shaped<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>preserves<sp/>the<sp/>shape<sp/>information,<sp/>so<sp/>put<sp/>it<sp/>in<sp/>&lt;&gt;<sp/>to<sp/>make<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clearly<sp/>not<sp/>eval()able.<sp/>That<sp/>has<sp/>the<sp/>advantage<sp/>that,<sp/>if<sp/>somebody<sp/>passes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>repr<sp/>into<sp/>eval(),<sp/>it&apos;ll<sp/>raise<sp/>a<sp/>SyntaxError<sp/>that<sp/>clearly<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>__repr__.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>Vt_ShapeData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*shapeData<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._GetShapeData();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lastDimSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vt_ComputeEffectiveRankAndLastDimSize(shapeData,<sp/>&amp;lastDimSize);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>shapeStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>rank-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStr<sp/>+=<sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%d&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>shapeData-&gt;otherDims[i]);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStr<sp/>+=<sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>%zu)&quot;</highlight><highlight class="normal">,<sp/>lastDimSize);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight><highlight class="stringliteral">&quot;&lt;%s<sp/>with<sp/>shape<sp/>%s&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repr.c_str(),<sp/>shapeStr.c_str());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repr;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>*VtArray__init__(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;values)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_ptr&lt;VtArray&lt;T&gt;<sp/>&gt;<sp/>ret(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref>(len(values)));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>values.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>saying<sp/>&apos;ret[...]<sp/>=<sp/>values&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>python,<sp/>except<sp/>that<sp/>we<sp/>allow<sp/>tiling<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>setArraySlice(*ret,<sp/>slice(0,<sp/>ret-&gt;size()),<sp/>values,<sp/>tile);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.release();</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>*VtArray__init__2(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;values)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_ptr&lt;VtArray&lt;T&gt;<sp/>&gt;<sp/>ret(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref>(size));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>values.<sp/><sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>saying<sp/>&apos;ret[...]<sp/>=<sp/>values&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>python,<sp/>except<sp/>that<sp/>we<sp/>allow<sp/>tiling<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tile<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>setArraySlice(*ret,<sp/>slice(0,<sp/>ret-&gt;size()),<sp/>values,<sp/>tile);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.release();</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overloading<sp/>for<sp/>operator<sp/>special<sp/>methods,<sp/>to<sp/>allow<sp/>tuple<sp/>/<sp/>list<sp/>&amp;<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">ARCH_PRAGMA_PUSH</highlight></codeline>
<codeline lineno="424"><highlight class="normal">ARCH_PRAGMA_UNSAFE_USE_OF_BOOL</highlight></codeline>
<codeline lineno="425"><highlight class="normal">ARCH_PRAGMA_UNARY_MINUS_ON_UNSIGNED</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">VTOPERATOR_WRAP(__add__,__radd__)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">VTOPERATOR_WRAP_NONCOMM(__sub__,__rsub__)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">VTOPERATOR_WRAP(__mul__,__rmul__)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">VTOPERATOR_WRAP_NONCOMM(__div__,__rdiv__)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">VTOPERATOR_WRAP_NONCOMM(__mod__,__rmod__)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">VTOPERATOR_WRAP_BOOL(Equal,==)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">VTOPERATOR_WRAP_BOOL(NotEqual,!=)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">VTOPERATOR_WRAP_BOOL(Greater,&gt;)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">VTOPERATOR_WRAP_BOOL(Less,&lt;)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">VTOPERATOR_WRAP_BOOL(GreaterOrEqual,&gt;=)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">VTOPERATOR_WRAP_BOOL(LessOrEqual,&lt;=)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">ARCH_PRAGMA_POP</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">static<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>_VtStr(T<sp/>const<sp/>&amp;self)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___string_1ga7554a67d6bbf6eae3f12131757f13d36" kindref="member">TfStringify</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VtWrapArray()</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Vt_WrapArray;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>This;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>This::ElementType<sp/>Type;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>GetVtArrayName&lt;This&gt;();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>typeStr<sp/>=<sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>docStr<sp/>=<sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(</highlight><highlight class="stringliteral">&quot;An<sp/>array<sp/>of<sp/>type<sp/>%s.&quot;</highlight><highlight class="normal">,<sp/>typeStr.c_str());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selfCls<sp/>=<sp/>class_&lt;This&gt;(name.c_str(),<sp/>docStr.c_str(),<sp/>no_init)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setattr(</highlight><highlight class="stringliteral">&quot;_isVtArray&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(<ref refid="struct_tf_type_python_class" kindref="compound">TfTypePythonClass</ref>())</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(init&lt;&gt;())</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>make_constructor(VtArray__init__&lt;Type&gt;),</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__init__(values)\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;values:<sp/>a<sp/>sequence<sp/>(tuple,<sp/>list,<sp/>or<sp/>another<sp/>VtArray<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>type<sp/>convertible<sp/>to<sp/>the<sp/>new<sp/>array&apos;s<sp/>element<sp/>type)\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>make_constructor(VtArray__init__2&lt;Type&gt;))</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(init&lt;unsigned<sp/>int&gt;())</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>getitem_ellipsis&lt;Type&gt;)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>getitem_slice&lt;Type&gt;)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__getitem__&quot;</highlight><highlight class="normal">,<sp/>getitem_index&lt;Type&gt;)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>setitem_ellipsis&lt;Type&gt;)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>setitem_slice&lt;Type&gt;)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__setitem__&quot;</highlight><highlight class="normal">,<sp/>setitem_index&lt;Type&gt;)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__len__&quot;</highlight><highlight class="normal">,<sp/>&amp;This::size)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__iter__&quot;</highlight><highlight class="normal">,<sp/>iterator&lt;This&gt;())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>__repr__&lt;Type&gt;)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(str(self))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__str__&quot;</highlight><highlight class="normal">,<sp/>_VtStr&lt;T&gt;)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NUMERIC_OPERATORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADDITION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBTRACTION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MULTIPLICATION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIVISION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNARY_NEG_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ADDITION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE(+,__add__,__radd__)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SUBTRACTION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE(-,__sub__,__rsub__)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MULTIPLICATION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE(*,__mul__,__rmul__)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DIVISION_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE(/,__div__,__rdiv__)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MOD_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE(%,__mod__,__rmod__)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOUBLE_MULT_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">())</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">()<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOUBLE_DIV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">())</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UNARY_NEG_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(-<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WRITE(z,<sp/>n,<sp/>data)<sp/>BOOST_PP_COMMA_IF(n)<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VtCat_DEF(z,<sp/>n,<sp/>unused)<sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>def(&quot;Cat&quot;,(VtArray&lt;Type&gt;<sp/>(*)(<sp/>BOOST_PP_REPEAT(n,<sp/>WRITE,<sp/>VtArray&lt;Type&gt;<sp/>const<sp/>&amp;)<sp/>))VtCat&lt;Type&gt;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_PP_REPEAT_FROM_TO(1,<sp/>VT_FUNCTIONS_MAX_ARGS,<sp/>VtCat_DEF,<sp/>~)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VtCat_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(Equal)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(NotEqual)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrap<sp/>conversions<sp/>from<sp/>python<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>TfPyContainerConversions::from_python_sequence&lt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfPyContainerConversions::</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable_capacity_all_items_convertible_policy&gt;();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrap<sp/>implicit<sp/>conversions<sp/>from<sp/>VtArray<sp/>to<sp/>TfSpan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>implicitly_convertible&lt;This,<sp/>TfSpan&lt;Type&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>implicitly_convertible&lt;This,<sp/>TfSpan&lt;const<sp/>Type&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapping<sp/>for<sp/>functions<sp/>that<sp/>work<sp/>for<sp/>base<sp/>types<sp/>that<sp/>support<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VtWrapComparisonFunctions()</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Vt_WrapArray;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>This;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>This::ElementType<sp/>Type;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;AnyTrue&quot;</highlight><highlight class="normal">,<sp/>VtAnyTrue&lt;Type&gt;);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>def(</highlight><highlight class="stringliteral">&quot;AllTrue&quot;</highlight><highlight class="normal">,<sp/>VtAllTrue&lt;Type&gt;);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(Greater)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(Less)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(GreaterOrEqual)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>VTOPERATOR_WRAPDECLARE_BOOL(LessOrEqual)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array&gt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><ref refid="class_vt_value" kindref="compound">VtValue</ref></highlight></codeline>
<codeline lineno="566"><highlight class="normal">Vt_ConvertFromPySequenceOrIter(<ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array::ElementType<sp/>ElemType;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_lock" kindref="compound">TfPyLock</ref><sp/>lock;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PySequence_Check(obj.<ref refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>len<sp/>=<sp/>PySequence_Length(obj.<ref refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" kindref="member">ptr</ref>());</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>result(len);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElemType<sp/>*elem<sp/>=<sp/>result.data();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Py_ssize_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::handle&lt;&gt;<sp/>h(PySequence_ITEM(obj.<ref refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" kindref="member">ptr</ref>(),<sp/>i));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::extract&lt;ElemType&gt;<sp/>e(h.get());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e.check())</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*elem++<sp/>=<sp/>e();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>(result);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyIter_Check(obj.<ref refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>result;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PyObject<sp/>*item<sp/>=<sp/>PyIter_Next(obj.<ref refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" kindref="member">ptr</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::handle&lt;&gt;<sp/>h(item);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::extract&lt;ElemType&gt;<sp/>e(h.get());</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!e.check())</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(e());</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>(result);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>();</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="class_vt_value" kindref="compound">VtValue</ref></highlight></codeline>
<codeline lineno="608"><highlight class="normal">Vt_ConvertFromRange(Iter<sp/>begin,<sp/>Iter<sp/>end)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array::ElementType<sp/>ElemType;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Array<sp/>result(distance(begin,<sp/>end));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ElemType<sp/>*e<sp/>=<sp/>result.data();<sp/>begin<sp/>!=<sp/>end;<sp/>++begin)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>cast<sp/>=<sp/>VtValue::Cast&lt;ElemType&gt;(*begin);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast.<ref refid="class_vt_value_1a8e12342fc420701fbffd97025421575a" kindref="member">IsEmpty</ref>())</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast.<ref refid="class_vt_value_1a3a2aff7111d57fb39b943a66f7e26880" kindref="member">Swap</ref>(*e++);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref>(result);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="class_vt_value" kindref="compound">VtValue</ref></highlight></codeline>
<codeline lineno="623"><highlight class="normal">Vt_CastToArray(<ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>ret;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/>obj;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>convert<sp/>from<sp/>either<sp/>python<sp/>sequence<sp/>or<sp/>vector&lt;VtValue&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="class_vt_value_1ae5d3187e0408744ac959d6146de2f2bf" kindref="member">IsHolding</ref>&lt;<ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref>&gt;())<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Vt_ConvertFromPySequenceOrIter&lt;T&gt;(v.<ref refid="class_vt_value_1a60c1f31cc358d0d74f2dcbe9b686bc80" kindref="member">UncheckedGet</ref>&lt;<ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref>&gt;());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.<ref refid="class_vt_value_1ae5d3187e0408744ac959d6146de2f2bf" kindref="member">IsHolding</ref>&lt;std::vector&lt;VtValue&gt;<sp/>&gt;())<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VtValue&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;vec<sp/>=<sp/>v.<ref refid="class_vt_value_1a60c1f31cc358d0d74f2dcbe9b686bc80" kindref="member">UncheckedGet</ref>&lt;std::vector&lt;VtValue&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Vt_ConvertFromRange&lt;T&gt;(vec.begin(),<sp/>vec.end());</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Elem&gt;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VtRegisterValueCastsFromPythonSequencesToArray()</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;Elem&gt;</ref><sp/>Array;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>VtValue::RegisterCast&lt;TfPyObjWrapper,<sp/>Array&gt;(Vt_CastToArray&lt;Array&gt;);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>VtValue::RegisterCast&lt;std::vector&lt;VtValue&gt;,<sp/>Array&gt;(Vt_CastToArray&lt;Array&gt;);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VT_WRAP_ARRAY(r,<sp/>unused,<sp/>elem)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VtWrapArray&lt;<sp/>VtArray&lt;<sp/>VT_TYPE(elem)<sp/>&gt;<sp/>&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VT_WRAP_COMPARISON(r,<sp/>unused,<sp/>elem)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VtWrapComparisonFunctions&lt;<sp/>VtArray&lt;<sp/>VT_TYPE(elem)<sp/>&gt;<sp/>&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_VT_WRAP_ARRAY_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/vt/wrapArray.h"/>
  </compounddef>
</doxygen>
