<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_predicate_program" kind="class" language="C++" prot="public">
    <compoundname>SdfPredicateProgram</compoundname>
    <includes refid="predicate_program_8h" local="no">predicateProgram.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>DomainType</declname>
        <defname>DomainType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0f" prot="private" static="no" strong="no">
        <type></type>
        <name>_Op</name>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa59b9abc46faffa225d20abc5e5252417" prot="private">
          <name>Call</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0faa60891460e284e663f5060208f72870b" prot="private">
          <name>Not</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fac8e6944e998ac466c3cc4a648dde8291" prot="private">
          <name>Open</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fab0d2fc8a61cc30fce240ad6df88447d4" prot="private">
          <name>Close</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa60b042c2c7da21af2ed42f8cc27e7ff8" prot="private">
          <name>And</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa5d66935f41f1e80990e8bf3349074fe1" prot="private">
          <name>Or</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="154" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="154" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_predicate_program_1a31b4c5c44e28aca7066788e97791f6a1" prot="public" static="no">
        <type>typename <ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref>&lt; DomainType &gt;::PredicateFunction</type>
        <definition>using PredicateFunction =  typename SdfPredicateLibrary&lt;DomainType&gt;::PredicateFunction</definition>
        <argsstring></argsstring>
        <name>PredicateFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="71" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_predicate_program_1a1f04801b1289d9f3b9fa7d25a2836bdb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _Op &gt;</type>
        <definition>std::vector&lt;_Op&gt; _ops</definition>
        <argsstring></argsstring>
        <name>_ops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="155" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_predicate_program_1a99360161297527c0b47c5d9774d20ddc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; PredicateFunction &gt;</type>
        <definition>std::vector&lt;PredicateFunction&gt; _funcs</definition>
        <argsstring></argsstring>
        <name>_funcs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="156" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_predicate_program_1a2fde8ac106af0f42f6d1bed801eb99d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref></type>
        <definition>SdfPredicateProgram SdfLinkPredicateExpression</definition>
        <argsstring>(SdfPredicateExpression const &amp;expr, SdfPredicateLibrary&lt; DomainType &gt; const &amp;lib)</argsstring>
        <name>SdfLinkPredicateExpression</name>
        <param>
          <type><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref>&lt; DomainType &gt; const &amp;</type>
          <declname>lib</declname>
        </param>
        <briefdescription>
<para>Link <computeroutput>expr</computeroutput> with <computeroutput>lib</computeroutput> and return a callable program that evaluates <computeroutput>expr</computeroutput> on given objects of the <computeroutput>DomainType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If linking <computeroutput>expr</computeroutput> and <computeroutput>lib</computeroutput> fails, issue a TF_RUNTIME_ERROR with a message, and return an empty program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="74" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="165" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_predicate_program_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Return true if this program has any ops, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="80" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_program_1a72fdda823a771b970d139cb6df117b68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref></type>
        <definition>SdfPredicateFunctionResult operator()</definition>
        <argsstring>(DomainType const &amp;obj) const</argsstring>
        <name>operator()</name>
        <param>
          <type>DomainType const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Run the predicate program on <computeroutput>obj</computeroutput>, and return the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateProgram.h" line="86" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="86" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a callable &quot;program&quot;, the result of linking an <ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref> with an <ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> via <ref refid="class_sdf_predicate_program_1a2fde8ac106af0f42f6d1bed801eb99d5" kindref="member">SdfLinkPredicateExpression()</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>The main public interface this class exposes is the function-call operator(), accepting a single argument of type <computeroutput>DomainType</computeroutput>, as it is specified to the template. Consider using <computeroutput>const Type &amp;</computeroutput> as the <computeroutput>DomainType</computeroutput> for both <ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref> and <ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> if it&apos;s important that domain type instances aren&apos;t passed by-value. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/predicateLibrary.h" line="210" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="210" bodyend="-1"/>
    <listofallmembers>
      <member refid="class_sdf_predicate_program_1a99360161297527c0b47c5d9774d20ddc" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>_funcs</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0f" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>_Op</name></member>
      <member refid="class_sdf_predicate_program_1a1f04801b1289d9f3b9fa7d25a2836bdb" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>_ops</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa60b042c2c7da21af2ed42f8cc27e7ff8" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>And</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa59b9abc46faffa225d20abc5e5252417" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>Call</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fab0d2fc8a61cc30fce240ad6df88447d4" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>Close</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0faa60891460e284e663f5060208f72870b" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>Not</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fac8e6944e998ac466c3cc4a648dde8291" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>Open</name></member>
      <member refid="class_sdf_predicate_program_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>operator bool</name></member>
      <member refid="class_sdf_predicate_program_1a72fdda823a771b970d139cb6df117b68" prot="public" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>operator()</name></member>
      <member refid="class_sdf_predicate_program_1a013470bfe2d85b24119af2e5ae70ce0fa5d66935f41f1e80990e8bf3349074fe1" prot="private" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>Or</name></member>
      <member refid="class_sdf_predicate_program_1a31b4c5c44e28aca7066788e97791f6a1" prot="public" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>PredicateFunction</name></member>
      <member refid="class_sdf_predicate_program_1a2fde8ac106af0f42f6d1bed801eb99d5" prot="public" virt="non-virtual"><scope>SdfPredicateProgram</scope><name>SdfLinkPredicateExpression</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
