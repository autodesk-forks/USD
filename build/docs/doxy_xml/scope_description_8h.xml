<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="scope_description_8h" kind="file" language="C++">
    <compoundname>scopeDescription.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="call_context_8h" local="yes">pxr/base/tf/callContext.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes local="no">boost/optional.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="77322">
        <label>list</label>
      </node>
      <node id="77295">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="77296" relation="include">
        </childnode>
        <childnode refid="77297" relation="include">
        </childnode>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77289" relation="include">
        </childnode>
        <childnode refid="77298" relation="include">
        </childnode>
      </node>
      <node id="77288">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="77289" relation="include">
        </childnode>
      </node>
      <node id="77297">
        <label>cstdint</label>
      </node>
      <node id="77309">
        <label>cmath</label>
      </node>
      <node id="77306">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77307" relation="include">
        </childnode>
        <childnode refid="77308" relation="include">
        </childnode>
        <childnode refid="77295" relation="include">
        </childnode>
        <childnode refid="77310" relation="include">
        </childnode>
        <childnode refid="77311" relation="include">
        </childnode>
      </node>
      <node id="77321">
        <label>cstdarg</label>
      </node>
      <node id="77302">
        <label>string</label>
      </node>
      <node id="77293">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77288" relation="include">
        </childnode>
      </node>
      <node id="77313">
        <label>map</label>
      </node>
      <node id="77296">
        <label>cinttypes</label>
      </node>
      <node id="77285">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="77300">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77301" relation="include">
        </childnode>
        <childnode refid="77302" relation="include">
        </childnode>
        <childnode refid="77303" relation="include">
        </childnode>
        <childnode refid="77304" relation="include">
        </childnode>
      </node>
      <node id="77291">
        <label>stddef.h</label>
      </node>
      <node id="77307">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77289" relation="include">
        </childnode>
      </node>
      <node id="77318">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="77289" relation="include">
        </childnode>
      </node>
      <node id="77319">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77303" relation="include">
        </childnode>
      </node>
      <node id="77298">
        <label>sys/types.h</label>
      </node>
      <node id="77299">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77289" relation="include">
        </childnode>
        <childnode refid="77300" relation="include">
        </childnode>
        <childnode refid="77305" relation="include">
        </childnode>
        <childnode refid="77318" relation="include">
        </childnode>
        <childnode refid="77319" relation="include">
        </childnode>
        <childnode refid="77287" relation="include">
        </childnode>
        <childnode refid="77320" relation="include">
        </childnode>
        <childnode refid="77302" relation="include">
        </childnode>
        <childnode refid="77303" relation="include">
        </childnode>
        <childnode refid="77316" relation="include">
        </childnode>
        <childnode refid="77317" relation="include">
        </childnode>
      </node>
      <node id="77303">
        <label>typeinfo</label>
      </node>
      <node id="77308">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77289" relation="include">
        </childnode>
        <childnode refid="77295" relation="include">
        </childnode>
        <childnode refid="77309" relation="include">
        </childnode>
      </node>
      <node id="77317">
        <label>vector</label>
      </node>
      <node id="77287">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="77288" relation="include">
        </childnode>
      </node>
      <node id="77311">
        <label>utility</label>
      </node>
      <node id="77323">
        <label>sstream</label>
      </node>
      <node id="77289">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="77294">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="77289" relation="include">
        </childnode>
      </node>
      <node id="77305">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77306" relation="include">
        </childnode>
        <childnode refid="77287" relation="include">
        </childnode>
        <childnode refid="77312" relation="include">
        </childnode>
        <childnode refid="77302" relation="include">
        </childnode>
        <childnode refid="77313" relation="include">
        </childnode>
        <childnode refid="77314" relation="include">
        </childnode>
        <childnode refid="77315" relation="include">
        </childnode>
        <childnode refid="77304" relation="include">
        </childnode>
        <childnode refid="77316" relation="include">
        </childnode>
        <childnode refid="77311" relation="include">
        </childnode>
        <childnode refid="77317" relation="include">
        </childnode>
      </node>
      <node id="77310">
        <label>math.h</label>
      </node>
      <node id="77292">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77293" relation="include">
        </childnode>
        <childnode refid="77294" relation="include">
        </childnode>
        <childnode refid="77295" relation="include">
        </childnode>
        <childnode refid="77287" relation="include">
        </childnode>
        <childnode refid="77299" relation="include">
        </childnode>
        <childnode refid="77321" relation="include">
        </childnode>
        <childnode refid="77312" relation="include">
        </childnode>
        <childnode refid="77322" relation="include">
        </childnode>
        <childnode refid="77315" relation="include">
        </childnode>
        <childnode refid="77323" relation="include">
        </childnode>
        <childnode refid="77302" relation="include">
        </childnode>
        <childnode refid="77316" relation="include">
        </childnode>
        <childnode refid="77317" relation="include">
        </childnode>
      </node>
      <node id="77320">
        <label>iosfwd</label>
      </node>
      <node id="77286">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77287" relation="include">
        </childnode>
        <childnode refid="77290" relation="include">
        </childnode>
        <childnode refid="77291" relation="include">
        </childnode>
      </node>
      <node id="77324">
        <label>boost/optional.hpp</label>
      </node>
      <node id="77316">
        <label>type_traits</label>
      </node>
      <node id="77315">
        <label>set</label>
      </node>
      <node id="77301">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="77288" relation="include">
        </childnode>
      </node>
      <node id="77290">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="77289" relation="include">
        </childnode>
      </node>
      <node id="77312">
        <label>cstring</label>
      </node>
      <node id="77314">
        <label>memory</label>
      </node>
      <node id="77304">
        <label>typeindex</label>
      </node>
      <node id="77284">
        <label>pxr/base/tf/scopeDescription.h</label>
        <link refid="scope_description_8h"/>
        <childnode refid="77285" relation="include">
        </childnode>
        <childnode refid="77286" relation="include">
        </childnode>
        <childnode refid="77292" relation="include">
        </childnode>
        <childnode refid="77287" relation="include">
        </childnode>
        <childnode refid="77324" relation="include">
        </childnode>
        <childnode refid="77317" relation="include">
        </childnode>
        <childnode refid="77302" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_tf_scope_description" prot="public">TfScopeDescription</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="scope_description_8h_1aa5bcf8512aeaafaf33c339dd8b91a18e" prot="public" static="no">
        <name>TF_DESCRIBE_SCOPE</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref> __scope_description__                                   \
    (Tf_DescribeScopeFormat(__VA_ARGS__), TF_CALL_CONTEXT);                    \</initializer>
        <briefdescription>
<para>Macro that accepts either a single string, or printf-style arguments and creates a scope description local variable with the resulting string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scopeDescription.h" line="134" column="9" bodyfile="pxr/base/tf/scopeDescription.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="scope_description_8h_1a8ce4ca96f5c00f0ea29aa38f7f3d5d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::vector&lt; std::string &gt;</type>
        <definition>TF_API std::vector&lt;std::string&gt; TfGetCurrentScopeDescriptionStack</definition>
        <argsstring>()</argsstring>
        <name>TfGetCurrentScopeDescriptionStack</name>
        <briefdescription>
<para>Return a copy of the current description stack for the &quot;main&quot; thread as identified by <ref refid="arch_2threads_8h_1ae11852207d68f5cb586f87181713fe32" kindref="member">ArchGetMainThreadId()</ref> as a vector of strings. </para>
        </briefdescription>
        <detaileddescription>
<para>The most recently pushed description is at back(), and the least recently pushed description is at front(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scopeDescription.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scope_description_8h_1a234d681945b414c0aac40ab696a8558d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::vector&lt; std::string &gt;</type>
        <definition>TF_API std::vector&lt;std::string&gt; TfGetThisThreadScopeDescriptionStack</definition>
        <argsstring>()</argsstring>
        <name>TfGetThisThreadScopeDescriptionStack</name>
        <briefdescription>
<para>Return a copy of the current description stack for the current thread of execution as a vector of strings. </para>
        </briefdescription>
        <detaileddescription>
<para>The most recently pushed description is at back(), and the least recently pushed description is at front(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scopeDescription.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_SCOPE_DESCRIPTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_SCOPE_DESCRIPTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="call_context_8h" kindref="compound">pxr/base/tf/callContext.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/optional.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_tf_scope_description" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref>(<ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>&amp;operator=(<ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;description,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfCallContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;context<sp/>=<sp/>TfCallContext());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref>(std::string<sp/>&amp;&amp;description,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfCallContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;context<sp/>=<sp/>TfCallContext());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*description,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfCallContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;context<sp/>=<sp/>TfCallContext());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/><ref refid="class_tf_scope_description_1ac89aa37bffce5a32ce5e14f6a8f21bf1" kindref="member">~TfScopeDescription</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_scope_description_1aa034fb855070478fd11c0cbc54f257ff" kindref="member">SetDescription</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;description);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_scope_description_1aa034fb855070478fd11c0cbc54f257ff" kindref="member">SetDescription</ref>(std::string<sp/>&amp;&amp;description);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_scope_description_1aa034fb855070478fd11c0cbc54f257ff" kindref="member">SetDescription</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*description);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_GetPreviousScopeDescription(<ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>*d)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d-&gt;_prev;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_GetScopeDescriptionText(<ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>*d)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d-&gt;_description;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TfCallContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_GetScopeDescriptionContext(<ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>*d)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d-&gt;_context;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Push();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Pop()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::optional&lt;std::string&gt;<sp/>_ownedString;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*_description;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>TfCallContext<sp/>_context;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_localStack;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_scope_description" kindref="compound">TfScopeDescription</ref><sp/>*_prev;<sp/></highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>parent<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">TF_API<sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">TfGetCurrentScopeDescriptionStack();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">TF_API<sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">TfGetThisThreadScopeDescriptionStack();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor">#define<sp/>TF_DESCRIBE_SCOPE(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TfScopeDescription<sp/>__scope_description__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(Tf_DescribeScopeFormat(__VA_ARGS__),<sp/>TF_CALL_CONTEXT);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string</highlight></codeline>
<codeline lineno="140"><highlight class="normal">Tf_DescribeScopeFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___string_1gae42be5a0255e4c7ba38d087fd97a97db" kindref="member">TfStringPrintf</ref>(fmt,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>formatting<sp/>arguments,<sp/>the<sp/>string<sp/>can<sp/>be<sp/>forwarded<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scope<sp/>description<sp/>constructor.<sp/>In<sp/>C++17,<sp/>consider<sp/>if<sp/>std::string_view<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reduce<sp/>the<sp/>need<sp/>for<sp/>as<sp/>many<sp/>of<sp/>these<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="148"><highlight class="normal">Tf_DescribeScopeFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt;<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string&amp;&amp;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">Tf_DescribeScopeFormat(std::string&amp;&amp;<sp/>fmt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(fmt);<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">Tf_DescribeScopeFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fmt)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_SCOPE_DESCRIPTION_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/scopeDescription.h"/>
  </compounddef>
</doxygen>
