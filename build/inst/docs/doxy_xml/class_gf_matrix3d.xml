<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_matrix3d" kind="class" language="C++" prot="public">
    <compoundname>GfMatrix3d</compoundname>
    <includes refid="matrix3d_8h" local="no">matrix3d.h</includes>
      <sectiondef kind="user-defined">
      <header>3D Transformation Utilities</header>
      <memberdef kind="function" id="class_gf_matrix3d_1abe68ce11c70f3b8874e3ffca74276c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetRotate</definition>
        <argsstring>(const GfQuatd &amp;rot)</argsstring>
        <name>SetRotate</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ab06f512b5f5373ab15462962a40709b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetRotate</definition>
        <argsstring>(const GfRotation &amp;rot)</argsstring>
        <name>SetRotate</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a2d758300e5196593cc11df63b4fb2ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetScale</definition>
        <argsstring>(const GfVec3d &amp;scaleFactors)</argsstring>
        <name>SetScale</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scaleFactors</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a nonuniform scaling in x, y, and z by the factors in vector <emphasis>scaleFactors</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1af2e19e46fe072ff91db329dfa7b21807" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GF_API GfRotation ExtractRotation</definition>
        <argsstring>() const</argsstring>
        <name>ExtractRotation</name>
        <briefdescription>
<para>Returns the rotation corresponding to this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This works well only if the matrix represents a rotation.</para>
<para>For good results, consider calling <ref refid="class_gf_matrix3d_1ac8cefaffeb9d5c1e76d2c10eae0793c5" kindref="member">Orthonormalize()</ref> before calling this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1adf2387b13d5229971e036d3914d464b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d DecomposeRotation</definition>
        <argsstring>(const GfVec3d &amp;axis0, const GfVec3d &amp;axis1, const GfVec3d &amp;axis2) const</argsstring>
        <name>DecomposeRotation</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>axis2</declname>
        </param>
        <briefdescription>
<para>Decompose the rotation corresponding to this matrix about 3 orthogonal axes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the axes are not orthogonal, warnings will be spewed.</para>
<para>This is a convenience method that is equivalent to calling <ref refid="class_gf_matrix3d_1af2e19e46fe072ff91db329dfa7b21807" kindref="member">ExtractRotation()</ref>.Decompose(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a4a534e5984dd3ac8a52f73157d331fee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref></type>
        <definition>GF_API GfQuaternion ExtractRotationQuaternion</definition>
        <argsstring>() const</argsstring>
        <name>ExtractRotationQuaternion</name>
        <briefdescription>
<para>Returns the quaternion corresponding to this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This works well only if the matrix represents a rotation.</para>
<para>For good results, consider calling <ref refid="class_gf_matrix3d_1ac8cefaffeb9d5c1e76d2c10eae0793c5" kindref="member">Orthonormalize()</ref> before calling this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="482" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_matrix3d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" static="no">
        <type>double</type>
        <definition>typedef double ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="84" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_matrix3d_1aa1e57e1649aa43fa284959654bc9784a" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="86" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_matrix3d_1a0d7184866d68bd99f6685029368bf09e" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numColumns</definition>
        <argsstring></argsstring>
        <name>numColumns</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="87" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_matrix3d_1a0899cba1deef696f73eb40bfe26d258b" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix_data" kindref="compound">GfMatrixData</ref>&lt; double, 3, 3 &gt;</type>
        <definition>GfMatrixData&lt;double, 3, 3&gt; _mtx</definition>
        <argsstring></argsstring>
        <name>_mtx</name>
        <briefdescription>
<para>Matrix storage, in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="494" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_matrix3d_1aa0ef78b64296a3758b07af94452ef643" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GfMatrix3f</definition>
        <argsstring></argsstring>
        <name>GfMatrix3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="497" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1aa5206c2f53219cb478fab18a9a2399b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfMatrix3d const &amp;m)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="264" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="264" bodyend="276"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1ad3004f416b8c993bcedec0db0eea6aab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator *</definition>
        <argsstring>(const GfMatrix3d &amp;m1, double d)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="358" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="358" bodyend="362"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1ac538c5c2247ef6545c26e6e8db796b92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator *</definition>
        <argsstring>(double d, const GfMatrix3d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="366" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a9da6f37b6da1ee8a20fddae4f13f54d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GF_API friend GfMatrix3d operator -</definition>
        <argsstring>(const GfMatrix3d &amp;m)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the unary negation of matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a08303193e5436fc1e27f3920e4a48b6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator+</definition>
        <argsstring>(const GfMatrix3d &amp;m1, const GfMatrix3d &amp;m2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m2</emphasis> to <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="384" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="384" bodyend="389"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1aea97deec7b0d037debb2c767b523fc0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator -</definition>
        <argsstring>(const GfMatrix3d &amp;m1, const GfMatrix3d &amp;m2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m2</emphasis> from <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="392" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="392" bodyend="397"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a48c0b09c1b93b8a45927bbbd16dbd4c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator *</definition>
        <argsstring>(const GfMatrix3d &amp;m1, const GfMatrix3d &amp;m2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Multiplies matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="400" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a788e0ab20bc99333c55df04d6506e2d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GfMatrix3d operator/</definition>
        <argsstring>(const GfMatrix3d &amp;m1, const GfMatrix3d &amp;m2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Divides matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis> (that is, <computeroutput>m1 * inv(m2)</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="408" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1ae2babc2f0a2c016b353aa7246cd485ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d operator *</definition>
        <argsstring>(const GfMatrix3d &amp;m, const GfVec3d &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="414" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="414" bodyend="418"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a8606e3d5821960909ffe9883dc14f730" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d operator *</definition>
        <argsstring>(const GfVec3d &amp;vec, const GfMatrix3d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="421" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1a606ebd4824ec307151ba2a378bdf0d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API friend GfVec3f operator *</definition>
        <argsstring>(const GfMatrix3d &amp;m, const GfVec3f &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the return type is a <computeroutput><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix3d_1ab50c95cbc466409d9cc8292138209ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API friend GfVec3f operator *</definition>
        <argsstring>(const GfVec3f &amp;vec, const GfMatrix3d &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the return type is a <computeroutput><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="435" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_matrix3d_1aebf94bf475b3bc423d14235b6a918763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>()=default</argsstring>
        <name>GfMatrix3d</name>
        <briefdescription>
<para>Default constructor. Leaves the matrix component values undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a825ff8666aa228e3507b3e8055240230" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>double</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m02</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m11</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m12</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m20</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m21</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m22</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from 9 independent <computeroutput>double</computeroutput> values, specified in row-major order. For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="95" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ac2d92e74df4d51d9a26e072ce196f2f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>(const double m[3][3])</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const double</type>
          <declname>m</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from a 3x3 array of <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="105" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1abfa27eee39a755e8bb274ab40ee6975f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>(double s)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="111" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aafa0d56c1d82b82c31aa11e2300bacdc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>(int s)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>This explicit constructor initializes the matrix to <computeroutput>s</computeroutput> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="117" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ab66b832e75bcb9ca0e8df1b465d226f9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix3d</definition>
        <argsstring>(const GfVec3d &amp;v)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to diagonal form, with the <emphasis>i</emphasis> th element on the diagonal set to <computeroutput>v[i]</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="123" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a66734da2954a442376b091e0db2f95a7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix3d</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of double. The vector is expected to be 3x3. If it is too big, only the first 3 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aed1e04d5b136bab69e02bde456f6f97b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix3d</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of float. The vector is expected to be 3x3. If it is too big, only the first 3 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a107c627af3e391c4e3b84c19a595bec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix3d</definition>
        <argsstring>(const GfRotation &amp;rot)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Constructor. Initialize matrix from rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ad8c808ba209dd036f4b030badacbbca9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix3d</definition>
        <argsstring>(const GfQuatd &amp;rot)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Constructor. Initialize matrix from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aa137fe2e94a6be61385540654d14518d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix3d</definition>
        <argsstring>(const class GfMatrix3f &amp;m)</argsstring>
        <name>GfMatrix3d</name>
        <param>
          <type>const class <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This explicit constructor converts a &quot;float&quot; matrix to a &quot;double&quot; matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a845cf0030215a5bc9fb8a1e57fd2be58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRow</definition>
        <argsstring>(int i, const GfVec3d &amp;v)</argsstring>
        <name>SetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a row of the matrix from a Vec3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="158" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aeb6d1e5e87e6a20fcccb06bf84cab2c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetColumn</definition>
        <argsstring>(int i, const GfVec3d &amp;v)</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a column of the matrix from a Vec3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="165" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a50b004b0865744be558fb79a67059d23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetRow</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a row of the matrix as a Vec3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="172" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a771eeda9d018f7fb98c4cd805b9adb0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetColumn</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a column of the matrix as a Vec3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="177" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aebb4f507fca983cabb06b92114c7f7d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GfMatrix3d&amp; Set</definition>
        <argsstring>(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22)</argsstring>
        <name>Set</name>
        <param>
          <type>double</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m02</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m11</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m12</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m20</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m21</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m22</declname>
        </param>
        <briefdescription>
<para>Sets the matrix from 9 independent <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="184" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a17ed0c382733c346e617551664517845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GfMatrix3d&amp; Set</definition>
        <argsstring>(const double m[3][3])</argsstring>
        <name>Set</name>
        <param>
          <type>const double</type>
          <declname>m</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
<para>Sets the matrix from a 3x3 array of <computeroutput>double</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="195" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="195" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a6f51ad146b7114c2eb6a58d7516501cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GfMatrix3d&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the matrix to the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="209" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a2670ea67db62411c8223cf122aa6e3e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GfMatrix3d&amp; SetZero</definition>
        <argsstring>()</argsstring>
        <name>SetZero</name>
        <briefdescription>
<para>Sets the matrix to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="214" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ab6cec2f0c6396d8d02853cc6c982c56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetDiagonal</definition>
        <argsstring>(double s)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a23f2a19f761670c35acc5e9258451a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetDiagonal</definition>
        <argsstring>(const GfVec3d &amp;)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Sets the matrix to have diagonal (<computeroutput>v[0], v[1], v[2]</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a2cd6cd3a9c504937f444bf1343ecf30f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double *</type>
        <definition>GF_API double* Get</definition>
        <argsstring>(double m[3][3]) const</argsstring>
        <name>Get</name>
        <param>
          <type>double</type>
          <declname>m</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
<para>Fills a 3x3 array of <computeroutput>double</computeroutput> values with the values in the matrix, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns raw access to components of matrix as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="233" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a7f7e2f3c293a2b97b148237518286df5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns const raw access to components of matrix as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="239" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a171cbf6466407c4ca85526568ea72007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* GetArray</definition>
        <argsstring>()</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as an array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="244" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1aad5ac705f630a4839b6903f86d341900" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as a const array of <computeroutput>double</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="249" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a61d2488dcd1ebac5455fee5f0fd5a0be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* operator []</definition>
        <argsstring>(int i)</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 3 <computeroutput>double</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="256" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1adb0caf805bb92683254c945958b9fc93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* operator []</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 3 <computeroutput>double</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="261" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a7ba7fc60432f1a09ed71a407d8964e1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix3d &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ae1a94f57f1fb176342126b13bd6f1c68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix3f &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a4fb4b46303575bbb5c8580a9410713bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix3d &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="290" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a58e272071e450c996bbbebe81e91a322" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix3f &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="296" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a060318a700cb4dc6ca1a79b7fa129094" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GF_API GfMatrix3d GetTranspose</definition>
        <argsstring>() const</argsstring>
        <name>GetTranspose</name>
        <briefdescription>
<para>Returns the transpose of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1abea4d36d31a3ba13bee082721fc12c24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GF_API GfMatrix3d GetInverse</definition>
        <argsstring>(double *det=NULL, double eps=0) const</argsstring>
        <name>GetInverse</name>
        <param>
          <type>double *</type>
          <declname>det</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the inverse of the matrix, or FLT_MAX * <ref refid="class_gf_matrix3d_1a6f51ad146b7114c2eb6a58d7516501cc" kindref="member">SetIdentity()</ref> if the matrix is singular. </para>
        </briefdescription>
        <detaileddescription>
<para>(FLT_MAX is the largest value a <computeroutput>float</computeroutput> can have, as defined by the system.) The matrix is considered singular if the determinant is less than or equal to the optional parameter <emphasis>eps</emphasis>. If <emphasis>det</emphasis> is non-null, <computeroutput>*det</computeroutput> is set to the determinant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDeterminant</definition>
        <argsstring>() const</argsstring>
        <name>GetDeterminant</name>
        <briefdescription>
<para>Returns the determinant of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ac8cefaffeb9d5c1e76d2c10eae0793c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Orthonormalize</definition>
        <argsstring>(bool issueWarning=true)</argsstring>
        <name>Orthonormalize</name>
        <param>
          <type>bool</type>
          <declname>issueWarning</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Makes the matrix orthonormal in place. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an iterative method that is much more stable than the previous cross/cross method. If the iterative method does not converge, a warning is issued.</para>
<para>Returns true if the iteration converged, false otherwise. Leaves any translation part of the matrix unchanged. If <emphasis>issueWarning</emphasis> is true, this method will issue a warning if the iteration does not converge, otherwise it will be silent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1afd96d0a66eaf53f68a7fdaf0e518ee8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref></type>
        <definition>GF_API GfMatrix3d GetOrthonormalized</definition>
        <argsstring>(bool issueWarning=true) const</argsstring>
        <name>GetOrthonormalized</name>
        <param>
          <type>bool</type>
          <declname>issueWarning</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns an orthonormalized copy of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a9a131f93964d7e96a47fdf48f466b008" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetHandedness</definition>
        <argsstring>() const</argsstring>
        <name>GetHandedness</name>
        <briefdescription>
<para>Returns the sign of the determinant of the matrix, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>1 for a right-handed matrix, -1 for a left-handed matrix, and 0 for a singular matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ae1edd7a7cae253f883c09c3ee63c989c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRightHanded</definition>
        <argsstring>() const</argsstring>
        <name>IsRightHanded</name>
        <briefdescription>
<para>Returns true if the vectors in the matrix form a right-handed coordinate system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="339" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1ace17e64ba0fded94e8e4c28d7a804514" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLeftHanded</definition>
        <argsstring>() const</argsstring>
        <name>IsLeftHanded</name>
        <briefdescription>
<para>Returns true if the vectors in matrix form a left-handed coordinate system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="345" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1abf9ddd6d6d55744068673745a0735acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; operator *=</definition>
        <argsstring>(const GfMatrix3d &amp;m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Post-multiplies matrix <emphasis>m</emphasis> into this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a456e5822f72e33f4dadd14361bacab6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; operator *=</definition>
        <argsstring>(double)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Multiplies the matrix by a double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a2e8665411738f74a9e8d2ae3ed84a90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; operator+=</definition>
        <argsstring>(const GfMatrix3d &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m</emphasis> to this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a96e016087875eb495cc5f8532bf54d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; operator -=</definition>
        <argsstring>(const GfMatrix3d &amp;m)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m</emphasis> from this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix3d_1a50e6a8d51c31ef7aba7ea0b59a27d0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> &amp;</type>
        <definition>GF_API GfMatrix3d&amp; SetScale</definition>
        <argsstring>(double scaleFactor)</argsstring>
        <name>SetScale</name>
        <param>
          <type>double</type>
          <declname>scaleFactor</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a uniform scaling by <emphasis>scaleFactor</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="439" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_matrix3d_1a06888f2e93df4e131ceb5f212bcf1a66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetRotateFromQuat</definition>
        <argsstring>(double r, const GfVec3d &amp;i)</argsstring>
        <name>_SetRotateFromQuat</name>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Set the matrix to the rotation given by a quaternion, defined by the real component <computeroutput>r</computeroutput> and imaginary components <computeroutput>i</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="489" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores a 3x3 matrix of <computeroutput>double</computeroutput> elements. </para>
    </briefdescription>
    <detaileddescription>
<para>A basic type.</para>
<para>Matrices are defined to be in row-major order, so <computeroutput>matrix[i][j]</computeroutput> indexes the element in the <emphasis>i</emphasis> th row and the <emphasis>j</emphasis> th column.</para>
<para><heading level="3">3D Transformations</heading>
</para>
<para>Three methods, <ref refid="class_gf_matrix3d_1abe68ce11c70f3b8874e3ffca74276c3f" kindref="member">SetRotate()</ref>, <ref refid="class_gf_matrix3d_1a50e6a8d51c31ef7aba7ea0b59a27d0f1" kindref="member">SetScale()</ref>, and <ref refid="class_gf_matrix3d_1af2e19e46fe072ff91db329dfa7b21807" kindref="member">ExtractRotation()</ref>, interpret a <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> as a 3D transformation. By convention, vectors are treated primarily as row vectors, implying the following:</para>
<para><itemizedlist>
<listitem><para>Transformation matrices are organized to deal with row vectors, not column vectors. </para>
</listitem>
<listitem><para>Each of the <ref refid="class_gf_matrix3d_1aebb4f507fca983cabb06b92114c7f7d2" kindref="member">Set()</ref> methods in this class completely rewrites the matrix; for example, <ref refid="class_gf_matrix3d_1abe68ce11c70f3b8874e3ffca74276c3f" kindref="member">SetRotate()</ref> yields a matrix which does nothing but rotate. </para>
</listitem>
<listitem><para>When multiplying two transformation matrices, the matrix on the left applies a more local transformation to a row vector. For example, if R represents a rotation matrix and S represents a scale matrix, the product R*S will rotate a row vector, then scale it. </para>
</listitem>
</itemizedlist>
</para>
    </detaileddescription>
    <location file="pxr/base/gf/matrix3d.h" line="82" column="1" bodyfile="pxr/base/gf/matrix3d.h" bodystart="81" bodyend="498"/>
    <listofallmembers>
      <member refid="class_gf_matrix3d_1a0899cba1deef696f73eb40bfe26d258b" prot="private" virt="non-virtual"><scope>GfMatrix3d</scope><name>_mtx</name></member>
      <member refid="class_gf_matrix3d_1a06888f2e93df4e131ceb5f212bcf1a66" prot="private" virt="non-virtual"><scope>GfMatrix3d</scope><name>_SetRotateFromQuat</name></member>
      <member refid="class_gf_matrix3d_1a3bb9b5a4861b768ea80cb3459104972a" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>data</name></member>
      <member refid="class_gf_matrix3d_1a7f7e2f3c293a2b97b148237518286df5" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>data</name></member>
      <member refid="class_gf_matrix3d_1adf2387b13d5229971e036d3914d464b9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>DecomposeRotation</name></member>
      <member refid="class_gf_matrix3d_1af2e19e46fe072ff91db329dfa7b21807" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>ExtractRotation</name></member>
      <member refid="class_gf_matrix3d_1a4a534e5984dd3ac8a52f73157d331fee" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>ExtractRotationQuaternion</name></member>
      <member refid="class_gf_matrix3d_1a2cd6cd3a9c504937f444bf1343ecf30f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>Get</name></member>
      <member refid="class_gf_matrix3d_1a171cbf6466407c4ca85526568ea72007" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix3d_1aad5ac705f630a4839b6903f86d341900" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix3d_1a771eeda9d018f7fb98c4cd805b9adb0a" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetColumn</name></member>
      <member refid="class_gf_matrix3d_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetDeterminant</name></member>
      <member refid="class_gf_matrix3d_1a9a131f93964d7e96a47fdf48f466b008" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetHandedness</name></member>
      <member refid="class_gf_matrix3d_1abea4d36d31a3ba13bee082721fc12c24" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetInverse</name></member>
      <member refid="class_gf_matrix3d_1afd96d0a66eaf53f68a7fdaf0e518ee8f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetOrthonormalized</name></member>
      <member refid="class_gf_matrix3d_1a50b004b0865744be558fb79a67059d23" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetRow</name></member>
      <member refid="class_gf_matrix3d_1a060318a700cb4dc6ca1a79b7fa129094" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GetTranspose</name></member>
      <member refid="class_gf_matrix3d_1aebf94bf475b3bc423d14235b6a918763" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1a825ff8666aa228e3507b3e8055240230" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1ac2d92e74df4d51d9a26e072ce196f2f9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1abfa27eee39a755e8bb274ab40ee6975f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1aafa0d56c1d82b82c31aa11e2300bacdc" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1ab66b832e75bcb9ca0e8df1b465d226f9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1a66734da2954a442376b091e0db2f95a7" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1aed1e04d5b136bab69e02bde456f6f97b" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1a107c627af3e391c4e3b84c19a595bec8" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1ad8c808ba209dd036f4b030badacbbca9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1aa137fe2e94a6be61385540654d14518d" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3d</name></member>
      <member refid="class_gf_matrix3d_1aa0ef78b64296a3758b07af94452ef643" prot="private" virt="non-virtual"><scope>GfMatrix3d</scope><name>GfMatrix3f</name></member>
      <member refid="class_gf_matrix3d_1aa5206c2f53219cb478fab18a9a2399b1" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>hash_value</name></member>
      <member refid="class_gf_matrix3d_1ace17e64ba0fded94e8e4c28d7a804514" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>IsLeftHanded</name></member>
      <member refid="class_gf_matrix3d_1ae1edd7a7cae253f883c09c3ee63c989c" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>IsRightHanded</name></member>
      <member refid="class_gf_matrix3d_1a0d7184866d68bd99f6685029368bf09e" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>numColumns</name></member>
      <member refid="class_gf_matrix3d_1aa1e57e1649aa43fa284959654bc9784a" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>numRows</name></member>
      <member refid="class_gf_matrix3d_1a4fb4b46303575bbb5c8580a9410713bf" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix3d_1a58e272071e450c996bbbebe81e91a322" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix3d_1ad3004f416b8c993bcedec0db0eea6aab" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1ac538c5c2247ef6545c26e6e8db796b92" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1a48c0b09c1b93b8a45927bbbd16dbd4c6" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1ae2babc2f0a2c016b353aa7246cd485ab" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1a8606e3d5821960909ffe9883dc14f730" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1a606ebd4824ec307151ba2a378bdf0d8c" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1ab50c95cbc466409d9cc8292138209ee4" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *</name></member>
      <member refid="class_gf_matrix3d_1abf9ddd6d6d55744068673745a0735acb" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix3d_1a456e5822f72e33f4dadd14361bacab6d" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix3d_1a9da6f37b6da1ee8a20fddae4f13f54d3" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator -</name></member>
      <member refid="class_gf_matrix3d_1aea97deec7b0d037debb2c767b523fc0f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator -</name></member>
      <member refid="class_gf_matrix3d_1a96e016087875eb495cc5f8532bf54d50" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator -=</name></member>
      <member refid="class_gf_matrix3d_1a61d2488dcd1ebac5455fee5f0fd5a0be" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator []</name></member>
      <member refid="class_gf_matrix3d_1adb0caf805bb92683254c945958b9fc93" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator []</name></member>
      <member refid="class_gf_matrix3d_1a08303193e5436fc1e27f3920e4a48b6f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator+</name></member>
      <member refid="class_gf_matrix3d_1a2e8665411738f74a9e8d2ae3ed84a90f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator+=</name></member>
      <member refid="class_gf_matrix3d_1a788e0ab20bc99333c55df04d6506e2d9" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator/</name></member>
      <member refid="class_gf_matrix3d_1a7ba7fc60432f1a09ed71a407d8964e1c" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator==</name></member>
      <member refid="class_gf_matrix3d_1ae1a94f57f1fb176342126b13bd6f1c68" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>operator==</name></member>
      <member refid="class_gf_matrix3d_1ac8cefaffeb9d5c1e76d2c10eae0793c5" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>Orthonormalize</name></member>
      <member refid="class_gf_matrix3d_1a5459d6283bff692e454aad6e9ad9acf0" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>ScalarType</name></member>
      <member refid="class_gf_matrix3d_1aebb4f507fca983cabb06b92114c7f7d2" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>Set</name></member>
      <member refid="class_gf_matrix3d_1a17ed0c382733c346e617551664517845" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>Set</name></member>
      <member refid="class_gf_matrix3d_1aeb6d1e5e87e6a20fcccb06bf84cab2c4" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetColumn</name></member>
      <member refid="class_gf_matrix3d_1ab6cec2f0c6396d8d02853cc6c982c56c" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix3d_1a23f2a19f761670c35acc5e9258451a7b" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix3d_1a6f51ad146b7114c2eb6a58d7516501cc" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetIdentity</name></member>
      <member refid="class_gf_matrix3d_1abe68ce11c70f3b8874e3ffca74276c3f" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetRotate</name></member>
      <member refid="class_gf_matrix3d_1ab06f512b5f5373ab15462962a40709b5" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetRotate</name></member>
      <member refid="class_gf_matrix3d_1a845cf0030215a5bc9fb8a1e57fd2be58" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetRow</name></member>
      <member refid="class_gf_matrix3d_1a50e6a8d51c31ef7aba7ea0b59a27d0f1" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetScale</name></member>
      <member refid="class_gf_matrix3d_1a2d758300e5196593cc11df63b4fb2ccb" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetScale</name></member>
      <member refid="class_gf_matrix3d_1a2670ea67db62411c8223cf122aa6e3e0" prot="public" virt="non-virtual"><scope>GfMatrix3d</scope><name>SetZero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
