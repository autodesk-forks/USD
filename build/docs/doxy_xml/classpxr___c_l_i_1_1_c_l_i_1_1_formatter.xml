<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kind="class" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::Formatter</compoundname>
    <basecompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base" prot="public" virt="non-virtual">FormatterBase</basecompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
      <sectiondef kind="user-defined">
      <header>Overridables</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_INLINE std::string make_group</definition>
        <argsstring>(std::string group, bool is_positional, std::vector&lt; const Option * &gt; opts) const</argsstring>
        <name>make_group</name>
        <param>
          <type>std::string</type>
          <declname>group</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_positional</declname>
        </param>
        <param>
          <type>std::vector&lt; const Option * &gt;</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
<para>This prints out a group of options with title. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4089" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9388" bodyend="9397"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_positionals</definition>
        <argsstring>(const App *app) const</argsstring>
        <name>make_positionals</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>This prints out just the positionals &quot;group&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4092" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9399" bodyend="9407"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_groups</definition>
        <argsstring>(const App *app, AppFormatMode mode) const</argsstring>
        <name>make_groups</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>AppFormatMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This prints out all the groups of options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4095" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9409" bodyend="9431"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_subcommands</definition>
        <argsstring>(const App *app, AppFormatMode mode) const</argsstring>
        <name>make_subcommands</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>AppFormatMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>This prints out all the subcommands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4098" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9533" bodyend="9573"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_subcommand</definition>
        <argsstring>(const App *sub) const</argsstring>
        <name>make_subcommand</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>This prints out a subcommand. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4101" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9575" bodyend="9579"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_expanded</definition>
        <argsstring>(const App *sub) const</argsstring>
        <name>make_expanded</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>This prints out a subcommand in help-all. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4104" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9581" bodyend="9599"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_footer</definition>
        <argsstring>(const App *app) const</argsstring>
        <name>make_footer</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>This prints out all the groups of options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4107" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9501" bodyend="9507"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_description</definition>
        <argsstring>(const App *app) const</argsstring>
        <name>make_description</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <briefdescription>
<para>This displays the description line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4110" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9433" bodyend="9457"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_usage</definition>
        <argsstring>(const App *app, std::string name) const</argsstring>
        <name>make_usage</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>app</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>This displays the usage line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4113" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9459" bodyend="9499"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a188cdf33618c577f1266a78a39f11abd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_help</definition>
        <argsstring>(const App *, std::string, AppFormatMode) const override</argsstring>
        <name>make_help</name>
        <reimplements refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a3c3a2300178ed17ecf98b0e04313a604">make_help</reimplements>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <defname>app</defname>
        </param>
        <param>
          <type>std::string</type>
          <defname>name</defname>
        </param>
        <param>
          <type>AppFormatMode</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>This puts everything together. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4116" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9509" bodyend="9531"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Options</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a91e523f9b87c5dece0dd92c17d8105b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string make_option</definition>
        <argsstring>(const Option *opt, bool is_positional) const</argsstring>
        <name>make_option</name>
        <param>
          <type>const Option *</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_positional</declname>
        </param>
        <briefdescription>
<para>This prints out an option help line, either positional or optional form. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4123" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4123" bodyend="4128"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_option_name</definition>
        <argsstring>(const Option *, bool) const</argsstring>
        <name>make_option_name</name>
        <param>
          <type>const Option *</type>
          <defname>opt</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>is_positional</defname>
        </param>
        <briefdescription>
<para>This is the name part of an option, Default: left column. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4131" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9601" bodyend="9606"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_option_opts</definition>
        <argsstring>(const Option *) const</argsstring>
        <name>make_option_opts</name>
        <param>
          <type>const Option *</type>
          <defname>opt</defname>
        </param>
        <briefdescription>
<para>This is the options part of the name, Default: combined into left column. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4134" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9608" bodyend="9641"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_option_desc</definition>
        <argsstring>(const Option *) const</argsstring>
        <name>make_option_desc</name>
        <param>
          <type>const Option *</type>
          <defname>opt</defname>
        </param>
        <briefdescription>
<para>This is the description. Default: Right column, on new line if left column too large. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4137" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9643" bodyend="9643"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string make_option_usage</definition>
        <argsstring>(const Option *opt) const</argsstring>
        <name>make_option_usage</name>
        <param>
          <type>const Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>This is used to print the name on the USAGE line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4140" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="9645" bodyend="9655"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a149275e14c4178e12f6ced2a838cce0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Formatter</definition>
        <argsstring>()=default</argsstring>
        <name>Formatter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ad79404ce2458b6ea7a2ce69a5d86f4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Formatter</definition>
        <argsstring>(const Formatter &amp;)=default</argsstring>
        <name>Formatter</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a7bf654a00bf1baa0097509f4809cb1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Formatter</definition>
        <argsstring>(Formatter &amp;&amp;)=default</argsstring>
        <name>Formatter</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4079" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3b107a2cc540017114ec12c43ab0086c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;</type>
        <definition>Formatter&amp; operator=</definition>
        <argsstring>(const Formatter &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4080" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a2c1ed0b6b67a601f1e3f5f802da5ca3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;</type>
        <definition>Formatter&amp; operator=</definition>
        <argsstring>(Formatter &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4081" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the default <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter" kindref="compound">Formatter</ref> for CLI11. </para>
    </briefdescription>
    <detaileddescription>
<para>It pretty prints help output, and is broken into quite a few overridable methods, to be highly customizable with minimal effort. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1197">
        <label>Formatter</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter"/>
        <childnode refid="1198" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1198">
        <label>FormatterBase</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1199">
        <label>Formatter</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter"/>
        <childnode refid="1200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1200">
        <label>FormatterBase</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4075" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4075" bodyend="4143"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a9d49f5969dc6e08c8cfc7fd1f4a884e3" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>column_width</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a49a688c49a8eca1a0e576a96dd036e9d" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>column_width_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a149275e14c4178e12f6ced2a838cce0c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>Formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ad79404ce2458b6ea7a2ce69a5d86f4c1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>Formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a7bf654a00bf1baa0097509f4809cb1b2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>Formatter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1aae16b56c9f3cb42ce562e2cfc50be9b2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a2465b6a6e87a6836cbb1dddf600d6161" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ada3e2449e7eff5e8456599f1f2b8ad82" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>FormatterBase</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a0a00ae86f1d2262a981ec52aa3580f62" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>get_column_width</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1ad74fe261bd7b52e74ab248cdff052924" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>get_label</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a413bff586d9480543b25e5b05b5f279a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>label</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a07223c982b9be4faded6cb99b2eef712" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>labels_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3617c7fe5007cd73c951831869ee2cce" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ab2c95b71f515318333e6dc9d6b727945" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_expanded</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a704ee8438a2d1009405a89328eaf45dd" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_footer</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac9cc891492a3da2430efbb076f4982f0" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a54a1ad7efa0673e7138d7f39bb6d6d8e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_groups</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a188cdf33618c577f1266a78a39f11abd" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_help</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a91e523f9b87c5dece0dd92c17d8105b8" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a11bd6bc6417085a67714ef1d53cdb239" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_option_desc</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ac972373d5fd5efe75dcdff254de0ba73" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_option_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a6f9502f2c122d5676a66e582c5c8d98b" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_option_opts</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a70371cb1085b0a1ff7587fff6225cae9" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_option_usage</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adb21d5b4d14d5cbf7fdb6e300742c64f" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_positionals</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1adc6e3b256a48582fb0c1429e8b857b0a" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_subcommand</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1ae899bb6ff4fab35355ac983373a5e7de" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_subcommands</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a317dc90d597fc90a41a6b0eb80abe9da" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>make_usage</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a3b107a2cc540017114ec12c43ab0086c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_1a2c1ed0b6b67a601f1e3f5f802da5ca3d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a05a272478763bef4528f38e3dbac1bbc" prot="public" virt="non-virtual" ambiguityscope="pxr_CLI::CLI::FormatterBase::"><scope>pxr_CLI::CLI::Formatter</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a5b34fbb21629142e6ddad35a0174667d" prot="public" virt="non-virtual" ambiguityscope="pxr_CLI::CLI::FormatterBase::"><scope>pxr_CLI::CLI::Formatter</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_formatter_base_1a55011f5b55ffaa71d04d05df2ea0e8e2" prot="public" virt="virtual"><scope>pxr_CLI::CLI::Formatter</scope><name>~FormatterBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
