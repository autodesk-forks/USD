<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_weak_ptr" kind="class" language="C++" prot="public">
    <compoundname>TfWeakPtr</compoundname>
    <basecompoundref prot="public" virt="non-virtual">TfWeakPtrFacade&lt; TfWeakPtr, T &gt;</basecompoundref>
    <includes refid="weak_ptr_8h" local="no">weakPtr.h</includes>
    <innerclass refid="struct_tf_weak_ptr_1_1_rebind" prot="public">TfWeakPtr::Rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_weak_ptr_1a86b27f1e7d4011b071c39b486a363a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfWeakPtrFacadeAccess</definition>
        <argsstring></argsstring>
        <name>TfWeakPtrFacadeAccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="148" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_weak_ptr_1ade36cf9b6c765af0dbeb0a6563a11639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class TfWeakPtr</definition>
        <argsstring></argsstring>
        <name>TfWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="149" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_weak_ptr_1ada11cfb7886886a5c4ba66ea5c151684" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* _rawPtr</definition>
        <argsstring></argsstring>
        <name>_rawPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="240" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_weak_ptr_1ad35a1bfed9ef4618e68c55b50d7f7dc5" prot="private" static="no" mutable="yes">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>&lt; Tf_Remnant &gt;</type>
        <definition>TfRefPtr&lt;Tf_Remnant&gt; _remnant</definition>
        <argsstring></argsstring>
        <name>_remnant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="241" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_weak_ptr_1aa6cbfb3b4a1ff99e2b2be358739ed9c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>()</argsstring>
        <name>TfWeakPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="155" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1adeb540f58ca2ecf71f699f6bdc76e89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(TfNullPtrType)</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type>TfNullPtrType</type>
        </param>
        <briefdescription>
<para>Construction, implicit conversion from TfNullPtr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="158" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a3a04e9850dd3d35058b8fdffa1f5630d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
<para>Construction, implicit conversion from nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="161" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1ad0a49028980a63318a5e04872b9f7d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(TfWeakPtr const &amp;p)=default</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy construction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a8768440c16fe928fe6b14a6661ef1bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(TfWeakPtr &amp;&amp;p) noexcept</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Move construction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="167" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a7169e290ff6ccfea1685c740cd157a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(TfRefPtr&lt; U &gt; const &amp;p, typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *dummy=0)</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>&lt; U &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *</type>
          <declname>dummy</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Conversion from <emphasis>RefPtr</emphasis> where <emphasis>U*</emphasis> is convertible to <emphasis>T*</emphasis> (this pointer type). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="175" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1afd31e376f0441695a81af37fceeab096" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(U *p, typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *dummy=nullptr)</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *</type>
          <declname>dummy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Explicitly construct from a raw pointer <emphasis>p</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="188" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a9c9857f60ff4b4f419477804801a9df8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfWeakPtr</definition>
        <argsstring>(TfWeakPtr&lt; U &gt; const &amp;p, typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *dummy=0)</argsstring>
        <name>TfWeakPtr</name>
        <param>
          <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref>&lt; U &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_convertible&lt; U *, T * &gt;::value &gt;::type *</type>
          <declname>dummy</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="198" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="198" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1ac1bb0fb82fed3d36fc2bd8724acc974e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> &amp;</type>
        <definition>TfWeakPtr&amp; operator=</definition>
        <argsstring>(TfWeakPtr const &amp;p)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a0f52575cc27d9e10ea38a8989b98c365" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> &amp;</type>
        <definition>TfWeakPtr&amp; operator=</definition>
        <argsstring>(TfWeakPtr &amp;&amp;p) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Move assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="209" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1aba2bcf1ee25f12ef7281db6bcea5dd68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsExpired</definition>
        <argsstring>() const</argsstring>
        <name>IsExpired</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="216" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="216" bodyend="218"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_weak_ptr_1a09b1cfe0927532e571b428f7bdac1e3b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* _FetchPointer</definition>
        <argsstring>() const</argsstring>
        <name>_FetchPointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="222" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a58c9514d428b4082b830b8bc9dcb276c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsInvalid</definition>
        <argsstring>() const</argsstring>
        <name>_IsInvalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="228" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1a17c15a0f71300982bf53fa1e43051ef6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void const  *</type>
        <definition>void const* _GetUniqueIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>_GetUniqueIdentifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="232" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_weak_ptr_1aa3e2f6efe7499527045372e7551e009a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _EnableExtraNotification</definition>
        <argsstring>() const</argsstring>
        <name>_EnableExtraNotification</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/weakPtr.h" line="236" column="1" bodyfile="pxr/base/tf/weakPtr.h" bodystart="236" bodyend="238"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Pointer storage with deletion detection. </para>
    </briefdescription>
    <detaileddescription>
<para><bold>Overview</bold></para>
<para>A <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> is used to cache a pointer to an object; before retrieving/using this pointer, one queries the <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> object to verify that the objected pointed to has not been deleted in the interim.</para>
<para><programlisting filename="test/weakPtr.cpp"></programlisting></para>
<para>In the code above, if <computeroutput>PossiblyDeleteLemur()</computeroutput> deletes the object pointed to by <computeroutput>lemur</computeroutput>, then the test <computeroutput>if(lPtr)</computeroutput> returns false. Otherwise, it is safe to call a method on <computeroutput>lPtr</computeroutput>.</para>
<para>To declare a <computeroutput>TfWeakPtr&lt;T&gt;</computeroutput>, the type <computeroutput>T</computeroutput> must publicly derive from <computeroutput><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref></computeroutput>.</para>
<para><bold>Basic Use</bold></para>
<para>A <computeroutput>TfWeakPtr&lt;T&gt;</computeroutput> can access <computeroutput>T&apos;s</computeroutput> public members by the <computeroutput>-&gt;</computeroutput> operator and can be dereferenced by the &quot;\c *&quot; operator.</para>
<para>A <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> converts to a <computeroutput>true</computeroutput> bool value (for example, in an <computeroutput>if</computeroutput> statement) only if the pointer points to an unexpired object. Otherwise, if the pointer was either initialized to NULL, or points to an expired object, the test returns false.</para>
<para>Occasionally, it is useful to distinguish between a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> being explicitly initialized to NULL versus a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> whose object has expired: the member function <computeroutput>IsInvalid()</computeroutput> returns <computeroutput>true</computeroutput> only if the pointer points to an expired object.</para>
<para><bold>Opaqueness</bold></para>
<para>See the parallel discussion about these concepts in the documentation for <computeroutput><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref></computeroutput>; the same concepts apply.</para>
<para><bold>Comparisons, Const and Non-Const, Inheritance and Casting</bold></para>
<para>See the parallel discussion about these concepts in the documentation for <computeroutput><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref></computeroutput>; the same concepts apply.</para>
<para>While it is possible to create TfWeakPtrs to const contents, we recommend against it. TfCreateNonConstWeakPtr will always create a non-const weak pointer even when passed a const argument (it casts away const).</para>
<para>The recommendation against use of weak pointers to const content is due to the fact that weak pointers cannot be implicitly cast for both inheritance (derived to base) and const-ness (non-const to const) at the same time. Because of this, using weak pointers to const content is most often much more trouble than the benefit it gives. Therefore our policy is to not use them.</para>
<para><bold>Pointer Generality</bold></para>
<para>While <computeroutput>TfWeakPtr&lt;TfWeakBase&gt;</computeroutput> is specifically forbidden (you cannot construct this kind of object), you can assign any <computeroutput>TfWeakPtr&lt;T&gt;</computeroutput> to a <computeroutput>TfWeakPtr&lt;void&gt;</computeroutput> or TfWeakPtr&lt;const void&gt;. The only thing you can do with the latter is check to see if it points to an object that has expired. You cannot manipulate the object itself (i.e. access its member functions).</para>
<para>This is useful when you need to watch for object expiration without being bound by the type(s) of the objects you&apos;re watching. Similarly, you can create a TfWeakPtr&lt;void&gt; from a <computeroutput><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref></computeroutput> * using <computeroutput>TfCreateWeakPtr()</computeroutput>.</para>
<para><bold>Performance</bold></para>
<para>Deriving from <computeroutput><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref></computeroutput> results in a single <computeroutput><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref></computeroutput> variable being added to a class, which is the size of a regular pointer. The cost of deleting an object derived from <computeroutput><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref></computeroutput> is an extra inline boolean comparison, and possible decrement of a reference count if the object&apos;s address was ever given out as a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput>.</para>
<para>The cost to create a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> is as follows: initial creation of the pointer from a <computeroutput><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref></computeroutput> object dynamically creates an object called a <emphasis>remnant</emphasis>, whose size is that of two pointers. Subsequent transfers of the same object&apos;s address to another <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> merely bump a reference count to the remnant. When all <computeroutput>TfWeakPtrs</computeroutput> to the object (and the object itself) are destroyed, the remnant is deleted. An object can have a remnant created and destroyed at most once, regardless of how many times its address is given out in the form of a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput>.</para>
<para>Summarizing, the cost of guarding an object is a small amount of extra space, and near-zero runtime cost if the guarding is never used. Even if the guarding is used, the overhead at deletion time is minimal.</para>
<para>The time to test if a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> is NULL, or to call a member function through a <computeroutput><ref refid="class_tf_weak_ptr" kindref="compound">TfWeakPtr</ref></computeroutput> is small, involving only a single inline boolean comparison. </para>
    </detaileddescription>
    <location file="pxr/base/tf/refBase.h" line="38" column="1" bodyfile="pxr/base/tf/refBase.h" bodystart="38" bodyend="-1"/>
    <listofallmembers>
      <member refid="class_tf_weak_ptr_1aa3e2f6efe7499527045372e7551e009a" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_EnableExtraNotification</name></member>
      <member refid="class_tf_weak_ptr_1a09b1cfe0927532e571b428f7bdac1e3b" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_FetchPointer</name></member>
      <member refid="class_tf_weak_ptr_1a17c15a0f71300982bf53fa1e43051ef6" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_GetUniqueIdentifier</name></member>
      <member refid="class_tf_weak_ptr_1a58c9514d428b4082b830b8bc9dcb276c" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_IsInvalid</name></member>
      <member refid="class_tf_weak_ptr_1ada11cfb7886886a5c4ba66ea5c151684" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_rawPtr</name></member>
      <member refid="class_tf_weak_ptr_1ad35a1bfed9ef4618e68c55b50d7f7dc5" prot="private" virt="non-virtual"><scope>TfWeakPtr</scope><name>_remnant</name></member>
      <member refid="class_tf_weak_ptr_facade_1a853de684fd821964ed83e9413ec5e5f4" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>Access</name></member>
      <member refid="class_tf_weak_ptr_facade_1ad31e29e6849089c93a17466dddabac7a" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>DataType</name></member>
      <member refid="class_tf_weak_ptr_facade_1a9082935a3670758808fca4ba87996b7b" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>Derived</name></member>
      <member refid="class_tf_weak_ptr_facade_1aefb838f10699c24d21bc53ad6bec5472" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>element_type</name></member>
      <member refid="class_tf_weak_ptr_facade_1aeb302919f0c09e5e06a720ce5b41a67f" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>EnableExtraNotification</name></member>
      <member refid="class_tf_weak_ptr_facade_1abc16c41c1790740364e598cab235ad72" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_tf_weak_ptr_facade_1aace255e5115519917c868ab621553237" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>GetWeakBase</name></member>
      <member refid="class_tf_weak_ptr_1aba2bcf1ee25f12ef7281db6bcea5dd68" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>IsExpired</name></member>
      <member refid="class_tf_weak_ptr_facade_1a6c1f27c9de7ff98356fa712e4b796a1a" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>IsInvalid</name></member>
      <member refid="class_tf_weak_ptr_facade_1a45a49470b17aeb71f23c5a2ca7bff5fa" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator !</name></member>
      <member refid="class_tf_weak_ptr_facade_1a99e0198f8de50f29118315b94cd5eb7d" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator !=</name></member>
      <member refid="class_tf_weak_ptr_facade_1a2cfef9dcb3b40cc262d34c0c71dcd17a" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator !=</name></member>
      <member refid="class_tf_weak_ptr_facade_1ac224d617b2baff4c6ba072d495e07ee4" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator *</name></member>
      <member refid="class_tf_weak_ptr_facade_1adc6bc0789d3a26a3eaa0ad7234659a26" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator -&gt;</name></member>
      <member refid="class_tf_weak_ptr_facade_1af7ed2632714b77383696daedaf96f1f8" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator &gt;</name></member>
      <member refid="class_tf_weak_ptr_facade_1a801eefdefaa3d1324833da8a437501fc" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator &gt;=</name></member>
      <member refid="class_tf_weak_ptr_facade_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator UnspecifiedBoolType</name></member>
      <member refid="class_tf_weak_ptr_facade_1ab7523f395a53ddf8d0c87558018217db" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator&lt;</name></member>
      <member refid="class_tf_weak_ptr_facade_1a44e82b75acd5583654c081c9d04928a0" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator&lt;=</name></member>
      <member refid="class_tf_weak_ptr_1ac1bb0fb82fed3d36fc2bd8724acc974e" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator=</name></member>
      <member refid="class_tf_weak_ptr_1a0f52575cc27d9e10ea38a8989b98c365" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator=</name></member>
      <member refid="class_tf_weak_ptr_facade_1aceb37a35c35e2290dbc29405e22949a4" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator==</name></member>
      <member refid="class_tf_weak_ptr_facade_1a29352f694f6695920f1e3e798fc2c28d" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>operator==</name></member>
      <member refid="class_tf_weak_ptr_facade_1a0ac21286eb5d3f0ca16514e57b2cabe2" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>PointsTo</name></member>
      <member refid="class_tf_weak_ptr_facade_1a64d6900fe206529680f3a4b2f66d4355" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>PointsToA</name></member>
      <member refid="class_tf_weak_ptr_facade_1a372de693ad40b3f42839c8ec6ac845f4" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>Reset</name></member>
      <member refid="class_tf_weak_ptr_1ade36cf9b6c765af0dbeb0a6563a11639" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1aa6cbfb3b4a1ff99e2b2be358739ed9c1" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1adeb540f58ca2ecf71f699f6bdc76e89b" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1a3a04e9850dd3d35058b8fdffa1f5630d" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1ad0a49028980a63318a5e04872b9f7d7a" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1a8768440c16fe928fe6b14a6661ef1bb4" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1a7169e290ff6ccfea1685c740cd157a18" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1afd31e376f0441695a81af37fceeab096" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1a9c9857f60ff4b4f419477804801a9df8" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtr</name></member>
      <member refid="class_tf_weak_ptr_1a86b27f1e7d4011b071c39b486a363a72" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>TfWeakPtrFacadeAccess</name></member>
      <member refid="class_tf_weak_ptr_facade_1a5f40174f347ebc60ff11dbb85618ce44" prot="public" virt="non-virtual"><scope>TfWeakPtr</scope><name>UnspecifiedBoolType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
