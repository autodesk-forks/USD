<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespace_shader_metadata_helpers" kind="namespace" language="C++">
    <compoundname>ShaderMetadataHelpers</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a04ba33444bb9a054872c74c4fd162ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool ShaderMetadataHelpers::IsTruthy</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata)</argsstring>
        <name>IsTruthy</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Determines if the given metadatum in the metadata dictionary has a truthy value. </para>
        </briefdescription>
        <detaileddescription>
<para>All values are considered to be true except the following (case-insensitive): &apos;0&apos;, &apos;false&apos;, and &apos;f&apos;. The absence of <computeroutput>key</computeroutput> in the metadata also evaluates to false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a2ce14ae641ac035d3251abae66b4a890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string ShaderMetadataHelpers::StringVal</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata, const std::string &amp;defaultValue=std::string())</argsstring>
        <name>StringVal</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>defaultValue</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Extracts the string value from the given metadatum if it exists, otherwise returns <computeroutput>defaultValue</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a11709db7788581b8ae74960ce1246f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDR_API TfToken ShaderMetadataHelpers::TokenVal</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata, const TfToken &amp;defaultValue=TfToken())</argsstring>
        <name>TokenVal</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Extracts the tokenized value from the given metadatum if it exists, otherwise returns <computeroutput>defaultValue</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a80274fbbd138bb4a958cff35e8332ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API int</type>
        <definition>SDR_API int ShaderMetadataHelpers::IntVal</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata, int defaultValue=std::numeric_limits&lt; int &gt;::max())</argsstring>
        <name>IntVal</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
          <defval>std::numeric_limits&lt; int &gt;::max()</defval>
        </param>
        <briefdescription>
<para>Extracts the int value from the given metadatum if it exists and is a valid integer value, otherwise returns <computeroutput>default</computeroutput> value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a54cdd79468d0698ed0223d60fccfdfcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrStringVec</type>
        <definition>SDR_API NdrStringVec ShaderMetadataHelpers::StringVecVal</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata)</argsstring>
        <name>StringVecVal</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Extracts a vector of strings from the given metadatum. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty vector is returned if the metadatum does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a3613f28fc73e7c60e06a18eb2011192b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrTokenVec</type>
        <definition>SDR_API NdrTokenVec ShaderMetadataHelpers::TokenVecVal</definition>
        <argsstring>(const TfToken &amp;key, const NdrTokenMap &amp;metadata)</argsstring>
        <name>TokenVecVal</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Extracts a vector of tokenized values from the given metadatum. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty vector is returned if the metadatum does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a9b66ffae1aac288f51cb0984615d9b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrOptionVec</type>
        <definition>SDR_API NdrOptionVec ShaderMetadataHelpers::OptionVecVal</definition>
        <argsstring>(const std::string &amp;optionStr)</argsstring>
        <name>OptionVecVal</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>optionStr</declname>
        </param>
        <briefdescription>
<para>Extracts an &quot;options&quot; vector from the given string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a68c6e863f03c8baca6d844aff5cbc17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string ShaderMetadataHelpers::CreateStringFromStringVec</definition>
        <argsstring>(const NdrStringVec &amp;stringVec)</argsstring>
        <name>CreateStringFromStringVec</name>
        <param>
          <type>const NdrStringVec &amp;</type>
          <declname>stringVec</declname>
        </param>
        <briefdescription>
<para>Serializes a vector of strings into a string using the pipe character as the delimiter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1aaab5e48c04d2dc9e2e9276f08c5e52e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool ShaderMetadataHelpers::IsPropertyAnAssetIdentifier</definition>
        <argsstring>(const NdrTokenMap &amp;metadata)</argsstring>
        <name>IsPropertyAnAssetIdentifier</name>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Determines if the specified property metadata has a widget that indicates the property is an asset identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a2affc28db468983120331e45ba500bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API bool</type>
        <definition>SDR_API bool ShaderMetadataHelpers::IsPropertyATerminal</definition>
        <argsstring>(const NdrTokenMap &amp;metadata)</argsstring>
        <name>IsPropertyATerminal</name>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Determines if the specified property metadata has a &apos;renderType&apos; that indicates the property should be a SdrPropertyTypes-&gt;Terminal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_shader_metadata_helpers_1a5a017f300ac18ba401119b16e1608baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDR_API TfToken ShaderMetadataHelpers::GetRoleFromMetadata</definition>
        <argsstring>(const NdrTokenMap &amp;metadata)</argsstring>
        <name>GetRoleFromMetadata</name>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Gets the &quot;role&quot; from metadata if one is provided. Only returns a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Various utilities for parsing metadata contained within shaders. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/sdr/shaderMetadataHelpers.h" line="39" column="1"/>
  </compounddef>
</doxygen>
