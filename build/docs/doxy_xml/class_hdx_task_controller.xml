<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hdx_task_controller" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdxTaskController</compoundname>
    <innerclass refid="class_hdx_task_controller_1_1___delegate" prot="private">HdxTaskController::_Delegate</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hdx_task_controller_1a90ef9c929f15fc31262485d6f1a4c713" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
        <definition>HdRenderIndex* _index</definition>
        <argsstring></argsstring>
        <name>_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="273" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1ad3f01b92f097d5b31d07b63d6a4140fb" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const</type>
        <definition>SdfPath const _controllerId</definition>
        <argsstring></argsstring>
        <name>_controllerId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="274" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1acb6dd54b3e89dda998b7b4e7868cdac0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _gpuEnabled</definition>
        <argsstring></argsstring>
        <name>_gpuEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="275" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a754c33a1a1b7a0196b0615a48b848750" prot="private" static="no" mutable="no">
        <type>_Delegate</type>
        <definition>_Delegate _delegate</definition>
        <argsstring></argsstring>
        <name>_delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="391" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a81c3b74d3c4460c768a39bf11918d0f9" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; class <ref refid="class_hdx_free_camera_scene_delegate" kindref="compound">HdxFreeCameraSceneDelegate</ref> &gt;</type>
        <definition>std::unique_ptr&lt;class HdxFreeCameraSceneDelegate&gt; _freeCameraSceneDelegate</definition>
        <argsstring></argsstring>
        <name>_freeCameraSceneDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="392" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a2b6e23fef09e6114a9e708f9e01b6de4" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _simpleLightTaskId</definition>
        <argsstring></argsstring>
        <name>_simpleLightTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="395" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a1945dbac98fcb4937aef17275a581187" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _shadowTaskId</definition>
        <argsstring></argsstring>
        <name>_shadowTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="396" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1adaaa12141ee8beb586edeefa38d97909" prot="private" static="no" mutable="no">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _renderTaskIds</definition>
        <argsstring></argsstring>
        <name>_renderTaskIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="397" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a68af040751b613603bbd0ff698917201" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _aovInputTaskId</definition>
        <argsstring></argsstring>
        <name>_aovInputTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="398" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a1c6b6057cbe6b50a1285dc6bd23c6849" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _oitResolveTaskId</definition>
        <argsstring></argsstring>
        <name>_oitResolveTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="399" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a51a36458dd5bd090432b0a980c403d96" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _selectionTaskId</definition>
        <argsstring></argsstring>
        <name>_selectionTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="400" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a75aa2561a93d26e8c574df9df47aeb18" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _colorizeSelectionTaskId</definition>
        <argsstring></argsstring>
        <name>_colorizeSelectionTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="401" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1aaa3c579edcda4ccaa24ffd386cf60962" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _colorCorrectionTaskId</definition>
        <argsstring></argsstring>
        <name>_colorCorrectionTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="402" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1ac87010a8f3fe41854dc690e0846a118b" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _visualizeAovTaskId</definition>
        <argsstring></argsstring>
        <name>_visualizeAovTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="403" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1ad45a8a002060619219b98e4f70529623" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _pickTaskId</definition>
        <argsstring></argsstring>
        <name>_pickTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="404" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1acb3550c0584487293294ed16314e8ca1" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _pickFromRenderBufferTaskId</definition>
        <argsstring></argsstring>
        <name>_pickFromRenderBufferTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="405" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a76f3d5882a0118dc0ed75d6f90f1ef90" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _boundingBoxTaskId</definition>
        <argsstring></argsstring>
        <name>_boundingBoxTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="406" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1ae5154a40fb042a3e81f6197872f6c196" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _presentTaskId</definition>
        <argsstring></argsstring>
        <name>_presentTaskId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="407" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a80b97f813493c9d90e2e552e7dc7288c" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _activeCameraId</definition>
        <argsstring></argsstring>
        <name>_activeCameraId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="410" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a1c769267ac5c41eb2c6b7b0094bfb75f" prot="private" static="no" mutable="no">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _lightIds</definition>
        <argsstring></argsstring>
        <name>_lightIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="413" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1aec7ca41ecb9ffc58d9beddec1c54b251" prot="private" static="no" mutable="no">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _aovBufferIds</definition>
        <argsstring></argsstring>
        <name>_aovBufferIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="416" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a93baa43ee33562402f72d0ee67a3b693" prot="private" static="no" mutable="no">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _aovOutputs</definition>
        <argsstring></argsstring>
        <name>_aovOutputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="417" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a46c8e703ca6858004a863291c089bc88" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _viewportAov</definition>
        <argsstring></argsstring>
        <name>_viewportAov</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="418" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a321466e95393bec2ab972f761275026a" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref></type>
        <definition>GfVec2i _renderBufferSize</definition>
        <argsstring></argsstring>
        <name>_renderBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="420" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a45cedb49680fd7fb30cae3e826e3d1ae" prot="private" static="no" mutable="no">
        <type><ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref></type>
        <definition>CameraUtilFraming _framing</definition>
        <argsstring></argsstring>
        <name>_framing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="421" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1add64581840b0e8fe695d12dc8cae8311" prot="private" static="no" mutable="no">
        <type>std::optional&lt; CameraUtilConformWindowPolicy &gt;</type>
        <definition>std::optional&lt;CameraUtilConformWindowPolicy&gt; _overrideWindowPolicy</definition>
        <argsstring></argsstring>
        <name>_overrideWindowPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="422" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdx_task_controller_1a2e693e8333cc12fdc05c714ca930c8f6" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref></type>
        <definition>GfVec4d _viewport</definition>
        <argsstring></argsstring>
        <name>_viewport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="424" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hdx_task_controller_1a5d89cbf2972a44a940164a294131804a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API</type>
        <definition>HDX_API HdxTaskController</definition>
        <argsstring>(HdRenderIndex *renderIndex, SdfPath const &amp;controllerId, bool gpuEnabled=true)</argsstring>
        <name>HdxTaskController</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
          <declname>renderIndex</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>controllerId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gpuEnabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1af582079c79ad4cf6599ffd68e2291467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API</type>
        <definition>HDX_API ~HdxTaskController</definition>
        <argsstring>()</argsstring>
        <name>~HdxTaskController</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a550e4318c2dcd6d68754b85578d63c91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
        <definition>HdRenderIndex* GetRenderIndex</definition>
        <argsstring>()</argsstring>
        <name>GetRenderIndex</name>
        <briefdescription>
<para>Return the render index this controller is bound to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="66" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a5a2c1045bbaa03be16b354104141ac33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> const  *</type>
        <definition>HdRenderIndex const* GetRenderIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="67" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1af91700f01c95a06de5c5e919c2447163" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const  &amp;</type>
        <definition>SdfPath const&amp; GetControllerId</definition>
        <argsstring>() const</argsstring>
        <name>GetControllerId</name>
        <briefdescription>
<para>Return the controller&apos;s scene-graph id (prefixed to any scene graph objects it creates). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="71" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a433a82f01b5405ba86c0671295fd1f3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API HdTaskSharedPtrVector const</type>
        <definition>HDX_API HdTaskSharedPtrVector const GetRenderingTasks</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderingTasks</name>
        <briefdescription>
<para>Obtain the set of tasks managed by the task controller, for image generation. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Execution API The tasks returned will be different based on current renderer state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a00f3f7430d5fc4f79d24bd36262939d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API HdTaskSharedPtrVector const</type>
        <definition>HDX_API HdTaskSharedPtrVector const GetPickingTasks</definition>
        <argsstring>() const</argsstring>
        <name>GetPickingTasks</name>
        <briefdescription>
<para>Obtain the set of tasks managed by the task controller, for picking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a2adff5cf837cd93cbfbd41c19e16263c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetCollection</definition>
        <argsstring>(HdRprimCollection const &amp;collection)</argsstring>
        <name>SetCollection</name>
        <param>
          <type><ref refid="class_hd_rprim_collection" kindref="compound">HdRprimCollection</ref> const &amp;</type>
          <declname>collection</declname>
        </param>
        <briefdescription>
<para>Set the collection to be rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Rendering API </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a4b9d95b21af6e3f4bf55b07667bba1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderParams</definition>
        <argsstring>(HdxRenderTaskParams const &amp;params)</argsstring>
        <name>SetRenderParams</name>
        <param>
          <type><ref refid="struct_hdx_render_task_params" kindref="compound">HdxRenderTaskParams</ref> const &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Set the render params. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: params.viewport will be overwritten, since it comes from SetRenderViewport. XXX: For GL renders, HdxTaskController relies on the caller to correctly set GL_SAMPLE_ALPHA_TO_COVERAGE. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ac6f8a6aa18a39dc34bc5aec8c6a99dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderTags</definition>
        <argsstring>(TfTokenVector const &amp;renderTags)</argsstring>
        <name>SetRenderTags</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const &amp;</type>
          <declname>renderTags</declname>
        </param>
        <briefdescription>
<para>Set the &quot;view&quot; opinion of the scenes render tags. </para>
        </briefdescription>
        <detaileddescription>
<para>The opinion is the base opinion for the entire scene. Individual tasks (such as the shadow task) may have a stronger opinion and override this opinion </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a9be16668661c471511b469f3816e918e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderOutputs</definition>
        <argsstring>(TfTokenVector const &amp;names)</argsstring>
        <name>SetRenderOutputs</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Set the list of outputs to be rendered. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 AOV API If outputs.size() == 1, this will send that output to the viewport via a colorizer task. Note: names should come from HdAovTokens. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a0e972748a7f4c389669730ebc4dacea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetViewportRenderOutput</definition>
        <argsstring>(TfToken const &amp;name)</argsstring>
        <name>SetViewportRenderOutput</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set which output should be rendered to the viewport. </para>
        </briefdescription>
        <detaileddescription>
<para>The empty token disables viewport rendering. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aa4d08464c9e6b1dddf8c104c4d562d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API <ref refid="class_hd_render_buffer" kindref="compound">HdRenderBuffer</ref> *</type>
        <definition>HDX_API HdRenderBuffer* GetRenderOutput</definition>
        <argsstring>(TfToken const &amp;name)</argsstring>
        <name>GetRenderOutput</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the buffer for a rendered output. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: the caller should call Resolve(), as HdxTaskController doesn&apos;t guarantee the buffer will be resolved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a1983b5763b09cbeb73cf667667ad34bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderOutputSettings</definition>
        <argsstring>(TfToken const &amp;name, HdAovDescriptor const &amp;desc)</argsstring>
        <name>SetRenderOutputSettings</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_aov_descriptor" kindref="compound">HdAovDescriptor</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Set custom parameters for an AOV. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ada2fd8fb386c7a4f431eba38619dbb3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API <ref refid="struct_hd_aov_descriptor" kindref="compound">HdAovDescriptor</ref></type>
        <definition>HDX_API HdAovDescriptor GetRenderOutputSettings</definition>
        <argsstring>(TfToken const &amp;name) const</argsstring>
        <name>GetRenderOutputSettings</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get parameters for an AOV. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a8fd28d5c0af7b3d7f23003152d78b928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetPresentationOutput</definition>
        <argsstring>(TfToken const &amp;api, VtValue const &amp;framebuffer)</argsstring>
        <name>SetPresentationOutput</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>api</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>framebuffer</declname>
        </param>
        <briefdescription>
<para>The destination API (e.g., OpenGL, see hgiInterop for details) and framebuffer that the AOVs are presented into. </para>
        </briefdescription>
        <detaileddescription>
<para>The framebuffer is a <ref refid="class_vt_value" kindref="compound">VtValue</ref> that encoding a framebuffer in a destination API specific way. E.g., a uint32_t (aka GLuint) for framebuffer object for OpenGL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a57c2d76c836f6458765ea4a13f346c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetLightingState</definition>
        <argsstring>(GlfSimpleLightingContextPtr const &amp;src)</argsstring>
        <name>SetLightingState</name>
        <param>
          <type>GlfSimpleLightingContextPtr const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Set the lighting state for the scene. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Lighting API HdxTaskController maintains a set of light sprims with data set from the lights in &quot;src&quot;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Lighting state to implement. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ab35a81fa61c37468f7555e4e1ba65e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderBufferSize</definition>
        <argsstring>(const GfVec2i &amp;size)</argsstring>
        <name>SetRenderBufferSize</name>
        <param>
          <type>const <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the size of the render buffers baking the AOVs. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Camera and Framing API GUI applications should set this to the size of the window. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a925c1ddff439a96e41e4fe17daeaa3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetFraming</definition>
        <argsstring>(const CameraUtilFraming &amp;framing)</argsstring>
        <name>SetFraming</name>
        <param>
          <type>const <ref refid="class_camera_util_framing" kindref="compound">CameraUtilFraming</ref> &amp;</type>
          <declname>framing</declname>
        </param>
        <briefdescription>
<para>Determines how the filmback of the camera is mapped into the pixels of the render buffer and what pixels of the render buffer will be rendered into. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a4185d99305a57184d2347a55527bbc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetOverrideWindowPolicy</definition>
        <argsstring>(const std::optional&lt; CameraUtilConformWindowPolicy &gt; &amp;policy)</argsstring>
        <name>SetOverrideWindowPolicy</name>
        <param>
          <type>const std::optional&lt; CameraUtilConformWindowPolicy &gt; &amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Specifies whether to force a window policy when conforming the frustum of the camera to match the display window of the camera framing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a241a3e12244dc783e0c29063c955c62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetCameraPath</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>SetCameraPath</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para><ndash/> Scene camera <ndash/> Set the camera param on tasks to a USD camera path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1af403cc488a5b27a4991d623837ce00fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetRenderViewport</definition>
        <argsstring>(GfVec4d const &amp;viewport)</argsstring>
        <name>SetRenderViewport</name>
        <param>
          <type><ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> const &amp;</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
<para>Set the viewport param on tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000146"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use SetFraming and SetRenderBufferSize instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a9f6819953199c02eb0cf2bbe722ad07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetFreeCameraMatrices</definition>
        <argsstring>(GfMatrix4d const &amp;viewMatrix, GfMatrix4d const &amp;projectionMatrix)</argsstring>
        <name>SetFreeCameraMatrices</name>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
          <declname>viewMatrix</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
          <declname>projectionMatrix</declname>
        </param>
        <briefdescription>
<para><ndash/> Free camera <ndash/> Set the view and projection matrices for the free camera. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: The projection matrix must be pre-adjusted for the window policy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a2f9be22e1ea7b6ffbbda6639e6fb80f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetFreeCameraClipPlanes</definition>
        <argsstring>(std::vector&lt; GfVec4d &gt; const &amp;clipPlanes)</argsstring>
        <name>SetFreeCameraClipPlanes</name>
        <param>
          <type>std::vector&lt; <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &gt; const &amp;</type>
          <declname>clipPlanes</declname>
        </param>
        <briefdescription>
<para>Set the free camera clip planes. </para>
        </briefdescription>
        <detaileddescription>
<para>(Note: Scene cameras use clipping planes authored on the camera prim) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ae776a8ae87470558769c3eaffd4aca8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetEnableSelection</definition>
        <argsstring>(bool enable)</argsstring>
        <name>SetEnableSelection</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Turns the selection task on or off. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Selection API </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a143ed40610e0cdf487e9be9bc4b7cb1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetSelectionColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetSelectionColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the selection color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a442f620d6642b469f6702672485eaaea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetSelectionLocateColor</definition>
        <argsstring>(GfVec4f const &amp;color)</argsstring>
        <name>SetSelectionLocateColor</name>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the selection locate (over) color. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a64bab9d5f6cafcf49d22fec5fbf2db3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetSelectionEnableOutline</definition>
        <argsstring>(bool enableOutline)</argsstring>
        <name>SetSelectionEnableOutline</name>
        <param>
          <type>bool</type>
          <declname>enableOutline</declname>
        </param>
        <briefdescription>
<para>Set if the selection highlight should be rendered as an outline around the selected objects or as a solid color overlaid on top of them. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1abfaa3b0a19433289f1e360b73e3b3478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetSelectionOutlineRadius</definition>
        <argsstring>(unsigned int radius)</argsstring>
        <name>SetSelectionOutlineRadius</name>
        <param>
          <type>unsigned int</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Set the selection outline radius (thickness) in pixels. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only relevant if the highlight is meant to be rendered as an outline (if SetSelectionRenderOutline(true) is called). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ac1bdc21e445f0c1237551e1e58ae8d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetEnableShadows</definition>
        <argsstring>(bool enable)</argsstring>
        <name>SetEnableShadows</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Turns the shadow task on or off. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Shadow API </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1af7ac12cc7095725327b5ade22c094cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetShadowParams</definition>
        <argsstring>(HdxShadowTaskParams const &amp;params)</argsstring>
        <name>SetShadowParams</name>
        <param>
          <type>HdxShadowTaskParams const &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Set the shadow params. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: params.camera will be overwritten, since it comes from SetCameraPath/SetCameraState. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a31fb339dad357c5c1616f7463c8651cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API bool</type>
        <definition>HDX_API bool IsConverged</definition>
        <argsstring>() const</argsstring>
        <name>IsConverged</name>
        <briefdescription>
<para>Return whether the image has converged. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Progressive Image Generation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a3125d1e0832795e2935eaacb72fcaf09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetColorCorrectionParams</definition>
        <argsstring>(HdxColorCorrectionTaskParams const &amp;params)</argsstring>
        <name>SetColorCorrectionParams</name>
        <param>
          <type><ref refid="struct_hdx_color_correction_task_params" kindref="compound">HdxColorCorrectionTaskParams</ref> const &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Configure color correction by settings params. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Color Correction API </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ad6e1b8f5d41281bcaa9f22f42287d56b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetBBoxParams</definition>
        <argsstring>(const HdxBoundingBoxTaskParams &amp;params)</argsstring>
        <name>SetBBoxParams</name>
        <param>
          <type>const <ref refid="struct_hdx_bounding_box_task_params" kindref="compound">HdxBoundingBoxTaskParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Set the bounding box params. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Bounding Box API </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1abfe5285cd5fa8911dc7f0391f5f43f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDX_API void</type>
        <definition>HDX_API void SetEnablePresentation</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>SetEnablePresentation</name>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Enable / disable presenting the render to bound framebuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Present API An application may choose to manage the AOVs that are rendered into itself and skip the task controller&apos;s presentation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="264" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hdx_task_controller_1a65097fc1c8265060390c3935fa24aa41" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdxTaskController</definition>
        <argsstring>(HdxTaskController const &amp;)=delete</argsstring>
        <name>HdxTaskController</name>
        <param>
          <type>HdxTaskController const &amp;</type>
        </param>
        <briefdescription>
<para>This class is not intended to be copied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aad93ac36bd0f42188cc28548c6f5eb7b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdxTaskController &amp;</type>
        <definition>HdxTaskController&amp; operator=</definition>
        <argsstring>(HdxTaskController const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>HdxTaskController const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aa4394c5e77c404cb49e2362f51dfada1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateRenderGraph</definition>
        <argsstring>()</argsstring>
        <name>_CreateRenderGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a974c669f9f9c95da226e23cc82923701" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateLightingTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateLightingTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a5ca8d5a17bf43845e0ae3e7bd5adface" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateShadowTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateShadowTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a45dcf9994c6113f748b64ea480f87c2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _CreateSkydomeTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateSkydomeTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ab16f7227d8d9b7d90ad699201fa436ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _CreateRenderTask</definition>
        <argsstring>(TfToken const &amp;materialTag)</argsstring>
        <name>_CreateRenderTask</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>materialTag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a77689a44b594ce826ccfa0f7405dacc6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateOitResolveTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateOitResolveTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ac27674f5d5fc62fa010d56438410858c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateSelectionTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateSelectionTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a28bfa98e220680871f7f78df90dde7de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateColorizeSelectionTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateColorizeSelectionTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a1cf3189e58e9bd500d4095490c9afea6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateColorCorrectionTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateColorCorrectionTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a75c66fa4b0507c8365482ce4d83bbbf6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateVisualizeAovTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateVisualizeAovTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a7fcd3932afebb2bf5f5fa14939376ccc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreatePickTask</definition>
        <argsstring>()</argsstring>
        <name>_CreatePickTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aeb7f5d50519228658a93acb1700ea63c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreatePickFromRenderBufferTask</definition>
        <argsstring>()</argsstring>
        <name>_CreatePickFromRenderBufferTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ac57d8372f0018220e3e11aaa755efb6a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateBoundingBoxTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateBoundingBoxTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a78546152715b8e6322d1485002f219fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreateAovInputTask</definition>
        <argsstring>()</argsstring>
        <name>_CreateAovInputTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1af7fde53229505940268d1d754061530a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CreatePresentTask</definition>
        <argsstring>()</argsstring>
        <name>_CreatePresentTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a6225342bdeb8fd48a3adccc788429803" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetCameraParamForTasks</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>_SetCameraParamForTasks</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a5afcb5f7e57bf2a53066843badc6ef48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetCameraFramingForTasks</definition>
        <argsstring>()</argsstring>
        <name>_SetCameraFramingForTasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a5e1ca7499165d66c5115bb27cdc5c1ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdateAovDimensions</definition>
        <argsstring>(GfVec2i const &amp;dimensions)</argsstring>
        <name>_UpdateAovDimensions</name>
        <param>
          <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
          <declname>dimensions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ae2e666309bc1b9671408d5d373da236b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetBlendStateForMaterialTag</definition>
        <argsstring>(TfToken const &amp;materialTag, HdxRenderTaskParams *renderParams) const</argsstring>
        <name>_SetBlendStateForMaterialTag</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>materialTag</declname>
        </param>
        <param>
          <type><ref refid="struct_hdx_render_task_params" kindref="compound">HdxRenderTaskParams</ref> *</type>
          <declname>renderParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a10508ae1bdbbf53e630ab906ded73449" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ShadowsEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_ShadowsEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a26558309e21090550c883c04cca157ce" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _SelectionEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_SelectionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a0d543c3d3732c2a899b5e0f7f2ee59ab" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ColorizeSelectionEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_ColorizeSelectionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aa72e2d3ea9bb8dc91865d6f408feba2f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ColorCorrectionEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_ColorCorrectionEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a400fa3d587627876e25454809f7855d6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _VisualizeAovEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_VisualizeAovEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1afa6b3c07c95f79c36fa580723012f610" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ColorizeQuantizationEnabled</definition>
        <argsstring>() const</argsstring>
        <name>_ColorizeQuantizationEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ac9c71a0f9d11b6aef8e92cb57671ef40" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _AovsSupported</definition>
        <argsstring>() const</argsstring>
        <name>_AovsSupported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aaf5cb3c6a1a2ba63c8bf367371b459d4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _UsingAovs</definition>
        <argsstring>() const</argsstring>
        <name>_UsingAovs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aec0f8f19e79842fb7351eaca59088975" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _GetRenderTaskPath</definition>
        <argsstring>(TfToken const &amp;materialTag) const</argsstring>
        <name>_GetRenderTaskPath</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>materialTag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aa142d7dfc191265b55d578452578016e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _GetAovPath</definition>
        <argsstring>(TfToken const &amp;aov) const</argsstring>
        <name>_GetAovPath</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>aov</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1adf9174a8f8d8c40a93702fc0ba61b6ab" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _GetAovEnabledTasks</definition>
        <argsstring>() const</argsstring>
        <name>_GetAovEnabledTasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1aec5678c4bcd5a67f8a5ed85e354ab985" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _SupportBuiltInLightTypes</definition>
        <argsstring>()</argsstring>
        <name>_SupportBuiltInLightTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a55707086a0525851c7d063863ba9fff0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetBuiltInLightingState</definition>
        <argsstring>(GlfSimpleLightingContextPtr const &amp;src)</argsstring>
        <name>_SetBuiltInLightingState</name>
        <param>
          <type>GlfSimpleLightingContextPtr const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a0116bf79015a5f0ba823838321ad9b00" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _GetCameraLightType</definition>
        <argsstring>()</argsstring>
        <name>_GetCameraLightType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a5f46476184138dade509cf07b5fad1f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue _GetDomeLightTexture</definition>
        <argsstring>(GlfSimpleLight const &amp;light)</argsstring>
        <name>_GetDomeLightTexture</name>
        <param>
          <type>GlfSimpleLight const &amp;</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ad33bd1bf5da099482e972b17771a085a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetParameters</definition>
        <argsstring>(SdfPath const &amp;pathName, GlfSimpleLight const &amp;light)</argsstring>
        <name>_SetParameters</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>pathName</declname>
        </param>
        <param>
          <type>GlfSimpleLight const &amp;</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1ad7f02b7b4c791606a550c7ceeba3f8c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetMaterialNetwork</definition>
        <argsstring>(SdfPath const &amp;pathName, GlfSimpleLight const &amp;light)</argsstring>
        <name>_SetMaterialNetwork</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>pathName</declname>
        </param>
        <param>
          <type>GlfSimpleLight const &amp;</type>
          <declname>light</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a3ce279c71577a53c864c98601f9703f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GlfSimpleLight</type>
        <definition>GlfSimpleLight _GetLightAtId</definition>
        <argsstring>(size_t const &amp;pathIdx)</argsstring>
        <name>_GetLightAtId</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>pathIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a87f5fcff32e831e51edb30cb3ecadeed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RemoveLightSprim</definition>
        <argsstring>(size_t const &amp;pathIdx)</argsstring>
        <name>_RemoveLightSprim</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>pathIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdx_task_controller_1a0adc26886fb3037e10156d1b30aab81f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ReplaceLightSprim</definition>
        <argsstring>(size_t const &amp;pathIdx, GlfSimpleLight const &amp;light, SdfPath const &amp;pathName)</argsstring>
        <name>_ReplaceLightSprim</name>
        <param>
          <type>size_t const &amp;</type>
          <declname>pathIdx</declname>
        </param>
        <param>
          <type>GlfSimpleLight const &amp;</type>
          <declname>light</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>pathName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdx/taskController.h" line="334" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/imaging/hdx/taskController.h" line="56" column="1" bodyfile="pxr/imaging/hdx/taskController.h" bodystart="55" bodyend="425"/>
    <listofallmembers>
      <member refid="class_hdx_task_controller_1a80b97f813493c9d90e2e552e7dc7288c" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_activeCameraId</name></member>
      <member refid="class_hdx_task_controller_1aec7ca41ecb9ffc58d9beddec1c54b251" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_aovBufferIds</name></member>
      <member refid="class_hdx_task_controller_1a68af040751b613603bbd0ff698917201" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_aovInputTaskId</name></member>
      <member refid="class_hdx_task_controller_1a93baa43ee33562402f72d0ee67a3b693" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_aovOutputs</name></member>
      <member refid="class_hdx_task_controller_1ac9c71a0f9d11b6aef8e92cb57671ef40" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_AovsSupported</name></member>
      <member refid="class_hdx_task_controller_1a76f3d5882a0118dc0ed75d6f90f1ef90" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_boundingBoxTaskId</name></member>
      <member refid="class_hdx_task_controller_1aa72e2d3ea9bb8dc91865d6f408feba2f" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_ColorCorrectionEnabled</name></member>
      <member refid="class_hdx_task_controller_1aaa3c579edcda4ccaa24ffd386cf60962" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_colorCorrectionTaskId</name></member>
      <member refid="class_hdx_task_controller_1afa6b3c07c95f79c36fa580723012f610" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_ColorizeQuantizationEnabled</name></member>
      <member refid="class_hdx_task_controller_1a0d543c3d3732c2a899b5e0f7f2ee59ab" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_ColorizeSelectionEnabled</name></member>
      <member refid="class_hdx_task_controller_1a75aa2561a93d26e8c574df9df47aeb18" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_colorizeSelectionTaskId</name></member>
      <member refid="class_hdx_task_controller_1ad3f01b92f097d5b31d07b63d6a4140fb" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_controllerId</name></member>
      <member refid="class_hdx_task_controller_1a78546152715b8e6322d1485002f219fd" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateAovInputTask</name></member>
      <member refid="class_hdx_task_controller_1ac57d8372f0018220e3e11aaa755efb6a" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateBoundingBoxTask</name></member>
      <member refid="class_hdx_task_controller_1a1cf3189e58e9bd500d4095490c9afea6" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateColorCorrectionTask</name></member>
      <member refid="class_hdx_task_controller_1a28bfa98e220680871f7f78df90dde7de" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateColorizeSelectionTask</name></member>
      <member refid="class_hdx_task_controller_1a974c669f9f9c95da226e23cc82923701" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateLightingTask</name></member>
      <member refid="class_hdx_task_controller_1a77689a44b594ce826ccfa0f7405dacc6" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateOitResolveTask</name></member>
      <member refid="class_hdx_task_controller_1aeb7f5d50519228658a93acb1700ea63c" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreatePickFromRenderBufferTask</name></member>
      <member refid="class_hdx_task_controller_1a7fcd3932afebb2bf5f5fa14939376ccc" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreatePickTask</name></member>
      <member refid="class_hdx_task_controller_1af7fde53229505940268d1d754061530a" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreatePresentTask</name></member>
      <member refid="class_hdx_task_controller_1aa4394c5e77c404cb49e2362f51dfada1" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateRenderGraph</name></member>
      <member refid="class_hdx_task_controller_1ab16f7227d8d9b7d90ad699201fa436ca" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateRenderTask</name></member>
      <member refid="class_hdx_task_controller_1ac27674f5d5fc62fa010d56438410858c" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateSelectionTask</name></member>
      <member refid="class_hdx_task_controller_1a5ca8d5a17bf43845e0ae3e7bd5adface" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateShadowTask</name></member>
      <member refid="class_hdx_task_controller_1a45dcf9994c6113f748b64ea480f87c2e" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateSkydomeTask</name></member>
      <member refid="class_hdx_task_controller_1a75c66fa4b0507c8365482ce4d83bbbf6" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_CreateVisualizeAovTask</name></member>
      <member refid="class_hdx_task_controller_1a754c33a1a1b7a0196b0615a48b848750" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_delegate</name></member>
      <member refid="class_hdx_task_controller_1a45cedb49680fd7fb30cae3e826e3d1ae" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_framing</name></member>
      <member refid="class_hdx_task_controller_1a81c3b74d3c4460c768a39bf11918d0f9" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_freeCameraSceneDelegate</name></member>
      <member refid="class_hdx_task_controller_1adf9174a8f8d8c40a93702fc0ba61b6ab" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetAovEnabledTasks</name></member>
      <member refid="class_hdx_task_controller_1aa142d7dfc191265b55d578452578016e" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetAovPath</name></member>
      <member refid="class_hdx_task_controller_1a0116bf79015a5f0ba823838321ad9b00" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetCameraLightType</name></member>
      <member refid="class_hdx_task_controller_1a5f46476184138dade509cf07b5fad1f8" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetDomeLightTexture</name></member>
      <member refid="class_hdx_task_controller_1a3ce279c71577a53c864c98601f9703f1" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetLightAtId</name></member>
      <member refid="class_hdx_task_controller_1aec0f8f19e79842fb7351eaca59088975" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_GetRenderTaskPath</name></member>
      <member refid="class_hdx_task_controller_1acb6dd54b3e89dda998b7b4e7868cdac0" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_gpuEnabled</name></member>
      <member refid="class_hdx_task_controller_1a90ef9c929f15fc31262485d6f1a4c713" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_index</name></member>
      <member refid="class_hdx_task_controller_1a1c769267ac5c41eb2c6b7b0094bfb75f" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_lightIds</name></member>
      <member refid="class_hdx_task_controller_1a1c6b6057cbe6b50a1285dc6bd23c6849" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_oitResolveTaskId</name></member>
      <member refid="class_hdx_task_controller_1add64581840b0e8fe695d12dc8cae8311" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_overrideWindowPolicy</name></member>
      <member refid="class_hdx_task_controller_1acb3550c0584487293294ed16314e8ca1" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_pickFromRenderBufferTaskId</name></member>
      <member refid="class_hdx_task_controller_1ad45a8a002060619219b98e4f70529623" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_pickTaskId</name></member>
      <member refid="class_hdx_task_controller_1ae5154a40fb042a3e81f6197872f6c196" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_presentTaskId</name></member>
      <member refid="class_hdx_task_controller_1a87f5fcff32e831e51edb30cb3ecadeed" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_RemoveLightSprim</name></member>
      <member refid="class_hdx_task_controller_1a321466e95393bec2ab972f761275026a" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_renderBufferSize</name></member>
      <member refid="class_hdx_task_controller_1adaaa12141ee8beb586edeefa38d97909" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_renderTaskIds</name></member>
      <member refid="class_hdx_task_controller_1a0adc26886fb3037e10156d1b30aab81f" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_ReplaceLightSprim</name></member>
      <member refid="class_hdx_task_controller_1a26558309e21090550c883c04cca157ce" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SelectionEnabled</name></member>
      <member refid="class_hdx_task_controller_1a51a36458dd5bd090432b0a980c403d96" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_selectionTaskId</name></member>
      <member refid="class_hdx_task_controller_1ae2e666309bc1b9671408d5d373da236b" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetBlendStateForMaterialTag</name></member>
      <member refid="class_hdx_task_controller_1a55707086a0525851c7d063863ba9fff0" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetBuiltInLightingState</name></member>
      <member refid="class_hdx_task_controller_1a5afcb5f7e57bf2a53066843badc6ef48" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetCameraFramingForTasks</name></member>
      <member refid="class_hdx_task_controller_1a6225342bdeb8fd48a3adccc788429803" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetCameraParamForTasks</name></member>
      <member refid="class_hdx_task_controller_1ad7f02b7b4c791606a550c7ceeba3f8c7" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetMaterialNetwork</name></member>
      <member refid="class_hdx_task_controller_1ad33bd1bf5da099482e972b17771a085a" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SetParameters</name></member>
      <member refid="class_hdx_task_controller_1a10508ae1bdbbf53e630ab906ded73449" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_ShadowsEnabled</name></member>
      <member refid="class_hdx_task_controller_1a1945dbac98fcb4937aef17275a581187" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_shadowTaskId</name></member>
      <member refid="class_hdx_task_controller_1a2b6e23fef09e6114a9e708f9e01b6de4" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_simpleLightTaskId</name></member>
      <member refid="class_hdx_task_controller_1aec5678c4bcd5a67f8a5ed85e354ab985" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_SupportBuiltInLightTypes</name></member>
      <member refid="class_hdx_task_controller_1a5e1ca7499165d66c5115bb27cdc5c1ff" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_UpdateAovDimensions</name></member>
      <member refid="class_hdx_task_controller_1aaf5cb3c6a1a2ba63c8bf367371b459d4" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_UsingAovs</name></member>
      <member refid="class_hdx_task_controller_1a2e693e8333cc12fdc05c714ca930c8f6" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_viewport</name></member>
      <member refid="class_hdx_task_controller_1a46c8e703ca6858004a863291c089bc88" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_viewportAov</name></member>
      <member refid="class_hdx_task_controller_1a400fa3d587627876e25454809f7855d6" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_VisualizeAovEnabled</name></member>
      <member refid="class_hdx_task_controller_1ac87010a8f3fe41854dc690e0846a118b" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>_visualizeAovTaskId</name></member>
      <member refid="class_hdx_task_controller_1af91700f01c95a06de5c5e919c2447163" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetControllerId</name></member>
      <member refid="class_hdx_task_controller_1a00f3f7430d5fc4f79d24bd36262939d9" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetPickingTasks</name></member>
      <member refid="class_hdx_task_controller_1a550e4318c2dcd6d68754b85578d63c91" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetRenderIndex</name></member>
      <member refid="class_hdx_task_controller_1a5a2c1045bbaa03be16b354104141ac33" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetRenderIndex</name></member>
      <member refid="class_hdx_task_controller_1a433a82f01b5405ba86c0671295fd1f3c" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetRenderingTasks</name></member>
      <member refid="class_hdx_task_controller_1aa4d08464c9e6b1dddf8c104c4d562d09" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetRenderOutput</name></member>
      <member refid="class_hdx_task_controller_1ada2fd8fb386c7a4f431eba38619dbb3b" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>GetRenderOutputSettings</name></member>
      <member refid="class_hdx_task_controller_1a5d89cbf2972a44a940164a294131804a" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>HdxTaskController</name></member>
      <member refid="class_hdx_task_controller_1a65097fc1c8265060390c3935fa24aa41" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>HdxTaskController</name></member>
      <member refid="class_hdx_task_controller_1a31fb339dad357c5c1616f7463c8651cc" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>IsConverged</name></member>
      <member refid="class_hdx_task_controller_1aad93ac36bd0f42188cc28548c6f5eb7b" prot="private" virt="non-virtual"><scope>HdxTaskController</scope><name>operator=</name></member>
      <member refid="class_hdx_task_controller_1ad6e1b8f5d41281bcaa9f22f42287d56b" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetBBoxParams</name></member>
      <member refid="class_hdx_task_controller_1a241a3e12244dc783e0c29063c955c62c" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetCameraPath</name></member>
      <member refid="class_hdx_task_controller_1a2adff5cf837cd93cbfbd41c19e16263c" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetCollection</name></member>
      <member refid="class_hdx_task_controller_1a3125d1e0832795e2935eaacb72fcaf09" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetColorCorrectionParams</name></member>
      <member refid="class_hdx_task_controller_1abfe5285cd5fa8911dc7f0391f5f43f8d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetEnablePresentation</name></member>
      <member refid="class_hdx_task_controller_1ae776a8ae87470558769c3eaffd4aca8d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetEnableSelection</name></member>
      <member refid="class_hdx_task_controller_1ac1bdc21e445f0c1237551e1e58ae8d6c" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetEnableShadows</name></member>
      <member refid="class_hdx_task_controller_1a925c1ddff439a96e41e4fe17daeaa3a3" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetFraming</name></member>
      <member refid="class_hdx_task_controller_1a2f9be22e1ea7b6ffbbda6639e6fb80f5" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetFreeCameraClipPlanes</name></member>
      <member refid="class_hdx_task_controller_1a9f6819953199c02eb0cf2bbe722ad07d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetFreeCameraMatrices</name></member>
      <member refid="class_hdx_task_controller_1a57c2d76c836f6458765ea4a13f346c27" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetLightingState</name></member>
      <member refid="class_hdx_task_controller_1a4185d99305a57184d2347a55527bbc3d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetOverrideWindowPolicy</name></member>
      <member refid="class_hdx_task_controller_1a8fd28d5c0af7b3d7f23003152d78b928" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetPresentationOutput</name></member>
      <member refid="class_hdx_task_controller_1ab35a81fa61c37468f7555e4e1ba65e0d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderBufferSize</name></member>
      <member refid="class_hdx_task_controller_1a9be16668661c471511b469f3816e918e" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderOutputs</name></member>
      <member refid="class_hdx_task_controller_1a1983b5763b09cbeb73cf667667ad34bd" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderOutputSettings</name></member>
      <member refid="class_hdx_task_controller_1a4b9d95b21af6e3f4bf55b07667bba1ec" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderParams</name></member>
      <member refid="class_hdx_task_controller_1ac6f8a6aa18a39dc34bc5aec8c6a99dc5" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderTags</name></member>
      <member refid="class_hdx_task_controller_1af403cc488a5b27a4991d623837ce00fb" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetRenderViewport</name></member>
      <member refid="class_hdx_task_controller_1a143ed40610e0cdf487e9be9bc4b7cb1c" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetSelectionColor</name></member>
      <member refid="class_hdx_task_controller_1a64bab9d5f6cafcf49d22fec5fbf2db3d" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetSelectionEnableOutline</name></member>
      <member refid="class_hdx_task_controller_1a442f620d6642b469f6702672485eaaea" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetSelectionLocateColor</name></member>
      <member refid="class_hdx_task_controller_1abfaa3b0a19433289f1e360b73e3b3478" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetSelectionOutlineRadius</name></member>
      <member refid="class_hdx_task_controller_1af7ac12cc7095725327b5ade22c094cbc" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetShadowParams</name></member>
      <member refid="class_hdx_task_controller_1a0e972748a7f4c389669730ebc4dacea0" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>SetViewportRenderOutput</name></member>
      <member refid="class_hdx_task_controller_1af582079c79ad4cf6599ffd68e2291467" prot="public" virt="non-virtual"><scope>HdxTaskController</scope><name>~HdxTaskController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
