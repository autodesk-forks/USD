<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_prim" kind="class" language="C++" prot="public">
    <compoundname>UsdPrim</compoundname>
    <basecompoundref refid="class_usd_object" prot="public" virt="non-virtual">UsdObject</basecompoundref>
    <includes refid="prim_8h" local="no">prim.h</includes>
    <innerclass refid="class_usd_prim_1_1___proto_to_instance_path_map" prot="private">UsdPrim::_ProtoToInstancePathMap</innerclass>
      <sectiondef kind="user-defined">
      <header>IsA</header>
      <memberdef kind="function" id="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool IsA</definition>
        <argsstring>() const</argsstring>
        <name>IsA</name>
        <briefdescription>
<para>Return true if the prim&apos;s schema type, is or inherits from the <ref refid="class_tf_type" kindref="compound">TfType</ref> of the schema class type <computeroutput>SchemaType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1ab99c37ba85f4c45d558138ca3b604ec5" kindref="member">GetPrimTypeInfo</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_type_info_1a0240ba781401c7158a2f3871f055006e" kindref="member">UsdPrimTypeInfo::GetSchemaType</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_FallbackPrimTypes" kindref="member">Fallback Prim Types</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="591" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="591" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0a50d49f93140253633fa2e256a0e43f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsA</definition>
        <argsstring>(const TfType &amp;schemaType) const</argsstring>
        <name>IsA</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA</ref> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a88c140dabc5899d3a65f3b80d1be112f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsA</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier) const</argsstring>
        <name>IsA</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA</ref> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ade9587aa5621826133da30a744db9194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsA</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion) const</argsstring>
        <name>IsA</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA</ref> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="609" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>IsInFamily</header>
      <memberdef kind="function" id="class_usd_prim_1a9083465b8d65e80ed3de8ad1c36ecc9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily) const</argsstring>
        <name>IsInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <briefdescription>
<para>Return true if the prim&apos;s schema type is or inherits from the schema type of any version of the schemas in the given <computeroutput>schemaFamily</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a5c117712468a24176b7d02b68bb5678d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>IsInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Return true if the prim&apos;s schema type, is or inherits from the schema type of any schema in the given <computeroutput>schemaFamily</computeroutput> that matches the version filter provided by <computeroutput>schemaVersion</computeroutput> and <computeroutput>versionPolicy</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afe2131ff705603088b5cb98743418b65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool IsInFamily</definition>
        <argsstring>(UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>IsInFamily</name>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a5c117712468a24176b7d02b68bb5678d" kindref="member">IsInFamily</ref> that finds a registered schema for the C++ schema class <computeroutput>SchemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="637" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="637" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a937ad58d61506a6d70e327b264331f47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsInFamily</definition>
        <argsstring>(const TfType &amp;schemaType, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>IsInFamily</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a5c117712468a24176b7d02b68bb5678d" kindref="member">IsInFamily</ref> that finds a registered schema for the given <computeroutput>schemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a43cb3c623d3103e348c7391daacedc86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsInFamily</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>IsInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a5c117712468a24176b7d02b68bb5678d" kindref="member">IsInFamily</ref> that parses the schema family and version to use from the given <computeroutput>schemaIdentifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the schema identifier is not required to be a registered schema as it only parsed to get what its family and version would be See <ref refid="class_usd_schema_registry_1a68fbde1db9710dfe4859734c53e9e061" kindref="member">UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6c02046be9c869622569f265aa8baa19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetVersionIfIsInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion *schemaVersion) const</argsstring>
        <name>GetVersionIfIsInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion *</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>Return true if the prim&apos;s schema type, is or inherits from the schema type of any version the schema in the given <computeroutput>schemaFamily</computeroutput> and if so, populates <computeroutput>schemaVersion</computeroutput> with the version of the schema that this prim <ref refid="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" kindref="member">IsA</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="681" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>HasAPI</header>
      <description><para><bold>Using HasAPI in C++</bold></para>
<para><programlisting><codeline><highlight class="normal">UsdPrim<sp/>prim<sp/>=<sp/>stage-&gt;OverridePrim(&quot;/path/to/prim&quot;);</highlight></codeline>
<codeline><highlight class="normal">MyDomainBozAPI<sp/>=<sp/>MyDomainBozAPI::Apply(prim);</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI&lt;MyDomainBozAPI&gt;());</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;BozAPI&quot;)));</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;BozAPI&quot;),<sp/>/*schemaVersion*/<sp/>0));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">UsdCollectionAPI<sp/>collAPI<sp/>=<sp/>UsdCollectionAPI::Apply(prim,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*instanceName*/<sp/>TfToken(&quot;geom&quot;));</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI&lt;UsdCollectionAPI&gt;();</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;CollectionAPI&quot;));</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;CollectionAPI&quot;),<sp/>/*schemaVersion*/<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI&lt;UsdCollectionAPI&gt;(/*instanceName*/<sp/>TfToken(&quot;geom&quot;)))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;CollectionAPI&quot;,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*instanceName*/<sp/>TfToken(&quot;geom&quot;)));</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(TfToken(&quot;CollectionAPI&quot;),<sp/>/*schemaVersion*/<sp/>0,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*instanceName*/<sp/>TfToken(&quot;geom&quot;));</highlight></codeline>
</programlisting></para>
<para>The python version of this method takes as an argument the <ref refid="class_tf_type" kindref="compound">TfType</ref> of the API schema class.</para>
<para><bold>Using HasAPI in Python</bold> <programlisting filename=".py"><codeline><highlight class="normal">prim<sp/>=<sp/>stage.OverridePrim(</highlight><highlight class="stringliteral">&quot;/path/to/prim&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">bozAPI<sp/>=<sp/>MyDomain.BozAPI.Apply(prim)</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(MyDomain.BozAPI))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;BozAPI&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;BozAPI&quot;</highlight><highlight class="normal">,<sp/>0))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">collAPI<sp/>=<sp/>Usd.CollectionAPI.Apply(prim,<sp/></highlight><highlight class="stringliteral">&quot;geom&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(Usd.CollectionAPI))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;CollectionAPI&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;CollectionAPI&quot;</highlight><highlight class="normal">,<sp/>0))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(Usd.CollectionAPI,<sp/>instanceName=</highlight><highlight class="stringliteral">&quot;geom&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;CollectionAPI&quot;</highlight><highlight class="normal">,<sp/>instanceName=</highlight><highlight class="stringliteral">&quot;geom&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">assert(prim.HasAPI(</highlight><highlight class="stringliteral">&quot;CollectionAPI&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>instanceName=</highlight><highlight class="stringliteral">&quot;geom&quot;</highlight><highlight class="normal">))</highlight></codeline>
</programlisting> </para>
</description>
      <memberdef kind="function" id="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasAPI</definition>
        <argsstring>() const</argsstring>
        <name>HasAPI</name>
        <briefdescription>
<para>Return true if the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> has had an applied API schema represented by the C++ class type <computeroutput>SchemaType</computeroutput> applied to it. </para>
        </briefdescription>
        <detaileddescription>
<para>This function works for both single-apply and multiple-apply API schema types. If the schema is a multiple-apply API schema this will return true if any instance of the multiple-apply API has been applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="741" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="741" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasAPI</definition>
        <argsstring>(const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Return true if the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> has the specific instance, <computeroutput>instanceName</computeroutput>, of the multiple-apply API schema represented by the C++ class type <computeroutput>SchemaType</computeroutput> applied to it. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instanceName</computeroutput> must be non-empty, otherwise it is a coding error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="761" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="761" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a73bd4c1495cb6ce4ef4e7c5539801a1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfType &amp;schemaType) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">HasAPI</ref> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae848451766449feb57f221b17803e0cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfType &amp;schemaType, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" kindref="member">HasAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae78d57eb626b86b682908dc6c7e5cb46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">HasAPI</ref> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aab9302047a035ba4f309f455cd845513" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" kindref="member">HasAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a612af35ea1212fb9fa9a48af8a8d5cd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">HasAPI</ref> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aac3518832492d0f7e5e4c679cefd03d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" kindref="member">HasAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="805" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>HasAPIInFamily</header>
      <memberdef kind="function" id="class_usd_prim_1a6006e1367ab73088137de40fbab94edd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has an applied API schema that is any version of the schemas in the given <computeroutput>schemaFamily</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will consider both single-apply and multiple-apply API schemas in the schema family. For the multiple-apply API schemas, this will return true if any instance of one of the schemas has been applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a535c761f2548bd7a71b8c802d875bc6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has a specific instance <computeroutput>instanceName</computeroutput> of an applied multiple-apply API schema that is any version the schemas in the given <computeroutput>schemaFamily</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instanceName</computeroutput> must be non-empty, otherwise it is a coding error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a63c06e9c2508f0cdb414bc32a3a92737" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has an applied API schema that is a schema in. </para>
        </briefdescription>
        <detaileddescription>
<para>the given <computeroutput>schemaFamily</computeroutput> that matches the version filter provided by <computeroutput>schemaVersion</computeroutput> and <computeroutput>versionPolicy</computeroutput>.</para>
<para>This function will consider both single-apply and multiple-apply API schemas in the schema family. For the multiple-apply API schemas, this will return true if any instance of one of the filter-passing schemas has been applied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="844" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa9fa340e747198373c69bcf4e445c014" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, UsdSchemaRegistry::VersionPolicy versionPolicy, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has a specific instance <computeroutput>instanceName</computeroutput> of an applied multiple-apply API schema in the given <computeroutput>schemaFamily</computeroutput> that matches the version filter provided by <computeroutput>schemaVersion</computeroutput> and <computeroutput>versionPolicy</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instanceName</computeroutput> must be non-empty, otherwise it is a coding error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="856" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afcd341666a5e933e69c5466264b87e68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasAPIInFamily</definition>
        <argsstring>(UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a63c06e9c2508f0cdb414bc32a3a92737" kindref="member">HasAPIInFamily</ref> that finds a registered schema for the C++ schema class <computeroutput>SchemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="867" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="867" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a8c59152ebda7b71814de2ccff30ba908" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasAPIInFamily</definition>
        <argsstring>(UsdSchemaRegistry::VersionPolicy versionPolicy, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1aa9fa340e747198373c69bcf4e445c014" kindref="member">HasAPIInFamily</ref> that finds a registered schema for the C++ schema class <computeroutput>SchemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="889" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="889" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0fa591b36239596344e29ac2f6a74033" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfType &amp;schemaType, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a63c06e9c2508f0cdb414bc32a3a92737" kindref="member">HasAPIInFamily</ref> that finds a registered schema for the given <computeroutput>schemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afd157ab5a5745461f5b2d7c9eafbc07b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfType &amp;schemaType, UsdSchemaRegistry::VersionPolicy versionPolicy, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1aa9fa340e747198373c69bcf4e445c014" kindref="member">HasAPIInFamily</ref> that finds a registered schema for the given <computeroutput>schemaType</computeroutput> and uses that schema&apos;s family and version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="921" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ade535d2d43cd8729d6ea5ea87c2c6d31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, UsdSchemaRegistry::VersionPolicy versionPolicy) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1a63c06e9c2508f0cdb414bc32a3a92737" kindref="member">HasAPIInFamily</ref> that parses the schema family and version to use from the given <computeroutput>schemaIdentifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the schema identifier is not required to be a registered schema as it only parsed to get what its family and version would be See <ref refid="class_usd_schema_registry_1a68fbde1db9710dfe4859734c53e9e061" kindref="member">UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="935" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a72feaf1bc256c8ec2ee34c91036a78dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, UsdSchemaRegistry::VersionPolicy versionPolicy, const TfToken &amp;instanceName) const</argsstring>
        <name>HasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type><ref refid="class_usd_schema_registry_1a49aaa704be3b21aaf43f12da6412ca6c" kindref="member">UsdSchemaRegistry::VersionPolicy</ref></type>
          <declname>versionPolicy</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Overload for convenience of <ref refid="class_usd_prim_1aa9fa340e747198373c69bcf4e445c014" kindref="member">HasAPIInFamily</ref> that parses the schema family and version to use from the given <computeroutput>schemaIdentifier</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the schema identifier is not required to be a registered schema as it only parsed to get what its family and version would be See <ref refid="class_usd_schema_registry_1a68fbde1db9710dfe4859734c53e9e061" kindref="member">UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="948" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adedf31ca40951ad06ab28bedba580081" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetVersionIfHasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion *schemaVersion) const</argsstring>
        <name>GetVersionIfHasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion *</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has an applied API schema that is any version the schemas in the given <computeroutput>schemaFamily</computeroutput> and if so, populates <computeroutput>schemaVersion</computeroutput> with the version of the schema that this prim <ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">HasAPI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will consider both single-apply and multiple-apply API schemas in the schema family. For the multiple-apply API schemas is a this will return true if any instance of one of the schemas has been applied.</para>
<para>Note that if more than one version of the schemas in <computeroutput>schemaFamily</computeroutput> are applied to this prim, the highest version number of these schemas will be populated in <computeroutput>schemaVersion</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a564a572e9af07f62503c4d62d3ff1a52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetVersionIfHasAPIInFamily</definition>
        <argsstring>(const TfToken &amp;schemaFamily, const TfToken &amp;instanceName, UsdSchemaVersion *schemaVersion) const</argsstring>
        <name>GetVersionIfHasAPIInFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>UsdSchemaVersion *</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>Return true if the prim has a specific instance <computeroutput>instanceName</computeroutput> of an applied multiple-apply API schema that is any version the schemas in the given <computeroutput>schemaFamily</computeroutput> and if so, populates <computeroutput>schemaVersion</computeroutput> with the version of the schema that this prim <ref refid="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" kindref="member">HasAPI</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>instanceName</computeroutput> must be non-empty, otherwise it is a coding error.</para>
<para>Note that if more than one version of the schemas in <computeroutput>schemaFamily</computeroutput> is multiple-apply and applied to this prim with the given <computeroutput>instanceName</computeroutput>, the highest version number of these schemas will be populated in <computeroutput>schemaVersion</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="986" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>CanApplyAPI</header>
      <memberdef kind="function" id="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CanApplyAPI</definition>
        <argsstring>(std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns whether a <bold>single-apply</bold> API schema with the given C++ type <computeroutput>SchemaType</computeroutput> can be applied to this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If the return value is false, and <computeroutput>whyNot</computeroutput> is provided, the reason the schema cannot be applied is written to whyNot.</para>
<para>Whether the schema can be applied is determined by the schema type definition which may specify that the API schema can only be applied to certain prim types.</para>
<para>The return value of this function only indicates whether it would be valid to apply this schema to the prim. It has no bearing on whether calling ApplyAPI will be successful or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1010" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1010" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a284822c3be5e7799b24927a070b58a67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CanApplyAPI</definition>
        <argsstring>(const TfToken &amp;instanceName, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns whether a <bold>multiple-apply</bold> API schema with the given C++ type <computeroutput>SchemaType</computeroutput> can be applied to this prim with the given <computeroutput>instanceName</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the return value is false, and <computeroutput>whyNot</computeroutput> is provided, the reason the schema cannot be applied is written to whyNot.</para>
<para>Whether the schema can be applied is determined by the schema type definition which may specify that the API schema can only be applied to certain prim types. It also determines whether the instance name is a valid instance name for the multiple apply schema.</para>
<para>The return value of this function only indicates whether it would be valid to apply this schema to the prim. It has no bearing on whether calling ApplyAPI will be successful or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1044" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1044" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a757bfb5fe2db9590d0c9dafeaef2c6eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfType &amp;schemaType, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">CanApplyAPI</ref> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6b6a48810fa7fe8afff53cbd50eb14e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfType &amp;schemaType, const TfToken &amp;instanceName, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a284822c3be5e7799b24927a070b58a67" kindref="member">CanApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a8f9c69289f3a68dd61ba99c90a2f11b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">CanApplyAPI</ref> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aaa82e51d38ef41dd209ccb8a8317931e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, const TfToken &amp;instanceName, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a284822c3be5e7799b24927a070b58a67" kindref="member">CanApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adf113f33e6ad5821928ef90da2fc2599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">CanApplyAPI</ref> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a18b833f6d4ad266fd2d41d3d5935522a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool CanApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, const TfToken &amp;instanceName, std::string *whyNot=nullptr) const</argsstring>
        <name>CanApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1a284822c3be5e7799b24927a070b58a67" kindref="member">CanApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1106" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>ApplyAPI</header>
      <memberdef kind="function" id="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ApplyAPI</definition>
        <argsstring>() const</argsstring>
        <name>ApplyAPI</name>
        <briefdescription>
<para>Applies a <bold>single-apply</bold> API schema with the given C++ type <computeroutput>SchemaType</computeroutput> to this prim in the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding the API schema&apos;s name token to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on this prim.</para>
<para>Returns true upon success or if the API schema is already applied in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be added to the apiSchemas listOp metadata </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1133" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1133" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adca506a91b20e7665a1ab28605508013" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ApplyAPI</definition>
        <argsstring>(const TfToken &amp;instanceName) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Applies a <bold>multiple-apply</bold> API schema with the given C++ type <computeroutput>SchemaType</computeroutput> and instance name <computeroutput>instanceName</computeroutput> to this prim in the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored in the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on this prim. For example, if SchemaType is &apos;<ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>&apos; and <computeroutput>instanceName</computeroutput> is &apos;plasticStuff&apos;, the name &apos;CollectionAPI:plasticStuff&apos; is added to the &apos;apiSchemas&apos; listOp metadata.</para>
<para>Returns true upon success or if the API schema is already applied with this <computeroutput>instanceName</computeroutput> in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para><computeroutput>instanceName</computeroutput> is empty </para>
</listitem>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be added to the apiSchemas listOp metadata </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1174" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1174" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1accd9241189a46cf277527d5c398d2ecb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfType &amp;schemaType) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">ApplyAPI</ref> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa4b57963e0a1816b67a3c559b1f95d7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfType &amp;schemaType, const TfToken &amp;instanceName) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1adca506a91b20e7665a1ab28605508013" kindref="member">ApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1af497f059b5cd793f883b38a89fd758f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">ApplyAPI</ref> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae6dc2591cd03480560ae83e936bf7cc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, const TfToken &amp;instanceName) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1adca506a91b20e7665a1ab28605508013" kindref="member">ApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a3fd1d65b9f958b918926f50eb7e9ee6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">ApplyAPI</ref> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a09494f697deb599f63af0f412ba55a6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ApplyAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, const TfToken &amp;instanceName) const</argsstring>
        <name>ApplyAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1adca506a91b20e7665a1ab28605508013" kindref="member">ApplyAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1226" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>RemoveAPI</header>
      <memberdef kind="function" id="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool RemoveAPI</definition>
        <argsstring>() const</argsstring>
        <name>RemoveAPI</name>
        <briefdescription>
<para>Removes a <bold>single-apply</bold> API schema with the given C++ type <computeroutput>SchemaType</computeroutput> from this prim in the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done by removing the API schema&apos;s name token from the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on this prim as well as authoring an explicit deletion of schema name from the listOp.</para>
<para>Returns true upon success or if the API schema is already deleted in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be deleted in the apiSchemas listOp metadata </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1253" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1253" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa5375b5403261404ff744636701f4fbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SchemaType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool RemoveAPI</definition>
        <argsstring>(const TfToken &amp;instanceName) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Removes a <bold>multiple-apply</bold> API schema with the given C++ type &apos;SchemaType&apos; and instance name <computeroutput>instanceName</computeroutput> from this prim in the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>This is done by removing the instanced schema name token from the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on this prim as well as authoring an explicit deletion of the name from the listOp. For example, if SchemaType is &apos;<ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>&apos; and <computeroutput>instanceName</computeroutput> is &apos;plasticStuff&apos;, the name &apos;CollectionAPI:plasticStuff&apos; is deleted from the &apos;apiSchemas&apos; listOp metadata.</para>
<para>Returns true upon success or if the API schema with this <computeroutput>instanceName</computeroutput> is already deleted in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para><computeroutput>instanceName</computeroutput> is empty </para>
</listitem>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be deleted in the apiSchemas listOp metadata </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1295" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1295" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a9292f92137b5f459864fcba767ac93f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfType &amp;schemaType) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">RemoveAPI</ref> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a9ac6e21c4b4b38fdeaf17d6352b3e4cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfType &amp;schemaType, const TfToken &amp;instanceName) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>schemaType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aa5375b5403261404ff744636701f4fbd" kindref="member">RemoveAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <ref refid="class_tf_type" kindref="compound">TfType</ref> <computeroutput>schemaType</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a89869430b2caa81afff1215d96df8345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">RemoveAPI</ref> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a337903c209a903708fcf1442fcf71546" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfToken &amp;schemaIdentifier, const TfToken &amp;instanceName) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaIdentifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aa5375b5403261404ff744636701f4fbd" kindref="member">RemoveAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaIdentifier</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a1bf2563856f70b61832a7419aedcdf41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">RemoveAPI</ref> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adde490586cee0e12ef4d8f7a26361f7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAPI</definition>
        <argsstring>(const TfToken &amp;schemaFamily, UsdSchemaVersion schemaVersion, const TfToken &amp;instanceName) const</argsstring>
        <name>RemoveAPI</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>schemaFamily</declname>
        </param>
        <param>
          <type>UsdSchemaVersion</type>
          <declname>schemaVersion</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>This is an overload of <ref refid="class_usd_prim_1aa5375b5403261404ff744636701f4fbd" kindref="member">RemoveAPI</ref> with <computeroutput>instanceName</computeroutput> that takes a <computeroutput>schemaFamily</computeroutput> and <computeroutput>schemaVersion</computeroutput> to determine the schema type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1347" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Prim Children</header>
      <memberdef kind="function" id="class_usd_prim_1a8c0974bbd49570564f0096ce982ff64a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetChild</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetChild</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return this prim&apos;s direct child named <computeroutput>name</computeroutput> if it has one, otherwise return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">prim.GetStage()-&gt;GetPrimAtPath(prim.GetPath().AppendChild(name))</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2619563fc9180d8ead597944fd7f6ec7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_sibling_range" kindref="compound">SiblingRange</ref></type>
        <definition>UsdPrimSiblingRange GetChildren</definition>
        <argsstring>() const</argsstring>
        <name>GetChildren</name>
        <briefdescription>
<para>Return this prim&apos;s active, loaded, defined, non-abstract children as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">GetFilteredChildren(UsdPrimDefaultPredicate)</highlight></codeline>
</programlisting></para>
<para>See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1426" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2518" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0173b7fe85d33e147f820033f4b08f0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_sibling_range" kindref="compound">SiblingRange</ref></type>
        <definition>UsdPrimSiblingRange GetAllChildren</definition>
        <argsstring>() const</argsstring>
        <name>GetAllChildren</name>
        <briefdescription>
<para>Return all this prim&apos;s children as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1429" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2512" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a41fba977a56f9a6c1c8e2ed1e98c337d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_sibling_range" kindref="compound">SiblingRange</ref></type>
        <definition>UsdPrimSiblingRange GetFilteredChildren</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;predicate) const</argsstring>
        <name>GetFilteredChildren</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Return a subset of all of this prim&apos;s children filtered by <computeroutput>predicate</computeroutput> as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>predicate</computeroutput> is generated by combining a series of prim flag terms with either &amp;&amp; or || and !.</para>
<para>Example usage: <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>all<sp/>active<sp/>model<sp/>children.</highlight></codeline>
<codeline><highlight class="normal">GetFilteredChildren(UsdPrimIsActive<sp/>&amp;&amp;<sp/>UsdPrimIsModel);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>all<sp/>model<sp/>children<sp/>that<sp/>pass<sp/>the<sp/>default<sp/>predicate.</highlight></codeline>
<codeline><highlight class="normal">GetFilteredChildren(UsdPrimDefaultPredicate<sp/>&amp;&amp;<sp/>UsdPrimIsModel);</highlight></codeline>
</programlisting></para>
<para>If this prim is an instance, no children will be returned unless <ref refid="prim_flags_8h_1ac34c7dc1a577a7d9b15c5a37e71317f2" kindref="member">UsdTraverseInstanceProxies</ref> is used to allow instance proxies to be returned, or if this prim is itself an instance proxy.</para>
<para>See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1451" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2505" bodyend="2509"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac477679086f343062d574a49c42a144f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetChildrenNames</definition>
        <argsstring>() const</argsstring>
        <name>GetChildrenNames</name>
        <briefdescription>
<para>Return the names of the child prims in the order they appear when iterating over GetChildren. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a58eb300c2c9b612c73de5f39e79ee780" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetAllChildrenNames</definition>
        <argsstring>() const</argsstring>
        <name>GetAllChildrenNames</name>
        <briefdescription>
<para>Return the names of the child prims in the order they appear when iterating over GetAllChildren. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2e6e5b5952c8fd9758df01286040889c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetFilteredChildrenNames</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;predicate) const</argsstring>
        <name>GetFilteredChildrenNames</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Return the names of the child prims in the order they appear when iterating over GetFilteredChildren(<computeroutput>predicate</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2c7f60d23da06f334e0d298c82eb4a5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_subtree_range" kindref="compound">SubtreeRange</ref></type>
        <definition>UsdPrimSubtreeRange GetDescendants</definition>
        <argsstring>() const</argsstring>
        <name>GetDescendants</name>
        <briefdescription>
<para>Return this prim&apos;s active, loaded, defined, non-abstract descendants as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">GetFilteredDescendants(UsdPrimDefaultPredicate)</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>This method is not yet available in python, pending some refactoring to make it more feasible.</para>
</simplesect>
See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information, <ref refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" kindref="member">UsdStage::Traverse()</ref>, and <computeroutput><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></computeroutput> for more general Stage traversal behaviors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1481" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2778" bodyend="2781"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a41a0ab990433f5c95da4f27a2b1697eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_subtree_range" kindref="compound">SubtreeRange</ref></type>
        <definition>UsdPrimSubtreeRange GetAllDescendants</definition>
        <argsstring>() const</argsstring>
        <name>GetAllDescendants</name>
        <briefdescription>
<para>Return all this prim&apos;s descendants as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method is not yet available in python, pending some refactoring to make it more feasible.</para>
</simplesect>
See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information, <ref refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" kindref="member">UsdStage::Traverse()</ref>, and <computeroutput><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></computeroutput> for more general Stage traversal behaviors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1491" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2772" bodyend="2775"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a35097b9294275723ef886d39f12d0546" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_subtree_range" kindref="compound">SubtreeRange</ref></type>
        <definition>UsdPrimSubtreeRange GetFilteredDescendants</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;predicate) const</argsstring>
        <name>GetFilteredDescendants</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Return a subset of all of this prim&apos;s descendants filtered by <computeroutput>predicate</computeroutput> as an iterable range. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>predicate</computeroutput> is generated by combining a series of prim flag terms with either &amp;&amp; or || and !.</para>
<para>Example usage: <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>all<sp/>active<sp/>model<sp/>descendants.</highlight></codeline>
<codeline><highlight class="normal">GetFilteredDescendants(UsdPrimIsActive<sp/>&amp;&amp;<sp/>UsdPrimIsModel);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>all<sp/>model<sp/>descendants<sp/>that<sp/>pass<sp/>the<sp/>default<sp/>predicate.</highlight></codeline>
<codeline><highlight class="normal">GetFilteredDescendants(UsdPrimDefaultPredicate<sp/>&amp;&amp;<sp/>UsdPrimIsModel);</highlight></codeline>
</programlisting></para>
<para>If this prim is an instance, no descendants will be returned unless <ref refid="prim_flags_8h_1ac34c7dc1a577a7d9b15c5a37e71317f2" kindref="member">UsdTraverseInstanceProxies</ref> is used to allow instance proxies to be returned, or if this prim is itself an instance proxy.</para>
<para><simplesect kind="note"><para>This method is not yet available in python, pending some refactoring to make it more feasible.</para>
</simplesect>
See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information, <ref refid="class_usd_stage_1adba675b55f41cc1b305bed414fc4f178" kindref="member">UsdStage::Traverse()</ref>, and <computeroutput><ref refid="class_usd_prim_range" kindref="compound">UsdPrimRange</ref></computeroutput> for more general Stage traversal behaviors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1517" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2765" bodyend="2769"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac661b2517129e7f82f6914a4fa4ba48b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetChildrenReorder</definition>
        <argsstring>() const</argsstring>
        <name>GetChildrenReorder</name>
        <briefdescription>
<para>Return the strongest opinion for the metadata used to reorder children of this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Due to how reordering of prim children is composed, this value cannot be relied on to get the actual order of the prim&apos;s children. Use GetChidrenNames, GetAllChildrenNames, GetFilteredChildrenNames to get the true child order if needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a5a163565922b1da251ae735ed9524a8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetChildrenReorder</definition>
        <argsstring>(const TfTokenVector &amp;order) const</argsstring>
        <name>SetChildrenReorder</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Author an opinion for the metadata used to reorder children of this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1529" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1529" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a540eae4b6bdb411b2dc90ed9c87f406e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ClearChildrenReorder</definition>
        <argsstring>() const</argsstring>
        <name>ClearChildrenReorder</name>
        <briefdescription>
<para>Remove the opinion for the metadata used to reorder children of this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1535" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1535" bodyend="1537"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parent &amp; Stage</header>
      <memberdef kind="function" id="class_usd_prim_1a1ca1c93057737f470764dfe82d8d2fef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim GetParent</definition>
        <argsstring>() const</argsstring>
        <name>GetParent</name>
        <briefdescription>
<para>Return this prim&apos;s parent prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> if this is a root prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1546" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="1546" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a8f383bb2bf33ae75983ff8694f3a814d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetNextSibling</definition>
        <argsstring>() const</argsstring>
        <name>GetNextSibling</name>
        <briefdescription>
<para>Return this prim&apos;s next active, loaded, defined, non-abstract sibling if it has one, otherwise return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">GetFilteredNextSibling(UsdPrimDefaultPredicate)</highlight></codeline>
</programlisting></para>
<para>See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6911516fcbfae7cd47da92c621c98ea2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetFilteredNextSibling</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;predicate) const</argsstring>
        <name>GetFilteredNextSibling</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Return this prim&apos;s next sibling that matches <computeroutput>predicate</computeroutput> if it has one, otherwise return the invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="prim_flags_8h_1Usd_PrimFlags" kindref="member">Prim predicate flags</ref> and <ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a796554a4a4f3e0101c5a8e16d0c7333f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsPseudoRoot</definition>
        <argsstring>() const</argsstring>
        <name>IsPseudoRoot</name>
        <briefdescription>
<para>Returns true if the prim is the pseudo root. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <programlisting><codeline><highlight class="normal">prim.GetPath()<sp/>==<sp/>SdfPath::AbsoluteRootPath()</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6ceb556070804b712c01a7968f925735" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetPrimAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetPrimAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the prim at <computeroutput>path</computeroutput> on the same stage as this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If path is is relative, it will be anchored to the path of this prim. <simplesect kind="see"><para><ref refid="class_usd_stage_1a6ceb556070804b712c01a7968f925735" kindref="member">UsdStage::GetPrimAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a9987f6fcd69d03b0b34d3ff1cf8ae345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_object" kindref="compound">UsdObject</ref></type>
        <definition>USD_API UsdObject GetObjectAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetObjectAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the object at <computeroutput>path</computeroutput> on the same stage as this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If path is is relative, it will be anchored to the path of this prim. <simplesect kind="see"><para><ref refid="class_usd_stage_1a9987f6fcd69d03b0b34d3ff1cf8ae345" kindref="member">UsdStage::GetObjectAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a5e639a0e2f163cb857149604f6042bd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_property" kindref="compound">UsdProperty</ref></type>
        <definition>USD_API UsdProperty GetPropertyAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetPropertyAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the property at <computeroutput>path</computeroutput> on the same stage as this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If path is relative, it will be anchored to the path of this prim.</para>
<para><simplesect kind="note"><para>There is no guarantee that this method returns a property on this prim. This is only guaranteed if path is a purely relative property path. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aabebc3bf37922b4508c991f262370547" kindref="member">GetProperty(const TfToken&amp;) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1a5e639a0e2f163cb857149604f6042bd3" kindref="member">UsdStage::GetPropertyAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a61e1347e76e9f3e269f8be1df3e99a42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetAttributeAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetAttributeAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the attribute at <computeroutput>path</computeroutput> on the same stage as this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If path is relative, it will be anchored to the path of this prim.</para>
<para><simplesect kind="note"><para>There is no guarantee that this method returns an attribute on this prim. This is only guaranteed if path is a purely relative property path. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a31225ac7165f58726f000ab1d67e9e61" kindref="member">GetAttribute(const TfToken&amp;) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1a61e1347e76e9f3e269f8be1df3e99a42" kindref="member">UsdStage::GetAttributeAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aea0c4da4c5bc2470f0c5a271215c2b01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship GetRelationshipAtPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetRelationshipAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the relationship at <computeroutput>path</computeroutput> on the same stage as this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If path is relative, it will be anchored to the path of this prim.</para>
<para><simplesect kind="note"><para>There is no guarantee that this method returns a relationship on this prim. This is only guaranteed if path is a purely relative property path. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1adb80fd32612eb6cbf4dc279908eb0bdd" kindref="member">GetRelationship(const TfToken&amp;) const</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_stage_1aea0c4da4c5bc2470f0c5a271215c2b01" kindref="member">UsdStage::GetRelationshipAtPath(const SdfPath&amp;) const </ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1620" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Variants</header>
      <memberdef kind="function" id="class_usd_prim_1a9949ecc0b27afc66d61f2d0f88453e52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref></type>
        <definition>USD_API UsdVariantSets GetVariantSets</definition>
        <argsstring>() const</argsstring>
        <name>GetVariantSets</name>
        <briefdescription>
<para>Return a <ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref> object representing all the VariantSets present on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned object also provides the API for adding new VariantSets to the prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a607da249e11bc4f5f3b4bf0db99861ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_variant_set" kindref="compound">UsdVariantSet</ref></type>
        <definition>USD_API UsdVariantSet GetVariantSet</definition>
        <argsstring>(const std::string &amp;variantSetName) const</argsstring>
        <name>GetVariantSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <briefdescription>
<para>Retrieve a specifically named VariantSet for editing or constructing a <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut for <programlisting><codeline><highlight class="normal">prim.GetVariantSets().GetVariantSet(variantSetName)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a87443b32a72f95ca96d960b4e96cbf02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasVariantSets</definition>
        <argsstring>() const</argsstring>
        <name>HasVariantSets</name>
        <briefdescription>
<para>Return true if this prim has any authored VariantSets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this connotes only the <emphasis>existence</emphasis> of one of more VariantSets, <emphasis>not</emphasis> that such VariantSets necessarily contain any variants or variant opinions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1650" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Attributes</header>
      <memberdef kind="function" id="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateAttribute</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName, bool custom, SdfVariability variability=SdfVariabilityVarying) const</argsstring>
        <name>CreateAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
          <declname>variability</declname>
          <defval>SdfVariabilityVarying</defval>
        </param>
        <briefdescription>
<para>Author scene description for the attribute named <emphasis>attrName</emphasis> at the current EditTarget if none already exists. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a valid attribute if scene description was successfully authored or if it already existed, return invalid attribute otherwise. Note that the supplied <emphasis>typeName</emphasis> and <emphasis>custom</emphasis> arguments are only used in one specific case. See below for details.</para>
<para>Suggested use: <programlisting><codeline><highlight class="normal">if<sp/>(UsdAttribute<sp/>myAttr<sp/>=<sp/>prim.CreateAttribute(...))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>success.<sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>To call this, <ref refid="class_usd_object_1a4ba10e023e7f3f3c93131bc7fc3146b7" kindref="member">GetPrim()</ref> must return a valid prim.</para>
<para><itemizedlist>
<listitem><para>If a spec for this attribute already exists at the current edit target, do nothing.</para>
</listitem><listitem><para>If a spec for <emphasis>attrName</emphasis> of a different spec type (e.g. a relationship) exists at the current EditTarget, issue an error.</para>
</listitem><listitem><para>If <emphasis>name</emphasis> refers to a builtin attribute according to the prim&apos;s definition, author an attribute spec with required metadata from the definition.</para>
</listitem><listitem><para>If <emphasis>name</emphasis> refers to a builtin relationship, issue an error.</para>
</listitem><listitem><para>If there exists an absolute strongest authored attribute spec for <emphasis>attrName</emphasis>, author an attribute spec at the current EditTarget by copying required metadata from that strongest spec.</para>
</listitem><listitem><para>If there exists an absolute strongest authored relationship spec for <emphasis>attrName</emphasis>, issue an error.</para>
</listitem><listitem><para>Otherwise author an attribute spec at the current EditTarget using the provided <emphasis>typeName</emphasis> and <emphasis>custom</emphasis> for the required metadata fields. Note that these supplied arguments are only ever used in this particular circumstance, in all other cases they are ignored. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a806ed3a0c8ed06b56a50e2e1620b673c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateAttribute</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName, SdfVariability variability=SdfVariabilityVarying) const</argsstring>
        <name>CreateAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
          <declname>variability</declname>
          <defval>SdfVariabilityVarying</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Create a custom attribute with <computeroutput>name</computeroutput>, <computeroutput>typeName</computeroutput> and <computeroutput>variability</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab86d597d65ae87c10b14746bec306100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateAttribute</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;nameElts, const SdfValueTypeName &amp;typeName, bool custom, SdfVariability variability=SdfVariabilityVarying) const</argsstring>
        <name>CreateAttribute</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>nameElts</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
          <declname>variability</declname>
          <defval>SdfVariabilityVarying</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This overload of <ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">CreateAttribute()</ref> accepts a vector of name components used to construct a <emphasis>namespaced</emphasis> property name. </para>
        </briefdescription>
        <detaileddescription>
<para>For details, see <ref refid="_usd__page__properties_of_scene_description_1Usd_Ordering" kindref="member">Names, Namespace Ordering, and Property Namespaces</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa621763310aac738491be4534e92eac1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateAttribute</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;nameElts, const SdfValueTypeName &amp;typeName, SdfVariability variability=SdfVariabilityVarying) const</argsstring>
        <name>CreateAttribute</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>nameElts</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
          <declname>variability</declname>
          <defval>SdfVariabilityVarying</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Create a custom attribute with <computeroutput>nameElts</computeroutput>, <computeroutput>typeName</computeroutput>, and <computeroutput>variability</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdAttribute&gt; GetAttributes</definition>
        <argsstring>() const</argsstring>
        <name>GetAttributes</name>
        <briefdescription>
<para>Like <ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref>, but exclude all relationships from the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab01f748ab42efd084f0fcf7bab53f737" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdAttribute&gt; GetAuthoredAttributes</definition>
        <argsstring>() const</argsstring>
        <name>GetAuthoredAttributes</name>
        <briefdescription>
<para>Like <ref refid="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" kindref="member">GetAttributes()</ref>, but exclude attributes without authored scene description from the result. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1735" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a31225ac7165f58726f000ab1d67e9e61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetAttribute</definition>
        <argsstring>(const TfToken &amp;attrName) const</argsstring>
        <name>GetAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> with the name <emphasis>attrName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute returned may or may not <bold>actually</bold> exist so it must be checked for validity. Suggested use:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(UsdAttribute<sp/>myAttr<sp/>=<sp/>prim.GetAttribute(&quot;myAttr&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myAttr<sp/>is<sp/>safe<sp/>to<sp/>use.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Edits<sp/>to<sp/>the<sp/>owning<sp/>stage<sp/>requires<sp/>subsequent<sp/>validation.</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myAttr<sp/>was<sp/>not<sp/>defined/authored</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6092b2a26c8f94cf68eb77e45bd1f8d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAttribute</definition>
        <argsstring>(const TfToken &amp;attrName) const</argsstring>
        <name>HasAttribute</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Return true if this prim has an attribute named <computeroutput>attrName</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a70a83830cef17b3c56ea4027d6a39599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathVector</type>
        <definition>USD_API SdfPathVector FindAllAttributeConnectionPaths</definition>
        <argsstring>(Usd_PrimFlagsPredicate const &amp;traversalPredicate, std::function&lt; bool(UsdAttribute const &amp;)&gt; const &amp;pred=nullptr, bool recurseOnSources=false) const</argsstring>
        <name>FindAllAttributeConnectionPaths</name>
        <param>
          <type>Usd_PrimFlagsPredicate const &amp;</type>
          <declname>traversalPredicate</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;)&gt; const &amp;</type>
          <declname>pred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recurseOnSources</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Search the prim subtree rooted at this prim according to <computeroutput>traversalPredicate</computeroutput> for attributes for which <computeroutput>predicate</computeroutput> returns true, collect their connection source paths and return them in an arbitrary order. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>recurseOnSources</computeroutput> is true, act as if this function was invoked on the connected prims and owning prims of connected properties also and return the union. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1acb37c1cf989a633e94577b267ccc595e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathVector</type>
        <definition>USD_API SdfPathVector FindAllAttributeConnectionPaths</definition>
        <argsstring>(std::function&lt; bool(UsdAttribute const &amp;)&gt; const &amp;pred=nullptr, bool recurseOnSources=false) const</argsstring>
        <name>FindAllAttributeConnectionPaths</name>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const &amp;)&gt; const &amp;</type>
          <declname>pred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recurseOnSources</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Invoke <ref refid="class_usd_prim_1a70a83830cef17b3c56ea4027d6a39599" kindref="member">FindAllAttributeConnectionPaths()</ref> with the UsdPrimDefaultPredicate as its traversalPredicate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1775" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Relationships</header>
      <memberdef kind="function" id="class_usd_prim_1a974a14aa624890855cade1d83c9a4762" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship CreateRelationship</definition>
        <argsstring>(const TfToken &amp;relName, bool custom=true) const</argsstring>
        <name>CreateRelationship</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>relName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Author scene description for the relationship named <emphasis>relName</emphasis> at the current EditTarget if none already exists. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a valid relationship if scene description was successfully authored or if it already existed, return an invalid relationship otherwise.</para>
<para>Suggested use: <programlisting><codeline><highlight class="normal">if<sp/>(UsdRelationship<sp/>myRel<sp/>=<sp/>prim.CreateRelationship(...))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>success.<sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>To call this, <ref refid="class_usd_object_1a4ba10e023e7f3f3c93131bc7fc3146b7" kindref="member">GetPrim()</ref> must return a valid prim.</para>
<para><itemizedlist>
<listitem><para>If a spec for this relationship already exists at the current edit target, do nothing.</para>
</listitem><listitem><para>If a spec for <emphasis>relName</emphasis> of a different spec type (e.g. an attribute) exists at the current EditTarget, issue an error.</para>
</listitem><listitem><para>If <emphasis>name</emphasis> refers to a builtin relationship according to the prim&apos;s definition, author a relationship spec with required metadata from the definition.</para>
</listitem><listitem><para>If <emphasis>name</emphasis> refers to a builtin attribute, issue an error.</para>
</listitem><listitem><para>If there exists an absolute strongest authored relationship spec for <emphasis>relName</emphasis>, author a relationship spec at the current EditTarget by copying required metadata from that strongest spec.</para>
</listitem><listitem><para>If there exists an absolute strongest authored attribute spec for <emphasis>relName</emphasis>, issue an error.</para>
</listitem><listitem><para>Otherwise author a uniform relationship spec at the current EditTarget, honoring <computeroutput>custom</computeroutput> . </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa2fe844383cdc370f16169719e417070" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship CreateRelationship</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;nameElts, bool custom=true) const</argsstring>
        <name>CreateRelationship</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>nameElts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>custom</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This overload of <ref refid="class_usd_prim_1a974a14aa624890855cade1d83c9a4762" kindref="member">CreateRelationship()</ref> accepts a vector of name components used to construct a <emphasis>namespaced</emphasis> property name. </para>
        </briefdescription>
        <detaileddescription>
<para>For details, see <ref refid="_usd__page__properties_of_scene_description_1Usd_Ordering" kindref="member">Names, Namespace Ordering, and Property Namespaces</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa6202f152dc043e81b648112984e936c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdRelationship&gt; GetRelationships</definition>
        <argsstring>() const</argsstring>
        <name>GetRelationships</name>
        <briefdescription>
<para>Like <ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref>, but exclude all attributes from the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a63bc6890629e6f11c0102fe69d428da4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdRelationship&gt; GetAuthoredRelationships</definition>
        <argsstring>() const</argsstring>
        <name>GetAuthoredRelationships</name>
        <briefdescription>
<para>Like <ref refid="class_usd_prim_1aa6202f152dc043e81b648112984e936c" kindref="member">GetRelationships()</ref>, but exclude relationships without authored scene description from the result. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1839" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adb80fd32612eb6cbf4dc279908eb0bdd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship GetRelationship</definition>
        <argsstring>(const TfToken &amp;relName) const</argsstring>
        <name>GetRelationship</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>relName</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> with the name <emphasis>relName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The relationship returned may or may not <bold>actually</bold> exist so it must be checked for validity. Suggested use:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(UsdRelationship<sp/>myRel<sp/>=<sp/>prim.GetRelationship(&quot;myRel&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myRel<sp/>is<sp/>safe<sp/>to<sp/>use.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Edits<sp/>to<sp/>the<sp/>owning<sp/>stage<sp/>requires<sp/>subsequent<sp/>validation.</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myRel<sp/>was<sp/>not<sp/>defined/authored</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae87bb23a62a4a59bbe7510100d4db056" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasRelationship</definition>
        <argsstring>(const TfToken &amp;relName) const</argsstring>
        <name>HasRelationship</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>relName</declname>
        </param>
        <briefdescription>
<para>Return true if this prim has a relationship named <computeroutput>relName</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1859" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac665feb1bef08159e2bc178181e2017a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathVector</type>
        <definition>USD_API SdfPathVector FindAllRelationshipTargetPaths</definition>
        <argsstring>(Usd_PrimFlagsPredicate const &amp;traversalPredicate, std::function&lt; bool(UsdRelationship const &amp;)&gt; const &amp;pred=nullptr, bool recurseOnTargets=false) const</argsstring>
        <name>FindAllRelationshipTargetPaths</name>
        <param>
          <type>Usd_PrimFlagsPredicate const &amp;</type>
          <declname>traversalPredicate</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> const &amp;)&gt; const &amp;</type>
          <declname>pred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recurseOnTargets</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Search the prim subtree rooted at this prim according to <computeroutput>traversalPredicate</computeroutput> for relationships for which <computeroutput>predicate</computeroutput> returns true, collect their target paths and return them in an arbitrary order. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>recurseOnTargets</computeroutput> is true, act as if this function was invoked on the targeted prims and owning prims of targeted properties also (but not of forwarding relationships) and return the union. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a85cce0c5cd90a9a89fdd21edb2d599cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathVector</type>
        <definition>USD_API SdfPathVector FindAllRelationshipTargetPaths</definition>
        <argsstring>(std::function&lt; bool(UsdRelationship const &amp;)&gt; const &amp;pred=nullptr, bool recurseOnTargets=false) const</argsstring>
        <name>FindAllRelationshipTargetPaths</name>
        <param>
          <type>std::function&lt; bool(<ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> const &amp;)&gt; const &amp;</type>
          <declname>pred</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recurseOnTargets</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Invoke <ref refid="class_usd_prim_1ac665feb1bef08159e2bc178181e2017a" kindref="member">FindAllRelationshipTargetPaths()</ref> with the UsdPrimDefaultPredicate as its traversalPredicate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1879" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Payload Authoring</header>
      <description><para><xrefsect id="deprecated_1_deprecated000067"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This API is now deprecated.</para>
</xrefdescription></xrefsect>Please use the HasAuthoredPayloads and the <ref refid="class_usd_payloads" kindref="compound">UsdPayloads</ref> API returned from <ref refid="class_usd_prim_1a5c7ee160aeefae1a34c15b6150c082bb" kindref="member">GetPayloads()</ref> to query and author payloads instead. </para>
</description>
      <memberdef kind="function" id="class_usd_prim_1a28123120451e03068721d6e671e6a631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ClearPayload</definition>
        <argsstring>() const</argsstring>
        <name>ClearPayload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000068"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Clears the payload at the current EditTarget for this prim.</para>
</xrefdescription></xrefsect>Return false if the payload could not be cleared. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1896" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a040dc1a9d6b52e49a12cabf5cc01cfbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasPayload</definition>
        <argsstring>() const</argsstring>
        <name>HasPayload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000069"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Return true if a payload is present on this prim.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="_usd__page__best_practices_1Usd_Payloads" kindref="member">Payloads: Impact of Using and Not Using</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a21e64ff18384c447fd1533bfdf01b4f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetPayload</definition>
        <argsstring>(const SdfPayload &amp;payload) const</argsstring>
        <name>SetPayload</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000070"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Author payload metadata for this prim at the current edit target.</para>
</xrefdescription></xrefsect>Return true on success, false if the value could not be set.</para>
<para><simplesect kind="see"><para><ref refid="_usd__page__best_practices_1Usd_Payloads" kindref="member">Payloads: Impact of Using and Not Using</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1911" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab1f49e6d192a891640971d8087527678" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetPayload</definition>
        <argsstring>(const std::string &amp;assetPath, const SdfPath &amp;primPath) const</argsstring>
        <name>SetPayload</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000071"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Shorthand for SetPayload(SdfPayload(assetPath, primPath)).</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a7228f10d9bf6e9a7a879432269468002" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetPayload</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfPath &amp;primPath) const</argsstring>
        <name>SetPayload</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000072"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Shorthand for SetPayload(<ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref>(layer-&gt;GetIdentifier(), primPath)).</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1923" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Payloads, Load and Unload</header>
      <memberdef kind="function" id="class_usd_prim_1a5c7ee160aeefae1a34c15b6150c082bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_payloads" kindref="compound">UsdPayloads</ref></type>
        <definition>USD_API UsdPayloads GetPayloads</definition>
        <argsstring>() const</argsstring>
        <name>GetPayloads</name>
        <briefdescription>
<para>Return a <ref refid="class_usd_payloads" kindref="compound">UsdPayloads</ref> object that allows one to add, remove, or mutate payloads <emphasis>at the currently set <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>While the <ref refid="class_usd_payloads" kindref="compound">UsdPayloads</ref> object has no methods for <emphasis>listing</emphasis> the currently authored payloads on a prim, one can use a <ref refid="class_usd_prim_composition_query" kindref="compound">UsdPrimCompositionQuery</ref> to query the payload arcs that are composed by this prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1939" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a95ef4d654cdd737680463ff655852f82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredPayloads</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredPayloads</name>
        <briefdescription>
<para>Return true if this prim has any authored payloads. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac9116ef1816249c339317e9a585f7a6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Load</definition>
        <argsstring>(UsdLoadPolicy policy=UsdLoadWithDescendants) const</argsstring>
        <name>Load</name>
        <param>
          <type><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5a" kindref="member">UsdLoadPolicy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="common_8h_1aeeb09bb9e2bd68b2622a29dc649c8d5aa42997d996674df3a923bbe2683fea7fb" kindref="member">UsdLoadWithDescendants</ref></defval>
        </param>
        <briefdescription>
<para>Load this prim, all its ancestors, and by default all its descendants. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>loadPolicy</computeroutput> is UsdLoadWithoutDescendants, then load only this prim and its ancestors.</para>
<para>See <ref refid="class_usd_stage_1aece3d46e8cff565af399bfda419964e7" kindref="member">UsdStage::Load</ref> for additional details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1951" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a56f09f3593e84c5d4d308286e50a6392" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Unload</definition>
        <argsstring>() const</argsstring>
        <name>Unload</name>
        <briefdescription>
<para>Unloads this prim and all its descendants. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_stage_1aedb4cb8d8943a759152b70f08e340a2c" kindref="member">UsdStage::Unload</ref> for additional details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1957" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>References</header>
      <memberdef kind="function" id="class_usd_prim_1ac9081d27e9d2a1058e32249fb96aaa34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_references" kindref="compound">UsdReferences</ref></type>
        <definition>USD_API UsdReferences GetReferences</definition>
        <argsstring>() const</argsstring>
        <name>GetReferences</name>
        <briefdescription>
<para>Return a <ref refid="class_usd_references" kindref="compound">UsdReferences</ref> object that allows one to add, remove, or mutate references <emphasis>at the currently set <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>While the <ref refid="class_usd_references" kindref="compound">UsdReferences</ref> object has no methods for <emphasis>listing</emphasis> the currently authored references on a prim, one can use a <ref refid="class_usd_prim_composition_query" kindref="compound">UsdPrimCompositionQuery</ref> to query the reference arcs that are composed by this prim.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_composition_query_1aac5bcdfe053324fd155cdd3881c88a34" kindref="member">UsdPrimCompositionQuery::GetDirectReferences</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1973" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa0fccfa8055d7725bd0c1be63c02bbe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredReferences</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredReferences</name>
        <briefdescription>
<para>Return true if this prim has any authored references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1977" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inherits</header>
      <memberdef kind="function" id="class_usd_prim_1a4ce3a65e44e0600777803c7c5e44aed0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_inherits" kindref="compound">UsdInherits</ref></type>
        <definition>USD_API UsdInherits GetInherits</definition>
        <argsstring>() const</argsstring>
        <name>GetInherits</name>
        <briefdescription>
<para>Return a <ref refid="class_usd_inherits" kindref="compound">UsdInherits</ref> object that allows one to add, remove, or mutate inherits <emphasis>at the currently set <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>While the <ref refid="class_usd_inherits" kindref="compound">UsdInherits</ref> object has no methods for <emphasis>listing</emphasis> the currently authored inherits on a prim, one can use a <ref refid="class_usd_prim_composition_query" kindref="compound">UsdPrimCompositionQuery</ref> to query the inherits arcs that are composed by this prim.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_composition_query_1a45bf7d449ff8c73c1a7606afddbcc8fa" kindref="member">UsdPrimCompositionQuery::GetDirectInherits</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a3130876f45c15b16f80063c124865553" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredInherits</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredInherits</name>
        <briefdescription>
<para>Return true if this prim has any authored inherits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1997" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Specializes</header>
      <memberdef kind="function" id="class_usd_prim_1a2599f893dfc5ec4ef2616f4a2d156231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_specializes" kindref="compound">UsdSpecializes</ref></type>
        <definition>USD_API UsdSpecializes GetSpecializes</definition>
        <argsstring>() const</argsstring>
        <name>GetSpecializes</name>
        <briefdescription>
<para>Return a <ref refid="class_usd_specializes" kindref="compound">UsdSpecializes</ref> object that allows one to add, remove, or mutate specializes <emphasis>at the currently set <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>While the <ref refid="class_usd_specializes" kindref="compound">UsdSpecializes</ref> object has no methods for <emphasis>listing</emphasis> the currently authored specializes on a prim, one can use a <ref refid="class_usd_prim_composition_query" kindref="compound">UsdPrimCompositionQuery</ref> to query the specializes arcs that are composed by this prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a261cc5c6161bc73dc1205014f54487a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasAuthoredSpecializes</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredSpecializes</name>
        <briefdescription>
<para>Returns true if this prim has any authored specializes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2015" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instancing</header>
      <description><para>See <ref refid="_usd__page__scenegraph_instancing" kindref="compound">Scenegraph Instancing</ref> for more details. </para>
</description>
      <memberdef kind="function" id="class_usd_prim_1a23c126962c1286467293e1544e3c3ddb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInstanceable</definition>
        <argsstring>() const</argsstring>
        <name>IsInstanceable</name>
        <briefdescription>
<para>Return true if this prim has been marked as instanceable. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this is not the same as <ref refid="class_usd_prim_1a802acbcafc0625377d483931ec4fb202" kindref="member">IsInstance()</ref>. A prim may return true for <ref refid="class_usd_prim_1a23c126962c1286467293e1544e3c3ddb" kindref="member">IsInstanceable()</ref> and false for <ref refid="class_usd_prim_1a802acbcafc0625377d483931ec4fb202" kindref="member">IsInstance()</ref> if this prim is not active or if it is marked as instanceable but contains no instanceable data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2029" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2029" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ad791f3246d4e5bf72e036df7495ec94d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetInstanceable</definition>
        <argsstring>(bool instanceable) const</argsstring>
        <name>SetInstanceable</name>
        <param>
          <type>bool</type>
          <declname>instanceable</declname>
        </param>
        <briefdescription>
<para>Author &apos;instanceable&apos; metadata for this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2037" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2037" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ada561adb0aa6b61cd4abc53ef656527a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ClearInstanceable</definition>
        <argsstring>() const</argsstring>
        <name>ClearInstanceable</name>
        <briefdescription>
<para>Remove the authored &apos;instanceable&apos; opinion at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>Do nothing if there is no authored opinion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2043" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2043" bodyend="2045"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a3373796874acd1eafd43cdd71475473d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasAuthoredInstanceable</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredInstanceable</name>
        <briefdescription>
<para>Return true if this prim has an authored opinion for &apos;instanceable&apos;, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2049" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2049" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a802acbcafc0625377d483931ec4fb202" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInstance</definition>
        <argsstring>() const</argsstring>
        <name>IsInstance</name>
        <briefdescription>
<para>Return true if this prim is an instance of a prototype, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If this prim is an instance, calling <ref refid="class_usd_prim_1a5589fb9930ddf2f0ee87f9e6cde87dff" kindref="member">GetPrototype()</ref> will return the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> for the corresponding prototype prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2058" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2058" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a19314db3dee9cd6f5d2f6198a75acafd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInstanceProxy</definition>
        <argsstring>() const</argsstring>
        <name>IsInstanceProxy</name>
        <briefdescription>
<para>Return true if this prim is an instance proxy, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>An instance proxy prim represents a descendent of an instance prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2063" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2063" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a68b802c9624512af6a71de788a8d8861" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsPrototype</definition>
        <argsstring>() const</argsstring>
        <name>IsPrototype</name>
        <briefdescription>
<para>Return true if this prim is an instancing prototype prim, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a711679d7f780d1160d0b33a1e2f92268" kindref="member">IsInPrototype</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2088" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2088" bodyend="2088"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a711679d7f780d1160d0b33a1e2f92268" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInPrototype</definition>
        <argsstring>() const</argsstring>
        <name>IsInPrototype</name>
        <briefdescription>
<para>Return true if this prim is a prototype prim or a descendant of a prototype prim, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a68b802c9624512af6a71de788a8d8861" kindref="member">IsPrototype</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2094" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2094" bodyend="2097"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a5589fb9930ddf2f0ee87f9e6cde87dff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>USD_API UsdPrim GetPrototype</definition>
        <argsstring>() const</argsstring>
        <name>GetPrototype</name>
        <briefdescription>
<para>If this prim is an instance, return the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> for the corresponding prototype. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0e9828de073a9b6ca1b9cda91eb74cd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim GetPrimInPrototype</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimInPrototype</name>
        <briefdescription>
<para>If this prim is an instance proxy, return the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> for the corresponding prim in the instance&apos;s prototype. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, return an invalid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2107" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2107" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2efe317839e2ca127ab26887d4cb0a99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdPrim&gt; GetInstances</definition>
        <argsstring>() const</argsstring>
        <name>GetInstances</name>
        <briefdescription>
<para>If this prim is a prototype prim, returns all prims that are instances of this prototype. </para>
        </briefdescription>
        <detaileddescription>
<para>Otherwise, returns an empty vector.</para>
<para>Note that this function will return prims in prototypes for instances that are nested beneath other instances. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a72d1ab0931d0ea59a98d6a4f99793269" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool IsPrototypePath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsPrototypePath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if the given <computeroutput>path</computeroutput> identifies a prototype prim, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will return false for prim and property paths that are descendants of a prototype prim path.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1abc7b7b91de5d1bc0f0850e3e4d9f96a0" kindref="member">IsPathInPrototype</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1abc7b7b91de5d1bc0f0850e3e4d9f96a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool IsPathInPrototype</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsPathInPrototype</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if the given <computeroutput>path</computeroutput> identifies a prototype prim or a prim or property descendant of a prototype prim, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a72d1ab0931d0ea59a98d6a4f99793269" kindref="member">IsPrototypePath</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2082" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Composition Structure</header>
      <memberdef kind="function" id="class_usd_prim_1ae6ae4259af3ac06b8a9898a787202a32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
        <definition>const PcpPrimIndex&amp; GetPrimIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimIndex</name>
        <briefdescription>
<para>Return the cached prim index containing all sites that can contribute opinions to this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The prim index can be used to examine the composition arcs and scene description sites that can contribute to this prim&apos;s property and metadata values.</para>
<para>The prim index returned by this function is optimized and may not include sites that do not contribute opinions to this prim. Use <ref refid="class_usd_prim_1ad642cd45c3326bb0a75c209fcb0ec9eb" kindref="member">UsdPrim::ComputeExpandedPrimIndex</ref> to compute a prim index that includes all possible sites that could contribute opinions.</para>
<para>This prim index will be empty for prototype prims. This ensures that these prims do not provide any attribute or metadata values. For all other prims in prototypes, this is the prim index that was chosen to be shared with all other instances. In either case, the prim index&apos;s path will not be the same as the prim&apos;s path.</para>
<para>Prim indexes may be invalidated by changes to the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> and cannot detect if they are expired. Clients should avoid keeping copies of the prim index across such changes, which include scene description changes or changes to load state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2150" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2150" bodyend="2150"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ad642cd45c3326bb0a75c209fcb0ec9eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref></type>
        <definition>USD_API PcpPrimIndex ComputeExpandedPrimIndex</definition>
        <argsstring>() const</argsstring>
        <name>ComputeExpandedPrimIndex</name>
        <briefdescription>
<para>Compute the prim index containing all sites that could contribute opinions to this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is similar to <ref refid="class_usd_prim_1ae6ae4259af3ac06b8a9898a787202a32" kindref="member">UsdPrim::GetPrimIndex</ref>. However, the returned prim index includes all sites that could possibly contribute opinions to this prim, not just the sites that currently do so. This is useful in certain situations; for example, this could be used to generate a list of sites where clients could make edits to affect this prim, or for debugging purposes.</para>
<para>For all prims in prototypes, including the prototype prim itself, this is the expanded version of the prim index that was chosen to be shared with all other instances. Thus, the prim index&apos;s path will not be the same as the prim&apos;s path. Note that this behavior deviates slightly from <ref refid="class_usd_prim_1ae6ae4259af3ac06b8a9898a787202a32" kindref="member">UsdPrim::GetPrimIndex</ref> which always returns an empty prim index for the prototype prim itself.</para>
<para>This function may be relatively slow, since it will recompute the prim index on every call. Clients should prefer <ref refid="class_usd_prim_1ae6ae4259af3ac06b8a9898a787202a32" kindref="member">UsdPrim::GetPrimIndex</ref> unless the additional site information is truly needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a01d0912bb2e4435f60c7c9b737f3fd8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref></type>
        <definition>USD_API UsdResolveTarget MakeResolveTargetUpToEditTarget</definition>
        <argsstring>(const UsdEditTarget &amp;editTarget) const</argsstring>
        <name>MakeResolveTargetUpToEditTarget</name>
        <param>
          <type>const <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> &amp;</type>
          <declname>editTarget</declname>
        </param>
        <briefdescription>
<para>Creates and returns a resolve target that, when passed to a <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> for one of this prim&apos;s attributes, causes value resolution to only consider weaker specs up to and including the spec that would be authored for this prim when using the given <computeroutput>editTarget</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the edit target would not affect any specs that could contribute to this prim, a null resolve target is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2b2770602392511cb2abe7b63a2934d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref></type>
        <definition>USD_API UsdResolveTarget MakeResolveTargetStrongerThanEditTarget</definition>
        <argsstring>(const UsdEditTarget &amp;editTarget) const</argsstring>
        <name>MakeResolveTargetStrongerThanEditTarget</name>
        <param>
          <type>const <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> &amp;</type>
          <declname>editTarget</declname>
        </param>
        <briefdescription>
<para>Creates and returns a resolve target that, when passed to a <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> for one of this prim&apos;s attributes, causes value resolution to only consider specs that are stronger than the spec that would be authored for this prim when using the given <computeroutput>editTarget</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the edit target would not affect any specs that could contribute to this prim, a null resolve target is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2194" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usd_prim_1ab47c9c7539e4e3e4fb3a3c2d32548a94" prot="public" static="no">
        <type><ref refid="class_usd_prim_sibling_iterator" kindref="compound">UsdPrimSiblingIterator</ref></type>
        <definition>typedef UsdPrimSiblingIterator SiblingIterator</definition>
        <argsstring></argsstring>
        <name>SiblingIterator</name>
        <briefdescription>
<para>Convenience typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="137" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_prim_1a3e6cdfd47e66625bcf84395eb5a91eda" prot="public" static="no">
        <type><ref refid="class_usd_prim_sibling_range" kindref="compound">UsdPrimSiblingRange</ref></type>
        <definition>typedef UsdPrimSiblingRange SiblingRange</definition>
        <argsstring></argsstring>
        <name>SiblingRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="138" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_prim_1a6f1b94aa40c55f7fa9a4fec387a3ee6b" prot="public" static="no">
        <type><ref refid="class_usd_prim_subtree_iterator" kindref="compound">UsdPrimSubtreeIterator</ref></type>
        <definition>typedef UsdPrimSubtreeIterator SubtreeIterator</definition>
        <argsstring></argsstring>
        <name>SubtreeIterator</name>
        <briefdescription>
<para>Convenience typedefs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="141" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_prim_1ab3110cff3c27c376acce171abda7d2b1" prot="public" static="no">
        <type><ref refid="class_usd_prim_subtree_range" kindref="compound">UsdPrimSubtreeRange</ref></type>
        <definition>typedef UsdPrimSubtreeRange SubtreeRange</definition>
        <argsstring></argsstring>
        <name>SubtreeRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="142" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" prot="public" static="no">
        <type>std::function&lt; bool(const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;propertyName)&gt;</type>
        <definition>using PropertyPredicateFunc =  std::function&lt;bool (const TfToken &amp;propertyName)&gt;</definition>
        <argsstring></argsstring>
        <name>PropertyPredicateFunc</name>
        <briefdescription>
<para>Alias for the &quot;predicate&quot; function parameter passed into the various Get{Authored}{PropertyNames,Properties} methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="320" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_prim_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdObject</definition>
        <argsstring></argsstring>
        <name>UsdObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2209" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1a0e1e37aafb4708ed5a43323f6a82e085" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrimSiblingIterator</definition>
        <argsstring></argsstring>
        <name>UsdPrimSiblingIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2210" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1acf8bb069206cefac1afef447eef4a14e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrimSubtreeIterator</definition>
        <argsstring></argsstring>
        <name>UsdPrimSubtreeIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2211" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1a7843eb26c70fa29eb383201c78ef69c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdProperty</definition>
        <argsstring></argsstring>
        <name>UsdProperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2212" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1ad62730bb9bc2e7bab49b4a5c64a2c249" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaBase</definition>
        <argsstring></argsstring>
        <name>UsdSchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2213" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1aec2b7ca1194f894ff2b952906abfd86c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdAPISchemaBase</definition>
        <argsstring></argsstring>
        <name>UsdAPISchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2214" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdStage</definition>
        <argsstring></argsstring>
        <name>UsdStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2215" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1a1c2b2023172d5db277fe2520e2513823" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrimRange</definition>
        <argsstring></argsstring>
        <name>UsdPrimRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2217" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1a20aa97c2bdada63f2d1f375ad319c392" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct UsdPrim_RelTargetFinder</definition>
        <argsstring></argsstring>
        <name>UsdPrim_RelTargetFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2220" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_prim_1a33c96f0e87ad959b22e24912e63a33e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct UsdPrim_AttrConnectionFinder</definition>
        <argsstring></argsstring>
        <name>UsdPrim_AttrConnectionFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2221" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_prim_1a22a88436566e4dc4c99186c8175538eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrim</definition>
        <argsstring>()</argsstring>
        <name>UsdPrim</name>
        <briefdescription>
<para>Construct an invalid prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="145" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab99c37ba85f4c45d558138ca3b604ec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_usd_prim_type_info" kindref="compound">UsdPrimTypeInfo</ref> &amp;</type>
        <definition>const UsdPrimTypeInfo&amp; GetPrimTypeInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimTypeInfo</name>
        <briefdescription>
<para>Return the prim&apos;s full type info composed from its type name, applied API schemas, and any fallback types defined on the stage for unrecognized prim type names. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned type structure contains the &quot;true&quot; schema type used to create this prim&apos;s prim definition and answer the IsA query. This value is cached and efficient to query. The cached values are guaranteed to exist for (at least) as long as the prim&apos;s stage is open. <simplesect kind="see"><para><ref refid="class_usd_prim_1a8cc8a084710338ce2de6eeba7872c194" kindref="member">GetTypeName</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">GetAppliedSchemas</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="_usd__page__object_model_1Usd_OM_FallbackPrimTypes" kindref="member">Fallback Prim Types</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="157" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a422bac96f602aa9983a203d86d48fd6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_usd_prim_definition" kindref="compound">UsdPrimDefinition</ref> &amp;</type>
        <definition>const UsdPrimDefinition&amp; GetPrimDefinition</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimDefinition</name>
        <briefdescription>
<para>Return this prim&apos;s definition based on the prim&apos;s type if the type is a registered prim type. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty prim definition if it is not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="164" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a360d76f1bfb5e7f7171f763a1d9a9124" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="usd_2sdf_2types_8h_1a18e79a065a46596da11ad51b2c85cad7" kindref="member">SdfSpecifier</ref></type>
        <definition>SdfSpecifier GetSpecifier</definition>
        <argsstring>() const</argsstring>
        <name>GetSpecifier</name>
        <briefdescription>
<para>Return this prim&apos;s composed specifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="169" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a813fc6b56b3e692d9b66ce72033ae620" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPrimSpecHandleVector</type>
        <definition>USD_API SdfPrimSpecHandleVector GetPrimStack</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimStack</name>
        <briefdescription>
<para>Return all the authored SdfPrimSpecs that may contain opinions for this prim in order from strong to weak. </para>
        </briefdescription>
        <detaileddescription>
<para>This does not include all the places where contributing prim specs could potentially be created; rather, it includes only those prim specs that already exist. To discover all the places that prim specs could be authored that would contribute opinions, see &quot;Composition Structure&quot;</para>
<para><simplesect kind="note"><para>Use this method for debugging and diagnostic purposes. It is <bold>not</bold> advisable to retain a PrimStack for expedited metadata value resolution, since not all metadata resolves with simple &quot;strongest
opinion wins&quot; semantics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0bc1a051ef7ca57f7a12fe4e469d36c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; std::pair&lt; SdfPrimSpecHandle, <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &gt; &gt;</type>
        <definition>USD_API std::vector&lt;std::pair&lt;SdfPrimSpecHandle, SdfLayerOffset&gt; &gt; GetPrimStackWithLayerOffsets</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimStackWithLayerOffsets</name>
        <briefdescription>
<para>Return all the authored SdfPrimSpecs that may contain opinions for this prim in order from strong to weak paired with the cumulative layer offset from the stage&apos;s root layer to the layer containing the prim spec. </para>
        </briefdescription>
        <detaileddescription>
<para>This behaves exactly the same as <ref refid="class_usd_prim_1a813fc6b56b3e692d9b66ce72033ae620" kindref="member">UsdPrim::GetPrimStack</ref> with the addition of providing the cumulative layer offset of each spec&apos;s layer.</para>
<para><simplesect kind="note"><para>Use this method for debugging and diagnostic purposes. It is <bold>not</bold> advisable to retain a PrimStack for expedited metadata value resolution, since not all metadata resolves with simple &quot;strongest
opinion wins&quot; semantics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab074e74153884ebaa3912cc4cb102a08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetSpecifier</definition>
        <argsstring>(SdfSpecifier specifier) const</argsstring>
        <name>SetSpecifier</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a18e79a065a46596da11ad51b2c85cad7" kindref="member">SdfSpecifier</ref></type>
          <declname>specifier</declname>
        </param>
        <briefdescription>
<para>Author an opinion for this Prim&apos;s specifier at the current edit target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="205" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a8cc8a084710338ce2de6eeba7872c194" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>const TfToken&amp; GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
<para>Return this prim&apos;s composed type name. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is cached and is efficient to query. Note that this is just the composed type name as authored and may not represent the full type of the prim and its prim definition. If you need to reason about the actual type of the prim, use GetPrimTypeInfo instead as it accounts for recognized schemas, applied API schemas, fallback types, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="216" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a30fe982862e8344e21a8a7cd90c955f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetTypeName</definition>
        <argsstring>(const TfToken &amp;typeName) const</argsstring>
        <name>SetTypeName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Author this Prim&apos;s typeName at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="219" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afefd37e76168e00b4a0a8d929d557a71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ClearTypeName</definition>
        <argsstring>() const</argsstring>
        <name>ClearTypeName</name>
        <briefdescription>
<para>Clear the opinion for this Prim&apos;s typeName at the current edit target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="225" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae8dab735a0e5b35ec34b4c165edeb648" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasAuthoredTypeName</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredTypeName</name>
        <briefdescription>
<para>Return true if a typeName has been authored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="230" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab5505aed5c05749ab3f37822c58ded04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsActive</definition>
        <argsstring>() const</argsstring>
        <name>IsActive</name>
        <briefdescription>
<para>Return true if this prim is active, meaning neither it nor any of its ancestors have active=false. </para>
        </briefdescription>
        <detaileddescription>
<para>Return false otherwise.</para>
<para>See <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">How &quot;active&quot; Affects Prims on a UsdStage</ref> for what it means for a prim to be active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="238" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac156eed30c42c013c4a4debf580ce17f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetActive</definition>
        <argsstring>(bool active) const</argsstring>
        <name>SetActive</name>
        <param>
          <type>bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
<para>Author &apos;active&apos; metadata for this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">How &quot;active&quot; Affects Prims on a UsdStage</ref> for the effects of activating or deactivating a prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="244" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a3e368f3bfcc6a7a151e2bccab9db2125" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ClearActive</definition>
        <argsstring>() const</argsstring>
        <name>ClearActive</name>
        <briefdescription>
<para>Remove the authored &apos;active&apos; opinion at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
<para>Do nothing if there is no authored opinion.</para>
<para>See <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">How &quot;active&quot; Affects Prims on a UsdStage</ref> for the effects of activating or deactivating a prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="253" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a86ccb59ff027768628300b60054cfd49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasAuthoredActive</definition>
        <argsstring>() const</argsstring>
        <name>HasAuthoredActive</name>
        <briefdescription>
<para>Return true if this prim has an authored opinion for &apos;active&apos;, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="_usd__page__properties_of_scene_description_1Usd_ActiveInactive" kindref="member">How &quot;active&quot; Affects Prims on a UsdStage</ref> for what it means for a prim to be active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="261" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a68da43ab74366f539af8c1e6fc018d29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLoaded</definition>
        <argsstring>() const</argsstring>
        <name>IsLoaded</name>
        <briefdescription>
<para>Return true if this prim is active, and <emphasis>either</emphasis> it is loadable and it is loaded, <emphasis>or</emphasis> its nearest loadable ancestor is loaded, <emphasis>or</emphasis> it has no loadable ancestor; false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="268" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ad93a1d74f88e0a32113df97b3358e9d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsModel</definition>
        <argsstring>() const</argsstring>
        <name>IsModel</name>
        <briefdescription>
<para>Return true if this prim is a model based on its kind metadata, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="272" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ad534b1a75ec6ebe6cb3d5883d683ec93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsGroup</definition>
        <argsstring>() const</argsstring>
        <name>IsGroup</name>
        <briefdescription>
<para>Return true if this prim is a model group based on its kind metadata, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If this prim is a group, it is also necessarily a model.</para>
<para>Note that pseudoroot is always a group (in order to respect model hierarchy rules), even though it cannot have a kind. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="280" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ab291359d4bdcbe69286f27481602677b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsComponent</definition>
        <argsstring>() const</argsstring>
        <name>IsComponent</name>
        <briefdescription>
<para>Return true if this prim is a component model based on its kind metadata, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>If this prim is a component, it is also necessarily a model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="285" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a552b66851fd5a6898de3e67ec42b7c00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IsSubComponent</definition>
        <argsstring>() const</argsstring>
        <name>IsSubComponent</name>
        <briefdescription>
<para>Return true if this prim is a subcomponent based on its kind metadata, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that subcomponent query is not cached because we only cache model-hierarchy-related information, and therefore will be considerably slower than other kind-based queries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="294" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afcaf9f166343aca6a5b6cf5764947720" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsAbstract</definition>
        <argsstring>() const</argsstring>
        <name>IsAbstract</name>
        <briefdescription>
<para>Return true if this prim or any of its ancestors is a class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="297" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsDefined</definition>
        <argsstring>() const</argsstring>
        <name>IsDefined</name>
        <briefdescription>
<para>Return true if this prim and all its ancestors have defining specifiers, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="usd_2sdf_2types_8h_1ae41037b49f4600b43c4192052fd680dc" kindref="member">SdfIsDefiningSpecifier</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="301" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac2892c215adfd6fcc383e74d1f32e288" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasDefiningSpecifier</definition>
        <argsstring>() const</argsstring>
        <name>HasDefiningSpecifier</name>
        <briefdescription>
<para>Return true if this prim has a specifier of type SdfSpecifierDef or SdfSpecifierClass. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="usd_2sdf_2types_8h_1ae41037b49f4600b43c4192052fd680dc" kindref="member">SdfIsDefiningSpecifier</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="305" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetAppliedSchemas</definition>
        <argsstring>() const</argsstring>
        <name>GetAppliedSchemas</name>
        <briefdescription>
<para>Return a vector containing the names of API schemas which have been applied to this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes both the authored API schemas applied using the Apply() method on the particular schema class as well as any built-in API schemas that are automatically included through the prim type&apos;s prim definition. To get only the authored API schemas use GetPrimTypeInfo instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a24377e6ababf44be9534a68046ebb7b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetPropertyNames</definition>
        <argsstring>(const PropertyPredicateFunc &amp;predicate={}) const</argsstring>
        <name>GetPropertyNames</name>
        <param>
          <type>const <ref refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" kindref="member">PropertyPredicateFunc</ref> &amp;</type>
          <declname>predicate</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Return all of this prim&apos;s property names (attributes and relationships), including all builtin properties. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid <computeroutput>predicate</computeroutput> is passed in, then only properties whose names pass the predicate are included in the result. This is useful if the client is interested only in a subset of properties on the prim. For example, only the ones in a given namespace or only the ones needed to compute a value.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a1fd5082f3b95bb9aaadd6003250943a4" kindref="member">GetAuthoredPropertyNames()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a1fd5082f3b95bb9aaadd6003250943a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetAuthoredPropertyNames</definition>
        <argsstring>(const PropertyPredicateFunc &amp;predicate={}) const</argsstring>
        <name>GetAuthoredPropertyNames</name>
        <param>
          <type>const <ref refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" kindref="member">PropertyPredicateFunc</ref> &amp;</type>
          <declname>predicate</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Return this prim&apos;s property names (attributes and relationships) that have authored scene description, ordered according to the strongest propertyOrder statement in scene description if one exists, otherwise ordered according to <ref refid="struct_tf_dictionary_less_than" kindref="compound">TfDictionaryLessThan</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid <computeroutput>predicate</computeroutput> is passed in, then only the authored properties whose names pass the predicate are included in the result. This is useful if the client is interested only in a subset of authored properties on the prim. For example, only the ones in a given namespace or only the ones needed to compute a value.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a24377e6ababf44be9534a68046ebb7b8" kindref="member">GetPropertyNames()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetProperties</definition>
        <argsstring>(const PropertyPredicateFunc &amp;predicate={}) const</argsstring>
        <name>GetProperties</name>
        <param>
          <type>const <ref refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" kindref="member">PropertyPredicateFunc</ref> &amp;</type>
          <declname>predicate</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Return all of this prim&apos;s properties (attributes and relationships), including all builtin properties, ordered by name according to the strongest propertyOrder statement in scene description if one exists, otherwise ordered according to <ref refid="struct_tf_dictionary_less_than" kindref="compound">TfDictionaryLessThan</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid <computeroutput>predicate</computeroutput> is passed in, then only properties whose names</para>
<para>pass the predicate are included in the result. This is useful if the client is interested only in a subset of properties on the prim. For example, only the ones in a given namespace or only the ones needed to compute a value.</para>
<para>To obtain only either attributes or relationships, use either <ref refid="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" kindref="member">GetAttributes()</ref> or <ref refid="class_usd_prim_1aa6202f152dc043e81b648112984e936c" kindref="member">GetRelationships()</ref>.</para>
<para>To determine whether a property is either an attribute or a relationship, use the <ref refid="class_usd_object_1aaca099fe79c1bbdd2216e7cb583952a9" kindref="member">UsdObject::As()</ref> and <ref refid="class_usd_object_1a7152c172b8551a1e222bf446ce7689fd" kindref="member">UsdObject::Is()</ref> methods in C++:</para>
<para><programlisting><codeline><highlight class="normal">//<sp/>Use<sp/>As&lt;&gt;()<sp/>to<sp/>obtain<sp/>a<sp/>subclass<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(UsdAttribute<sp/>attr<sp/>=<sp/>property.As&lt;UsdAttribute&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>use<sp/>attribute<sp/>&apos;attr&apos;.</highlight></codeline>
<codeline><highlight class="normal">else<sp/>if<sp/>(UsdRelationship<sp/>rel<sp/>=<sp/>property.As&lt;UsdRelationship&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>use<sp/>relationship<sp/>&apos;rel&apos;.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>Is&lt;&gt;()<sp/>to<sp/>discriminate<sp/>only.</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(property.Is&lt;UsdAttribute&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>property<sp/>is<sp/>an<sp/>attribute.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>In Python, use the standard isinstance() function:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>isinstance(property,<sp/>Usd.Attribute):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>property<sp/>is<sp/>a<sp/>Usd.Attribute.</highlight></codeline>
<codeline><highlight class="normal">elif<sp/>isinstance(property,<sp/>Usd.Relationship):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>property<sp/>is<sp/>a<sp/>Usd.Relationship.</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1abe621d0d8108591b2535b54c5fecc234" kindref="member">GetAuthoredProperties()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1abe621d0d8108591b2535b54c5fecc234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetAuthoredProperties</definition>
        <argsstring>(const PropertyPredicateFunc &amp;predicate={}) const</argsstring>
        <name>GetAuthoredProperties</name>
        <param>
          <type>const <ref refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" kindref="member">PropertyPredicateFunc</ref> &amp;</type>
          <declname>predicate</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Return this prim&apos;s properties (attributes and relationships) that have authored scene description, ordered by name according to the strongest propertyOrder statement in scene description if one exists, otherwise ordered according to <ref refid="struct_tf_dictionary_less_than" kindref="compound">TfDictionaryLessThan</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid <computeroutput>predicate</computeroutput> is passed in, then only authored properties whose names pass the predicate are included in the result. This is useful if the client is interested only in a subset of authored properties on the prim. For example, only the ones in a given namespace or only the ones needed to compute a value.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac30eb1456177265b39f8412a7cb8ae53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetPropertiesInNamespace</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;namespaces) const</argsstring>
        <name>GetPropertiesInNamespace</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>namespaces</declname>
        </param>
        <briefdescription>
<para>Return this prim&apos;s properties that are inside the given property namespace ordered according to the strongest propertyOrder statement in scene description if one exists, otherwise ordered according to <ref refid="struct_tf_dictionary_less_than" kindref="compound">TfDictionaryLessThan</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>A <computeroutput>namespaces</computeroutput> argument whose elements are [&quot;ri&quot;, &quot;attribute&quot;] will return all the properties under the namespace &quot;ri:attribute&quot;, i.e. &quot;ri:attribute:*&quot;. An empty <computeroutput>namespaces</computeroutput> argument is equivalent to <ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref>.</para>
<para>For details of namespaced properties, see <ref refid="_usd__page__properties_of_scene_description_1Usd_Ordering" kindref="member">Names, Namespace Ordering, and Property Namespaces</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6c8f1516b2faf47d3f577ac4d9bbc237" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetPropertiesInNamespace</definition>
        <argsstring>(const std::string &amp;namespaces) const</argsstring>
        <name>GetPropertiesInNamespace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespaces</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <computeroutput>namespaces</computeroutput> must be an already-concatenated ordered set of namespaces, and may or may not terminate with the namespace-separator character. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>namespaces</computeroutput> is empty, this method is equivalent to <ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ad3bb36d082eb390500730fb498c237f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetAuthoredPropertiesInNamespace</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;namespaces) const</argsstring>
        <name>GetAuthoredPropertiesInNamespace</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>namespaces</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="class_usd_prim_1ac30eb1456177265b39f8412a7cb8ae53" kindref="member">GetPropertiesInNamespace()</ref>, but exclude properties that do not have authored scene description from the result. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_property_1ac8f562e95497111de63cedca83a3bfd4" kindref="member">UsdProperty::IsAuthored()</ref>.</para>
<para>For details of namespaced properties, see <ref refid="_usd__page__properties_of_scene_description_1Usd_Ordering" kindref="member">Names, Namespace Ordering, and Property Namespaces</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ae1d867f2b08b8c36971b50ad5b6e6be7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>USD_API std::vector&lt;UsdProperty&gt; GetAuthoredPropertiesInNamespace</definition>
        <argsstring>(const std::string &amp;namespaces) const</argsstring>
        <name>GetAuthoredPropertiesInNamespace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespaces</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. <computeroutput>namespaces</computeroutput> must be an already-concatenated ordered set of namespaces, and may or may not terminate with the namespace-separator character. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>namespaces</computeroutput> is empty, this method is equivalent to <ref refid="class_usd_prim_1abe621d0d8108591b2535b54c5fecc234" kindref="member">GetAuthoredProperties()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aab0e1b744dac924c02abd6416321ee9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetPropertyOrder</definition>
        <argsstring>() const</argsstring>
        <name>GetPropertyOrder</name>
        <briefdescription>
<para>Return the strongest propertyOrder metadata value authored on this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a7285692cfe69b46e890ec25756d02c37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPropertyOrder</definition>
        <argsstring>(const TfTokenVector &amp;order) const</argsstring>
        <name>SetPropertyOrder</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Author an opinion for propertyOrder metadata on this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="467" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="467" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a5ecea75ae52371bbd93151a0147f02e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ClearPropertyOrder</definition>
        <argsstring>() const</argsstring>
        <name>ClearPropertyOrder</name>
        <briefdescription>
<para>Remove the opinion for propertyOrder metadata on this prim at the current EditTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="473" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1acf19fa27b29bb676ff899868fd5de099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveProperty</definition>
        <argsstring>(const TfToken &amp;propName)</argsstring>
        <name>RemoveProperty</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
<para>Remove all scene description for the property with the given <computeroutput>propName</computeroutput> <emphasis>in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if the property is removed, false otherwise.</para>
<para>Because this method can only remove opinions about the property from the current EditTarget, you may generally find it more useful to use <ref refid="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" kindref="member">UsdAttribute::Block()</ref>, which will ensure that all values from the EditTarget and weaker layers for the property will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aabebc3bf37922b4508c991f262370547" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_property" kindref="compound">UsdProperty</ref></type>
        <definition>USD_API UsdProperty GetProperty</definition>
        <argsstring>(const TfToken &amp;propName) const</argsstring>
        <name>GetProperty</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> with the name <emphasis>propName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The property returned may or may not <bold>actually</bold> exist so it must be checked for validity. Suggested use:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(UsdProperty<sp/>myProp<sp/>=<sp/>prim.GetProperty(&quot;myProp&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myProp<sp/>is<sp/>safe<sp/>to<sp/>use.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Edits<sp/>to<sp/>the<sp/>owning<sp/>stage<sp/>requires<sp/>subsequent<sp/>validation.</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>myProp<sp/>was<sp/>not<sp/>defined/authored</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a7c49b0c6d4bd14ecd49913fc5e2fde35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasProperty</definition>
        <argsstring>(const TfToken &amp;propName) const</argsstring>
        <name>HasProperty</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
<para>Return true if this prim has an property named <computeroutput>propName</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a3c54c7584441d0f92eeb6893068f92d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetKind</definition>
        <argsstring>(TfToken *kind) const</argsstring>
        <name>GetKind</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Retrieve the authored <computeroutput>kind</computeroutput> for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>To test whether the returned <computeroutput>kind</computeroutput> matches a particular known &quot;clientKind&quot;: <programlisting><codeline><highlight class="normal">TfToken<sp/>kind;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>isClientKind<sp/>=<sp/>prim.GetKind(&amp;kind)<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KindRegistry::IsA(kind,<sp/>clientKind);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>true if there was an authored kind that was successfully read, otherwise false. Note that this will return false for pseudoroot even though pseudoroot is always a group, without any kind (in order to respect model hierarchy rules)</para>
</simplesect>
<simplesect kind="see"><para><ref refid="kind_page_front_1mainpage_kind" kindref="member">The Kind module</ref> for further details on how to use Kind for classification, and how to extend the taxonomy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a1d091aa55a2380411e0ab738397ca5fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetKind</definition>
        <argsstring>(const TfToken &amp;kind) const</argsstring>
        <name>SetKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Author a <computeroutput>kind</computeroutput> for this prim, at the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if <computeroutput>kind</computeroutput> was successully authored, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a6a0ea2bd96afa34596c713fa00ee9bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool AddAppliedSchema</definition>
        <argsstring>(const TfToken &amp;appliedSchemaName) const</argsstring>
        <name>AddAppliedSchema</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>appliedSchemaName</declname>
        </param>
        <briefdescription>
<para>Adds the applied API schema name token <computeroutput>appliedSchemaName</computeroutput> to the <emphasis>apiSchemas</emphasis> metadata for this prim at the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>For multiple-apply schemas the name token should include the instance name for the applied schema, for example &apos;CollectionAPI:plasticStuff&apos;.</para>
<para>The name will only be added if the <ref refid="class_sdf_list_op" kindref="compound">list operation</ref> at the edit target does not already have this applied schema in its explicit, prepended, or appended lists and is always added to the end of either the prepended or explicit items.</para>
<para>Returns true upon success or if the API schema is already applied in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be added to the apiSchemas listOp metadata</para>
</listitem>
</itemizedlist>
Unlike ApplyAPI this method does not require that the name token refer to a valid API schema type. ApplyAPI is the preferred method for applying valid API schemas. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1ac997cf9bc7eb57deb56db442ca141748" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool RemoveAppliedSchema</definition>
        <argsstring>(const TfToken &amp;appliedSchemaName) const</argsstring>
        <name>RemoveAppliedSchema</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>appliedSchemaName</declname>
        </param>
        <briefdescription>
<para>Removes the applied API schema name token <computeroutput>appliedSchemaName</computeroutput> from the <emphasis>apiSchemas</emphasis> metadata for this prim at the current edit target. </para>
        </briefdescription>
        <detaileddescription>
<para>For multiple-apply schemas the name token should include the instance name for the applied schema, for example &apos;CollectionAPI:plasticStuff&apos;</para>
<para>For an explicit <ref refid="class_sdf_list_op" kindref="compound">list operation</ref>, this removes the applied schema name from the explicit items list if it was present. For a non-explicit <ref refid="class_sdf_list_op" kindref="compound">list operation</ref>, this will remove any occurrence of the applied schema name from the prepended and appended item as well as adding it to the deleted items list.</para>
<para>Returns true upon success or if the API schema is already deleted in the current edit target.</para>
<para>An error is issued and false returned for any of the following conditions: <itemizedlist>
<listitem><para>this prim is not a valid prim for editing </para>
</listitem>
<listitem><para>this prim is valid, but cannot be reached or overridden in the current edit target </para>
</listitem>
<listitem><para>the schema name cannot be deleted in the apiSchemas listOp metadata</para>
</listitem>
</itemizedlist>
Unlike RemoveAPI this method does not require that the name token refer to a valid API schema type. RemoveAPI is the preferred method for removing valid API schemas. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="1404" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_prim_1a6a46b65efeaaf4c1ae50dba49066cdbd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _IsA</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo *schemaInfo) const</argsstring>
        <name>_IsA</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> *</type>
          <declname>schemaInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a92a371798400505d09cf6806c8b3d2a4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _HasAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo *schemaInfo) const</argsstring>
        <name>_HasAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> *</type>
          <declname>schemaInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2c7795732c9d1255c113357196da5a30" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _HasAPIInstance</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo *schemaInfo, const TfToken &amp;instanceName) const</argsstring>
        <name>_HasAPIInstance</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> *</type>
          <declname>schemaInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a40aa1d01fea3afbd1e0723b487858647" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _CanApplySingleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo, std::string *whyNot) const</argsstring>
        <name>_CanApplySingleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a042d7fdc3d2d5c74486190a05935d330" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _CanApplyMultipleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo, const TfToken &amp;instanceName, std::string *whyNot) const</argsstring>
        <name>_CanApplyMultipleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a70e68f1a56a0b88c95c972d946ce239a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _ApplySingleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo) const</argsstring>
        <name>_ApplySingleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1adda4b826d0869844c56299bb16527ecd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _ApplyMultipleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo, const TfToken &amp;instanceName) const</argsstring>
        <name>_ApplyMultipleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1af6fe67a63d969a30346497b0e5c9dc1d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _RemoveSingleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo) const</argsstring>
        <name>_RemoveSingleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a54eefb3340a01c8ca8dfd2c0c79c1878" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool _RemoveMultipleApplyAPI</definition>
        <argsstring>(const UsdSchemaRegistry::SchemaInfo &amp;schemaInfo, const TfToken &amp;instanceName) const</argsstring>
        <name>_RemoveMultipleApplyAPI</name>
        <param>
          <type>const <ref refid="struct_usd_schema_registry_1_1_schema_info" kindref="compound">UsdSchemaRegistry::SchemaInfo</ref> &amp;</type>
          <declname>schemaInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a362cdc3af7c2a1b3aa93cc5a4013b252" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrim</definition>
        <argsstring>(const Usd_PrimDataHandle &amp;primData, const SdfPath &amp;proxyPrimPath)</argsstring>
        <name>UsdPrim</name>
        <param>
          <type>const Usd_PrimDataHandle &amp;</type>
          <declname>primData</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2224" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2224" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a9d90d1acdaaa6cc63ce5eec6b23a1b42" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPrim</definition>
        <argsstring>(UsdObjType objType, const Usd_PrimDataHandle &amp;prim, const SdfPath &amp;proxyPrimPath, const TfToken &amp;propName)</argsstring>
        <name>UsdPrim</name>
        <param>
          <type><ref refid="object_8h_1ada9a9a926dbc7aa06b0449ed00d11097" kindref="member">UsdObjType</ref></type>
          <declname>objType</declname>
        </param>
        <param>
          <type>const Usd_PrimDataHandle &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>proxyPrimPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>propName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2229" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2229" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1afa0295c9049c73d358f01a093dcb5691" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_sibling_range" kindref="compound">SiblingRange</ref></type>
        <definition>UsdPrim::SiblingRange _MakeSiblingRange</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;pred) const</argsstring>
        <name>_MakeSiblingRange</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2237" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2525" bodyend="2536"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a1337aa9d24189a491c70ea196115bb9c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_prim_subtree_range" kindref="compound">SubtreeRange</ref></type>
        <definition>UsdPrim::SubtreeRange _MakeDescendantsRange</definition>
        <argsstring>(const Usd_PrimFlagsPredicate &amp;pred) const</argsstring>
        <name>_MakeDescendantsRange</name>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2241" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2785" bodyend="2797"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a85ba3c0aa05250b522ffec8d41a4b8f0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>std::vector&lt;UsdProperty&gt; _MakeProperties</definition>
        <argsstring>(const TfTokenVector &amp;names) const</argsstring>
        <name>_MakeProperties</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a71b0dd1776fa4fac203513e21969a0fb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _GetPropertyNames</definition>
        <argsstring>(bool onlyAuthored, bool applyOrder=true, const PropertyPredicateFunc &amp;predicate={}) const</argsstring>
        <name>_GetPropertyNames</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>applyOrder</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" kindref="member">PropertyPredicateFunc</ref> &amp;</type>
          <declname>predicate</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a2eca5f9f87d47a5720ba36073ae9d36b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> &gt;</type>
        <definition>std::vector&lt;UsdProperty&gt; _GetPropertiesInNamespace</definition>
        <argsstring>(const std::string &amp;namespaces, bool onlyAuthored) const</argsstring>
        <name>_GetPropertiesInNamespace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>namespaces</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a88718f17b8a3dfd35273350bca1b3034" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &gt;</type>
        <definition>std::vector&lt;UsdAttribute&gt; _GetAttributes</definition>
        <argsstring>(bool onlyAuthored, bool applyOrder=false) const</argsstring>
        <name>_GetAttributes</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>applyOrder</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a50deafeab9abf8777ef8f1c319919e4b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> &gt;</type>
        <definition>std::vector&lt;UsdRelationship&gt; _GetRelationships</definition>
        <argsstring>(bool onlyAuthored, bool applyOrder=false) const</argsstring>
        <name>_GetRelationships</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>applyOrder</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a477b6b046900eb1963e36912cde9579f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
        <definition>const PcpPrimIndex&amp; _GetSourcePrimIndex</definition>
        <argsstring>() const</argsstring>
        <name>_GetSourcePrimIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2276" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="2276" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1a594367d380eb27e2275d3b392a4205a4" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_usd_resolve_target" kindref="compound">UsdResolveTarget</ref></type>
        <definition>UsdResolveTarget _MakeResolveTargetFromEditTarget</definition>
        <argsstring>(const UsdEditTarget &amp;editTarget, bool makeAsStrongerThan) const</argsstring>
        <name>_MakeResolveTargetFromEditTarget</name>
        <param>
          <type>const <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref> &amp;</type>
          <declname>editTarget</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>makeAsStrongerThan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_prim_1aa453d317386d36218fa65a5017189272" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>_ProtoToInstancePathMap</type>
        <definition>_ProtoToInstancePathMap _GetProtoToInstancePathMap</definition>
        <argsstring>() const</argsstring>
        <name>_GetProtoToInstancePathMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/prim.h" line="2286" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> is the sole persistent scenegraph object on a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>, and is the embodiment of a &quot;Prim&quot; as described in the <emphasis>Universal Scene Description Composition Compendium</emphasis> </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> is the principal container of other types of scene description. It provides API for accessing and creating all of the contained kinds of scene description, which include: <itemizedlist>
<listitem><para><ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref> - all VariantSets on the prim (<ref refid="class_usd_prim_1a9949ecc0b27afc66d61f2d0f88453e52" kindref="member">GetVariantSets()</ref>, <ref refid="class_usd_prim_1a607da249e11bc4f5f3b4bf0db99861ab" kindref="member">GetVariantSet()</ref>) </para>
</listitem>
<listitem><para><ref refid="class_usd_references" kindref="compound">UsdReferences</ref> - all references on the prim (<ref refid="class_usd_prim_1ac9081d27e9d2a1058e32249fb96aaa34" kindref="member">GetReferences()</ref>) </para>
</listitem>
<listitem><para><ref refid="class_usd_inherits" kindref="compound">UsdInherits</ref> - all inherits on the prim (<ref refid="class_usd_prim_1a4ce3a65e44e0600777803c7c5e44aed0" kindref="member">GetInherits()</ref>) </para>
</listitem>
<listitem><para><ref refid="class_usd_specializes" kindref="compound">UsdSpecializes</ref> - all specializes on the prim (<ref refid="class_usd_prim_1a2599f893dfc5ec4ef2616f4a2d156231" kindref="member">GetSpecializes()</ref>)</para>
</listitem>
</itemizedlist>
As well as access to the API objects for properties contained within the prim - <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> as well as all of the following classes are subclasses of <ref refid="class_usd_object" kindref="compound">UsdObject</ref>: <itemizedlist>
<listitem><para><ref refid="class_usd_property" kindref="compound">UsdProperty</ref> - generic access to all attributes and relationships. A <ref refid="class_usd_property" kindref="compound">UsdProperty</ref> can be queried and cast to a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> or <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> using <ref refid="class_usd_object_1a7152c172b8551a1e222bf446ce7689fd" kindref="member">UsdObject::Is&lt;&gt;()</ref> and <ref refid="class_usd_object_1aaca099fe79c1bbdd2216e7cb583952a9" kindref="member">UsdObject::As&lt;&gt;()</ref>. (<ref refid="class_usd_prim_1a24377e6ababf44be9534a68046ebb7b8" kindref="member">GetPropertyNames()</ref>, <ref refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" kindref="member">GetProperties()</ref>, <ref refid="class_usd_prim_1ac30eb1456177265b39f8412a7cb8ae53" kindref="member">GetPropertiesInNamespace()</ref>, <ref refid="class_usd_prim_1aab0e1b744dac924c02abd6416321ee9f" kindref="member">GetPropertyOrder()</ref>, <ref refid="class_usd_prim_1a7285692cfe69b46e890ec25756d02c37" kindref="member">SetPropertyOrder()</ref>) </para>
</listitem>
<listitem><para><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> - access to default and timesampled attribute values, as well as value resolution information, and attribute-specific metadata (<ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">CreateAttribute()</ref>, <ref refid="class_usd_prim_1a31225ac7165f58726f000ab1d67e9e61" kindref="member">GetAttribute()</ref>, <ref refid="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" kindref="member">GetAttributes()</ref>, <ref refid="class_usd_prim_1a6092b2a26c8f94cf68eb77e45bd1f8d5" kindref="member">HasAttribute()</ref>) </para>
</listitem>
<listitem><para><ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref> - access to authoring and resolving relationships to other prims and properties (<ref refid="class_usd_prim_1a974a14aa624890855cade1d83c9a4762" kindref="member">CreateRelationship()</ref>, <ref refid="class_usd_prim_1adb80fd32612eb6cbf4dc279908eb0bdd" kindref="member">GetRelationship()</ref>, <ref refid="class_usd_prim_1aa6202f152dc043e81b648112984e936c" kindref="member">GetRelationships()</ref>, <ref refid="class_usd_prim_1ae87bb23a62a4a59bbe7510100d4db056" kindref="member">HasRelationship()</ref>)</para>
</listitem>
</itemizedlist>
<ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> also provides access to iteration through its prim children, optionally making use of the <ref refid="prim_flags_8h" kindref="compound">prim predicates facility</ref> (<ref refid="class_usd_prim_1a2619563fc9180d8ead597944fd7f6ec7" kindref="member">GetChildren()</ref>, <ref refid="class_usd_prim_1a0173b7fe85d33e147f820033f4b08f0e" kindref="member">GetAllChildren()</ref>, <ref refid="class_usd_prim_1a41fba977a56f9a6c1c8e2ed1e98c337d" kindref="member">GetFilteredChildren()</ref>).</para>
<sect1 id="class_usd_prim_1Lifetime">
<title>Management</title>
<para>Clients acquire <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> objects, which act like weak/guarded pointers to persistent objects owned and managed by their originating <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>. We provide the following guarantees for a <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> acquired via <ref refid="class_usd_stage_1a6ceb556070804b712c01a7968f925735" kindref="member">UsdStage::GetPrimAtPath()</ref> or <ref refid="class_usd_stage_1a29523207b89d9a7e47146e4a57c9b1b0" kindref="member">UsdStage::OverridePrim()</ref> or <ref refid="class_usd_stage_1a6151ae804f7145e451d9aafdde347730" kindref="member">UsdStage::DefinePrim()</ref>: <itemizedlist>
<listitem><para>As long as no further mutations to the structure of the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> are made, the <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> will still be valid. Loading and Unloading are considered structural mutations. </para>
</listitem>
<listitem><para>When the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>&apos;s structure <emphasis>is</emphasis> mutated, the thread performing the mutation will receive a <ref refid="class_usd_notice_1_1_objects_changed" kindref="compound">UsdNotice::ObjectsChanged</ref> notice after the stage has been reconfigured, which provides details as to what prims may have been created or destroyed, and what prims may simply have changed in some structural way.</para>
</listitem>
</itemizedlist>
Prim access in &quot;reader&quot; threads should be limited to <ref refid="class_usd_prim_1a6ceb556070804b712c01a7968f925735" kindref="member">GetPrimAtPath()</ref>, which will never cause a mutation to the Stage or its layers.</para>
<para>Please refer to <ref refid="class_usd_notice" kindref="compound">UsdNotice</ref> for a listing of the events that could cause <ref refid="class_usd_notice_1_1_objects_changed" kindref="compound">UsdNotice::ObjectsChanged</ref> to be emitted. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="7859">
        <label>UsdPrim</label>
        <link refid="class_usd_prim"/>
        <childnode refid="7860" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7860">
        <label>UsdObject</label>
        <link refid="class_usd_object"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7861">
        <label>UsdPrim</label>
        <link refid="class_usd_prim"/>
        <childnode refid="7862" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7862">
        <label>UsdObject</label>
        <link refid="class_usd_object"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/prim.h" line="134" column="1" bodyfile="pxr/usd/usd/prim.h" bodystart="133" bodyend="2287"/>
    <listofallmembers>
      <member refid="class_usd_prim_1adda4b826d0869844c56299bb16527ecd" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_ApplyMultipleApplyAPI</name></member>
      <member refid="class_usd_prim_1a70e68f1a56a0b88c95c972d946ce239a" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_ApplySingleApplyAPI</name></member>
      <member refid="class_usd_prim_1a042d7fdc3d2d5c74486190a05935d330" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_CanApplyMultipleApplyAPI</name></member>
      <member refid="class_usd_prim_1a40aa1d01fea3afbd1e0723b487858647" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_CanApplySingleApplyAPI</name></member>
      <member refid="class_usd_prim_1a88718f17b8a3dfd35273350bca1b3034" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetAttributes</name></member>
      <member refid="class_usd_object_1a49fff1f7d23dfc1f95c40ed8bca888f7" prot="protected" virt="non-virtual"><scope>UsdPrim</scope><name>_GetDefiningSpecType</name></member>
      <member refid="class_usd_prim_1a2eca5f9f87d47a5720ba36073ae9d36b" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetPropertiesInNamespace</name></member>
      <member refid="class_usd_prim_1a71b0dd1776fa4fac203513e21969a0fb" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetPropertyNames</name></member>
      <member refid="class_usd_prim_1aa453d317386d36218fa65a5017189272" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetProtoToInstancePathMap</name></member>
      <member refid="class_usd_prim_1a50deafeab9abf8777ef8f1c319919e4b" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetRelationships</name></member>
      <member refid="class_usd_prim_1a477b6b046900eb1963e36912cde9579f" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_GetSourcePrimIndex</name></member>
      <member refid="class_usd_object_1aaaa93a1af279c8b5551391a8b45c7bbc" prot="protected" virt="non-virtual"><scope>UsdPrim</scope><name>_GetStage</name></member>
      <member refid="class_usd_prim_1a92a371798400505d09cf6806c8b3d2a4" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_HasAPI</name></member>
      <member refid="class_usd_prim_1a2c7795732c9d1255c113357196da5a30" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_HasAPIInstance</name></member>
      <member refid="class_usd_prim_1a6a46b65efeaaf4c1ae50dba49066cdbd" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_IsA</name></member>
      <member refid="class_usd_prim_1a1337aa9d24189a491c70ea196115bb9c" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_MakeDescendantsRange</name></member>
      <member refid="class_usd_prim_1a85ba3c0aa05250b522ffec8d41a4b8f0" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_MakeProperties</name></member>
      <member refid="class_usd_prim_1a594367d380eb27e2275d3b392a4205a4" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_MakeResolveTargetFromEditTarget</name></member>
      <member refid="class_usd_prim_1afa0295c9049c73d358f01a093dcb5691" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_MakeSiblingRange</name></member>
      <member refid="class_usd_object_1a476be2b495a6fcc0f03f1b52aa61745d" prot="protected" virt="non-virtual"><scope>UsdPrim</scope><name>_Prim</name></member>
      <member refid="class_usd_object_1a0f84e075219fbeb85f40a5533ac6b550" prot="protected" virt="non-virtual"><scope>UsdPrim</scope><name>_PropName</name></member>
      <member refid="class_usd_object_1a47e60c6fc1efca5e426fd0b40a049236" prot="protected" virt="non-virtual"><scope>UsdPrim</scope><name>_ProxyPrimPath</name></member>
      <member refid="class_usd_prim_1a54eefb3340a01c8ca8dfd2c0c79c1878" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_RemoveMultipleApplyAPI</name></member>
      <member refid="class_usd_prim_1af6fe67a63d969a30346497b0e5c9dc1d" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>_RemoveSingleApplyAPI</name></member>
      <member refid="class_usd_prim_1a6a0ea2bd96afa34596c713fa00ee9bee" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>AddAppliedSchema</name></member>
      <member refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1adca506a91b20e7665a1ab28605508013" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1accd9241189a46cf277527d5c398d2ecb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1aa4b57963e0a1816b67a3c559b1f95d7f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1af497f059b5cd793f883b38a89fd758f1" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1ae6dc2591cd03480560ae83e936bf7cc2" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1a3fd1d65b9f958b918926f50eb7e9ee6f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_prim_1a09494f697deb599f63af0f412ba55a6c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ApplyAPI</name></member>
      <member refid="class_usd_object_1aaca099fe79c1bbdd2216e7cb583952a9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>As</name></member>
      <member refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a284822c3be5e7799b24927a070b58a67" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a757bfb5fe2db9590d0c9dafeaef2c6eb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a6b6a48810fa7fe8afff53cbd50eb14e2" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a8f9c69289f3a68dd61ba99c90a2f11b9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1aaa82e51d38ef41dd209ccb8a8317931e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1adf113f33e6ad5821928ef90da2fc2599" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a18b833f6d4ad266fd2d41d3d5935522a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CanApplyAPI</name></member>
      <member refid="class_usd_prim_1a3e368f3bfcc6a7a151e2bccab9db2125" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearActive</name></member>
      <member refid="class_usd_object_1a85151085271ffb20e4c642a8a854f786" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearAssetInfo</name></member>
      <member refid="class_usd_object_1aadb1b6b9372e1de8b0cef16a8809de0a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearAssetInfoByKey</name></member>
      <member refid="class_usd_prim_1a540eae4b6bdb411b2dc90ed9c87f406e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearChildrenReorder</name></member>
      <member refid="class_usd_object_1a30d686bc90f3d7d6753086a484d86ed4" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearCustomData</name></member>
      <member refid="class_usd_object_1a5abc2ea6c40a3b8b9bc60896cfee0c63" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearCustomDataByKey</name></member>
      <member refid="class_usd_object_1a45f102f292999a4d2c2d5015d54ab9dc" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearDisplayName</name></member>
      <member refid="class_usd_object_1ab84f704415b18a9819918a1a73732f38" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearDocumentation</name></member>
      <member refid="class_usd_object_1a5b6b31dcfcfb34f43f334161522de847" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearHidden</name></member>
      <member refid="class_usd_prim_1ada561adb0aa6b61cd4abc53ef656527a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearInstanceable</name></member>
      <member refid="class_usd_object_1af75ddb7982a5b5c77f9840e67df94435" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearMetadata</name></member>
      <member refid="class_usd_object_1afd756d242f6026a3d7c5606badbf8411" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearMetadataByDictKey</name></member>
      <member refid="class_usd_prim_1a28123120451e03068721d6e671e6a631" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearPayload</name></member>
      <member refid="class_usd_prim_1a5ecea75ae52371bbd93151a0147f02e9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearPropertyOrder</name></member>
      <member refid="class_usd_prim_1afefd37e76168e00b4a0a8d929d557a71" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ClearTypeName</name></member>
      <member refid="class_usd_prim_1ad642cd45c3326bb0a75c209fcb0ec9eb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>ComputeExpandedPrimIndex</name></member>
      <member refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateAttribute</name></member>
      <member refid="class_usd_prim_1a806ed3a0c8ed06b56a50e2e1620b673c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateAttribute</name></member>
      <member refid="class_usd_prim_1ab86d597d65ae87c10b14746bec306100" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateAttribute</name></member>
      <member refid="class_usd_prim_1aa621763310aac738491be4534e92eac1" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateAttribute</name></member>
      <member refid="class_usd_prim_1a974a14aa624890855cade1d83c9a4762" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateRelationship</name></member>
      <member refid="class_usd_prim_1aa2fe844383cdc370f16169719e417070" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>CreateRelationship</name></member>
      <member refid="class_usd_prim_1a70a83830cef17b3c56ea4027d6a39599" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>FindAllAttributeConnectionPaths</name></member>
      <member refid="class_usd_prim_1acb37c1cf989a633e94577b267ccc595e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>FindAllAttributeConnectionPaths</name></member>
      <member refid="class_usd_prim_1ac665feb1bef08159e2bc178181e2017a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>FindAllRelationshipTargetPaths</name></member>
      <member refid="class_usd_prim_1a85cce0c5cd90a9a89fdd21edb2d599cc" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>FindAllRelationshipTargetPaths</name></member>
      <member refid="class_usd_object_1ac81c4a2222e6c4957ed7a540c05e2346" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAllAuthoredMetadata</name></member>
      <member refid="class_usd_prim_1a0173b7fe85d33e147f820033f4b08f0e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAllChildren</name></member>
      <member refid="class_usd_prim_1a58eb300c2c9b612c73de5f39e79ee780" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAllChildrenNames</name></member>
      <member refid="class_usd_prim_1a41a0ab990433f5c95da4f27a2b1697eb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAllDescendants</name></member>
      <member refid="class_usd_object_1afd698d0849b1a8dd4e9a4bf7608e8754" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAllMetadata</name></member>
      <member refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAppliedSchemas</name></member>
      <member refid="class_usd_object_1a568ab5eceb43fd673cad556f30df6619" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAssetInfo</name></member>
      <member refid="class_usd_object_1ada201f20c6d4b33ec27fd459703909e9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAssetInfoByKey</name></member>
      <member refid="class_usd_prim_1a31225ac7165f58726f000ab1d67e9e61" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAttribute</name></member>
      <member refid="class_usd_prim_1a61e1347e76e9f3e269f8be1df3e99a42" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAttributeAtPath</name></member>
      <member refid="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAttributes</name></member>
      <member refid="class_usd_prim_1ab01f748ab42efd084f0fcf7bab53f737" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredAttributes</name></member>
      <member refid="class_usd_prim_1abe621d0d8108591b2535b54c5fecc234" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredProperties</name></member>
      <member refid="class_usd_prim_1ad3bb36d082eb390500730fb498c237f6" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredPropertiesInNamespace</name></member>
      <member refid="class_usd_prim_1ae1d867f2b08b8c36971b50ad5b6e6be7" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredPropertiesInNamespace</name></member>
      <member refid="class_usd_prim_1a1fd5082f3b95bb9aaadd6003250943a4" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredPropertyNames</name></member>
      <member refid="class_usd_prim_1a63bc6890629e6f11c0102fe69d428da4" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetAuthoredRelationships</name></member>
      <member refid="class_usd_prim_1a8c0974bbd49570564f0096ce982ff64a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetChild</name></member>
      <member refid="class_usd_prim_1a2619563fc9180d8ead597944fd7f6ec7" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetChildren</name></member>
      <member refid="class_usd_prim_1ac477679086f343062d574a49c42a144f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetChildrenNames</name></member>
      <member refid="class_usd_prim_1ac661b2517129e7f82f6914a4fa4ba48b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetChildrenReorder</name></member>
      <member refid="class_usd_object_1abea26b9c6a71883a2d9da4ff64952391" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetCustomData</name></member>
      <member refid="class_usd_object_1a9aebce4a579e9bb24385bac6e4ae3186" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetCustomDataByKey</name></member>
      <member refid="class_usd_prim_1a2c7f60d23da06f334e0d298c82eb4a5d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetDescendants</name></member>
      <member refid="class_usd_object_1aa8476a8039c198245c87e27b0f6b7e78" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetDescription</name></member>
      <member refid="class_usd_object_1afea773af9042346906dbd1226d704aeb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetDisplayName</name></member>
      <member refid="class_usd_object_1afbeb96db494ea5fa795d937e532083c9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetDocumentation</name></member>
      <member refid="class_usd_prim_1a41fba977a56f9a6c1c8e2ed1e98c337d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetFilteredChildren</name></member>
      <member refid="class_usd_prim_1a2e6e5b5952c8fd9758df01286040889c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetFilteredChildrenNames</name></member>
      <member refid="class_usd_prim_1a35097b9294275723ef886d39f12d0546" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetFilteredDescendants</name></member>
      <member refid="class_usd_prim_1a6911516fcbfae7cd47da92c621c98ea2" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetFilteredNextSibling</name></member>
      <member refid="class_usd_prim_1a4ce3a65e44e0600777803c7c5e44aed0" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetInherits</name></member>
      <member refid="class_usd_prim_1a2efe317839e2ca127ab26887d4cb0a99" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetInstances</name></member>
      <member refid="class_usd_prim_1a3c54c7584441d0f92eeb6893068f92d2" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetKind</name></member>
      <member refid="class_usd_object_1ad2d76f736733f3ad51aa1ea1df6f4d44" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetMetadata</name></member>
      <member refid="class_usd_object_1af114545bd56cd7619e7d4f2f884e4128" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetMetadata</name></member>
      <member refid="class_usd_object_1aba47c41ec8cc536290c04e219f12589c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1a3bdf70a1d4a8754a0cb51cddab11b299" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1ae57e12beedf10c423e11c5b889343f6d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetName</name></member>
      <member refid="class_usd_object_1aa5d32fe69eb9f41ff16222ce8458f67e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetNamespaceDelimiter</name></member>
      <member refid="class_usd_prim_1a8f383bb2bf33ae75983ff8694f3a814d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetNextSibling</name></member>
      <member refid="class_usd_prim_1a9987f6fcd69d03b0b34d3ff1cf8ae345" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetObjectAtPath</name></member>
      <member refid="class_usd_prim_1a1ca1c93057737f470764dfe82d8d2fef" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetParent</name></member>
      <member refid="class_usd_object_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPath</name></member>
      <member refid="class_usd_prim_1a5c7ee160aeefae1a34c15b6150c082bb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPayloads</name></member>
      <member refid="class_usd_object_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrim</name></member>
      <member refid="class_usd_prim_1a6ceb556070804b712c01a7968f925735" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimAtPath</name></member>
      <member refid="class_usd_prim_1a422bac96f602aa9983a203d86d48fd6d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimDefinition</name></member>
      <member refid="class_usd_prim_1ae6ae4259af3ac06b8a9898a787202a32" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimIndex</name></member>
      <member refid="class_usd_prim_1a0e9828de073a9b6ca1b9cda91eb74cd3" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimInPrototype</name></member>
      <member refid="class_usd_object_1ae980898ec578c6f8082717ceac44a11e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimPath</name></member>
      <member refid="class_usd_prim_1a813fc6b56b3e692d9b66ce72033ae620" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimStack</name></member>
      <member refid="class_usd_prim_1a0bc1a051ef7ca57f7a12fe4e469d36c8" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimStackWithLayerOffsets</name></member>
      <member refid="class_usd_prim_1ab99c37ba85f4c45d558138ca3b604ec5" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrimTypeInfo</name></member>
      <member refid="class_usd_prim_1a0ba1e6c659096641752fc940d9342347" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetProperties</name></member>
      <member refid="class_usd_prim_1ac30eb1456177265b39f8412a7cb8ae53" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPropertiesInNamespace</name></member>
      <member refid="class_usd_prim_1a6c8f1516b2faf47d3f577ac4d9bbc237" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPropertiesInNamespace</name></member>
      <member refid="class_usd_prim_1aabebc3bf37922b4508c991f262370547" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetProperty</name></member>
      <member refid="class_usd_prim_1a5e639a0e2f163cb857149604f6042bd3" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPropertyAtPath</name></member>
      <member refid="class_usd_prim_1a24377e6ababf44be9534a68046ebb7b8" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPropertyNames</name></member>
      <member refid="class_usd_prim_1aab0e1b744dac924c02abd6416321ee9f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPropertyOrder</name></member>
      <member refid="class_usd_prim_1a5589fb9930ddf2f0ee87f9e6cde87dff" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetPrototype</name></member>
      <member refid="class_usd_prim_1ac9081d27e9d2a1058e32249fb96aaa34" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetReferences</name></member>
      <member refid="class_usd_prim_1adb80fd32612eb6cbf4dc279908eb0bdd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetRelationship</name></member>
      <member refid="class_usd_prim_1aea0c4da4c5bc2470f0c5a271215c2b01" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetRelationshipAtPath</name></member>
      <member refid="class_usd_prim_1aa6202f152dc043e81b648112984e936c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetRelationships</name></member>
      <member refid="class_usd_prim_1a2599f893dfc5ec4ef2616f4a2d156231" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetSpecializes</name></member>
      <member refid="class_usd_prim_1a360d76f1bfb5e7f7171f763a1d9a9124" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetSpecifier</name></member>
      <member refid="class_usd_object_1acbf11fd10a72dbc827b2f3738d2edfde" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetStage</name></member>
      <member refid="class_usd_prim_1a8cc8a084710338ce2de6eeba7872c194" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetTypeName</name></member>
      <member refid="class_usd_prim_1a607da249e11bc4f5f3b4bf0db99861ab" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetVariantSet</name></member>
      <member refid="class_usd_prim_1a9949ecc0b27afc66d61f2d0f88453e52" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetVariantSets</name></member>
      <member refid="class_usd_prim_1adedf31ca40951ad06ab28bedba580081" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetVersionIfHasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a564a572e9af07f62503c4d62d3ff1a52" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetVersionIfHasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a6c02046be9c869622569f265aa8baa19" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>GetVersionIfIsInFamily</name></member>
      <member refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1a64d50034a9c587e979c76c1a9a641dbf" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1a73bd4c1495cb6ce4ef4e7c5539801a1b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1ae848451766449feb57f221b17803e0cd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1ae78d57eb626b86b682908dc6c7e5cb46" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1aab9302047a035ba4f309f455cd845513" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1a612af35ea1212fb9fa9a48af8a8d5cd0" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1aac3518832492d0f7e5e4c679cefd03d8" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPI</name></member>
      <member refid="class_usd_prim_1a6006e1367ab73088137de40fbab94edd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a535c761f2548bd7a71b8c802d875bc6b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a63c06e9c2508f0cdb414bc32a3a92737" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1aa9fa340e747198373c69bcf4e445c014" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1afcd341666a5e933e69c5466264b87e68" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a8c59152ebda7b71814de2ccff30ba908" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a0fa591b36239596344e29ac2f6a74033" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1afd157ab5a5745461f5b2d7c9eafbc07b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1ade535d2d43cd8729d6ea5ea87c2c6d31" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_prim_1a72feaf1bc256c8ec2ee34c91036a78dc" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAPIInFamily</name></member>
      <member refid="class_usd_object_1aac2bfbc79842758d55ad739f471ff437" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAssetInfo</name></member>
      <member refid="class_usd_object_1a4f337c0c1709d3e161a8ff34f46eb7e5" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAssetInfoKey</name></member>
      <member refid="class_usd_prim_1a6092b2a26c8f94cf68eb77e45bd1f8d5" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAttribute</name></member>
      <member refid="class_usd_prim_1a86ccb59ff027768628300b60054cfd49" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredActive</name></member>
      <member refid="class_usd_object_1af05106a278e314f85483651af43e8f68" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredAssetInfo</name></member>
      <member refid="class_usd_object_1a7cc57b254d41d8f09f95b8621f238e49" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredAssetInfoKey</name></member>
      <member refid="class_usd_object_1afe9a33d79276073db9dbc712861c3aa0" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredCustomData</name></member>
      <member refid="class_usd_object_1a0b5df6ddc5f201cc3e42709b8949bb9c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredCustomDataKey</name></member>
      <member refid="class_usd_object_1a6af100fedb961a5952b62a94bc8e725b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredDisplayName</name></member>
      <member refid="class_usd_object_1ab0e3e800ab9fdaf480b767a225208767" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredDocumentation</name></member>
      <member refid="class_usd_object_1a904b990143e4b62ac64e3d1ebeaf5bdc" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredHidden</name></member>
      <member refid="class_usd_prim_1a3130876f45c15b16f80063c124865553" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredInherits</name></member>
      <member refid="class_usd_prim_1a3373796874acd1eafd43cdd71475473d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredInstanceable</name></member>
      <member refid="class_usd_object_1a37211404a939811e841d90c65cd19999" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredMetadata</name></member>
      <member refid="class_usd_object_1a20a01b0dd0dd51f9439b6a3a231c76ef" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredMetadataDictKey</name></member>
      <member refid="class_usd_prim_1a95ef4d654cdd737680463ff655852f82" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredPayloads</name></member>
      <member refid="class_usd_prim_1aa0fccfa8055d7725bd0c1be63c02bbe4" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredReferences</name></member>
      <member refid="class_usd_prim_1a261cc5c6161bc73dc1205014f54487a5" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredSpecializes</name></member>
      <member refid="class_usd_prim_1ae8dab735a0e5b35ec34b4c165edeb648" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasAuthoredTypeName</name></member>
      <member refid="class_usd_object_1ae3d80901c17a644af30bdef5c265580c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasCustomData</name></member>
      <member refid="class_usd_object_1a2de3d809c116fe60c3646d90dcbba87f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasCustomDataKey</name></member>
      <member refid="class_usd_prim_1ac2892c215adfd6fcc383e74d1f32e288" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasDefiningSpecifier</name></member>
      <member refid="class_usd_object_1ae2d99fd05dbc39c2d9746fe639c24825" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasMetadata</name></member>
      <member refid="class_usd_object_1a911c19d77fe0552877918517818e7399" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasMetadataDictKey</name></member>
      <member refid="class_usd_prim_1a040dc1a9d6b52e49a12cabf5cc01cfbf" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasPayload</name></member>
      <member refid="class_usd_prim_1a7c49b0c6d4bd14ecd49913fc5e2fde35" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasProperty</name></member>
      <member refid="class_usd_prim_1ae87bb23a62a4a59bbe7510100d4db056" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasRelationship</name></member>
      <member refid="class_usd_prim_1a87443b32a72f95ca96d960b4e96cbf02" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>HasVariantSets</name></member>
      <member refid="class_usd_object_1a7152c172b8551a1e222bf446ce7689fd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>Is</name></member>
      <member refid="class_usd_prim_1a6cc1b146723c266ae69fb873bcb2df67" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsA</name></member>
      <member refid="class_usd_prim_1a0a50d49f93140253633fa2e256a0e43f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsA</name></member>
      <member refid="class_usd_prim_1a88c140dabc5899d3a65f3b80d1be112f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsA</name></member>
      <member refid="class_usd_prim_1ade9587aa5621826133da30a744db9194" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsA</name></member>
      <member refid="class_usd_prim_1afcaf9f166343aca6a5b6cf5764947720" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsAbstract</name></member>
      <member refid="class_usd_prim_1ab5505aed5c05749ab3f37822c58ded04" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsActive</name></member>
      <member refid="class_usd_prim_1ab291359d4bdcbe69286f27481602677b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsComponent</name></member>
      <member refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsDefined</name></member>
      <member refid="class_usd_prim_1ad534b1a75ec6ebe6cb3d5883d683ec93" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsGroup</name></member>
      <member refid="class_usd_object_1aaccbe79a26ceada03ab81918b30a383e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsHidden</name></member>
      <member refid="class_usd_prim_1a9083465b8d65e80ed3de8ad1c36ecc9d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInFamily</name></member>
      <member refid="class_usd_prim_1a5c117712468a24176b7d02b68bb5678d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInFamily</name></member>
      <member refid="class_usd_prim_1afe2131ff705603088b5cb98743418b65" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInFamily</name></member>
      <member refid="class_usd_prim_1a937ad58d61506a6d70e327b264331f47" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInFamily</name></member>
      <member refid="class_usd_prim_1a43cb3c623d3103e348c7391daacedc86" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInFamily</name></member>
      <member refid="class_usd_prim_1a711679d7f780d1160d0b33a1e2f92268" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInPrototype</name></member>
      <member refid="class_usd_prim_1a802acbcafc0625377d483931ec4fb202" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInstance</name></member>
      <member refid="class_usd_prim_1a23c126962c1286467293e1544e3c3ddb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInstanceable</name></member>
      <member refid="class_usd_prim_1a19314db3dee9cd6f5d2f6198a75acafd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsInstanceProxy</name></member>
      <member refid="class_usd_prim_1a68da43ab74366f539af8c1e6fc018d29" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsLoaded</name></member>
      <member refid="class_usd_prim_1ad93a1d74f88e0a32113df97b3358e9d3" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsModel</name></member>
      <member refid="class_usd_prim_1abc7b7b91de5d1bc0f0850e3e4d9f96a0" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsPathInPrototype</name></member>
      <member refid="class_usd_prim_1a68b802c9624512af6a71de788a8d8861" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsPrototype</name></member>
      <member refid="class_usd_prim_1a72d1ab0931d0ea59a98d6a4f99793269" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsPrototypePath</name></member>
      <member refid="class_usd_prim_1a796554a4a4f3e0101c5a8e16d0c7333f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsPseudoRoot</name></member>
      <member refid="class_usd_prim_1a552b66851fd5a6898de3e67ec42b7c00" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsSubComponent</name></member>
      <member refid="class_usd_object_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>IsValid</name></member>
      <member refid="class_usd_prim_1ac9116ef1816249c339317e9a585f7a6d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>Load</name></member>
      <member refid="class_usd_prim_1a2b2770602392511cb2abe7b63a2934d8" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>MakeResolveTargetStrongerThanEditTarget</name></member>
      <member refid="class_usd_prim_1a01d0912bb2e4435f60c7c9b737f3fd8c" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>MakeResolveTargetUpToEditTarget</name></member>
      <member refid="class_usd_object_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>operator bool</name></member>
      <member refid="class_usd_prim_1aa1d08ad4d9872a1bba7954c2f944ba61" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>PropertyPredicateFunc</name></member>
      <member refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1aa5375b5403261404ff744636701f4fbd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1a9292f92137b5f459864fcba767ac93f7" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1a9ac6e21c4b4b38fdeaf17d6352b3e4cd" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1a89869430b2caa81afff1215d96df8345" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1a337903c209a903708fcf1442fcf71546" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1a1bf2563856f70b61832a7419aedcdf41" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1adde490586cee0e12ef4d8f7a26361f7e" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAPI</name></member>
      <member refid="class_usd_prim_1ac997cf9bc7eb57deb56db442ca141748" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveAppliedSchema</name></member>
      <member refid="class_usd_prim_1acf19fa27b29bb676ff899868fd5de099" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>RemoveProperty</name></member>
      <member refid="class_usd_prim_1ac156eed30c42c013c4a4debf580ce17f" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetActive</name></member>
      <member refid="class_usd_object_1acd1183e9097ec5de924a87b084bb6d08" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetAssetInfo</name></member>
      <member refid="class_usd_object_1a2d4070d8ad13d6880deb6fcdb6679183" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetAssetInfoByKey</name></member>
      <member refid="class_usd_prim_1a5a163565922b1da251ae735ed9524a8a" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetChildrenReorder</name></member>
      <member refid="class_usd_object_1ac4f24685000b88fbdf783de2b1546995" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetCustomData</name></member>
      <member refid="class_usd_object_1abdcc93cd6a4dd8ad2bbe2134316ad836" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetCustomDataByKey</name></member>
      <member refid="class_usd_object_1a89d396665875d4d4a88b5ecb0a22acb0" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetDisplayName</name></member>
      <member refid="class_usd_object_1a207a3fac40b4bd2dca8e9bce07d398e9" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetDocumentation</name></member>
      <member refid="class_usd_object_1a0e3d2a1a0e00d5e4ba2ba8aad555d593" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetHidden</name></member>
      <member refid="class_usd_prim_1ad791f3246d4e5bf72e036df7495ec94d" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetInstanceable</name></member>
      <member refid="class_usd_prim_1a1d091aa55a2380411e0ab738397ca5fc" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetKind</name></member>
      <member refid="class_usd_object_1a1a5325c3bfad050926f03f867a803c03" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetMetadata</name></member>
      <member refid="class_usd_object_1abccca1c487755a7f08e6e4b042d39ede" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetMetadata</name></member>
      <member refid="class_usd_object_1a7f3b367075ca8d6bba9fbf3636183ff3" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_object_1a0c04b54500b5b6d5ef0e8aca66282770" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetMetadataByDictKey</name></member>
      <member refid="class_usd_prim_1a21e64ff18384c447fd1533bfdf01b4f4" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetPayload</name></member>
      <member refid="class_usd_prim_1ab1f49e6d192a891640971d8087527678" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetPayload</name></member>
      <member refid="class_usd_prim_1a7228f10d9bf6e9a7a879432269468002" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetPayload</name></member>
      <member refid="class_usd_prim_1a7285692cfe69b46e890ec25756d02c37" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetPropertyOrder</name></member>
      <member refid="class_usd_prim_1ab074e74153884ebaa3912cc4cb102a08" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetSpecifier</name></member>
      <member refid="class_usd_prim_1a30fe982862e8344e21a8a7cd90c955f2" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SetTypeName</name></member>
      <member refid="class_usd_prim_1ab47c9c7539e4e3e4fb3a3c2d32548a94" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SiblingIterator</name></member>
      <member refid="class_usd_prim_1a3e6cdfd47e66625bcf84395eb5a91eda" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SiblingRange</name></member>
      <member refid="class_usd_prim_1a6f1b94aa40c55f7fa9a4fec387a3ee6b" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SubtreeIterator</name></member>
      <member refid="class_usd_prim_1ab3110cff3c27c376acce171abda7d2b1" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>SubtreeRange</name></member>
      <member refid="class_usd_prim_1a56f09f3593e84c5d4d308286e50a6392" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>Unload</name></member>
      <member refid="class_usd_prim_1aec2b7ca1194f894ff2b952906abfd86c" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_prim_1a4e7075a31a58b84795edf0b8f11f228e" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a385fde82261ce94db08ca9b4d53966ab" prot="public" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdPrim</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a16bdb9fdb779ddaa849433d5c029a2a5" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdPrim</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1adc7d0f32c2146c7ed23416283a39e991" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdPrim</scope><name>UsdObject</name></member>
      <member refid="class_usd_object_1a2331471890f65208bdef3fa70d77fd16" prot="protected" virt="non-virtual" ambiguityscope="UsdObject::"><scope>UsdPrim</scope><name>UsdObject</name></member>
      <member refid="class_usd_prim_1a22a88436566e4dc4c99186c8175538eb" prot="public" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrim</name></member>
      <member refid="class_usd_prim_1a362cdc3af7c2a1b3aa93cc5a4013b252" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrim</name></member>
      <member refid="class_usd_prim_1a9d90d1acdaaa6cc63ce5eec6b23a1b42" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrim</name></member>
      <member refid="class_usd_prim_1a33c96f0e87ad959b22e24912e63a33e7" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrim_AttrConnectionFinder</name></member>
      <member refid="class_usd_prim_1a20aa97c2bdada63f2d1f375ad319c392" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrim_RelTargetFinder</name></member>
      <member refid="class_usd_prim_1a1c2b2023172d5db277fe2520e2513823" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrimRange</name></member>
      <member refid="class_usd_prim_1a0e1e37aafb4708ed5a43323f6a82e085" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrimSiblingIterator</name></member>
      <member refid="class_usd_prim_1acf8bb069206cefac1afef447eef4a14e" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdPrimSubtreeIterator</name></member>
      <member refid="class_usd_prim_1a7843eb26c70fa29eb383201c78ef69c3" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdProperty</name></member>
      <member refid="class_usd_prim_1ad62730bb9bc2e7bab49b4a5c64a2c249" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_prim_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" virt="non-virtual"><scope>UsdPrim</scope><name>UsdStage</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
