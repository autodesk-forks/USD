<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_camera" kind="class" language="C++" prot="public">
    <compoundname>GfCamera</compoundname>
    <includes refid="base_2gf_2camera_8h" local="no">camera.h</includes>
      <sectiondef kind="user-defined">
      <header>Physics based camera setup</header>
      <memberdef kind="function" id="class_gf_camera_1ac6c84b768ffde4b47b0129ce71f8aa8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetFocalLength</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetFocalLength</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>These are the values actually stored in the class and they correspond to measurements of an actual physical camera (in mm). </para>
        </briefdescription>
        <detaileddescription>
<para>Together with the clipping range, they determine the camera frustum. Sets the focal length in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a7986ec32a198365210b3fcf0b6b88047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetHorizontalAperture</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetHorizontalAperture</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the width of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a155e5f18977dc80aa642e166a0bd9c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetVerticalAperture</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetVerticalAperture</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the height of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1ad30ed087232fa6d4a9fccd5ace8a959c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetHorizontalApertureOffset</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetHorizontalApertureOffset</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the horizontal offset of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a18523589728cb848083edb84fcbbab95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetVerticalApertureOffset</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetVerticalApertureOffset</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the vertical offset of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Frustum geometry setup</header>
      <memberdef kind="function" id="class_gf_camera_1af870601a8747b91e32e4fe38f6ce6fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetPerspectiveFromAspectRatioAndFieldOfView</definition>
        <argsstring>(float aspectRatio, float fieldOfView, FOVDirection direction, float horizontalAperture=DEFAULT_HORIZONTAL_APERTURE)</argsstring>
        <name>SetPerspectiveFromAspectRatioAndFieldOfView</name>
        <param>
          <type>float</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fieldOfView</declname>
        </param>
        <param>
          <type><ref refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7da" kindref="member">FOVDirection</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>float</type>
          <declname>horizontalAperture</declname>
          <defval><ref refid="class_gf_camera_1affcf724cb6edd0d170f7b31fd4aee2d0" kindref="member">DEFAULT_HORIZONTAL_APERTURE</ref></defval>
        </param>
        <briefdescription>
<para>Sets the frustum to be projective with the given <computeroutput>aspectRatio</computeroutput> and horizontal, respectively, vertical field of view <computeroutput>fieldOfView</computeroutput> (similar to gluPerspective when direction = FOVVertical). </para>
        </briefdescription>
        <detaileddescription>
<para>Do not pass values for <computeroutput>horionztalAperture</computeroutput> unless you care about DepthOfField. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a3517874568630133a29535a7b7dba2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetOrthographicFromAspectRatioAndSize</definition>
        <argsstring>(float aspectRatio, float orthographicSize, FOVDirection direction)</argsstring>
        <name>SetOrthographicFromAspectRatioAndSize</name>
        <param>
          <type>float</type>
          <declname>aspectRatio</declname>
        </param>
        <param>
          <type>float</type>
          <declname>orthographicSize</declname>
        </param>
        <param>
          <type><ref refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7da" kindref="member">FOVDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Sets the frustum to be orthographic such that it has the given <computeroutput>aspectRatio</computeroutput> and such that the orthographic width, respectively, orthographic height (in cm) is equal to <computeroutput>orthographicSize</computeroutput> (depending on direction). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1aa88bb2cc97faecad5801f11240158fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetFromViewAndProjectionMatrix</definition>
        <argsstring>(const GfMatrix4d &amp;viewMatrix, const GfMatrix4d &amp;projMatix, const float focalLength=50.0)</argsstring>
        <name>SetFromViewAndProjectionMatrix</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>viewMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>projMatix</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>focalLength</declname>
          <defval>50.0</defval>
        </param>
        <briefdescription>
<para>Sets the camera from a view and projection matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the projection matrix does only determine the ratio of aperture to focal length, so there is a choice which defaults to 50mm (or more accurately, 50 tenths of a world unit). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="156" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" prot="public" static="no" strong="no">
        <type></type>
        <name>Projection</name>
        <enumvalue id="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029aad28963ad8af924a09c6ef14c97ca3a7a" prot="public">
          <name>Perspective</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029aac130c48aea11ca5aff222ee3e75ab9a9" prot="public">
          <name>Orthographic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Projection type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="53" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7da" prot="public" static="no" strong="no">
        <type></type>
        <name>FOVDirection</name>
        <enumvalue id="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7daa009b29af17092b2b6006b2b1518000d9" prot="public">
          <name>FOVHorizontal</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7daacda45529be4be3877ce1797f7fde7949" prot="public">
          <name>FOVVertical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Direction used for Field of View or orthographic size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="59" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="59" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_camera_1a056b3ab64f0d5881f1537c65b5edf676" prot="public" static="yes" mutable="no">
        <type>GF_API const double</type>
        <definition>GF_API const double APERTURE_UNIT</definition>
        <argsstring></argsstring>
        <name>APERTURE_UNIT</name>
        <briefdescription>
<para>The unit for horizontal and vertical aperture is one tenth of the world unit. </para>
        </briefdescription>
        <detaileddescription>
<para>Thus, if the world unit is assumed to be cm, the horizontal and vertical aperture unit is mm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="67" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a1267a2ef12b3951400f5da18826d23fc" prot="public" static="yes" mutable="no">
        <type>GF_API const double</type>
        <definition>GF_API const double FOCAL_LENGTH_UNIT</definition>
        <argsstring></argsstring>
        <name>FOCAL_LENGTH_UNIT</name>
        <briefdescription>
<para>The unit for focal length. Similar to APERTURE_UNIT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="69" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1affcf724cb6edd0d170f7b31fd4aee2d0" prot="public" static="yes" mutable="no">
        <type>GF_API const double</type>
        <definition>GF_API const double DEFAULT_HORIZONTAL_APERTURE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_HORIZONTAL_APERTURE</name>
        <briefdescription>
<para>Default horizontal and vertical aperture, based on a 35mm (non-anamorphic) projector aperture (0.825 x 0602 inches, converted to mm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="74" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a37aaa55b047994d73274d945ce69f437" prot="public" static="yes" mutable="no">
        <type>GF_API const double</type>
        <definition>GF_API const double DEFAULT_VERTICAL_APERTURE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_VERTICAL_APERTURE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="75" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_camera_1a417ce102451b1fc29fbdb719abf762c0" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GfMatrix4d _transform</definition>
        <argsstring></argsstring>
        <name>_transform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="239" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1aee52c2019805d8fb8d0e49b8cde4a94d" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" kindref="member">Projection</ref></type>
        <definition>Projection _projection</definition>
        <argsstring></argsstring>
        <name>_projection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="240" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a919943bc6bad58e5fde2a3d6617fdf6e" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _horizontalAperture</definition>
        <argsstring></argsstring>
        <name>_horizontalAperture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="241" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1adc62339e581b2096625f16e8bc5bd95f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _verticalAperture</definition>
        <argsstring></argsstring>
        <name>_verticalAperture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="242" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a4e209b5c9a78e20dcb06ac123e8b3c22" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _horizontalApertureOffset</definition>
        <argsstring></argsstring>
        <name>_horizontalApertureOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="243" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a882605ecbabf5383ccd3a74bae8c936f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _verticalApertureOffset</definition>
        <argsstring></argsstring>
        <name>_verticalApertureOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="244" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a606c70c61b1199eecd29c94a9f4f8f6c" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _focalLength</definition>
        <argsstring></argsstring>
        <name>_focalLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="245" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1add1b6d6ad2eec1ce5d8706fe1a30b083" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f _clippingRange</definition>
        <argsstring></argsstring>
        <name>_clippingRange</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="246" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a822caf8af4e1ee564a722fe30012115b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &gt;</type>
        <definition>std::vector&lt;GfVec4f&gt; _clippingPlanes</definition>
        <argsstring></argsstring>
        <name>_clippingPlanes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="247" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a5f4602a476e3cf708b3d77b2601342cf" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _fStop</definition>
        <argsstring></argsstring>
        <name>_fStop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="250" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_camera_1a54c4bc783f4e8c15f2bb94e9a718ea06" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _focusDistance</definition>
        <argsstring></argsstring>
        <name>_focusDistance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="251" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_camera_1a9cba6b19708b601fd44558bc65aa6b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfCamera</definition>
        <argsstring>(const GfMatrix4d &amp;transform=GfMatrix4d(1.0), Projection projection=Perspective, float horizontalAperture=DEFAULT_HORIZONTAL_APERTURE, float verticalAperture=DEFAULT_VERTICAL_APERTURE, float horizontalApertureOffset=0.0, float verticalApertureOffset=0.0, float focalLength=50.0, const GfRange1f &amp;clippingRange=GfRange1f(1, 1000000), const std::vector&lt; GfVec4f &gt; &amp;clippingPlanes=std::vector&lt; GfVec4f &gt;(), float fStop=0.0, float focusDistance=0.0)</argsstring>
        <name>GfCamera</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>transform</declname>
          <defval><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>(1.0)</defval>
        </param>
        <param>
          <type><ref refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" kindref="member">Projection</ref></type>
          <declname>projection</declname>
          <defval>Perspective</defval>
        </param>
        <param>
          <type>float</type>
          <declname>horizontalAperture</declname>
          <defval><ref refid="class_gf_camera_1affcf724cb6edd0d170f7b31fd4aee2d0" kindref="member">DEFAULT_HORIZONTAL_APERTURE</ref></defval>
        </param>
        <param>
          <type>float</type>
          <declname>verticalAperture</declname>
          <defval>DEFAULT_VERTICAL_APERTURE</defval>
        </param>
        <param>
          <type>float</type>
          <declname>horizontalApertureOffset</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>verticalApertureOffset</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>focalLength</declname>
          <defval>50.0</defval>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>clippingRange</declname>
          <defval><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref>(1, 1000000)</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &gt; &amp;</type>
          <declname>clippingPlanes</declname>
          <defval>std::vector&lt; <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &gt;()</defval>
        </param>
        <param>
          <type>float</type>
          <declname>fStop</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>float</type>
          <declname>focusDistance</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1aebc6ecc06783d5938d1e9abc2b908a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetTransform</definition>
        <argsstring>(const GfMatrix4d &amp;val)</argsstring>
        <name>SetTransform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the transform of the filmback in world space to <computeroutput>val</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1abd2f20cdf21d43e2ce61695e0a058432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetProjection</definition>
        <argsstring>(const Projection &amp;val)</argsstring>
        <name>SetProjection</name>
        <param>
          <type>const <ref refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" kindref="member">Projection</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the projection type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a043898c316e04c64fc3bd4436da6f26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetClippingRange</definition>
        <argsstring>(const GfRange1f &amp;val)</argsstring>
        <name>SetClippingRange</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the clipping range in world units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a2b7bc41e16a33dfe9ac87109d852ea23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetClippingPlanes</definition>
        <argsstring>(const std::vector&lt; GfVec4f &gt; &amp;val)</argsstring>
        <name>SetClippingPlanes</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets additional arbitrarily oriented clipping planes. </para>
        </briefdescription>
        <detaileddescription>
<para>A vector (a,b,c,d) encodes a clipping plane that clips off points (x,y,z) with <verbatim>   a * x + b * y + c * z + d * 1 &lt; 0
</verbatim></para>
<para>where (x,y,z) are the coordinates in the camera&apos;s space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a2d20b3fa16a5d007447bee7c00879b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetFStop</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetFStop</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the lens aperture, unitless. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1ad01cca9107d6a18d38e4becd3961c529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetFocusDistance</definition>
        <argsstring>(const float val)</argsstring>
        <name>SetFocusDistance</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the focus distance in world units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a158741c03b786ed24a0a0b736c9c85d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GF_API GfMatrix4d GetTransform</definition>
        <argsstring>() const</argsstring>
        <name>GetTransform</name>
        <briefdescription>
<para>Returns the transform of the filmback in world space. </para>
        </briefdescription>
        <detaileddescription>
<para>This is exactly the transform specified via <ref refid="class_gf_camera_1aebc6ecc06783d5938d1e9abc2b908a00" kindref="member">SetTransform()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a5a47bc01cba58e9f6153ec49c7e342be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" kindref="member">Projection</ref></type>
        <definition>GF_API Projection GetProjection</definition>
        <argsstring>() const</argsstring>
        <name>GetProjection</name>
        <briefdescription>
<para>Returns the projection type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a3a4f342b77ef0771ef35fe791d599767" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetHorizontalAperture</definition>
        <argsstring>() const</argsstring>
        <name>GetHorizontalAperture</name>
        <briefdescription>
<para>Returns the width of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a6017094e7dbdfe5bf8f53b9d89ed911e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetVerticalAperture</definition>
        <argsstring>() const</argsstring>
        <name>GetVerticalAperture</name>
        <briefdescription>
<para>Returns the height of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a6a6fb3704365820966257e51db9d84b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetHorizontalApertureOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetHorizontalApertureOffset</name>
        <briefdescription>
<para>Returns the horizontal offset of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
<para>In particular, an offset is necessary when writing out a stereo camera with finite convergence distance as two cameras. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a2bd8cd37058607f8f6f44bdeaaca39da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetVerticalApertureOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetVerticalApertureOffset</name>
        <briefdescription>
<para>Returns the vertical offset of the projector aperture in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a35a4a55a8f2109862771b5ec15a6cfbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetAspectRatio</definition>
        <argsstring>() const</argsstring>
        <name>GetAspectRatio</name>
        <briefdescription>
<para>Returns the projector aperture aspect ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a3937969720bb00786d58cb0fcfda6215" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetFocalLength</definition>
        <argsstring>() const</argsstring>
        <name>GetFocalLength</name>
        <briefdescription>
<para>Returns the focal length in tenths of a world unit (e.g., mm if the world unit is assumed to be cm). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a5fe83466021089fd2c4565da91545509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetFieldOfView</definition>
        <argsstring>(FOVDirection direction) const</argsstring>
        <name>GetFieldOfView</name>
        <param>
          <type><ref refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7da" kindref="member">FOVDirection</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Returns the horizontal or vertical field of view in degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a8b1f437aa197eabc03002a8b75288b04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GF_API GfRange1f GetClippingRange</definition>
        <argsstring>() const</argsstring>
        <name>GetClippingRange</name>
        <briefdescription>
<para>Returns the clipping range in world units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a0f30aada0776956c095af93a6543dbd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API const std::vector&lt; <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &gt; &amp;</type>
        <definition>GF_API const std::vector&lt;GfVec4f&gt;&amp; GetClippingPlanes</definition>
        <argsstring>() const</argsstring>
        <name>GetClippingPlanes</name>
        <briefdescription>
<para>Returns additional clipping planes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1aa39c1bbe3b7f350cccabd3baa734cce4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref></type>
        <definition>GF_API GfFrustum GetFrustum</definition>
        <argsstring>() const</argsstring>
        <name>GetFrustum</name>
        <briefdescription>
<para>Returns the computed, world-space camera frustum. </para>
        </briefdescription>
        <detaileddescription>
<para>The frustum will always be that of a Y-up, -Z-looking camera. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a797f11c978b347b6c5432db8dcf1bb56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetFStop</definition>
        <argsstring>() const</argsstring>
        <name>GetFStop</name>
        <briefdescription>
<para>Returns the lens aperture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1af0820ae097f06882448512d349ffca61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float</type>
        <definition>GF_API float GetFocusDistance</definition>
        <argsstring>() const</argsstring>
        <name>GetFocusDistance</name>
        <briefdescription>
<para>Returns the focus distance in world units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a7afa6c61ad633e50004a8e07871edd3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfCamera &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_camera" kindref="compound">GfCamera</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality operator. true iff all parts match. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_camera_1a021c8c0495e1204aed94eadb6bb3c8d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator!=</definition>
        <argsstring>(const GfCamera &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_gf_camera" kindref="compound">GfCamera</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/camera.h" line="235" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object-based representation of a camera. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a thin wrapper on the camera data model, with a small number of computations. </para>
    </detaileddescription>
    <location file="pxr/base/gf/camera.h" line="50" column="1" bodyfile="pxr/base/gf/camera.h" bodystart="49" bodyend="252"/>
    <listofallmembers>
      <member refid="class_gf_camera_1a822caf8af4e1ee564a722fe30012115b" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_clippingPlanes</name></member>
      <member refid="class_gf_camera_1add1b6d6ad2eec1ce5d8706fe1a30b083" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_clippingRange</name></member>
      <member refid="class_gf_camera_1a606c70c61b1199eecd29c94a9f4f8f6c" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_focalLength</name></member>
      <member refid="class_gf_camera_1a54c4bc783f4e8c15f2bb94e9a718ea06" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_focusDistance</name></member>
      <member refid="class_gf_camera_1a5f4602a476e3cf708b3d77b2601342cf" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_fStop</name></member>
      <member refid="class_gf_camera_1a919943bc6bad58e5fde2a3d6617fdf6e" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_horizontalAperture</name></member>
      <member refid="class_gf_camera_1a4e209b5c9a78e20dcb06ac123e8b3c22" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_horizontalApertureOffset</name></member>
      <member refid="class_gf_camera_1aee52c2019805d8fb8d0e49b8cde4a94d" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_projection</name></member>
      <member refid="class_gf_camera_1a417ce102451b1fc29fbdb719abf762c0" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_transform</name></member>
      <member refid="class_gf_camera_1adc62339e581b2096625f16e8bc5bd95f" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_verticalAperture</name></member>
      <member refid="class_gf_camera_1a882605ecbabf5383ccd3a74bae8c936f" prot="private" virt="non-virtual"><scope>GfCamera</scope><name>_verticalApertureOffset</name></member>
      <member refid="class_gf_camera_1a056b3ab64f0d5881f1537c65b5edf676" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>APERTURE_UNIT</name></member>
      <member refid="class_gf_camera_1affcf724cb6edd0d170f7b31fd4aee2d0" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>DEFAULT_HORIZONTAL_APERTURE</name></member>
      <member refid="class_gf_camera_1a37aaa55b047994d73274d945ce69f437" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>DEFAULT_VERTICAL_APERTURE</name></member>
      <member refid="class_gf_camera_1a1267a2ef12b3951400f5da18826d23fc" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>FOCAL_LENGTH_UNIT</name></member>
      <member refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7da" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>FOVDirection</name></member>
      <member refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7daa009b29af17092b2b6006b2b1518000d9" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>FOVHorizontal</name></member>
      <member refid="class_gf_camera_1ada1d1d603d386218c1a2f37b9cbdf7daacda45529be4be3877ce1797f7fde7949" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>FOVVertical</name></member>
      <member refid="class_gf_camera_1a35a4a55a8f2109862771b5ec15a6cfbe" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetAspectRatio</name></member>
      <member refid="class_gf_camera_1a0f30aada0776956c095af93a6543dbd0" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetClippingPlanes</name></member>
      <member refid="class_gf_camera_1a8b1f437aa197eabc03002a8b75288b04" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetClippingRange</name></member>
      <member refid="class_gf_camera_1a5fe83466021089fd2c4565da91545509" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetFieldOfView</name></member>
      <member refid="class_gf_camera_1a3937969720bb00786d58cb0fcfda6215" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetFocalLength</name></member>
      <member refid="class_gf_camera_1af0820ae097f06882448512d349ffca61" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetFocusDistance</name></member>
      <member refid="class_gf_camera_1aa39c1bbe3b7f350cccabd3baa734cce4" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetFrustum</name></member>
      <member refid="class_gf_camera_1a797f11c978b347b6c5432db8dcf1bb56" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetFStop</name></member>
      <member refid="class_gf_camera_1a3a4f342b77ef0771ef35fe791d599767" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetHorizontalAperture</name></member>
      <member refid="class_gf_camera_1a6a6fb3704365820966257e51db9d84b5" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetHorizontalApertureOffset</name></member>
      <member refid="class_gf_camera_1a5a47bc01cba58e9f6153ec49c7e342be" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetProjection</name></member>
      <member refid="class_gf_camera_1a158741c03b786ed24a0a0b736c9c85d3" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetTransform</name></member>
      <member refid="class_gf_camera_1a6017094e7dbdfe5bf8f53b9d89ed911e" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetVerticalAperture</name></member>
      <member refid="class_gf_camera_1a2bd8cd37058607f8f6f44bdeaaca39da" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GetVerticalApertureOffset</name></member>
      <member refid="class_gf_camera_1a9cba6b19708b601fd44558bc65aa6b6e" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>GfCamera</name></member>
      <member refid="class_gf_camera_1a021c8c0495e1204aed94eadb6bb3c8d4" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>operator!=</name></member>
      <member refid="class_gf_camera_1a7afa6c61ad633e50004a8e07871edd3d" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>operator==</name></member>
      <member refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029aac130c48aea11ca5aff222ee3e75ab9a9" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>Orthographic</name></member>
      <member refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029aad28963ad8af924a09c6ef14c97ca3a7a" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>Perspective</name></member>
      <member refid="class_gf_camera_1a9f7870d8d60a515bd641dadf4629029a" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>Projection</name></member>
      <member refid="class_gf_camera_1a2b7bc41e16a33dfe9ac87109d852ea23" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetClippingPlanes</name></member>
      <member refid="class_gf_camera_1a043898c316e04c64fc3bd4436da6f26d" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetClippingRange</name></member>
      <member refid="class_gf_camera_1ac6c84b768ffde4b47b0129ce71f8aa8a" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetFocalLength</name></member>
      <member refid="class_gf_camera_1ad01cca9107d6a18d38e4becd3961c529" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetFocusDistance</name></member>
      <member refid="class_gf_camera_1aa88bb2cc97faecad5801f11240158fe6" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetFromViewAndProjectionMatrix</name></member>
      <member refid="class_gf_camera_1a2d20b3fa16a5d007447bee7c00879b85" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetFStop</name></member>
      <member refid="class_gf_camera_1a7986ec32a198365210b3fcf0b6b88047" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetHorizontalAperture</name></member>
      <member refid="class_gf_camera_1ad30ed087232fa6d4a9fccd5ace8a959c" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetHorizontalApertureOffset</name></member>
      <member refid="class_gf_camera_1a3517874568630133a29535a7b7dba2b3" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetOrthographicFromAspectRatioAndSize</name></member>
      <member refid="class_gf_camera_1af870601a8747b91e32e4fe38f6ce6fe1" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetPerspectiveFromAspectRatioAndFieldOfView</name></member>
      <member refid="class_gf_camera_1abd2f20cdf21d43e2ce61695e0a058432" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetProjection</name></member>
      <member refid="class_gf_camera_1aebc6ecc06783d5938d1e9abc2b908a00" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetTransform</name></member>
      <member refid="class_gf_camera_1a155e5f18977dc80aa642e166a0bd9c75" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetVerticalAperture</name></member>
      <member refid="class_gf_camera_1a18523589728cb848083edb84fcbbab95" prot="public" virt="non-virtual"><scope>GfCamera</scope><name>SetVerticalApertureOffset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
