<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="py_enum_8h" kind="file" language="C++">
    <compoundname>pyEnum.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes refid="py_obj_wrapper_8h" local="yes">pxr/base/tf/pyObjWrapper.h</includes>
    <includes refid="base_2tf_2py_utils_8h" local="yes">pxr/base/tf/pyUtils.h</includes>
    <includes refid="type_8h" local="yes">pxr/base/tf/type.h</includes>
    <includes refid="demangle_8h" local="yes">pxr/base/arch/demangle.h</includes>
    <includes refid="enum_8h" local="yes">pxr/base/tf/enum.h</includes>
    <includes refid="tf_2hash_8h" local="yes">pxr/base/tf/hash.h</includes>
    <includes refid="hashmap_8h" local="yes">pxr/base/tf/hashmap.h</includes>
    <includes refid="base_2tf_2iterator_8h" local="yes">pxr/base/tf/iterator.h</includes>
    <includes refid="singleton_8h" local="yes">pxr/base/tf/singleton.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes local="no">boost/python/class.hpp</includes>
    <includes local="no">boost/python/converter/from_python.hpp</includes>
    <includes local="no">boost/python/converter/registered.hpp</includes>
    <includes local="no">boost/python/converter/rvalue_from_python_data.hpp</includes>
    <includes local="no">boost/python/list.hpp</includes>
    <includes local="no">boost/python/object.hpp</includes>
    <includes local="no">boost/python/operators.hpp</includes>
    <includes local="no">boost/python/refcount.hpp</includes>
    <includes local="no">boost/python/scope.hpp</includes>
    <includes local="no">boost/python/to_python_converter.hpp</includes>
    <includes local="no">boost/python/tuple.hpp</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="68926">
        <label>list</label>
      </node>
      <node id="68852">
        <label>locale</label>
      </node>
      <node id="68888">
        <label>atomic</label>
      </node>
      <node id="68902">
        <label>stdarg.h</label>
      </node>
      <node id="68871">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="68872" relation="include">
        </childnode>
        <childnode refid="68873" relation="include">
        </childnode>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
        <childnode refid="68874" relation="include">
        </childnode>
      </node>
      <node id="68909">
        <label>functional</label>
      </node>
      <node id="68919">
        <label>pxr/base/tf/hashmap.h</label>
        <link refid="hashmap_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
        <childnode refid="68920" relation="include">
        </childnode>
      </node>
      <node id="68847">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68854">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="68921">
        <label>pxr/base/tf/iterator.h</label>
        <link refid="base_2tf_2iterator_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68861" relation="include">
        </childnode>
        <childnode refid="68922" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68877" relation="include">
        </childnode>
      </node>
      <node id="68922">
        <label>iterator</label>
      </node>
      <node id="68930">
        <label>boost/python/converter/registered.hpp</label>
      </node>
      <node id="68873">
        <label>cstdint</label>
      </node>
      <node id="68860">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68861" relation="include">
        </childnode>
        <childnode refid="68868" relation="include">
        </childnode>
        <childnode refid="68885" relation="include">
        </childnode>
        <childnode refid="68886" relation="include">
        </childnode>
        <childnode refid="68889" relation="include">
        </childnode>
        <childnode refid="68891" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68892" relation="include">
        </childnode>
      </node>
      <node id="68900">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68862" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
        <childnode refid="68852" relation="include">
        </childnode>
        <childnode refid="68901" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
      </node>
      <node id="68850">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68932">
        <label>boost/python/list.hpp</label>
      </node>
      <node id="68875">
        <label>cmath</label>
      </node>
      <node id="68869">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68863" relation="include">
        </childnode>
        <childnode refid="68870" relation="include">
        </childnode>
        <childnode refid="68871" relation="include">
        </childnode>
        <childnode refid="68876" relation="include">
        </childnode>
        <childnode refid="68877" relation="include">
        </childnode>
      </node>
      <node id="68906">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="68886">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68887" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
      </node>
      <node id="68935">
        <label>boost/python/scope.hpp</label>
      </node>
      <node id="68925">
        <label>cstdarg</label>
      </node>
      <node id="68879">
        <label>string</label>
      </node>
      <node id="68862">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68847" relation="include">
        </childnode>
      </node>
      <node id="68907">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="68880">
        <label>map</label>
      </node>
      <node id="68872">
        <label>cinttypes</label>
      </node>
      <node id="68845">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="68915">
        <label>pxr/base/tf/type_Impl.h</label>
        <link refid="type___impl_8h_source"/>
        <childnode refid="68916" relation="include">
        </childnode>
      </node>
      <node id="68903">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68899" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
        <childnode refid="68882" relation="include">
        </childnode>
      </node>
      <node id="68867">
        <label>stddef.h</label>
      </node>
      <node id="68863">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68904">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68905">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68906" relation="include">
        </childnode>
        <childnode refid="68907" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
      </node>
      <node id="68887">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68871" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68888" relation="include">
        </childnode>
      </node>
      <node id="68889">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
      </node>
      <node id="68895">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
      </node>
      <node id="68851">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="68850" relation="include">
        </childnode>
        <childnode refid="68852" relation="include">
        </childnode>
        <childnode refid="68853" relation="include">
        </childnode>
      </node>
      <node id="68901">
        <label>any</label>
      </node>
      <node id="68910">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="68874">
        <label>sys/types.h</label>
      </node>
      <node id="68896">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68897" relation="include">
        </childnode>
        <childnode refid="68868" relation="include">
        </childnode>
        <childnode refid="68860" relation="include">
        </childnode>
        <childnode refid="68894" relation="include">
        </childnode>
        <childnode refid="68903" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
      </node>
      <node id="68918">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
        <childnode refid="68903" relation="include">
        </childnode>
        <childnode refid="68868" relation="include">
        </childnode>
        <childnode refid="68904" relation="include">
        </childnode>
        <childnode refid="68889" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68857" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
      </node>
      <node id="68890">
        <label>typeinfo</label>
      </node>
      <node id="68937">
        <label>boost/python/tuple.hpp</label>
      </node>
      <node id="68856">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="68855">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="68893">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68885" relation="include">
        </childnode>
        <childnode refid="68860" relation="include">
        </childnode>
        <childnode refid="68869" relation="include">
        </childnode>
        <childnode refid="68894" relation="include">
        </childnode>
        <childnode refid="68896" relation="include">
        </childnode>
        <childnode refid="68892" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
      </node>
      <node id="68916">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68888" relation="include">
        </childnode>
        <childnode refid="68917" relation="include">
        </childnode>
        <childnode refid="68873" relation="include">
        </childnode>
        <childnode refid="68857" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
      </node>
      <node id="68870">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68848" relation="include">
        </childnode>
        <childnode refid="68871" relation="include">
        </childnode>
        <childnode refid="68875" relation="include">
        </childnode>
      </node>
      <node id="68884">
        <label>vector</label>
      </node>
      <node id="68846">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="68847" relation="include">
        </childnode>
      </node>
      <node id="68908">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68851" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
      </node>
      <node id="68911">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="68877">
        <label>utility</label>
      </node>
      <node id="68927">
        <label>sstream</label>
      </node>
      <node id="68898">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68899" relation="include">
        </childnode>
        <childnode refid="68866" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
      </node>
      <node id="68844">
        <label>pxr/base/tf/pyEnum.h</label>
        <link refid="py_enum_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68849" relation="include">
        </childnode>
        <childnode refid="68859" relation="include">
        </childnode>
        <childnode refid="68913" relation="include">
        </childnode>
        <childnode refid="68903" relation="include">
        </childnode>
        <childnode refid="68918" relation="include">
        </childnode>
        <childnode refid="68868" relation="include">
        </childnode>
        <childnode refid="68919" relation="include">
        </childnode>
        <childnode refid="68921" relation="include">
        </childnode>
        <childnode refid="68923" relation="include">
        </childnode>
        <childnode refid="68924" relation="include">
        </childnode>
        <childnode refid="68928" relation="include">
        </childnode>
        <childnode refid="68929" relation="include">
        </childnode>
        <childnode refid="68930" relation="include">
        </childnode>
        <childnode refid="68931" relation="include">
        </childnode>
        <childnode refid="68932" relation="include">
        </childnode>
        <childnode refid="68907" relation="include">
        </childnode>
        <childnode refid="68933" relation="include">
        </childnode>
        <childnode refid="68934" relation="include">
        </childnode>
        <childnode refid="68935" relation="include">
        </childnode>
        <childnode refid="68936" relation="include">
        </childnode>
        <childnode refid="68937" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
      </node>
      <node id="68885">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
      </node>
      <node id="68848">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="68864">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68868">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68869" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68878" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68880" relation="include">
        </childnode>
        <childnode refid="68858" relation="include">
        </childnode>
        <childnode refid="68881" relation="include">
        </childnode>
        <childnode refid="68882" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68877" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
      </node>
      <node id="68876">
        <label>math.h</label>
      </node>
      <node id="68924">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68862" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68871" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68918" relation="include">
        </childnode>
        <childnode refid="68925" relation="include">
        </childnode>
        <childnode refid="68878" relation="include">
        </childnode>
        <childnode refid="68926" relation="include">
        </childnode>
        <childnode refid="68881" relation="include">
        </childnode>
        <childnode refid="68927" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
      </node>
      <node id="68859">
        <label>pxr/base/tf/pyUtils.h</label>
        <link refid="base_2tf_2py_utils_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68860" relation="include">
        </childnode>
        <childnode refid="68893" relation="include">
        </childnode>
        <childnode refid="68861" relation="include">
        </childnode>
        <childnode refid="68904" relation="include">
        </childnode>
        <childnode refid="68851" relation="include">
        </childnode>
        <childnode refid="68905" relation="include">
        </childnode>
        <childnode refid="68908" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68909" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
        <childnode refid="68910" relation="include">
        </childnode>
        <childnode refid="68911" relation="include">
        </childnode>
        <childnode refid="68906" relation="include">
        </childnode>
        <childnode refid="68907" relation="include">
        </childnode>
        <childnode refid="68912" relation="include">
        </childnode>
      </node>
      <node id="68857">
        <label>iosfwd</label>
      </node>
      <node id="68917">
        <label>cstdlib</label>
      </node>
      <node id="68865">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68866" relation="include">
        </childnode>
        <childnode refid="68867" relation="include">
        </childnode>
      </node>
      <node id="68913">
        <label>pxr/base/tf/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68914" relation="include">
        </childnode>
        <childnode refid="68891" relation="include">
        </childnode>
        <childnode refid="68857" relation="include">
        </childnode>
        <childnode refid="68858" relation="include">
        </childnode>
        <childnode refid="68881" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
        <childnode refid="68883" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
        <childnode refid="68884" relation="include">
        </childnode>
        <childnode refid="68915" relation="include">
        </childnode>
      </node>
      <node id="68853">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="68892">
        <label>cstddef</label>
      </node>
      <node id="68923">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68850" relation="include">
        </childnode>
        <childnode refid="68888" relation="include">
        </childnode>
      </node>
      <node id="68891">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68858" relation="include">
        </childnode>
      </node>
      <node id="68920">
        <label>unordered_map</label>
      </node>
      <node id="68861">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68862" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68863" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68865" relation="include">
        </childnode>
        <childnode refid="68867" relation="include">
        </childnode>
      </node>
      <node id="68934">
        <label>boost/python/refcount.hpp</label>
      </node>
      <node id="68849">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68850" relation="include">
        </childnode>
        <childnode refid="68851" relation="include">
        </childnode>
        <childnode refid="68854" relation="include">
        </childnode>
        <childnode refid="68855" relation="include">
        </childnode>
        <childnode refid="68856" relation="include">
        </childnode>
        <childnode refid="68857" relation="include">
        </childnode>
        <childnode refid="68858" relation="include">
        </childnode>
      </node>
      <node id="68883">
        <label>type_traits</label>
      </node>
      <node id="68936">
        <label>boost/python/to_python_converter.hpp</label>
      </node>
      <node id="68881">
        <label>set</label>
      </node>
      <node id="68912">
        <label>boost/python/type_id.hpp</label>
      </node>
      <node id="68899">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="68847" relation="include">
        </childnode>
      </node>
      <node id="68866">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="68848" relation="include">
        </childnode>
      </node>
      <node id="68933">
        <label>boost/python/operators.hpp</label>
      </node>
      <node id="68878">
        <label>cstring</label>
      </node>
      <node id="68929">
        <label>boost/python/converter/from_python.hpp</label>
      </node>
      <node id="68894">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68895" relation="include">
        </childnode>
        <childnode refid="68860" relation="include">
        </childnode>
        <childnode refid="68888" relation="include">
        </childnode>
      </node>
      <node id="68858">
        <label>memory</label>
      </node>
      <node id="68914">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68862" relation="include">
        </childnode>
        <childnode refid="68904" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68909" relation="include">
        </childnode>
        <childnode refid="68890" relation="include">
        </childnode>
      </node>
      <node id="68897">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="68845" relation="include">
        </childnode>
        <childnode refid="68898" relation="include">
        </childnode>
        <childnode refid="68861" relation="include">
        </childnode>
        <childnode refid="68846" relation="include">
        </childnode>
        <childnode refid="68864" relation="include">
        </childnode>
        <childnode refid="68900" relation="include">
        </childnode>
        <childnode refid="68867" relation="include">
        </childnode>
        <childnode refid="68902" relation="include">
        </childnode>
        <childnode refid="68879" relation="include">
        </childnode>
      </node>
      <node id="68931">
        <label>boost/python/converter/rvalue_from_python_data.hpp</label>
      </node>
      <node id="68882">
        <label>typeindex</label>
      </node>
      <node id="68928">
        <label>boost/python/class.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_tf_py_wrap_enum" prot="public">TfPyWrapEnum</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="py_enum_8h_1aa540fa202cc161147e9d9a58b7672743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TF_API_TEMPLATE_CLASS</definition>
        <argsstring>(TfSingleton&lt; Tf_PyEnumRegistry &gt;)</argsstring>
        <name>TF_API_TEMPLATE_CLASS</name>
        <param>
          <type><ref refid="class_tf_singleton" kindref="compound">TfSingleton</ref>&lt; Tf_PyEnumRegistry &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyEnum.h" line="163" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provide facilities for wrapping enums for script. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_PY_ENUM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_PY_ENUM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyObjWrapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2py_utils_8h" kindref="compound">pxr/base/tf/pyUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/type.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">pxr/base/arch/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="enum_8h" kindref="compound">pxr/base/tf/enum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tf_2hash_8h" kindref="compound">pxr/base/tf/hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/hashmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2iterator_8h" kindref="compound">pxr/base/tf/iterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="singleton_8h" kindref="compound">pxr/base/tf/singleton.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/class.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/from_python.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/registered.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/rvalue_from_python_data.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/operators.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/refcount.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/scope.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/to_python_converter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tf_PyEnum<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tf_PyEnumRegistry<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tf_PyEnumRegistry<sp/>This;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_PyEnumRegistry();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Tf_PyEnumRegistry();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_singleton" kindref="compound">TfSingleton</ref>&lt;This&gt;;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>This<sp/>&amp;<ref refid="class_tf_singleton_1a0866aab4257483326c469dcef942f0e1" kindref="member">GetInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_singleton_1a0866aab4257483326c469dcef942f0e1" kindref="member">TfSingleton&lt;This&gt;::GetInstance</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterValue(<ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e,<sp/>boost::python::object<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterEnumConversions()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>conversions<sp/>to<sp/>and<sp/>from<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::to_python_converter&lt;T,<sp/>_EnumToPython&lt;T&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_EnumFromPython&lt;T&gt;();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*_ConvertEnumToPython(<ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_EnumFromPython<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_EnumFromPython()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::converter::registry::insert</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;convertible,<sp/>&amp;construct,<sp/>boost::python::type_id&lt;T&gt;());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*convertible(PyObject<sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfHashMap&lt;PyObject<sp/>*,<sp/>TfEnum,<sp/>_ObjectHash&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;o2e<sp/>=</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumRegistry::GetInstance()._objectsToEnums;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfHashMap&lt;PyObject<sp/>*,<sp/>TfEnum,<sp/>_ObjectHash&gt;::const_iterator</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>o2e.find(obj);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>of<sp/>producing<sp/>a<sp/>TfEnum<sp/>or<sp/>an<sp/>integer,<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>registered<sp/>enum<sp/>type<sp/>is<sp/>fine.<sp/><sp/>In<sp/>all<sp/>other<sp/>cases,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enum<sp/>types<sp/>must<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>TfEnum&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_enum&lt;T&gt;::value))</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>!=<sp/>o2e.end()<sp/>?<sp/>obj<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>o2e.end()<sp/>&amp;&amp;<sp/>i-&gt;second.IsA&lt;T&gt;())<sp/>?<sp/>obj<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct(PyObject<sp/>*src,<sp/>boost::python::converter::</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvalue_from_python_stage1_data<sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*storage<sp/>=</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((boost::python::converter::</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvalue_from_python_storage&lt;T&gt;<sp/>*)data)-&gt;storage.bytes;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/>T(_GetEnumValue(src,<sp/>(T<sp/>*)0));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;convertible<sp/>=<sp/>storage;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overloads<sp/>to<sp/>explicitly<sp/>allow<sp/>conversion<sp/>of<sp/>the<sp/>TfEnum<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>to<sp/>other<sp/>enum/integral<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>U<sp/>_GetEnumValue(PyObject<sp/>*src,<sp/>U<sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U(Tf_PyEnumRegistry::GetInstance()._objectsToEnums[src].</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetValueAsInt());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>_GetEnumValue(PyObject<sp/>*src,<sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_PyEnumRegistry::GetInstance()._objectsToEnums[src];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_EnumToPython<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*convert(T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tf_PyEnumRegistry</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::GetInstance()._ConvertEnumToPython(<ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(t));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>our<sp/>enum<sp/>objects<sp/>live<sp/>as<sp/>long<sp/>as<sp/>the<sp/>registry<sp/>does,<sp/>we<sp/>can<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>values<sp/>for<sp/>a<sp/>hash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ObjectHash<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>operator()(PyObject<sp/>*o)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_cast&lt;size_t&gt;(o);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>TfHashMap&lt;TfEnum,<sp/>PyObject<sp/>*,<sp/>TfHash&gt;<sp/>_enumsToObjects;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>TfHashMap&lt;PyObject<sp/>*,<sp/>TfEnum,<sp/>_ObjectHash&gt;<sp/>_objectsToEnums;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TF_API_TEMPLATE_CLASS(<ref refid="class_tf_singleton" kindref="compound">TfSingleton&lt;Tf_PyEnumRegistry&gt;</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>function<sp/>used<sp/>for<sp/>__repr__<sp/>of<sp/>wrapped<sp/>enum<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="167"><highlight class="normal">std::string<sp/>Tf_PyEnumRepr(boost::python::object<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>base<sp/>class<sp/>for<sp/>types<sp/>which<sp/>are<sp/>instantiated<sp/>and<sp/>exposed<sp/>to<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>registered<sp/>enum<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tf_PyEnumWrapper<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Tf_PyEnum</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tf_PyEnumWrapper<sp/>This;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;n,<sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val)<sp/>:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name(n),<sp/>value(val)<sp/>{}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>GetValue()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value.GetValueAsInt();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>GetName()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>GetDisplayName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum_1af0c1c00f51cd9926938791eecd699a6d" kindref="member">TfEnum::GetDisplayName</ref>(value);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>GetFullName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum_1a6a18ac8f440e7c84277f1fec7c0d9c7a" kindref="member">TfEnum::GetFullName</ref>(value);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dictionary_8h_1af7cc7d48287d0ccfc216ed68b60c0b78" kindref="member">operator ==</ref>(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.value.GetValueAsInt()<sp/>==<sp/>other;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dictionary_8h_1af7cc7d48287d0ccfc216ed68b60c0b78" kindref="member">operator ==</ref>(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>==<sp/>rhs.value;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>same,<sp/>not<sp/>less.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs<sp/>==<sp/>rhs)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>types<sp/>don&apos;t<sp/>match,<sp/>string<sp/>compare<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lhs.value.IsA(rhs.value.GetType()))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum_1a6a18ac8f440e7c84277f1fec7c0d9c7a" kindref="member">TfEnum::GetFullName</ref>(lhs.value)<sp/>&lt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_enum_1a6a18ac8f440e7c84277f1fec7c0d9c7a" kindref="member">TfEnum::GetFullName</ref>(rhs.value);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>types<sp/>do<sp/>match,<sp/>numerically<sp/>compare<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.GetValue()<sp/>&lt;<sp/>rhs.GetValue();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>&lt;<sp/>lhs;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&gt;<sp/>rhs);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>Bitwise<sp/>operators<sp/>for<sp/>Enums<sp/>are<sp/>a<sp/>temporary<sp/>measure<sp/>to<sp/>support<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>of<sp/>Enums<sp/>as<sp/>Bitmasks<sp/>in<sp/>libSd.<sp/><sp/>It<sp/>should<sp/>be<sp/>noted<sp/>that<sp/>Enums<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOT<sp/>closed<sp/>under<sp/>these<sp/>operators.<sp/>The<sp/>proper<sp/>place<sp/>for<sp/>such<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>in<sp/>a<sp/>yet-nonexistent<sp/>Bitmask<sp/>type.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>|(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.value.IsA(rhs.value.GetType()))<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.value.GetValueAsInt()<sp/>|</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a9b631ddcf182b86e008d6f13900fc4e3" kindref="member">TfPyThrowTypeError</ref>(</highlight><highlight class="stringliteral">&quot;Enum<sp/>type<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>|(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),<sp/>lhs.value.GetValueAsInt()<sp/>|<sp/>rhs);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>|(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lhs,<sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(rhs.value.GetType(),<sp/>lhs<sp/>|<sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>&amp;(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.value.IsA(rhs.value.GetType()))<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.value.GetValueAsInt()<sp/>&amp;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a9b631ddcf182b86e008d6f13900fc4e3" kindref="member">TfPyThrowTypeError</ref>(</highlight><highlight class="stringliteral">&quot;Enum<sp/>type<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>&amp;(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),<sp/>lhs.value.GetValueAsInt()<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>&amp;(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lhs,<sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(rhs.value.GetType(),<sp/>lhs<sp/>&amp;<sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>^(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.value.IsA(rhs.value.GetType()))<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.value.GetValueAsInt()<sp/>^</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a9b631ddcf182b86e008d6f13900fc4e3" kindref="member">TfPyThrowTypeError</ref>(</highlight><highlight class="stringliteral">&quot;Enum<sp/>type<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>^(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lhs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(lhs.value.GetType(),<sp/>lhs.value.GetValueAsInt()<sp/>^<sp/>rhs);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>^(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lhs,<sp/>Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(rhs.value.GetType(),<sp/>lhs<sp/>^<sp/>rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>operator<sp/>~(Tf_PyEnumWrapper<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref>(rhs.value.GetType(),<sp/>~rhs.value.GetValueAsInt());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>value;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>template<sp/>class<sp/>which<sp/>is<sp/>instantiated<sp/>and<sp/>exposed<sp/>to<sp/>python<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registered<sp/>enum<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tf_TypedPyEnumWrapper<sp/>:<sp/>Tf_PyEnumWrapper</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_TypedPyEnumWrapper(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;n,<sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val)<sp/>:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumWrapper(n,<sp/>val)<sp/>{}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::python::object<sp/>GetValueFromName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>value<sp/>=<sp/>TfEnum::GetValueFromName&lt;T&gt;(name,<sp/>&amp;found);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>boost::python::object(value)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>boost::python::object();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sanitizes<sp/>the<sp/>given<sp/>\p<sp/>name<sp/>for<sp/>use<sp/>as<sp/>a<sp/>Python<sp/>identifier.<sp/>This<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replacing<sp/>spaces<sp/>with<sp/>&apos;_&apos;<sp/>and<sp/>appending<sp/>&apos;_&apos;<sp/>to<sp/>names<sp/>matching<sp/>Python<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>keywords.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>\p<sp/>stripPackageName<sp/>is<sp/>true<sp/>and<sp/>\p<sp/>name<sp/>begins<sp/>with<sp/>the<sp/>package<sp/>name,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>stripped<sp/>off.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="325"><highlight class="normal">std::string<sp/>Tf_PyCleanEnumName(std::string<sp/>name,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stripPackageName<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>attribute<sp/>of<sp/>given<sp/>name<sp/>with<sp/>given<sp/>value<sp/>to<sp/>given<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Issues<sp/>a<sp/>coding<sp/>error<sp/>if<sp/>attribute<sp/>by<sp/>that<sp/>name<sp/>already<sp/>existed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_PyEnumAddAttribute(boost::python::scope<sp/>&amp;s,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::python::object<sp/>&amp;value);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>scoped<sp/>enums<sp/>by<sp/>using<sp/>that<sp/>the<sp/>C++<sp/>standard<sp/>does<sp/>not<sp/>allow<sp/>them<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>converted<sp/>to<sp/>int<sp/>implicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>bool<sp/>IsScopedEnum<sp/>=<sp/>!std::is_convertible&lt;T,<sp/>int&gt;::value&gt;</highlight></codeline>
<codeline lineno="380" refid="struct_tf_py_wrap_enum" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tf_py_wrap_enum" kindref="compound">TfPyWrapEnum</ref><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::python::class_&lt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_TypedPyEnumWrapper&lt;T&gt;,<sp/>boost::python::bases&lt;Tf_PyEnumWrapper&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>_EnumPyClassType;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="struct_tf_py_wrap_enum_1a0859620f8be36e683660c9f3417623a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="struct_tf_py_wrap_enum_1a0859620f8be36e683660c9f3417623a5" kindref="member">TfPyWrapEnum</ref>(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name<sp/>=<sp/>std::string())</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::python;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>explicitName<sp/>=<sp/>!name.empty();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>take<sp/>either<sp/>the<sp/>given<sp/>name,<sp/>or<sp/>the<sp/>demangled<sp/>type<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>enumName<sp/>=<sp/>explicitName<sp/>?<sp/>name<sp/>:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___string_1gac52faea3628696e9a242bf79cbce4be6" kindref="member">TfStringReplace</ref>(<ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)),<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>name<sp/>is<sp/>dotted,<sp/>take<sp/>everything<sp/>before<sp/>the<sp/>dot<sp/>as<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name.<sp/><sp/>This<sp/>is<sp/>used<sp/>in<sp/>repr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>baseName<sp/>=<sp/><ref refid="group__group__tf___string_1gac9e93734112b176029a356b304c56767" kindref="member">TfStringGetBeforeSuffix</ref>(enumName);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseName<sp/>==<sp/>enumName)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseName<sp/>=<sp/>std::string();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>name<sp/>is<sp/>dotted,<sp/>take<sp/>the<sp/>last<sp/>element<sp/>as<sp/>the<sp/>enum<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__group__tf___string_1gafd1e0eb3f3e4f9ca32e674330f062697" kindref="member">TfStringGetSuffix</ref>(enumName).empty())</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumName<sp/>=<sp/><ref refid="group__group__tf___string_1gafd1e0eb3f3e4f9ca32e674330f062697" kindref="member">TfStringGetSuffix</ref>(enumName);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>name<sp/>was<sp/>not<sp/>explicitly<sp/>given,<sp/>then<sp/>clean<sp/>it<sp/>up<sp/>by<sp/>removing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>package<sp/>name<sp/>prefix<sp/>if<sp/>it<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!explicitName)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!baseName.empty())<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseName<sp/>=<sp/>Tf_PyCleanEnumName(</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseName,<sp/></highlight><highlight class="comment">/*<sp/>stripPackageName<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumName<sp/>=<sp/>Tf_PyCleanEnumName(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumName,<sp/></highlight><highlight class="comment">/*<sp/>stripPackageName<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsScopedEnum)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>enumName<sp/>appear<sp/>in<sp/>python<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>scoped<sp/>enums.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!baseName.empty())<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseName<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>baseName<sp/>+=<sp/>enumName;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>python<sp/>type<sp/>for<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_EnumPyClassType<sp/>enumClass(enumName.c_str(),<sp/>no_init);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumClass.def(</highlight><highlight class="stringliteral">&quot;GetValueFromName&quot;</highlight><highlight class="normal">,<sp/>&amp;Tf_TypedPyEnumWrapper&lt;T&gt;::GetValueFromName,<sp/>arg(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumClass.staticmethod(</highlight><highlight class="stringliteral">&quot;GetValueFromName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumClass.setattr(</highlight><highlight class="stringliteral">&quot;_baseName&quot;</highlight><highlight class="normal">,<sp/>baseName);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>conversions<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumRegistry::GetInstance().RegisterEnumConversions&lt;T&gt;();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Export<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>strip<sp/>the<sp/>package<sp/>name<sp/>from<sp/>top-level<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>an<sp/>enum<sp/>named<sp/>&quot;Foo&quot;<sp/>is<sp/>declared<sp/>at<sp/>top-level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>in<sp/>Tf<sp/>with<sp/>values<sp/>&quot;TfBar&quot;<sp/>and<sp/>&quot;TfBaz&quot;,<sp/>we<sp/>want<sp/>to<sp/>strip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>off<sp/>Tf<sp/>so<sp/>that<sp/>the<sp/>values<sp/>in<sp/>Python<sp/>will<sp/>be<sp/>Tf.Bar<sp/>and<sp/>Tf.Baz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stripPackageName<sp/>=<sp/>baseName.empty();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ExportValues(stripPackageName,<sp/>enumClass);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>with<sp/>Tf<sp/>so<sp/>that<sp/>python<sp/>clients<sp/>of<sp/>a<sp/>TfType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>represents<sp/>an<sp/>enum<sp/>are<sp/>able<sp/>to<sp/>get<sp/>to<sp/>the<sp/>equivalent<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>python<sp/>class<sp/>with<sp/>.pythonclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_type" kindref="compound">TfType</ref><sp/>&amp;type<sp/>=<sp/>TfType::Find&lt;T&gt;();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!type.<ref refid="class_tf_type_1abdcd9e3cee35fcfc8dcdba7429af0b00" kindref="member">IsUnknown</ref>())</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type.<ref refid="class_tf_type_1a35f5c369ebaaa8b07ec2e03cf9dff0ab" kindref="member">DefinePythonClass</ref>(enumClass);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ExportValues(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stripPackageName,<sp/>_EnumPyClassType<sp/>&amp;enumClass)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::list<sp/>valueList;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>:<sp/>TfEnum::GetAllNames&lt;T&gt;())<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_enum" kindref="compound">TfEnum</ref><sp/>enumValue<sp/>=<sp/>TfEnum::GetValueFromName&lt;T&gt;(name,<sp/>&amp;success);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>cleanedName<sp/>=<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyCleanEnumName(name,<sp/>stripPackageName);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>value<sp/>to<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_TypedPyEnumWrapper&lt;T&gt;<sp/>wrappedValue(cleanedName,<sp/>enumValue);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::object<sp/>pyValue(wrappedValue);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>it<sp/>as<sp/>the<sp/>python<sp/>object<sp/>for<sp/>this<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumRegistry::GetInstance().RegisterValue(enumValue,<sp/>pyValue);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>all<sp/>the<sp/>values<sp/>and<sp/>export<sp/>them<sp/>into<sp/>the<sp/>current<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>valueName<sp/>=<sp/>wrappedValue.GetName();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsScopedEnum)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>scoped<sp/>enum,<sp/>enum<sp/>values<sp/>appear<sp/>on<sp/>the<sp/>enumClass<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::scope<sp/>s(enumClass);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumAddAttribute(s,<sp/>valueName,<sp/>pyValue);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>otherwise,<sp/>enum<sp/>values<sp/>appear<sp/>on<sp/>the<sp/>enclosing<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::scope<sp/>s;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyEnumAddAttribute(s,<sp/>valueName,<sp/>pyValue);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valueList.append(pyValue);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tuple<sp/>of<sp/>all<sp/>the<sp/>values<sp/>to<sp/>the<sp/>enum<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumClass.setattr(</highlight><highlight class="stringliteral">&quot;allValues&quot;</highlight><highlight class="normal">,<sp/>boost::python::tuple(valueList));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_PY_ENUM_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/pyEnum.h"/>
  </compounddef>
</doxygen>
