<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="functions_8h" kind="file" language="C++">
    <compoundname>functions.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2vt_2api_8h" local="yes">pxr/base/vt/api.h</includes>
    <includes refid="array_8h" local="yes">pxr/base/vt/array.h</includes>
    <includes local="no">boost/preprocessor/enum_params.hpp</includes>
    <includes local="no">boost/preprocessor/iterate.hpp</includes>
    <includes local="no">boost/preprocessor/repeat.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">BOOST_PP_ITERATE()</includes>
    <includedby refid="wrap_array_8h" local="yes">pxr/base/vt/wrapArray.h</includedby>
    <incdepgraph>
      <node id="95798">
        <label>locale</label>
      </node>
      <node id="95791">
        <label>atomic</label>
      </node>
      <node id="95800">
        <label>stdarg.h</label>
      </node>
      <node id="95746">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="95747" relation="include">
        </childnode>
        <childnode refid="95748" relation="include">
        </childnode>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
        <childnode refid="95749" relation="include">
        </childnode>
      </node>
      <node id="95738">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95740">
        <label>pxr/base/vt/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95741" relation="include">
        </childnode>
        <childnode refid="95763" relation="include">
        </childnode>
        <childnode refid="95771" relation="include">
        </childnode>
        <childnode refid="95772" relation="include">
        </childnode>
        <childnode refid="95785" relation="include">
        </childnode>
        <childnode refid="95790" relation="include">
        </childnode>
        <childnode refid="95795" relation="include">
        </childnode>
        <childnode refid="95801" relation="include">
        </childnode>
        <childnode refid="95803" relation="include">
        </childnode>
        <childnode refid="95791" relation="include">
        </childnode>
        <childnode refid="95794" relation="include">
        </childnode>
        <childnode refid="95802" relation="include">
        </childnode>
        <childnode refid="95804" relation="include">
        </childnode>
        <childnode refid="95778" relation="include">
        </childnode>
        <childnode refid="95757" relation="include">
        </childnode>
        <childnode refid="95805" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
      </node>
      <node id="95778">
        <label>limits</label>
      </node>
      <node id="95804">
        <label>iterator</label>
      </node>
      <node id="95748">
        <label>cstdint</label>
      </node>
      <node id="95807">
        <label>boost/preprocessor/iterate.hpp</label>
      </node>
      <node id="95797">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95782" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
        <childnode refid="95798" relation="include">
        </childnode>
        <childnode refid="95799" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
      </node>
      <node id="95790">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95750">
        <label>cmath</label>
      </node>
      <node id="95743">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95744" relation="include">
        </childnode>
        <childnode refid="95745" relation="include">
        </childnode>
        <childnode refid="95746" relation="include">
        </childnode>
        <childnode refid="95751" relation="include">
        </childnode>
        <childnode refid="95752" relation="include">
        </childnode>
      </node>
      <node id="95789">
        <label>pxr/base/tf/pointerAndBits.h</label>
        <link refid="pointer_and_bits_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95790" relation="include">
        </childnode>
        <childnode refid="95748" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
        <childnode refid="95752" relation="include">
        </childnode>
      </node>
      <node id="95755">
        <label>string</label>
      </node>
      <node id="95770">
        <label>pxr/base/tf/functionRef.h</label>
        <link refid="function_ref_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95757" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
        <childnode refid="95752" relation="include">
        </childnode>
      </node>
      <node id="95782">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95738" relation="include">
        </childnode>
      </node>
      <node id="95756">
        <label>map</label>
      </node>
      <node id="95747">
        <label>cinttypes</label>
      </node>
      <node id="95736">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="95788">
        <label>unordered_set</label>
      </node>
      <node id="95765">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95766" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
        <childnode refid="95762" relation="include">
        </childnode>
        <childnode refid="95759" relation="include">
        </childnode>
      </node>
      <node id="95737">
        <label>pxr/base/vt/api.h</label>
        <link refid="base_2vt_2api_8h_source"/>
        <childnode refid="95738" relation="include">
        </childnode>
      </node>
      <node id="95786">
        <label>stddef.h</label>
      </node>
      <node id="95744">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95767">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95768">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95762" relation="include">
        </childnode>
      </node>
      <node id="95775">
        <label>pxr/base/gf/ilmbase_half.h</label>
        <link refid="ilmbase__half_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95776" relation="include">
        </childnode>
        <childnode refid="95769" relation="include">
        </childnode>
      </node>
      <node id="95774">
        <label>pxr/base/gf/half.h</label>
        <link refid="half_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95775" relation="include">
        </childnode>
        <childnode refid="95777" relation="include">
        </childnode>
        <childnode refid="95779" relation="include">
        </childnode>
      </node>
      <node id="95776">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="95738" relation="include">
        </childnode>
      </node>
      <node id="95799">
        <label>any</label>
      </node>
      <node id="95735">
        <label>pxr/base/vt/functions.h</label>
        <link refid="functions_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95740" relation="include">
        </childnode>
        <childnode refid="95806" relation="include">
        </childnode>
        <childnode refid="95807" relation="include">
        </childnode>
        <childnode refid="95808" relation="include">
        </childnode>
        <childnode refid="95761" relation="include">
        </childnode>
        <childnode refid="95809" relation="include">
        </childnode>
      </node>
      <node id="95749">
        <label>sys/types.h</label>
      </node>
      <node id="95764">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
        <childnode refid="95765" relation="include">
        </childnode>
        <childnode refid="95742" relation="include">
        </childnode>
        <childnode refid="95767" relation="include">
        </childnode>
        <childnode refid="95768" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95769" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
        <childnode refid="95762" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
        <childnode refid="95761" relation="include">
        </childnode>
      </node>
      <node id="95762">
        <label>typeinfo</label>
      </node>
      <node id="95780">
        <label>pxr/base/tf/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95781" relation="include">
        </childnode>
        <childnode refid="95742" relation="include">
        </childnode>
        <childnode refid="95787" relation="include">
        </childnode>
        <childnode refid="95789" relation="include">
        </childnode>
        <childnode refid="95791" relation="include">
        </childnode>
        <childnode refid="95769" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
        <childnode refid="95761" relation="include">
        </childnode>
        <childnode refid="95758" relation="include">
        </childnode>
      </node>
      <node id="95801">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95791" relation="include">
        </childnode>
        <childnode refid="95802" relation="include">
        </childnode>
        <childnode refid="95748" relation="include">
        </childnode>
        <childnode refid="95769" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
        <childnode refid="95761" relation="include">
        </childnode>
      </node>
      <node id="95745">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
        <childnode refid="95746" relation="include">
        </childnode>
        <childnode refid="95750" relation="include">
        </childnode>
      </node>
      <node id="95761">
        <label>vector</label>
      </node>
      <node id="95741">
        <label>pxr/base/vt/hash.h</label>
        <link refid="vt_2hash_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95742" relation="include">
        </childnode>
        <childnode refid="95762" relation="include">
        </childnode>
        <childnode refid="95752" relation="include">
        </childnode>
      </node>
      <node id="95753">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="95738" relation="include">
        </childnode>
      </node>
      <node id="95805">
        <label>new</label>
      </node>
      <node id="95777">
        <label>pxr/base/gf/ilmbase_halfLimits.h</label>
        <link refid="ilmbase__half_limits_8h_source"/>
        <childnode refid="95778" relation="include">
        </childnode>
        <childnode refid="95775" relation="include">
        </childnode>
      </node>
      <node id="95752">
        <label>utility</label>
      </node>
      <node id="95796">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95766" relation="include">
        </childnode>
        <childnode refid="95785" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
      </node>
      <node id="95809">
        <label>BOOST_PP_ITERATE()</label>
      </node>
      <node id="95739">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="95771">
        <label>pxr/base/vt/traits.h</label>
        <link refid="vt_2traits_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95767" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
      </node>
      <node id="95783">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95742">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95743" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95754" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
        <childnode refid="95756" relation="include">
        </childnode>
        <childnode refid="95757" relation="include">
        </childnode>
        <childnode refid="95758" relation="include">
        </childnode>
        <childnode refid="95759" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
        <childnode refid="95752" relation="include">
        </childnode>
        <childnode refid="95761" relation="include">
        </childnode>
      </node>
      <node id="95751">
        <label>math.h</label>
      </node>
      <node id="95769">
        <label>iosfwd</label>
      </node>
      <node id="95802">
        <label>cstdlib</label>
      </node>
      <node id="95784">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95785" relation="include">
        </childnode>
        <childnode refid="95786" relation="include">
        </childnode>
      </node>
      <node id="95772">
        <label>pxr/base/vt/types.h</label>
        <link refid="base_2vt_2types_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95771" relation="include">
        </childnode>
        <childnode refid="95746" relation="include">
        </childnode>
        <childnode refid="95773" relation="include">
        </childnode>
        <childnode refid="95774" relation="include">
        </childnode>
        <childnode refid="95767" relation="include">
        </childnode>
        <childnode refid="95780" relation="include">
        </childnode>
        <childnode refid="95792" relation="include">
        </childnode>
        <childnode refid="95793" relation="include">
        </childnode>
        <childnode refid="95794" relation="include">
        </childnode>
        <childnode refid="95754" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
      </node>
      <node id="95794">
        <label>cstddef</label>
      </node>
      <node id="95773">
        <label>pxr/base/gf/declare.h</label>
        <link refid="base_2gf_2declare_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
      </node>
      <node id="95781">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95782" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95744" relation="include">
        </childnode>
        <childnode refid="95783" relation="include">
        </childnode>
        <childnode refid="95784" relation="include">
        </childnode>
        <childnode refid="95786" relation="include">
        </childnode>
      </node>
      <node id="95806">
        <label>boost/preprocessor/enum_params.hpp</label>
      </node>
      <node id="95793">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="95760">
        <label>type_traits</label>
      </node>
      <node id="95758">
        <label>set</label>
      </node>
      <node id="95766">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="95738" relation="include">
        </childnode>
      </node>
      <node id="95785">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="95739" relation="include">
        </childnode>
      </node>
      <node id="95803">
        <label>algorithm</label>
      </node>
      <node id="95754">
        <label>cstring</label>
      </node>
      <node id="95779">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
      </node>
      <node id="95808">
        <label>boost/preprocessor/repeat.hpp</label>
      </node>
      <node id="95757">
        <label>memory</label>
      </node>
      <node id="95795">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95796" relation="include">
        </childnode>
        <childnode refid="95781" relation="include">
        </childnode>
        <childnode refid="95753" relation="include">
        </childnode>
        <childnode refid="95783" relation="include">
        </childnode>
        <childnode refid="95797" relation="include">
        </childnode>
        <childnode refid="95786" relation="include">
        </childnode>
        <childnode refid="95800" relation="include">
        </childnode>
        <childnode refid="95755" relation="include">
        </childnode>
      </node>
      <node id="95787">
        <label>pxr/base/tf/hashset.h</label>
        <link refid="hashset_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95739" relation="include">
        </childnode>
        <childnode refid="95788" relation="include">
        </childnode>
      </node>
      <node id="95759">
        <label>typeindex</label>
      </node>
      <node id="95792">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="95763">
        <label>pxr/base/vt/streamOut.h</label>
        <link refid="stream_out_8h_source"/>
        <childnode refid="95736" relation="include">
        </childnode>
        <childnode refid="95737" relation="include">
        </childnode>
        <childnode refid="95764" relation="include">
        </childnode>
        <childnode refid="95770" relation="include">
        </childnode>
        <childnode refid="95769" relation="include">
        </childnode>
        <childnode refid="95762" relation="include">
        </childnode>
        <childnode refid="95760" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="95810">
        <label>pxr/base/vt/functions.h</label>
        <link refid="functions_8h"/>
        <childnode refid="95811" relation="include">
        </childnode>
      </node>
      <node id="95811">
        <label>pxr/base/vt/wrapArray.h</label>
        <link refid="wrap_array_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="functions_8h_1a750228a324fd776c5b60f8cc363722fc" prot="public" static="no">
        <name>VT_FUNCTIONS_MAX_ARGS</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="41" column="9" bodyfile="pxr/base/vt/functions.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="functions_8h_1a04db94d718693bbf251bbd7eca12be84" prot="public" static="no">
        <name>BOOST_PP_ITERATION_PARAMS_1</name>
        <initializer>(4, \
    (0, VT_FUNCTIONS_MAX_ARGS, &quot;pxr/base/vt/functions.h&quot;, 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="47" column="9" bodyfile="pxr/base/vt/functions.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="functions_8h_1aba467ac00c04bd7128b83e32926ed4af" prot="public" static="no">
        <name>VTFUNCTION_BOOL</name>
        <param><defname>funcname</defname></param>
        <param><defname>op</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="244" column="9" bodyfile="pxr/base/vt/functions.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="functions_8h_1af3d7be95511968984f4193ad27fbd13a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the two inputs contain equal values. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a13a312dd8e571b27c9bc37316340388d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtEqual</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtEqual</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1aeb57f2d6068543070c622d70bbea55a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a46ee14c25922ffbf60db069631ad4b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtNotEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtNotEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the two inputs contain inequal values. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a290de68e905d6f59bae84dcd6eb4942b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtNotEqual</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtNotEqual</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a1ab56028488089a071d476943e685c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtNotEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtNotEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1ae528015f586da47762472742fd709a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreater</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtGreater</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the first input contains values greater than those in the second input. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1af51e794cfa886012b9e495b95844560a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreater</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtGreater</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1af5721abda9064822ea19f5fde67d3737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreater</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtGreater</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a821d44418f5748d76a45fa8c3d61a179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLess</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtLess</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the first input contains values less than those in the second input. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1af7a425756a434405b1737d35f56f2d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLess</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtLess</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1ab3758b58631aae4c84390ef44596143f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLess</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtLess</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1aefb0ac2440a4c5d734027d19f7bd43a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreaterOrEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtGreaterOrEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the first input contains values greater than or equal to those in the second input. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a8638305bb719e64fc8d0f9e34afa1042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreaterOrEqual</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtGreaterOrEqual</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a9c12bd93968150382a00f34b18e245cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtGreaterOrEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtGreaterOrEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1aa9a85bf7327feed935b4ebbb83786ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLessOrEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtLessOrEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a bool array specifying, element-by-element, if the first input contains values less than or equal to those in the second input. </para>
        </briefdescription>
        <detaileddescription>
<para>The shape of the return array is the same as the shape of the largest input array.</para>
<para>If one input is a single element (either a single-element array or a scalar of the same type held in the array), it is compared to all the elements in the other array. Otherwise both arrays must have the same shape. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a2ccbb6eee77f5147c17e08725ca9d1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLessOrEqual</definition>
        <argsstring>(T const &amp;a, VtArray&lt; T &gt; const &amp;b)</argsstring>
        <name>VtLessOrEqual</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1ac9abd861bd973a98cc1f19e9ac6be709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtLessOrEqual</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a, T const &amp;b)</argsstring>
        <name>VtLessOrEqual</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a44ae40117a8a4ce40d89463bfa24d871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt;</type>
        <definition>VtArray&lt;T&gt; VtCat</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a0, VtArray&lt; T &gt; const &amp;a1,... VtArray&lt; T &gt; const &amp;aN)</argsstring>
        <name>VtCat</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a0</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>... <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>aN</declname>
        </param>
        <briefdescription>
<para>Concatenates arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is an array with length equal to the sum of the number of elements in the source arrays. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a94d190042a09aae63d39cea4e026ef48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool VtAnyTrue</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a)</argsstring>
        <name>VtAnyTrue</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns true if any element of input array is not VtZero, else false. </para>
        </briefdescription>
        <detaileddescription>
<para>Intended to be used to evaluate results of boolean operations on arrays, e.g. <programlisting><codeline><highlight class="normal">a<sp/>=<sp/>Vt.StringArray((3,),(&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;))</highlight></codeline>
<codeline><highlight class="normal">t<sp/>=<sp/>Vt.AnyTrue(Vt.Equal(a,&quot;bar&quot;))</highlight></codeline>
</programlisting></para>
<para>(This example, if you look carefully, evaluates this function not on the strings, but on the results of the comparison). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="195" column="1" bodyfile="pxr/base/vt/functions.h" bodystart="195" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="functions_8h_1a10e8acea4dec75349f1a5c6ddc9b33e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool VtAllTrue</definition>
        <argsstring>(VtArray&lt; T &gt; const &amp;a)</argsstring>
        <name>VtAllTrue</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns true if every element of input array is not VtZero, else false. </para>
        </briefdescription>
        <detaileddescription>
<para>Intended to be used to evaluate results of boolean operations on arrays, e.g. <programlisting><codeline><highlight class="normal">a<sp/>=<sp/>Vt.StringArray((3,),(&quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;))</highlight></codeline>
<codeline><highlight class="normal">t<sp/>=<sp/>Vt.AllTrue(Vt.Equal(a,&quot;bar&quot;))</highlight></codeline>
</programlisting></para>
<para>(This example, if you look carefully, evaluates this function not on the strings, but on the results of the comparison). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/functions.h" line="221" column="1" bodyfile="pxr/base/vt/functions.h" bodystart="221" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!BOOST_PP_IS_ITERATING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_VT_FUNCTIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_VT_FUNCTIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">pxr/base/vt/array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/enum_params.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/iterate.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/preprocessor/repeat.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VT_FUNCTIONS_MAX_ARGS<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>preprocessor<sp/>iterations<sp/>to<sp/>allow<sp/>various<sp/>functions<sp/>to<sp/>accept<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VtCat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_PP_ITERATION_PARAMS_1<sp/>(4,<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(0,<sp/>VT_FUNCTIONS_MAX_ARGS,<sp/>&quot;pxr/base/vt/functions.h&quot;,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>BOOST_PP_ITERATE()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Doc<sp/>headers<sp/>for<sp/>functions<sp/>that<sp/>are<sp/>generated<sp/>through<sp/>macros.<sp/><sp/>These<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decent<sp/>doxygen<sp/>(and<sp/>epydoc)<sp/>output<sp/>even<sp/>though<sp/>we<sp/>can&apos;t<sp/>put<sp/>them<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>real<sp/>functions<sp/>because<sp/>they&apos;re<sp/>expanded<sp/>through<sp/>boost<sp/>or<sp/>cpp<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>documentation<sp/>for<sp/>bool-result<sp/>array<sp/>comparison<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="functions_8h_1af3d7be95511968984f4193ad27fbd13a" kindref="member">VtEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="functions_8h_1af3d7be95511968984f4193ad27fbd13a" kindref="member">VtEqual</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="functions_8h_1af3d7be95511968984f4193ad27fbd13a" kindref="member">VtEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="functions_8h_1a46ee14c25922ffbf60db069631ad4b7a" kindref="member">VtNotEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="functions_8h_1a46ee14c25922ffbf60db069631ad4b7a" kindref="member">VtNotEqual</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="functions_8h_1a46ee14c25922ffbf60db069631ad4b7a" kindref="member">VtNotEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="functions_8h_1ae528015f586da47762472742fd709a6a" kindref="member">VtGreater</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="functions_8h_1ae528015f586da47762472742fd709a6a" kindref="member">VtGreater</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="functions_8h_1ae528015f586da47762472742fd709a6a" kindref="member">VtGreater</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="functions_8h_1a821d44418f5748d76a45fa8c3d61a179" kindref="member">VtLess</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="functions_8h_1a821d44418f5748d76a45fa8c3d61a179" kindref="member">VtLess</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="functions_8h_1a821d44418f5748d76a45fa8c3d61a179" kindref="member">VtLess</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="functions_8h_1aefb0ac2440a4c5d734027d19f7bd43a6" kindref="member">VtGreaterOrEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="functions_8h_1aefb0ac2440a4c5d734027d19f7bd43a6" kindref="member">VtGreaterOrEqual</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="functions_8h_1aefb0ac2440a4c5d734027d19f7bd43a6" kindref="member">VtGreaterOrEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="functions_8h_1aa9a85bf7327feed935b4ebbb83786ef5" kindref="member">VtLessOrEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="functions_8h_1aa9a85bf7327feed935b4ebbb83786ef5" kindref="member">VtLessOrEqual</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="functions_8h_1aa9a85bf7327feed935b4ebbb83786ef5" kindref="member">VtLessOrEqual</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>provide<sp/>documentation<sp/>for<sp/>functions<sp/>with<sp/>variable<sp/>numbers<sp/>of<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="functions_8h_1a44ae40117a8a4ce40d89463bfa24d871" kindref="member">VtCat</ref>(<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a0,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a1,<sp/>...<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;aN);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fixed-number-of-arguments<sp/>functions<sp/>go<sp/>here<sp/>(no<sp/>preprocessor<sp/>iteration<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle<sp/>multiple<sp/>args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="195" refid="functions_8h_1a94d190042a09aae63d39cea4e026ef48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="functions_8h_1a94d190042a09aae63d39cea4e026ef48" kindref="member">VtAnyTrue</ref>(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="group___s_t_l___a_p_i_1ga644718bb2fb240de962dc3c9a1fdf0dc" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>a.<ref refid="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>!=<sp/>VtZero&lt;T&gt;())</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="functions_8h_1a10e8acea4dec75349f1a5c6ddc9b33e9" refkind="member"><highlight class="normal"><ref refid="functions_8h_1a10e8acea4dec75349f1a5c6ddc9b33e9" kindref="member">VtAllTrue</ref>(<ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="group___s_t_l___a_p_i_1ga644718bb2fb240de962dc3c9a1fdf0dc" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>a.<ref refid="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>==<sp/>VtZero&lt;T&gt;())</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macro<sp/>defining<sp/>functions<sp/>for<sp/>element-by-element<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operators<sp/>(i.e.<sp/>Equal,<sp/>etc).<sp/><sp/>There<sp/>are<sp/>three<sp/>versions;<sp/>each<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>VtBoolArray<sp/>of<sp/>the<sp/>same<sp/>shape<sp/>as<sp/>the<sp/>largest<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*)<sp/>two<sp/>input<sp/>arrays:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>If<sp/>one<sp/>array<sp/>contains<sp/>a<sp/>single<sp/>element,<sp/>it<sp/>is<sp/>compared<sp/>to<sp/>all<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>in<sp/>the<sp/>other<sp/>array.<sp/><sp/>Otherwise<sp/>both<sp/>arrays<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*)<sp/>scalar<sp/>and<sp/>array:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>The<sp/>scalar<sp/>is<sp/>compared<sp/>to<sp/>all<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*)<sp/>array<sp/>and<sp/>scalar:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>The<sp/>same<sp/>as<sp/>scalar<sp/>and<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VTFUNCTION_BOOL(funcname,op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor">template&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor">VtArray&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor">funcname(T<sp/>const<sp/>&amp;scalar,<sp/>VtArray&lt;T&gt;<sp/>const<sp/>&amp;vec)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VtArray&lt;bool&gt;<sp/>ret(vec.size());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>vec.size();<sp/>i<sp/>!=<sp/>n;<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>(scalar<sp/>op<sp/>vec[i]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor">template&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor">VtArray&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor">funcname(VtArray&lt;T&gt;<sp/>const<sp/>&amp;vec,<sp/>T<sp/>const<sp/>&amp;scalar)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VtArray&lt;bool&gt;<sp/>ret(vec.size());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>vec.size();<sp/>i<sp/>!=<sp/>n;<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>(vec[i]<sp/>op<sp/>scalar);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor">template&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor">VtArray&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor">funcname(VtArray&lt;T&gt;<sp/>const<sp/>&amp;a,<sp/>VtArray&lt;T&gt;<sp/>const<sp/>&amp;b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(a.empty()<sp/>||<sp/>b.empty())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>VtArray&lt;bool&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(a.size()<sp/>==<sp/>1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>funcname(a[0],<sp/>b);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(b.size()<sp/>==<sp/>1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>funcname(a,<sp/>b[0]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(a.size()<sp/>==<sp/>b.size())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VtArray&lt;bool&gt;<sp/>ret(a.size());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>a.size();<sp/>i<sp/>!=<sp/>n;<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>(a[i]<sp/>op<sp/>b[i]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ret;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TF_CODING_ERROR(&quot;Non-conforming<sp/>inputs.&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>VtArray&lt;bool&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1af3d7be95511968984f4193ad27fbd13a" kindref="member">VtEqual</ref>,==)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1a46ee14c25922ffbf60db069631ad4b7a" kindref="member">VtNotEqual</ref>,!=)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1ae528015f586da47762472742fd709a6a" kindref="member">VtGreater</ref>,&gt;)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1a821d44418f5748d76a45fa8c3d61a179" kindref="member">VtLess</ref>,&lt;)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1aefb0ac2440a4c5d734027d19f7bd43a6" kindref="member">VtGreaterOrEqual</ref>,&gt;=)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">VTFUNCTION_BOOL(<ref refid="functions_8h_1aa9a85bf7327feed935b4ebbb83786ef5" kindref="member">VtLessOrEqual</ref>,&lt;=)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_VT_FUNCTIONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>BOOST_PP_IS_ITERATING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variable-number-of-arguments<sp/>functions<sp/>go<sp/>here;<sp/>preprocessor<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes<sp/>this<sp/>file<sp/>again<sp/>and<sp/>again,<sp/>but<sp/>turns<sp/>off<sp/>the<sp/>pieces<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>use<sp/>for<sp/>a<sp/>particular<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>N<sp/>BOOST_PP_ITERATION()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_PP_ITERATION_FLAGS()<sp/>==<sp/>0<sp/>//<sp/>VtCat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VtCat_SIZE(dummy,<sp/>n,<sp/>dummy2)<sp/>newSize<sp/>+=<sp/>s##n.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VtCat_COPY(dummy,<sp/>n,<sp/>dummy2)<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s##n.size();<sp/>++i)<sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[offset+i]<sp/>=<sp/>s##n[i];<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>s##n.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>real<sp/>documentation<sp/>is<sp/>above<sp/>(for<sp/>doxygen<sp/>purposes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><ref refid="functions_8h_1a44ae40117a8a4ce40d89463bfa24d871" kindref="member">VtCat</ref>(<sp/>BOOST_PP_ENUM_PARAMS(N,<sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_PP_REPEAT(<sp/>N,<sp/>VtCat_SIZE,<sp/>ignored<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref>();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>array<sp/>with<sp/>flattened<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vt_array" kindref="compound">VtArray&lt;T&gt;</ref><sp/>ret(newSize);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>it<sp/>with<sp/>data<sp/>from<sp/>old<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>N<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_PP_REPEAT(<sp/>N,<sp/>VtCat_COPY,<sp/>ignored<sp/>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VtCat_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VtCat_COPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_PP_ITERATION_FLAGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_PP_IS_ITERATING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="pxr/base/vt/functions.h"/>
  </compounddef>
</doxygen>
