<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_vt_array" kind="class" language="C++" prot="public">
    <compoundname>VtArray</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Vt_ArrayBase</basecompoundref>
    <includes refid="array_8h" local="no">array.h</includes>
    <innerclass refid="class_vt_array_1_1___streamer" prot="private">VtArray::_Streamer</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>ELEM</declname>
        <defname>ELEM</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" prot="public" static="no">
        <type>ELEM</type>
        <definition>typedef ELEM ElementType</definition>
        <argsstring></argsstring>
        <name>ElementType</name>
        <briefdescription>
<para>Type this array holds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="231" column="1" bodyfile="pxr/base/vt/array.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_vt_array_1a33e4c874572a054d0e3139440aa5baa3" prot="public" static="no">
        <type>ELEM</type>
        <definition>typedef ELEM value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="232" column="1" bodyfile="pxr/base/vt/array.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> *</type>
        <definition>using iterator =  ElementType *</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="238" column="1" bodyfile="pxr/base/vt/array.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> const *</type>
        <definition>using const_iterator =  ElementType const *</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Const iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="240" column="1" bodyfile="pxr/base/vt/array.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga92b881db836646f4039adcbb73c8595f" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" kindref="member">iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>Reverse iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="243" column="1" bodyfile="pxr/base/vt/array.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>Reverse const iterator type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="245" column="1" bodyfile="pxr/base/vt/array.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga062a81994c6351d45faae2eeae251571" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> &amp;</type>
        <definition>typedef ElementType&amp; reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Reference type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="248" column="1" bodyfile="pxr/base/vt/array.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> const  &amp;</type>
        <definition>typedef ElementType const&amp; const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>Const reference type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="250" column="1" bodyfile="pxr/base/vt/array.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga554a8ecb4d7d6ad1b90e6cdd34ab7406" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> *</type>
        <definition>typedef ElementType* pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>Pointer type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="252" column="1" bodyfile="pxr/base/vt/array.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_t_l___a_p_i_1ga8aa6ec70e98bab51e33e8c7a31dbeeeb" prot="public" static="no">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> const  *</type>
        <definition>typedef ElementType const* const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>Const pointer type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="254" column="1" bodyfile="pxr/base/vt/array.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_vt_array_1a0e8acdaca26ad930d0d78ff0ddf2e27a" prot="private" static="no" mutable="no">
        <type>value_type *</type>
        <definition>value_type* _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="930" column="1" bodyfile="pxr/base/vt/array.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_vt_array_1ac844dff477dd997f5e9b070dcb172810" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>()</argsstring>
        <name>VtArray</name>
        <briefdescription>
<para>Create an empty array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="259" column="1" bodyfile="pxr/base/vt/array.h" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1aad405bd675ae88fb03f0a7b4488f6c05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LegacyInputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(LegacyInputIterator first, LegacyInputIterator last, typename std::enable_if&lt; !std::is_integral&lt; LegacyInputIterator &gt;::value, void &gt;::type *=nullptr)</argsstring>
        <name>VtArray</name>
        <param>
          <type>LegacyInputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>LegacyInputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !std::is_integral&lt; LegacyInputIterator &gt;::value, void &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Create an array from a pair of iterators. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">VtArray&lt;T&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal">v.assign(first,<sp/>last);</highlight></codeline>
</programlisting></para>
<para>Note we use enable_if with a dummy parameter here to avoid clashing with our other constructor with the following signature:</para>
<para><ref refid="class_vt_array" kindref="compound">VtArray</ref>(size_t n, value_type const &amp;value = value_type()) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="274" column="1" bodyfile="pxr/base/vt/array.h" bodystart="274" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a22b17ddd095c48598ce8c9a7928df5d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(Vt_ArrayForeignDataSource *foreignSrc, ElementType *data, size_t size, bool addRef=true)</argsstring>
        <name>VtArray</name>
        <param>
          <type>Vt_ArrayForeignDataSource *</type>
          <declname>foreignSrc</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>addRef</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create an array with foreign source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="283" column="1" bodyfile="pxr/base/vt/array.h" bodystart="283" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a960f197423f674d35db08db66e2ac363" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(VtArray const &amp;other)</argsstring>
        <name>VtArray</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy <computeroutput>other</computeroutput>. The new array shares underlying data with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="294" column="1" bodyfile="pxr/base/vt/array.h" bodystart="294" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1ac92b9e8331b6ee6c22910c4555982d07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(VtArray &amp;&amp;other)</argsstring>
        <name>VtArray</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move from <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The new array takes ownership of <computeroutput>other&apos;s</computeroutput> underlying data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="309" column="1" bodyfile="pxr/base/vt/array.h" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a818505c305e725560f75a5a267eb1ebd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(std::initializer_list&lt; ELEM &gt; initializerList)</argsstring>
        <name>VtArray</name>
        <param>
          <type>std::initializer_list&lt; ELEM &gt;</type>
          <declname>initializerList</declname>
        </param>
        <briefdescription>
<para>Initialize array from the contents of a <computeroutput>initializerList</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="315" column="1" bodyfile="pxr/base/vt/array.h" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a9f7f62b1f6f1d8b753ebb03ac845d5e0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(size_t n)</argsstring>
        <name>VtArray</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Create an array filled with <computeroutput>n</computeroutput> value-initialized elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="321" column="1" bodyfile="pxr/base/vt/array.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1afe0d9667e60ed7ace7f142f8ef471e51" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>VtArray</definition>
        <argsstring>(size_t n, value_type const &amp;value)</argsstring>
        <name>VtArray</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>value_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create an array filled with <computeroutput>n</computeroutput> copies of <computeroutput>value</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="327" column="1" bodyfile="pxr/base/vt/array.h" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1acec8dea7f028c52ab2a7143f60757959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
        <definition>VtArray&amp; operator=</definition>
        <argsstring>(VtArray const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assign from <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This array shares underlying data with <computeroutput>other</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="334" column="1" bodyfile="pxr/base/vt/array.h" bodystart="334" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a4c13515ebe7d692947db35a13b6a8b7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
        <definition>VtArray&amp; operator=</definition>
        <argsstring>(VtArray &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assign from <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This array takes ownership of <computeroutput>other&apos;s</computeroutput> underlying data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="344" column="1" bodyfile="pxr/base/vt/array.h" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a3a21732cab3ccd19a4f782f4c82ad2bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
        <definition>VtArray&amp; operator=</definition>
        <argsstring>(std::initializer_list&lt; ELEM &gt; initializerList)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::initializer_list&lt; ELEM &gt;</type>
          <declname>initializerList</declname>
        </param>
        <briefdescription>
<para>Replace current array contents with those in <computeroutput>initializerList</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="355" column="1" bodyfile="pxr/base/vt/array.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1affd499949d100bafe41fccdcd543a631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~VtArray</definition>
        <argsstring>()</argsstring>
        <name>~VtArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="360" column="1" bodyfile="pxr/base/vt/array.h" bodystart="360" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1accceba216d37880d7282426f32609bea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const  &amp;</type>
        <definition>VtArray const&amp; AsConst</definition>
        <argsstring>() const noexcept</argsstring>
        <name>AsConst</name>
        <briefdescription>
<para>Return *this as a const reference. </para>
        </briefdescription>
        <detaileddescription>
<para>This ensures that all operations on the result do not mutate and thus are safe to invoke concurrently with other non-mutating operations, and will never cause a copy-on-write detach.</para>
<para>Note that the return is a const reference to this object, so it is only valid within the lifetime of this array object. Take special care invoking <ref refid="class_vt_array_1accceba216d37880d7282426f32609bea" kindref="member">AsConst()</ref> on <ref refid="class_vt_array" kindref="compound">VtArray</ref> temporaries/rvalues. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="370" column="1" bodyfile="pxr/base/vt/array.h" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gad69bd11391be1a1dba5c8202259664f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" kindref="member">iterator</ref></type>
        <definition>iterator begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return a non-const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="379" column="1" bodyfile="pxr/base/vt/array.h" bodystart="379" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gacad38d52497a975bfb6f2f6acd76631f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" kindref="member">iterator</ref></type>
        <definition>iterator end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a non-const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="382" column="1" bodyfile="pxr/base/vt/array.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga29305669b60ca1680752e2fc3592ba99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
        <definition>const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return a const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="385" column="1" bodyfile="pxr/base/vt/array.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaccf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
        <definition>const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return a const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="387" column="1" bodyfile="pxr/base/vt/array.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga39112ae08f6ffc7ee58c6aa79772e094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
        <definition>const_iterator cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Return a const iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="390" column="1" bodyfile="pxr/base/vt/array.h" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga93791e61ab486b4022c389d634b4facc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
        <definition>const_iterator cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Return a const iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="392" column="1" bodyfile="pxr/base/vt/array.h" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gacea44ed500a54b2bb93e16b86e81afa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga92b881db836646f4039adcbb73c8595f" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a non-const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="396" column="1" bodyfile="pxr/base/vt/array.h" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga68c599ddcbfddc65170de524ac165e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga92b881db836646f4039adcbb73c8595f" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="399" column="1" bodyfile="pxr/base/vt/array.h" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaf086cceac199bd735c7a97c2a8d7ed21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="402" column="1" bodyfile="pxr/base/vt/array.h" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga07da1fdc890b6949f1a20a1961c6fc44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a const reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="406" column="1" bodyfile="pxr/base/vt/array.h" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga81f80a31923e85af56a7b1ae0712a33b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="411" column="1" bodyfile="pxr/base/vt/array.h" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gabef9dfc7607c7e1a3854788ba56a4f34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Return a const reverse iterator to the start of the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="413" column="1" bodyfile="pxr/base/vt/array.h" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga36e4d11a00a3572c87bf7e913e9b5ca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga554a8ecb4d7d6ad1b90e6cdd34ab7406" kindref="member">pointer</ref></type>
        <definition>pointer data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a non-const pointer to this array&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="417" column="1" bodyfile="pxr/base/vt/array.h" bodystart="417" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga3428c77f74e61bb1e0e4a836e2b68004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga8aa6ec70e98bab51e33e8c7a31dbeeeb" kindref="member">const_pointer</ref></type>
        <definition>const_pointer data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a const pointer to this array&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="419" column="1" bodyfile="pxr/base/vt/array.h" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga1890be7d2bb072293497cff06617c9ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga8aa6ec70e98bab51e33e8c7a31dbeeeb" kindref="member">const_pointer</ref></type>
        <definition>const_pointer cdata</definition>
        <argsstring>() const</argsstring>
        <name>cdata</name>
        <briefdescription>
<para>Return a const pointer to the data held by this array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="421" column="1" bodyfile="pxr/base/vt/array.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Initializes a new element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" kindref="member">push_back(ElementType const&amp;)</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" kindref="member">push_back(ElementType&amp;&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="429" column="1" bodyfile="pxr/base/vt/array.h" bodystart="429" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void push_back</definition>
        <argsstring>(ElementType const &amp;element)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> const &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Appends an element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" kindref="member">emplace_back</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" kindref="member">push_back(ElementType&amp;&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="459" column="1" bodyfile="pxr/base/vt/array.h" bodystart="459" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void push_back</definition>
        <argsstring>(ElementType &amp;&amp;element)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Appends an element at the end of the array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned.</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" kindref="member">emplace_back</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" kindref="member">push_back(ElementType const&amp;)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="468" column="1" bodyfile="pxr/base/vt/array.h" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga058bda4957df6a97b1ea6c9fd783f672" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Remove the last element of an array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is first copied if it is not uniquely owned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="474" column="1" bodyfile="pxr/base/vt/array.h" bodystart="474" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the total number of elements in this array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="488" column="1" bodyfile="pxr/base/vt/array.h" bodystart="488" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga7223528283cd4e5872e0cc716bf9bd9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Return the number of items this container can grow to hold without triggering a (re)allocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if the underlying data is not uniquely owned, a reallocation can occur upon object insertion even if there is remaining capacity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="494" column="1" bodyfile="pxr/base/vt/array.h" bodystart="494" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga3407699345c5de0bb98eb92ed03e2f72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Return a theoretical maximum size limit for the container. </para>
        </briefdescription>
        <detaileddescription>
<para>In practice this size is unachievable due to the amount of available memory or other system limitations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="506" column="1" bodyfile="pxr/base/vt/array.h" bodystart="506" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga644718bb2fb240de962dc3c9a1fdf0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if this array contains no elements, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="514" column="1" bodyfile="pxr/base/vt/array.h" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga38219a474fc83b17becfa5838a06db37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reserve</definition>
        <argsstring>(size_t num)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Ensure enough memory is allocated to hold <computeroutput>num</computeroutput> elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this currently does not ensure that the underlying data is uniquely owned. If that is desired, invoke a method like <ref refid="group___s_t_l___a_p_i_1ga36e4d11a00a3572c87bf7e913e9b5ca1" kindref="member">data()</ref> first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="519" column="1" bodyfile="pxr/base/vt/array.h" bodystart="519" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga6a48363b4355f6f5b441637774f79a59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga062a81994c6351d45faae2eeae251571" kindref="member">reference</ref></type>
        <definition>reference front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return a non-const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="533" column="1" bodyfile="pxr/base/vt/array.h" bodystart="533" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga0ae6b4f9719202f7ddb334c16fb03d80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" kindref="member">const_reference</ref></type>
        <definition>const_reference front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return a const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="536" column="1" bodyfile="pxr/base/vt/array.h" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaeea74d6d743836c57fef3d0d4e6c982b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" kindref="member">const_reference</ref></type>
        <definition>const_reference cfront</definition>
        <argsstring>() const</argsstring>
        <name>cfront</name>
        <briefdescription>
<para>Return a const reference to the first element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="539" column="1" bodyfile="pxr/base/vt/array.h" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaf71e6c1eccbc12e9339c00a86a981a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga062a81994c6351d45faae2eeae251571" kindref="member">reference</ref></type>
        <definition>reference back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Return a reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>The underlying data is copied if it is not uniquely owned. Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="544" column="1" bodyfile="pxr/base/vt/array.h" bodystart="544" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga61772c77ad2abfbb296912e7281e154c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" kindref="member">const_reference</ref></type>
        <definition>const_reference back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>Return a const reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="547" column="1" bodyfile="pxr/base/vt/array.h" bodystart="547" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga6c4a8ea059e1302891cfde5aa1707e07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" kindref="member">const_reference</ref></type>
        <definition>const_reference cback</definition>
        <argsstring>() const</argsstring>
        <name>cback</name>
        <briefdescription>
<para>Return a const reference to the last element in this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Invokes undefined behavior if the array is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="550" column="1" bodyfile="pxr/base/vt/array.h" bodystart="550" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga77b12cbee1acfefe67940bb34d6d02d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, value-initialize any newly added elements. For example, calling resize(10) on an array of size 5 would change the size to 10, the first 5 elements would be left unchanged and the last 5 elements would be value-initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="557" column="1" bodyfile="pxr/base/vt/array.h" bodystart="557" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gab3f1a15635e98c1c919fe506803547cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type const &amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="563" column="1" bodyfile="pxr/base/vt/array.h" bodystart="563" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga04046f3c8c4df8067d8fa4dcff578d96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type &amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="572" column="1" bodyfile="pxr/base/vt/array.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga7b981212a5a3e3e992df0aae2de7aab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, value_type &amp;&amp;value)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>value_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by copying <computeroutput>value</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="578" column="1" bodyfile="pxr/base/vt/array.h" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gae0e1201e90eefe8e8bfa40f67e6cfa8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FillElemsFn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void resize</definition>
        <argsstring>(size_t newSize, FillElemsFn &amp;&amp;fillElems)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <param>
          <type>FillElemsFn &amp;&amp;</type>
          <declname>fillElems</declname>
        </param>
        <briefdescription>
<para>Resize this array. </para>
        </briefdescription>
        <detaileddescription>
<para>Preserve existing elements that remain, initialize any newly added elements by calling <computeroutput>fillElems(first, last)</computeroutput>. Note that this function is passed pointers to uninitialized memory, so the elements must be filled with something like placement-new. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="587" column="1" bodyfile="pxr/base/vt/array.h" bodystart="587" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gac8bb3912a3ce86b15842e79d0b421204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Equivalent to resize(0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="642" column="1" bodyfile="pxr/base/vt/array.h" bodystart="642" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga29790c28710ec0e64b48c2f4edd0b08c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" kindref="member">iterator</ref></type>
        <definition>iterator erase</definition>
        <argsstring>(const_iterator pos)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Removes a single element at <computeroutput>pos</computeroutput> from the array. </para>
        </briefdescription>
        <detaileddescription>
<para>To match the behavior of std::vector, returns an iterator pointing to the position following the removed element.</para>
<para>Since the returned iterator is mutable, when the array is not uniquely owned, a copy will be required.</para>
<para>Erase invalidates all iterators (unlike std::vector where iterators prior to <computeroutput>pos</computeroutput> remain valid).</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1gaa3af768723cd533218ea3d83af440713" kindref="member">erase(const_iterator, const_iterator)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="670" column="1" bodyfile="pxr/base/vt/array.h" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1gaa3af768723cd533218ea3d83af440713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" kindref="member">iterator</ref></type>
        <definition>iterator erase</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Remove a range of elements [<computeroutput>first</computeroutput>, <computeroutput>last</computeroutput>) from the array. </para>
        </briefdescription>
        <detaileddescription>
<para>To match the behavior of std::vector, returns an iterator at the position following the removed element. If no elements are removed, a non-const iterator pointing to last will be returned.</para>
<para>Since the returned iterator is mutable, when the array is not uniquely owned, a copy will be required even when the contents are unchanged.</para>
<para>Erase invalidates all iterators (unlike std::vector where iterators prior to <computeroutput>first</computeroutput> remain valid).</para>
<para><simplesect kind="see"><para><ref refid="group___s_t_l___a_p_i_1ga29790c28710ec0e64b48c2f4edd0b08c" kindref="member">erase(const_iterator)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="690" column="1" bodyfile="pxr/base/vt/array.h" bodystart="690" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga9fe001f2e5e60d621aae49ff7426656e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ForwardIter</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_integral&lt; ForwardIter &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_integral&lt;ForwardIter&gt;::value&gt;::type assign</definition>
        <argsstring>(ForwardIter first, ForwardIter last)</argsstring>
        <name>assign</name>
        <param>
          <type>ForwardIter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ForwardIter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Assign array contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">array.resize(std::distance(first,<sp/>last));</highlight></codeline>
<codeline><highlight class="normal">std::copy(first,<sp/>last,<sp/>array.begin());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="742" column="1" bodyfile="pxr/base/vt/array.h" bodystart="742" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga5cd26abc6cd03d02552ee7858024aab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(size_t n, const value_type &amp;fill)</argsstring>
        <name>assign</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const value_type &amp;</type>
          <declname>fill</declname>
        </param>
        <briefdescription>
<para>Assign array contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to: <programlisting><codeline><highlight class="normal">array.resize(n);</highlight></codeline>
<codeline><highlight class="normal">std::fill(array.begin(),<sp/>array.end(),<sp/>fill);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="759" column="1" bodyfile="pxr/base/vt/array.h" bodystart="759" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga057c4b4b4b354783b2bc0887dccc0d7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void assign</definition>
        <argsstring>(std::initializer_list&lt; ELEM &gt; initializerList)</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; ELEM &gt;</type>
          <declname>initializerList</declname>
        </param>
        <briefdescription>
<para>Assign array contents via intializer list Equivalent to: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">array.assign(list.begin(),<sp/>list.end());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="775" column="1" bodyfile="pxr/base/vt/array.h" bodystart="775" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="group___s_t_l___a_p_i_1ga47aa265438facb25492ef73d389ca718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(VtArray &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this array with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="780" column="1" bodyfile="pxr/base/vt/array.h" bodystart="780" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a6e148cc96aeb6e40307479143a56cffe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> &amp;</type>
        <definition>ElementType&amp; operator[]</definition>
        <argsstring>(size_t index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Allows usage of [i]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="789" column="1" bodyfile="pxr/base/vt/array.h" bodystart="789" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1aed82449479413fcb5cf46f383df9cfc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" kindref="member">ElementType</ref> const  &amp;</type>
        <definition>ElementType const&amp; operator[]</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Allows usage of [i]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="794" column="1" bodyfile="pxr/base/vt/array.h" bodystart="794" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a6db85fd7df8df8b5f081529d045e9640" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsIdentical</definition>
        <argsstring>(VtArray const &amp;other) const</argsstring>
        <name>IsIdentical</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests if two arrays are identical, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>that they share the same underlying copy-on-write data. See also <ref refid="class_vt_array_1afb613afe18f30a139c9d4f536b109995" kindref="member">operator==()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="800" column="1" bodyfile="pxr/base/vt/array.h" bodystart="800" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1afb613afe18f30a139c9d4f536b109995" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(VtArray const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests two arrays for equality. See also <ref refid="class_vt_array_1a6db85fd7df8df8b5f081529d045e9640" kindref="member">IsIdentical()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="808" column="1" bodyfile="pxr/base/vt/array.h" bodystart="808" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1afc68a4a8f41c1ecdba4c008f7c0c52b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(VtArray const &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Tests two arrays for inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="815" column="1" bodyfile="pxr/base/vt/array.h" bodystart="815" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a634a3776b6a94d283a352d49aaca459e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Vt_ShapeData const  *</type>
        <definition>Vt_ShapeData const* _GetShapeData</definition>
        <argsstring>() const</argsstring>
        <name>_GetShapeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="821" column="1" bodyfile="pxr/base/vt/array.h" bodystart="821" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a8db90db34a81e33f3c9681d31dd7e55b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Vt_ShapeData *</type>
        <definition>Vt_ShapeData* _GetShapeData</definition>
        <argsstring>()</argsstring>
        <name>_GetShapeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="824" column="1" bodyfile="pxr/base/vt/array.h" bodystart="824" bodyend="826"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_vt_array_1a520d51ec31cedfd87feee5982176e88d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const VtArray &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Outputs a comma-separated list of the values in the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="841" column="1" bodyfile="pxr/base/vt/array.h" bodystart="841" bodyend="845"/>
      </memberdef>
      <memberdef kind="friend" id="class_vt_array_1a6b50d8a9e8b74f27e585e72c3124c4fe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(VtArray &amp;lhs, VtArray &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Swap array contents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="848" column="1" bodyfile="pxr/base/vt/array.h" bodystart="848" bodyend="850"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_vt_array_1a6c3de556544457cc504cfca419bdf09c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _DetachIfNotUnique</definition>
        <argsstring>()</argsstring>
        <name>_DetachIfNotUnique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="852" column="1" bodyfile="pxr/base/vt/array.h" bodystart="852" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1ad556b5b10f50dff2c2ac91bea2fff2d6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsUnique</definition>
        <argsstring>() const</argsstring>
        <name>_IsUnique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="862" column="1" bodyfile="pxr/base/vt/array.h" bodystart="862" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1ab74959617b1b93d6ed28f005e2ef218c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _CapacityForSize</definition>
        <argsstring>(size_t sz) const</argsstring>
        <name>_CapacityForSize</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="867" column="1" bodyfile="pxr/base/vt/array.h" bodystart="867" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a14b450e6c4e233f2ca1248e185bd1589" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type *</type>
        <definition>value_type* _AllocateNew</definition>
        <argsstring>(size_t capacity)</argsstring>
        <name>_AllocateNew</name>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="876" column="1" bodyfile="pxr/base/vt/array.h" bodystart="876" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1a655a9ced10d6a1c1c17351161dcfa591" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type *</type>
        <definition>value_type* _AllocateCopy</definition>
        <argsstring>(value_type *src, size_t newCapacity, size_t numToCopy)</argsstring>
        <name>_AllocateCopy</name>
        <param>
          <type>value_type *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newCapacity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numToCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="893" column="1" bodyfile="pxr/base/vt/array.h" bodystart="893" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="class_vt_array_1abc4cd3fec6983b192ed33b24886ecc09" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _DecRef</definition>
        <argsstring>()</argsstring>
        <name>_DecRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/vt/array.h" line="901" column="1" bodyfile="pxr/base/vt/array.h" bodystart="901" bodyend="928"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an arbitrary dimensional rectangular container class. </para>
    </briefdescription>
    <detaileddescription>
<para>Originally, <ref refid="class_vt_array" kindref="compound">VtArray</ref> was built to mimic the arrays in menv2x&apos;s MDL language, but since <ref refid="class_vt_array" kindref="compound">VtArray</ref> has typed elements, the multidimensionality has found little use. For example, if you have only scalar elements, then to represent a list of vectors you need a two dimensional array. To represent a list of matrices you need a three dimensional array. However with VtArray&lt;GfVec3d&gt; and VtArray&lt;GfMatrix4d&gt;, the <ref refid="class_vt_array" kindref="compound">VtArray</ref> is one dimensional and the extra dimensions are encoded in the element types themselves.</para>
<para>For this reason, <ref refid="class_vt_array" kindref="compound">VtArray</ref> has been moving toward being more like std::vector, and it now has much of std::vector&apos;s API, but there are still important differences.</para>
<para>First, <ref refid="class_vt_array" kindref="compound">VtArray</ref> shares data between instances using a copy-on-write scheme. This means that making copies of <ref refid="class_vt_array" kindref="compound">VtArray</ref> instances is cheap: it only copies the pointer to the data. But on the other hand, invoking any non-const member function incurs a copy of the underlying data if it is not uniquely owned. For example, assume &apos;a&apos; and &apos;b&apos; are VtArray&lt;int&gt;:</para>
<para><programlisting><codeline><highlight class="normal">a<sp/>=<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>No<sp/>copy;<sp/>a<sp/>and<sp/>b<sp/>now<sp/>share<sp/>ownership<sp/>of<sp/>underlying<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">a[0]<sp/>=<sp/>123;<sp/><sp/>//<sp/>A<sp/>copy<sp/>is<sp/>incurred,<sp/>to<sp/>detach<sp/>a&apos;s<sp/>data<sp/>from<sp/>b.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>a<sp/>and<sp/>b<sp/>no<sp/>longer<sp/>share<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">a[1]<sp/>=<sp/>234;<sp/><sp/>//<sp/>No<sp/>copy:<sp/>a&apos;s<sp/>data<sp/>is<sp/>uniquely<sp/>owned<sp/>by<sp/>a.</highlight></codeline>
</programlisting></para>
<para>Note that since all non-const member functions will potentially cause a copy, it&apos;s possible to accidentally incur a copy even when unintended, or when no actual data mutation occurs. For example:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(VtArray&lt;int&gt;::iterator<sp/>i<sp/>=<sp/>a.begin(),<sp/>end<sp/>=<sp/>a.end();<sp/>i<sp/>!=<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>sum<sp/>+=<sp/>*i;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Invoking a.begin() here will incur a copy if a&apos;s data is shared. This is required since it&apos;s possible to mutate the data through the returned iterator, even though the subsequent code doesn&apos;t do any mutation. This can be avoided by explicitly const-iterating like the following:</para>
<para><programlisting><codeline><highlight class="normal">int<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(VtArray&lt;int&gt;::const_iterator<sp/>i<sp/>=<sp/>a.cbegin(),<sp/>end<sp/>=<sp/>a.cend();<sp/>i<sp/>!=<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>sum<sp/>+=<sp/>*i;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This can be quite subtle. In C++, calling a member function that has const and non-const overloads on a non-const object must invoke the non-const version, even if the const version would suffice. So something as simple this:</para>
<para><programlisting><codeline><highlight class="normal">float<sp/>x<sp/>=<sp/>array[123];</highlight></codeline>
</programlisting></para>
<para>Invokes the non-const operator[] if <computeroutput>array</computeroutput> is non-const. That means this kind of benign looking code can cause a copy-on-write detachment of the entire array, and thus is not safe to invoke concurrently with any other member function. If we were building this class today we would make different choices about this API, but changing this now is a gargantuan task, so it remains.</para>
<para>So, it is best practice to ensure you use const <ref refid="class_vt_array" kindref="compound">VtArray</ref>, or const <ref refid="class_vt_array" kindref="compound">VtArray</ref> &amp;, or <ref refid="class_vt_array_1accceba216d37880d7282426f32609bea" kindref="member">VtArray::AsConst()</ref>, as well as the <computeroutput>c</computeroutput>-prefixed member functions like <ref refid="group___s_t_l___a_p_i_1ga39112ae08f6ffc7ee58c6aa79772e094" kindref="member">cbegin()</ref>/cend(), <ref refid="group___s_t_l___a_p_i_1gaeea74d6d743836c57fef3d0d4e6c982b" kindref="member">cfront()</ref>/cback() to avoid these pitfalls when your intent is not to mutate the array.</para>
<para>Regarding thread safety, for the same reasons spelled out above, all mutating member functions must be invoked exclusively to all other member functions, even if they are invoked in a way that does not mutate (as in the operator[] example above). This is the same general rule that the STL abides by.</para>
<para>Also, and again for the same reasons, all mutating member functions can invalidate iterators, even if the member functions are invoked in a way that does not mutate (as in the operator[] example above).</para>
<para>The TfEnvSetting &apos;VT_LOG_STACK_ON_ARRAY_DETACH_COPY&apos; can be set to help determine where unintended copy-on-write detaches come from. When set, <ref refid="class_vt_array" kindref="compound">VtArray</ref> will log a stack trace for every copy-on-write detach that occurs. </para>
    </detaileddescription>
    <location file="pxr/base/vt/array.h" line="227" column="1" bodyfile="pxr/base/vt/array.h" bodystart="227" bodyend="931"/>
    <listofallmembers>
      <member refid="class_vt_array_1a655a9ced10d6a1c1c17351161dcfa591" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_AllocateCopy</name></member>
      <member refid="class_vt_array_1a14b450e6c4e233f2ca1248e185bd1589" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_AllocateNew</name></member>
      <member refid="class_vt_array_1ab74959617b1b93d6ed28f005e2ef218c" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_CapacityForSize</name></member>
      <member refid="class_vt_array_1a0e8acdaca26ad930d0d78ff0ddf2e27a" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_data</name></member>
      <member refid="class_vt_array_1abc4cd3fec6983b192ed33b24886ecc09" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_DecRef</name></member>
      <member refid="class_vt_array_1a6c3de556544457cc504cfca419bdf09c" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_DetachIfNotUnique</name></member>
      <member refid="class_vt_array_1a634a3776b6a94d283a352d49aaca459e" prot="public" virt="non-virtual"><scope>VtArray</scope><name>_GetShapeData</name></member>
      <member refid="class_vt_array_1a8db90db34a81e33f3c9681d31dd7e55b" prot="public" virt="non-virtual"><scope>VtArray</scope><name>_GetShapeData</name></member>
      <member refid="class_vt_array_1ad556b5b10f50dff2c2ac91bea2fff2d6" prot="private" virt="non-virtual"><scope>VtArray</scope><name>_IsUnique</name></member>
      <member refid="class_vt_array_1accceba216d37880d7282426f32609bea" prot="public" virt="non-virtual"><scope>VtArray</scope><name>AsConst</name></member>
      <member refid="group___s_t_l___a_p_i_1ga9fe001f2e5e60d621aae49ff7426656e" prot="public" virt="non-virtual"><scope>VtArray</scope><name>assign</name></member>
      <member refid="group___s_t_l___a_p_i_1ga5cd26abc6cd03d02552ee7858024aab5" prot="public" virt="non-virtual"><scope>VtArray</scope><name>assign</name></member>
      <member refid="group___s_t_l___a_p_i_1ga057c4b4b4b354783b2bc0887dccc0d7d" prot="public" virt="non-virtual"><scope>VtArray</scope><name>assign</name></member>
      <member refid="group___s_t_l___a_p_i_1gaf71e6c1eccbc12e9339c00a86a981a43" prot="public" virt="non-virtual"><scope>VtArray</scope><name>back</name></member>
      <member refid="group___s_t_l___a_p_i_1ga61772c77ad2abfbb296912e7281e154c" prot="public" virt="non-virtual"><scope>VtArray</scope><name>back</name></member>
      <member refid="group___s_t_l___a_p_i_1gad69bd11391be1a1dba5c8202259664f8" prot="public" virt="non-virtual"><scope>VtArray</scope><name>begin</name></member>
      <member refid="group___s_t_l___a_p_i_1ga29305669b60ca1680752e2fc3592ba99" prot="public" virt="non-virtual"><scope>VtArray</scope><name>begin</name></member>
      <member refid="group___s_t_l___a_p_i_1ga7223528283cd4e5872e0cc716bf9bd9d" prot="public" virt="non-virtual"><scope>VtArray</scope><name>capacity</name></member>
      <member refid="group___s_t_l___a_p_i_1ga6c4a8ea059e1302891cfde5aa1707e07" prot="public" virt="non-virtual"><scope>VtArray</scope><name>cback</name></member>
      <member refid="group___s_t_l___a_p_i_1ga39112ae08f6ffc7ee58c6aa79772e094" prot="public" virt="non-virtual"><scope>VtArray</scope><name>cbegin</name></member>
      <member refid="group___s_t_l___a_p_i_1ga1890be7d2bb072293497cff06617c9ba" prot="public" virt="non-virtual"><scope>VtArray</scope><name>cdata</name></member>
      <member refid="group___s_t_l___a_p_i_1ga93791e61ab486b4022c389d634b4facc" prot="public" virt="non-virtual"><scope>VtArray</scope><name>cend</name></member>
      <member refid="group___s_t_l___a_p_i_1gaeea74d6d743836c57fef3d0d4e6c982b" prot="public" virt="non-virtual"><scope>VtArray</scope><name>cfront</name></member>
      <member refid="group___s_t_l___a_p_i_1gac8bb3912a3ce86b15842e79d0b421204" prot="public" virt="non-virtual"><scope>VtArray</scope><name>clear</name></member>
      <member refid="group___s_t_l___a_p_i_1ga57b1eba2aab41bc1db0800917eeb1f35" prot="public" virt="non-virtual"><scope>VtArray</scope><name>const_iterator</name></member>
      <member refid="group___s_t_l___a_p_i_1ga8aa6ec70e98bab51e33e8c7a31dbeeeb" prot="public" virt="non-virtual"><scope>VtArray</scope><name>const_pointer</name></member>
      <member refid="group___s_t_l___a_p_i_1ga638ca594c5cb11ecf800d90f56a8d64c" prot="public" virt="non-virtual"><scope>VtArray</scope><name>const_reference</name></member>
      <member refid="group___s_t_l___a_p_i_1ga421ef78ccdc84f0f6b2b14e2732527ba" prot="public" virt="non-virtual"><scope>VtArray</scope><name>const_reverse_iterator</name></member>
      <member refid="group___s_t_l___a_p_i_1ga81f80a31923e85af56a7b1ae0712a33b" prot="public" virt="non-virtual"><scope>VtArray</scope><name>crbegin</name></member>
      <member refid="group___s_t_l___a_p_i_1gabef9dfc7607c7e1a3854788ba56a4f34" prot="public" virt="non-virtual"><scope>VtArray</scope><name>crend</name></member>
      <member refid="group___s_t_l___a_p_i_1ga36e4d11a00a3572c87bf7e913e9b5ca1" prot="public" virt="non-virtual"><scope>VtArray</scope><name>data</name></member>
      <member refid="group___s_t_l___a_p_i_1ga3428c77f74e61bb1e0e4a836e2b68004" prot="public" virt="non-virtual"><scope>VtArray</scope><name>data</name></member>
      <member refid="class_vt_array_1a272fde61e79c2c156fb434d4a79ae890" prot="public" virt="non-virtual"><scope>VtArray</scope><name>ElementType</name></member>
      <member refid="group___s_t_l___a_p_i_1gac294eba73765b9a72a7399d64e8ecd9a" prot="public" virt="non-virtual"><scope>VtArray</scope><name>emplace_back</name></member>
      <member refid="group___s_t_l___a_p_i_1ga644718bb2fb240de962dc3c9a1fdf0dc" prot="public" virt="non-virtual"><scope>VtArray</scope><name>empty</name></member>
      <member refid="group___s_t_l___a_p_i_1gacad38d52497a975bfb6f2f6acd76631f" prot="public" virt="non-virtual"><scope>VtArray</scope><name>end</name></member>
      <member refid="group___s_t_l___a_p_i_1gaccf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" virt="non-virtual"><scope>VtArray</scope><name>end</name></member>
      <member refid="group___s_t_l___a_p_i_1ga29790c28710ec0e64b48c2f4edd0b08c" prot="public" virt="non-virtual"><scope>VtArray</scope><name>erase</name></member>
      <member refid="group___s_t_l___a_p_i_1gaa3af768723cd533218ea3d83af440713" prot="public" virt="non-virtual"><scope>VtArray</scope><name>erase</name></member>
      <member refid="group___s_t_l___a_p_i_1ga6a48363b4355f6f5b441637774f79a59" prot="public" virt="non-virtual"><scope>VtArray</scope><name>front</name></member>
      <member refid="group___s_t_l___a_p_i_1ga0ae6b4f9719202f7ddb334c16fb03d80" prot="public" virt="non-virtual"><scope>VtArray</scope><name>front</name></member>
      <member refid="class_vt_array_1a6db85fd7df8df8b5f081529d045e9640" prot="public" virt="non-virtual"><scope>VtArray</scope><name>IsIdentical</name></member>
      <member refid="group___s_t_l___a_p_i_1ga22412f755e97b36a4942529565e959ab" prot="public" virt="non-virtual"><scope>VtArray</scope><name>iterator</name></member>
      <member refid="group___s_t_l___a_p_i_1ga3407699345c5de0bb98eb92ed03e2f72" prot="public" virt="non-virtual"><scope>VtArray</scope><name>max_size</name></member>
      <member refid="class_vt_array_1afc68a4a8f41c1ecdba4c008f7c0c52b7" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator !=</name></member>
      <member refid="class_vt_array_1a520d51ec31cedfd87feee5982176e88d" prot="private" virt="non-virtual"><scope>VtArray</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_vt_array_1acec8dea7f028c52ab2a7143f60757959" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator=</name></member>
      <member refid="class_vt_array_1a4c13515ebe7d692947db35a13b6a8b7a" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator=</name></member>
      <member refid="class_vt_array_1a3a21732cab3ccd19a4f782f4c82ad2bc" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator=</name></member>
      <member refid="class_vt_array_1afb613afe18f30a139c9d4f536b109995" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator==</name></member>
      <member refid="class_vt_array_1a6e148cc96aeb6e40307479143a56cffe" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator[]</name></member>
      <member refid="class_vt_array_1aed82449479413fcb5cf46f383df9cfc4" prot="public" virt="non-virtual"><scope>VtArray</scope><name>operator[]</name></member>
      <member refid="group___s_t_l___a_p_i_1ga554a8ecb4d7d6ad1b90e6cdd34ab7406" prot="public" virt="non-virtual"><scope>VtArray</scope><name>pointer</name></member>
      <member refid="group___s_t_l___a_p_i_1ga058bda4957df6a97b1ea6c9fd783f672" prot="public" virt="non-virtual"><scope>VtArray</scope><name>pop_back</name></member>
      <member refid="group___s_t_l___a_p_i_1ga4dc692d21ac29d7e0b57ededfc7651a6" prot="public" virt="non-virtual"><scope>VtArray</scope><name>push_back</name></member>
      <member refid="group___s_t_l___a_p_i_1gad5ed9f2e23020885fe184653470d6b2e" prot="public" virt="non-virtual"><scope>VtArray</scope><name>push_back</name></member>
      <member refid="group___s_t_l___a_p_i_1gacea44ed500a54b2bb93e16b86e81afa8" prot="public" virt="non-virtual"><scope>VtArray</scope><name>rbegin</name></member>
      <member refid="group___s_t_l___a_p_i_1gaf086cceac199bd735c7a97c2a8d7ed21" prot="public" virt="non-virtual"><scope>VtArray</scope><name>rbegin</name></member>
      <member refid="group___s_t_l___a_p_i_1ga062a81994c6351d45faae2eeae251571" prot="public" virt="non-virtual"><scope>VtArray</scope><name>reference</name></member>
      <member refid="group___s_t_l___a_p_i_1ga68c599ddcbfddc65170de524ac165e44" prot="public" virt="non-virtual"><scope>VtArray</scope><name>rend</name></member>
      <member refid="group___s_t_l___a_p_i_1ga07da1fdc890b6949f1a20a1961c6fc44" prot="public" virt="non-virtual"><scope>VtArray</scope><name>rend</name></member>
      <member refid="group___s_t_l___a_p_i_1ga38219a474fc83b17becfa5838a06db37" prot="public" virt="non-virtual"><scope>VtArray</scope><name>reserve</name></member>
      <member refid="group___s_t_l___a_p_i_1ga77b12cbee1acfefe67940bb34d6d02d7" prot="public" virt="non-virtual"><scope>VtArray</scope><name>resize</name></member>
      <member refid="group___s_t_l___a_p_i_1gab3f1a15635e98c1c919fe506803547cf" prot="public" virt="non-virtual"><scope>VtArray</scope><name>resize</name></member>
      <member refid="group___s_t_l___a_p_i_1ga04046f3c8c4df8067d8fa4dcff578d96" prot="public" virt="non-virtual"><scope>VtArray</scope><name>resize</name></member>
      <member refid="group___s_t_l___a_p_i_1ga7b981212a5a3e3e992df0aae2de7aab5" prot="public" virt="non-virtual"><scope>VtArray</scope><name>resize</name></member>
      <member refid="group___s_t_l___a_p_i_1gae0e1201e90eefe8e8bfa40f67e6cfa8e" prot="public" virt="non-virtual"><scope>VtArray</scope><name>resize</name></member>
      <member refid="group___s_t_l___a_p_i_1ga92b881db836646f4039adcbb73c8595f" prot="public" virt="non-virtual"><scope>VtArray</scope><name>reverse_iterator</name></member>
      <member refid="group___s_t_l___a_p_i_1ga259cb5a711406a8c3e5d937eb9350cca" prot="public" virt="non-virtual"><scope>VtArray</scope><name>size</name></member>
      <member refid="group___s_t_l___a_p_i_1ga47aa265438facb25492ef73d389ca718" prot="public" virt="non-virtual"><scope>VtArray</scope><name>swap</name></member>
      <member refid="class_vt_array_1a6b50d8a9e8b74f27e585e72c3124c4fe" prot="private" virt="non-virtual"><scope>VtArray</scope><name>swap</name></member>
      <member refid="class_vt_array_1a33e4c874572a054d0e3139440aa5baa3" prot="public" virt="non-virtual"><scope>VtArray</scope><name>value_type</name></member>
      <member refid="class_vt_array_1ac844dff477dd997f5e9b070dcb172810" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1aad405bd675ae88fb03f0a7b4488f6c05" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1a22b17ddd095c48598ce8c9a7928df5d4" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1a960f197423f674d35db08db66e2ac363" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1ac92b9e8331b6ee6c22910c4555982d07" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1a818505c305e725560f75a5a267eb1ebd" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1a9f7f62b1f6f1d8b753ebb03ac845d5e0" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1afe0d9667e60ed7ace7f142f8ef471e51" prot="public" virt="non-virtual"><scope>VtArray</scope><name>VtArray</name></member>
      <member refid="class_vt_array_1affd499949d100bafe41fccdcd543a631" prot="public" virt="non-virtual"><scope>VtArray</scope><name>~VtArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
