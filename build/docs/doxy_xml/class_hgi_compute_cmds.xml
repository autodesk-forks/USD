<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_compute_cmds" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HgiComputeCmds</compoundname>
    <basecompoundref refid="class_hgi_cmds" prot="public" virt="non-virtual">HgiCmds</basecompoundref>
    <derivedcompoundref refid="class_hgi_g_l_compute_cmds" prot="public" virt="non-virtual">HgiGLComputeCmds</derivedcompoundref>
    <includes refid="compute_cmds_8h" local="no">computeCmds.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_compute_cmds_1a06100dce1ac28dfc1c55ef3f821e605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API</type>
        <definition>HGI_API ~HgiComputeCmds</definition>
        <argsstring>() override</argsstring>
        <name>~HgiComputeCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a4faea3ac78fb17fe44b934ddcd670ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void PushDebugGroup</definition>
        <argsstring>(const char *label)=0</argsstring>
        <name>PushDebugGroup</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1afef735fb601fa2235b72d0b42214a08d">PushDebugGroup</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Push a debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a7f3b9bc0bba2f41ee8fadb843c6220d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void PopDebugGroup</definition>
        <argsstring>()=0</argsstring>
        <name>PopDebugGroup</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1ac03f05639627f7e78f42fdbc9ebbfd74">PopDebugGroup</reimplementedby>
        <briefdescription>
<para>Pop the last debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a6a1525db9279612c29e327247b97ad0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void BindPipeline</definition>
        <argsstring>(HgiComputePipelineHandle pipeline)=0</argsstring>
        <name>BindPipeline</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1ab8b11a97b2359981562177389ecf3ac9">BindPipeline</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiComputePipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
<para>Bind a pipeline state object. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after calling CreateGraphicsCmds to set the graphics pipeline state. The resource bindings used when creating the pipeline must be compatible with the resources bound via <ref refid="class_hgi_compute_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" kindref="member">BindResources()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void BindResources</definition>
        <argsstring>(HgiResourceBindingsHandle resources)=0</argsstring>
        <name>BindResources</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1a56192fa6096e9b20a821789a42e3ee37">BindResources</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiResourceBindingsHandle</ref></type>
          <declname>resources</declname>
        </param>
        <briefdescription>
<para>Bind resources such as textures and uniform buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after <ref refid="class_hgi_compute_cmds_1a6a1525db9279612c29e327247b97ad0d" kindref="member">BindPipeline()</ref> and the resources bound must be compatible with the bound pipeline. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a5602407081742330035a8d54c23cdda9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void SetConstantValues</definition>
        <argsstring>(HgiComputePipelineHandle pipeline, uint32_t bindIndex, uint32_t byteSize, const void *data)=0</argsstring>
        <name>SetConstantValues</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1ad0d320dd33b32f5c2c988c921cfd343b">SetConstantValues</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiComputePipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set Push / Function constants. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>pipeline</computeroutput> is the compute pipeline that you are binding before the draw call. It contains the program used for the uniform buffer constant values for. <computeroutput>bindIndex</computeroutput> is the binding point index in the pipeline&apos;s shader to bind the data to. <computeroutput>byteSize</computeroutput> is the size of the data you are updating. <computeroutput>data</computeroutput> is the data you are copying into the push constants block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a74ce3f2b53de6f12a4d1632ca98f8fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void Dispatch</definition>
        <argsstring>(int dimX, int dimY)=0</argsstring>
        <name>Dispatch</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1a1b459bfae64b8f60c3a1b6c4c0979f11">Dispatch</reimplementedby>
        <param>
          <type>int</type>
          <declname>dimX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimY</declname>
        </param>
        <briefdescription>
<para>Execute a compute shader with provided thread group count in each dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1af7fca4b663cc7418d36f96c36b72cc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void InsertMemoryBarrier</definition>
        <argsstring>(HgiMemoryBarrier barrier)=0</argsstring>
        <name>InsertMemoryBarrier</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1a150f08387a4c7165f2c5aeeb19542a33">InsertMemoryBarrier</reimplementedby>
        <param>
          <type>HgiMemoryBarrier</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
<para>Inserts a barrier so that data written to memory by commands before the barrier is available to commands after the barrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a90817074782fdba2eadeabec66039a95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API HgiComputeDispatch</type>
        <definition>virtual HGI_API HgiComputeDispatch GetDispatchMethod</definition>
        <argsstring>() const =0</argsstring>
        <name>GetDispatchMethod</name>
        <reimplementedby refid="class_hgi_g_l_compute_cmds_1a3b3a696242c22a91f2e6506e135ccbaa">GetDispatchMethod</reimplementedby>
        <briefdescription>
<para>Returns the dispatch method for this encoder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_compute_cmds_1a346ef44246fabe8f3cfe0bcfbe348d89" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API</type>
        <definition>HGI_API HgiComputeCmds</definition>
        <argsstring>()</argsstring>
        <name>HgiComputeCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="103" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_compute_cmds_1a738857dc9631de2497b613743985a260" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> &amp;</type>
        <definition>HgiComputeCmds&amp; operator=</definition>
        <argsstring>(const HgiComputeCmds &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_compute_cmds_1a79b012483a7629e7675be3a2fa487053" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiComputeCmds</definition>
        <argsstring>(const HgiComputeCmds &amp;)=delete</argsstring>
        <name>HgiComputeCmds</name>
        <param>
          <type>const <ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/computeCmds.h" line="107" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A graphics API independent abstraction of compute commands. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> is a lightweight object that cannot be re-used after it has been submitted. A new cmds object should be acquired for each frame. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3751">
        <label>HgiComputeCmds</label>
        <link refid="class_hgi_compute_cmds"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3753">
        <label>HgiGLComputeCmds</label>
        <link refid="class_hgi_g_l_compute_cmds"/>
        <childnode refid="3751" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3752">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3754">
        <label>HgiComputeCmds</label>
        <link refid="class_hgi_compute_cmds"/>
        <childnode refid="3755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3755">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgi/computeCmds.h" line="46" column="1" bodyfile="pxr/imaging/hgi/computeCmds.h" bodystart="45" bodyend="108"/>
    <listofallmembers>
      <member refid="class_hgi_cmds_1ac15c43bdc2f47df7bc72769b366c3de7" prot="protected" virt="non-virtual"><scope>HgiComputeCmds</scope><name>_SetSubmitted</name></member>
      <member refid="class_hgi_cmds_1ada9b3b32ca4eb9804e3a47ddd8954062" prot="protected" virt="virtual"><scope>HgiComputeCmds</scope><name>_Submit</name></member>
      <member refid="class_hgi_compute_cmds_1a6a1525db9279612c29e327247b97ad0d" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>BindPipeline</name></member>
      <member refid="class_hgi_compute_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>BindResources</name></member>
      <member refid="class_hgi_compute_cmds_1a74ce3f2b53de6f12a4d1632ca98f8fda" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>Dispatch</name></member>
      <member refid="class_hgi_compute_cmds_1a90817074782fdba2eadeabec66039a95" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>GetDispatchMethod</name></member>
      <member refid="class_hgi_cmds_1aacf15024d99594cd7e32536f934141ab" prot="protected" virt="non-virtual"><scope>HgiComputeCmds</scope><name>HgiCmds</name></member>
      <member refid="class_hgi_compute_cmds_1a346ef44246fabe8f3cfe0bcfbe348d89" prot="protected" virt="non-virtual"><scope>HgiComputeCmds</scope><name>HgiComputeCmds</name></member>
      <member refid="class_hgi_compute_cmds_1a79b012483a7629e7675be3a2fa487053" prot="private" virt="non-virtual"><scope>HgiComputeCmds</scope><name>HgiComputeCmds</name></member>
      <member refid="class_hgi_compute_cmds_1af7fca4b663cc7418d36f96c36b72cc54" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>InsertMemoryBarrier</name></member>
      <member refid="class_hgi_cmds_1ae21ceb4d878a96527fa7e9aa2eec6c0b" prot="public" virt="non-virtual"><scope>HgiComputeCmds</scope><name>IsSubmitted</name></member>
      <member refid="class_hgi_compute_cmds_1a738857dc9631de2497b613743985a260" prot="private" virt="non-virtual"><scope>HgiComputeCmds</scope><name>operator=</name></member>
      <member refid="class_hgi_compute_cmds_1a7f3b9bc0bba2f41ee8fadb843c6220d3" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>PopDebugGroup</name></member>
      <member refid="class_hgi_compute_cmds_1a4faea3ac78fb17fe44b934ddcd670ff5" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>PushDebugGroup</name></member>
      <member refid="class_hgi_compute_cmds_1a5602407081742330035a8d54c23cdda9" prot="public" virt="pure-virtual"><scope>HgiComputeCmds</scope><name>SetConstantValues</name></member>
      <member refid="class_hgi_cmds_1acfebf344be18afe51829d5c843d53ccd" prot="public" virt="virtual"><scope>HgiComputeCmds</scope><name>~HgiCmds</name></member>
      <member refid="class_hgi_compute_cmds_1a06100dce1ac28dfc1c55ef3f821e605b" prot="public" virt="non-virtual"><scope>HgiComputeCmds</scope><name>~HgiComputeCmds</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
