<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdr_registry" kind="class" language="C++" prot="public">
    <compoundname>SdrRegistry</compoundname>
    <basecompoundref refid="class_ndr_registry" prot="public" virt="non-virtual">NdrRegistry</basecompoundref>
    <includes refid="usd_2sdr_2registry_8h" local="no">registry.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdr_registry_1a5ef6240595ec2b432e0ee46006263f60" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfSingleton&lt; SdrRegistry &gt;</definition>
        <argsstring></argsstring>
        <name>TfSingleton&lt; SdrRegistry &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="112" column="1" bodyfile="pxr/usd/sdr/registry.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sdr_registry_1a8bbafb8e7958954e3e3ae5c3752dcd97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API <ref refid="class_sdr_registry" kindref="compound">SdrRegistry</ref> &amp;</type>
        <definition>static SDR_API SdrRegistry&amp; GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
<para>Get the single <computeroutput><ref refid="class_sdr_registry" kindref="compound">SdrRegistry</ref></computeroutput> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="48" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdr_registry_1a6c2ad66b092001bde543fa07a712f7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeByIdentifier</definition>
        <argsstring>(const NdrIdentifier &amp;identifier, const NdrTokenVec &amp;typePriority=NdrTokenVec())</argsstring>
        <name>GetShaderNodeByIdentifier</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const NdrTokenVec &amp;</type>
          <declname>typePriority</declname>
          <defval>NdrTokenVec()</defval>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a5bacc6de8683232867fa5a45121e3780" kindref="member">NdrRegistry::GetNodeByIdentifier()</ref></computeroutput>, but returns a <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointer instead of a <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1ab4dd8f74d5f900a59a5bfa9c55751889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeByIdentifierAndType</definition>
        <argsstring>(const NdrIdentifier &amp;identifier, const TfToken &amp;nodeType)</argsstring>
        <name>GetShaderNodeByIdentifierAndType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeType</declname>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a302de2b47bdf8af387d9273bc797f9a7" kindref="member">NdrRegistry::GetNodeByIdentifierAndType()</ref></computeroutput>, but returns a <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointer instead of a <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1ae011c92134519e08a42fb058295d6e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeByName</definition>
        <argsstring>(const std::string &amp;name, const NdrTokenVec &amp;typePriority=NdrTokenVec(), NdrVersionFilter filter=NdrVersionFilterDefaultOnly)</argsstring>
        <name>GetShaderNodeByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const NdrTokenVec &amp;</type>
          <declname>typePriority</declname>
          <defval>NdrTokenVec()</defval>
        </param>
        <param>
          <type><ref refid="usd_2ndr_2declare_8h_1a9991becacf778d59c7ff155f24383a21" kindref="member">NdrVersionFilter</ref></type>
          <declname>filter</declname>
          <defval>NdrVersionFilterDefaultOnly</defval>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a2b78ea888fcb8cb1fd755d62d551f285" kindref="member">NdrRegistry::GetNodeByName()</ref></computeroutput>, but returns a <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointer instead of a <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1afbcb71a54afbc292f82ad997cb1b5c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeByNameAndType</definition>
        <argsstring>(const std::string &amp;name, const TfToken &amp;nodeType, NdrVersionFilter filter=NdrVersionFilterDefaultOnly)</argsstring>
        <name>GetShaderNodeByNameAndType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>nodeType</declname>
        </param>
        <param>
          <type><ref refid="usd_2ndr_2declare_8h_1a9991becacf778d59c7ff155f24383a21" kindref="member">NdrVersionFilter</ref></type>
          <declname>filter</declname>
          <defval>NdrVersionFilterDefaultOnly</defval>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1aa2c7d46e4adecc575c28ab686c46ff27" kindref="member">NdrRegistry::GetNodeByNameAndType()</ref></computeroutput>, but returns a <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointer instead of a <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1aff4f2390d405c7a404ea5f09c2c032ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeFromAsset</definition>
        <argsstring>(const SdfAssetPath &amp;shaderAsset, const NdrTokenMap &amp;metadata=NdrTokenMap(), const TfToken &amp;subIdentifier=TfToken(), const TfToken &amp;sourceType=TfToken())</argsstring>
        <name>GetShaderNodeFromAsset</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>shaderAsset</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
          <defval>NdrTokenMap()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>subIdentifier</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sourceType</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Wrapper method for <ref refid="class_ndr_registry_1aaadbd8fe1df4f30bb9dd2e2bb0b4970f" kindref="member">NdrRegistry::GetNodeFromAsset()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a valid <ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref> pointer upon success. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1a7a1c529cde6bdffd118403660c2707fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodeConstPtr</type>
        <definition>SDR_API SdrShaderNodeConstPtr GetShaderNodeFromSourceCode</definition>
        <argsstring>(const std::string &amp;sourceCode, const TfToken &amp;sourceType, const NdrTokenMap &amp;metadata=NdrTokenMap())</argsstring>
        <name>GetShaderNodeFromSourceCode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceCode</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sourceType</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
          <defval>NdrTokenMap()</defval>
        </param>
        <briefdescription>
<para>Wrapper method for <ref refid="class_ndr_registry_1a391e8cb4eeb3223aff3d725920830564" kindref="member">NdrRegistry::GetNodeFromSourceCode()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a valid <ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref> pointer upon success. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1a443a731d8221091cb4787a48603a7e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodePtrVec</type>
        <definition>SDR_API SdrShaderNodePtrVec GetShaderNodesByIdentifier</definition>
        <argsstring>(const NdrIdentifier &amp;identifier)</argsstring>
        <name>GetShaderNodesByIdentifier</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a3db1bd9c3d178aaba60718cbaba66486" kindref="member">NdrRegistry::GetNodesByIdentifier()</ref></computeroutput>, but returns a vector of <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointers instead of a vector of <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1a4dca2b95ec2339643edcf3cfe19a00c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodePtrVec</type>
        <definition>SDR_API SdrShaderNodePtrVec GetShaderNodesByName</definition>
        <argsstring>(const std::string &amp;name, NdrVersionFilter filter=NdrVersionFilterDefaultOnly)</argsstring>
        <name>GetShaderNodesByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="usd_2ndr_2declare_8h_1a9991becacf778d59c7ff155f24383a21" kindref="member">NdrVersionFilter</ref></type>
          <declname>filter</declname>
          <defval>NdrVersionFilterDefaultOnly</defval>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a5d61c1cf418e9034439ea95681e22323" kindref="member">NdrRegistry::GetNodesByName()</ref></computeroutput>, but returns a vector of <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointers instead of a vector of <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1ab0173993a529ed609c35295c86fa2f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderNodePtrVec</type>
        <definition>SDR_API SdrShaderNodePtrVec GetShaderNodesByFamily</definition>
        <argsstring>(const TfToken &amp;family=TfToken(), NdrVersionFilter filter=NdrVersionFilterDefaultOnly)</argsstring>
        <name>GetShaderNodesByFamily</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>family</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type><ref refid="usd_2ndr_2declare_8h_1a9991becacf778d59c7ff155f24383a21" kindref="member">NdrVersionFilter</ref></type>
          <declname>filter</declname>
          <defval>NdrVersionFilterDefaultOnly</defval>
        </param>
        <briefdescription>
<para>Exactly like <computeroutput><ref refid="class_ndr_registry_1a5e9a9d1947c1ba283161fc8a8121c3d5" kindref="member">NdrRegistry::GetNodesByFamily()</ref></computeroutput>, but returns a vector of <computeroutput><ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref></computeroutput> pointers instead of a vector of <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> pointers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="112" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdr_registry_1a146cf22aa2a3df9eb26c78a1e600c299" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdrRegistry</definition>
        <argsstring>()</argsstring>
        <name>SdrRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_registry_1a93ad8e84f97cd69bc69869fbff4c6b3c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~SdrRegistry</definition>
        <argsstring>()</argsstring>
        <name>~SdrRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/registry.h" line="121" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The shading-specialized version of <computeroutput><ref refid="class_ndr_registry" kindref="compound">NdrRegistry</ref></computeroutput>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5261">
        <label>NdrRegistry</label>
        <link refid="class_ndr_registry"/>
        <childnode refid="5262" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5262">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5260">
        <label>SdrRegistry</label>
        <link refid="class_sdr_registry"/>
        <childnode refid="5261" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5264">
        <label>NdrRegistry</label>
        <link refid="class_ndr_registry"/>
        <childnode refid="5265" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5265">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5263">
        <label>SdrRegistry</label>
        <link refid="class_sdr_registry"/>
        <childnode refid="5264" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdr/registry.h" line="44" column="1" bodyfile="pxr/usd/sdr/registry.h" bodystart="43" bodyend="122"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>_HasRemnant</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>_Register</name></member>
      <member refid="class_ndr_registry_1a18b5a0d433c3c1150ee638cc1c814121" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>AddDiscoveryResult</name></member>
      <member refid="class_ndr_registry_1a36b678bc03a457dbfb3773001b80b3d3" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>AddDiscoveryResult</name></member>
      <member refid="class_ndr_registry_1a4d86409a818ebd4d0025e3eee6925c55" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>DiscoveryPluginRefPtrVec</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>EnableNotification2</name></member>
      <member refid="class_ndr_registry_1a7c451ef8b27fb5858d714b2614d1df93" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetAllNodeSourceTypes</name></member>
      <member refid="class_sdr_registry_1a8bbafb8e7958954e3e3ae5c3752dcd97" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetInstance</name></member>
      <member refid="class_ndr_registry_1a5bacc6de8683232867fa5a45121e3780" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeByIdentifier</name></member>
      <member refid="class_ndr_registry_1a302de2b47bdf8af387d9273bc797f9a7" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeByIdentifierAndType</name></member>
      <member refid="class_ndr_registry_1a2b78ea888fcb8cb1fd755d62d551f285" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeByName</name></member>
      <member refid="class_ndr_registry_1aa2c7d46e4adecc575c28ab686c46ff27" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeByNameAndType</name></member>
      <member refid="class_ndr_registry_1aaadbd8fe1df4f30bb9dd2e2bb0b4970f" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeFromAsset</name></member>
      <member refid="class_ndr_registry_1a391e8cb4eeb3223aff3d725920830564" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeFromSourceCode</name></member>
      <member refid="class_ndr_registry_1ad9ea47727622f4f5cb677b487bbcfa64" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeIdentifiers</name></member>
      <member refid="class_ndr_registry_1aad5c6eb89c893e959d6e66620945295e" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodeNames</name></member>
      <member refid="class_ndr_registry_1a5e9a9d1947c1ba283161fc8a8121c3d5" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodesByFamily</name></member>
      <member refid="class_ndr_registry_1a3db1bd9c3d178aaba60718cbaba66486" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodesByIdentifier</name></member>
      <member refid="class_ndr_registry_1a5d61c1cf418e9034439ea95681e22323" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetNodesByName</name></member>
      <member refid="class_ndr_registry_1a51ca010b4493ec6ed866619be7984023" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetSearchURIs</name></member>
      <member refid="class_sdr_registry_1a6c2ad66b092001bde543fa07a712f7d8" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeByIdentifier</name></member>
      <member refid="class_sdr_registry_1ab4dd8f74d5f900a59a5bfa9c55751889" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeByIdentifierAndType</name></member>
      <member refid="class_sdr_registry_1ae011c92134519e08a42fb058295d6e3e" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeByName</name></member>
      <member refid="class_sdr_registry_1afbcb71a54afbc292f82ad997cb1b5c00" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeByNameAndType</name></member>
      <member refid="class_sdr_registry_1aff4f2390d405c7a404ea5f09c2c032ad" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeFromAsset</name></member>
      <member refid="class_sdr_registry_1a7a1c529cde6bdffd118403660c2707fa" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodeFromSourceCode</name></member>
      <member refid="class_sdr_registry_1ab0173993a529ed609c35295c86fa2f29" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodesByFamily</name></member>
      <member refid="class_sdr_registry_1a443a731d8221091cb4787a48603a7e68" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodesByIdentifier</name></member>
      <member refid="class_sdr_registry_1a4dca2b95ec2339643edcf3cfe19a00c1" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetShaderNodesByName</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_ndr_registry_1a174ebee0e92922ae7256125beec8ec77" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>NdrRegistry</name></member>
      <member refid="class_ndr_registry_1a64586392a0470ad14fe9d01314413100" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>NdrRegistry</name></member>
      <member refid="class_ndr_registry_1a52beb5118749a199b34a1196e4f38b3c" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>SdrRegistry</scope><name>operator=</name></member>
      <member refid="class_sdr_registry_1a146cf22aa2a3df9eb26c78a1e600c299" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>SdrRegistry</name></member>
      <member refid="class_ndr_registry_1ab111939c2df38b3e33afd43acc018249" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>SetExtraDiscoveryPlugins</name></member>
      <member refid="class_ndr_registry_1a1eb836b69c5e2612564e9711017099d4" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>SetExtraDiscoveryPlugins</name></member>
      <member refid="class_ndr_registry_1ad6b6226c83cb2a771d18b8e3b46603e8" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>SetExtraParserPlugins</name></member>
      <member refid="class_sdr_registry_1a5ef6240595ec2b432e0ee46006263f60" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>TfSingleton&lt; SdrRegistry &gt;</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdrRegistry</scope><name>TfWeakBase</name></member>
      <member refid="class_ndr_registry_1ae65c1bb482465bf21e49e59e3704fd83" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>~NdrRegistry</name></member>
      <member refid="class_sdr_registry_1a93ad8e84f97cd69bc69869fbff4c6b3c" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>~SdrRegistry</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdrRegistry</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
