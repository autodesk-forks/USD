<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_property_spec" kind="class" language="C++" prot="public">
    <compoundname>SdfPropertySpec</compoundname>
    <basecompoundref refid="class_sdf_spec" prot="public" virt="non-virtual">SdfSpec</basecompoundref>
    <derivedcompoundref refid="class_sdf_attribute_spec" prot="public" virt="non-virtual">SdfAttributeSpec</derivedcompoundref>
    <derivedcompoundref refid="class_sdf_relationship_spec" prot="public" virt="non-virtual">SdfRelationshipSpec</derivedcompoundref>
    <includes refid="property_spec_8h" local="no">propertySpec.h</includes>
      <sectiondef kind="user-defined">
      <header>Name</header>
      <memberdef kind="function" id="class_sdf_property_spec_1a204344d110d2bb74928f43d2c1fe0047" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the property&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a320078c8c86baa76a237c2233d55a730" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetNameToken</definition>
        <argsstring>() const</argsstring>
        <name>GetNameToken</name>
        <briefdescription>
<para>Returns the property&apos;s name, as a token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a8d3b6e7e600320a58351d2f74554a94c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool CanSetName</definition>
        <argsstring>(const std::string &amp;newName, std::string *whyNot) const</argsstring>
        <name>CanSetName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>newName</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Returns true if setting the property spec&apos;s name to <computeroutput>newName</computeroutput> will succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false if it won&apos;t, and sets <computeroutput>whyNot</computeroutput> with a string describing why not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aa1f241d28f26488867a276eca6d54405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SetName</definition>
        <argsstring>(const std::string &amp;newName, bool validate=true)</argsstring>
        <name>SetName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>newName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Sets the property&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
<para>A Prim&apos;s properties must be unique by name. Setting the name to the same name as an existing property is an error.</para>
<para>Setting <computeroutput>validate</computeroutput> to false, will skip validation of the newName (that is, CanSetName will not be called). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aaf39d3b7953761651981a821ce934211" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool IsValidName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>IsValidName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns true if the given name is considered a valid name for a property. </para>
        </briefdescription>
        <detaileddescription>
<para>A valid name is not empty, and does not use invalid characters (such as &apos;/&apos;, &apos;[&apos;, or &apos;.&apos;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="98" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Ownership</header>
      <memberdef kind="function" id="class_sdf_property_spec_1a6edc52bacab5e83dff5c14b6cc1e224b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfSpecHandle</type>
        <definition>SDF_API SdfSpecHandle GetOwner</definition>
        <argsstring>() const</argsstring>
        <name>GetOwner</name>
        <briefdescription>
<para>Returns the owner prim or relationship of this property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="106" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Metadata</header>
      <memberdef kind="function" id="class_sdf_property_spec_1ade086cf82f9dd9c876ee3fd194b6f1bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_map_edit_proxy" kindref="compound">SdfDictionaryProxy</ref></type>
        <definition>SDF_API SdfDictionaryProxy GetCustomData</definition>
        <argsstring>() const</argsstring>
        <name>GetCustomData</name>
        <briefdescription>
<para>Returns the property&apos;s custom data. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for custom data is an empty dictionary.</para>
<para>Custom data is for use by plugins or other non-tools supplied extensions that need to be able to store data attached to arbitrary scene objects. Note that if the only objects you want to store data on are prims, using custom attributes is probably a better choice. But if you need to possibly store this data on attributes or relationships or as annotations on reference arcs, then custom data is an appropriate choice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1ad4760909f0cdc5d9ec133f0607ec72b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_map_edit_proxy" kindref="compound">SdfDictionaryProxy</ref></type>
        <definition>SDF_API SdfDictionaryProxy GetAssetInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetInfo</name>
        <briefdescription>
<para>Returns the asset info dictionary for this property. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is an empty dictionary.</para>
<para>The asset info dictionary is used to annotate SdfAssetPath-valued attributes pointing to the root-prims of assets (generally organized as models) with various data related to asset management. For example, asset name, root layer identifier, asset version etc.</para>
<para><simplesect kind="note"><para>It is only valid to author assetInfo on attributes that are of type <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a99305c665e0c209304be5d7ad769e7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetCustomData</definition>
        <argsstring>(const std::string &amp;name, const VtValue &amp;value)</argsstring>
        <name>SetCustomData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a property custom data entry. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>value</computeroutput> is empty, then this removes the given custom data entry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a3c2de13b36f263e83c5ec47f4b2f99ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetAssetInfo</definition>
        <argsstring>(const std::string &amp;name, const VtValue &amp;value)</argsstring>
        <name>SetAssetInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a asset info entry for this property. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>value</computeroutput> is empty, then this removes the given asset info entry.</para>
<para><simplesect kind="see"><para><ref refid="class_sdf_property_spec_1ad4760909f0cdc5d9ec133f0607ec72b7" kindref="member">GetAssetInfo()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a06ad997e921928b84fa0aad7e117651e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetDisplayGroup</definition>
        <argsstring>() const</argsstring>
        <name>GetDisplayGroup</name>
        <briefdescription>
<para>Returns the displayGroup string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for displayGroup is empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aa245c2f50ef58e16948c27936a6bdf54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDisplayGroup</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetDisplayGroup</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the displayGroup string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1acab74645dbf8de67523de409a2ef2eac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetDisplayName</definition>
        <argsstring>() const</argsstring>
        <name>GetDisplayName</name>
        <briefdescription>
<para>Returns the displayName string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for displayName is empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aae8d187b8a5911caf2d118e6563e9889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDisplayName</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetDisplayName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the displayName string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a5f4c1bc9f2f793b24014551075d7cb6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetDocumentation</definition>
        <argsstring>() const</argsstring>
        <name>GetDocumentation</name>
        <briefdescription>
<para>Returns the documentation string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for documentation is empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a0df7b9ada95628ee04032e00e48e7417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDocumentation</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetDocumentation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the documentation string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a73b83447b66d61cd900b2e8c4f0868ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool GetHidden</definition>
        <argsstring>() const</argsstring>
        <name>GetHidden</name>
        <briefdescription>
<para>Returns whether this property spec will be hidden in browsers. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for hidden is false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a33854bd790c06e0cc959b70a2511cfb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetHidden</definition>
        <argsstring>(bool value)</argsstring>
        <name>SetHidden</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets whether this property spec will be hidden in browsers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a5d9b89f530d37a530813620413217032" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1ac344342016ac8137d2b63163bda14de0" kindref="member">SdfPermission</ref></type>
        <definition>SDF_API SdfPermission GetPermission</definition>
        <argsstring>() const</argsstring>
        <name>GetPermission</name>
        <briefdescription>
<para>Returns the property&apos;s permission restriction. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for permission is SdfPermissionPublic. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a8d4c331826b506be9dd6a3c92a4ef684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetPermission</definition>
        <argsstring>(SdfPermission value)</argsstring>
        <name>SetPermission</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1ac344342016ac8137d2b63163bda14de0" kindref="member">SdfPermission</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the property&apos;s permission restriction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aa430e2e4657e7043764dae08dc7a4e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetPrefix</definition>
        <argsstring>() const</argsstring>
        <name>GetPrefix</name>
        <briefdescription>
<para>Returns the prefix string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for prefix is &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a61b9d7858d930e1f8219ecfcfeaf193b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetPrefix</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetPrefix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the prefix string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1ab0afe06c8843e972dff682c3f7868ac9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetSuffix</definition>
        <argsstring>() const</argsstring>
        <name>GetSuffix</name>
        <briefdescription>
<para>Returns the suffix string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for suffix is &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1ab56b19de2727e437c05484300330b0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSuffix</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetSuffix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the suffix string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1af72eac4916d1a00c08f27a4694835112" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetSymmetricPeer</definition>
        <argsstring>() const</argsstring>
        <name>GetSymmetricPeer</name>
        <briefdescription>
<para>Returns the property&apos;s symmetric peer. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for the symmetric peer is an empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1af11cd8834441d94496bf4cce983559d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSymmetricPeer</definition>
        <argsstring>(const std::string &amp;peerName)</argsstring>
        <name>SetSymmetricPeer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>peerName</declname>
        </param>
        <briefdescription>
<para>Sets the property&apos;s symmetric peer. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>peerName</computeroutput> is empty, then this removes any symmetric peer for the given property. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a7b13ede56ab5ee26f285da2280167a31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_map_edit_proxy" kindref="compound">SdfDictionaryProxy</ref></type>
        <definition>SDF_API SdfDictionaryProxy GetSymmetryArguments</definition>
        <argsstring>() const</argsstring>
        <name>GetSymmetryArguments</name>
        <briefdescription>
<para>Returns the property&apos;s symmetry arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for symmetry arguments is an empty dictionary. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a46e788e0e01bb8ff6d716d6dbcdc5e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSymmetryArgument</definition>
        <argsstring>(const std::string &amp;name, const VtValue &amp;value)</argsstring>
        <name>SetSymmetryArgument</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a property symmetry argument. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>value</computeroutput> is empty, then this removes the argument with the given <computeroutput>name</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a5792f900b1a0fdb1314aa793af4e7df8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetSymmetryFunction</definition>
        <argsstring>() const</argsstring>
        <name>GetSymmetryFunction</name>
        <briefdescription>
<para>Returns the property&apos;s symmetry function. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for the symmetry function is an empty token. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a490d4304afe7b9b0cd2cfc9ef05be93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSymmetryFunction</definition>
        <argsstring>(const TfToken &amp;functionName)</argsstring>
        <name>SetSymmetryFunction</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>functionName</declname>
        </param>
        <briefdescription>
<para>Sets the property&apos;s symmetry function. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>functionName</computeroutput> is empty, then this removes any symmetry function for the given property. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="263" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Property value API</header>
      <memberdef kind="function" id="class_sdf_property_spec_1a903e11f34f9077dad4e14b098f208217" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1afba891bb38b089b531e73e00fe5cc7ae" kindref="member">SdfTimeSampleMap</ref></type>
        <definition>SDF_API SdfTimeSampleMap GetTimeSampleMap</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeSampleMap</name>
        <briefdescription>
<para>Returns the entire set of time samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a3168b87540ef2e33bb378be34477d33b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_type" kindref="compound">TfType</ref></type>
        <definition>SDF_API TfType GetValueType</definition>
        <argsstring>() const</argsstring>
        <name>GetValueType</name>
        <briefdescription>
<para>Returns the <ref refid="class_tf_type" kindref="compound">TfType</ref> representing the value type this property holds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a7d09b1f92358004240f574e91a4402df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName GetTypeName</definition>
        <argsstring>() const</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
<para>Returns the name of the value type that this property holds. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the typename used to represent the types of value held by this attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a6df60c2fa5084934c3c6880208a93cfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue GetDefaultValue</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultValue</name>
        <briefdescription>
<para>Returns the attribute&apos;s default value. </para>
        </briefdescription>
        <detaileddescription>
<para>If it doesn&apos;t have a default value, an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a9a9d10d893e5008a16e0b8eb9b9dead6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SetDefaultValue</definition>
        <argsstring>(const VtValue &amp;defaultValue)</argsstring>
        <name>SetDefaultValue</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Sets the attribute&apos;s default value. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if successful, false otherwise. Fails if <computeroutput>defaultValue</computeroutput> has wrong type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aa70a079544e80d7fea71e0789f236ef2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasDefaultValue</definition>
        <argsstring>() const</argsstring>
        <name>HasDefaultValue</name>
        <briefdescription>
<para>Returns true if a default value is set for this attribute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a1b08cfad64736e219be636aa74f0cf2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearDefaultValue</definition>
        <argsstring>()</argsstring>
        <name>ClearDefaultValue</name>
        <briefdescription>
<para>Clear the attribute&apos;s default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="303" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Spec properties</header>
      <memberdef kind="function" id="class_sdf_property_spec_1a9e10a354dacb79d04fce8b989a88e221" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _GetAttributeValueTypeName</definition>
        <argsstring>() const</argsstring>
        <name>_GetAttributeValueTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1aa09e2580406e4e30598f2a316ef029b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetComment</definition>
        <argsstring>() const</argsstring>
        <name>GetComment</name>
        <briefdescription>
<para>Returns the comment string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for comment is &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a9d2550c83c8f19b23cf3485a75e16681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetComment</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>SetComment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the comment string for this property spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a3756968703cbda2eb7db6d07fdb265f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsCustom</definition>
        <argsstring>() const</argsstring>
        <name>IsCustom</name>
        <briefdescription>
<para>Returns true if this spec declares a custom property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a982b0cde6967c48ef10e8f65e4140318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetCustom</definition>
        <argsstring>(bool custom)</argsstring>
        <name>SetCustom</name>
        <param>
          <type>bool</type>
          <declname>custom</declname>
        </param>
        <briefdescription>
<para>Sets whether this spec declares a custom property. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1a7314f31536d01f7a1b855bb752a1078e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">SdfVariability</ref></type>
        <definition>SDF_API SdfVariability GetVariability</definition>
        <argsstring>() const</argsstring>
        <name>GetVariability</name>
        <briefdescription>
<para>Returns the variability of the property. </para>
        </briefdescription>
        <detaileddescription>
<para>An attribute&apos;s variability may be <computeroutput>Varying</computeroutput> (the default), <computeroutput>Uniform</computeroutput>, <computeroutput>Config</computeroutput>, or <computeroutput>Computed</computeroutput>.</para>
<para>A relationship&apos;s variability may be <computeroutput>Varying</computeroutput> or <computeroutput>Uniform</computeroutput> (the default)</para>
<para><itemizedlist>
<listitem>
<para><computeroutput>Varying</computeroutput> attributes may be directly authored, animated and affected by <computeroutput>Actions</computeroutput>. They are the most flexible. Varying relationships can have a default and an anim spline, in addition to a list of targets.</para>
<para></para>
</listitem>
<listitem>
<para><computeroutput>Uniform</computeroutput> attributes may be authored only with non-animated values (default values). They cannot be affected by <computeroutput>Actions</computeroutput>, but they can be connected to other Uniform attributes. Uniform relationships have a list of targets but do not have default or anim spline values.</para>
<para></para>
</listitem>
<listitem>
<para><computeroutput>Config</computeroutput> attributes are the same as Uniform except that a Prim can choose to alter its collection of built-in properties based on the values of its Config attributes.</para>
<para></para>
</listitem>
<listitem>
<para><computeroutput>Computed</computeroutput> attributes may not be authored in scene description. Prims determine the values of their Computed attributes through Prim-specific computation. They may not be connected. </para>
</listitem>
</itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_property_spec_1ada160b5e89d8a2526f9e0fbfc55cbd42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasOnlyRequiredFields</definition>
        <argsstring>() const</argsstring>
        <name>HasOnlyRequiredFields</name>
        <briefdescription>
<para>Returns true if this PropertySpec has no significant data other than just what is necessary for instantiation. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, &quot;double foo&quot; has only required fields, but &quot;double foo = 3&quot; has more than just what is required.</para>
<para>This is similar to IsInert except that IsInert will always return false even for properties that have only required fields; PropertySpecs are never considered inert because even a spec with only required fields will cause instantiation of on-demand properties. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="370" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_property_spec_1a54fcbcac01dbb6910dfc4a2e4435617f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SDF_DECLARE_ABSTRACT_SPEC</definition>
        <argsstring>(SdfPropertySpec, SdfSpec)</argsstring>
        <name>SDF_DECLARE_ABSTRACT_SPEC</name>
        <param>
          <type><ref refid="class_sdf_property_spec" kindref="compound">SdfPropertySpec</ref></type>
        </param>
        <param>
          <type><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/propertySpec.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for <ref refid="class_sdf_attribute_spec" kindref="compound">SdfAttributeSpec</ref> and <ref refid="class_sdf_relationship_spec" kindref="compound">SdfRelationshipSpec</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Scene Spec Attributes (<ref refid="class_sdf_attribute_spec" kindref="compound">SdfAttributeSpec</ref>) and Relationships (<ref refid="class_sdf_relationship_spec" kindref="compound">SdfRelationshipSpec</ref>) are the basic properties that make up Scene Spec Prims (<ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref>). They share many qualities and can sometimes be treated uniformly. The common qualities are provided by this base class.</para>
<para>NOTE: Do not use Python reserved words and keywords as attribute names. This will cause attribute resolution to fail. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5148">
        <label>SdfRelationshipSpec</label>
        <link refid="class_sdf_relationship_spec"/>
        <childnode refid="5145" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5146">
        <label>SdfSpec</label>
        <link refid="class_sdf_spec"/>
      </node>
      <node id="5145">
        <label>SdfPropertySpec</label>
        <link refid="class_sdf_property_spec"/>
        <childnode refid="5146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5147">
        <label>SdfAttributeSpec</label>
        <link refid="class_sdf_attribute_spec"/>
        <childnode refid="5145" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5150">
        <label>SdfSpec</label>
        <link refid="class_sdf_spec"/>
      </node>
      <node id="5149">
        <label>SdfPropertySpec</label>
        <link refid="class_sdf_property_spec"/>
        <childnode refid="5150" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/propertySpec.h" line="60" column="1" bodyfile="pxr/usd/sdf/propertySpec.h" bodystart="59" bodyend="374"/>
    <listofallmembers>
      <member refid="class_sdf_spec_1ab3d82252ced8ce99c5118e47df91751e" prot="protected" virt="non-virtual"><scope>SdfPropertySpec</scope><name>_DeleteSpec</name></member>
      <member refid="class_sdf_property_spec_1a9e10a354dacb79d04fce8b989a88e221" prot="private" virt="non-virtual"><scope>SdfPropertySpec</scope><name>_GetAttributeValueTypeName</name></member>
      <member refid="class_sdf_spec_1aeff28b3237b8bdc8278510dfa4b354ee" prot="protected" virt="non-virtual"><scope>SdfPropertySpec</scope><name>_MoveSpec</name></member>
      <member refid="class_sdf_property_spec_1a8d3b6e7e600320a58351d2f74554a94c" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>CanSetName</name></member>
      <member refid="class_sdf_property_spec_1a1b08cfad64736e219be636aa74f0cf2b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>ClearDefaultValue</name></member>
      <member refid="class_sdf_spec_1a51b947731f02f1359b9820d33aa9b8d0" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>ClearField</name></member>
      <member refid="class_sdf_spec_1ad5a0d94f0ac661acb29d7490eb15d6d6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>ClearInfo</name></member>
      <member refid="class_sdf_property_spec_1ad4760909f0cdc5d9ec133f0607ec72b7" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetAssetInfo</name></member>
      <member refid="class_sdf_property_spec_1aa09e2580406e4e30598f2a316ef029b1" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetComment</name></member>
      <member refid="class_sdf_property_spec_1ade086cf82f9dd9c876ee3fd194b6f1bc" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetCustomData</name></member>
      <member refid="class_sdf_property_spec_1a6df60c2fa5084934c3c6880208a93cfc" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetDefaultValue</name></member>
      <member refid="class_sdf_property_spec_1a06ad997e921928b84fa0aad7e117651e" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetDisplayGroup</name></member>
      <member refid="class_sdf_property_spec_1acab74645dbf8de67523de409a2ef2eac" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetDisplayName</name></member>
      <member refid="class_sdf_property_spec_1a5f4c1bc9f2f793b24014551075d7cb6b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetDocumentation</name></member>
      <member refid="class_sdf_spec_1a1da119c3713ec401ca578a6faa6eac9a" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetFallbackForInfo</name></member>
      <member refid="class_sdf_spec_1a2ba08d83b8a934187f2a792367066fa6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetField</name></member>
      <member refid="class_sdf_spec_1a07f67495ca10863568306887212430f9" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetFieldAs</name></member>
      <member refid="class_sdf_property_spec_1a73b83447b66d61cd900b2e8c4f0868ca" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetHidden</name></member>
      <member refid="class_sdf_spec_1a623889e0a6c749418e10f23169f92c5b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetInfo</name></member>
      <member refid="class_sdf_spec_1a3fefae0b234ef14d141c83d6448f8656" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetLayer</name></member>
      <member refid="class_sdf_spec_1a52b21d3d611186ff336ad54292b0301a" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetMetaDataDisplayGroup</name></member>
      <member refid="class_sdf_spec_1ad2c2ea35643e325dacbc0bd8a3646b35" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetMetaDataInfoKeys</name></member>
      <member refid="class_sdf_property_spec_1a204344d110d2bb74928f43d2c1fe0047" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetName</name></member>
      <member refid="class_sdf_property_spec_1a320078c8c86baa76a237c2233d55a730" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetNameToken</name></member>
      <member refid="class_sdf_property_spec_1a6edc52bacab5e83dff5c14b6cc1e224b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetOwner</name></member>
      <member refid="class_sdf_spec_1a58e8463c104969bf41bb7c79605d9532" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetPath</name></member>
      <member refid="class_sdf_property_spec_1a5d9b89f530d37a530813620413217032" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetPermission</name></member>
      <member refid="class_sdf_property_spec_1aa430e2e4657e7043764dae08dc7a4e4c" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetPrefix</name></member>
      <member refid="class_sdf_spec_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSchema</name></member>
      <member refid="class_sdf_spec_1a5f9f08741402342a8edf57244fe8c738" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSpecType</name></member>
      <member refid="class_sdf_property_spec_1ab0afe06c8843e972dff682c3f7868ac9" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSuffix</name></member>
      <member refid="class_sdf_property_spec_1af72eac4916d1a00c08f27a4694835112" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSymmetricPeer</name></member>
      <member refid="class_sdf_property_spec_1a7b13ede56ab5ee26f285da2280167a31" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSymmetryArguments</name></member>
      <member refid="class_sdf_property_spec_1a5792f900b1a0fdb1314aa793af4e7df8" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetSymmetryFunction</name></member>
      <member refid="class_sdf_property_spec_1a903e11f34f9077dad4e14b098f208217" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetTimeSampleMap</name></member>
      <member refid="class_sdf_spec_1a7761385927d3f2e1d80af674b32d3ebc" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetTypeForInfo</name></member>
      <member refid="class_sdf_property_spec_1a7d09b1f92358004240f574e91a4402df" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetTypeName</name></member>
      <member refid="class_sdf_property_spec_1a3168b87540ef2e33bb378be34477d33b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetValueType</name></member>
      <member refid="class_sdf_property_spec_1a7314f31536d01f7a1b855bb752a1078e" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>GetVariability</name></member>
      <member refid="class_sdf_property_spec_1aa70a079544e80d7fea71e0789f236ef2" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>HasDefaultValue</name></member>
      <member refid="class_sdf_spec_1a0eb9c97beea5e2f59323cbda9669d566" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>HasField</name></member>
      <member refid="class_sdf_spec_1a428b01e709e5bace4d3e7e23ad683d30" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>HasField</name></member>
      <member refid="class_sdf_spec_1afafc521cdaa2ed6513d41be2fa433993" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>HasInfo</name></member>
      <member refid="class_sdf_property_spec_1ada160b5e89d8a2526f9e0fbfc55cbd42" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>HasOnlyRequiredFields</name></member>
      <member refid="class_sdf_property_spec_1a3756968703cbda2eb7db6d07fdb265f4" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>IsCustom</name></member>
      <member refid="class_sdf_spec_1a10e3f6a477185399b6d64d26a213f32a" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>IsDormant</name></member>
      <member refid="class_sdf_spec_1a22b46c26c417cc6153e59cbe921d9ebd" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>IsInert</name></member>
      <member refid="class_sdf_property_spec_1aaf39d3b7953761651981a821ce934211" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>IsValidName</name></member>
      <member refid="class_sdf_spec_1a7b34aca00921a15ba8d5ad48c4561e1c" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>ListFields</name></member>
      <member refid="class_sdf_spec_1af43fb14c1d6cec17f913c3846119f716" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>ListInfoKeys</name></member>
      <member refid="class_sdf_spec_1a48650684eb4cc0ef195716de825a0a58" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_spec_1aa51d7b0726a78b7f679b5f22d68ef7df" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>operator=</name></member>
      <member refid="class_sdf_spec_1a103a094590f42b07266c293b02ef099f" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>operator==</name></member>
      <member refid="class_sdf_spec_1a794044e16b8357b4fd1cd87438ed361f" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>PermissionToEdit</name></member>
      <member refid="class_sdf_property_spec_1a54fcbcac01dbb6910dfc4a2e4435617f" prot="private" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SDF_DECLARE_ABSTRACT_SPEC</name></member>
      <member refid="class_sdf_property_spec_1a3c2de13b36f263e83c5ec47f4b2f99ce" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetAssetInfo</name></member>
      <member refid="class_sdf_property_spec_1a9d2550c83c8f19b23cf3485a75e16681" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetComment</name></member>
      <member refid="class_sdf_property_spec_1a982b0cde6967c48ef10e8f65e4140318" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetCustom</name></member>
      <member refid="class_sdf_property_spec_1a99305c665e0c209304be5d7ad769e7e7" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetCustomData</name></member>
      <member refid="class_sdf_property_spec_1a9a9d10d893e5008a16e0b8eb9b9dead6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetDefaultValue</name></member>
      <member refid="class_sdf_property_spec_1aa245c2f50ef58e16948c27936a6bdf54" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetDisplayGroup</name></member>
      <member refid="class_sdf_property_spec_1aae8d187b8a5911caf2d118e6563e9889" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetDisplayName</name></member>
      <member refid="class_sdf_property_spec_1a0df7b9ada95628ee04032e00e48e7417" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetDocumentation</name></member>
      <member refid="class_sdf_spec_1a5b619246ffb0f1c56631529fa65e0435" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetField</name></member>
      <member refid="class_sdf_spec_1a3fc0276ed2f39480d00a61b888bd8434" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetField</name></member>
      <member refid="class_sdf_property_spec_1a33854bd790c06e0cc959b70a2511cfb9" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetHidden</name></member>
      <member refid="class_sdf_spec_1ac24a378f12ee3162c6f0173d001b11c0" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetInfo</name></member>
      <member refid="class_sdf_spec_1a860957d1b7800d7e930b53fe5b19ba86" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetInfoDictionaryValue</name></member>
      <member refid="class_sdf_property_spec_1aa1f241d28f26488867a276eca6d54405" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetName</name></member>
      <member refid="class_sdf_property_spec_1a8d4c331826b506be9dd6a3c92a4ef684" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetPermission</name></member>
      <member refid="class_sdf_property_spec_1a61b9d7858d930e1f8219ecfcfeaf193b" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetPrefix</name></member>
      <member refid="class_sdf_property_spec_1ab56b19de2727e437c05484300330b0c6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetSuffix</name></member>
      <member refid="class_sdf_property_spec_1af11cd8834441d94496bf4cce983559d6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetSymmetricPeer</name></member>
      <member refid="class_sdf_property_spec_1a46e788e0e01bb8ff6d716d6dbcdc5e65" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetSymmetryArgument</name></member>
      <member refid="class_sdf_property_spec_1a490d4304afe7b9b0cd2cfc9ef05be93f" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>SetSymmetryFunction</name></member>
      <member refid="class_sdf_spec_1a38c4971735cfa7f91c1618d441622ccc" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>WriteToStream</name></member>
      <member refid="class_sdf_spec_1acd7d1eec1135fa492866bd844b2694d6" prot="public" virt="non-virtual"><scope>SdfPropertySpec</scope><name>~SdfSpec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
