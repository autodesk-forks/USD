<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_dual_quatf" kind="class" language="C++" prot="public" final="yes">
    <compoundname>GfDualQuatf</compoundname>
    <includes refid="dual_quatf_8h" local="no">dualQuatf.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_dual_quatf_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" static="no">
        <type>float</type>
        <definition>typedef float ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="69" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_dual_quatf_1a02e72b864e3e37c3d95723547cf2d7ae" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf _real</definition>
        <argsstring></argsstring>
        <name>_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="265" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_dual_quatf_1a6ff6eb3845f6957f22b0f563897dcdc0" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GfQuatf _dual</definition>
        <argsstring></argsstring>
        <name>_dual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="266" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_dual_quatf_1ae1dcd0e46b3ce3b51d7dd452148acc82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatf</definition>
        <argsstring>()</argsstring>
        <name>GfDualQuatf</name>
        <briefdescription>
<para>The default constructor leaves the dual quaternion undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="72" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a57b4240f0dad68ab2f38d58c93ea5f84" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatf</definition>
        <argsstring>(float realVal)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>float</type>
          <declname>realVal</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>realVal</computeroutput> and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>Since quaternions typically must be normalized, reasonable values for <computeroutput>realVal</computeroutput> are -1, 0, or 1. Other values are legal but are likely to be meaningless. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="81" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a54a41f3ea51a24e65c57745cb2d6ca67" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatf</definition>
        <argsstring>(const GfQuatf &amp;real)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Initialize the real part to <computeroutput>real</computeroutput> quaternion and the imaginary part to zero quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="86" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1af0ffd7893868a1b9243cdd5504cb9764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatf</definition>
        <argsstring>(const GfQuatf &amp;real, const GfQuatf &amp;dual)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the real and dual parts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="91" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a22c1551ff2f07b25dfdda03b03c80235" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfDualQuatf</definition>
        <argsstring>(const GfQuatf &amp;rotation, const GfVec3f &amp;translation)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>This constructor initializes from a rotation and a translation components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="96" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a0f53efe6c8ad42904b211d18f42e8483" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuatf</definition>
        <argsstring>(const GfDualQuatd &amp;other)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a1967d85e1a510b883acd7e03c9968735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfDualQuatf</definition>
        <argsstring>(const GfDualQuath &amp;other)</argsstring>
        <name>GfDualQuatf</name>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a2482829a0d3a1e1c1d007e98016a6f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetReal</definition>
        <argsstring>(const GfQuatf &amp;real)</argsstring>
        <name>SetReal</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
<para>Sets the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="109" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1acaf8b46ebcb278cd49c1a16cccc70aee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetDual</definition>
        <argsstring>(const GfQuatf &amp;dual)</argsstring>
        <name>SetDual</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>dual</declname>
        </param>
        <briefdescription>
<para>Sets the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="114" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a6440476851f8e58aa44bbacf2be29ae8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>const GfQuatf&amp; GetReal</definition>
        <argsstring>() const</argsstring>
        <name>GetReal</name>
        <briefdescription>
<para>Returns the real part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="119" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a4cf36e3d8beac6d4921a7211646b05b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
        <definition>const GfQuatf&amp; GetDual</definition>
        <argsstring>() const</argsstring>
        <name>GetDual</name>
        <briefdescription>
<para>Returns the dual part of the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="124" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a8bf3c4c272f07878bd5e8b30e7ccb168" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; float, float &gt;</type>
        <definition>GF_API std::pair&lt;float, float&gt; GetLength</definition>
        <argsstring>() const</argsstring>
        <name>GetLength</name>
        <briefdescription>
<para>Returns geometric length of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1af2865c418cd7969d465a95be768684cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GF_API GfDualQuatf GetNormalized</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH) const</argsstring>
        <name>GetNormalized</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Returns a normalized (unit-length) version of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this returns the identity dual quaternion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a8d5e1f5754f6ebfbee12b8a2378c839c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::pair&lt; float, float &gt;</type>
        <definition>GF_API std::pair&lt;float, float&gt; Normalize</definition>
        <argsstring>(float eps=GF_MIN_VECTOR_LENGTH)</argsstring>
        <name>Normalize</name>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval><ref refid="group__group__gf___basic_math_1gae311f33eddd983e9559c10758908de5b" kindref="member">GF_MIN_VECTOR_LENGTH</ref></defval>
        </param>
        <briefdescription>
<para>Normalizes this dual quaternion in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this dual quaternion in place to unit length, returning the length before normalization. If the length of this dual quaternion is smaller than <computeroutput>eps</computeroutput>, this sets the dual quaternion to identity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a4956094433455b325b30b63384c8590a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GF_API GfDualQuatf GetConjugate</definition>
        <argsstring>() const</argsstring>
        <name>GetConjugate</name>
        <briefdescription>
<para>Returns the conjugate of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a2a66582536198a1ffc718e58a2e873e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GF_API GfDualQuatf GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Returns the inverse of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1af33682fe620b5dc9748220d4e1aea2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void SetTranslation</definition>
        <argsstring>(const GfVec3f &amp;translation)</argsstring>
        <name>SetTranslation</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Set the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1ac6f6f7894acc0bf6199a9a0798a9e597" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f GetTranslation</definition>
        <argsstring>() const</argsstring>
        <name>GetTranslation</name>
        <briefdescription>
<para>Get the translation component of this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1add60ba1098445c68c5ec0ec805221bdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfDualQuatf &amp;dq) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="180" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1ad0587b89805da6860207efb5adaa22a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfDualQuatf &amp;dq) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise dual quaternion inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The real and dual parts must match exactly for dual quaternions to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="187" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a5c57917ff10e386b79525e9bdea7dda5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
        <definition>GfDualQuatf&amp; operator+=</definition>
        <argsstring>(const GfDualQuatf &amp;dq)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="192" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a7683f852ee1e4933be634c1552644b20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
        <definition>GfDualQuatf&amp; operator -=</definition>
        <argsstring>(const GfDualQuatf &amp;dq)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Component-wise unary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="199" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a227ff71f3bc7c826ca9bdcb4a42c7de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
        <definition>GF_API GfDualQuatf&amp; operator *=</definition>
        <argsstring>(const GfDualQuatf &amp;dq)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Post-multiplies dual quaternion <computeroutput>dq</computeroutput> into this dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a0b211c3cbaef56362e5f39cae35bc53d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
        <definition>GfDualQuatf&amp; operator *=</definition>
        <argsstring>(float s)</argsstring>
        <name>operator *=</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="210" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1af84ccc31abca1d38bf83809714966811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
        <definition>GfDualQuatf&amp; operator/=</definition>
        <argsstring>(float s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Scales this dual quaternion by 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="217" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1a3544fc9c5dcb210d338ec0fd120d19cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f Transform</definition>
        <argsstring>(const GfVec3f &amp;vec) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the dual quaternion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="262" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_dual_quatf_1a6960a5b05ae4d1c06560b6e3cc2d5809" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>static GfDualQuatf GetZero</definition>
        <argsstring>()</argsstring>
        <name>GetZero</name>
        <briefdescription>
<para>Returns the zero dual quaternion, which has a real part of (0,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="130" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_dual_quatf_1aad26de2478aa189c9a96e935d6546d20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>static GfDualQuatf GetIdentity</definition>
        <argsstring>()</argsstring>
        <name>GetIdentity</name>
        <briefdescription>
<para>Returns the identity dual quaternion, which has a real part of (1,0,0,0) and a dual part of (0,0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="136" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="136" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_dual_quatf_1a6acae1a60a4275cb17e864d67428aa49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfDualQuatf &amp;dq)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="174" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a4243a982a97c005c3a483f77ab6d35b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator+</definition>
        <argsstring>(const GfDualQuatf &amp;dq1, const GfDualQuatf &amp;dq2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary sum operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="222" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a4c28ffb7e6f72494b8f82877dbc89dd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator -</definition>
        <argsstring>(const GfDualQuatf &amp;dq1, const GfDualQuatf &amp;dq2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Component-wise binary difference operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="229" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a9b3e30ebbb1f441a5991b7524afdff39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator *</definition>
        <argsstring>(const GfDualQuatf &amp;dq1, const GfDualQuatf &amp;dq2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq2</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternions <computeroutput>dq1</computeroutput> and <computeroutput>dq2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="236" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="236" bodyend="240"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a015ca08246c854801d9ae90cd69f5278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator *</definition>
        <argsstring>(const GfDualQuatf &amp;dq, float s)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="243" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a5d7ed2b732aefbbc816ee920dd064c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator *</definition>
        <argsstring>(float s, const GfDualQuatf &amp;dq)</argsstring>
        <name>operator *</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="249" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_dual_quatf_1a2781b394c495d60e3da96113c6a4ebbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref></type>
        <definition>GfDualQuatf operator/</definition>
        <argsstring>(const GfDualQuatf &amp;dq, float s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the product of dual quaternion <computeroutput>dq</computeroutput> and scalar 1 / <computeroutput>s</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="255" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="255" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: a real part quaternion and a dual part quaternion. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a generalized dual quaternion that has a real part and a dual part quaternions. Dual quaternions are used to represent a combination of rotation and translation.</para>
<para>References: <ulink url="https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf">https://www.cs.utah.edu/~ladislav/kavan06dual/kavan06dual.pdf</ulink> <ulink url="http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf">http://web.cs.iastate.edu/~cs577/handouts/dual-quaternion.pdf</ulink> </para>
    </detaileddescription>
    <location file="pxr/base/gf/dualQuatf.h" line="67" column="1" bodyfile="pxr/base/gf/dualQuatf.h" bodystart="66" bodyend="267"/>
    <listofallmembers>
      <member refid="class_gf_dual_quatf_1a6ff6eb3845f6957f22b0f563897dcdc0" prot="private" virt="non-virtual"><scope>GfDualQuatf</scope><name>_dual</name></member>
      <member refid="class_gf_dual_quatf_1a02e72b864e3e37c3d95723547cf2d7ae" prot="private" virt="non-virtual"><scope>GfDualQuatf</scope><name>_real</name></member>
      <member refid="class_gf_dual_quatf_1a4956094433455b325b30b63384c8590a" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetConjugate</name></member>
      <member refid="class_gf_dual_quatf_1a4cf36e3d8beac6d4921a7211646b05b1" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetDual</name></member>
      <member refid="class_gf_dual_quatf_1aad26de2478aa189c9a96e935d6546d20" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetIdentity</name></member>
      <member refid="class_gf_dual_quatf_1a2a66582536198a1ffc718e58a2e873e1" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetInverse</name></member>
      <member refid="class_gf_dual_quatf_1a8bf3c4c272f07878bd5e8b30e7ccb168" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetLength</name></member>
      <member refid="class_gf_dual_quatf_1af2865c418cd7969d465a95be768684cb" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetNormalized</name></member>
      <member refid="class_gf_dual_quatf_1a6440476851f8e58aa44bbacf2be29ae8" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetReal</name></member>
      <member refid="class_gf_dual_quatf_1ac6f6f7894acc0bf6199a9a0798a9e597" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetTranslation</name></member>
      <member refid="class_gf_dual_quatf_1a6960a5b05ae4d1c06560b6e3cc2d5809" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GetZero</name></member>
      <member refid="class_gf_dual_quatf_1ae1dcd0e46b3ce3b51d7dd452148acc82" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a57b4240f0dad68ab2f38d58c93ea5f84" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a54a41f3ea51a24e65c57745cb2d6ca67" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1af0ffd7893868a1b9243cdd5504cb9764" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a22c1551ff2f07b25dfdda03b03c80235" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a0f53efe6c8ad42904b211d18f42e8483" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a1967d85e1a510b883acd7e03c9968735" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>GfDualQuatf</name></member>
      <member refid="class_gf_dual_quatf_1a6acae1a60a4275cb17e864d67428aa49" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>hash_value</name></member>
      <member refid="class_gf_dual_quatf_1a8d5e1f5754f6ebfbee12b8a2378c839c" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>Normalize</name></member>
      <member refid="class_gf_dual_quatf_1ad0587b89805da6860207efb5adaa22a4" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator !=</name></member>
      <member refid="class_gf_dual_quatf_1a9b3e30ebbb1f441a5991b7524afdff39" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatf_1a015ca08246c854801d9ae90cd69f5278" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatf_1a5d7ed2b732aefbbc816ee920dd064c82" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator *</name></member>
      <member refid="class_gf_dual_quatf_1a227ff71f3bc7c826ca9bdcb4a42c7de5" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quatf_1a0b211c3cbaef56362e5f39cae35bc53d" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator *=</name></member>
      <member refid="class_gf_dual_quatf_1a4c28ffb7e6f72494b8f82877dbc89dd4" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator -</name></member>
      <member refid="class_gf_dual_quatf_1a7683f852ee1e4933be634c1552644b20" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator -=</name></member>
      <member refid="class_gf_dual_quatf_1a4243a982a97c005c3a483f77ab6d35b5" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator+</name></member>
      <member refid="class_gf_dual_quatf_1a5c57917ff10e386b79525e9bdea7dda5" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator+=</name></member>
      <member refid="class_gf_dual_quatf_1a2781b394c495d60e3da96113c6a4ebbc" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator/</name></member>
      <member refid="class_gf_dual_quatf_1af84ccc31abca1d38bf83809714966811" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator/=</name></member>
      <member refid="class_gf_dual_quatf_1add60ba1098445c68c5ec0ec805221bdd" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>operator==</name></member>
      <member refid="class_gf_dual_quatf_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>ScalarType</name></member>
      <member refid="class_gf_dual_quatf_1acaf8b46ebcb278cd49c1a16cccc70aee" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>SetDual</name></member>
      <member refid="class_gf_dual_quatf_1a2482829a0d3a1e1c1d007e98016a6f1d" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>SetReal</name></member>
      <member refid="class_gf_dual_quatf_1af33682fe620b5dc9748220d4e1aea2e8" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>SetTranslation</name></member>
      <member refid="class_gf_dual_quatf_1a3544fc9c5dcb210d338ec0fd120d19cb" prot="public" virt="non-virtual"><scope>GfDualQuatf</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
