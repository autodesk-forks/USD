<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_interval" kind="class" language="C++" prot="public">
    <compoundname>GfInterval</compoundname>
    <includes refid="interval_8h" local="no">interval.h</includes>
    <innerclass refid="struct_gf_interval_1_1___bound" prot="private">GfInterval::_Bound</innerclass>
      <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_gf_interval_1a00210742ae2adb09a5b5caf50c237101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfInterval</definition>
        <argsstring>()</argsstring>
        <name>GfInterval</name>
        <briefdescription>
<para>Construct an empty open interval, (0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="56" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a05b5ee1ec46908bfc2b36529c30f14cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfInterval</definition>
        <argsstring>(double val)</argsstring>
        <name>GfInterval</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Construct a closed interval representing the single point, as [val,val]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="62" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1abd44a41b7f3fcbeba2f4a9cfa40ee7f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfInterval</definition>
        <argsstring>(double min, double max, bool minClosed=true, bool maxClosed=true)</argsstring>
        <name>GfInterval</name>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>minClosed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>maxClosed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct an interval with the given arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="68" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="68" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Math operations</header>
      <memberdef kind="function" id="class_gf_interval_1a24d4d65739ce34fbe2033684fd7e8613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        <definition>GfInterval&amp; operator&amp;=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Boolean intersection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="205" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="205" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a03c0bcecd4d43cc2503ba12cb3944480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        <definition>GfInterval&amp; operator|=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns the interval that bounds the union of this interval and rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="228" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="228" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a995b7c7766b8a9d48050262dc8ca18a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        <definition>GfInterval&amp; operator+=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Interval addition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="250" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="250" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1afbe074982244898527ea55e6c3fef463" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        <definition>GfInterval&amp; operator-=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Interval subtraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="261" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a73cdaa567e917a3a54cf0f55df39754c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Interval unary minus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="266" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a6199bc092a341a958ebeecf38586440b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        <definition>GfInterval&amp; operator *=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Interval multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="271" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="271" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a29a3eb7d4354c289b7f2c09890ae918a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="282" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a065dfaf93430d0d63b16dc3d1c6ae3ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="288" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a033aea5af1d8d6bbb3ccb5c439239a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const GfInterval &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="294" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a1db77024f2398f2617c3498a7f28a4bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator|</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Union operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="300" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="300" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a4db31ba8e06b619b358f9b795ab6a120" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator &amp;</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Intersection operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="308" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1accfcce7ec62283b9a2ab84c4b9026d16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator+</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Addition operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="316" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a4c6d3547cbcdadbdf02d5046f398c5cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator-</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="324" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1aeef58bb182ed75193699e3e2fb130129" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>GfInterval operator *</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Multiplication operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="332" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="332" bodyend="337"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_interval_1a3ff571201034fe79b18457648ff77215" prot="private" static="no" mutable="no">
        <type>_Bound</type>
        <definition>_Bound _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="411" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_interval_1a3506d1ba87c8bb0ca7bcb5a25a782acf" prot="private" static="no" mutable="no">
        <type>_Bound</type>
        <definition>_Bound _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="411" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_interval_1aab89d35e41dda257272fc2d83f8072f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="77" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1aa5e70f013623011090affb3791c99d71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="82" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a4ead7ff30066926e7eff57178561ae2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const GfInterval &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less-than operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="87" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ac43e0b9c3df70959ccafb5932818843b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Hash</definition>
        <argsstring>() const</argsstring>
        <name>Hash</name>
        <briefdescription>
<para>Hash value. </para>
        </briefdescription>
        <detaileddescription>
<para>Just a basic hash function, not particularly high quality. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="102" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a51a80995a7b8a57b286c1bf00b269230" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Minimum value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="109" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a0af16597b29b667c2b2f68285e6c15d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Maximum value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="112" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1aad2c99ec0bcb610bc672123986425fba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(double v)</argsstring>
        <name>SetMin</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set minimum value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="115" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a62bbd3c13350f5bd76a5fe637b7e2d37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(double v, bool minClosed)</argsstring>
        <name>SetMin</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>minClosed</declname>
        </param>
        <briefdescription>
<para>Set minimum value and boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="120" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad2d1d2bf4d61e8077fb4744a9f777f9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(double v)</argsstring>
        <name>SetMax</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set maximum value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="125" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a8f5da174929f7c6f5f47f3aeb35f5437" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(double v, bool maxClosed)</argsstring>
        <name>SetMax</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>maxClosed</declname>
        </param>
        <briefdescription>
<para>Set maximum value and boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="130" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a93410979d5ff0258dd06133141bdea43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMinClosed</definition>
        <argsstring>() const</argsstring>
        <name>IsMinClosed</name>
        <briefdescription>
<para>Minimum boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="135" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ae71c3a8fadef9c8ed79e1e34c9ceb43d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMaxClosed</definition>
        <argsstring>() const</argsstring>
        <name>IsMaxClosed</name>
        <briefdescription>
<para>Maximum boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="138" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ae1a37e1dd452a97f18de957cbe40e073" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMinOpen</definition>
        <argsstring>() const</argsstring>
        <name>IsMinOpen</name>
        <briefdescription>
<para>Minimum boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="141" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a957d57ba0baabfe149871125132f9149" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMaxOpen</definition>
        <argsstring>() const</argsstring>
        <name>IsMaxOpen</name>
        <briefdescription>
<para>Maximum boundary condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="144" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a5e7a3905daaa0ab3618ba0820625d0c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMaxFinite</definition>
        <argsstring>() const</argsstring>
        <name>IsMaxFinite</name>
        <briefdescription>
<para>Returns true if the maximum value is finite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="147" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1aaba27512280f0cc160dca4236abd7a26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMinFinite</definition>
        <argsstring>() const</argsstring>
        <name>IsMinFinite</name>
        <briefdescription>
<para>Returns true if the minimum value is finite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="153" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a33b7dcc502aae627fbc56bcfecf33af1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsFinite</definition>
        <argsstring>() const</argsstring>
        <name>IsFinite</name>
        <briefdescription>
<para>Returns true if both the maximum and minimum value are finite. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="159" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Return true iff the interval is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="164" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a60cae1359e0152b07994fa04e045308a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Width of the interval. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty interval has size 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="172" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1a856907b3b819ab1ba04e9acc1431d74f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="177" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad94780b97e79adc375b7f185b4e00703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(double d) const</argsstring>
        <name>Contains</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Return true iff the value d is contained in the interval. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty interval contains no values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="181" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad7d37453d231d34d5f59bd783cc74edc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool In</definition>
        <argsstring>(double d) const</argsstring>
        <name>In</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="187" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad28fafa8034eb4a4267dce715f7af8bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfInterval &amp;i) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return true iff the interval i is entirely contained in the interval. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty interval contains no intervals, not even other empty intervals. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="192" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad45f108d43e189163f9f966d94176ab8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Intersects</definition>
        <argsstring>(const GfInterval &amp;i) const</argsstring>
        <name>Intersects</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return true iff the given interval i intersects this interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="197" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="197" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_interval_1aa5ec846bb701dd23d54b415d7d292950" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfInterval const &amp;i)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref> const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="104" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="104" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_interval_1a139c5f097295af11a0b00961a32ea618" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_interval" kindref="compound">GfInterval</ref></type>
        <definition>static GfInterval GetFullInterval</definition>
        <argsstring>()</argsstring>
        <name>GetFullInterval</name>
        <briefdescription>
<para>Returns the full interval (-inf, inf). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="342" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="342" bodyend="346"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_interval_1a612ae1ba8e848a96466581b1740fe81f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const _Bound &amp;</type>
        <definition>static const _Bound&amp; _Min</definition>
        <argsstring>(const _Bound &amp;a, const _Bound &amp;b)</argsstring>
        <name>_Min</name>
        <param>
          <type>const _Bound &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const _Bound &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="396" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="396" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_interval_1ad88e2d0087e880fb64e277b144c71561" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const _Bound &amp;</type>
        <definition>static const _Bound&amp; _Max</definition>
        <argsstring>(const _Bound &amp;a, const _Bound &amp;b)</argsstring>
        <name>_Max</name>
        <param>
          <type>const _Bound &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const _Bound &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="404" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="404" bodyend="408"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A basic mathematical interval class. </para>
    </briefdescription>
    <detaileddescription>
<para>Can represent intervals with either open or closed boundary conditions. </para>
    </detaileddescription>
    <location file="pxr/base/gf/interval.h" line="50" column="1" bodyfile="pxr/base/gf/interval.h" bodystart="49" bodyend="412"/>
    <listofallmembers>
      <member refid="class_gf_interval_1a3506d1ba87c8bb0ca7bcb5a25a782acf" prot="private" virt="non-virtual"><scope>GfInterval</scope><name>_max</name></member>
      <member refid="class_gf_interval_1ad88e2d0087e880fb64e277b144c71561" prot="private" virt="non-virtual"><scope>GfInterval</scope><name>_Max</name></member>
      <member refid="class_gf_interval_1a3ff571201034fe79b18457648ff77215" prot="private" virt="non-virtual"><scope>GfInterval</scope><name>_min</name></member>
      <member refid="class_gf_interval_1a612ae1ba8e848a96466581b1740fe81f" prot="private" virt="non-virtual"><scope>GfInterval</scope><name>_Min</name></member>
      <member refid="class_gf_interval_1ad94780b97e79adc375b7f185b4e00703" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>Contains</name></member>
      <member refid="class_gf_interval_1ad28fafa8034eb4a4267dce715f7af8bd" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>Contains</name></member>
      <member refid="class_gf_interval_1a139c5f097295af11a0b00961a32ea618" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GetFullInterval</name></member>
      <member refid="class_gf_interval_1a0af16597b29b667c2b2f68285e6c15d2" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GetMax</name></member>
      <member refid="class_gf_interval_1a51a80995a7b8a57b286c1bf00b269230" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GetMin</name></member>
      <member refid="class_gf_interval_1a60cae1359e0152b07994fa04e045308a" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GetSize</name></member>
      <member refid="class_gf_interval_1a00210742ae2adb09a5b5caf50c237101" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GfInterval</name></member>
      <member refid="class_gf_interval_1a05b5ee1ec46908bfc2b36529c30f14cc" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GfInterval</name></member>
      <member refid="class_gf_interval_1abd44a41b7f3fcbeba2f4a9cfa40ee7f6" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>GfInterval</name></member>
      <member refid="class_gf_interval_1ac43e0b9c3df70959ccafb5932818843b" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>Hash</name></member>
      <member refid="class_gf_interval_1aa5ec846bb701dd23d54b415d7d292950" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>hash_value</name></member>
      <member refid="class_gf_interval_1ad7d37453d231d34d5f59bd783cc74edc" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>In</name></member>
      <member refid="class_gf_interval_1ad45f108d43e189163f9f966d94176ab8" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>Intersects</name></member>
      <member refid="class_gf_interval_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsEmpty</name></member>
      <member refid="class_gf_interval_1a33b7dcc502aae627fbc56bcfecf33af1" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsFinite</name></member>
      <member refid="class_gf_interval_1ae71c3a8fadef9c8ed79e1e34c9ceb43d" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMaxClosed</name></member>
      <member refid="class_gf_interval_1a5e7a3905daaa0ab3618ba0820625d0c0" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMaxFinite</name></member>
      <member refid="class_gf_interval_1a957d57ba0baabfe149871125132f9149" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMaxOpen</name></member>
      <member refid="class_gf_interval_1a93410979d5ff0258dd06133141bdea43" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMinClosed</name></member>
      <member refid="class_gf_interval_1aaba27512280f0cc160dca4236abd7a26" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMinFinite</name></member>
      <member refid="class_gf_interval_1ae1a37e1dd452a97f18de957cbe40e073" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>IsMinOpen</name></member>
      <member refid="class_gf_interval_1a4db31ba8e06b619b358f9b795ab6a120" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator &amp;</name></member>
      <member refid="class_gf_interval_1aeef58bb182ed75193699e3e2fb130129" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator *</name></member>
      <member refid="class_gf_interval_1a6199bc092a341a958ebeecf38586440b" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator *=</name></member>
      <member refid="class_gf_interval_1aa5e70f013623011090affb3791c99d71" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator!=</name></member>
      <member refid="class_gf_interval_1a24d4d65739ce34fbe2033684fd7e8613" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator&amp;=</name></member>
      <member refid="class_gf_interval_1accfcce7ec62283b9a2ab84c4b9026d16" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator+</name></member>
      <member refid="class_gf_interval_1a995b7c7766b8a9d48050262dc8ca18a5" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator+=</name></member>
      <member refid="class_gf_interval_1a73cdaa567e917a3a54cf0f55df39754c" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator-</name></member>
      <member refid="class_gf_interval_1a4c6d3547cbcdadbdf02d5046f398c5cd" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator-</name></member>
      <member refid="class_gf_interval_1afbe074982244898527ea55e6c3fef463" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator-=</name></member>
      <member refid="class_gf_interval_1a4ead7ff30066926e7eff57178561ae2a" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator&lt;</name></member>
      <member refid="class_gf_interval_1a065dfaf93430d0d63b16dc3d1c6ae3ec" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator&lt;=</name></member>
      <member refid="class_gf_interval_1aab89d35e41dda257272fc2d83f8072f0" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator==</name></member>
      <member refid="class_gf_interval_1a29a3eb7d4354c289b7f2c09890ae918a" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator&gt;</name></member>
      <member refid="class_gf_interval_1a033aea5af1d8d6bbb3ccb5c439239a12" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator&gt;=</name></member>
      <member refid="class_gf_interval_1a1db77024f2398f2617c3498a7f28a4bf" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator|</name></member>
      <member refid="class_gf_interval_1a03c0bcecd4d43cc2503ba12cb3944480" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>operator|=</name></member>
      <member refid="class_gf_interval_1ad2d1d2bf4d61e8077fb4744a9f777f9c" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>SetMax</name></member>
      <member refid="class_gf_interval_1a8f5da174929f7c6f5f47f3aeb35f5437" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>SetMax</name></member>
      <member refid="class_gf_interval_1aad2c99ec0bcb610bc672123986425fba" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>SetMin</name></member>
      <member refid="class_gf_interval_1a62bbd3c13350f5bd76a5fe637b7e2d37" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>SetMin</name></member>
      <member refid="class_gf_interval_1a856907b3b819ab1ba04e9acc1431d74f" prot="public" virt="non-virtual"><scope>GfInterval</scope><name>Size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
