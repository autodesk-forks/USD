<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="work_page_front" kind="page">
    <compoundname>work_page_front</compoundname>
    <title>Work : Multi-threaded Dispatch</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="work_page_front_1work_Summary">
<title>Summary</title>
<para>The <bold>work</bold> library is intended to simplify the use of multithreading in the context of our software ecosystem.</para>
<para>This library is intended as a thin abstraction layer on top of a multithreading subsystem. The abstraction serves two purposes: <orderedlist>
<listitem>
<para>To simplify the use of common constructs like &quot;Parallel For&quot; </para>
</listitem>
<listitem>
<para>To centralize our dependency on a particular multithreading subsystem (e.g., TBB, etc.). </para>
</listitem>
</orderedlist>
</para>
<para>Because of the way multithreading subsystems work and because of the way they need to interact with each other in managing system resources, it is not generally practical for each client to use whatever threading system they like (e.g., TBB for one client, OpenMP for another).</para>
</sect1>
<sect1 id="work_page_front_1work_Initialization">
<title>Initializing and Limiting Multithreading</title>
<para>The library defaults to maximum concurrency, i.e. it will attempt to use as many threads as available on the system. The default concurrency limit is established at static initialization time. The PXR_WORK_THREAD_LIMIT environment variable can be set to further limit concurrency, such as for example in a farm environment. PXR_WORK_THREAD_LIMIT must be set to an integer N, denoting one of the following: <itemizedlist>
<listitem>
<para>0 - maximum concurrency (default if unset) </para>
</listitem>
<listitem>
<para>1 - single-threaded mode </para>
</listitem>
<listitem>
<para>positive N - limit to N threads (clamped to number of hardware threads available) </para>
</listitem>
<listitem>
<para>negative N - limit to all but N hardware threads (clamped to 1) </para>
</listitem>
</itemizedlist>
</para>
<para>The concurrency limit can be set programmatically, using for example:</para>
<para><programlisting><codeline><highlight class="normal">WorkSetConcurrencyLimitArgument(N);</highlight></codeline>
</programlisting></para>
<para>or</para>
<para><programlisting><codeline><highlight class="normal">WorkSetMaximumConcurrencyLimit();</highlight></codeline>
</programlisting></para>
<para>It is preferable to use <ref refid="thread_limits_8h_1a5ced10f89e30e3b67b4a6ea03b727a35" kindref="member">WorkSetMaximumConcurrencyLimit()</ref> when the desire to use the hardware to its fullest rather than specify the maximum concurrency limit manually.</para>
</sect1>
<sect1 id="work_page_front_1work_Example">
<title>Simple &quot;Parallel For&quot; Example</title>
<para>Once you&apos;ve initialized the library, you can now harness the awesome power of your multi-core machine. Here&apos;s a simple example of a Parallel For.</para>
<para><programlisting><codeline><highlight class="normal">static<sp/>void<sp/>_DoubleTheValues(size_t<sp/>begin,<sp/>size_t<sp/>end,<sp/>std::vector&lt;int&gt;<sp/>*v)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>end;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*v)[i]<sp/>*=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>DoubleInParallel(std::vector&lt;int&gt;<sp/>*v)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WorkParallelForN(v-&gt;size(),<sp/>std::bind(&amp;_DoubleTheValues,<sp/>_1,<sp/>_2,<sp/>v));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You can avoid the std::bind and provide your own functor object as well. </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
