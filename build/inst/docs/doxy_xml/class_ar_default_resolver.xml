<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_ar_default_resolver" kind="class" language="C++" prot="public">
    <compoundname>ArDefaultResolver</compoundname>
    <basecompoundref refid="class_ar_resolver" prot="public" virt="non-virtual">ArResolver</basecompoundref>
    <includes refid="default_resolver_8h" local="no">defaultResolver.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ar_default_resolver_1a2eb17118c1a7f3ea63bf1d2c84cf35fc" prot="private" static="no" mutable="no">
        <type><ref refid="class_ar_default_resolver_context" kindref="compound">ArDefaultResolverContext</ref></type>
        <definition>ArDefaultResolverContext _fallbackContext</definition>
        <argsstring></argsstring>
        <name>_fallbackContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="146" column="1" bodyfile="pxr/usd/ar/defaultResolver.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ar_default_resolver_1a235163a404b5e1efaf44055914d552d8" prot="private" static="no" mutable="no">
        <type><ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref></type>
        <definition>ArResolverContext _defaultContext</definition>
        <argsstring></argsstring>
        <name>_defaultContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="147" column="1" bodyfile="pxr/usd/ar/defaultResolver.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ar_default_resolver_1a14140112f70d229f1d61a0bef8851476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API</type>
        <definition>AR_API ArDefaultResolver</definition>
        <argsstring>()</argsstring>
        <name>ArDefaultResolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1aa051850efa41d29c458783e2a448e2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>AR_API</type>
        <definition>virtual AR_API ~ArDefaultResolver</definition>
        <argsstring>()</argsstring>
        <name>~ArDefaultResolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_ar_default_resolver_1aa800e0f25ecd6949b00477243ce0c6a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API void</type>
        <definition>static AR_API void SetDefaultSearchPath</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;searchPath)</argsstring>
        <name>SetDefaultSearchPath</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>searchPath</declname>
        </param>
        <briefdescription>
<para>Set the default search path that will be used during asset resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called before the first call to <ref refid="ar_2resolver_8h_1ab0913ebfd579684add6b59b44983a633" kindref="member">ArGetResolver</ref>. The specified paths will be searched <emphasis>in addition to, and before</emphasis> paths specified via the environment variable PXR_AR_DEFAULT_SEARCH_PATH </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_ar_default_resolver_1a59657c5b7485e43d4847b62b26429169" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string _CreateIdentifier</definition>
        <argsstring>(const std::string &amp;assetPath, const ArResolvedPath &amp;anchorAssetPath) const override</argsstring>
        <name>_CreateIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>anchorAssetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a155d071d5f25a65b0a51eb8a8c9f40ac" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string _CreateIdentifierForNewAsset</definition>
        <argsstring>(const std::string &amp;assetPath, const ArResolvedPath &amp;anchorAssetPath) const override</argsstring>
        <name>_CreateIdentifierForNewAsset</name>
        <reimplements refid="class_ar_resolver_1a8eac0ab4acfa5276713bee14b8e11308">_CreateIdentifierForNewAsset</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>anchorAssetPath</declname>
        </param>
        <briefdescription>
<para>Return an identifier for a new asset at the given <computeroutput>assetPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is similar to _CreateIdentifier but is used to create identifiers for assets that may not exist yet and are being created.</para>
<para>Example uses:<itemizedlist>
<listitem><para>When creating a new layer via <ref refid="class_sdf_layer_1aad57cd44403a4f95a2bb6c730fa1b0f5" kindref="member">SdfLayer::CreateNew</ref>, CreateIdentifierForNewAsset will be called with the asset path given to the function. The result will be used as the new layer&apos;s identifier. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a378ebf9b021b95783ddb7a2bcf236f29" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref></type>
        <definition>AR_API ArResolvedPath _Resolve</definition>
        <argsstring>(const std::string &amp;assetPath) const override</argsstring>
        <name>_Resolve</name>
        <reimplements refid="class_ar_resolver_1a3b0b5d475de0d5fb0d17756b07696014">_Resolve</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Return the resolved path for the given <computeroutput>assetPath</computeroutput> or an empty <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> if no asset exists at that path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1ad085f592a3d0a31d2a388906f9f6e735" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref></type>
        <definition>AR_API ArResolvedPath _ResolveForNewAsset</definition>
        <argsstring>(const std::string &amp;assetPath) const override</argsstring>
        <name>_ResolveForNewAsset</name>
        <reimplements refid="class_ar_resolver_1a66bbf8128c2c2253eff9b34ba9d5baae">_ResolveForNewAsset</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Return the resolved path for the given <computeroutput>assetPath</computeroutput> that may be used to create a new asset or an empty <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> if such a path cannot be computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1acbd76d7592de831df1d894066dd7295f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref></type>
        <definition>AR_API ArResolverContext _CreateDefaultContext</definition>
        <argsstring>() const override</argsstring>
        <name>_CreateDefaultContext</name>
        <reimplements refid="class_ar_resolver_1a8ea0d703db16ed156b942bb7e1b130ea">_CreateDefaultContext</reimplements>
        <briefdescription>
<para>Return a default <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> that may be bound to this resolver to resolve assets when no other context is explicitly specified. </para>
        </briefdescription>
        <detaileddescription>
<para>When CreateDefaultContext is called on the configured asset resolver, Ar will call this method on the primary resolver and all URI/IRI resolvers and merge the results into a single <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> that will be returned to the consumer.</para>
<para>This function should not automatically bind this context, but should create one that may be used later.</para>
<para>The default implementation returns a default-constructed <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref>.</para>
<para>Example uses:<itemizedlist>
<listitem><para><ref refid="class_usd_stage" kindref="compound">UsdStage</ref> will call CreateDefaultContext when creating a new stage with an anonymous root layer and without a given context. The returned context will be bound when resolving asset paths on that stage. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1aa21e74d0ce1ccc62fde8b26f90db16e1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref></type>
        <definition>AR_API ArResolverContext _CreateDefaultContextForAsset</definition>
        <argsstring>(const std::string &amp;assetPath) const override</argsstring>
        <name>_CreateDefaultContextForAsset</name>
        <reimplements refid="class_ar_resolver_1a5b0e0ea52ac80bb4a4b6d1f881331df1">_CreateDefaultContextForAsset</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Creates a context that adds the directory containing <computeroutput>assetPath</computeroutput> as a first directory to be searched, when the resulting context is bound (. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_ar_resolver_context_binder" kindref="compound">ArResolverContextBinder</ref>).</para>
</simplesect>
If <computeroutput>assetPath</computeroutput> is empty, returns an empty context; otherwise, if <computeroutput>assetPath</computeroutput> is not an absolute filesystem path, it will first be anchored to the process&apos;s current working directory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a88bd7f9112c7f5dfaced947b22336340" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref></type>
        <definition>AR_API ArResolverContext _CreateContextFromString</definition>
        <argsstring>(const std::string &amp;contextStr) const override</argsstring>
        <name>_CreateContextFromString</name>
        <reimplements refid="class_ar_resolver_1ab67c369f100fd0488e74c3293c688156">_CreateContextFromString</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>contextStr</declname>
        </param>
        <briefdescription>
<para>Creates an <ref refid="class_ar_default_resolver_context" kindref="compound">ArDefaultResolverContext</ref> from <computeroutput>contextStr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This string is expected to be a list of directories delimited by the platform&apos;s standard path separator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a0b256bacb573a7f7150157c31112d135" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API bool</type>
        <definition>AR_API bool _IsContextDependentPath</definition>
        <argsstring>(const std::string &amp;assetPath) const override</argsstring>
        <name>_IsContextDependentPath</name>
        <reimplements refid="class_ar_resolver_1a618cc648520d613dbebadc1eaa57d688">_IsContextDependentPath</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Return true if the result of resolving the given <computeroutput>assetPath</computeroutput> may differ depending on the asset resolver context that is bound when Resolve is called, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>The default implementation returns false.</para>
<para>Example uses:<itemizedlist>
<listitem><para><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> will call this function to check if the identifier given to <ref refid="class_sdf_layer_1acc4e19f5c2bf0bab57804acee65ebb78" kindref="member">SdfLayer::Find</ref> or <ref refid="class_sdf_layer_1aa01062bf4dde3f28c1fc617a1acaf35e" kindref="member">SdfLayer::FindOrOpen</ref> is context-dependent. If it is and a layer exists with the same identifier, <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> can return it without resolving the identifier. If it is not, <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> must resolve the identifier and search for a layer with the same resolved path, even if a layer exists with the same identifier. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a98cefaf82c98c23f4024fb5d21bb55c2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API <ref refid="class_ar_timestamp" kindref="compound">ArTimestamp</ref></type>
        <definition>AR_API ArTimestamp _GetModificationTimestamp</definition>
        <argsstring>(const std::string &amp;path, const ArResolvedPath &amp;resolvedPath) const override</argsstring>
        <name>_GetModificationTimestamp</name>
        <reimplements refid="class_ar_resolver_1a51c771ddc5d3882b3ece763fbb60e507">_GetModificationTimestamp</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="class_ar_timestamp" kindref="compound">ArTimestamp</ref> representing the last time the asset at <computeroutput>assetPath</computeroutput> was modified. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>resolvedPath</computeroutput> is the resolved path computed for the given <computeroutput>assetPath</computeroutput>. If a timestamp cannot be retrieved, return an invalid <ref refid="class_ar_timestamp" kindref="compound">ArTimestamp</ref>.</para>
<para>The default implementation returns an invalid <ref refid="class_ar_timestamp" kindref="compound">ArTimestamp</ref>.</para>
<para>Example uses:<itemizedlist>
<listitem><para><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> will call GetModificationTimestamp when opening a layer and store the returned timestamp. When <ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">SdfLayer::Reload</ref> is called on that layer, this method will be called again. If the returned timestamp differs from the stored timestamp, or if it is invalid, the layer will be reloaded. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1a9b798d003cedb668f9c45e135692a879" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API std::shared_ptr&lt; <ref refid="class_ar_asset" kindref="compound">ArAsset</ref> &gt;</type>
        <definition>AR_API std::shared_ptr&lt;ArAsset&gt; _OpenAsset</definition>
        <argsstring>(const ArResolvedPath &amp;resolvedPath) const override</argsstring>
        <name>_OpenAsset</name>
        <reimplements refid="class_ar_resolver_1ac2b5b770ce42d1d20b638eeb231c86eb">_OpenAsset</reimplements>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="class_ar_asset" kindref="compound">ArAsset</ref> object for the asset located at <computeroutput>resolvedPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return an invalid std::shared_ptr if object could not be created (for example, if the asset at the given path could not be opened).</para>
<para>Note that clients may still be using the data associated with this object even after the last shared_ptr has been destroyed. For example, a client may have created a memory mapping using the FILE* presented in the <ref refid="class_ar_asset" kindref="compound">ArAsset</ref> object; this would preclude truncating or overwriting any of the contents of that file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ar_default_resolver_1ad7c9c5831bede022a807f77838208c64" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>AR_API std::shared_ptr&lt; <ref refid="class_ar_writable_asset" kindref="compound">ArWritableAsset</ref> &gt;</type>
        <definition>AR_API std::shared_ptr&lt;ArWritableAsset&gt; _OpenAssetForWrite</definition>
        <argsstring>(const ArResolvedPath &amp;resolvedPath, WriteMode writeMode) const override</argsstring>
        <name>_OpenAssetForWrite</name>
        <reimplements refid="class_ar_resolver_1a8a70fbd567fd56d9567f8ab9796a4d69">_OpenAssetForWrite</reimplements>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type><ref refid="class_ar_resolver_1a61d23b393fdc35f2f0e30a1ed566c76d" kindref="member">WriteMode</ref></type>
          <declname>writeMode</declname>
        </param>
        <briefdescription>
<para>Creates an ArFilesystemWriteableAsset for the asset at the given <computeroutput>resolvedPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_ar_default_resolver_1a8b28062d222cab5554815e069c4846c1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_ar_default_resolver_context" kindref="compound">ArDefaultResolverContext</ref> *</type>
        <definition>const ArDefaultResolverContext* _GetCurrentContextPtr</definition>
        <argsstring>() const</argsstring>
        <name>_GetCurrentContextPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/defaultResolver.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Default asset resolution implementation used when no plugin implementation is provided. </para>
    </briefdescription>
    <detaileddescription>
<para>In order to resolve assets specified by relative paths, this resolver implements a simple &quot;search path&quot; scheme. The resolver will anchor the relative path to a series of directories and return the first absolute path where the asset exists.</para>
<para>The first directory will always be the current working directory. The resolver will then examine the directories specified via the following mechanisms (in order):</para>
<para><itemizedlist>
<listitem><para>The currently-bound <ref refid="class_ar_default_resolver_context" kindref="compound">ArDefaultResolverContext</ref> for the calling thread</para>
</listitem><listitem><para><ref refid="class_ar_default_resolver_1aa800e0f25ecd6949b00477243ce0c6a7" kindref="member">ArDefaultResolver::SetDefaultSearchPath</ref></para>
</listitem><listitem><para>The environment variable PXR_AR_DEFAULT_SEARCH_PATH. This is expected to be a list of directories delimited by the platform&apos;s standard path separator.</para>
</listitem></itemizedlist>
</para>
<para><ref refid="class_ar_default_resolver" kindref="compound">ArDefaultResolver</ref> supports creating an <ref refid="class_ar_default_resolver_context" kindref="compound">ArDefaultResolverContext</ref> via <ref refid="class_ar_resolver_1a5b165aaf701119f4b3bc26cdebd38b93" kindref="member">ArResolver::CreateContextFromString</ref> by passing a list of directories delimited by the platform&apos;s standard path separator. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="704">
        <label>ArResolver</label>
        <link refid="class_ar_resolver"/>
      </node>
      <node id="703">
        <label>ArDefaultResolver</label>
        <link refid="class_ar_default_resolver"/>
        <childnode refid="704" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="706">
        <label>ArResolver</label>
        <link refid="class_ar_resolver"/>
      </node>
      <node id="705">
        <label>ArDefaultResolver</label>
        <link refid="class_ar_default_resolver"/>
        <childnode refid="706" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/ar/defaultResolver.h" line="66" column="1" bodyfile="pxr/usd/ar/defaultResolver.h" bodystart="64" bodyend="148"/>
    <listofallmembers>
      <member refid="class_ar_resolver_1a02b1f3d70b0771e0e399af8625edeb15" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_BeginCacheScope</name></member>
      <member refid="class_ar_resolver_1aea5ca0e868d149785b777baf8cfcde5e" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_BindContext</name></member>
      <member refid="class_ar_resolver_1aa9be097a3054cd75a38ff68030bf9c67" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_CanWriteAssetToPath</name></member>
      <member refid="class_ar_default_resolver_1a88bd7f9112c7f5dfaced947b22336340" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_CreateContextFromString</name></member>
      <member refid="class_ar_default_resolver_1acbd76d7592de831df1d894066dd7295f" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_CreateDefaultContext</name></member>
      <member refid="class_ar_default_resolver_1aa21e74d0ce1ccc62fde8b26f90db16e1" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_CreateDefaultContextForAsset</name></member>
      <member refid="class_ar_default_resolver_1a59657c5b7485e43d4847b62b26429169" prot="protected" virt="non-virtual"><scope>ArDefaultResolver</scope><name>_CreateIdentifier</name></member>
      <member refid="class_ar_default_resolver_1a155d071d5f25a65b0a51eb8a8c9f40ac" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_CreateIdentifierForNewAsset</name></member>
      <member refid="class_ar_default_resolver_1a235163a404b5e1efaf44055914d552d8" prot="private" virt="non-virtual"><scope>ArDefaultResolver</scope><name>_defaultContext</name></member>
      <member refid="class_ar_resolver_1ab36e690e66b26c1cea5268ff2bef5400" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_EndCacheScope</name></member>
      <member refid="class_ar_default_resolver_1a2eb17118c1a7f3ea63bf1d2c84cf35fc" prot="private" virt="non-virtual"><scope>ArDefaultResolver</scope><name>_fallbackContext</name></member>
      <member refid="class_ar_resolver_1adc0f04bf685974a9d41d1503d3ce8e0d" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_GetAssetInfo</name></member>
      <member refid="class_ar_resolver_1a111e120876d4dd8f717c7bdccffd86d5" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_GetCurrentContext</name></member>
      <member refid="class_ar_resolver_1ab93ccf0957571994e79ade8bf4d5f793" prot="protected" virt="non-virtual"><scope>ArDefaultResolver</scope><name>_GetCurrentContextObject</name></member>
      <member refid="class_ar_default_resolver_1a8b28062d222cab5554815e069c4846c1" prot="private" virt="non-virtual"><scope>ArDefaultResolver</scope><name>_GetCurrentContextPtr</name></member>
      <member refid="class_ar_resolver_1a754a31a6d1ab02063db5c9b9f312c737" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_GetExtension</name></member>
      <member refid="class_ar_default_resolver_1a98cefaf82c98c23f4024fb5d21bb55c2" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_GetModificationTimestamp</name></member>
      <member refid="class_ar_default_resolver_1a0b256bacb573a7f7150157c31112d135" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_IsContextDependentPath</name></member>
      <member refid="class_ar_resolver_1a9758cb2f1e4bf228ad8f9c47fa38adf9" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_IsRepositoryPath</name></member>
      <member refid="class_ar_default_resolver_1a9b798d003cedb668f9c45e135692a879" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_OpenAsset</name></member>
      <member refid="class_ar_default_resolver_1ad7c9c5831bede022a807f77838208c64" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_OpenAssetForWrite</name></member>
      <member refid="class_ar_resolver_1af454d5a00d4dd1c2b1022d8b38d36bef" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_RefreshContext</name></member>
      <member refid="class_ar_default_resolver_1a378ebf9b021b95783ddb7a2bcf236f29" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_Resolve</name></member>
      <member refid="class_ar_default_resolver_1ad085f592a3d0a31d2a388906f9f6e735" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_ResolveForNewAsset</name></member>
      <member refid="class_ar_resolver_1a060c4070673ae89cb680d2f544de5557" prot="protected" virt="virtual"><scope>ArDefaultResolver</scope><name>_UnbindContext</name></member>
      <member refid="class_ar_default_resolver_1a14140112f70d229f1d61a0bef8851476" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>ArDefaultResolver</name></member>
      <member refid="class_ar_resolver_1a806b3bf4dc93af8cdde3e3e2a3d5e1e7" prot="protected" virt="non-virtual"><scope>ArDefaultResolver</scope><name>ArResolvedPath</name></member>
      <member refid="class_ar_resolver_1a20af16c992f11c3e462ca6f2d5a159a9" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>ArResolver</name></member>
      <member refid="class_ar_resolver_1a4e83c618c120b7dbc488ead3b0f8075c" prot="protected" virt="non-virtual"><scope>ArDefaultResolver</scope><name>ArResolver</name></member>
      <member refid="class_ar_resolver_1a522ae6b8a14dc87c9116109e619f062b" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>BeginCacheScope</name></member>
      <member refid="class_ar_resolver_1a85ae1972e7c5791b3155ec04c213d29d" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>BindContext</name></member>
      <member refid="class_ar_resolver_1a843b3ef2aacbedf6fe6f9deeb01696d7" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CanWriteAssetToPath</name></member>
      <member refid="class_ar_resolver_1a5b165aaf701119f4b3bc26cdebd38b93" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateContextFromString</name></member>
      <member refid="class_ar_resolver_1a6f01bf8462bf0ec118187e200df7e362" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateContextFromString</name></member>
      <member refid="class_ar_resolver_1a37d32052831939332ecbff965ef94caf" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateContextFromStrings</name></member>
      <member refid="class_ar_resolver_1a1524962aa020859a589e786b1ad3c28f" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateDefaultContext</name></member>
      <member refid="class_ar_resolver_1a0a174a99676ff983a183d391973c7ebe" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateDefaultContextForAsset</name></member>
      <member refid="class_ar_resolver_1a68e5ae6385d1733b79f734c59682ff61" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateIdentifier</name></member>
      <member refid="class_ar_resolver_1aabfb26c05d314299ddf596fc1defeb6c" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>CreateIdentifierForNewAsset</name></member>
      <member refid="class_ar_resolver_1a266aaced9fc6decb4ae2ad884bd46517" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>EndCacheScope</name></member>
      <member refid="class_ar_resolver_1a6078df1f5f1d1f4cf4d5b1411b7b88c8" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>GetAssetInfo</name></member>
      <member refid="class_ar_resolver_1a9e318a8e5693b4103d88443780c1fb5a" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>GetCurrentContext</name></member>
      <member refid="class_ar_resolver_1ab8e1e7ab9dc4e2a390019b3b6384a504" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>GetExtension</name></member>
      <member refid="class_ar_resolver_1af0820bb01d47be4f215a661f061e2200" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>GetModificationTimestamp</name></member>
      <member refid="class_ar_resolver_1ad616f0a0fc1e5dce08929604f3b95f8f" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>IsContextDependentPath</name></member>
      <member refid="class_ar_resolver_1a966c6fe671e427a7d8a01f9d068879a7" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>IsRepositoryPath</name></member>
      <member refid="class_ar_resolver_1aa3a964db701e93c26fc8365ac98fb758" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>OpenAsset</name></member>
      <member refid="class_ar_resolver_1a91c07b55b6807adb47805ff0037b6c44" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>OpenAssetForWrite</name></member>
      <member refid="class_ar_resolver_1ac49212b5cc74bd2d2d5345120cd17e89" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>operator=</name></member>
      <member refid="class_ar_resolver_1a6d9a29a4e375bbdafde5e6e3f836291a" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>RefreshContext</name></member>
      <member refid="class_ar_resolver_1a1b824f00c46b2a5001f492698fd8f5c1" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>Resolve</name></member>
      <member refid="class_ar_resolver_1ae9bdf8eab4d4ebf70a0d2df3727ff9b8" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>ResolveForNewAsset</name></member>
      <member refid="class_ar_default_resolver_1aa800e0f25ecd6949b00477243ce0c6a7" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>SetDefaultSearchPath</name></member>
      <member refid="class_ar_resolver_1a8aaa1f17eef5b4d8facae03cc70c54de" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>UnbindContext</name></member>
      <member refid="class_ar_resolver_1a50c0a0a7bc7b939f4a44fd4baf26a7b5" prot="protected" virt="non-virtual"><scope>ArDefaultResolver</scope><name>usd</name></member>
      <member refid="class_ar_resolver_1a61d23b393fdc35f2f0e30a1ed566c76d" prot="public" virt="non-virtual"><scope>ArDefaultResolver</scope><name>WriteMode</name></member>
      <member refid="class_ar_default_resolver_1aa051850efa41d29c458783e2a448e2d4" prot="public" virt="virtual"><scope>ArDefaultResolver</scope><name>~ArDefaultResolver</name></member>
      <member refid="class_ar_resolver_1a4cb563dabaaca8a54b670bc7391f131e" prot="public" virt="virtual"><scope>ArDefaultResolver</scope><name>~ArResolver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
