<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_iterator" kind="class" language="C++" prot="public">
    <compoundname>TfIterator</compoundname>
    <includes refid="base_2tf_2iterator_8h" local="no">iterator.h</includes>
    <innerclass refid="struct_tf_iterator_1_1___iterator_pair" prot="private">TfIterator::_IteratorPair</innerclass>
    <innerclass refid="struct_tf_iterator_1_1___iterator_pair_and_copy" prot="private">TfIterator::_IteratorPairAndCopy</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>bool</type>
        <declname>Reverse</declname>
        <defname>Reverse</defname>
        <defval>false</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_iterator_1a3bc2df69f4401fcdbae1ec4a63838461" prot="private" static="no">
        <type>std::conditional&lt; Tf_ShouldIterateOverCopy&lt; T &gt;::value, _IteratorPairAndCopy, _IteratorPair &gt;::type</type>
        <definition>typedef std::conditional&lt; Tf_ShouldIterateOverCopy&lt;T&gt;::value, _IteratorPairAndCopy, _IteratorPair &gt;::type _Data</definition>
        <argsstring></argsstring>
        <name>_Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="187" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_iterator_1af3123b05660d9d1f50b2a8a6c1cccf8c" prot="public" static="no">
        <type>Tf_IteratorInterface&lt; T, Reverse &gt;</type>
        <definition>typedef Tf_IteratorInterface&lt;T, Reverse&gt; IterInterface</definition>
        <argsstring></argsstring>
        <name>IterInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="192" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_iterator_1a8b6aa6cbe0be7b006a75d760e9c1809c" prot="public" static="no">
        <type>IterInterface::IteratorType</type>
        <definition>typedef IterInterface::IteratorType Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="193" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_iterator_1a8d5e04ce59c1393aa85b7cef73a01fab" prot="public" static="no">
        <type>std::iterator_traits&lt; Iterator &gt;::reference</type>
        <definition>typedef std::iterator_traits&lt;Iterator&gt;::reference Reference</definition>
        <argsstring></argsstring>
        <name>Reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="195" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_iterator_1a34bb36a4f0d0e6ccac49faaa798ed26f" prot="private" static="no" mutable="no">
        <type>_Data</type>
        <definition>_Data _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="351" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_iterator_1ab2f792a5b05c3fdbfa492f55e045b6d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfIterator</definition>
        <argsstring>()</argsstring>
        <name>TfIterator</name>
        <briefdescription>
<para>Default constructor. This iterator is uninitialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="198" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1ab82ca5a42f5c30a208591b053772de6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfIterator</definition>
        <argsstring>(T &amp;container)</argsstring>
        <name>TfIterator</name>
        <param>
          <type>T &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Constructs an iterator to traverse each element of the specified <computeroutput>STL</computeroutput> container object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>container object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="203" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a773aae59c02b658c18489d401c719657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfIterator</definition>
        <argsstring>(T &amp;&amp;container)</argsstring>
        <name>TfIterator</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Allow rvalues only if the container type T should be copied by <ref refid="class_tf_iterator" kindref="compound">TfIterator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="206" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="206" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1aaae04958a6de9902d3c623bc0f614405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfIterator</definition>
        <argsstring>(Iterator const &amp;begin, Iterator const &amp;end)</argsstring>
        <name>TfIterator</name>
        <param>
          <type>Iterator const &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator const &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Constructs an iterator to traverse a subset of the elements in a container. </para>
        </briefdescription>
        <detaileddescription>
<para>This iterator is exhausted when it reaches the end iterator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator at the beginning of the sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator at the end of the sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="220" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a61efd4196a96540ee018fee8791f3f10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Returns true if this iterator is exhausted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this iterator is exhausted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="227" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1ad6d33ba34dd2b311316200e1930ed3c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TfIterator &amp;iterator) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_tf_iterator" kindref="compound">TfIterator</ref> &amp;</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Returns true if this Iterator.has the same position in the sequence as the specified iterator. </para>
        </briefdescription>
        <detaileddescription>
<para>The end of the sequence need not be the same. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this Iterator.has the same position as <emphasis>iterator</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="235" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a91e735e26731fe893e23f8423413b4f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TfIterator &amp;iterator) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_tf_iterator" kindref="compound">TfIterator</ref> &amp;</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Returns false if (*this == <emphasis>iterator</emphasis>) returns true, returns true otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="241" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1aa741a36173c4e02cb694b69bf8d3325e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref> &amp;</type>
        <definition>TfIterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Pre-increment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Advances this iterator to the next element in the sequence. <simplesect kind="return"><para>this iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="248" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="248" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a31c092cf3383c5c678ad7d902f3727cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></type>
        <definition>TfIterator operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Advances this iterator to the next element in the sequence, and returns a copy of this iterator prior to the increment. <simplesect kind="return"><para>copy of this iterator prior to increment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="261" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a7314cbf146c6fa73cb53526e0805f449" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Reference</type>
        <definition>Reference operator *</definition>
        <argsstring>()</argsstring>
        <name>operator *</name>
        <briefdescription>
<para>Returns the element referenced by this iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="269" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a70e09ee4177a9ab03b9fd641e2135729" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Reference</type>
        <definition>Reference operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
<para>Returns the element referenced by this iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="277" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a8bfefed3423c2140937fd3751802a410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Iterator &amp;</type>
        <definition>Iterator&amp; operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Returns a pointer to the element referenced by this iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="285" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Explicit bool conversion operator. </para>
        </briefdescription>
        <detaileddescription>
<para>The Iterator object converts to true if it has not been exhausted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="293" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a8803bee65c8c9c7cfc9f7a011c22743e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator Iterator</definition>
        <argsstring>() const</argsstring>
        <name>operator Iterator</name>
        <briefdescription>
<para>Returns an <computeroutput>STL</computeroutput> iterator that has the same position as this iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>STL</computeroutput> iterator at the same position as this iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="300" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a382b3cebd23879e42680ef99473e06df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Iterator &amp;</type>
        <definition>const Iterator&amp; base</definition>
        <argsstring>() const</argsstring>
        <name>base</name>
        <briefdescription>
<para>Returns an <computeroutput>STL</computeroutput> iterator that has the same position as this iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>STL</computeroutput> iterator at the same position as this iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="307" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_iterator_1a81b7a4f04f8419794e09db23f38e5be2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></type>
        <definition>TfIterator GetNext</definition>
        <argsstring>() const</argsstring>
        <name>GetNext</name>
        <briefdescription>
<para>Returns an iterator that is positioned at the next element in the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator at next element in the sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/iterator.h" line="314" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="314" bodyend="318"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple iterator adapter for <computeroutput>STL</computeroutput> containers. </para>
    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></computeroutput> iterates over the elements in an <computeroutput>STL</computeroutput> container, according to the semantics of the <ref refid="class_tf_iterator_1iterator_pattern" kindref="member">simple iterator pattern</ref>. The following examples compare the <computeroutput><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></computeroutput> to <computeroutput>STL</computeroutput>, highlighting the brevity of the <computeroutput><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></computeroutput> interface. <programlisting><codeline><highlight class="normal">std::vector&lt;int&gt;<sp/>vector;</highlight></codeline>
<codeline><highlight class="normal">std::set&lt;int&gt;<sp/>set;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>TfIterator<sp/>&apos;while&apos;<sp/>loop</highlight></codeline>
<codeline><highlight class="normal">TfIterator&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>i(vector);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>*i++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>STL<sp/>&apos;while&apos;<sp/>loop</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;int&gt;::iterator<sp/>i<sp/>=<sp/>vector.begin();</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(i<sp/>!=<sp/>vector.end())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>*i++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>TfIterator<sp/>&apos;for&apos;<sp/>loop</highlight></codeline>
<codeline><highlight class="normal">std::set&lt;int&gt;<sp/>set;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(TfIterator&lt;<sp/>const<sp/>std::set&lt;int&gt;<sp/>&gt;<sp/>j<sp/>=<sp/>set;<sp/>j;<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>*j;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>STL<sp/>&apos;for&apos;<sp/>loop</highlight></codeline>
<codeline><highlight class="normal">std::set&lt;int&gt;<sp/>set;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(std::set&lt;int&gt;::iterator<sp/>j<sp/>=<sp/>set.begin();<sp/>j<sp/>!=<sp/>set.end();<sp/>++j)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>*j;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that using the <computeroutput><ref refid="group__group__tf___containers_1gab938fb3368446816e91c72e816d31f5d" kindref="member">TF_FOR_ALL()</ref></computeroutput> macro, even more brevity is possible. For example, to print out all items of a <computeroutput>set&lt;int&gt;</computeroutput> <computeroutput>s</computeroutput>, we could write <programlisting><codeline><highlight class="normal">TF_FOR_ALL(i,<sp/>s)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;%d\n&quot;,<sp/>*i);</highlight></codeline>
</programlisting></para>
<para>Typically, a <computeroutput><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></computeroutput> is used to traverse all of the elements in an <computeroutput>STL</computeroutput> container. For ordered sets, other uses include iterating over a subset of the elements in the container, and using a <computeroutput><ref refid="class_tf_iterator" kindref="compound">TfIterator</ref></computeroutput> as a sentinel. <programlisting><codeline><highlight class="normal">//<sp/>Iterate<sp/>over<sp/>subset</highlight></codeline>
<codeline><highlight class="normal">TfIterator&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>start,<sp/>finish;</highlight></codeline>
<codeline><highlight class="normal">TfIterator&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>iterator(start,<sp/>finish);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>TfIterator<sp/>sentinel</highlight></codeline>
<codeline><highlight class="normal">TfIterator&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>sentinel(finish,<sp/>finish);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(iterator<sp/>!=<sp/>sentinel)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>x<sp/>=<sp/>*iterator++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><anchor id="class_tf_iterator_1iterator_pattern"/><bold>The Simple Iterator Pattern</bold></para>
<para>The <emphasis>simple</emphasis> <emphasis>iterator</emphasis> pattern generalizes pointer semantics to traverse a set of elements, much like <computeroutput>STL</computeroutput> iterators. However, the simple iterator pattern subscribes to a simpler subset of pointer operations: pointer assignment (<computeroutput>operator=</computeroutput>), auto-increment (<computeroutput>operator++</computeroutput>), dereferencing (<computeroutput>operator*</computeroutput>), redirection (<computeroutput>operator-&gt;</computeroutput>), and null pointer comparison (<computeroutput>operator!</computeroutput> and <computeroutput>operator</computeroutput> <computeroutput>bool</computeroutput>). The simpler interface improves code legibility for the typical set traversals for which iterators are most commonly used. It is particularly useful for specifying iterators over sets of elements that are maintained by a user object, since the interface calls for only one <computeroutput>GetIterator()</computeroutput> entry point rather than dual <computeroutput>begin()</computeroutput> and <computeroutput>end()</computeroutput> calls. This is especially desirable when the object owns many different sets. <programlisting><codeline><highlight class="normal">//<sp/>The<sp/>simple<sp/>iterator<sp/>pattern.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Iterator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>default<sp/>c&apos;tor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator(const<sp/>Iterator&amp;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>copy<sp/>c&apos;tor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator&amp;<sp/>operator=(const<sp/>Iterator<sp/>&amp;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>assignment</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator&amp;<sp/>operator++();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pre-increment</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator<sp/>operator++(int);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>post-increment</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>operator<sp/>*();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>dereference</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>operator-&gt;();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>redirection</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator==(const<sp/>Iterator<sp/>&amp;)<sp/>const;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>equality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator!=(const<sp/>Iterator<sp/>&amp;)<sp/>const;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>inequality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator!()<sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>is<sp/>exhausted</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operator<sp/>bool()<sp/>const;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>is<sp/>not<sp/>exhausted</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>container type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="pxr/base/tf/iterator.h" line="176" column="1" bodyfile="pxr/base/tf/iterator.h" bodystart="176" bodyend="353"/>
    <listofallmembers>
      <member refid="class_tf_iterator_1a3bc2df69f4401fcdbae1ec4a63838461" prot="private" virt="non-virtual"><scope>TfIterator</scope><name>_Data</name></member>
      <member refid="class_tf_iterator_1a34bb36a4f0d0e6ccac49faaa798ed26f" prot="private" virt="non-virtual"><scope>TfIterator</scope><name>_data</name></member>
      <member refid="class_tf_iterator_1a382b3cebd23879e42680ef99473e06df" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>base</name></member>
      <member refid="class_tf_iterator_1a81b7a4f04f8419794e09db23f38e5be2" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>GetNext</name></member>
      <member refid="class_tf_iterator_1a8b6aa6cbe0be7b006a75d760e9c1809c" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>Iterator</name></member>
      <member refid="class_tf_iterator_1af3123b05660d9d1f50b2a8a6c1cccf8c" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>IterInterface</name></member>
      <member refid="class_tf_iterator_1a7314cbf146c6fa73cb53526e0805f449" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator *</name></member>
      <member refid="class_tf_iterator_1a70e09ee4177a9ab03b9fd641e2135729" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator *</name></member>
      <member refid="class_tf_iterator_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator bool</name></member>
      <member refid="class_tf_iterator_1a8803bee65c8c9c7cfc9f7a011c22743e" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator Iterator</name></member>
      <member refid="class_tf_iterator_1a61efd4196a96540ee018fee8791f3f10" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator!</name></member>
      <member refid="class_tf_iterator_1a91e735e26731fe893e23f8423413b4f1" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator!=</name></member>
      <member refid="class_tf_iterator_1aa741a36173c4e02cb694b69bf8d3325e" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator++</name></member>
      <member refid="class_tf_iterator_1a31c092cf3383c5c678ad7d902f3727cd" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator++</name></member>
      <member refid="class_tf_iterator_1a8bfefed3423c2140937fd3751802a410" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator-&gt;</name></member>
      <member refid="class_tf_iterator_1ad6d33ba34dd2b311316200e1930ed3c5" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>operator==</name></member>
      <member refid="class_tf_iterator_1a8d5e04ce59c1393aa85b7cef73a01fab" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>Reference</name></member>
      <member refid="class_tf_iterator_1ab2f792a5b05c3fdbfa492f55e045b6d4" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>TfIterator</name></member>
      <member refid="class_tf_iterator_1ab82ca5a42f5c30a208591b053772de6f" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>TfIterator</name></member>
      <member refid="class_tf_iterator_1a773aae59c02b658c18489d401c719657" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>TfIterator</name></member>
      <member refid="class_tf_iterator_1aaae04958a6de9902d3c623bc0f614405" prot="public" virt="non-virtual"><scope>TfIterator</scope><name>TfIterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
