<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_light_filter" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxLightFilter</compoundname>
    <basecompoundref refid="class_usd_geom_xformable" prot="public" virt="non-virtual">UsdGeomXformable</basecompoundref>
    <derivedcompoundref refid="class_usd_lux_plugin_light_filter" prot="public" virt="non-virtual">UsdLuxPluginLightFilter</derivedcompoundref>
    <includes refid="usd_2usd_lux_2light_filter_8h" local="no">lightFilter.h</includes>
      <sectiondef kind="user-defined">
      <header>Conversion to and from UsdShadeConnectableAPI</header>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a154017051b84ad26201fb6ab99ad8090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API</type>
        <definition>USDLUX_API UsdLuxLightFilter</definition>
        <argsstring>(const UsdShadeConnectableAPI &amp;connectable)</argsstring>
        <name>UsdLuxLightFilter</name>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>connectable</declname>
        </param>
        <briefdescription>
<para>Constructor that takes a ConnectableAPI object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allow implicit conversion of <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> to <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref></type>
        <definition>USDLUX_API UsdShadeConnectableAPI ConnectableAPI</definition>
        <argsstring>() const</argsstring>
        <name>ConnectableAPI</name>
        <briefdescription>
<para>Contructs and returns a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object with this light filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that most tasks can be accomplished without explicitly constructing a UsdShadeConnectable API, since connection-related API such as <ref refid="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" kindref="member">UsdShadeConnectableAPI::ConnectToSource()</ref> are static methods, and <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref> will auto-convert to a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> when passed to functions that want to act generically on a connectable <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="236" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Outputs API</header>
      <description><para>Outputs represent a typed attribute on a light filter whose value is computed externally. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a2ba17066845267892079570da4eadef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput CreateOutput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an output which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the output is created in the &quot;outputs:&quot; namespace. Outputs on a light filter cannot be connected, as their value is assumed to be computed externally. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput GetOutput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested output if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a7ceff029383f362ac833a4414aa932cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeOutput&gt; GetOutputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetOutputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Outputs are represented by attributes in the &quot;outputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="267" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inputs API</header>
      <description><para>Inputs are connectable attribute with a typed value.</para>
<para>Light filter parameters are encoded as inputs. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a49f83c685591e60db110db9e9b32c10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput CreateInput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an input which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the input is created in the &quot;inputs:&quot; namespace. Inputs on light filters are connectable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput GetInput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested input if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a9a5eca34d13a31c615dad2391d20576f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeInput&gt; GetInputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetInputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Inputs are represented by attributes in the &quot;inputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="299" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_light_filter_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="84" column="1" bodyfile="pxr/usd/usdLux/lightFilter.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_light_filter_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="162" column="1" bodyfile="pxr/usd/usdLux/lightFilter.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_light_filter_1a883b85f3e4c306b34e7745d855f24754" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightFilter</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxLightFilter</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_light_filter_1ab38995bab11e846af3049bb5548f2e7b" kindref="member">UsdLuxLightFilter::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="90" column="1" bodyfile="pxr/usd/usdLux/lightFilter.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a34f2ff0dd8cd92c2da8c9d54729788e2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightFilter</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxLightFilter</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="98" column="1" bodyfile="pxr/usd/usdLux/lightFilter.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a2624d99be9bbb39b7b19bdabe0730d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxLightFilter</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxLightFilter</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a55d8e3d23a43fe993f4e584a05387f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShaderIdAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShaderIdAttr</name>
        <briefdescription>
<para>Default ID for the light filter&apos;s shader. </para>
        </briefdescription>
        <detaileddescription>
<para>This defines the shader ID for this light filter when a render context specific shader ID is not available.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_lux_light_filter_1a0241498a53d4d25436a1f707d5743b75" kindref="member">GetShaderId</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_lux_light_filter_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdr_registry_1a6c2ad66b092001bde543fa07a712f7d8" kindref="member">SdrRegistry::GetShaderNodeByIdentifier</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdr_registry_1ab4dd8f74d5f900a59a5bfa9c55751889" kindref="member">SdrRegistry::GetShaderNodeByIdentifierAndType</ref></para>
</simplesect>
<table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token lightFilter:shaderId = &quot;&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a5bc69dacb1d879cbf403db7ecd71e2c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShaderIdAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShaderIdAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_filter_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a06e127e9754473e848006de2a1549645" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>USDLUX_API UsdCollectionAPI GetFilterLinkCollectionAPI</definition>
        <argsstring>() const</argsstring>
        <name>GetFilterLinkCollectionAPI</name>
        <briefdescription>
<para>Return the <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> interface used for examining and modifying the filter-linking of this light filter. </para>
        </briefdescription>
        <detaileddescription>
<para>Linking controls which geometry this light filter affects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a58d00be60ef03619955066d7c2b5f538" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShaderIdAttrForRenderContext</definition>
        <argsstring>(const TfToken &amp;renderContext) const</argsstring>
        <name>GetShaderIdAttrForRenderContext</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>renderContext</declname>
        </param>
        <briefdescription>
<para>Returns the shader ID attribute for the given <computeroutput>renderContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>renderContext</computeroutput> is non-empty, this will try to return an attribute named <emphasis>lightFilter:shaderId</emphasis> with the namespace prefix <computeroutput>renderContext</computeroutput>. For example, if the passed in render context is &quot;ri&quot; then the attribute returned by this function would have the following signature: <table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token ri:lightFilter:shaderId</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
</table>
</para>
<para>If the render context is empty, this will return the default shader ID attribute as returned by <ref refid="class_usd_lux_light_filter_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1aec0306261acae05089632dfa060e2872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShaderIdAttrForRenderContext</definition>
        <argsstring>(const TfToken &amp;renderContext, VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShaderIdAttrForRenderContext</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>renderContext</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates the shader ID attribute for the given <computeroutput>renderContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_lux_light_filter_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1a0241498a53d4d25436a1f707d5743b75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDLUX_API TfToken GetShaderId</definition>
        <argsstring>(const TfTokenVector &amp;renderContexts) const</argsstring>
        <name>GetShaderId</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>renderContexts</declname>
        </param>
        <briefdescription>
<para>Return the light filter&apos;s shader ID for the given list of available <computeroutput>renderContexts</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The shader ID returned by this function is the identifier to use when looking up the shader definition for this light filter in the <ref refid="class_sdr_registry" kindref="compound">shader registry</ref>.</para>
<para>The render contexts are expected to be listed in priority order, so for each render context provided, this will try to find the shader ID attribute specific to that render context (see <ref refid="class_usd_lux_light_filter_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext()</ref>) and will return the value of the first one found that has a non-empty value. If no shader ID value can be found for any of the given render contexts or <computeroutput>renderContexts</computeroutput> is empty, then this will return the value of the default shader ID attribute (see <ref refid="class_usd_lux_light_filter_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="356" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_light_filter_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1ab38995bab11e846af3049bb5548f2e7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref></type>
        <definition>static USDLUX_API UsdLuxLightFilter Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxLightFilter(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1ab26eba2e77c0c9f2ab9fb3c4d5abe530" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_filter" kindref="compound">UsdLuxLightFilter</ref></type>
        <definition>static USDLUX_API UsdLuxLightFilter Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_light_filter_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_xformable_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <reimplementedby refid="class_usd_lux_plugin_light_filter_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="158" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_light_filter_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_filter_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_light_filter_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_xformable_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <reimplementedby refid="class_usd_lux_plugin_light_filter_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightFilter.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A light filter modifies the effect of a light. </para>
    </briefdescription>
    <detaileddescription>
<para>Lights refer to filters via relationships so that filters may be shared.</para>
<para><bold>Linking</bold></para>
<para>Filters can be linked to geometry. Linking controls which geometry a light-filter affects, when considering the light filters attached to a light illuminating the geometry.</para>
<para>Linking is specified as a collection (<ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>) which can be accessed via GetFilterLinkCollection().</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">UsdLuxTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdLuxTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7558">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7559" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7556">
        <label>UsdLuxLightFilter</label>
        <link refid="class_usd_lux_light_filter"/>
        <childnode refid="7557" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7559">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7560" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7560">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7561">
        <label>UsdLuxPluginLightFilter</label>
        <link refid="class_usd_lux_plugin_light_filter"/>
        <childnode refid="7556" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7557">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7558" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7564">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7565" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7562">
        <label>UsdLuxLightFilter</label>
        <link refid="class_usd_lux_light_filter"/>
        <childnode refid="7563" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7565">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7566" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7566">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7563">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7564" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/lightFilter.h" line="79" column="1" bodyfile="pxr/usd/usdLux/lightFilter.h" bodystart="78" bodyend="358"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_lux_light_filter_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxLightFilter</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxLightFilter</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_light_filter_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_light_filter_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxLightFilter</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxLightFilter</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_light_filter_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddOrientOp</name></member>
      <member refid="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddTranslateOp</name></member>
      <member refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>AddXformOp</name></member>
      <member refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ClearXformOpOrder</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_lux_light_filter_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>ConnectableAPI</name></member>
      <member refid="class_usd_lux_light_filter_1a49f83c685591e60db110db9e9b32c10a" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateInput</name></member>
      <member refid="class_usd_lux_light_filter_1a2ba17066845267892079570da4eadef4" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateOutput</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_lux_light_filter_1a5bc69dacb1d879cbf403db7ecd71e2c6" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateShaderIdAttr</name></member>
      <member refid="class_usd_lux_light_filter_1aec0306261acae05089632dfa060e2872" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateShaderIdAttrForRenderContext</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>CreateXformOpOrderAttr</name></member>
      <member refid="class_usd_lux_light_filter_1ab26eba2e77c0c9f2ab9fb3c4d5abe530" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>Define</name></member>
      <member refid="class_usd_lux_light_filter_1ab38995bab11e846af3049bb5548f2e7b" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>Get</name></member>
      <member refid="class_usd_lux_light_filter_1a06e127e9754473e848006de2a1549645" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetFilterLinkCollectionAPI</name></member>
      <member refid="class_usd_lux_light_filter_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetInput</name></member>
      <member refid="class_usd_lux_light_filter_1a9a5eca34d13a31c615dad2391d20576f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetInputs</name></member>
      <member refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetOrientOp</name></member>
      <member refid="class_usd_lux_light_filter_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetOutput</name></member>
      <member refid="class_usd_lux_light_filter_1a7ceff029383f362ac833a4414aa932cd" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetOutputs</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetScaleOp</name></member>
      <member refid="class_usd_lux_light_filter_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_light_filter_1a0241498a53d4d25436a1f707d5743b75" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetShaderId</name></member>
      <member refid="class_usd_lux_light_filter_1a55d8e3d23a43fe993f4e584a05387f54" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetShaderIdAttr</name></member>
      <member refid="class_usd_lux_light_filter_1a58d00be60ef03619955066d7c2b5f538" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetShaderIdAttrForRenderContext</name></member>
      <member refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetTranslateOp</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetXformOp</name></member>
      <member refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>GetXformOpOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsTransformationAffectedByAttrNamed</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>IsTyped</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>MakeMatrixXform</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_light_filter_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>SetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>SetXformOpOrder</name></member>
      <member refid="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_lux_light_filter_1a883b85f3e4c306b34e7745d855f24754" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdLuxLightFilter</name></member>
      <member refid="class_usd_lux_light_filter_1a34f2ff0dd8cd92c2da8c9d54729788e2" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdLuxLightFilter</name></member>
      <member refid="class_usd_lux_light_filter_1a154017051b84ad26201fb6ab99ad8090" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdLuxLightFilter</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_light_filter_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdLuxLightFilter</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdLuxLightFilter</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" virt="virtual"><scope>UsdLuxLightFilter</scope><name>~UsdGeomXformable</name></member>
      <member refid="class_usd_lux_light_filter_1a2624d99be9bbb39b7b19bdabe0730d73" prot="public" virt="virtual"><scope>UsdLuxLightFilter</scope><name>~UsdLuxLightFilter</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxLightFilter</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdLuxLightFilter</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
