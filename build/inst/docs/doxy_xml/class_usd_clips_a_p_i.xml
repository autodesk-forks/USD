<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_clips_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdClipsAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="clips_a_p_i_8h" local="no">clipsAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Value Clip Info</header>
      <description><para><anchor id="class_usd_clips_a_p_i_1Usd_ClipInfo_API"/></para>
<para>Setters and getters for interacting with metadata that control value clip behavior. </para>
</description>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a94d6e4d856cc3a92aae45953b9e942a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClips</definition>
        <argsstring>(VtDictionary *clips) const</argsstring>
        <name>GetClips</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> *</type>
          <declname>clips</declname>
        </param>
        <briefdescription>
<para>Dictionary that contains the definition of the clip sets on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Each entry in this dictionary defines a clip set: the entry&apos;s key is the name of the clip set and the entry&apos;s value is a dictionary containing the metadata that specifies the clips in the set.</para>
<para>See <ref refid="clips_a_p_i_8h_1UsdClipsAPIInfoKeys" kindref="member">UsdClipsAPIInfoKeys</ref> for the keys used for each clip set&apos;s dictionary, or use the other API to set or get values for a given clip set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aa2db7a50ebf8fe0ccaa972b656fcd7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClips</definition>
        <argsstring>(const VtDictionary &amp;clips)</argsstring>
        <name>SetClips</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>clips</declname>
        </param>
        <briefdescription>
<para>Set the clips dictionary for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a94d6e4d856cc3a92aae45953b9e942a6" kindref="member">GetClips</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aeefef4a262d265b6a59c6b9953611c09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipSets</definition>
        <argsstring>(SdfStringListOp *clipSets) const</argsstring>
        <name>GetClipSets</name>
        <param>
          <type>SdfStringListOp *</type>
          <declname>clipSets</declname>
        </param>
        <briefdescription>
<para>ListOp that may be used to affect how opinions from clip sets are applied during value resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, clip sets in a layer stack are examined in lexicographical order by name for attribute values during value resolution. The clip sets listOp can be used to reorder the clip sets in a layer stack or remove them entirely from consideration during value resolution without modifying the clips dictionary.</para>
<para>This is <emphasis>not</emphasis> the list of clip sets that are authored on this prim. To retrieve that information, use GetClips to examine the clips dictionary directly.</para>
<para>This function returns the clip sets listOp from the current edit target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ac37319b58182e22e3839308377cf9155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipSets</definition>
        <argsstring>(const SdfStringListOp &amp;clipSets)</argsstring>
        <name>SetClipSets</name>
        <param>
          <type>const SdfStringListOp &amp;</type>
          <declname>clipSets</declname>
        </param>
        <briefdescription>
<para>Set the clip sets list op for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1aeefef4a262d265b6a59c6b9953611c09" kindref="member">GetClipSets</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a7a79c3aff00e4e6e17c863ff660c9d3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt;</type>
        <definition>USD_API VtArray&lt;SdfAssetPath&gt; ComputeClipAssetPaths</definition>
        <argsstring>(const std::string &amp;clipSet) const</argsstring>
        <name>ComputeClipAssetPaths</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Computes and resolves the list of clip asset paths used by the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the same list of paths that would be used during value resolution.</para>
<para>If the clip set is defined using template clip metadata, this function will compute the asset paths based on the template parameters. Otherwise this function will use the authored clipAssetPaths. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a8e6793eac64351e96ae8f6ba600f8440" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt;</type>
        <definition>USD_API VtArray&lt;SdfAssetPath&gt; ComputeClipAssetPaths</definition>
        <argsstring>() const</argsstring>
        <name>ComputeClipAssetPaths</name>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae8c54eee7964c0502b37da1e86f5da14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipAssetPaths</definition>
        <argsstring>(VtArray&lt; SdfAssetPath &gt; *assetPaths, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipAssetPaths</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; *</type>
          <declname>assetPaths</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>List of asset paths to the clips in the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This list is unordered, but elements in this list are referred to by index in other clip-related fields. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1afe5b1adc93cd51fea04f40e803065653" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipAssetPaths</definition>
        <argsstring>(VtArray&lt; SdfAssetPath &gt; *assetPaths) const</argsstring>
        <name>GetClipAssetPaths</name>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; *</type>
          <declname>assetPaths</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae8c5dc6c96e95fd9cdb4501bd3a2cd02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipAssetPaths</definition>
        <argsstring>(const VtArray&lt; SdfAssetPath &gt; &amp;assetPaths, const std::string &amp;clipSet)</argsstring>
        <name>SetClipAssetPaths</name>
        <param>
          <type>const <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; &amp;</type>
          <declname>assetPaths</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip asset paths for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1ae8c54eee7964c0502b37da1e86f5da14" kindref="member">GetClipAssetPaths()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a91c7a63c70a679b36ded6eab9d2f3f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipAssetPaths</definition>
        <argsstring>(const VtArray&lt; SdfAssetPath &gt; &amp;assetPaths)</argsstring>
        <name>SetClipAssetPaths</name>
        <param>
          <type>const <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &gt; &amp;</type>
          <declname>assetPaths</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a556993c87b65e85b9568f0e06b45eb12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipPrimPath</definition>
        <argsstring>(std::string *primPath, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipPrimPath</name>
        <param>
          <type>std::string *</type>
          <declname>primPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Path to the prim in the clips in the clip set named <computeroutput>clipSet</computeroutput> from which time samples will be read. </para>
        </briefdescription>
        <detaileddescription>
<para>This prim&apos;s path will be substituted with this value to determine the final path in the clip from which to read data. For instance, if this prims&apos; path is &apos;/Prim_1&apos;, the clip prim path is &apos;/Prim&apos;, and we want to get values for the attribute &apos;/Prim_1.size&apos;. The clip prim path will be substituted in, yielding &apos;/Prim.size&apos;, and each clip will be examined for values at that path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ab28a30ad6dc197328af588ddd4bb094d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipPrimPath</definition>
        <argsstring>(std::string *primPath) const</argsstring>
        <name>GetClipPrimPath</name>
        <param>
          <type>std::string *</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a3ef9b5eb6d83b62578ac48e998d30c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipPrimPath</definition>
        <argsstring>(const std::string &amp;primPath, const std::string &amp;clipSet)</argsstring>
        <name>SetClipPrimPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>primPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip prim path for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a556993c87b65e85b9568f0e06b45eb12" kindref="member">GetClipPrimPath()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1afcf36631c0cbc4e5d6c0c258d6b6582e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipPrimPath</definition>
        <argsstring>(const std::string &amp;primPath)</argsstring>
        <name>SetClipPrimPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aec07144efa96b799014ef6f997ff754b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipActive</definition>
        <argsstring>(VtVec2dArray *activeClips, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipActive</name>
        <param>
          <type>VtVec2dArray *</type>
          <declname>activeClips</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>List of pairs (time, clip index) indicating the time on the stage at which the clip in the clip set named <computeroutput>clipSet</computeroutput> specified by the clip index is active. </para>
        </briefdescription>
        <detaileddescription>
<para>For instance, a value of [(0.0, 0), (20.0, 1)] indicates that clip 0 is active at time 0 and clip 1 is active at time 20. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aefbd7b7b04f35d1e3e9fc6d1014136eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipActive</definition>
        <argsstring>(VtVec2dArray *activeClips) const</argsstring>
        <name>GetClipActive</name>
        <param>
          <type>VtVec2dArray *</type>
          <declname>activeClips</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1afcbe6a9ae5c8ae8c4b859ba45eb5bbb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipActive</definition>
        <argsstring>(const VtVec2dArray &amp;activeClips, const std::string &amp;clipSet)</argsstring>
        <name>SetClipActive</name>
        <param>
          <type>const VtVec2dArray &amp;</type>
          <declname>activeClips</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the active clip metadata for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1aec07144efa96b799014ef6f997ff754b" kindref="member">GetClipActive()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a68c2e4da42fa4ce973d952dd62e31266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipActive</definition>
        <argsstring>(const VtVec2dArray &amp;activeClips)</argsstring>
        <name>SetClipActive</name>
        <param>
          <type>const VtVec2dArray &amp;</type>
          <declname>activeClips</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a5cef0f408bae6ef790ca62bf717d300e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTimes</definition>
        <argsstring>(VtVec2dArray *clipTimes, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTimes</name>
        <param>
          <type>VtVec2dArray *</type>
          <declname>clipTimes</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>List of pairs (stage time, clip time) indicating the time in the active clip in the clip set named <computeroutput>clipSet</computeroutput> that should be consulted for values at the corresponding stage time. </para>
        </briefdescription>
        <detaileddescription>
<para>During value resolution, this list will be sorted by stage time; times will then be linearly interpolated between consecutive entries. For instance, for clip times [(0.0, 0.0), (10.0, 20.0)], at stage time 0, values from the active clip at time 0 will be used, at stage time 5, values from the active clip at time 10, and at stage time 10, clip values at time 20. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae47adf1f35ff327bb65e56d85cf7cc90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTimes</definition>
        <argsstring>(VtVec2dArray *clipTimes) const</argsstring>
        <name>GetClipTimes</name>
        <param>
          <type>VtVec2dArray *</type>
          <declname>clipTimes</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a5f51f896b71c23563317547b476f0d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTimes</definition>
        <argsstring>(const VtVec2dArray &amp;clipTimes, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTimes</name>
        <param>
          <type>const VtVec2dArray &amp;</type>
          <declname>clipTimes</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip times metadata for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a5cef0f408bae6ef790ca62bf717d300e" kindref="member">GetClipTimes()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a207552757bdeb699454f1d1ef4bdf7f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTimes</definition>
        <argsstring>(const VtVec2dArray &amp;clipTimes)</argsstring>
        <name>SetClipTimes</name>
        <param>
          <type>const VtVec2dArray &amp;</type>
          <declname>clipTimes</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1adb80cb50c0c1bf6b52789f01e329601e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipManifestAssetPath</definition>
        <argsstring>(SdfAssetPath *manifestAssetPath, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipManifestAssetPath</name>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> *</type>
          <declname>manifestAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Asset path for the clip manifest for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The clip manifest indicates which attributes have time samples authored in the clips specified on this prim. During value resolution, clips will only be examined if the attribute exists and is declared as varying in the manifest. See <ref refid="_usd__page__value_clips_1Usd_ValueClips_ClipManifest" kindref="member">Clip Manifest</ref> for more details.</para>
<para>For instance, if this prim&apos;s path is &lt;/Prim_1&gt;, the clip prim path is &lt;/Prim&gt;, and we want values for the attribute &lt;/Prim_1.size&gt;, we will only look within this prim&apos;s clips if the attribute &lt;/Prim.size&gt; exists and is varying in the manifest. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aaf1e37b1f2e3eaf126418b4ca842892c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipManifestAssetPath</definition>
        <argsstring>(SdfAssetPath *manifestAssetPath) const</argsstring>
        <name>GetClipManifestAssetPath</name>
        <param>
          <type><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> *</type>
          <declname>manifestAssetPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae4737f60f83a18ca285c79b7cd8fc187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipManifestAssetPath</definition>
        <argsstring>(const SdfAssetPath &amp;manifestAssetPath, const std::string &amp;clipSet)</argsstring>
        <name>SetClipManifestAssetPath</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>manifestAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip manifest asset path for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1adb80cb50c0c1bf6b52789f01e329601e" kindref="member">GetClipManifestAssetPath()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ad3772f146a798eae4a992fea5a12a3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipManifestAssetPath</definition>
        <argsstring>(const SdfAssetPath &amp;manifestAssetPath)</argsstring>
        <name>SetClipManifestAssetPath</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>manifestAssetPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a308ef3fe936c3a5ac968082041c10370" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>USD_API SdfLayerRefPtr GenerateClipManifest</definition>
        <argsstring>(const std::string &amp;clipSet, bool writeBlocksForClipsWithMissingValues=false) const</argsstring>
        <name>GenerateClipManifest</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>writeBlocksForClipsWithMissingValues</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a clip manifest containing entries for all attributes in the value clips for clip set <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns an anonymous layer that can be exported and reused (<simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1ae4737f60f83a18ca285c79b7cd8fc187" kindref="member">SetClipManifestAssetPath</ref>).</para>
</simplesect>
If <computeroutput>writeBlocksForClipsWithMissingValues</computeroutput> is <computeroutput>true</computeroutput>, the generated manifest will have value blocks authored for each attribute at the activation times of clips that do not contain time samples for that attribute. This accelerates searches done when the interpolation of missing clip values is enabled. See GetInterpolateMissingClipValues and <ref refid="_usd__page__value_clips_1Usd_ValueClips_ClipValueResolution_InterpolatingGaps" kindref="member">Interpolating Missing Values in Clip Set</ref> for more details.</para>
<para>Returns an invalid SdfLayerRefPtr on failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a73444e4e9e65cab4eded60e9aae060a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>USD_API SdfLayerRefPtr GenerateClipManifest</definition>
        <argsstring>(bool writeBlocksForClipsWithMissingValues=false) const</argsstring>
        <name>GenerateClipManifest</name>
        <param>
          <type>bool</type>
          <declname>writeBlocksForClipsWithMissingValues</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a0658e35f73d55ec92a9d1474a68381b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetInterpolateMissingClipValues</definition>
        <argsstring>(bool *interpolate, const std::string &amp;clipSet) const</argsstring>
        <name>GetInterpolateMissingClipValues</name>
        <param>
          <type>bool *</type>
          <declname>interpolate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ad4d60417c5fd52d6cf365119503931b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetInterpolateMissingClipValues</definition>
        <argsstring>(bool *interpolate) const</argsstring>
        <name>GetInterpolateMissingClipValues</name>
        <param>
          <type>bool *</type>
          <declname>interpolate</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aafa07f096a5978de61a85ba6c14dce1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetInterpolateMissingClipValues</definition>
        <argsstring>(bool interpolate, const std::string &amp;clipSet)</argsstring>
        <name>SetInterpolateMissingClipValues</name>
        <param>
          <type>bool</type>
          <declname>interpolate</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set whether missing clip values are interpolated from surrounding clips. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a9868cd36d3e265730c72c6e5c4db5774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetInterpolateMissingClipValues</definition>
        <argsstring>(bool interpolate)</argsstring>
        <name>SetInterpolateMissingClipValues</name>
        <param>
          <type>bool</type>
          <declname>interpolate</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateAssetPath</definition>
        <argsstring>(std::string *clipTemplateAssetPath, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTemplateAssetPath</name>
        <param>
          <type>std::string *</type>
          <declname>clipTemplateAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>A template string representing a set of assets to be used as clips for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This string can be of two forms:</para>
<para>integer frames: path/basename.###.usd</para>
<para>subinteger frames: path/basename.##.##.usd.</para>
<para>For the integer portion of the specification, USD will take a particular time, determined by the template start time, stride, and end time, and pad it with zeros up to the number of hashes provided so long as the number of hashes is greater than the digits required to specify the integer value.</para>
<para>For instance:</para>
<para>time = 12, template asset path = foo.##.usd =&gt; foo.12.usd time = 12, template asset path = foo.###.usd =&gt; foo.012.usd time = 333, template asset path = foo.#.usd =&gt; foo.333.usd</para>
<para>In the case of subinteger portion of a specifications, USD requires the specification to be exact.</para>
<para>For instance:</para>
<para>time = 1.15, template asset path = foo.#.###.usd =&gt; foo.1.150.usd time = 1.145, template asset path = foo.#.##.usd =&gt; foo.1.15.usd time = 1.1, template asset path = foo.#.##.usd =&gt; foo.1.10.usd</para>
<para>Note that USD requires that hash groups be adjacent in the string, and that there only be one or two such groups. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae2a4b2b0870ddf5dce7f6b3ee2e624b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateAssetPath</definition>
        <argsstring>(std::string *clipTemplateAssetPath) const</argsstring>
        <name>GetClipTemplateAssetPath</name>
        <param>
          <type>std::string *</type>
          <declname>clipTemplateAssetPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a4957b03aef7d1dcac08eab222553f46c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateAssetPath</definition>
        <argsstring>(const std::string &amp;clipTemplateAssetPath, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTemplateAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipTemplateAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip template asset path for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" kindref="member">GetClipTemplateAssetPath</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ad659798f4248a1d8633723cb80bfa2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateAssetPath</definition>
        <argsstring>(const std::string &amp;clipTemplateAssetPath)</argsstring>
        <name>SetClipTemplateAssetPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipTemplateAssetPath</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a7b979b12224637b8482310510e417929" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateStride</definition>
        <argsstring>(double *clipTemplateStride, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTemplateStride</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateStride</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>A double representing the increment value USD will use when searching for asset paths for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" kindref="member">GetClipTemplateAssetPath</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a2542cfb505e5f9a907dbb3950cbb114f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateStride</definition>
        <argsstring>(double *clipTemplateStride) const</argsstring>
        <name>GetClipTemplateStride</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateStride</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a64937f56f78e62c73d5a0f8f05b72c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateActiveOffset</definition>
        <argsstring>(const double clipTemplateActiveOffset, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTemplateActiveOffset</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateActiveOffset</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the clip template offset for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1afdfc755e4ef1116d13b431a643f053d9" kindref="member">GetClipTemplateActiveOffset</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ad66773d363a3ea7d587ffb42d25ea9a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateActiveOffset</definition>
        <argsstring>(const double clipTemplateActiveOffset)</argsstring>
        <name>SetClipTemplateActiveOffset</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateActiveOffset</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1afdfc755e4ef1116d13b431a643f053d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateActiveOffset</definition>
        <argsstring>(double *clipTemplateActiveOffset, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTemplateActiveOffset</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateActiveOffset</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>A double representing the offset value used by USD when determining the active period for each clip. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ae7dce86b9abf923691936fcd77f03402" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateActiveOffset</definition>
        <argsstring>(double *clipTemplateActiveOffset) const</argsstring>
        <name>GetClipTemplateActiveOffset</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateActiveOffset</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a60284208723aca45738983c75b817fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateStride</definition>
        <argsstring>(const double clipTemplateStride, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTemplateStride</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateStride</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the template stride for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a7b979b12224637b8482310510e417929" kindref="member">GetClipTemplateStride()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a3239ace4f4868fc3c3523a4e6ce5bf48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateStride</definition>
        <argsstring>(const double clipTemplateStride)</argsstring>
        <name>SetClipTemplateStride</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateStride</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a686b9ce2e46d2e51223297646cf4baa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateStartTime</definition>
        <argsstring>(double *clipTemplateStartTime, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTemplateStartTime</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateStartTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>A double which indicates the start of the range USD will use to search for asset paths for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is inclusive in that range. <simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" kindref="member">GetClipTemplateAssetPath</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aee4c5e4925fd530826d1e9e176cf6f12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateStartTime</definition>
        <argsstring>(double *clipTemplateStartTime) const</argsstring>
        <name>GetClipTemplateStartTime</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateStartTime</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a8b513477e75d241fd34cfb097e0c2b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateStartTime</definition>
        <argsstring>(const double clipTemplateStartTime, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTemplateStartTime</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateStartTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the template start time for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a686b9ce2e46d2e51223297646cf4baa8" kindref="member">GetClipTemplateStartTime</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ada9224b24ea1d21b9e757efe7c9ff1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateStartTime</definition>
        <argsstring>(const double clipTemplateStartTime)</argsstring>
        <name>SetClipTemplateStartTime</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateStartTime</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1aacf72851dc873df52fc07e9f228d0b1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateEndTime</definition>
        <argsstring>(double *clipTemplateEndTime, const std::string &amp;clipSet) const</argsstring>
        <name>GetClipTemplateEndTime</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateEndTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>A double which indicates the end of the range USD will use to to search for asset paths for the clip set named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is inclusive in that range. <simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" kindref="member">GetClipTemplateAssetPath</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1af44e1edbd5b838009942f17f4c6f2c49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetClipTemplateEndTime</definition>
        <argsstring>(double *clipTemplateEndTime) const</argsstring>
        <name>GetClipTemplateEndTime</name>
        <param>
          <type>double *</type>
          <declname>clipTemplateEndTime</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a0992d98e537f8c79814cfd1fb1875526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateEndTime</definition>
        <argsstring>(const double clipTemplateEndTime, const std::string &amp;clipSet)</argsstring>
        <name>SetClipTemplateEndTime</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateEndTime</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clipSet</declname>
        </param>
        <briefdescription>
<para>Set the template end time for the clipset named <computeroutput>clipSet</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1aacf72851dc873df52fc07e9f228d0b1b" kindref="member">GetClipTemplateEndTime()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a7d6c1b20218530940a6d4f0cdc3e0b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetClipTemplateEndTime</definition>
        <argsstring>(const double clipTemplateEndTime)</argsstring>
        <name>SetClipTemplateEndTime</name>
        <param>
          <type>const double</type>
          <declname>clipTemplateEndTime</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This function operates on the default clip set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="clips_a_p_i_8h_1UsdClipsAPISetNames" kindref="member">UsdClipsAPISetNames</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a674432c0e7a2771436d5f4c55aa5e45d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static USD_API SdfLayerRefPtr GenerateClipManifestFromLayers</definition>
        <argsstring>(const SdfLayerHandleVector &amp;clipLayers, const SdfPath &amp;clipPrimPath)</argsstring>
        <name>GenerateClipManifestFromLayers</name>
        <param>
          <type>const SdfLayerHandleVector &amp;</type>
          <declname>clipLayers</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>clipPrimPath</declname>
        </param>
        <briefdescription>
<para>Create a clip manifest containing entries for all attributes in the given <computeroutput>clipLayers</computeroutput> that belong to the prim at <computeroutput>clipPrimPath</computeroutput> and all descendants. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns an anonymous layer that can be exported and reused (<simplesect kind="see"><para><ref refid="class_usd_clips_a_p_i_1ae4737f60f83a18ca285c79b7cd8fc187" kindref="member">SetClipManifestAssetPath</ref>).</para>
</simplesect>
Returns an invalid SdfLayerRefPtr on failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="425" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_clips_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741ad802a365d69ea33e7b2921b9c4f58ba4" kindref="member">UsdSchemaKind::NonAppliedAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="111" column="1" bodyfile="pxr/usd/usd/clipsAPI.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_clips_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="164" column="1" bodyfile="pxr/usd/usd/clipsAPI.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a6d6752aaccb0ebaeaec6b2b29f6aef1f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdClipsAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdClipsAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_clips_a_p_i_1a43448ffac4ee091f538eecf2b7066ab0" kindref="member">UsdClipsAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="117" column="1" bodyfile="pxr/usd/usd/clipsAPI.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a7637f92ccbcc37e3785421ac33343f32" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdClipsAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdClipsAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="125" column="1" bodyfile="pxr/usd/usd/clipsAPI.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1ad9ed9d2d22b3178e5413b2c64bd9b652" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USD_API</type>
        <definition>virtual USD_API ~UsdClipsAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdClipsAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USD_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a43448ffac4ee091f538eecf2b7066ab0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref></type>
        <definition>static USD_API UsdClipsAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdClipsAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USD_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="160" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USD_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_clips_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="168" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_clips_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USD_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/clipsAPI.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_clips_a_p_i" kindref="compound">UsdClipsAPI</ref> is an API schema that provides an interface to a prim&apos;s clip metadata. </para>
    </briefdescription>
    <detaileddescription>
<para>Clips are a &quot;value resolution&quot; feature that allows one to specify a sequence of usd files (clips) to be consulted, over time, as a source of varying overrides for the prims at and beneath this prim in namespace.</para>
<para><ref refid="class_usd_clips_a_p_i_1ae8c5dc6c96e95fd9cdb4501bd3a2cd02" kindref="member">SetClipAssetPaths()</ref> establishes the set of clips that can be consulted. <ref refid="class_usd_clips_a_p_i_1afcbe6a9ae5c8ae8c4b859ba45eb5bbb2" kindref="member">SetClipActive()</ref> specifies the ordering of clip application over time (clips can be repeated), while <ref refid="class_usd_clips_a_p_i_1a5f51f896b71c23563317547b476f0d33" kindref="member">SetClipTimes()</ref> specifies time-mapping from stage-time to clip-time for the clip active at a given stage-time, which allows for time-dilation and repetition of clips. Finally, <ref refid="class_usd_clips_a_p_i_1a3ef9b5eb6d83b62578ac48e998d30c4d" kindref="member">SetClipPrimPath()</ref> determines the path within each clip that will map to this prim, i.e. the location within the clip at which we will look for opinions for this prim.</para>
<para>The clip asset paths, times and active metadata can also be specified through template clip metadata. This can be desirable when your set of assets is very large, as the template metadata is much more concise. <ref refid="class_usd_clips_a_p_i_1a4957b03aef7d1dcac08eab222553f46c" kindref="member">SetClipTemplateAssetPath()</ref> establishes the asset identifier pattern of the set of clips to be consulted. <ref refid="class_usd_clips_a_p_i_1a60284208723aca45738983c75b817fa9" kindref="member">SetClipTemplateStride()</ref>, <ref refid="class_usd_clips_a_p_i_1a0992d98e537f8c79814cfd1fb1875526" kindref="member">SetClipTemplateEndTime()</ref>, and <ref refid="class_usd_clips_a_p_i_1a8b513477e75d241fd34cfb097e0c2b0f" kindref="member">SetClipTemplateStartTime()</ref> specify the range in which USD will search, based on the template. From the set of resolved asset paths, times and active will be derived internally.</para>
<para>A prim may have multiple &quot;clip sets&quot; <ndash/> named sets of clips that each have their own values for the metadata described above. For example, a prim might have a clip set named &quot;Clips_1&quot; that specifies some group of clip asset paths, and another clip set named &quot;Clips_2&quot; that uses an entirely different set of clip asset paths. These clip sets are composed across composition arcs, so clip sets for a prim may be defined in multiple sublayers or references, for example. Individual metadata for a given clip set may be sparsely overridden.</para>
<para>Important facts about clips:</para>
<para><itemizedlist>
<listitem><para>Within the layerstack in which clips are established, the</para>
</listitem>
</itemizedlist>
opinions within the clips will be <emphasis>weaker</emphasis> than any local opinions in the layerstack, but em stronger than varying opinions coming across references and variants.</para>
<para><itemizedlist>
<listitem><para>We will never look for metadata or default opinions in clips</para>
</listitem>
</itemizedlist>
when performing value resolution on the owning stage, since these</para>
<para>quantities must be time-invariant.</para>
<para>This leads to the common structure in which we reference a model asset on a prim, and then author clips at the same site: the asset reference will provide the topology and unvarying data for the model, while the clips will provide the time-sampled animation.</para>
<para>For further information, see <ref refid="_usd__page__value_clips" kindref="compound">Sequencable, Re-timable Animated &quot;Value Clips&quot;</ref> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6029">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6028">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6027">
        <label>UsdClipsAPI</label>
        <link refid="class_usd_clips_a_p_i"/>
        <childnode refid="6028" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6032">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6031">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6032" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6030">
        <label>UsdClipsAPI</label>
        <link refid="class_usd_clips_a_p_i"/>
        <childnode refid="6031" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/clipsAPI.h" line="106" column="1" bodyfile="pxr/usd/usd/clipsAPI.h" bodystart="105" bodyend="602"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_clips_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" virt="virtual"><scope>UsdClipsAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdClipsAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_clips_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_clips_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" virt="virtual"><scope>UsdClipsAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdClipsAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_clips_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdClipsAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_clips_a_p_i_1a7a79c3aff00e4e6e17c863ff660c9d3e" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>ComputeClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1a8e6793eac64351e96ae8f6ba600f8440" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>ComputeClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1a308ef3fe936c3a5ac968082041c10370" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GenerateClipManifest</name></member>
      <member refid="class_usd_clips_a_p_i_1a73444e4e9e65cab4eded60e9aae060a2" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GenerateClipManifest</name></member>
      <member refid="class_usd_clips_a_p_i_1a674432c0e7a2771436d5f4c55aa5e45d" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GenerateClipManifestFromLayers</name></member>
      <member refid="class_usd_clips_a_p_i_1a43448ffac4ee091f538eecf2b7066ab0" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>Get</name></member>
      <member refid="class_usd_clips_a_p_i_1aec07144efa96b799014ef6f997ff754b" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipActive</name></member>
      <member refid="class_usd_clips_a_p_i_1aefbd7b7b04f35d1e3e9fc6d1014136eb" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipActive</name></member>
      <member refid="class_usd_clips_a_p_i_1ae8c54eee7964c0502b37da1e86f5da14" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1afe5b1adc93cd51fea04f40e803065653" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1adb80cb50c0c1bf6b52789f01e329601e" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipManifestAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1aaf1e37b1f2e3eaf126418b4ca842892c" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipManifestAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1a556993c87b65e85b9568f0e06b45eb12" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipPrimPath</name></member>
      <member refid="class_usd_clips_a_p_i_1ab28a30ad6dc197328af588ddd4bb094d" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipPrimPath</name></member>
      <member refid="class_usd_clips_a_p_i_1a94d6e4d856cc3a92aae45953b9e942a6" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClips</name></member>
      <member refid="class_usd_clips_a_p_i_1aeefef4a262d265b6a59c6b9953611c09" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipSets</name></member>
      <member refid="class_usd_clips_a_p_i_1afdfc755e4ef1116d13b431a643f053d9" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateActiveOffset</name></member>
      <member refid="class_usd_clips_a_p_i_1ae7dce86b9abf923691936fcd77f03402" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateActiveOffset</name></member>
      <member refid="class_usd_clips_a_p_i_1a80514eeb7f22ca605a3c7ebe97f60cc6" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1ae2a4b2b0870ddf5dce7f6b3ee2e624b5" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1aacf72851dc873df52fc07e9f228d0b1b" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateEndTime</name></member>
      <member refid="class_usd_clips_a_p_i_1af44e1edbd5b838009942f17f4c6f2c49" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateEndTime</name></member>
      <member refid="class_usd_clips_a_p_i_1a686b9ce2e46d2e51223297646cf4baa8" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateStartTime</name></member>
      <member refid="class_usd_clips_a_p_i_1aee4c5e4925fd530826d1e9e176cf6f12" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateStartTime</name></member>
      <member refid="class_usd_clips_a_p_i_1a7b979b12224637b8482310510e417929" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateStride</name></member>
      <member refid="class_usd_clips_a_p_i_1a2542cfb505e5f9a907dbb3950cbb114f" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTemplateStride</name></member>
      <member refid="class_usd_clips_a_p_i_1a5cef0f408bae6ef790ca62bf717d300e" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTimes</name></member>
      <member refid="class_usd_clips_a_p_i_1ae47adf1f35ff327bb65e56d85cf7cc90" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetClipTimes</name></member>
      <member refid="class_usd_clips_a_p_i_1a0658e35f73d55ec92a9d1474a68381b0" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetInterpolateMissingClipValues</name></member>
      <member refid="class_usd_clips_a_p_i_1ad4d60417c5fd52d6cf365119503931b2" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetInterpolateMissingClipValues</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_clips_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_clips_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_clips_a_p_i_1afcbe6a9ae5c8ae8c4b859ba45eb5bbb2" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipActive</name></member>
      <member refid="class_usd_clips_a_p_i_1a68c2e4da42fa4ce973d952dd62e31266" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipActive</name></member>
      <member refid="class_usd_clips_a_p_i_1ae8c5dc6c96e95fd9cdb4501bd3a2cd02" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1a91c7a63c70a679b36ded6eab9d2f3f9b" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipAssetPaths</name></member>
      <member refid="class_usd_clips_a_p_i_1ae4737f60f83a18ca285c79b7cd8fc187" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipManifestAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1ad3772f146a798eae4a992fea5a12a3f3" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipManifestAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1a3ef9b5eb6d83b62578ac48e998d30c4d" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipPrimPath</name></member>
      <member refid="class_usd_clips_a_p_i_1afcf36631c0cbc4e5d6c0c258d6b6582e" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipPrimPath</name></member>
      <member refid="class_usd_clips_a_p_i_1aa2db7a50ebf8fe0ccaa972b656fcd7d0" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClips</name></member>
      <member refid="class_usd_clips_a_p_i_1ac37319b58182e22e3839308377cf9155" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipSets</name></member>
      <member refid="class_usd_clips_a_p_i_1a64937f56f78e62c73d5a0f8f05b72c63" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateActiveOffset</name></member>
      <member refid="class_usd_clips_a_p_i_1ad66773d363a3ea7d587ffb42d25ea9a8" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateActiveOffset</name></member>
      <member refid="class_usd_clips_a_p_i_1a4957b03aef7d1dcac08eab222553f46c" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1ad659798f4248a1d8633723cb80bfa2d7" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateAssetPath</name></member>
      <member refid="class_usd_clips_a_p_i_1a0992d98e537f8c79814cfd1fb1875526" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateEndTime</name></member>
      <member refid="class_usd_clips_a_p_i_1a7d6c1b20218530940a6d4f0cdc3e0b1e" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateEndTime</name></member>
      <member refid="class_usd_clips_a_p_i_1a8b513477e75d241fd34cfb097e0c2b0f" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateStartTime</name></member>
      <member refid="class_usd_clips_a_p_i_1ada9224b24ea1d21b9e757efe7c9ff1cd" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateStartTime</name></member>
      <member refid="class_usd_clips_a_p_i_1a60284208723aca45738983c75b817fa9" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateStride</name></member>
      <member refid="class_usd_clips_a_p_i_1a3239ace4f4868fc3c3523a4e6ce5bf48" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTemplateStride</name></member>
      <member refid="class_usd_clips_a_p_i_1a5f51f896b71c23563317547b476f0d33" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTimes</name></member>
      <member refid="class_usd_clips_a_p_i_1a207552757bdeb699454f1d1ef4bdf7f8" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetClipTimes</name></member>
      <member refid="class_usd_clips_a_p_i_1aafa07f096a5978de61a85ba6c14dce1a" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetInterpolateMissingClipValues</name></member>
      <member refid="class_usd_clips_a_p_i_1a9868cd36d3e265730c72c6e5c4db5774" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>SetInterpolateMissingClipValues</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_clips_a_p_i_1a6d6752aaccb0ebaeaec6b2b29f6aef1f" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdClipsAPI</name></member>
      <member refid="class_usd_clips_a_p_i_1a7637f92ccbcc37e3785421ac33343f32" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdClipsAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_clips_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdClipsAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdClipsAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_clips_a_p_i_1ad9ed9d2d22b3178e5413b2c64bd9b652" prot="public" virt="virtual"><scope>UsdClipsAPI</scope><name>~UsdClipsAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdClipsAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
