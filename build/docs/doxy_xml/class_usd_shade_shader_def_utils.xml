<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_shade_shader_def_utils" kind="class" language="C++" prot="public">
    <compoundname>UsdShadeShaderDefUtils</compoundname>
    <includes refid="shader_def_utils_8h" local="no">shaderDefUtils.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_shade_shader_def_utils_1a769e7fcf038cb078b2419735759630be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API NdrNodeDiscoveryResultVec</type>
        <definition>static USDSHADE_API NdrNodeDiscoveryResultVec GetNodeDiscoveryResults</definition>
        <argsstring>(const UsdShadeShader &amp;shaderDef, const std::string &amp;sourceUri)</argsstring>
        <name>GetNodeDiscoveryResults</name>
        <param>
          <type>const <ref refid="class_usd_shade_shader" kindref="compound">UsdShadeShader</ref> &amp;</type>
          <declname>shaderDef</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceUri</declname>
        </param>
        <briefdescription>
<para>Returns the list of <ref refid="struct_ndr_node_discovery_result" kindref="compound">NdrNodeDiscoveryResult</ref> objects that must be added to the shader registry for the given shader <computeroutput>shaderDef</computeroutput>, assuming it is found in a shader definition file found by an Ndr discovery plugin. </para>
        </briefdescription>
        <detaileddescription>
<para>To enable the shaderDef parser to find and parse this shader, <computeroutput>sourceUri</computeroutput> should have the resolved path to the usd file containing this shader prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/shaderDefUtils.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_shader_def_utils_1a69f85474145050cb906fd15855d3d2b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API NdrPropertyUniquePtrVec</type>
        <definition>static USDSHADE_API NdrPropertyUniquePtrVec GetShaderProperties</definition>
        <argsstring>(const UsdShadeConnectableAPI &amp;shaderDef)</argsstring>
        <name>GetShaderProperties</name>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>shaderDef</declname>
        </param>
        <briefdescription>
<para>Gets all input and output properties of the given <computeroutput>shaderDef</computeroutput> and translates them into NdrProperties that can be used as the properties for an <ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/shaderDefUtils.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_shade_shader_def_utils_1aa5b866bd496b1326f2c7b3f19168361b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDSHADE_API std::string</type>
        <definition>static USDSHADE_API std::string GetPrimvarNamesMetadataString</definition>
        <argsstring>(const NdrTokenMap metadata, const UsdShadeConnectableAPI &amp;shaderDef)</argsstring>
        <name>GetPrimvarNamesMetadataString</name>
        <param>
          <type>const NdrTokenMap</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>shaderDef</declname>
        </param>
        <briefdescription>
<para>Collects all the names of valid primvar inputs of the given <computeroutput>metadata</computeroutput> and the given <computeroutput>shaderDef</computeroutput> and returns the string used to represent them in <ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref> metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdShade/shaderDefUtils.h" line="69" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class contains a set of utility functions used for populating the shader registry with shaders definitions specified using UsdShade schemas. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/usdShade/shaderDefUtils.h" line="44" column="1" bodyfile="pxr/usd/usdShade/shaderDefUtils.h" bodystart="44" bodyend="72"/>
    <listofallmembers>
      <member refid="class_usd_shade_shader_def_utils_1a769e7fcf038cb078b2419735759630be" prot="public" virt="non-virtual"><scope>UsdShadeShaderDefUtils</scope><name>GetNodeDiscoveryResults</name></member>
      <member refid="class_usd_shade_shader_def_utils_1aa5b866bd496b1326f2c7b3f19168361b" prot="public" virt="non-virtual"><scope>UsdShadeShaderDefUtils</scope><name>GetPrimvarNamesMetadataString</name></member>
      <member refid="class_usd_shade_shader_def_utils_1a69f85474145050cb906fd15855d3d2b7" prot="public" virt="non-virtual"><scope>UsdShadeShaderDefUtils</scope><name>GetShaderProperties</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
