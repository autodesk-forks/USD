<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" kind="class" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::OptionBase</compoundname>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>CRTP</declname>
        <defname>CRTP</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a166290d4fd7e504492303af2b5ac6732" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend App</definition>
        <argsstring></argsstring>
        <name>App</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4169" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string group_</definition>
        <argsstring></argsstring>
        <name>group_</name>
        <initializer>= std::string(&quot;Options&quot;)</initializer>
        <briefdescription>
<para>The group membership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4173" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool required_</definition>
        <argsstring></argsstring>
        <name>required_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if this is a required option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4176" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ignore_case_</definition>
        <argsstring></argsstring>
        <name>ignore_case_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Ignore the case when matching (option, not value) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4179" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ignore_underscore_</definition>
        <argsstring></argsstring>
        <name>ignore_underscore_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Ignore underscores when matching (option, not value) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4182" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool configurable_</definition>
        <argsstring></argsstring>
        <name>configurable_</name>
        <initializer>{true}</initializer>
        <briefdescription>
<para>Allow this option to be given in a configuration file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4185" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool disable_flag_override_</definition>
        <argsstring></argsstring>
        <name>disable_flag_override_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Disable overriding flag values with &apos;=value&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4188" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" prot="protected" static="no" mutable="no">
        <type>char</type>
        <definition>char delimiter_</definition>
        <argsstring></argsstring>
        <name>delimiter_</name>
        <initializer>{&apos;\0&apos;}</initializer>
        <briefdescription>
<para>Specify a delimiter character for vector arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4191" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool always_capture_default_</definition>
        <argsstring></argsstring>
        <name>always_capture_default_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Automatically capture default value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4194" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" prot="protected" static="no" mutable="no">
        <type>MultiOptionPolicy</type>
        <definition>MultiOptionPolicy multi_option_policy_</definition>
        <argsstring></argsstring>
        <name>multi_option_policy_</name>
        <initializer>{MultiOptionPolicy::Throw}</initializer>
        <briefdescription>
<para>Policy for handling multiple arguments beyond the expected Max. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4197" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void copy_to</definition>
        <argsstring>(T *other) const</argsstring>
        <name>copy_to</name>
        <param>
          <type>T *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the contents to another similar class (one based on <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" kindref="compound">OptionBase</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4200" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4924" bodyend="4934"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adba1b313a5a0035d1254a2404c23a69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* group</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>group</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Changes the group membership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4206" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4206" bodyend="4212"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* required</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>required</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the option as required. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4215" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4215" bodyend="4218"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1add863d957d8a11f803fbbb1154f56f7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* mandatory</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>mandatory</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Support Plumbum term. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4221" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4221" bodyend="4221"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1af50cd15ab0f05d9c91cd9f8a2db34625" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* always_capture_default</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>always_capture_default</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4223" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4223" bodyend="4226"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1afca7b35622137979783814ce756839ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_group</definition>
        <argsstring>() const</argsstring>
        <name>get_group</name>
        <briefdescription>
<para>Get the group of this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4231" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4231" bodyend="4231"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adb854d8a9944e306e11497510854e240" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_required</definition>
        <argsstring>() const</argsstring>
        <name>get_required</name>
        <briefdescription>
<para>True if this is a required option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4234" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4234" bodyend="4234"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8b541e6f3cb51a57d01b59d700a465e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_ignore_case</definition>
        <argsstring>() const</argsstring>
        <name>get_ignore_case</name>
        <briefdescription>
<para>The status of ignore case. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4237" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4237" bodyend="4237"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3d0bed939c8c3062b440bf5a38df8516" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_ignore_underscore</definition>
        <argsstring>() const</argsstring>
        <name>get_ignore_underscore</name>
        <briefdescription>
<para>The status of ignore_underscore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4240" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4240" bodyend="4240"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8a16a63a10270e0fff7d240ed4822cfd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_configurable</definition>
        <argsstring>() const</argsstring>
        <name>get_configurable</name>
        <briefdescription>
<para>The status of configurable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4243" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4243" bodyend="4243"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad295f98654896912ebdb4a32ab19b618" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_disable_flag_override</definition>
        <argsstring>() const</argsstring>
        <name>get_disable_flag_override</name>
        <briefdescription>
<para>The status of configurable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4246" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4246" bodyend="4246"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a2e1fcf873470e161bd71f18b74e84e81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD char</type>
        <definition>CLI11_NODISCARD char get_delimiter</definition>
        <argsstring>() const</argsstring>
        <name>get_delimiter</name>
        <briefdescription>
<para>Get the current delimiter char. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4249" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4249" bodyend="4249"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a7e67b84b58f3a1be85ba806e7b7185a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_always_capture_default</definition>
        <argsstring>() const</argsstring>
        <name>get_always_capture_default</name>
        <briefdescription>
<para>Return true if this will automatically capture the default value for help printing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4252" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4252" bodyend="4252"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae7881d0e3de032e25eff87c5e0d15169" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD MultiOptionPolicy</type>
        <definition>CLI11_NODISCARD MultiOptionPolicy get_multi_option_policy</definition>
        <argsstring>() const</argsstring>
        <name>get_multi_option_policy</name>
        <briefdescription>
<para>The status of the multi option policy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4255" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4255" bodyend="4255"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a25f7524ba13846aceaa7012ab2ef6142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* take_last</definition>
        <argsstring>()</argsstring>
        <name>take_last</name>
        <briefdescription>
<para>Set the multi option policy to take last. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4260" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4260" bodyend="4264"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad3ac1a211f1ab1ba3a8233b9b3c7788a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* take_first</definition>
        <argsstring>()</argsstring>
        <name>take_first</name>
        <briefdescription>
<para>Set the multi option policy to take last. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4267" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4267" bodyend="4271"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ab1bfc69b6a0d8f3ca5cc633373514309" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* take_all</definition>
        <argsstring>()</argsstring>
        <name>take_all</name>
        <briefdescription>
<para>Set the multi option policy to take all arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4274" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4274" bodyend="4278"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae60a98016eb4fa4f52b35c1e04c4af57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* join</definition>
        <argsstring>()</argsstring>
        <name>join</name>
        <briefdescription>
<para>Set the multi option policy to join. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4281" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4281" bodyend="4285"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a9ddef37d6c61f1f918934ad9028d1e1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* join</definition>
        <argsstring>(char delim)</argsstring>
        <name>join</name>
        <param>
          <type>char</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Set the multi option policy to join with a specific delimiter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4288" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4288" bodyend="4293"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3491d409f5efa790921d43ef33ea3e3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* configurable</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>configurable</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Allow in a configuration file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4296" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4296" bodyend="4299"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a33af294b57ec5fc59cc1b098f7d7e510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CRTP *</type>
        <definition>CRTP* delimiter</definition>
        <argsstring>(char value=&apos;\0&apos;)</argsstring>
        <name>delimiter</name>
        <param>
          <type>char</type>
          <declname>value</declname>
          <defval>&apos;\0&apos;</defval>
        </param>
        <briefdescription>
<para>Allow in a configuration file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4302" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4302" bodyend="4305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the CRTP base class for Option and <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>It was designed this way to share parts of the class; an <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults" kindref="compound">OptionDefaults</ref> can copy to an Option. </para>
    </detaileddescription>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4168" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4168" bodyend="4306"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1af50cd15ab0f05d9c91cd9f8a2db34625" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>always_capture_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>always_capture_default_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a166290d4fd7e504492303af2b5ac6732" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>App</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3491d409f5efa790921d43ef33ea3e3f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>configurable_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>copy_to</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a33af294b57ec5fc59cc1b098f7d7e510" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>delimiter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>delimiter_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>disable_flag_override_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a7e67b84b58f3a1be85ba806e7b7185a2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_always_capture_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8a16a63a10270e0fff7d240ed4822cfd" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a2e1fcf873470e161bd71f18b74e84e81" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_delimiter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad295f98654896912ebdb4a32ab19b618" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_disable_flag_override</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1afca7b35622137979783814ce756839ce" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8b541e6f3cb51a57d01b59d700a465e1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_ignore_case</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3d0bed939c8c3062b440bf5a38df8516" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_ignore_underscore</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae7881d0e3de032e25eff87c5e0d15169" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_multi_option_policy</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adb854d8a9944e306e11497510854e240" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>get_required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adba1b313a5a0035d1254a2404c23a69a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>group_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>ignore_case_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>ignore_underscore_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae60a98016eb4fa4f52b35c1e04c4af57" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>join</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a9ddef37d6c61f1f918934ad9028d1e1d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>join</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1add863d957d8a11f803fbbb1154f56f7a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>mandatory</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>multi_option_policy_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>required_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ab1bfc69b6a0d8f3ca5cc633373514309" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>take_all</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad3ac1a211f1ab1ba3a8233b9b3c7788a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>take_first</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a25f7524ba13846aceaa7012ab2ef6142" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::OptionBase</scope><name>take_last</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
