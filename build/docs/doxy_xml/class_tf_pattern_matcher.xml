<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_pattern_matcher" kind="class" language="C++" prot="public">
    <compoundname>TfPatternMatcher</compoundname>
    <includes refid="pattern_matcher_8h" local="no">patternMatcher.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_pattern_matcher_1adf03976ffabeb1d38dc90f6eaa857772" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _caseSensitive</definition>
        <argsstring></argsstring>
        <name>_caseSensitive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="124" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_pattern_matcher_1a8a1a7c20079e877f7ab2bcbe56ed321f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isGlob</definition>
        <argsstring></argsstring>
        <name>_isGlob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="125" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_pattern_matcher_1ade138148385b24d2027a23cc7a6bc0ca" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _pattern</definition>
        <argsstring></argsstring>
        <name>_pattern</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="126" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_pattern_matcher_1ac1f9b63f69d0f63bcfd523d14ecc62e8" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool _recompile</definition>
        <argsstring></argsstring>
        <name>_recompile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="127" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_pattern_matcher_1ad921bd538e24168438e76780605c4f50" prot="private" static="no" mutable="yes">
        <type>ArchRegex</type>
        <definition>ArchRegex _regex</definition>
        <argsstring></argsstring>
        <name>_regex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="128" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_pattern_matcher_1a221e83ef564b166ced71405bb73956d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfPatternMatcher</definition>
        <argsstring>()</argsstring>
        <name>TfPatternMatcher</name>
        <briefdescription>
<para>Construct an empty (invalid) <ref refid="class_tf_pattern_matcher" kindref="compound">TfPatternMatcher</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a830c2df7dd384794ba2e8c67d30d3ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfPatternMatcher</definition>
        <argsstring>(TfPatternMatcher &amp;&amp;) noexcept=default</argsstring>
        <name>TfPatternMatcher</name>
        <param>
          <type><ref refid="class_tf_pattern_matcher" kindref="compound">TfPatternMatcher</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a9aa465138b6855389d8fc8ae6b66ef8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_pattern_matcher" kindref="compound">TfPatternMatcher</ref> &amp;</type>
        <definition>TF_API TfPatternMatcher&amp; operator=</definition>
        <argsstring>(TfPatternMatcher &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_pattern_matcher" kindref="compound">TfPatternMatcher</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a270639ea51cc6a10ee9519c2dd644c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfPatternMatcher</definition>
        <argsstring>(const std::string &amp;pattern, bool caseSensitive=false, bool isGlob=false)</argsstring>
        <name>TfPatternMatcher</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>caseSensitive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isGlob</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_tf_pattern_matcher" kindref="compound">TfPatternMatcher</ref> with a default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that pattern compilation will not occur until the first call to <emphasis><ref refid="class_tf_pattern_matcher_1a06e05173d97c8af365e129838df7e52d" kindref="member">Match()</ref></emphasis> or <emphasis><ref refid="class_tf_pattern_matcher_1a3da3fc495542dcfb22b59d4a0f3abe11" kindref="member">IsValid()</ref></emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a1805dd3583464e1a1afb6caf795a35b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API ~TfPatternMatcher</definition>
        <argsstring>()</argsstring>
        <name>~TfPatternMatcher</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1aad23c244fd2fe501b6e7fa033b8076cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>TF_API std::string GetInvalidReason</definition>
        <argsstring>() const</argsstring>
        <name>GetInvalidReason</name>
        <briefdescription>
<para>If <emphasis><ref refid="class_tf_pattern_matcher_1a3da3fc495542dcfb22b59d4a0f3abe11" kindref="member">IsValid()</ref></emphasis> returns true, this will return the reason why (if any). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a58de133fb04e7fe5e576c075d0eab460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsCaseSensitive</definition>
        <argsstring>() const</argsstring>
        <name>IsCaseSensitive</name>
        <briefdescription>
<para>Returns true if the matcher has been set to be case sensitive, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="75" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a7345e2334ae6f576a68d93fb15adfe2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsGlobPattern</definition>
        <argsstring>() const</argsstring>
        <name>IsGlobPattern</name>
        <briefdescription>
<para>Returns true if the matcher has been set to treat patterns as glob patterns, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="81" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a0428d9fd277ee9cb07dd4b91038a41a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>TF_API const std::string &amp;</type>
        <definition>TF_API const std::string&amp; GetPattern</definition>
        <argsstring>() const</argsstring>
        <name>GetPattern</name>
        <briefdescription>
<para>Returns the matcher&apos;s pattern string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="86" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a3da3fc495542dcfb22b59d4a0f3abe11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Returns true if the matcher has a valid pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that empty patterns are considered invalid. This will cause a compile of </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a06e05173d97c8af365e129838df7e52d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Match</definition>
        <argsstring>(const std::string &amp;query, std::string *errorMsg=NULL) const</argsstring>
        <name>Match</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errorMsg</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns true if <emphasis>query</emphasis> matches the matcher&apos;s pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is an error in matching and errorMsg is not NULL, it will be set with the error message. If the matcher is not valid, this will return false. Note that this will cause a compile of the matcher&apos;s pattern if it was not already compiled.</para>
<para><simplesect kind="warning"><para>Unlike &apos;match&apos; functions in other regular expression libraries, this method does not implicitly anchor the pattern. If a partial match is not acceptable, it is necessary to anchor the pattern passed to the constructor, e.g. &quot;^mypattern$&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1a263c167385bc5e5e26cdadec761d82fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void SetIsCaseSensitive</definition>
        <argsstring>(bool sensitive)</argsstring>
        <name>SetIsCaseSensitive</name>
        <param>
          <type>bool</type>
          <declname>sensitive</declname>
        </param>
        <briefdescription>
<para>Set this matcher to match case-sensitively or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1adb51441be8549754cc93de9994a0d397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void SetIsGlobPattern</definition>
        <argsstring>(bool isGlob)</argsstring>
        <name>SetIsGlobPattern</name>
        <param>
          <type>bool</type>
          <declname>isGlob</declname>
        </param>
        <briefdescription>
<para>Set this matcher to treat its pattern as a glob pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently, this means that the pattern will be transformed by replacing all instances of &apos;.&apos; with &apos;.&apos;, &apos;*&apos; with &apos;.*&apos;, and &apos;?&apos; with &apos;.&apos;, in that order before being compiled as a normal regular expression. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pattern_matcher_1ac5036014afdf328f6d3795312eb05f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void SetPattern</definition>
        <argsstring>(const std::string &amp;pattern)</argsstring>
        <name>SetPattern</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Set the pattern that this matcher will use to match against. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_pattern_matcher_1ada9b5d703058c2b4052ad57aaaddc3c9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Compile</definition>
        <argsstring>() const</argsstring>
        <name>_Compile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/patternMatcher.h" line="122" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for matching regular expressions. </para>
    </briefdescription>
    <detaileddescription>
<para>A matcher is good to use when you have many strings to match against one pattern. This is because the matcher will only compile the regular expression once. </para>
    </detaileddescription>
    <location file="pxr/base/tf/patternMatcher.h" line="49" column="1" bodyfile="pxr/base/tf/patternMatcher.h" bodystart="48" bodyend="130"/>
    <listofallmembers>
      <member refid="class_tf_pattern_matcher_1adf03976ffabeb1d38dc90f6eaa857772" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_caseSensitive</name></member>
      <member refid="class_tf_pattern_matcher_1ada9b5d703058c2b4052ad57aaaddc3c9" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_Compile</name></member>
      <member refid="class_tf_pattern_matcher_1a8a1a7c20079e877f7ab2bcbe56ed321f" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_isGlob</name></member>
      <member refid="class_tf_pattern_matcher_1ade138148385b24d2027a23cc7a6bc0ca" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_pattern</name></member>
      <member refid="class_tf_pattern_matcher_1ac1f9b63f69d0f63bcfd523d14ecc62e8" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_recompile</name></member>
      <member refid="class_tf_pattern_matcher_1ad921bd538e24168438e76780605c4f50" prot="private" virt="non-virtual"><scope>TfPatternMatcher</scope><name>_regex</name></member>
      <member refid="class_tf_pattern_matcher_1aad23c244fd2fe501b6e7fa033b8076cc" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>GetInvalidReason</name></member>
      <member refid="class_tf_pattern_matcher_1a0428d9fd277ee9cb07dd4b91038a41a3" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>GetPattern</name></member>
      <member refid="class_tf_pattern_matcher_1a58de133fb04e7fe5e576c075d0eab460" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>IsCaseSensitive</name></member>
      <member refid="class_tf_pattern_matcher_1a7345e2334ae6f576a68d93fb15adfe2f" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>IsGlobPattern</name></member>
      <member refid="class_tf_pattern_matcher_1a3da3fc495542dcfb22b59d4a0f3abe11" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>IsValid</name></member>
      <member refid="class_tf_pattern_matcher_1a06e05173d97c8af365e129838df7e52d" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>Match</name></member>
      <member refid="class_tf_pattern_matcher_1a9aa465138b6855389d8fc8ae6b66ef8f" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>operator=</name></member>
      <member refid="class_tf_pattern_matcher_1a263c167385bc5e5e26cdadec761d82fa" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>SetIsCaseSensitive</name></member>
      <member refid="class_tf_pattern_matcher_1adb51441be8549754cc93de9994a0d397" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>SetIsGlobPattern</name></member>
      <member refid="class_tf_pattern_matcher_1ac5036014afdf328f6d3795312eb05f6f" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>SetPattern</name></member>
      <member refid="class_tf_pattern_matcher_1a221e83ef564b166ced71405bb73956d4" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>TfPatternMatcher</name></member>
      <member refid="class_tf_pattern_matcher_1a830c2df7dd384794ba2e8c67d30d3ee0" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>TfPatternMatcher</name></member>
      <member refid="class_tf_pattern_matcher_1a270639ea51cc6a10ee9519c2dd644c69" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>TfPatternMatcher</name></member>
      <member refid="class_tf_pattern_matcher_1a1805dd3583464e1a1afb6caf795a35b1" prot="public" virt="non-virtual"><scope>TfPatternMatcher</scope><name>~TfPatternMatcher</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
