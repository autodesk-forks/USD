<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_b_box_cache" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomBBoxCache</compoundname>
    <includes refid="bbox_cache_8h" local="no">bboxCache.h</includes>
    <innerclass refid="struct_usd_geom_b_box_cache_1_1___entry" prot="private">UsdGeomBBoxCache::_Entry</innerclass>
    <innerclass refid="struct_usd_geom_b_box_cache_1_1___prim_context" prot="private">UsdGeomBBoxCache::_PrimContext</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_usd_geom_b_box_cache_1a6f9026d826c5b2630f736916759f2198" prot="private" static="no">
        <type>std::map&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref>, <ref refid="struct_tf_token_fast_arbitrary_less_than" kindref="compound">TfTokenFastArbitraryLessThan</ref> &gt;</type>
        <definition>typedef std::map&lt;TfToken, GfBBox3d, TfTokenFastArbitraryLessThan&gt; _PurposeToBBoxMap</definition>
        <argsstring></argsstring>
        <name>_PurposeToBBoxMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="397" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_geom_b_box_cache_1a4bb451d9896273ba835c4c9f155fed6a" prot="private" static="no">
        <type><ref refid="class_tf_hash" kindref="compound">TfHash</ref></type>
        <definition>typedef TfHash _PrimContextHash</definition>
        <argsstring></argsstring>
        <name>_PrimContextHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="555" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usd_geom_b_box_cache_1a7c3fa8ba08e7288829f0c684c68cff02" prot="private" static="no">
        <type>TfHashMap&lt; _PrimContext, _Entry, <ref refid="class_tf_hash" kindref="compound">_PrimContextHash</ref> &gt;</type>
        <definition>typedef TfHashMap&lt;_PrimContext, _Entry, _PrimContextHash&gt; _PrimBBoxHashMap</definition>
        <argsstring></argsstring>
        <name>_PrimBBoxHashMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="556" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a1fcc886eb2c46aff2e2816eb7601935b" prot="private" static="no" mutable="no">
        <type><ref refid="class_work_dispatcher" kindref="compound">WorkDispatcher</ref></type>
        <definition>WorkDispatcher _dispatcher</definition>
        <argsstring></argsstring>
        <name>_dispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="571" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a385fbaa7541cbfee86880f46c18e438a" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
        <definition>UsdTimeCode _time</definition>
        <argsstring></argsstring>
        <name>_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="572" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a414f060df2366c47d7cc8038bcf0f92d" prot="private" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> &gt;</type>
        <definition>std::optional&lt;UsdTimeCode&gt; _baseTime</definition>
        <argsstring></argsstring>
        <name>_baseTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="573" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1af6af33186a80307fb992eb47d92f6b14" prot="private" static="no" mutable="no">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _includedPurposes</definition>
        <argsstring></argsstring>
        <name>_includedPurposes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="574" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a30a0bc7c01a04a19fdf2cc801c3a80bd" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_geom_xform_cache" kindref="compound">UsdGeomXformCache</ref></type>
        <definition>UsdGeomXformCache _ctmCache</definition>
        <argsstring></argsstring>
        <name>_ctmCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="575" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a540e48c6b3b9c4e5317b96283db1c7ac" prot="private" static="no" mutable="no">
        <type>_PrimBBoxHashMap</type>
        <definition>_PrimBBoxHashMap _bboxCache</definition>
        <argsstring></argsstring>
        <name>_bboxCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="576" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1a83fc69c8b4e038e3c71df4f412fc58fc" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _useExtentsHint</definition>
        <argsstring></argsstring>
        <name>_useExtentsHint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="577" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_geom_b_box_cache_1ad41feefc01510173b4bb6d0a791d6ca7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _ignoreVisibility</definition>
        <argsstring></argsstring>
        <name>_ignoreVisibility</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="578" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ad4dbc60e68f738ff79c437fec435322d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API</type>
        <definition>USDGEOM_API UsdGeomBBoxCache</definition>
        <argsstring>(UsdTimeCode time, TfTokenVector includedPurposes, bool useExtentsHint=false, bool ignoreVisibility=false)</argsstring>
        <name>UsdGeomBBoxCache</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
          <declname>includedPurposes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExtentsHint</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreVisibility</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new BBoxCache for a specific <computeroutput>time</computeroutput> and set of <computeroutput>includedPurposes</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Only prims with a purpose that matches the <computeroutput>includedPurposes</computeroutput> will be considered when accumulating child bounds. See <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> for allowed purpose values.</para>
<para>If <computeroutput>useExtentsHint</computeroutput> is true, then when computing the bounds for any model-root prim, if the prim is visible at <computeroutput>time</computeroutput>, we will fetch its extents hint (via <ref refid="class_usd_geom_model_a_p_i_1a4aa8b1f29a3097fe08da868bd2b8b259" kindref="member">UsdGeomModelAPI::GetExtentsHint()</ref>). If it is authored, we use it to compute the bounding box for the selected combination of includedPurposes by combining bounding box hints that have been cached for various values of purposes.</para>
<para>If <computeroutput>ignoreVisibility</computeroutput> is true invisible prims will be included during bounds computations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1aefabd9bd6807729218c25b067bb59f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API</type>
        <definition>USDGEOM_API UsdGeomBBoxCache</definition>
        <argsstring>(UsdGeomBBoxCache const &amp;other)</argsstring>
        <name>UsdGeomBBoxCache</name>
        <param>
          <type><ref refid="class_usd_geom_b_box_cache" kindref="compound">UsdGeomBBoxCache</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a5adda0e988bb28b6d052281c29315af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_b_box_cache" kindref="compound">UsdGeomBBoxCache</ref> &amp;</type>
        <definition>USDGEOM_API UsdGeomBBoxCache&amp; operator=</definition>
        <argsstring>(UsdGeomBBoxCache const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_usd_geom_b_box_cache" kindref="compound">UsdGeomBBoxCache</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeWorldBound</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>ComputeWorldBound</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Compute the bound of the given prim in world space, leveraging any pre-existing, cached bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>The bound of the prim is computed, including the transform (if any) authored on the node itself, and then transformed to world space.</para>
<para>Error handling note: No checking of <computeroutput>prim</computeroutput> validity is performed. If <computeroutput>prim</computeroutput> is invalid, this method will abort the program; therefore it is the client&apos;s responsibility to ensure <computeroutput>prim</computeroutput> is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ac342f5ea36969d77a53f240e68f8694c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeWorldBoundWithOverrides</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPathSet &amp;pathsToSkip, const GfMatrix4d &amp;primOverride, const TfHashMap&lt; SdfPath, GfMatrix4d, SdfPath::Hash &gt; &amp;ctmOverrides)</argsstring>
        <name>ComputeWorldBoundWithOverrides</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>pathsToSkip</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>primOverride</declname>
        </param>
        <param>
          <type>const TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>, SdfPath::Hash &gt; &amp;</type>
          <declname>ctmOverrides</declname>
        </param>
        <briefdescription>
<para>Computes the bound of the prim&apos;s descendents in world space while excluding the subtrees rooted at the paths in <computeroutput>pathsToSkip</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Additionally, the parameter <computeroutput>primOverride</computeroutput> overrides the local-to-world transform of the prim and <computeroutput>ctmOverrides</computeroutput> is used to specify overrides the local-to-world transforms of certain paths underneath the prim.</para>
<para>This leverages any pre-existing, cached bounds, but does not include the transform (if any) authored on the prim itself.</para>
<para>See <ref refid="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" kindref="member">ComputeWorldBound()</ref> for notes on performance and error handling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ac4c8d23d02162fd864acc12779327108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeRelativeBound</definition>
        <argsstring>(const UsdPrim &amp;prim, const UsdPrim &amp;relativeToAncestorPrim)</argsstring>
        <name>ComputeRelativeBound</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>relativeToAncestorPrim</declname>
        </param>
        <briefdescription>
<para>Compute the bound of the given prim in the space of an ancestor prim, <computeroutput>relativeToAncestorPrim</computeroutput>, leveraging any pre-existing cached bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed bound excludes the local transform at <computeroutput>relativeToAncestorPrim</computeroutput>. The computed bound may be incorrect if <computeroutput>relativeToAncestorPrim</computeroutput> is not an ancestor of <computeroutput>prim</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1aed7e2472ff7e460d5307d2f2fc5200e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeLocalBound</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>ComputeLocalBound</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Computes the oriented bounding box of the given prim, leveraging any pre-existing, cached bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed bound includes the transform authored on the prim itself, but does not include any ancestor transforms (it does not include the local-to-world transform).</para>
<para>See <ref refid="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" kindref="member">ComputeWorldBound()</ref> for notes on performance and error handling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ad83e536dfdafb804039f3347f08feeb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeUntransformedBound</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>ComputeUntransformedBound</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Computes the bound of the prim&apos;s children leveraging any pre-existing, cached bounds, but does not include the transform (if any) authored on the prim itself. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>IMPORTANT:</bold> while the BBox does not contain the local transformation, in general it may still contain a non-identity transformation matrix to put the bounds in the correct space. Therefore, to obtain the correct axis-aligned bounding box, the client must call ComputeAlignedRange().</para>
<para>See <ref refid="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" kindref="member">ComputeWorldBound()</ref> for notes on performance and error handling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ac316c143df0779d60bbfbec93fc092aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>USDGEOM_API GfBBox3d ComputeUntransformedBound</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPathSet &amp;pathsToSkip, const TfHashMap&lt; SdfPath, GfMatrix4d, SdfPath::Hash &gt; &amp;ctmOverrides)</argsstring>
        <name>ComputeUntransformedBound</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>pathsToSkip</declname>
        </param>
        <param>
          <type>const TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>, SdfPath::Hash &gt; &amp;</type>
          <declname>ctmOverrides</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Computes the bound of the prim&apos;s descendents while excluding the subtrees rooted at the paths in <computeroutput>pathsToSkip</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Additionally, the parameter <computeroutput>ctmOverrides</computeroutput> is used to specify overrides to the CTM values of certain paths underneath the prim. The CTM values in the <computeroutput>ctmOverrides</computeroutput> map are in the space of the given prim, <computeroutput>prim</computeroutput>.</para>
<para>This leverages any pre-existing, cached bounds, but does not include the transform (if any) authored on the prim itself.</para>
<para><bold>IMPORTANT:</bold> while the BBox does not contain the local transformation, in general it may still contain a non-identity transformation matrix to put the bounds in the correct space. Therefore, to obtain the correct axis-aligned bounding box, the client must call ComputeAlignedRange().</para>
<para>See <ref refid="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" kindref="member">ComputeWorldBound()</ref> for notes on performance and error handling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a26c8e3842c2df60dc823983bc6442f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ComputePointInstanceWorldBounds</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t const *instanceIdBegin, size_t numIds, GfBBox3d *result)</argsstring>
        <name>ComputePointInstanceWorldBounds</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>instanceIdBegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numIds</declname>
        </param>
        <param>
          <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute the bound of the given point instances in world space. </para>
        </briefdescription>
        <detaileddescription>
<para>The bounds of each instance is computed and then transformed to world space. The <computeroutput>result</computeroutput> pointer must point to <computeroutput>numIds</computeroutput> <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> instances to be filled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a09be1bec1c2aad3d5afdc641081ad9bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d ComputePointInstanceWorldBound</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t instanceId)</argsstring>
        <name>ComputePointInstanceWorldBound</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>instanceId</declname>
        </param>
        <briefdescription>
<para>Compute the bound of the given point instance in world space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="223" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a24e48e93edb29af13b149b9a6e415cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ComputePointInstanceRelativeBounds</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t const *instanceIdBegin, size_t numIds, const UsdPrim &amp;relativeToAncestorPrim, GfBBox3d *result)</argsstring>
        <name>ComputePointInstanceRelativeBounds</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>instanceIdBegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numIds</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>relativeToAncestorPrim</declname>
        </param>
        <param>
          <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute the bounds of the given point instances in the space of an ancestor prim <computeroutput>relativeToAncestorPrim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Write the results to <computeroutput>result</computeroutput>.</para>
<para>The computed bound excludes the local transform at <computeroutput>relativeToAncestorPrim</computeroutput>. The computed bound may be incorrect if <computeroutput>relativeToAncestorPrim</computeroutput> is not an ancestor of <computeroutput>prim</computeroutput>.</para>
<para>The <computeroutput>result</computeroutput> pointer must point to <computeroutput>numIds</computeroutput> <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> instances to be filled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a849f43193b38b7c26cd9adee0decbb23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d ComputePointInstanceRelativeBound</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t instanceId, const UsdPrim &amp;relativeToAncestorPrim)</argsstring>
        <name>ComputePointInstanceRelativeBound</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>instanceId</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>relativeToAncestorPrim</declname>
        </param>
        <briefdescription>
<para>Compute the bound of the given point instance in the space of an ancestor prim <computeroutput>relativeToAncestorPrim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="252" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ac880d992d88ab1ff25e4aca94dbb0d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ComputePointInstanceLocalBounds</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t const *instanceIdBegin, size_t numIds, GfBBox3d *result)</argsstring>
        <name>ComputePointInstanceLocalBounds</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>instanceIdBegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numIds</declname>
        </param>
        <param>
          <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute the oriented bounding boxes of the given point instances. </para>
        </briefdescription>
        <detaileddescription>
<para>The computed bounds include the transform authored on the instancer itself, but does not include any ancestor transforms (it does not include the local-to-world transform).</para>
<para>The <computeroutput>result</computeroutput> pointer must point to <computeroutput>numIds</computeroutput> <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> instances to be filled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1aee789f5500ce892f84edcaa9a0065462" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d ComputePointInstanceLocalBound</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t instanceId)</argsstring>
        <name>ComputePointInstanceLocalBound</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>instanceId</declname>
        </param>
        <briefdescription>
<para>Compute the oriented bounding boxes of the given point instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="280" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="280" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a85916e21a14197fb2c0541e85b2bdebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ComputePointInstanceUntransformedBounds</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t const *instanceIdBegin, size_t numIds, GfBBox3d *result)</argsstring>
        <name>ComputePointInstanceUntransformedBounds</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>instanceIdBegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numIds</declname>
        </param>
        <param>
          <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Computes the bound of the given point instances, but does not include the transform (if any) authored on the instancer itself. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>IMPORTANT:</bold> while the BBox does not contain the local transformation, in general it may still contain a non-identity transformation matrix to put the bounds in the correct space. Therefore, to obtain the correct axis-aligned bounding box, the client must call ComputeAlignedRange().</para>
<para>The <computeroutput>result</computeroutput> pointer must point to <computeroutput>numIds</computeroutput> <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> instances to be filled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a8d5f111320945559a600f6dc9346bf62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d ComputePointInstanceUntransformedBound</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t instanceId)</argsstring>
        <name>ComputePointInstanceUntransformedBound</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>instanceId</declname>
        </param>
        <briefdescription>
<para>Computes the bound of the given point instances, but does not include the instancer&apos;s transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="310" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="310" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ab70e074f3d7d55cf5fc310bcfeb70214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears all pre-cached values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a25fc25d881cb6aea4f205c39bd3e77dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void SetIncludedPurposes</definition>
        <argsstring>(const TfTokenVector &amp;includedPurposes)</argsstring>
        <name>SetIncludedPurposes</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>includedPurposes</declname>
        </param>
        <briefdescription>
<para>Indicate the set of <computeroutput>includedPurposes</computeroutput> to use when resolving child bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>Each child&apos;s purpose must match one of the elements of this set to be included in the computation; if it does not, child is excluded.</para>
<para>Note the use of <emphasis>child</emphasis> in the docs above, purpose is ignored for the prim for whose bounds are directly queried.</para>
<para>Changing this value <bold>does not invalidate existing caches</bold>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ae353f68cff37702b35ccfdf053afadff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>const TfTokenVector&amp; GetIncludedPurposes</definition>
        <argsstring>()</argsstring>
        <name>GetIncludedPurposes</name>
        <briefdescription>
<para>Get the current set of included purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="335" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a10a8d1f3f0d230b972a48caa8275dd5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetUseExtentsHint</definition>
        <argsstring>() const</argsstring>
        <name>GetUseExtentsHint</name>
        <briefdescription>
<para>Returns whether authored extent hints are used to compute bounding boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="339" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a7edaca810c4225fdc2ce6c7d2fcea75f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetIgnoreVisibility</definition>
        <argsstring>() const</argsstring>
        <name>GetIgnoreVisibility</name>
        <briefdescription>
<para>Returns whether prim visibility should be ignored when computing bounding boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="345" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1aa80617459525313fbc669c6ba805ca10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void SetTime</definition>
        <argsstring>(UsdTimeCode time)</argsstring>
        <name>SetTime</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Use the new <computeroutput>time</computeroutput> when computing values and may clear any existing values cached for the previous time. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting <computeroutput>time</computeroutput> to the current time is a no-op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a5e60a2bd9743ad13c871505059053d68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
        <definition>UsdTimeCode GetTime</definition>
        <argsstring>() const</argsstring>
        <name>GetTime</name>
        <briefdescription>
<para>Get the current time from which this cache is reading values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="356" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a9b1620b41d410de73e345c68b15f16eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetBaseTime</definition>
        <argsstring>(UsdTimeCode baseTime)</argsstring>
        <name>SetBaseTime</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>baseTime</declname>
        </param>
        <briefdescription>
<para>Set the base time value for this bbox cache. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is used only when computing bboxes for point instancer instances (see <ref refid="class_usd_geom_b_box_cache_1a26c8e3842c2df60dc823983bc6442f10" kindref="member">ComputePointInstanceWorldBounds()</ref>, for example). See <ref refid="class_usd_geom_point_instancer_1a93d339584167e16e1f38aa2f9c95476c" kindref="member">UsdGeomPointInstancer::ComputeExtentAtTime()</ref> for more information. If unset, the bbox cache uses its time (<ref refid="class_usd_geom_b_box_cache_1a5e60a2bd9743ad13c871505059053d68" kindref="member">GetTime()</ref> / <ref refid="class_usd_geom_b_box_cache_1aa80617459525313fbc669c6ba805ca10" kindref="member">SetTime()</ref>) for this value.</para>
<para>Note that setting the base time does not invalidate any cache entries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="366" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a32085526cc1c5e6c84badc6f6cbd0ef0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
        <definition>UsdTimeCode GetBaseTime</definition>
        <argsstring>() const</argsstring>
        <name>GetBaseTime</name>
        <briefdescription>
<para>Return the base time if set, otherwise <ref refid="class_usd_geom_b_box_cache_1a5e60a2bd9743ad13c871505059053d68" kindref="member">GetTime()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="class_usd_geom_b_box_cache_1a81c3ad723ce3286da701700d8331e384" kindref="member">HasBaseTime()</ref> to observe if a base time has been set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="372" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a9a0e09d3d0d8271ce9a004adef566521" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ClearBaseTime</definition>
        <argsstring>()</argsstring>
        <name>ClearBaseTime</name>
        <briefdescription>
<para>Clear this cache&apos;s baseTime if one has been set. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, the cache will use its time as the baseTime value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="378" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a81c3ad723ce3286da701700d8331e384" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasBaseTime</definition>
        <argsstring>() const</argsstring>
        <name>HasBaseTime</name>
        <briefdescription>
<para>Return true if this cache has a baseTime that&apos;s been explicitly set, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="384" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="384" bodyend="386"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ad6276a0fba232201bde3d953379cdbab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TransformType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d _ComputeBoundWithOverridesHelper</definition>
        <argsstring>(const UsdPrim &amp;prim, const SdfPathSet &amp;pathsToSkip, const TransformType &amp;primOverride, const TfHashMap&lt; SdfPath, GfMatrix4d, SdfPath::Hash &gt; &amp;ctmOverrides)</argsstring>
        <name>_ComputeBoundWithOverridesHelper</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>pathsToSkip</declname>
        </param>
        <param>
          <type>const TransformType &amp;</type>
          <declname>primOverride</declname>
        </param>
        <param>
          <type>const TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>, SdfPath::Hash &gt; &amp;</type>
          <declname>ctmOverrides</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a58c01a5375473d71a4484dcb8b05bfa3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ComputePointInstanceBoundsHelper</definition>
        <argsstring>(const UsdGeomPointInstancer &amp;instancer, int64_t const *instanceIdBegin, size_t numIds, GfMatrix4d const &amp;xform, GfBBox3d *result)</argsstring>
        <name>_ComputePointInstanceBoundsHelper</name>
        <param>
          <type>const <ref refid="class_usd_geom_point_instancer" kindref="compound">UsdGeomPointInstancer</ref> &amp;</type>
          <declname>instancer</declname>
        </param>
        <param>
          <type>int64_t const *</type>
          <declname>instanceIdBegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numIds</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
          <declname>xform</declname>
        </param>
        <param>
          <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ad3f96c76efc2a32466c348e03819883c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ShouldIncludePrim</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>_ShouldIncludePrim</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a7d07dbb379e9c3fc46522894d0073649" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsVarying</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>_IsVarying</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a6d6b58b2ecce1710317186aed9d7c0bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsVarying</definition>
        <argsstring>(const UsdAttributeQuery &amp;query)</argsstring>
        <name>_IsVarying</name>
        <param>
          <type>const <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a555e3ea010da4e789f49b146bb0b240e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _Resolve</definition>
        <argsstring>(const UsdPrim &amp;prim, _PurposeToBBoxMap *bboxes)</argsstring>
        <name>_Resolve</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>_PurposeToBBoxMap *</type>
          <declname>bboxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ab9ebad0e84fe5db96e4fca5135a9b341" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ResolvePrim</definition>
        <argsstring>(_BBoxTask *task, const _PrimContext &amp;prim, const GfMatrix4d &amp;inverseComponentCtm)</argsstring>
        <name>_ResolvePrim</name>
        <param>
          <type>_BBoxTask *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>inverseComponentCtm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a8d89be35ec23b22a3e2fa22259c21dc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_Entry *</type>
        <definition>_Entry* _FindOrCreateEntriesForPrim</definition>
        <argsstring>(const _PrimContext &amp;prim, std::vector&lt; _PrimContext &gt; *prototypePrimContexts)</argsstring>
        <name>_FindOrCreateEntriesForPrim</name>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::vector&lt; _PrimContext &gt; *</type>
          <declname>prototypePrimContexts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ada51597af545a245953f46788b62fe1b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref></type>
        <definition>GfBBox3d _GetCombinedBBoxForIncludedPurposes</definition>
        <argsstring>(const _PurposeToBBoxMap &amp;bboxes)</argsstring>
        <name>_GetCombinedBBoxForIncludedPurposes</name>
        <param>
          <type>const _PurposeToBBoxMap &amp;</type>
          <declname>bboxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a45d7ef0bf24e320b1f1018f4ab6cfb8f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetBBoxFromExtentsHint</definition>
        <argsstring>(const UsdGeomModelAPI &amp;geomModel, const UsdAttributeQuery &amp;extentsHintQuery, _PurposeToBBoxMap *bboxes)</argsstring>
        <name>_GetBBoxFromExtentsHint</name>
        <param>
          <type>const <ref refid="class_usd_geom_model_a_p_i" kindref="compound">UsdGeomModelAPI</ref> &amp;</type>
          <declname>geomModel</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_attribute_query" kindref="compound">UsdAttributeQuery</ref> &amp;</type>
          <declname>extentsHintQuery</declname>
        </param>
        <param>
          <type>_PurposeToBBoxMap *</type>
          <declname>bboxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a665f649c235330705eb86d5123c2b5fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ShouldPruneChildren</definition>
        <argsstring>(const UsdPrim &amp;prim, _Entry *entry)</argsstring>
        <name>_ShouldPruneChildren</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>_Entry *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ac67644981380ae189a49004f90d7ea4d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>IsRecursive</declname>
            <defname>IsRecursive</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _ComputePurposeInfo</definition>
        <argsstring>(_Entry *entry, const _PrimContext &amp;prim)</argsstring>
        <name>_ComputePurposeInfo</name>
        <param>
          <type>_Entry *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1afd0fe6a77ce30ce3ea7d6880e871fb6c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _UseExtentsHintForPrim</definition>
        <argsstring>(UsdPrim const &amp;prim) const</argsstring>
        <name>_UseExtentsHintForPrim</name>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1ab579edc1a56e7828837c9ea97b028601" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Entry *</type>
        <definition>_Entry* _FindEntry</definition>
        <argsstring>(const _PrimContext &amp;primContext)</argsstring>
        <name>_FindEntry</name>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>primContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="559" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="559" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_b_box_cache_1a1061bfaf5d08ab5e51119a8a3547b1e6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Entry *</type>
        <definition>_Entry* _InsertEntry</definition>
        <argsstring>(const _PrimContext &amp;primContext)</argsstring>
        <name>_InsertEntry</name>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>primContext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="566" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="566" bodyend="569"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_b_box_cache_1abe4805f0bc22342fdb96b56153c76eba" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const _PrimContext &amp;key)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="546" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="546" bodyend="550"/>
      </memberdef>
      <memberdef kind="friend" id="class_usd_geom_b_box_cache_1ac6c968624b4b4717836eccbeb8931799" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const _PrimContext &amp;key)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const _PrimContext &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/bboxCache.h" line="553" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="553" bodyend="553"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Caches bounds by recursively computing and aggregating bounds of children in world space and aggregating the result back into local space. </para>
    </briefdescription>
    <detaileddescription>
<para>The cache is configured for a specific time and <ref refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" kindref="member">UsdGeomImageable::GetPurposeAttr()</ref> set of purposes. When querying a bound, transforms and extents are read either from the time specified or <ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default()</ref>, following <ref refid="_usd__page__properties_of_scene_description_1Usd_ValueResolution" kindref="member">TimeSamples, Defaults, and Value Resolution</ref> standard time-sample value resolution. As noted in <ref refid="class_usd_geom_b_box_cache_1a25fc25d881cb6aea4f205c39bd3e77dc" kindref="member">SetIncludedPurposes()</ref>, changing the included purposes does not invalidate the cache, because we cache purpose along with the geometric data.</para>
<para>Child prims that are invisible at the requested time are excluded when computing a prim&apos;s bounds. However, if a bound is requested directly for an excluded prim, it will be computed. Additionally, only prims deriving from <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> are included in child bounds computations.</para>
<para>Unlike standard <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> traversals, the traversal performed by the <ref refid="class_usd_geom_b_box_cache" kindref="compound">UsdGeomBBoxCache</ref> includes prims that are unloaded (see <ref refid="class_usd_prim_1a68da43ab74366f539af8c1e6fc018d29" kindref="member">UsdPrim::IsLoaded()</ref>). This makes it possible to fetch bounds for a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> that has been opened without <emphasis>forcePopulate</emphasis> , provided the unloaded model prims have authored extent hints (see <ref refid="class_usd_geom_model_a_p_i_1a4aa8b1f29a3097fe08da868bd2b8b259" kindref="member">UsdGeomModelAPI::GetExtentsHint()</ref>).</para>
<para>This class is optimized for computing tight <bold>untransformed &quot;object&quot; space</bold> bounds for component-models. In the absence of component models, bounds are optimized for world-space, since there is no other easily identifiable space for which to optimize, and we cannot optimize for every prim&apos;s local space without performing quadratic work.</para>
<para>The <ref refid="class_tf_debug" kindref="compound">TfDebug</ref> flag, USDGEOM_BBOX, is provided for debugging.</para>
<para>Warnings:<itemizedlist>
<listitem><para>This class should only be used with valid <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> objects.</para>
</listitem><listitem><para>This cache does not listen for change notifications; the user is responsible for clearing the cache when changes occur.</para>
</listitem><listitem><para>Thread safety: instances of this class may not be used concurrently.</para>
</listitem><listitem><para>Plugins may be loaded in order to compute extents for prim types provided by that plugin. See <ref refid="class_usd_geom_boundable_1a413c9eb5b4e1d8fddd627cf33ed4a106" kindref="member">UsdGeomBoundable::ComputeExtentFromPlugins</ref> </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="pxr/usd/usdGeom/bboxCache.h" line="88" column="1" bodyfile="pxr/usd/usdGeom/bboxCache.h" bodystart="87" bodyend="579"/>
    <listofallmembers>
      <member refid="class_usd_geom_b_box_cache_1a414f060df2366c47d7cc8038bcf0f92d" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_baseTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1a540e48c6b3b9c4e5317b96283db1c7ac" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_bboxCache</name></member>
      <member refid="class_usd_geom_b_box_cache_1ad6276a0fba232201bde3d953379cdbab" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ComputeBoundWithOverridesHelper</name></member>
      <member refid="class_usd_geom_b_box_cache_1a58c01a5375473d71a4484dcb8b05bfa3" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ComputePointInstanceBoundsHelper</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac67644981380ae189a49004f90d7ea4d" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_b_box_cache_1a30a0bc7c01a04a19fdf2cc801c3a80bd" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ctmCache</name></member>
      <member refid="class_usd_geom_b_box_cache_1a1fcc886eb2c46aff2e2816eb7601935b" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_dispatcher</name></member>
      <member refid="class_usd_geom_b_box_cache_1ab579edc1a56e7828837c9ea97b028601" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_FindEntry</name></member>
      <member refid="class_usd_geom_b_box_cache_1a8d89be35ec23b22a3e2fa22259c21dc1" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_FindOrCreateEntriesForPrim</name></member>
      <member refid="class_usd_geom_b_box_cache_1a45d7ef0bf24e320b1f1018f4ab6cfb8f" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_GetBBoxFromExtentsHint</name></member>
      <member refid="class_usd_geom_b_box_cache_1ada51597af545a245953f46788b62fe1b" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_GetCombinedBBoxForIncludedPurposes</name></member>
      <member refid="class_usd_geom_b_box_cache_1ad41feefc01510173b4bb6d0a791d6ca7" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ignoreVisibility</name></member>
      <member refid="class_usd_geom_b_box_cache_1af6af33186a80307fb992eb47d92f6b14" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_includedPurposes</name></member>
      <member refid="class_usd_geom_b_box_cache_1a1061bfaf5d08ab5e51119a8a3547b1e6" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_InsertEntry</name></member>
      <member refid="class_usd_geom_b_box_cache_1a7d07dbb379e9c3fc46522894d0073649" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_IsVarying</name></member>
      <member refid="class_usd_geom_b_box_cache_1a6d6b58b2ecce1710317186aed9d7c0bc" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_IsVarying</name></member>
      <member refid="class_usd_geom_b_box_cache_1a7c3fa8ba08e7288829f0c684c68cff02" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_PrimBBoxHashMap</name></member>
      <member refid="class_usd_geom_b_box_cache_1a4bb451d9896273ba835c4c9f155fed6a" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_PrimContextHash</name></member>
      <member refid="class_usd_geom_b_box_cache_1a6f9026d826c5b2630f736916759f2198" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_PurposeToBBoxMap</name></member>
      <member refid="class_usd_geom_b_box_cache_1a555e3ea010da4e789f49b146bb0b240e" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_Resolve</name></member>
      <member refid="class_usd_geom_b_box_cache_1ab9ebad0e84fe5db96e4fca5135a9b341" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ResolvePrim</name></member>
      <member refid="class_usd_geom_b_box_cache_1ad3f96c76efc2a32466c348e03819883c" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ShouldIncludePrim</name></member>
      <member refid="class_usd_geom_b_box_cache_1a665f649c235330705eb86d5123c2b5fc" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_ShouldPruneChildren</name></member>
      <member refid="class_usd_geom_b_box_cache_1a385fbaa7541cbfee86880f46c18e438a" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_time</name></member>
      <member refid="class_usd_geom_b_box_cache_1a83fc69c8b4e038e3c71df4f412fc58fc" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_useExtentsHint</name></member>
      <member refid="class_usd_geom_b_box_cache_1afd0fe6a77ce30ce3ea7d6880e871fb6c" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>_UseExtentsHintForPrim</name></member>
      <member refid="class_usd_geom_b_box_cache_1ab70e074f3d7d55cf5fc310bcfeb70214" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>Clear</name></member>
      <member refid="class_usd_geom_b_box_cache_1a9a0e09d3d0d8271ce9a004adef566521" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ClearBaseTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1aed7e2472ff7e460d5307d2f2fc5200e1" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1aee789f5500ce892f84edcaa9a0065462" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceLocalBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac880d992d88ab1ff25e4aca94dbb0d28" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceLocalBounds</name></member>
      <member refid="class_usd_geom_b_box_cache_1a849f43193b38b7c26cd9adee0decbb23" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceRelativeBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1a24e48e93edb29af13b149b9a6e415cc6" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceRelativeBounds</name></member>
      <member refid="class_usd_geom_b_box_cache_1a8d5f111320945559a600f6dc9346bf62" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceUntransformedBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1a85916e21a14197fb2c0541e85b2bdebf" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceUntransformedBounds</name></member>
      <member refid="class_usd_geom_b_box_cache_1a09be1bec1c2aad3d5afdc641081ad9bc" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceWorldBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1a26c8e3842c2df60dc823983bc6442f10" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputePointInstanceWorldBounds</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac4c8d23d02162fd864acc12779327108" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeRelativeBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1ad83e536dfdafb804039f3347f08feeb8" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac316c143df0779d60bbfbec93fc092aa" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1abe6c2675b406a1081801d72b8e849b4d" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac342f5ea36969d77a53f240e68f8694c" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>ComputeWorldBoundWithOverrides</name></member>
      <member refid="class_usd_geom_b_box_cache_1a32085526cc1c5e6c84badc6f6cbd0ef0" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>GetBaseTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1a7edaca810c4225fdc2ce6c7d2fcea75f" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>GetIgnoreVisibility</name></member>
      <member refid="class_usd_geom_b_box_cache_1ae353f68cff37702b35ccfdf053afadff" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>GetIncludedPurposes</name></member>
      <member refid="class_usd_geom_b_box_cache_1a5e60a2bd9743ad13c871505059053d68" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>GetTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1a10a8d1f3f0d230b972a48caa8275dd5e" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>GetUseExtentsHint</name></member>
      <member refid="class_usd_geom_b_box_cache_1a81c3ad723ce3286da701700d8331e384" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>HasBaseTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1ac6c968624b4b4717836eccbeb8931799" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>hash_value</name></member>
      <member refid="class_usd_geom_b_box_cache_1a5adda0e988bb28b6d052281c29315af0" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>operator=</name></member>
      <member refid="class_usd_geom_b_box_cache_1a9b1620b41d410de73e345c68b15f16eb" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>SetBaseTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1a25fc25d881cb6aea4f205c39bd3e77dc" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>SetIncludedPurposes</name></member>
      <member refid="class_usd_geom_b_box_cache_1aa80617459525313fbc669c6ba805ca10" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>SetTime</name></member>
      <member refid="class_usd_geom_b_box_cache_1abe4805f0bc22342fdb96b56153c76eba" prot="private" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>TfHashAppend</name></member>
      <member refid="class_usd_geom_b_box_cache_1ad4dbc60e68f738ff79c437fec435322d" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>UsdGeomBBoxCache</name></member>
      <member refid="class_usd_geom_b_box_cache_1aefabd9bd6807729218c25b067bb59f1c" prot="public" virt="non-virtual"><scope>UsdGeomBBoxCache</scope><name>UsdGeomBBoxCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
