<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_stacked" kind="class" language="C++" prot="public">
    <compoundname>TfStacked</compoundname>
    <includes refid="stacked_8h" local="no">stacked.h</includes>
    <templateparamlist>
      <param>
        <type>class Derived</type>
      </param>
      <param>
        <type>bool</type>
        <declname>PerThread</declname>
        <defname>PerThread</defname>
        <defval>true</defval>
      </param>
      <param>
        <type>class Holder</type>
        <defval>Tf_StackedStorage&lt;Derived, PerThread&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_stacked_1a29488ad6a947c2b5fce0c13e31ad2b24" prot="private" static="no">
        <type>Holder::Type</type>
        <definition>typedef Holder::Type _StorageType</definition>
        <argsstring></argsstring>
        <name>_StorageType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="140" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_stacked_1a28e093845b607a5e9e51134c183a7443" prot="public" static="no">
        <type>Holder</type>
        <definition>typedef Holder Storage</definition>
        <argsstring></argsstring>
        <name>Storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="142" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_stacked_1a45d332e5a1146af9756da4d7bf14d391" prot="public" static="no">
        <type>Storage::Stack</type>
        <definition>typedef Storage::Stack Stack</definition>
        <argsstring></argsstring>
        <name>Stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="143" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_stacked_1a8f0238efa7fc5a94fdd0715afc91b3f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfStackedAccess</definition>
        <argsstring></argsstring>
        <name>TfStackedAccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="186" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_stacked_1a78310156fb77cf19283d6fd8f0c9cc6f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfStacked</definition>
        <argsstring>(TfStacked const &amp;)=delete</argsstring>
        <name>TfStacked</name>
        <param>
          <type><ref refid="class_tf_stacked" kindref="compound">TfStacked</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a343125b3b628b326418f316a2e09002b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_stacked" kindref="compound">TfStacked</ref> &amp;</type>
        <definition>TfStacked&amp; operator=</definition>
        <argsstring>(TfStacked const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_stacked" kindref="compound">TfStacked</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a620199be067bc3b47042181b4eed6392" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived *</type>
        <definition>Derived* _AsDerived</definition>
        <argsstring>()</argsstring>
        <name>_AsDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="227" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a3e392d9e3cda8ac5407818e19a0eaa02" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived const  *</type>
        <definition>Derived const* _AsDerived</definition>
        <argsstring>() const</argsstring>
        <name>_AsDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="231" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="231" bodyend="233"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_stacked_1a9ba043b1f8944b00153a998e634f20f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfStacked</definition>
        <argsstring>()</argsstring>
        <name>TfStacked</name>
        <briefdescription>
<para>Pushes this stacked object onto the stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="146" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a09878546b326e6e73d3071cd0885dbf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~TfStacked</definition>
        <argsstring>()</argsstring>
        <name>~TfStacked</name>
        <briefdescription>
<para>Pops this stacked object from the stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="151" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="151" bodyend="153"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_tf_stacked_1acf4fff12f58638c000ddbb5b24479f5d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived const  *</type>
        <definition>static Derived const* GetStackTop</definition>
        <argsstring>()</argsstring>
        <name>GetStackTop</name>
        <briefdescription>
<para>Returns the top of the stack. </para>
        </briefdescription>
        <detaileddescription>
<para>If the stack is empty, returns 0. Derived classes can befriend <ref refid="class_tf_stacked_access" kindref="compound">TfStackedAccess</ref> and hide (override) <emphasis>_InitializeStack()</emphasis> to pre-populate the stack if desired. This way, a stack can be made never to be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="159" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a93d9e31a95e5cbe163e09d0e0b0c4669" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived const  *</type>
        <definition>static Derived const* GetStackPrevious</definition>
        <argsstring>()</argsstring>
        <name>GetStackPrevious</name>
        <briefdescription>
<para>Returns the element under the top of the stack. </para>
        </briefdescription>
        <detaileddescription>
<para>If the stack contains only one element, or is empty, returns 0. Derived classes can befriend <ref refid="class_tf_stacked_access" kindref="compound">TfStackedAccess</ref> and hide (override) <emphasis>_InitializeStack()</emphasis> to pre-populate the stack if desired. This way, a stack can be made never to be empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="169" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a849d1dae0b9e94cd7108702e10282282" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Stack const  &amp;</type>
        <definition>static Stack const&amp; GetStack</definition>
        <argsstring>()</argsstring>
        <name>GetStack</name>
        <briefdescription>
<para>Returns a const reference to the entire stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="176" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a2926e9f278549b8097657965ba8cc062" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsStackTop</definition>
        <argsstring>(Derived const *p)</argsstring>
        <name>IsStackTop</name>
        <param>
          <type>Derived const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if <emphasis>p</emphasis> is the top of the stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="181" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="181" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_stacked_1a3bc74ba61c4b4be36b7f0d020626f01a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _InitializeStack</definition>
        <argsstring>()</argsstring>
        <name>_InitializeStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="192" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a9fbdb0703979321c000fb2b9e6680cd1" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _Push</definition>
        <argsstring>(Derived const *p)</argsstring>
        <name>_Push</name>
        <param>
          <type>Derived const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="195" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a8bf85b8d2ccbc0487a4c553fbf9dba31" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _Pop</definition>
        <argsstring>(Derived const *p)</argsstring>
        <name>_Pop</name>
        <param>
          <type>Derived const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="200" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="200" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_stacked_1a0e7c2d25ca7f3e053b9a9d229340e162" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Stack &amp;</type>
        <definition>static Stack&amp; _GetStack</definition>
        <argsstring>()</argsstring>
        <name>_GetStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/stacked.h" line="212" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="212" bodyend="225"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="class_tf_stacked" kindref="compound">TfStacked</ref> is used where a class needs to keep a stack of the objects currently in existence. </para>
    </briefdescription>
    <detaileddescription>
<para>This class follows the CRTP and is a base class that is parameterized on its derived classes.</para>
<para><ref refid="class_tf_stacked" kindref="compound">TfStacked</ref> is thread-safe by default and each thread will get its own stack. This behavior may be disabled by passing <emphasis>false</emphasis> for the <emphasis>PerThread</emphasis> template parameter.</para>
<para>Derived classes must instantiate the stack themselves by putting</para>
<para>TF_INSTANTIATE_STACKED(YourStackedClass)</para>
<para>in a single .cpp file.</para>
<para>Note that <emphasis>Stacked</emphasis> objects that differ only by <emphasis>PerThread</emphasis> will not share stacks. </para>
    </detaileddescription>
    <location file="pxr/base/tf/stacked.h" line="137" column="1" bodyfile="pxr/base/tf/stacked.h" bodystart="137" bodyend="234"/>
    <listofallmembers>
      <member refid="class_tf_stacked_1a620199be067bc3b47042181b4eed6392" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_AsDerived</name></member>
      <member refid="class_tf_stacked_1a3e392d9e3cda8ac5407818e19a0eaa02" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_AsDerived</name></member>
      <member refid="class_tf_stacked_1a0e7c2d25ca7f3e053b9a9d229340e162" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_GetStack</name></member>
      <member refid="class_tf_stacked_1a3bc74ba61c4b4be36b7f0d020626f01a" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_InitializeStack</name></member>
      <member refid="class_tf_stacked_1a8bf85b8d2ccbc0487a4c553fbf9dba31" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_Pop</name></member>
      <member refid="class_tf_stacked_1a9fbdb0703979321c000fb2b9e6680cd1" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_Push</name></member>
      <member refid="class_tf_stacked_1a29488ad6a947c2b5fce0c13e31ad2b24" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>_StorageType</name></member>
      <member refid="class_tf_stacked_1a849d1dae0b9e94cd7108702e10282282" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>GetStack</name></member>
      <member refid="class_tf_stacked_1a93d9e31a95e5cbe163e09d0e0b0c4669" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>GetStackPrevious</name></member>
      <member refid="class_tf_stacked_1acf4fff12f58638c000ddbb5b24479f5d" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>GetStackTop</name></member>
      <member refid="class_tf_stacked_1a2926e9f278549b8097657965ba8cc062" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>IsStackTop</name></member>
      <member refid="class_tf_stacked_1a343125b3b628b326418f316a2e09002b" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>operator=</name></member>
      <member refid="class_tf_stacked_1a45d332e5a1146af9756da4d7bf14d391" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>Stack</name></member>
      <member refid="class_tf_stacked_1a28e093845b607a5e9e51134c183a7443" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>Storage</name></member>
      <member refid="class_tf_stacked_1a78310156fb77cf19283d6fd8f0c9cc6f" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>TfStacked</name></member>
      <member refid="class_tf_stacked_1a9ba043b1f8944b00153a998e634f20f3" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>TfStacked</name></member>
      <member refid="class_tf_stacked_1a8f0238efa7fc5a94fdd0715afc91b3f8" prot="private" virt="non-virtual"><scope>TfStacked</scope><name>TfStackedAccess</name></member>
      <member refid="class_tf_stacked_1a09878546b326e6e73d3071cd0885dbf0" prot="public" virt="non-virtual"><scope>TfStacked</scope><name>~TfStacked</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
