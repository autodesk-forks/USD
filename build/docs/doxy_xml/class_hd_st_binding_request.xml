<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_binding_request" kind="class" language="C++" prot="public">
    <compoundname>HdStBindingRequest</compoundname>
    <includes refid="imaging_2hd_st_2binding_8h" local="no">binding.h</includes>
      <sectiondef kind="user-defined">
      <header>Discriminators</header>
      <memberdef kind="function" id="class_hd_st_binding_request_1ac8a29cabfbb2889775d09e74f59db391" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsResource</definition>
        <argsstring>() const</argsstring>
        <name>IsResource</name>
        <briefdescription>
<para>Resource bingings have a single associated Hydra resource, but no buffer array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="202" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a53a55545a7e540ef5289e24b62c57a70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsBufferArray</definition>
        <argsstring>() const</argsstring>
        <name>IsBufferArray</name>
        <briefdescription>
<para>A buffer array binding has several buffers bundled together and each buffer will be bound individually and exposed as independent arrays in the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="209" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a94579f220aef29cabbb07365fcb42325" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInterleavedBufferArray</definition>
        <argsstring>() const</argsstring>
        <name>IsInterleavedBufferArray</name>
        <briefdescription>
<para>Like BufferArray binding requests, struct bindings have several buffers, however they must be allocated into a single resource and interleaved. </para>
        </briefdescription>
        <detaileddescription>
<para>This type of binding request is exposed in the shader an array of structs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="217" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a85e799a990b59dd38f79cd2021e6d9c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool isWritable</definition>
        <argsstring>() const</argsstring>
        <name>isWritable</name>
        <briefdescription>
<para>True when the resource is being bound so that it can be written to. </para>
        </briefdescription>
        <detaileddescription>
<para>This affects whether it will be declared &apos;const&apos; or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="223" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a4e3d8998fe6b17783979ebcce3361b30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsTypeless</definition>
        <argsstring>() const</argsstring>
        <name>IsTypeless</name>
        <briefdescription>
<para>This binding is typelss. </para>
        </briefdescription>
        <detaileddescription>
<para>CodeGen only allocate location and skip emitting declarations and accessors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="229" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="229" bodyend="231"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="class_hd_st_binding_request_1a7e0e19c72edf9def26749f35edf63ba2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const  &amp;</type>
        <definition>TfToken const&amp; GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the name of the binding point, if any; buffer arrays and structs need not be named. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="239" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1aa20387e141943b83c467d15eac869bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdStBinding::Type</type>
        <definition>HdStBinding::Type GetBindingType</definition>
        <argsstring>() const</argsstring>
        <name>GetBindingType</name>
        <briefdescription>
<para>Returns the <ref refid="class_hd_st_binding" kindref="compound">HdStBinding</ref> type of this request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="243" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a3388b50d7aff89e9034c16fb92584c0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdStBufferResourceSharedPtr const  &amp;</type>
        <definition>HdStBufferResourceSharedPtr const&amp; GetResource</definition>
        <argsstring>() const</argsstring>
        <name>GetResource</name>
        <briefdescription>
<para>Returns the single resource associated with this binding request or null when <ref refid="class_hd_st_binding_request_1ac8a29cabfbb2889775d09e74f59db391" kindref="member">IsResource()</ref> returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="248" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a4d1015b913f1e5190100d8c3f6da6639" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int GetByteOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetByteOffset</name>
        <briefdescription>
<para>Returns the resource or buffer array range offset, defaults to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="252" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1ac534f1d2cd20897c194ac0c7ebadd57f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdBufferArrayRangeSharedPtr const  &amp;</type>
        <definition>HdBufferArrayRangeSharedPtr const&amp; GetBar</definition>
        <argsstring>() const</argsstring>
        <name>GetBar</name>
        <briefdescription>
<para>Returns the buffer array range associated with this binding request or null when IsBufferArrqay() returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="263" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1ad5366883bd50e85bde97d0c84fd8e788" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HdType</type>
        <definition>HdType GetDataType</definition>
        <argsstring>() const</argsstring>
        <name>GetDataType</name>
        <briefdescription>
<para>Return the data type of this request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="268" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a649576f1eae8ae7cbf4d31226e84d9d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetArraySize</definition>
        <argsstring>() const</argsstring>
        <name>GetArraySize</name>
        <briefdescription>
<para>Array size if request is for an array of structs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="273" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a5ff95fa3cd4063780db7bc27a753a703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConcatenateNames</definition>
        <argsstring>() const</argsstring>
        <name>ConcatenateNames</name>
        <briefdescription>
<para>Returns whether the struct binding point and struct member names should be concatenated when codegen&apos;ing the accessor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="279" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="279" bodyend="281"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison</header>
      <memberdef kind="function" id="class_hd_st_binding_request_1a27caeaa4592a407ee1d286f1797200a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API bool</type>
        <definition>HDST_API bool operator==</definition>
        <argsstring>(HdStBindingRequest const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_hd_st_binding_request" kindref="compound">HdStBindingRequest</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1afad707d8f600ec665630c21e8e516128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API bool</type>
        <definition>HDST_API bool operator!=</definition>
        <argsstring>(HdStBindingRequest const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_hd_st_binding_request" kindref="compound">HdStBindingRequest</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="290" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hash</header>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a76002749e4d6ad891de1ae2ad339251b" prot="private" static="no" mutable="no">
        <type>HdStBinding::Type</type>
        <definition>HdStBinding::Type _bindingType</definition>
        <argsstring></argsstring>
        <name>_bindingType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="320" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a4f92cd3fee851136368303b8caf8ee2a" prot="private" static="no" mutable="no">
        <type>HdType</type>
        <definition>HdType _dataType</definition>
        <argsstring></argsstring>
        <name>_dataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="321" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a073299b165fbc77310a8ada4902f85f8" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="322" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a0958e5f5c070c2d8d8a7b474ab289d2b" prot="private" static="no" mutable="no">
        <type>HdStBufferResourceSharedPtr</type>
        <definition>HdStBufferResourceSharedPtr _resource</definition>
        <argsstring></argsstring>
        <name>_resource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="325" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1afb60480cf32d11d17e1d8b25f935cbdb" prot="private" static="no" mutable="no">
        <type>HdBufferArrayRangeSharedPtr</type>
        <definition>HdBufferArrayRangeSharedPtr _bar</definition>
        <argsstring></argsstring>
        <name>_bar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="328" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a78d419bf37a3d0cb9d421e88e2b2dcde" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isInterleaved</definition>
        <argsstring></argsstring>
        <name>_isInterleaved</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="329" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1ad70fdf7ae1e0052d3e5b08a338f2a45f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isWritable</definition>
        <argsstring></argsstring>
        <name>_isWritable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="331" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a78298368cd7a3bb4682b59b94f97f0e3" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _arraySize</definition>
        <argsstring></argsstring>
        <name>_arraySize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="333" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_binding_request_1a0a04648b13bf5ea26d439d66d3a6b5be" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _concatenateNames</definition>
        <argsstring></argsstring>
        <name>_concatenateNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="335" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1aa058e7a9d2d8f08f2decf56ed347becf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API size_t</type>
        <definition>HDST_API size_t ComputeHash</definition>
        <argsstring>() const</argsstring>
        <name>ComputeHash</name>
        <briefdescription>
<para>Returns the hash corresponding to this buffer request. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this hash captures the structural state of the request, not the contents. For example, buffer array versions/reallocations will not affect hash, but changing the BAR pointer will. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_hd_st_binding_request_1aea8bfc56a7aeb3475866423c84ae828b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, HdStBindingRequest const &amp;br)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="class_hd_st_binding_request" kindref="compound">HdStBindingRequest</ref> const &amp;</type>
          <declname>br</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="306" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="306" bodyend="311"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_binding_request_1a26739ad43ef434eb800b2691fc6fd12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStBindingRequest</definition>
        <argsstring>()=default</argsstring>
        <name>HdStBindingRequest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a141e50b522ee96af537a49df1441c4dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HdStBindingRequest</definition>
        <argsstring>(HdStBinding::Type bindingType, TfToken const &amp;name)</argsstring>
        <name>HdStBindingRequest</name>
        <param>
          <type>HdStBinding::Type</type>
          <declname>bindingType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>A data binding, not backed by neither BufferArrayRange nor BufferResource. </para>
        </briefdescription>
        <detaileddescription>
<para>This binding request simply generates named metadata (#define HD_HAS_foo 1, #define HD_foo_Binding) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="134" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1a5a2c950c4778ea81a5a5f7402a498cef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HdStBindingRequest</definition>
        <argsstring>(HdStBinding::Type bindingType, TfToken const &amp;name, HdType dataType)</argsstring>
        <name>HdStBindingRequest</name>
        <param>
          <type>HdStBinding::Type</type>
          <declname>bindingType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>HdType</type>
          <declname>dataType</declname>
        </param>
        <briefdescription>
<para>A data binding, not backed by neither BufferArrayRange nor BufferResource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="148" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="148" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1aa95c163d6427211790ac4db14582cc05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HdStBindingRequest</definition>
        <argsstring>(HdStBinding::Type bindingType, TfToken const &amp;name, HdStBufferResourceSharedPtr const &amp;resource)</argsstring>
        <name>HdStBindingRequest</name>
        <param>
          <type>HdStBinding::Type</type>
          <declname>bindingType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>HdStBufferResourceSharedPtr const &amp;</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
<para>A buffer resource binding. </para>
        </briefdescription>
        <detaileddescription>
<para>Binds a given buffer resource to a specified name. The data type is set from the resource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="163" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="163" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_binding_request_1aa4a32da5c4f876ac180cbc7247d8088b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HdStBindingRequest</definition>
        <argsstring>(HdStBinding::Type type, TfToken const &amp;name, HdBufferArrayRangeSharedPtr bar, bool interleave, bool writable=false, size_t arraySize=0, bool concatenateNames=false)</argsstring>
        <name>HdStBindingRequest</name>
        <param>
          <type>HdStBinding::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr</type>
          <declname>bar</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>interleave</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>writable</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>arraySize</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>concatenateNames</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>A named struct binding. </para>
        </briefdescription>
        <detaileddescription>
<para>From an interleaved BufferArray, an array of structs will be generated, consuming a single binding point. Note that all resources in the buffer array must have the same underlying identifier, hence must be interleaved and bindable as a single resource. Data types can be derived from each <ref refid="class_hd_st_buffer_resource" kindref="compound">HdStBufferResource</ref> of bar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/binding.h" line="181" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="181" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BindingRequest allows externally allocated buffers to be bound at render time. </para>
    </briefdescription>
    <detaileddescription>
<para>The different modes of binding discussed below allow the caller a range of opt-in binding behaviors, from simply reserving a binding location so it can be managed from client code, to fully generating buffer accessor code at compile time (i.e. when using a BufferArrayRange or BufferResource).</para>
<para>This is a &quot;request&quot; because the caller makes a request before bindings are resolved. All requests are consulted and fulfilled during binding resolution. </para>
    </detaileddescription>
    <location file="pxr/imaging/hdSt/binding.h" line="126" column="1" bodyfile="pxr/imaging/hdSt/binding.h" bodystart="126" bodyend="336"/>
    <listofallmembers>
      <member refid="class_hd_st_binding_request_1a78298368cd7a3bb4682b59b94f97f0e3" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_arraySize</name></member>
      <member refid="class_hd_st_binding_request_1afb60480cf32d11d17e1d8b25f935cbdb" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_bar</name></member>
      <member refid="class_hd_st_binding_request_1a76002749e4d6ad891de1ae2ad339251b" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_bindingType</name></member>
      <member refid="class_hd_st_binding_request_1a0a04648b13bf5ea26d439d66d3a6b5be" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_concatenateNames</name></member>
      <member refid="class_hd_st_binding_request_1a4f92cd3fee851136368303b8caf8ee2a" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_dataType</name></member>
      <member refid="class_hd_st_binding_request_1a78d419bf37a3d0cb9d421e88e2b2dcde" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_isInterleaved</name></member>
      <member refid="class_hd_st_binding_request_1ad70fdf7ae1e0052d3e5b08a338f2a45f" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_isWritable</name></member>
      <member refid="class_hd_st_binding_request_1a073299b165fbc77310a8ada4902f85f8" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_name</name></member>
      <member refid="class_hd_st_binding_request_1a0958e5f5c070c2d8d8a7b474ab289d2b" prot="private" virt="non-virtual"><scope>HdStBindingRequest</scope><name>_resource</name></member>
      <member refid="class_hd_st_binding_request_1aa058e7a9d2d8f08f2decf56ed347becf" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>ComputeHash</name></member>
      <member refid="class_hd_st_binding_request_1a5ff95fa3cd4063780db7bc27a753a703" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>ConcatenateNames</name></member>
      <member refid="class_hd_st_binding_request_1a649576f1eae8ae7cbf4d31226e84d9d1" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetArraySize</name></member>
      <member refid="class_hd_st_binding_request_1ac534f1d2cd20897c194ac0c7ebadd57f" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetBar</name></member>
      <member refid="class_hd_st_binding_request_1aa20387e141943b83c467d15eac869bba" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetBindingType</name></member>
      <member refid="class_hd_st_binding_request_1a4d1015b913f1e5190100d8c3f6da6639" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetByteOffset</name></member>
      <member refid="class_hd_st_binding_request_1ad5366883bd50e85bde97d0c84fd8e788" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetDataType</name></member>
      <member refid="class_hd_st_binding_request_1a7e0e19c72edf9def26749f35edf63ba2" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetName</name></member>
      <member refid="class_hd_st_binding_request_1a3388b50d7aff89e9034c16fb92584c0d" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>GetResource</name></member>
      <member refid="class_hd_st_binding_request_1a26739ad43ef434eb800b2691fc6fd12f" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>HdStBindingRequest</name></member>
      <member refid="class_hd_st_binding_request_1a141e50b522ee96af537a49df1441c4dc" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>HdStBindingRequest</name></member>
      <member refid="class_hd_st_binding_request_1a5a2c950c4778ea81a5a5f7402a498cef" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>HdStBindingRequest</name></member>
      <member refid="class_hd_st_binding_request_1aa95c163d6427211790ac4db14582cc05" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>HdStBindingRequest</name></member>
      <member refid="class_hd_st_binding_request_1aa4a32da5c4f876ac180cbc7247d8088b" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>HdStBindingRequest</name></member>
      <member refid="class_hd_st_binding_request_1a53a55545a7e540ef5289e24b62c57a70" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>IsBufferArray</name></member>
      <member refid="class_hd_st_binding_request_1a94579f220aef29cabbb07365fcb42325" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>IsInterleavedBufferArray</name></member>
      <member refid="class_hd_st_binding_request_1ac8a29cabfbb2889775d09e74f59db391" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>IsResource</name></member>
      <member refid="class_hd_st_binding_request_1a4e3d8998fe6b17783979ebcce3361b30" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>IsTypeless</name></member>
      <member refid="class_hd_st_binding_request_1a85e799a990b59dd38f79cd2021e6d9c4" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>isWritable</name></member>
      <member refid="class_hd_st_binding_request_1afad707d8f600ec665630c21e8e516128" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>operator!=</name></member>
      <member refid="class_hd_st_binding_request_1a27caeaa4592a407ee1d286f1797200a0" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>operator==</name></member>
      <member refid="class_hd_st_binding_request_1aea8bfc56a7aeb3475866423c84ae828b" prot="public" virt="non-virtual"><scope>HdStBindingRequest</scope><name>TfHashAppend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
