<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_property_iterator" kind="class" language="C++" prot="public">
    <compoundname>PcpPropertyIterator</compoundname>
    <includes refid="usd_2pcp_2iterator_8h" local="no">iterator.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_property_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="374" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_property_iterator_1af1b7144d23b77c48cf964ef6e6409aa7" prot="public" static="no">
        <type>const SdfPropertySpecHandle</type>
        <definition>using value_type =  const SdfPropertySpecHandle</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="375" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_property_iterator_1a9646a65a7d939594cf9dc25c87086138" prot="public" static="no">
        <type>const SdfPropertySpecHandle &amp;</type>
        <definition>using reference =  const SdfPropertySpecHandle&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="376" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_property_iterator_1a8c2a26a9262d60ace5ff0a94d65768fc" prot="public" static="no">
        <type>const SdfPropertySpecHandle *</type>
        <definition>using pointer =  const SdfPropertySpecHandle*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="377" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_property_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="378" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_property_iterator_1aa520166bfe37756d0684529fdcdd0f03" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_pcp_property_index" kindref="compound">PcpPropertyIndex</ref> *</type>
        <definition>const PcpPropertyIndex* _propertyIndex</definition>
        <argsstring></argsstring>
        <name>_propertyIndex</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="497" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_property_iterator_1a29da2ac74d983de0ddeb219cf0752f69" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _pos</definition>
        <argsstring></argsstring>
        <name>_pos</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="498" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_property_iterator_1a9707541f395a9bbe1cb0d5742fc9a8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPropertyIterator</definition>
        <argsstring>()</argsstring>
        <name>PcpPropertyIterator</name>
        <briefdescription>
<para>Constructs an invalid iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a8c560741364d6b027828e844fc35be5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpPropertyIterator</definition>
        <argsstring>(const PcpPropertyIndex &amp;index, size_t pos=0)</argsstring>
        <name>PcpPropertyIterator</name>
        <param>
          <type>const <ref refid="class_pcp_property_index" kindref="compound">PcpPropertyIndex</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructs a property iterator for <computeroutput>index</computeroutput> beginning at position <computeroutput>pos</computeroutput> in the property stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1af47d37f6e9dc3e0593994ff4274967c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetNode</definition>
        <argsstring>() const</argsstring>
        <name>GetNode</name>
        <briefdescription>
<para>Returns the PcpNode from which the current property originated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1ad2f9277f4655074b418d90fd84466e2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsLocal</definition>
        <argsstring>() const</argsstring>
        <name>IsLocal</name>
        <briefdescription>
<para>Returns true if the current property is local to the owning property index&apos;s layer stack, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="398" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="399" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="399" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference operator[]</definition>
        <argsstring>(const difference_type index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const difference_type</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="400" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="400" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a1ba08ea6986ba4624bd5eef4715c10e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type operator-</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="406" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a25862af54fb54a5fe96b4786ef44059c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
        <definition>PcpPropertyIterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="410" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="410" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a8c192253a5b1631ee660190386700a75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
        <definition>PcpPropertyIterator&amp; operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="415" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1afb73e1db321083d43f807569ee5f1be9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref></type>
        <definition>PcpPropertyIterator operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="420" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="420" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a263472cbcd7ea647b7245582ba508e86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref></type>
        <definition>PcpPropertyIterator operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="426" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="426" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1ab1c9cb621afb4b34face6dcfea666187" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref></type>
        <definition>PcpPropertyIterator operator+</definition>
        <argsstring>(const difference_type increment) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="432" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="432" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a6e2139d7e850b7d0248776f16f2615c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref></type>
        <definition>PcpPropertyIterator operator-</definition>
        <argsstring>(const difference_type decrement) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="438" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="438" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a8e8eff19cbcf4de84ba9bd73432484e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
        <definition>PcpPropertyIterator&amp; operator+=</definition>
        <argsstring>(const difference_type increment)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="444" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1af689325796d5d673b20d74e3adb84a1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
        <definition>PcpPropertyIterator&amp; operator-=</definition>
        <argsstring>(const difference_type decrement)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="449" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a5c4889cbd5bd68b2f86f85caa7c0f0db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="454" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1aec17a467a00aadb5ce866304dd3a9ab8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="458" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a82c463cf2c4e9bed8e93345599a1ac25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="462" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a0cee007859ba49fbec6a40fa751be039" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="467" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1aaef058bc812bc96411c3b5ed374caf5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="472" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1ac9593a7e81ff5b4f560a502fbb7191d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="477" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="477" bodyend="480"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_property_iterator_1adf65d7ed4832d910b7f592f264eb1b45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a529069fb78e22fe917d43eccb34dd905" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void decrement</definition>
        <argsstring>()</argsstring>
        <name>decrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1ad2db8112f76d83435bb1334f0a65b8d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void advance</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>advance</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a83ac90f6b037fcbc25029716fd8a191f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API difference_type</type>
        <definition>PCP_API difference_type distance_to</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>distance_to</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1ae01a62280885606ad081a0bf1177e8a8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool equal</definition>
        <argsstring>(const PcpPropertyIterator &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="class_pcp_property_iterator" kindref="compound">PcpPropertyIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_property_iterator_1a4444c62425ef0ab27245d7556234efc7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API reference</type>
        <definition>PCP_API reference dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="494" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object used to iterate over property specs in a property index in strong-to-weak order. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/pcp/iterator.h" line="372" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="371" bodyend="499"/>
    <listofallmembers>
      <member refid="class_pcp_property_iterator_1a29da2ac74d983de0ddeb219cf0752f69" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>_pos</name></member>
      <member refid="class_pcp_property_iterator_1aa520166bfe37756d0684529fdcdd0f03" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>_propertyIndex</name></member>
      <member refid="class_pcp_property_iterator_1ad2db8112f76d83435bb1334f0a65b8d0" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>advance</name></member>
      <member refid="class_pcp_property_iterator_1a529069fb78e22fe917d43eccb34dd905" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>decrement</name></member>
      <member refid="class_pcp_property_iterator_1a4444c62425ef0ab27245d7556234efc7" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>dereference</name></member>
      <member refid="class_pcp_property_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>difference_type</name></member>
      <member refid="class_pcp_property_iterator_1a83ac90f6b037fcbc25029716fd8a191f" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>distance_to</name></member>
      <member refid="class_pcp_property_iterator_1ae01a62280885606ad081a0bf1177e8a8" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>equal</name></member>
      <member refid="class_pcp_property_iterator_1af47d37f6e9dc3e0593994ff4274967c5" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>GetNode</name></member>
      <member refid="class_pcp_property_iterator_1adf65d7ed4832d910b7f592f264eb1b45" prot="private" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>increment</name></member>
      <member refid="class_pcp_property_iterator_1ad2f9277f4655074b418d90fd84466e2e" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>IsLocal</name></member>
      <member refid="class_pcp_property_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>iterator_category</name></member>
      <member refid="class_pcp_property_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator *</name></member>
      <member refid="class_pcp_property_iterator_1aec17a467a00aadb5ce866304dd3a9ab8" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator!=</name></member>
      <member refid="class_pcp_property_iterator_1ab1c9cb621afb4b34face6dcfea666187" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator+</name></member>
      <member refid="class_pcp_property_iterator_1a25862af54fb54a5fe96b4786ef44059c" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_property_iterator_1afb73e1db321083d43f807569ee5f1be9" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_property_iterator_1a8e8eff19cbcf4de84ba9bd73432484e5" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator+=</name></member>
      <member refid="class_pcp_property_iterator_1a1ba08ea6986ba4624bd5eef4715c10e0" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_property_iterator_1a6e2139d7e850b7d0248776f16f2615c9" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_property_iterator_1a8c192253a5b1631ee660190386700a75" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_property_iterator_1a263472cbcd7ea647b7245582ba508e86" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_property_iterator_1af689325796d5d673b20d74e3adb84a1c" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator-=</name></member>
      <member refid="class_pcp_property_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator-&gt;</name></member>
      <member refid="class_pcp_property_iterator_1a82c463cf2c4e9bed8e93345599a1ac25" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator&lt;</name></member>
      <member refid="class_pcp_property_iterator_1a0cee007859ba49fbec6a40fa751be039" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator&lt;=</name></member>
      <member refid="class_pcp_property_iterator_1a5c4889cbd5bd68b2f86f85caa7c0f0db" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator==</name></member>
      <member refid="class_pcp_property_iterator_1aaef058bc812bc96411c3b5ed374caf5c" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator&gt;</name></member>
      <member refid="class_pcp_property_iterator_1ac9593a7e81ff5b4f560a502fbb7191d6" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator&gt;=</name></member>
      <member refid="class_pcp_property_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>operator[]</name></member>
      <member refid="class_pcp_property_iterator_1a9707541f395a9bbe1cb0d5742fc9a8f6" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>PcpPropertyIterator</name></member>
      <member refid="class_pcp_property_iterator_1a8c560741364d6b027828e844fc35be5d" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>PcpPropertyIterator</name></member>
      <member refid="class_pcp_property_iterator_1a8c2a26a9262d60ace5ff0a94d65768fc" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>pointer</name></member>
      <member refid="class_pcp_property_iterator_1a9646a65a7d939594cf9dc25c87086138" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>reference</name></member>
      <member refid="class_pcp_property_iterator_1af1b7144d23b77c48cf964ef6e6409aa7" prot="public" virt="non-virtual"><scope>PcpPropertyIterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
