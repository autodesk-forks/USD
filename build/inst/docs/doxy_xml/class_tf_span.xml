<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_span" kind="class" language="C++" prot="public">
    <compoundname>TfSpan</compoundname>
    <includes refid="span_8h" local="no">span.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_span_1ab09edc4b568d547d04da66f947f5595a" prot="public" static="no">
        <type>T</type>
        <definition>using element_type =  T</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="90" column="1" bodyfile="pxr/base/tf/span.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1a65844e7781131b095d40606e19851e03" prot="public" static="no">
        <type>typename std::remove_cv&lt; T &gt;::type</type>
        <definition>using value_type =  typename std::remove_cv&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="91" column="1" bodyfile="pxr/base/tf/span.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1ab088798d28525c0befe3c707b95c5bc2" prot="public" static="no">
        <type>T *</type>
        <definition>using pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="92" column="1" bodyfile="pxr/base/tf/span.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1a0c5a1541ecf7ad17925583cf6abd2c65" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="93" column="1" bodyfile="pxr/base/tf/span.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1a0b015dc2eaeb183cb6c0d4d76ada4b5f" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using index_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="94" column="1" bodyfile="pxr/base/tf/span.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1ace405568d0b2f3fad4990044252c7732" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="95" column="1" bodyfile="pxr/base/tf/span.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1a4d1ca55c8c62d4fbf3ea42d9919125a0" prot="public" static="no">
        <type>T *</type>
        <definition>using iterator =  T*</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="97" column="1" bodyfile="pxr/base/tf/span.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1a2601f8255f8a42148603816eb649c961" prot="public" static="no">
        <type>const T *</type>
        <definition>using const_iterator =  const T*</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="98" column="1" bodyfile="pxr/base/tf/span.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1adb9a673a4271b497ef05158e05170942" prot="public" static="no">
        <type>std::reverse_iterator&lt; iterator &gt;</type>
        <definition>using reverse_iterator =  std::reverse_iterator&lt;iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="99" column="1" bodyfile="pxr/base/tf/span.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_span_1af0af7cd2cb131805b96d2b01cae24bf1" prot="public" static="no">
        <type>std::reverse_iterator&lt; const_iterator &gt;</type>
        <definition>using const_reverse_iterator =  std::reverse_iterator&lt;const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="100" column="1" bodyfile="pxr/base/tf/span.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_span_1acc99118b2e06d129313f8066dcd2c8f7" prot="private" static="no" mutable="no">
        <type>pointer</type>
        <definition>pointer _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="233" column="1" bodyfile="pxr/base/tf/span.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_span_1a21ee1c4a0d6479ea539f580a5db41ec2" prot="private" static="no" mutable="no">
        <type>index_type</type>
        <definition>index_type _size</definition>
        <argsstring></argsstring>
        <name>_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="234" column="1" bodyfile="pxr/base/tf/span.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_span_1a204603faeeddabd1040e6b4b04aeca95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfSpan</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>TfSpan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a61be49e39dc3b5e2a810bad2d686e706" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfSpan</definition>
        <argsstring>(pointer ptr, index_type count)</argsstring>
        <name>TfSpan</name>
        <param>
          <type>pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Construct a span over the range of [ptr, ptr+count). </para>
        </briefdescription>
        <detaileddescription>
<para>In debug builds, a runtime assertion will fail if <computeroutput>count</computeroutput> &gt; 0 and <computeroutput>ptr</computeroutput> is null. The behavior is otherwise undefined for invalid ranges. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="107" column="1" bodyfile="pxr/base/tf/span.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a08dad2f4072a072d53bf58ee7e028edf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfSpan</definition>
        <argsstring>(pointer first, pointer last)</argsstring>
        <name>TfSpan</name>
        <param>
          <type>pointer</type>
          <declname>first</declname>
        </param>
        <param>
          <type>pointer</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Construct a span over the range [first, last). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="114" column="1" bodyfile="pxr/base/tf/span.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1ad7b6b9333b53830bf8c72b342bc4c1f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfSpan</definition>
        <argsstring>(Container &amp;cont, typename std::enable_if&lt; !std::is_const&lt; element_type &gt;::value &amp;&amp;std::is_same&lt; typename Container::value_type, value_type &gt;::value, Container &gt;::type *=0)</argsstring>
        <name>TfSpan</name>
        <param>
          <type>Container &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !std::is_const&lt; element_type &gt;::value &amp;&amp;std::is_same&lt; typename Container::value_type, value_type &gt;::value, Container &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a span from a container. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting span has a range of [cont.data(), cont.data()+cont.size()) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="124" column="1" bodyfile="pxr/base/tf/span.h" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1ab9b75c50a56e177a10727f9d499ac9a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfSpan</definition>
        <argsstring>(const Container &amp;cont, typename std::enable_if&lt; std::is_same&lt; typename Container::value_type, value_type &gt;::value, Container &gt;::type *=0)</argsstring>
        <name>TfSpan</name>
        <param>
          <type>const Container &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; std::is_same&lt; typename Container::value_type, value_type &gt;::value, Container &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a span from a container. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting span has a range of [cont.data(), cont.data()+cont.size()) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="139" column="1" bodyfile="pxr/base/tf/span.h" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a pointer to the first element of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="150" column="1" bodyfile="pxr/base/tf/span.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a47a4860d237b73c9adccbfd472632628" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>index_type</type>
        <definition>index_type size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the total number of elements in the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="153" column="1" bodyfile="pxr/base/tf/span.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a3f6fc5de06a318920d84f3c3742db07f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if this span contains no elements, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="156" column="1" bodyfile="pxr/base/tf/span.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a823ddb49e012f71ce0ce6ca3a7828dd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference operator[]</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the <computeroutput>idx&apos;th</computeroutput> element of the span. </para>
        </briefdescription>
        <detaileddescription>
<para>In debug builds, a runtime assertion will fail if <computeroutput>idx</computeroutput> is out of range. The behavior is otherwise undefined if <computeroutput>idx</computeroutput> is out of range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="161" column="1" bodyfile="pxr/base/tf/span.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a0223179d7f3b9d4f4c047c503c9a721a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Return a reference to the first element in the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="167" column="1" bodyfile="pxr/base/tf/span.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a999fbf0a8f7c807328a6a5bb2f5ca552" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>Return a reference to the last element in the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="173" column="1" bodyfile="pxr/base/tf/span.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1af2229c0adf8aa5bf952a50217c59ed66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a non-const iterator the start of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="179" column="1" bodyfile="pxr/base/tf/span.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1abeb76f7f3414f270020e6f467586bd93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Returns a cons iterator to the start of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="182" column="1" bodyfile="pxr/base/tf/span.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1abae6cd3d55419f6d04ab0a16ebf5caa1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a non-const iterator to the end of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="185" column="1" bodyfile="pxr/base/tf/span.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a9859a454bb6f50c654e280274d6a9d13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Returns a const iterator to the end of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="188" column="1" bodyfile="pxr/base/tf/span.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a122996392ac4f40435c69f42fdd28053" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a non-const reverse iterator the start of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="191" column="1" bodyfile="pxr/base/tf/span.h" bodystart="191" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1abd227f43fec65b1bfeb96751b5eea9c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Returns a cons reverse iterator to the start of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="195" column="1" bodyfile="pxr/base/tf/span.h" bodystart="195" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a6cf910900736bb2fdf9664d99c5ef84d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns a non-const reverse iterator to the end of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="199" column="1" bodyfile="pxr/base/tf/span.h" bodystart="199" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1acbe115c4709d004c9899ef5855f96288" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Returns a const reverse iterator to the end of the span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="203" column="1" bodyfile="pxr/base/tf/span.h" bodystart="203" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a2faff393d2c0cb8dd9e1790361657f7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; T &gt;</type>
        <definition>TfSpan&lt;T&gt; subspan</definition>
        <argsstring>(difference_type offset, difference_type count=-1) const</argsstring>
        <name>subspan</name>
        <param>
          <type>difference_type</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>difference_type</type>
          <declname>count</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns a new span referencing a sub-range of this span. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>count</computeroutput> == -1 (or std::dynamic_extent in C++20), the new span has a range of [<ref refid="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" kindref="member">data()</ref>+offset, <ref refid="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" kindref="member">data()</ref>+<ref refid="class_tf_span_1a47a4860d237b73c9adccbfd472632628" kindref="member">size()</ref>). Otherwise, the new span has range [<ref refid="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" kindref="member">data()</ref>+offset, <ref refid="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" kindref="member">data()</ref>+offset+count). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="210" column="1" bodyfile="pxr/base/tf/span.h" bodystart="210" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1afba37fad0849e95836b08eca0f129a07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; T &gt;</type>
        <definition>TfSpan&lt;T&gt; first</definition>
        <argsstring>(size_t count) const</argsstring>
        <name>first</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Return a subspan consisting of the first <computeroutput>count</computeroutput> elements of this span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="222" column="1" bodyfile="pxr/base/tf/span.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_span_1a1d45b7beadfda854700ca66aad688bf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_span" kindref="compound">TfSpan</ref>&lt; T &gt;</type>
        <definition>TfSpan&lt;T&gt; last</definition>
        <argsstring>(size_t count) const</argsstring>
        <name>last</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Return a subspan consisting of the last <computeroutput>count</computeroutput> elements of this span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/span.h" line="227" column="1" bodyfile="pxr/base/tf/span.h" bodystart="227" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a range of contiguous elements. </para>
    </briefdescription>
    <detaileddescription>
<para>This simply pairs a pointer with a size, while adding a common array interface.</para>
<para>A span allows ranges of elements to be referenced in a container-neutral manner. While it is possible to achieve that effect by simply passing around raw pointers, a span has the advantage of carrying around additional size information, both enabling use of common array patterns, as well as providing sufficient information to perform boundary tests.</para>
<para>A <ref refid="class_tf_span" kindref="compound">TfSpan</ref> is implicitly convertible from common array types, as well as from other spans, but preserves const-ness:</para>
<para><programlisting><codeline><highlight class="normal">std::vector&lt;int&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">TfSpan&lt;int&gt;<sp/>span(data);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Okay</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">VtIntArray<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">TfSpan&lt;int&gt;<sp/>span<sp/>=<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Okay</highlight></codeline>
<codeline><highlight class="normal">TfSpan&lt;const<sp/>int&gt;<sp/>cspan<sp/>=<sp/>span;<sp/>//<sp/>Okay</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>std::vector&lt;int&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">TfSpan&lt;const<sp/>int&gt;<sp/>span<sp/>=<sp/>data;<sp/><sp/>//<sp/>Okay</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>std::vector&lt;int&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">TfSpan&lt;int&gt;<sp/>span<sp/>=<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error!<sp/>Discards<sp/>cv-qualifier.</highlight></codeline>
</programlisting></para>
<para>Helper methods TfMakeSpan and TfMakeConstSpan are also provided to enable auto-typing when constructing spans: <programlisting><codeline><highlight class="normal">VtIntArray<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>readOnlySpan<sp/>=<sp/>TfMakeConstSpan(data);<sp/>//<sp/>TfSpan&lt;const<sp/>int&gt;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>readWriteSpan<sp/>=<sp/>TfMakeSpan(data);<sp/>//<sp/>TfSpan&lt;int&gt;</highlight></codeline>
</programlisting></para>
<para>Spans do not own the data they reference. It is up to the user of the span to ensure that the underlying data is not destructed while the span is in use.</para>
<para>This is modelled after std::span (C++20), but does not currently include any specialization for static extents. </para>
    </detaileddescription>
    <location file="pxr/base/tf/span.h" line="88" column="1" bodyfile="pxr/base/tf/span.h" bodystart="87" bodyend="235"/>
    <listofallmembers>
      <member refid="class_tf_span_1acc99118b2e06d129313f8066dcd2c8f7" prot="private" virt="non-virtual"><scope>TfSpan</scope><name>_data</name></member>
      <member refid="class_tf_span_1a21ee1c4a0d6479ea539f580a5db41ec2" prot="private" virt="non-virtual"><scope>TfSpan</scope><name>_size</name></member>
      <member refid="class_tf_span_1a999fbf0a8f7c807328a6a5bb2f5ca552" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>back</name></member>
      <member refid="class_tf_span_1af2229c0adf8aa5bf952a50217c59ed66" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>begin</name></member>
      <member refid="class_tf_span_1abeb76f7f3414f270020e6f467586bd93" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>cbegin</name></member>
      <member refid="class_tf_span_1a9859a454bb6f50c654e280274d6a9d13" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>cend</name></member>
      <member refid="class_tf_span_1a2601f8255f8a42148603816eb649c961" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>const_iterator</name></member>
      <member refid="class_tf_span_1af0af7cd2cb131805b96d2b01cae24bf1" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>const_reverse_iterator</name></member>
      <member refid="class_tf_span_1abd227f43fec65b1bfeb96751b5eea9c4" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>crbegin</name></member>
      <member refid="class_tf_span_1acbe115c4709d004c9899ef5855f96288" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>crend</name></member>
      <member refid="class_tf_span_1aa01d1905341de7c0c8127de31a24cb3a" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>data</name></member>
      <member refid="class_tf_span_1ace405568d0b2f3fad4990044252c7732" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>difference_type</name></member>
      <member refid="class_tf_span_1ab09edc4b568d547d04da66f947f5595a" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>element_type</name></member>
      <member refid="class_tf_span_1a3f6fc5de06a318920d84f3c3742db07f" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>empty</name></member>
      <member refid="class_tf_span_1abae6cd3d55419f6d04ab0a16ebf5caa1" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>end</name></member>
      <member refid="class_tf_span_1afba37fad0849e95836b08eca0f129a07" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>first</name></member>
      <member refid="class_tf_span_1a0223179d7f3b9d4f4c047c503c9a721a" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>front</name></member>
      <member refid="class_tf_span_1a0b015dc2eaeb183cb6c0d4d76ada4b5f" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>index_type</name></member>
      <member refid="class_tf_span_1a4d1ca55c8c62d4fbf3ea42d9919125a0" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>iterator</name></member>
      <member refid="class_tf_span_1a1d45b7beadfda854700ca66aad688bf3" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>last</name></member>
      <member refid="class_tf_span_1a823ddb49e012f71ce0ce6ca3a7828dd8" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>operator[]</name></member>
      <member refid="class_tf_span_1ab088798d28525c0befe3c707b95c5bc2" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>pointer</name></member>
      <member refid="class_tf_span_1a122996392ac4f40435c69f42fdd28053" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>rbegin</name></member>
      <member refid="class_tf_span_1a0c5a1541ecf7ad17925583cf6abd2c65" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>reference</name></member>
      <member refid="class_tf_span_1a6cf910900736bb2fdf9664d99c5ef84d" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>rend</name></member>
      <member refid="class_tf_span_1adb9a673a4271b497ef05158e05170942" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>reverse_iterator</name></member>
      <member refid="class_tf_span_1a47a4860d237b73c9adccbfd472632628" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>size</name></member>
      <member refid="class_tf_span_1a2faff393d2c0cb8dd9e1790361657f7c" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>subspan</name></member>
      <member refid="class_tf_span_1a204603faeeddabd1040e6b4b04aeca95" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>TfSpan</name></member>
      <member refid="class_tf_span_1a61be49e39dc3b5e2a810bad2d686e706" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>TfSpan</name></member>
      <member refid="class_tf_span_1a08dad2f4072a072d53bf58ee7e028edf" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>TfSpan</name></member>
      <member refid="class_tf_span_1ad7b6b9333b53830bf8c72b342bc4c1f7" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>TfSpan</name></member>
      <member refid="class_tf_span_1ab9b75c50a56e177a10727f9d499ac9a9" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>TfSpan</name></member>
      <member refid="class_tf_span_1a65844e7781131b095d40606e19851e03" prot="public" virt="non-virtual"><scope>TfSpan</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
