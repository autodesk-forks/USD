<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_hd_tuple_type" kind="struct" language="C++" prot="public">
    <compoundname>HdTupleType</compoundname>
    <includes refid="imaging_2hd_2types_8h" local="no">types.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_hd_tuple_type_1acab88077925edb7a20af788dea18f177" prot="public" static="no" mutable="no">
        <type>HdType</type>
        <definition>HdType type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/types.h" line="359" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_hd_tuple_type_1a76d971a3c552bc58ba9f0d5fceae9806" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/types.h" line="360" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_hd_tuple_type_1ac7329aea6d40adc109903131a661b5fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(HdTupleType const &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/types.h" line="362" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_tuple_type_1a85fd5d066549a98e60e33cd10008d3d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(HdTupleType const &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/types.h" line="365" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="struct_hd_tuple_type_1a493e60f568835ed89d9fba8cde6bbc23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(HdTupleType const &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/types.h" line="368" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="368" bodyend="370"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref> represents zero, one, or more values of the same HdType. </para>
    </briefdescription>
    <detaileddescription>
<para>It can be used to represent fixed-size array types, as well as single values. See HdType for more discussion about arrays. </para>
    </detaileddescription>
    <location file="pxr/imaging/hd/types.h" line="358" column="1" bodyfile="pxr/imaging/hd/types.h" bodystart="358" bodyend="371"/>
    <listofallmembers>
      <member refid="struct_hd_tuple_type_1a76d971a3c552bc58ba9f0d5fceae9806" prot="public" virt="non-virtual"><scope>HdTupleType</scope><name>count</name></member>
      <member refid="struct_hd_tuple_type_1a493e60f568835ed89d9fba8cde6bbc23" prot="public" virt="non-virtual"><scope>HdTupleType</scope><name>operator!=</name></member>
      <member refid="struct_hd_tuple_type_1ac7329aea6d40adc109903131a661b5fc" prot="public" virt="non-virtual"><scope>HdTupleType</scope><name>operator&lt;</name></member>
      <member refid="struct_hd_tuple_type_1a85fd5d066549a98e60e33cd10008d3d0" prot="public" virt="non-virtual"><scope>HdTupleType</scope><name>operator==</name></member>
      <member refid="struct_hd_tuple_type_1acab88077925edb7a20af788dea18f177" prot="public" virt="non-virtual"><scope>HdTupleType</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
