<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_spec" kind="class" language="C++" prot="public">
    <compoundname>SdfSpec</compoundname>
    <derivedcompoundref refid="class_sdf_prim_spec" prot="public" virt="non-virtual">SdfPrimSpec</derivedcompoundref>
    <derivedcompoundref refid="class_sdf_property_spec" prot="public" virt="non-virtual">SdfPropertySpec</derivedcompoundref>
    <derivedcompoundref refid="class_sdf_variant_set_spec" prot="public" virt="non-virtual">SdfVariantSetSpec</derivedcompoundref>
    <derivedcompoundref refid="class_sdf_variant_spec" prot="public" virt="non-virtual">SdfVariantSpec</derivedcompoundref>
    <includes refid="sdf_2spec_8h" local="no">spec.h</includes>
      <sectiondef kind="user-defined">
      <header>SdSpec generic API</header>
      <memberdef kind="function" id="class_sdf_spec_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>SDF_API const SdfSchemaBase&amp; GetSchema</definition>
        <argsstring>() const</argsstring>
        <name>GetSchema</name>
        <briefdescription>
<para>Returns the <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> for the layer that owns this spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a5f9f08741402342a8edf57244fe8c738" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
        <definition>SDF_API SdfSpecType GetSpecType</definition>
        <argsstring>() const</argsstring>
        <name>GetSpecType</name>
        <briefdescription>
<para>Returns the SdfSpecType specifying the spec type this object represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a10e3f6a477185399b6d64d26a213f32a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsDormant</definition>
        <argsstring>() const</argsstring>
        <name>IsDormant</name>
        <briefdescription>
<para>Returns true if this object is invalid or expired. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a3fefae0b234ef14d141c83d6448f8656" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerHandle</type>
        <definition>SDF_API SdfLayerHandle GetLayer</definition>
        <argsstring>() const</argsstring>
        <name>GetLayer</name>
        <briefdescription>
<para>Returns the layer that this object belongs to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a58e8463c104969bf41bb7c79605d9532" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SDF_API SdfPath GetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the scene path of this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a794044e16b8357b4fd1cd87438ed361f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool PermissionToEdit</definition>
        <argsstring>() const</argsstring>
        <name>PermissionToEdit</name>
        <briefdescription>
<para>Returns whether this object&apos;s layer can be edited. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1af43fb14c1d6cec17f913c3846119f716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;TfToken&gt; ListInfoKeys</definition>
        <argsstring>() const</argsstring>
        <name>ListInfoKeys</name>
        <briefdescription>
<para>Returns the full list of info keys currently set on this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This does not include fields that represent names of children. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1ad2c2ea35643e325dacbc0bd8a3646b35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;TfToken&gt; GetMetaDataInfoKeys</definition>
        <argsstring>() const</argsstring>
        <name>GetMetaDataInfoKeys</name>
        <briefdescription>
<para>Returns the list of metadata info keys for this object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the complete list of keys, it is only those that should be considered to be metadata by inspectors or other presentation UI.</para>
<para>This is interim API which is likely to change. Only editors with an immediate specific need (like the Inspector) should use this API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a52b21d3d611186ff336ad54292b0301a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetMetaDataDisplayGroup</definition>
        <argsstring>(TfToken const &amp;key) const</argsstring>
        <name>GetMetaDataDisplayGroup</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns this metadata key&apos;s displayGroup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a623889e0a6c749418e10f23169f92c5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue GetInfo</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>GetInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Gets the value for the given metadata key. </para>
        </briefdescription>
        <detaileddescription>
<para>This is interim API which is likely to change. Only editors with an immediate specific need (like the Inspector) should use this API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1ac24a378f12ee3162c6f0173d001b11c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetInfo</definition>
        <argsstring>(const TfToken &amp;key, const VtValue &amp;value)</argsstring>
        <name>SetInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for the given metadata key. </para>
        </briefdescription>
        <detaileddescription>
<para>It is an error to pass a value that is not the correct type for that given key.</para>
<para>This is interim API which is likely to change. Only editors with an immediate specific need (like the Inspector) should use this API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a860957d1b7800d7e930b53fe5b19ba86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetInfoDictionaryValue</definition>
        <argsstring>(const TfToken &amp;dictionaryKey, const TfToken &amp;entryKey, const VtValue &amp;value)</argsstring>
        <name>SetInfoDictionaryValue</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>dictionaryKey</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>entryKey</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for <computeroutput>entryKey</computeroutput> to <computeroutput>value</computeroutput> within the dictionary with the given metadata key <computeroutput>dictionaryKey</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1afafc521cdaa2ed6513d41be2fa433993" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasInfo</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>HasInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns whether there is a setting for the scene spec info with the given key. </para>
        </briefdescription>
        <detaileddescription>
<para>When asked for a value for one of its scene spec info, a valid value will always be returned. But if this API returns <bold>false</bold> for a scene spec info, the value of that info will be the defined default value.</para>
<para>When dealing with a composedLayer, it is not necessary to worry about whether a scene spec info &quot;has a value&quot; because the composed layer will always have a valid value, even if it is the default.</para>
<para>A spec may or may not have an expressed value for some of its scene spec info.</para>
<para>This is interim API which is likely to change. Only editors with an immediate specific need (like the Inspector) should use this API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1ad5a0d94f0ac661acb29d7490eb15d6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearInfo</definition>
        <argsstring>(const TfToken &amp;key)</argsstring>
        <name>ClearInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Clears the value for scene spec info with the given <emphasis>key</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, <ref refid="class_sdf_spec_1afafc521cdaa2ed6513d41be2fa433993" kindref="member">HasInfo()</ref> will return <bold>false</bold>. To make <ref refid="class_sdf_spec_1afafc521cdaa2ed6513d41be2fa433993" kindref="member">HasInfo()</ref> return <bold>true</bold> just set a value for that scene spec info.</para>
<para>This is interim API which is likely to change. Only editors with an immediate specific need (like the Inspector) should use this API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a7761385927d3f2e1d80af674b32d3ebc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_type" kindref="compound">TfType</ref></type>
        <definition>SDF_API TfType GetTypeForInfo</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>GetTypeForInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns the data type for the info with the given <emphasis>key</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a1da119c3713ec401ca578a6faa6eac9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>SDF_API const VtValue&amp; GetFallbackForInfo</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>GetFallbackForInfo</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns the fallback for the info with the given <emphasis>key</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a38c4971735cfa7f91c1618d441622ccc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool WriteToStream</definition>
        <argsstring>(std::ostream &amp;, size_t indent=0) const</argsstring>
        <name>WriteToStream</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Writes this spec to the given stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a22b46c26c417cc6153e59cbe921d9ebd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsInert</definition>
        <argsstring>(bool ignoreChildren=false) const</argsstring>
        <name>IsInert</name>
        <param>
          <type>bool</type>
          <declname>ignoreChildren</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns whether this object has no significant data. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;Significant&quot; here means that the object contributes opinions to a scene. If this spec has any child scenegraph objects (e.g., prim or property spec), it will be considered significant even if those child objects are not. However, if <computeroutput>ignoreChildren</computeroutput> is <computeroutput>true</computeroutput>, these child objects will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="184" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Field-based Generic API</header>
      <memberdef kind="function" id="class_sdf_spec_1a7b34aca00921a15ba8d5ad48c4561e1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;TfToken&gt; ListFields</definition>
        <argsstring>() const</argsstring>
        <name>ListFields</name>
        <briefdescription>
<para>Returns all fields with values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a0eb9c97beea5e2f59323cbda9669d566" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasField</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>HasField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the spec has a non-empty value with field name <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a428b01e709e5bace4d3e7e23ad683d30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasField</definition>
        <argsstring>(const TfToken &amp;name, T *value) const</argsstring>
        <name>HasField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the object has a non-empty value with name <computeroutput>name</computeroutput> and type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If value ptr is provided, returns the value found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="204" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a2ba08d83b8a934187f2a792367066fa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue GetField</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns a field value by name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a07f67495ca10863568306887212430f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GetFieldAs</definition>
        <argsstring>(const TfToken &amp;name, const T &amp;defaultValue=T()) const</argsstring>
        <name>GetFieldAs</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>defaultValue</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Returns a field value by name. </para>
        </briefdescription>
        <detaileddescription>
<para>If the object is invalid, or the value doesn&apos;t exist, isn&apos;t set, or isn&apos;t of the given type then returns defaultValue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="222" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a5b619246ffb0f1c56631529fa65e0435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SetField</definition>
        <argsstring>(const TfToken &amp;name, const VtValue &amp;value)</argsstring>
        <name>SetField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a field value as a boxed <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a3fc0276ed2f39480d00a61b888bd8434" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SetField</definition>
        <argsstring>(const TfToken &amp;name, const T &amp;value)</argsstring>
        <name>SetField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a field value of type T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="236" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a51b947731f02f1359b9820d33aa9b8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ClearField</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>ClearField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Clears a field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="243" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison operators</header>
      <memberdef kind="function" id="class_sdf_spec_1a103a094590f42b07266c293b02ef099f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator==</definition>
        <argsstring>(const SdfSpec &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a48650684eb4cc0ef195716de825a0a58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool operator&lt;</definition>
        <argsstring>(const SdfSpec &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="251" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_spec_1a3bfd45b0cc936a5de1dcb6e9eb70d469" prot="private" static="no" mutable="no">
        <type>Sdf_IdentityRefPtr</type>
        <definition>Sdf_IdentityRefPtr _id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="268" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_spec_1a65c20be7c096b1aa61e32c0feb4b4bb1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SDF_DECLARE_BASE_SPEC</definition>
        <argsstring>(SdfSpec)</argsstring>
        <name>SDF_DECLARE_BASE_SPEC</name>
        <param>
          <type><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1a2c01aa2d72a195883d1ac9e6b586435e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool _HasField</definition>
        <argsstring>(const TfToken &amp;name, SdfAbstractDataValue *value) const</argsstring>
        <name>_HasField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="261" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_spec_1aa51d7b0726a78b7f679b5f22d68ef7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
        <definition>SDF_API SdfSpec&amp; operator=</definition>
        <argsstring>(const SdfSpec &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1acd7d1eec1135fa492866bd844b2694d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API ~SdfSpec</definition>
        <argsstring>()</argsstring>
        <name>~SdfSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_spec_1a202e6d033a84cb0d642c929ff44ef1c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const SdfSpec &amp;x)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="257" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="272" bodyend="274"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_spec_1aeff28b3237b8bdc8278510dfa4b354ee" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _MoveSpec</definition>
        <argsstring>(const SdfPath &amp;oldPath, const SdfPath &amp;newPath) const</argsstring>
        <name>_MoveSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_spec_1ab3d82252ced8ce99c5118e47df91751e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _DeleteSpec</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>_DeleteSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/spec.h" line="265" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all Sdf spec classes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5211">
        <label>SdfRelationshipSpec</label>
        <link refid="class_sdf_relationship_spec"/>
        <childnode refid="5209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5207">
        <label>SdfSpec</label>
        <link refid="class_sdf_spec"/>
      </node>
      <node id="5209">
        <label>SdfPropertySpec</label>
        <link refid="class_sdf_property_spec"/>
        <childnode refid="5207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5212">
        <label>SdfVariantSetSpec</label>
        <link refid="class_sdf_variant_set_spec"/>
        <childnode refid="5207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5210">
        <label>SdfAttributeSpec</label>
        <link refid="class_sdf_attribute_spec"/>
        <childnode refid="5209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5213">
        <label>SdfVariantSpec</label>
        <link refid="class_sdf_variant_spec"/>
        <childnode refid="5207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5208">
        <label>SdfPrimSpec</label>
        <link refid="class_sdf_prim_spec"/>
        <childnode refid="5207" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/usd/sdf/spec.h" line="50" column="1" bodyfile="pxr/usd/sdf/spec.h" bodystart="49" bodyend="269"/>
    <listofallmembers>
      <member refid="class_sdf_spec_1ab3d82252ced8ce99c5118e47df91751e" prot="protected" virt="non-virtual"><scope>SdfSpec</scope><name>_DeleteSpec</name></member>
      <member refid="class_sdf_spec_1a2c01aa2d72a195883d1ac9e6b586435e" prot="private" virt="non-virtual"><scope>SdfSpec</scope><name>_HasField</name></member>
      <member refid="class_sdf_spec_1a3bfd45b0cc936a5de1dcb6e9eb70d469" prot="private" virt="non-virtual"><scope>SdfSpec</scope><name>_id</name></member>
      <member refid="class_sdf_spec_1aeff28b3237b8bdc8278510dfa4b354ee" prot="protected" virt="non-virtual"><scope>SdfSpec</scope><name>_MoveSpec</name></member>
      <member refid="class_sdf_spec_1a51b947731f02f1359b9820d33aa9b8d0" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>ClearField</name></member>
      <member refid="class_sdf_spec_1ad5a0d94f0ac661acb29d7490eb15d6d6" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>ClearInfo</name></member>
      <member refid="class_sdf_spec_1a1da119c3713ec401ca578a6faa6eac9a" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetFallbackForInfo</name></member>
      <member refid="class_sdf_spec_1a2ba08d83b8a934187f2a792367066fa6" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetField</name></member>
      <member refid="class_sdf_spec_1a07f67495ca10863568306887212430f9" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetFieldAs</name></member>
      <member refid="class_sdf_spec_1a623889e0a6c749418e10f23169f92c5b" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetInfo</name></member>
      <member refid="class_sdf_spec_1a3fefae0b234ef14d141c83d6448f8656" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetLayer</name></member>
      <member refid="class_sdf_spec_1a52b21d3d611186ff336ad54292b0301a" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetMetaDataDisplayGroup</name></member>
      <member refid="class_sdf_spec_1ad2c2ea35643e325dacbc0bd8a3646b35" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetMetaDataInfoKeys</name></member>
      <member refid="class_sdf_spec_1a58e8463c104969bf41bb7c79605d9532" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetPath</name></member>
      <member refid="class_sdf_spec_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetSchema</name></member>
      <member refid="class_sdf_spec_1a5f9f08741402342a8edf57244fe8c738" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetSpecType</name></member>
      <member refid="class_sdf_spec_1a7761385927d3f2e1d80af674b32d3ebc" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>GetTypeForInfo</name></member>
      <member refid="class_sdf_spec_1a0eb9c97beea5e2f59323cbda9669d566" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>HasField</name></member>
      <member refid="class_sdf_spec_1a428b01e709e5bace4d3e7e23ad683d30" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>HasField</name></member>
      <member refid="class_sdf_spec_1afafc521cdaa2ed6513d41be2fa433993" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>HasInfo</name></member>
      <member refid="class_sdf_spec_1a10e3f6a477185399b6d64d26a213f32a" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>IsDormant</name></member>
      <member refid="class_sdf_spec_1a22b46c26c417cc6153e59cbe921d9ebd" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>IsInert</name></member>
      <member refid="class_sdf_spec_1a7b34aca00921a15ba8d5ad48c4561e1c" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>ListFields</name></member>
      <member refid="class_sdf_spec_1af43fb14c1d6cec17f913c3846119f716" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>ListInfoKeys</name></member>
      <member refid="class_sdf_spec_1a48650684eb4cc0ef195716de825a0a58" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_spec_1aa51d7b0726a78b7f679b5f22d68ef7df" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>operator=</name></member>
      <member refid="class_sdf_spec_1a103a094590f42b07266c293b02ef099f" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>operator==</name></member>
      <member refid="class_sdf_spec_1a794044e16b8357b4fd1cd87438ed361f" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>PermissionToEdit</name></member>
      <member refid="class_sdf_spec_1a65c20be7c096b1aa61e32c0feb4b4bb1" prot="private" virt="non-virtual"><scope>SdfSpec</scope><name>SDF_DECLARE_BASE_SPEC</name></member>
      <member refid="class_sdf_spec_1a5b619246ffb0f1c56631529fa65e0435" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>SetField</name></member>
      <member refid="class_sdf_spec_1a3fc0276ed2f39480d00a61b888bd8434" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>SetField</name></member>
      <member refid="class_sdf_spec_1ac24a378f12ee3162c6f0173d001b11c0" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>SetInfo</name></member>
      <member refid="class_sdf_spec_1a860957d1b7800d7e930b53fe5b19ba86" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>SetInfoDictionaryValue</name></member>
      <member refid="class_sdf_spec_1a202e6d033a84cb0d642c929ff44ef1c1" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>TfHashAppend</name></member>
      <member refid="class_sdf_spec_1a38c4971735cfa7f91c1618d441622ccc" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>WriteToStream</name></member>
      <member refid="class_sdf_spec_1acd7d1eec1135fa492866bd844b2694d6" prot="public" virt="non-virtual"><scope>SdfSpec</scope><name>~SdfSpec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
