<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_primvars_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomPrimvarsAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="primvars_a_p_i_8h" local="no">primvarsAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_primvars_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741ad802a365d69ea33e7b2921b9c4f58ba4" kindref="member">UsdSchemaKind::NonAppliedAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="88" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_primvars_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="141" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1ae1f859bd4810b8a11817840c2c0af5f1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomPrimvarsAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomPrimvarsAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_primvars_a_p_i_1a9037a9eaeedc33287fca60b50de544e7" kindref="member">UsdGeomPrimvarsAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="94" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1abcc2ab1157e631046af6967af9c7112d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomPrimvarsAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomPrimvarsAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="102" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a49bfa477f4822edca31f21d15c35bd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomPrimvarsAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomPrimvarsAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>USDGEOM_API UsdGeomPrimvar CreatePrimvar</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName, const TfToken &amp;interpolation=TfToken(), int elementSize=-1) const</argsstring>
        <name>CreatePrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>interpolation</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Author scene description to create an attribute on this prim that will be recognized as Primvar (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>will present as a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>).</para>
<para>The name of the created attribute may or may not be the specified <computeroutput>name</computeroutput>, due to the possible need to apply property namespacing for primvars. See <ref refid="class_usd_geom_primvar_1Usd_Creating_and_Accessing_Primvars" kindref="member">Creating and Accessing Primvars</ref> for more information. Creation may fail and return an invalid Primvar if <computeroutput>name</computeroutput> contains a reserved keyword, such as the &quot;indices&quot; suffix we use for indexed primvars.</para>
<para>The behavior with respect to the provided <computeroutput>typeName</computeroutput> is the same as for UsdAttributes::Create(), and <computeroutput>interpolation</computeroutput> and <computeroutput>elementSize</computeroutput> are as described in <ref refid="class_usd_geom_primvar_1ac162e5f39dca188e6d7f5244ccb1e39b" kindref="member">UsdGeomPrimvar::GetInterpolation()</ref> and <ref refid="class_usd_geom_primvar_1a711c3088ebca00ca75308485151c8590" kindref="member">UsdGeomPrimvar::GetElementSize()</ref>.</para>
<para>If <computeroutput>interpolation</computeroutput> and/or <computeroutput>elementSize</computeroutput> are left unspecified, we will author no opinions for them, which means any (strongest) opinion already authored in any contributing layer for these fields will become the Primvar&apos;s values, or the fallbacks if no opinions have been authored.</para>
<para><simplesect kind="return"><para>an invalid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> if we failed to create a valid attribute, a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> otherwise. It is not an error to create over an existing, compatible attribute.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">UsdPrim::CreateAttribute()</ref>, <ref refid="class_usd_geom_primvar_1a42d797fc438a7fa52875d2c7db006cd4" kindref="member">UsdGeomPrimvar::IsPrimvar()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1aedcab17785ff140d9c56911ad8057eb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>UsdGeomPrimvar CreateNonIndexedPrimvar</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName, const T &amp;value, const TfToken &amp;interpolation=TfToken(), int elementSize=-1, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>CreateNonIndexedPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>interpolation</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Author scene description to create an attribute and authoring a <computeroutput>value</computeroutput> on this prim that will be recognized as a Primvar (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>will present as a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>). Note that unlike CreatePrimvar using this API explicitly authors a block for the indices attr associated with the primvar, thereby blocking any indices set in any weaker layers.</para>
<para><simplesect kind="return"><para>an invalid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> on error, a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> otherwise. It is fine to call this method multiple times, and in different UsdEditTargets, even if there is an existing primvar of the same name, indexed or not.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" kindref="member">CreatePrimvar()</ref>, <ref refid="class_usd_geom_primvars_a_p_i_1a56895335e37f04c41ef0e22eb4d198f9" kindref="member">CreateIndexedPrimvar()</ref>, <ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">UsdPrim::CreateAttribute()</ref>, <ref refid="class_usd_geom_primvar_1a42d797fc438a7fa52875d2c7db006cd4" kindref="member">UsdGeomPrimvar::IsPrimvar()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="210" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="210" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a56895335e37f04c41ef0e22eb4d198f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>UsdGeomPrimvar CreateIndexedPrimvar</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName, const T &amp;value, const VtIntArray &amp;indices, const TfToken &amp;interpolation=TfToken(), int elementSize=-1, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>CreateIndexedPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const VtIntArray &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>interpolation</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>elementSize</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Author scene description to create an attribute and authoring a <computeroutput>value</computeroutput> on this prim that will be recognized as an indexed Primvar with <computeroutput>indices</computeroutput> appropriately set (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>will present as a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>).</para>
<para><simplesect kind="return"><para>an invalid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> on error, a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> otherwise. It is fine to call this method multiple times, and in different UsdEditTargets, even if there is an existing primvar of the same name, indexed or not.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" kindref="member">CreatePrimvar()</ref>, <ref refid="class_usd_geom_primvars_a_p_i_1aedcab17785ff140d9c56911ad8057eb0" kindref="member">CreateNonIndexedPrimvar()</ref>, <ref refid="class_usd_prim_1a935381d7c7100b583fdcdb0e10dae9e6" kindref="member">UsdPrim::CreateAttribute()</ref>, <ref refid="class_usd_geom_primvar_1a42d797fc438a7fa52875d2c7db006cd4" kindref="member">UsdGeomPrimvar::IsPrimvar()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="238" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="238" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a7e2a6d6f547f71c136ed7825e33e78b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool RemovePrimvar</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>RemovePrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Author scene description to delete an attribute on this prim that was recognized as Primvar (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>will present as a valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>), <emphasis>in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref></emphasis>.</para>
<para>Because this method can only remove opinions about the primvar from the current EditTarget, you may generally find it more useful to use <ref refid="class_usd_geom_primvars_a_p_i_1a198ea4ab120a58a5ce8efb92e94e9865" kindref="member">BlockPrimvar()</ref> which will ensure that all values from the EditTarget and weaker layers for the primvar and its indices will be ignored.</para>
<para>Removal may fail and return false if <computeroutput>name</computeroutput> contains a reserved keyword, such as the &quot;indices&quot; suffix we use for indexed primvars.</para>
<para>Note this will also remove the indices attribute associated with an indiced primvar.</para>
<para><simplesect kind="return"><para>true if <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> and indices attribute was successfully removed, false otherwise.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1acf19fa27b29bb676ff899868fd5de099" kindref="member">UsdPrim::RemoveProperty()</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a198ea4ab120a58a5ce8efb92e94e9865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void BlockPrimvar</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>BlockPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Remove all time samples on the primvar and its associated indices attr, and author a <emphasis>block</emphasis> <computeroutput>default</computeroutput> value. </para>
        </briefdescription>
        <detaileddescription>
<para>This will cause authored opinions in weaker layers to be ignored.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a88e75995833fc8cb897d9ed123c3f3e0" kindref="member">UsdAttribute::Block()</ref>, <ref refid="class_usd_geom_primvar_1aec7f855676def21ea29008f7131aeba3" kindref="member">UsdGeomPrimvar::BlockIndices</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>USDGEOM_API UsdGeomPrimvar GetPrimvar</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the Primvar object named by <computeroutput>name</computeroutput>, which will be valid if a Primvar attribute definition already exists. </para>
        </briefdescription>
        <detaileddescription>
<para>Name lookup will account for Primvar namespacing, which means that this method will succeed in some cases where <programlisting><codeline><highlight class="normal">UsdGeomPrimvar(prim-&gt;GetAttribute(name))</highlight></codeline>
</programlisting> will not, unless <computeroutput>name</computeroutput> is properly namespace prefixed.</para>
<para><simplesect kind="note"><para>Just because a Primvar is valid and defined, and <emphasis>even if</emphasis> its underlying <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> (GetAttr()) answers HasValue() affirmatively, one must still check the return value of <ref refid="class_usd_geom_primvars_a_p_i_1a9037a9eaeedc33287fca60b50de544e7" kindref="member">Get()</ref>, due to the potential of time-varying value blocks (see <ref refid="class_usd_attribute_1Usd_AttributeBlocking" kindref="member">Attribute Value Blocking</ref>).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1adabc5552fd9486884055f2b1527d481b" kindref="member">HasPrimvar()</ref>, <ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; GetPrimvars</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvars</name>
        <briefdescription>
<para>Return valid <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> objects for all defined Primvars on this prim, similarly to <ref refid="class_usd_prim_1a07e5668bd9f88b39e3c7261d409bfcae" kindref="member">UsdPrim::GetAttributes()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned primvars may not possess any values, and therefore not be useful to some clients. For the primvars useful for inheritance computations, see <ref refid="class_usd_geom_primvars_a_p_i_1a7c03c7d56921f1e334f2fffaec0ee424" kindref="member">GetPrimvarsWithAuthoredValues()</ref>, and for primvars useful for direct consumption, see <ref refid="class_usd_geom_primvars_a_p_i_1a0677499a4e9974d9f98ace9bb0ab5572" kindref="member">GetPrimvarsWithValues()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1abf9c7c40bc82fd443d6238e864ee6cfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; GetAuthoredPrimvars</definition>
        <argsstring>() const</argsstring>
        <name>GetAuthoredPrimvars</name>
        <briefdescription>
<para>Like <ref refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" kindref="member">GetPrimvars()</ref>, but include only primvars that have some authored scene description (though not necessarily a value). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a0677499a4e9974d9f98ace9bb0ab5572" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; GetPrimvarsWithValues</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvarsWithValues</name>
        <briefdescription>
<para>Like <ref refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" kindref="member">GetPrimvars()</ref>, but include only primvars that have some value, whether it comes from authored scene description or a schema fallback. </para>
        </briefdescription>
        <detaileddescription>
<para>For most purposes, this method is more useful than <ref refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" kindref="member">GetPrimvars()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a7c03c7d56921f1e334f2fffaec0ee424" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; GetPrimvarsWithAuthoredValues</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvarsWithAuthoredValues</name>
        <briefdescription>
<para>Like <ref refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" kindref="member">GetPrimvars()</ref>, but include only primvars that have an <bold>authored</bold> value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the query used when computing inheritable primvars, and is generally more useful than <ref refid="class_usd_geom_primvars_a_p_i_1abf9c7c40bc82fd443d6238e864ee6cfe" kindref="member">GetAuthoredPrimvars()</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a8659e3cb48f72bf95dcd32c7544969d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; FindInheritablePrimvars</definition>
        <argsstring>() const</argsstring>
        <name>FindInheritablePrimvars</name>
        <briefdescription>
<para>Compute the primvars that can be inherited from this prim by its child prims, including the primvars that <bold>this</bold> prim inherits from ancestor prims. </para>
        </briefdescription>
        <detaileddescription>
<para>Inherited primvars will be bound to attributes on the corresponding ancestor prims.</para>
<para>Only primvars with <bold>authored</bold>, <bold>non-blocked</bold>, <bold>constant interpolation</bold> values are inheritable; fallback values are not inherited. The order of the returned primvars is undefined.</para>
<para>It is not generally useful to call this method on <ref refid="class_usd_geom_gprim" kindref="compound">UsdGeomGprim</ref> leaf prims, and furthermore likely to be expensive since <emphasis>most</emphasis> primvars are defined on Gprims.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a5fa330ba82f72c4af813981c5ad59259" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; FindIncrementallyInheritablePrimvars</definition>
        <argsstring>(const std::vector&lt; UsdGeomPrimvar &gt; &amp;inheritedFromAncestors) const</argsstring>
        <name>FindIncrementallyInheritablePrimvars</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt; &amp;</type>
          <declname>inheritedFromAncestors</declname>
        </param>
        <briefdescription>
<para>Compute the primvars that can be inherited from this prim by its child prims, starting from the set of primvars inherited from this prim&apos;s ancestors. </para>
        </briefdescription>
        <detaileddescription>
<para>If this method returns an empty vector, then this prim&apos;s children should inherit the same set of primvars available to this prim, i.e. the input <computeroutput>inheritedFromAncestors</computeroutput> .</para>
<para>As opposed to <ref refid="class_usd_geom_primvars_a_p_i_1a8659e3cb48f72bf95dcd32c7544969d3" kindref="member">FindInheritablePrimvars()</ref>, which always recurses up through all of the prim&apos;s ancestors, this method allows more efficient computation of inheritable primvars by starting with the list of primvars inherited from this prim&apos;s ancestors, and returning a newly allocated vector only when this prim makes a change to the set of inherited primvars. This enables O(n) inherited primvar computation for all prims on a Stage, with potential to share computed results that are identical (i.e. when this method returns an empty vector, its parent&apos;s result can (and must!) be reused for all of the prim&apos;s children.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>USDGEOM_API UsdGeomPrimvar FindPrimvarWithInheritance</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>FindPrimvarWithInheritance</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" kindref="member">GetPrimvar()</ref>, but if the named primvar does not exist or has no authored value on this prim, search for the named, value-producing primvar on ancestor prims. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned primvar will be bound to the attribute on the corresponding ancestor prim on which it was found (if any). If neither this prim nor any ancestor contains a value-producing primvar, then the returned primvar will be the same as that returned by <ref refid="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" kindref="member">GetPrimvar()</ref>.</para>
<para>This is probably the method you want to call when needing to consume a primvar of a particular name.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a4e6eed782d1445c4c5f070ae6897946a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref></type>
        <definition>USDGEOM_API UsdGeomPrimvar FindPrimvarWithInheritance</definition>
        <argsstring>(const TfToken &amp;name, const std::vector&lt; UsdGeomPrimvar &gt; &amp;inheritedFromAncestors) const</argsstring>
        <name>FindPrimvarWithInheritance</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt; &amp;</type>
          <declname>inheritedFromAncestors</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version of <ref refid="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" kindref="member">FindPrimvarWithInheritance()</ref> takes the pre-computed set of primvars inherited from this prim&apos;s ancestors, as computed by <ref refid="class_usd_geom_primvars_a_p_i_1a8659e3cb48f72bf95dcd32c7544969d3" kindref="member">FindInheritablePrimvars()</ref> or <ref refid="class_usd_geom_primvars_a_p_i_1a5fa330ba82f72c4af813981c5ad59259" kindref="member">FindIncrementallyInheritablePrimvars()</ref> on the prim&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a9cfe5c5531e1cec294f116e6443ba881" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; FindPrimvarsWithInheritance</definition>
        <argsstring>() const</argsstring>
        <name>FindPrimvarsWithInheritance</name>
        <briefdescription>
<para>Find all of the value-producing primvars either defined on this prim, or inherited from ancestor prims. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a8c0451e06ba484b89c1426cac61e93d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomPrimvar&gt; FindPrimvarsWithInheritance</definition>
        <argsstring>(const std::vector&lt; UsdGeomPrimvar &gt; &amp;inheritedFromAncestors) const</argsstring>
        <name>FindPrimvarsWithInheritance</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref> &gt; &amp;</type>
          <declname>inheritedFromAncestors</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version of <ref refid="class_usd_geom_primvars_a_p_i_1a9cfe5c5531e1cec294f116e6443ba881" kindref="member">FindPrimvarsWithInheritance()</ref> takes the pre-computed set of primvars inherited from this prim&apos;s ancestors, as computed by <ref refid="class_usd_geom_primvars_a_p_i_1a8659e3cb48f72bf95dcd32c7544969d3" kindref="member">FindInheritablePrimvars()</ref> or <ref refid="class_usd_geom_primvars_a_p_i_1a5fa330ba82f72c4af813981c5ad59259" kindref="member">FindIncrementallyInheritablePrimvars()</ref> on the prim&apos;s parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI" kindref="member">Which Method to Use to Retrieve Primvars</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1adabc5552fd9486884055f2b1527d481b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool HasPrimvar</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>HasPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Is there a defined Primvar <computeroutput>name</computeroutput> on this prim? </para>
        </briefdescription>
        <detaileddescription>
<para>Name lookup will account for Primvar namespacing.</para>
<para>Like <ref refid="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" kindref="member">GetPrimvar()</ref>, a return value of <computeroutput>true</computeroutput> for <ref refid="class_usd_geom_primvars_a_p_i_1adabc5552fd9486884055f2b1527d481b" kindref="member">HasPrimvar()</ref> does not guarantee the primvar will produce a value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1aafb9c5666e00d2c9a8cc4de9b2e41f09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool HasPossiblyInheritedPrimvar</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>HasPossiblyInheritedPrimvar</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Is there a Primvar named <computeroutput>name</computeroutput> with an authored value on this prim or any of its ancestors? </para>
        </briefdescription>
        <detaileddescription>
<para>This is probably the method you want to call when wanting to know whether or not the prim &quot;has&quot; a primvar of a particular name.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" kindref="member">FindPrimvarWithInheritance()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="447" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a9037a9eaeedc33287fca60b50de544e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref></type>
        <definition>static USDGEOM_API UsdGeomPrimvarsAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomPrimvarsAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1afba54aa97e436486b2b72452c69a2b8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool CanContainPropertyName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>CanContainPropertyName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Test whether a given <computeroutput>name</computeroutput> contains the &quot;primvars:&quot; prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="452" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_primvars_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/primvarsAPI.h" line="149" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_geom_primvars_a_p_i" kindref="compound">UsdGeomPrimvarsAPI</ref> encodes geometric &quot;primitive variables&quot;, as <ref refid="class_usd_geom_primvar" kindref="compound">UsdGeomPrimvar</ref>, which interpolate across a primitive&apos;s topology, can override shader inputs, and inherit down namespace. </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="class_usd_geom_primvars_a_p_i_1usdGeom_PrimvarFetchingAPI">
<title>Which Method to Use to Retrieve Primvars</title>
<para>While creating primvars is unambiguous (<ref refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" kindref="member">CreatePrimvar()</ref>), there are quite a few methods available for retrieving primvars, making it potentially confusing knowing which one to use. Here are some guidelines:</para>
<para><itemizedlist>
<listitem><para>If you are populating a GUI with the primvars already available for authoring values on a prim, use <ref refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" kindref="member">GetPrimvars()</ref>. </para>
</listitem>
<listitem><para>If you want all of the &quot;useful&quot; (e.g. to a renderer) primvars available at a prim, including those inherited from ancestor prims, use <ref refid="class_usd_geom_primvars_a_p_i_1a9cfe5c5531e1cec294f116e6443ba881" kindref="member">FindPrimvarsWithInheritance()</ref>. Note that doing so individually for many prims will be inefficient. </para>
</listitem>
<listitem><para>To find a particular primvar defined directly on a prim, which may or may not provide a value, use <ref refid="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" kindref="member">GetPrimvar()</ref>. </para>
</listitem>
<listitem><para>To find a particular primvar defined on a prim or inherited from ancestors, which may or may not provide a value, use <ref refid="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" kindref="member">FindPrimvarWithInheritance()</ref>. </para>
</listitem>
<listitem><para>To <emphasis>efficiently</emphasis> query for primvars using the overloads of <ref refid="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" kindref="member">FindPrimvarWithInheritance()</ref> and <ref refid="class_usd_geom_primvars_a_p_i_1a9cfe5c5531e1cec294f116e6443ba881" kindref="member">FindPrimvarsWithInheritance()</ref>, one must first cache the results of <ref refid="class_usd_geom_primvars_a_p_i_1a5fa330ba82f72c4af813981c5ad59259" kindref="member">FindIncrementallyInheritablePrimvars()</ref> for each non-leaf prim on the stage. </para>
</listitem>
</itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="6461">
        <label>UsdGeomPrimvarsAPI</label>
        <link refid="class_usd_geom_primvars_a_p_i"/>
        <childnode refid="6462" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6463">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6462">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6463" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6464">
        <label>UsdGeomPrimvarsAPI</label>
        <link refid="class_usd_geom_primvars_a_p_i"/>
        <childnode refid="6465" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6466">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6465">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6466" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/primvarsAPI.h" line="83" column="1" bodyfile="pxr/usd/usdGeom/primvarsAPI.h" bodystart="82" bodyend="453"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a198ea4ab120a58a5ce8efb92e94e9865" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>BlockPrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1afba54aa97e436486b2b72452c69a2b8a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>CanContainPropertyName</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a56895335e37f04c41ef0e22eb4d198f9" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>CreateIndexedPrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1aedcab17785ff140d9c56911ad8057eb0" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>CreateNonIndexedPrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a59951bef1e28f830ea5f5f1b1316ec73" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>CreatePrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a5fa330ba82f72c4af813981c5ad59259" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindIncrementallyInheritablePrimvars</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a8659e3cb48f72bf95dcd32c7544969d3" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindInheritablePrimvars</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a9cfe5c5531e1cec294f116e6443ba881" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindPrimvarsWithInheritance</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a8c0451e06ba484b89c1426cac61e93d7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindPrimvarsWithInheritance</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a72a60117c872e73301f56cf99925ef6e" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindPrimvarWithInheritance</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a4e6eed782d1445c4c5f070ae6897946a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>FindPrimvarWithInheritance</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a9037a9eaeedc33287fca60b50de544e7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>Get</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1abf9c7c40bc82fd443d6238e864ee6cfe" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetAuthoredPrimvars</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a31461d541ad7dec79af013e6d3070f59" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a7b17c4b3c0b6c13fbbb6d406f9971814" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPrimvars</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a7c03c7d56921f1e334f2fffaec0ee424" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPrimvarsWithAuthoredValues</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a0677499a4e9974d9f98ace9bb0ab5572" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetPrimvarsWithValues</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1aafb9c5666e00d2c9a8cc4de9b2e41f09" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>HasPossiblyInheritedPrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1adabc5552fd9486884055f2b1527d481b" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>HasPrimvar</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a7e2a6d6f547f71c136ed7825e33e78b9" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>RemovePrimvar</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1ae1f859bd4810b8a11817840c2c0af5f1" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdGeomPrimvarsAPI</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1abcc2ab1157e631046af6967af9c7112d" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdGeomPrimvarsAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdGeomPrimvarsAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_primvars_a_p_i_1a49bfa477f4822edca31f21d15c35bd3a" prot="public" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>~UsdGeomPrimvarsAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomPrimvarsAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
