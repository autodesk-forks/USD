<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="vt_page_front" kind="page">
    <compoundname>vt_page_front</compoundname>
    <title>Vt : Value Types</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="vt_page_front_1vt_overview">
<title>Overview</title>
<para>Defines classes that provide for type abstraction (<ref refid="class_vt_value" kindref="compound">VtValue</ref>) and enhanced array types (<ref refid="class_vt_array" kindref="compound">VtArray</ref>). The Vt library also provides functions for manipulating value types. This library operates on the level of language data types and there are differences in the C++ and Python interfaces.</para>
</sect1>
<sect1 id="vt_page_front_1vt_value">
<title>Type Erasure with VtValue</title>
<para>The <ref refid="class_vt_value" kindref="compound">VtValue</ref> class wraps type objects (float, int, bool, <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref>, and so on) in a type-agnostic container that includes functions for determining the content type within the container. The <ref refid="class_vt_value" kindref="compound">VtValue</ref> class is found in the C++ API only, since Python does not have the strong type restrictions of C++. Python to C++ type conversion is handled automatically by the system.</para>
</sect1>
<sect1 id="vt_page_front_1vt_array">
<title>Shared Arrays - VtArray</title>
<para>The <ref refid="class_vt_array" kindref="compound">VtArray</ref> class represents an arbitrary length homogeneous container. In the C++ API, the constructor lets you create an array of a specified size. The <ref refid="class_vt_array" kindref="compound">VtArray</ref> interface on the Python side is implemented as a set of typed array classes (for example, BoolArray, StringArray, Vec4dArray). </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
