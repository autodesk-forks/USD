<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range1f" kind="class" language="C++" prot="public">
    <compoundname>GfRange1f</compoundname>
    <includes refid="range1f_8h" local="no">range1f.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range1f_1a5acee749e4dadf33176c742cd389c65d" prot="public" static="no">
        <type>float</type>
        <definition>typedef float MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="66" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range1f_1a43c010478d83f5dd60aad3f02efd2d8e" prot="public" static="no">
        <type><ref refid="class_gf_range1f_1a5acee749e4dadf33176c742cd389c65d" kindref="member">MinMaxType</ref></type>
        <definition>typedef MinMaxType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="69" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range1f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="68" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range1f_1a29594e10c5b6ee082c0fcf9f5954c5ba" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="324" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range1f_1a3303751a03a3962f2ae6f748f6cafab3" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="324" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range1f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="73" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a31a720240e612346fab8c92aeec3343b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange1f</definition>
        <argsstring>()</argsstring>
        <name>GfRange1f</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="79" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ad7cfa41eb6367124eaa409bd77cc433e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange1f</definition>
        <argsstring>(float min, float max)</argsstring>
        <name>GfRange1f</name>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="84" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ac77dae949623e240f3f37fec03265e9e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange1f</definition>
        <argsstring>(class GfRange1d const &amp;other)</argsstring>
        <name>GfRange1f</name>
        <param>
          <type>class <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct from <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a9148b802521974d363e4f65509681b27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="95" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a7f3d53b7bbd7cc775c1d448e595be242" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="98" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1aeb141eca03232c9e61347f150ac30cc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="101" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a4aafc2b21da03ca59cb40889c440a2a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range1f_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="106" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a7510d4462835f45497b187ecc3304b57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(float min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>float</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="112" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a661a2f2112b283dbf40343d65b771359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(float max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>float</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="115" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="118" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1afe1f2253403afcb6b478de234ed9e33e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(float point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>float</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="124" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a297d5dd68cbf3e050c36fe968a79ef4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange1f &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="128" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a84e32c516c0afdfde83acb94e4ab3d46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(float point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>float</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="132" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a4718d7158120664f0c9929c4e0eddb98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange1f &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="139" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a212cd3c042d03cdc391c30fa24c9fc85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(float point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>float</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a84e32c516c0afdfde83acb94e4ab3d46" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="146" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a56dabffc627379dde45c6bb91a07047f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange1f &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a84e32c516c0afdfde83acb94e4ab3d46" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="154" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ab61d041f27da8cd52ce2ef22a6a28388" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange1f &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="161" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; UnionWith</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="174" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ac620aceb972f4ff88537b9367333802d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; UnionWith</definition>
        <argsstring>(float b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="181" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ae85e271bb9b57584b48ce5e608946db6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; Union</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="195" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ac9d11c9a727b26ace2c1a8b93325f40f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; Union</definition>
        <argsstring>(float b)</argsstring>
        <name>Union</name>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000016"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="201" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a6a1b55248c3f76e78f9e2a1e146480a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; IntersectWith</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="221" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ace61326f6186d4bd83e6b67e7448f0c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>const GfRange1f&amp; Intersection</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1a6a1b55248c3f76e78f9e2a1e146480a1" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="230" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a4b6f8fb110ef497c095ec782105b0581" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>GfRange1f&amp; operator+=</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="235" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="235" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ac70c3631e893bbae158d78c128bd9975" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>GfRange1f&amp; operator -=</definition>
        <argsstring>(const GfRange1f &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="242" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1acf8af19728dd1e87156d246759728014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>GfRange1f&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="249" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="249" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1afd7a3030b623f616ca21a5dc8cd33c73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
        <definition>GfRange1f&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="262" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1adb517706e3b5c696a884b44a7328d68b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f operator+</definition>
        <argsstring>(const GfRange1f &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="267" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a511bf9b492c67ce9acbffb479e678fdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f operator -</definition>
        <argsstring>(const GfRange1f &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="273" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ad53f523e54f7b57e6fd366349c7be341" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange1f &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="302" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1af02bb9a04e061988b50bdc49d0de7a06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange1f &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="306" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a1bceab2796f9524dac271a7f943cea05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange1d &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="314" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="346" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a10d1231e43bdb96cb1cc2ab2929d2586" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange1d &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="315" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="352" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a3e1851b12ab324c7ecdd48c71a0d8d15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(float p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="319" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range1f_1af15dfa5e045e146a16efd49359c0c886" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>static GfRange1f GetUnion</definition>
        <argsstring>(const GfRange1f &amp;a, const GfRange1f &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="166" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a7ecc7e69661f72fb65c426cda59216b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>static GfRange1f Union</definition>
        <argsstring>(const GfRange1f &amp;a, const GfRange1f &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1af15dfa5e045e146a16efd49359c0c886" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="189" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1ad5bfa4a84fe24ccabfaad16d275f6307" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>static GfRange1f GetIntersection</definition>
        <argsstring>(const GfRange1f &amp;a, const GfRange1f &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="206" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1af93cf5d8bd46ae383c5dc28a53eb1ba7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>static GfRange1f Intersection</definition>
        <argsstring>(const GfRange1f &amp;a, const GfRange1f &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000017"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range1f_1ad5bfa4a84fe24ccabfaad16d275f6307" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="215" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="215" bodyend="217"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range1f_1ad467694191129ebbc8988584b8792741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f operator *</definition>
        <argsstring>(double m, const GfRange1f &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="278" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="278" bodyend="282"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1f_1a9f4120d462277c89d37d5cc5f547bac6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f operator *</definition>
        <argsstring>(const GfRange1f &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="285" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1f_1af5610e0e5ccab52b14d489223ba9beef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref></type>
        <definition>GfRange1f operator/</definition>
        <argsstring>(const GfRange1f &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="292" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range1f_1a82fc3ca89f77cf24165b8d5998b8bd43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange1f &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="297" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="297" bodyend="299"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range1f_1af912d41a1a0d2f8e7887047ca838a00f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(float &amp;dest, float point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type>float &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="327" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range1f_1a75ea0953275a075af40157425d7d5013" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(float &amp;dest, float point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type>float &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="332" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="332" bodyend="334"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 1-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 1-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <location file="pxr/base/gf/range1f.h" line="62" column="1" bodyfile="pxr/base/gf/range1f.h" bodystart="61" bodyend="335"/>
    <listofallmembers>
      <member refid="class_gf_range1f_1a75ea0953275a075af40157425d7d5013" prot="private" virt="non-virtual"><scope>GfRange1f</scope><name>_FindMax</name></member>
      <member refid="class_gf_range1f_1af912d41a1a0d2f8e7887047ca838a00f" prot="private" virt="non-virtual"><scope>GfRange1f</scope><name>_FindMin</name></member>
      <member refid="class_gf_range1f_1a3303751a03a3962f2ae6f748f6cafab3" prot="private" virt="non-virtual"><scope>GfRange1f</scope><name>_max</name></member>
      <member refid="class_gf_range1f_1a29594e10c5b6ee082c0fcf9f5954c5ba" prot="private" virt="non-virtual"><scope>GfRange1f</scope><name>_min</name></member>
      <member refid="class_gf_range1f_1a84e32c516c0afdfde83acb94e4ab3d46" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Contains</name></member>
      <member refid="class_gf_range1f_1a4718d7158120664f0c9929c4e0eddb98" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Contains</name></member>
      <member refid="class_gf_range1f_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>dimension</name></member>
      <member refid="class_gf_range1f_1afe1f2253403afcb6b478de234ed9e33e" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range1f_1a297d5dd68cbf3e050c36fe968a79ef4d" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range1f_1a3e1851b12ab324c7ecdd48c71a0d8d15" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range1f_1ad5bfa4a84fe24ccabfaad16d275f6307" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range1f_1a7f3d53b7bbd7cc775c1d448e595be242" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetMax</name></member>
      <member refid="class_gf_range1f_1a4aafc2b21da03ca59cb40889c440a2a8" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range1f_1a9148b802521974d363e4f65509681b27" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetMin</name></member>
      <member refid="class_gf_range1f_1aeb141eca03232c9e61347f150ac30cc7" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetSize</name></member>
      <member refid="class_gf_range1f_1af15dfa5e045e146a16efd49359c0c886" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GetUnion</name></member>
      <member refid="class_gf_range1f_1a31a720240e612346fab8c92aeec3343b" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GfRange1f</name></member>
      <member refid="class_gf_range1f_1ad7cfa41eb6367124eaa409bd77cc433e" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GfRange1f</name></member>
      <member refid="class_gf_range1f_1ac77dae949623e240f3f37fec03265e9e" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>GfRange1f</name></member>
      <member refid="class_gf_range1f_1a82fc3ca89f77cf24165b8d5998b8bd43" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>hash_value</name></member>
      <member refid="class_gf_range1f_1af93cf5d8bd46ae383c5dc28a53eb1ba7" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Intersection</name></member>
      <member refid="class_gf_range1f_1ace61326f6186d4bd83e6b67e7448f0c3" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Intersection</name></member>
      <member refid="class_gf_range1f_1a6a1b55248c3f76e78f9e2a1e146480a1" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range1f_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range1f_1a212cd3c042d03cdc391c30fa24c9fc85" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>IsInside</name></member>
      <member refid="class_gf_range1f_1a56dabffc627379dde45c6bb91a07047f" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>IsInside</name></member>
      <member refid="class_gf_range1f_1ab61d041f27da8cd52ce2ef22a6a28388" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>IsOutside</name></member>
      <member refid="class_gf_range1f_1a5acee749e4dadf33176c742cd389c65d" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range1f_1af02bb9a04e061988b50bdc49d0de7a06" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator !=</name></member>
      <member refid="class_gf_range1f_1a10d1231e43bdb96cb1cc2ab2929d2586" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator !=</name></member>
      <member refid="class_gf_range1f_1ad467694191129ebbc8988584b8792741" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator *</name></member>
      <member refid="class_gf_range1f_1a9f4120d462277c89d37d5cc5f547bac6" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator *</name></member>
      <member refid="class_gf_range1f_1acf8af19728dd1e87156d246759728014" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator *=</name></member>
      <member refid="class_gf_range1f_1a511bf9b492c67ce9acbffb479e678fdb" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator -</name></member>
      <member refid="class_gf_range1f_1ac70c3631e893bbae158d78c128bd9975" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator -=</name></member>
      <member refid="class_gf_range1f_1adb517706e3b5c696a884b44a7328d68b" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator+</name></member>
      <member refid="class_gf_range1f_1a4b6f8fb110ef497c095ec782105b0581" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator+=</name></member>
      <member refid="class_gf_range1f_1af5610e0e5ccab52b14d489223ba9beef" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator/</name></member>
      <member refid="class_gf_range1f_1afd7a3030b623f616ca21a5dc8cd33c73" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator/=</name></member>
      <member refid="class_gf_range1f_1ad53f523e54f7b57e6fd366349c7be341" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator==</name></member>
      <member refid="class_gf_range1f_1a1bceab2796f9524dac271a7f943cea05" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>operator==</name></member>
      <member refid="class_gf_range1f_1a43c010478d83f5dd60aad3f02efd2d8e" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>ScalarType</name></member>
      <member refid="class_gf_range1f_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range1f_1a661a2f2112b283dbf40343d65b771359" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>SetMax</name></member>
      <member refid="class_gf_range1f_1a7510d4462835f45497b187ecc3304b57" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>SetMin</name></member>
      <member refid="class_gf_range1f_1a7ecc7e69661f72fb65c426cda59216b4" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Union</name></member>
      <member refid="class_gf_range1f_1ae85e271bb9b57584b48ce5e608946db6" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Union</name></member>
      <member refid="class_gf_range1f_1ac9d11c9a727b26ace2c1a8b93325f40f" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>Union</name></member>
      <member refid="class_gf_range1f_1a27b500361dc59b764b2622c5ab638c39" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>UnionWith</name></member>
      <member refid="class_gf_range1f_1ac620aceb972f4ff88537b9367333802d" prot="public" virt="non-virtual"><scope>GfRange1f</scope><name>UnionWith</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
