<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__gf___debugging_output" kind="group">
    <compoundname>group_gf_DebuggingOutput</compoundname>
    <title>Output For Debugging</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga47c5c0767539988532dab982dd69f08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfBBox3d &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_b_box3d" kindref="compound">GfBBox3d</ref> using the format [(range) matrix zeroArea]. </para>
        </briefdescription>
        <detaileddescription>
<para>The zeroArea flag is true or false and indicates whether the bbox has zero area primitives in it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/bbox3d.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga7355cc7935b43e22bd5167624e725889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfDualQuatd &amp;dq)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_dual_quatd" kindref="compound">GfDualQuatd</ref> using the format ((rw, rx, ry, rz), (dw, dx, dy, dz)). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatd.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga49c6de22a22742e542246ff31a7d308c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfDualQuatf &amp;dq)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_dual_quatf" kindref="compound">GfDualQuatf</ref> using the format ((rw, rx, ry, rz), (dw, dx, dy, dz)). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuatf.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga92ca10cb0335f5aadf29ee12b1d3876d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfDualQuath &amp;dq)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_dual_quath" kindref="compound">GfDualQuath</ref> using the format ((rw, rx, ry, rz), (dw, dx, dy, dz)). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/dualQuath.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gac4647d367307478e92611f9c56d9b333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfFrustum &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_frustum" kindref="compound">GfFrustum</ref> using the format [(position) (rotation) [window] [nearFar] viewDistance type]. </para>
        </briefdescription>
        <detaileddescription>
<para>The &quot;type&quot; is &quot;perspective&quot;, or "orthographic, depending on the projection type of the frustum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/frustum.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga63dafd699d549640e88a1dd85e571839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfInterval &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> using the format (x, y). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/interval.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaab1ecd2baf55335a0284b77d9dbd6bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfLine &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_line" kindref="compound">GfLine</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_line" kindref="compound">GfLine</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gacebaac398e8a5a7f0c3b75bbadc4b9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfLineSeg &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_line_seg" kindref="compound">GfLineSeg</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/lineSeg.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gac39ac57889793fb411c2f4cd7d0de8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix2d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix2d" kindref="compound">GfMatrix2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2d.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga8c93bfdb2e6a6e942f40721e1afd47bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix2f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix2f" kindref="compound">GfMatrix2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix2f.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaf07a6f09fb981db5c62fd70b4b343853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix3d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix3d" kindref="compound">GfMatrix3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3d.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga7d3de22f9c511bc268942f5de4d0b8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix3f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix3f.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga825093899b1398752c6cd8ece0a02689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix4d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4d.h" line="768" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga00d76393eb2ff9a478b5083d12941e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfMatrix4f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaf7a0a6bf404ecddccf291418d4cf48ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfMultiInterval &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_multi_interval" kindref="compound">GfMultiInterval</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/multiInterval.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga4ae6f68a2f5d9b5af7bd6220481def32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfPlane &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> using the format [(nx ny nz) distance]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga5bcff094793afd3fc9cd56cef7861c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfQuatd const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> using the format (re, i, j, k) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatd.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaba0368fb1a1b6402e2e56d35e3ff03c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GfQuaternion &amp;q)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_quaternion" kindref="compound">GfQuaternion</ref> using the format (r + (x, y, z)). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quaternion.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gadd2eb699faa1471dacd14bb661d12852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfQuatf const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> using the format (re, i, j, k) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quatf.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gad095cc7804f0f8f81c741bcc11a48e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfQuath const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_quath" kindref="compound">GfQuath</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_quatd" kindref="compound">GfQuatd</ref> using the format (re, i, j, k) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/quath.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga955263eb38bfc4f203d49b6de016e376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange1d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range1d" kindref="compound">GfRange1d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1d.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga6224b1c80403d1f7cd26f8882b283c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange1f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range1f" kindref="compound">GfRange1f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range1f.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga14f9bcba7d684221cd3db151beef3ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange2d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gafad0789981c78baff9b59abc38cbdb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange2f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2f.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga10129e95fede77920a633e93b0d309d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange3d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga98835ffe4177cf7420ea836b4a17f7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfRange3f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3f.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga0d48f771975986e8d3f83c8e55c646ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfRay &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_ray" kindref="compound">GfRay</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_ray" kindref="compound">GfRay</ref> using the format [(x y z) &gt;&gt; (x y z)]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/ray.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga2f2c2a008e82d60bbfc1ecaeee22a134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfRect2i &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_rect2i" kindref="compound">GfRect2i</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_rect2i" kindref="compound">GfRect2i</ref> using the format [(x y):(x y)]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rect2i.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga7e06b2b5a696b796797422bcc620e164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfRotation &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> using the format [(x y z) a]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/rotation.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga59570768226289548cdefa7b47331378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const GfTransform &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> using the format [scale, scaleorientation, rotation, center, translation]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaf9aecdad85f5703e2e377c84e04d9010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec2d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2d.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaf849ec04dc860f2d84f8d9e59edfaf1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec2f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2f.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaa2a074a606a141fadaf306b7b68efd88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec2h const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec2h" kindref="compound">GfVec2h</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec2h" kindref="compound">GfVec2h</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2h.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga5740870ff65d6d59aa18b5885aa0c0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec2i const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec2i.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gafc7b6bbcbe3db5270086703c9dd89748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec3d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3d.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga65ead43ab5742197b5157fe579e22492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec3f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3f.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gab973ec58ed7974adfaeb27f5645150e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec3h const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec3h" kindref="compound">GfVec3h</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3h.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaf4ae5f51dd2cde87f67482f6b8574350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec3i const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec3i.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga69f681a1242bb30bebbe3fdda78ae9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec4d const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec4d.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga6a489730fc3d4f605e20da464749c7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec4f const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec4f.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1gaa4b15136451ca3094731d03786461d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec4h const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec4h" kindref="compound">GfVec4h</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec4h" kindref="compound">GfVec4h</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec4h.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___debugging_output_1ga54f0add5143a4d3e9775c76acdc66885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API std::ostream &amp;</type>
        <definition>GF_API std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, GfVec4i const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Output a <ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/vec4i.h" line="263" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
