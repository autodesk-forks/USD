<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__arch___diagnostics" kind="group">
    <compoundname>group_arch_Diagnostics</compoundname>
    <title>Diagnostics</title>
    <innerfile refid="arch_2error_8h">error.h</innerfile>
    <innerfile refid="arch_2stack_trace_8h">stackTrace.h</innerfile>
    <innerfile refid="symbols_8h">symbols.h</innerfile>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__group__arch___diagnostics_1ga971fa208b4a447fe669dcf23d54955ee" prot="public" static="no">
        <type>std::function&lt; std::string(uintptr_t address)&gt;</type>
        <definition>typedef std::function&lt;std::string(uintptr_t address)&gt; ArchStackTraceCallback</definition>
        <argsstring></argsstring>
        <name>ArchStackTraceCallback</name>
        <briefdescription>
<para>A callback to get a symbolic representation of an address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="191" column="1" bodyfile="pxr/base/arch/stackTrace.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__arch___diagnostics_1gae5d005c694f995ddbe0a0223eb4fc9c1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ArchCrashHandlerSystemCB) (void *userData)</definition>
        <argsstring>)(void *userData)</argsstring>
        <name>ArchCrashHandlerSystemCB</name>
        <briefdescription>
<para>Callback for handling crashes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1ga1e3cf6a7309dc9c433b92ed32d4d2fa0" kindref="member">ArchCrashHandlerSystemv</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="334" column="1" bodyfile="pxr/base/arch/stackTrace.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga226d9af914c72e27fe75e34123b7ac2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchLogFatalProcessState</definition>
        <argsstring>(const char *reason, const char *message=nullptr, const char *extraLogMsg=nullptr)</argsstring>
        <name>ArchLogFatalProcessState</name>
        <param>
          <type>const char *</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>extraLogMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Dumps call-stack info to a file, prints a message to the terminal, and invokes crash handling script. </para>
        </briefdescription>
        <detaileddescription>
<para>The reason for the trace should be supplied in <computeroutput>reason</computeroutput>. An additional message may be provided in <computeroutput>message</computeroutput>. If <computeroutput>reason</computeroutput> is <computeroutput>NULL</computeroutput> then this function only writes <computeroutput>message</computeroutput> to the banner (if any).</para>
<para>This routine can be slow and is intended to be called for a fatal error, such as a caught coredump signal. While it can theoretically be called at any time, <computeroutput><ref refid="group__group__arch___diagnostics_1gab4e3942450dde7304e62087630d472b4" kindref="member">ArchLogCurrentProcessState()</ref></computeroutput> should be used for nonfatal cases.</para>
<para>This function is implemented by calling an external program. This is suitable for times where the current process may be corrupted. In other cases, using <computeroutput><ref refid="group__group__arch___diagnostics_1ga81bdecbd5c3e24d7475120b28bb3b892" kindref="member">ArchPrintStackTrace()</ref></computeroutput> or other related functions would be much faster.</para>
<para>Note the use of <computeroutput>char*</computeroutput> as opposed to <computeroutput>string:</computeroutput> this is intentional, because we are trying to use only async-safe function from here on and malloc() is not async-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gab4e3942450dde7304e62087630d472b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchLogCurrentProcessState</definition>
        <argsstring>(const char *reason, const char *message=nullptr, const char *extraLogMsg=nullptr)</argsstring>
        <name>ArchLogCurrentProcessState</name>
        <param>
          <type>const char *</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>extraLogMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Dumps call-stack info to a file, and prints an informative message. </para>
        </briefdescription>
        <detaileddescription>
<para>The reason for the trace should be supplied in <computeroutput>reason</computeroutput>. An additional message may be provided in <computeroutput>message</computeroutput>. If <computeroutput>reason</computeroutput> is <computeroutput>NULL</computeroutput> then this function only writes <computeroutput>message</computeroutput> to the banner (if any).</para>
<para>This function is nearly identical to ArchLogFatalProcessState, including calling an external program. However, it is intended for cases that may simulate or require the output info from a full fatal crash, but are not truly fatal errors. For cases where that is not necessary, using <computeroutput><ref refid="group__group__arch___diagnostics_1ga81bdecbd5c3e24d7475120b28bb3b892" kindref="member">ArchPrintStackTrace()</ref></computeroutput> or other related functions would be much faster.</para>
<para>Note the use of <computeroutput>char*</computeroutput> as opposed to <computeroutput>string:</computeroutput> this is intentional, because we are trying to use only async-safe function from here on and malloc() is not async-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gaf1cba48723c0deed06f475d41a18e5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetProcessStateLogCommand</definition>
        <argsstring>(const char *command, const char *const argv[], const char *const fatalArgv[])</argsstring>
        <name>ArchSetProcessStateLogCommand</name>
        <param>
          <type>const char *</type>
          <declname>command</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *const</type>
          <declname>fatalArgv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Sets command line that gets call-stack info and triggers crash handling script. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the command line to execute to gather and log call-stack info. <computeroutput>argv</computeroutput> must be NULL terminated. If <computeroutput>command</computeroutput> and/or <computeroutput>argv</computeroutput> (or <computeroutput>fatalArgv</computeroutput> in the case of a fatal crash) are NULL, then the command will not be executed. Otherwise argv[0] and fatalArgv[0] must be the full path to the program to execute, typically <computeroutput>command</computeroutput> or &quot;$cmd&quot; as described below.</para>
<para><computeroutput>command</computeroutput>, <computeroutput>argv</computeroutput>, and <computeroutput>fatalArgv</computeroutput> are not copied and must remain valid until the next call to <computeroutput>ArchSetProcessStateLogCommand</computeroutput>.</para>
<para>Simple substitution is supported on argv elements: <itemizedlist>
<listitem><para><simplesect kind="rcs"><title>cmd</title><para>Substitutes the command pathname, or </para>
</simplesect>
ARCH_POSTMORTEM if set </para>
</listitem>
<listitem><para>$pid: Substitutes the process id </para>
</listitem>
<listitem><para>$log: Substitutes the log pathname </para>
</listitem>
<listitem><para>$time: Substitutes the user time (if available, else wall time) </para>
</listitem>
<listitem><para>$reason: Substitutes the reason string for the crash</para>
</listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1ga226d9af914c72e27fe75e34123b7ac2b" kindref="member">ArchLogFatalProcessState</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gade82558a510c606d3263f455eb47a3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchIsAppCrashing</definition>
        <argsstring>()</argsstring>
        <name>ArchIsAppCrashing</name>
        <briefdescription>
<para>Returns true if the fatal signal handler ArchLogFatalProcessState has been invoked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gae3307bce262f0c711075643e16ae8a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchLogSessionInfo</definition>
        <argsstring>(const char *crashStackTrace=NULL)</argsstring>
        <name>ArchLogSessionInfo</name>
        <param>
          <type>const char *</type>
          <declname>crashStackTrace</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Log session info. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally indicate that this is due to a crash by providing the path to a file containing a stack trace in <computeroutput>crashStackTrace</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga5b28caef9eb0239cfa1199d13d04ff4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetLogSession</definition>
        <argsstring>(const char *command, const char *const argv[], const char *const crashArgv[])</argsstring>
        <name>ArchSetLogSession</name>
        <param>
          <type>const char *</type>
          <declname>command</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const char *const</type>
          <declname>crashArgv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Sets the command line to log sessions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the command line to execute to log session info. <computeroutput>argv</computeroutput> is used if no crash stack trace is provided, otherwise <computeroutput>crashArgv</computeroutput> is used. Both must be NULL terminated. If <computeroutput>command</computeroutput> or <computeroutput>argv</computeroutput> is NULL then non-crashes are not logged; if <computeroutput>command</computeroutput> or <computeroutput>crashArgv</computeroutput> is NULL then crashes are not logged. If not NULL then argv[0] and crashArgv[0] must be full path to the program to execute, typically <computeroutput>command</computeroutput> or &quot;$cmd&quot; as described below.</para>
<para><computeroutput>command</computeroutput>, <computeroutput>argv</computeroutput>, and <computeroutput>crashArgv</computeroutput> are not copied and must remain valid until the next call to <computeroutput>ArchSetLogSession</computeroutput>.</para>
<para>Simple substitution is supported on argv elements: <itemizedlist>
<listitem><para><simplesect kind="rcs"><title>cmd</title><para>Substitutes the command pathname, or </para>
</simplesect>
ARCH_LOGSESSION if set </para>
</listitem>
<listitem><para>$prog Substitutes the program name </para>
</listitem>
<listitem><para>$pid: Substitutes the process id </para>
</listitem>
<listitem><para>$time: Substitutes the user time (if available, else wall time) </para>
</listitem>
<listitem><para>$stack: Substitutes the crash stack string (only in crashArgv)</para>
</listitem>
</itemizedlist>
<simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1gae3307bce262f0c711075643e16ae8a7b" kindref="member">ArchLogSessionInfo</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga2a960b05af88e1b216652ce2ccc198f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchEnableSessionLogging</definition>
        <argsstring>()</argsstring>
        <name>ArchEnableSessionLogging</name>
        <briefdescription>
<para>Register the callback to invoke logging at end of a successful session. </para>
        </briefdescription>
        <detaileddescription>
<para>This function registers <ref refid="group__group__arch___diagnostics_1gae3307bce262f0c711075643e16ae8a7b" kindref="member">ArchLogSessionInfo()</ref> and records the current timestamp, to send up-time to the DB upon exiting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga81bdecbd5c3e24d7475120b28bb3b892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchPrintStackTrace</definition>
        <argsstring>(FILE *fout, const std::string &amp;programName, const std::string &amp;reason)</argsstring>
        <name>ArchPrintStackTrace</name>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Print a stack trace to the given FILE pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gaf5737651d40ca019329ef7cfcd35e681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchPrintStackTrace</definition>
        <argsstring>(FILE *fout, const std::string &amp;reason)</argsstring>
        <name>ArchPrintStackTrace</name>
        <param>
          <type>FILE *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Print a stack trace to the given FILE pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses ArchGetProgramInfoForErrors as the <computeroutput>programName</computeroutput>. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga417f1fb2fdb6b5dd4087a5b7eec5b32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchPrintStackTrace</definition>
        <argsstring>(std::ostream &amp;out, const std::string &amp;programName, const std::string &amp;reason)</argsstring>
        <name>ArchPrintStackTrace</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>programName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Print a stack trace to the given ostream. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gaedf9af857a71bf9a13f4ff5cd3982f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchPrintStackTrace</definition>
        <argsstring>(std::ostream &amp;out, const std::string &amp;reason)</argsstring>
        <name>ArchPrintStackTrace</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Print a stack trace to the given ostream. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses ArchGetProgramInfoForErrors as the <computeroutput>programName</computeroutput>. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga87ff5dc54fc9b83c9e511e1d0feb41be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetStackTraceCallback</definition>
        <argsstring>(const ArchStackTraceCallback &amp;cb)</argsstring>
        <name>ArchSetStackTraceCallback</name>
        <param>
          <type>const <ref refid="group__group__arch___diagnostics_1ga971fa208b4a447fe669dcf23d54955ee" kindref="member">ArchStackTraceCallback</ref> &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Sets a callback to get a symbolic representation of an address. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback returns a string for an address in a stack trace, typically including the name of the function containing the address. <computeroutput>cb</computeroutput> may be <computeroutput>NULL</computeroutput> to use a default implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga4bfe1c0823606f4c9a1ef456274713b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchGetStackTraceCallback</definition>
        <argsstring>(ArchStackTraceCallback *cb)</argsstring>
        <name>ArchGetStackTraceCallback</name>
        <param>
          <type><ref refid="group__group__arch___diagnostics_1ga971fa208b4a447fe669dcf23d54955ee" kindref="member">ArchStackTraceCallback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Returns the callback to get a symbolic representation of an address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1ga87ff5dc54fc9b83c9e511e1d0feb41be" kindref="member">ArchSetStackTraceCallback</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga3192199a68342c994a30c63cde08c0c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API time_t</type>
        <definition>ARCH_API time_t ArchGetAppLaunchTime</definition>
        <argsstring>()</argsstring>
        <name>ArchGetAppLaunchTime</name>
        <briefdescription>
<para>Returns the set value for the application&apos;s launch time. </para>
        </briefdescription>
        <detaileddescription>
<para>The timestamp for this value is set when the arch library is initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga1bd570e1560dd7d71df3db15f940108f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetFatalStackLogging</definition>
        <argsstring>(bool flag)</argsstring>
        <name>ArchSetFatalStackLogging</name>
        <param>
          <type>bool</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Enables or disables the automatic logging of crash information. </para>
        </briefdescription>
        <detaileddescription>
<para>This function controls whether the stack trace and build information is automatically caught and stored to an internal database when a fatal crash occurs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga629b5dccf2dc677fe900bde2631834e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetFatalStackLogging</definition>
        <argsstring>()</argsstring>
        <name>ArchGetFatalStackLogging</name>
        <briefdescription>
<para>Returns whether automatic logging of fatal crashes is enabled This is set to false by default. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1ga1bd570e1560dd7d71df3db15f940108f" kindref="member">ArchSetFatalStackLogging</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gac442849df5f0b6bb3c270ff35d918a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetProgramNameForErrors</definition>
        <argsstring>(const char *progName)</argsstring>
        <name>ArchSetProgramNameForErrors</name>
        <param>
          <type>const char *</type>
          <declname>progName</declname>
        </param>
        <briefdescription>
<para>Sets the program name to be used in diagnostic output. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is initialized to <ref refid="group__group__arch___system_functions_1ga81c199343bf5734a952fd8c150b55019" kindref="member">ArchGetExecutablePath()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga63eb24e8cd33efb7aa7523f7f811f1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API const char *</type>
        <definition>ARCH_API const char* ArchGetProgramNameForErrors</definition>
        <argsstring>()</argsstring>
        <name>ArchGetProgramNameForErrors</name>
        <briefdescription>
<para>Returns the currently set program name for reporting errors. </para>
        </briefdescription>
        <detaileddescription>
<para>Defaults to <ref refid="group__group__arch___system_functions_1ga81c199343bf5734a952fd8c150b55019" kindref="member">ArchGetExecutablePath()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gaa12276168b9f6e856a43dd1253735a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetProgramInfoForErrors</definition>
        <argsstring>(const std::string &amp;key, const std::string &amp;value)</argsstring>
        <name>ArchSetProgramInfoForErrors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets additional program info to be reported to the terminal in case of a fatal error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga325e48a6d885a3ff58d569d68083bb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetProgramInfoForErrors</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>ArchGetProgramInfoForErrors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns currently set program info. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__group__arch___diagnostics_1gab1ac2a41d2ea550066a57d1e4309f8f8" kindref="member">ArchSetExtraLogInfoForErrors</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gab1ac2a41d2ea550066a57d1e4309f8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchSetExtraLogInfoForErrors</definition>
        <argsstring>(const std::string &amp;key, std::vector&lt; std::string &gt; const *lines)</argsstring>
        <name>ArchSetExtraLogInfoForErrors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const *</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Stores (or removes if <computeroutput>lines</computeroutput> is nullptr) a pointer to additional log data that will be output in the stack trace log in case of a fatal error. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the pointer <computeroutput>lines</computeroutput> is copied, not the pointed-to data. In addition, Arch might read the data pointed to by <computeroutput>lines</computeroutput> concurrently at any time. Thus it is the caller&apos;s responsibility to ensure that <computeroutput>lines</computeroutput> is both valid and not mutated until replacing or removing it by invoking this function again with the same <computeroutput>key</computeroutput> and different <computeroutput>lines</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gaa14a650d076020226569c45fb9b2ad67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchLogStackTrace</definition>
        <argsstring>(const std::string &amp;progName, const std::string &amp;reason, bool fatal=false, const std::string &amp;sessionLog=&quot;&quot;)</argsstring>
        <name>ArchLogStackTrace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>progName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fatal</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sessionLog</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Logs a stack trace to a file in /var/tmp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is similar to <computeroutput>ArchLogPostMortem()</computeroutput>, but will not fork an external process and only reports a stack trace. A file in /var/tmp is created with the name <computeroutput>st_APPNAME.XXXXXX</computeroutput>, where <computeroutput>mktemp</computeroutput> is used to make a unique extension for the file. If <computeroutput>sessionLog</computeroutput> is specified, then it will be appended to this file. A message is printed to <computeroutput>stderr</computeroutput> reporting that a stack trace has been taken and what file it has been written to. And if <computeroutput>fatal</computeroutput> is true, then the stack trace will be added to the stack_trace database table. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga214e9297e8dca8a9c6168940f92419c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchLogStackTrace</definition>
        <argsstring>(const std::string &amp;reason, bool fatal=false, const std::string &amp;sessionLog=&quot;&quot;)</argsstring>
        <name>ArchLogStackTrace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fatal</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sessionLog</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Logs a stack trace to a file in /var/tmp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is similar to <computeroutput>ArchLogPostMortem()</computeroutput>, but will not fork an external process and only reports a stack trace. A file in /var/tmp is created with the name <computeroutput>st_APPNAME.XXXXXX</computeroutput>, where <computeroutput>mktemp</computeroutput> is used to make a unique extension for the file. If <computeroutput>sessionLog</computeroutput> is specified, then it will be appended to this file. A message is printed to <computeroutput>stderr</computeroutput> reporting that a stack trace has been taken and what file it has been written to. And if <computeroutput>fatal</computeroutput> is true, then the stack trace will be added to the stack_trace database table. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga560a8df035479d4bc37a9b4035bc2cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::vector&lt; std::string &gt;</type>
        <definition>ARCH_API std::vector&lt;std::string&gt; ArchGetStackTrace</definition>
        <argsstring>(size_t maxDepth)</argsstring>
        <name>ArchGetStackTrace</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
        </param>
        <briefdescription>
<para>Return stack trace. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will return a vector of strings containing the current stack. The vector will be of maximum size <computeroutput>maxDepth</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga1847e9b7c38beea5f73c5ba8b48905e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchGetStackFrames</definition>
        <argsstring>(size_t maxDepth, std::vector&lt; uintptr_t &gt; *frames)</argsstring>
        <name>ArchGetStackFrames</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>std::vector&lt; uintptr_t &gt; *</type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Save frames of current stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function saves at maximum <computeroutput>maxDepth</computeroutput> frames of the current stack into the vector <computeroutput>frames</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga55d578119c362fd63ee74c708cd59d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API size_t</type>
        <definition>ARCH_API size_t ArchGetStackFrames</definition>
        <argsstring>(size_t maxDepth, uintptr_t *frames)</argsstring>
        <name>ArchGetStackFrames</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>uintptr_t *</type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Store at most <computeroutput>maxDepth</computeroutput> frames of the current stack into <computeroutput>frames</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of stack frames written to <computeroutput>frames</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1gafbd0e2858f6cb0ecbe6902ea9a49b2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchGetStackFrames</definition>
        <argsstring>(size_t maxDepth, size_t numFramesToSkipAtTop, std::vector&lt; uintptr_t &gt; *frames)</argsstring>
        <name>ArchGetStackFrames</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numFramesToSkipAtTop</declname>
        </param>
        <param>
          <type>std::vector&lt; uintptr_t &gt; *</type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Save frames of current stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function saves at maximum <computeroutput>maxDepth</computeroutput> frames of the current stack into the vector <computeroutput>frames</computeroutput>, skipping the first <computeroutput>numFramesToSkipAtTop</computeroutput> frames. The first frame will be at depth <computeroutput>numFramesToSkipAtTop</computeroutput> and the last at depth <computeroutput>numFramesToSkipAtTop</computeroutput> + <computeroutput>maxDepth</computeroutput> - 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga1712114085d4643d916dc010f2c77c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API size_t</type>
        <definition>ARCH_API size_t ArchGetStackFrames</definition>
        <argsstring>(size_t maxDepth, size_t numFramesToSkipAtTop, uintptr_t *frames)</argsstring>
        <name>ArchGetStackFrames</name>
        <param>
          <type>size_t</type>
          <declname>maxDepth</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numFramesToSkipAtTop</declname>
        </param>
        <param>
          <type>uintptr_t *</type>
          <declname>frames</declname>
        </param>
        <briefdescription>
<para>Store at most <computeroutput>maxDepth</computeroutput> frames of the current stack into <computeroutput>frames</computeroutput>, skipping the first <computeroutput>numFramesToSkipAtTop</computeroutput> frames. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the number of stack frames written to <computeroutput>frames</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga61d5e2776ad02ac3549edbf208da0526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchPrintStackFrames</definition>
        <argsstring>(std::ostream &amp;out, const std::vector&lt; uintptr_t &gt; &amp;frames, bool skipUnknownFrames=false)</argsstring>
        <name>ArchPrintStackFrames</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::vector&lt; uintptr_t &gt; &amp;</type>
          <declname>frames</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skipUnknownFrames</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Print stack frames to the given ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga1e3cf6a7309dc9c433b92ed32d4d2fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchCrashHandlerSystemv</definition>
        <argsstring>(const char *pathname, char *const argv[], int timeout, ArchCrashHandlerSystemCB callback, void *userData)</argsstring>
        <name>ArchCrashHandlerSystemv</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__group__arch___diagnostics_1gae5d005c694f995ddbe0a0223eb4fc9c1" kindref="member">ArchCrashHandlerSystemCB</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <briefdescription>
<para>Replacement for &apos;system&apos; safe for a crash handler. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a substitute for system() which does not allocate or free any data, and times out after <computeroutput>timeout</computeroutput> seconds if the operation in <computeroutput>argv</computeroutput> is not complete. Unlike system, it takes the full <computeroutput>pathname</computeroutput> of the program to run, and won&apos;t search the path. Also unlike system, <computeroutput>argv</computeroutput>[] are the separated arguments, starting with the program&apos;s name, as for execv. <computeroutput>callback</computeroutput> is called every second. <computeroutput>userData</computeroutput> is passed to <computeroutput>callback</computeroutput>. <computeroutput>callback</computeroutput> can be used, for example, to print a &apos;.&apos; repeatedly to show progress. The alarm used in this function could interfere with setitimer or other calls to alarm, and this function uses non-locking fork and exec if available so should not generally be used except following a catastrophe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/stackTrace.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___diagnostics_1ga7571c27f449e266c3905c919f0598f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetAddressInfo</definition>
        <argsstring>(void *address, std::string *objectPath, void **baseAddress, std::string *symbolName, void **symbolAddress)</argsstring>
        <name>ArchGetAddressInfo</name>
        <param>
          <type>void *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>objectPath</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>baseAddress</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>symbolAddress</declname>
        </param>
        <briefdescription>
<para>Returns information about the address <computeroutput>address</computeroutput> in the running program. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> if no information can be found, otherwise returns <computeroutput>true</computeroutput> and modifies the other arguments: <computeroutput>objectPath</computeroutput> is set to the absolute path to the executable or library the address is found in, <computeroutput>baseAddress</computeroutput> is the address where that object is loaded, <computeroutput>symbolName</computeroutput> is the symbolic name of the thing containing the address, and <computeroutput>symbolAddress</computeroutput> is the starting address of that thing. If no thing is found to contain the address then <computeroutput>symbolName</computeroutput> is cleared and <computeroutput>symbolAddress</computeroutput> is set to <computeroutput>NULL</computeroutput>. Any of the arguments except <computeroutput>address</computeroutput> can be <computeroutput>NULL</computeroutput> if the result isn&apos;t needed. This will return <computeroutput>false</computeroutput> if <computeroutput>NULL</computeroutput> is passed to <computeroutput>address</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/symbols.h" line="51" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__arch___diagnostics_1ga88ea75d4a5d40f26795e38c6dfce8fd8" prot="public" static="no">
        <name>ARCH_ERROR</name>
        <param><defname>msg</defname></param>
        <briefdescription>
<para>Unconditionally aborts the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is a literal string, a <computeroutput>const</computeroutput> <computeroutput>char*</computeroutput> (but not an <computeroutput>std::string</computeroutput>) that describes why the program is aborting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/error.h" line="72" column="9" bodyfile="pxr/base/arch/error.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___diagnostics_1ga2430131f749f579a0e307ec632de7552" prot="public" static="no">
        <name>ARCH_WARNING</name>
        <param><defname>msg</defname></param>
        <briefdescription>
<para>Prints a warning message to stderr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>is a literal string, a <computeroutput>const</computeroutput> <computeroutput>char*</computeroutput> (but not an <computeroutput>std::string</computeroutput>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/error.h" line="80" column="9" bodyfile="pxr/base/arch/error.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___diagnostics_1ga74a06f0131489e54a15bb00c013bbc57" prot="public" static="no">
        <name>ARCH_AXIOM</name>
        <param><defname>cond</defname></param>
        <briefdescription>
<para>Aborts the program if <computeroutput>cond</computeroutput> evaluates to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/error.h" line="85" column="9" bodyfile="pxr/base/arch/error.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions having to do with error reporting/handling. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
