<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_node_iterator" kind="class" language="C++" prot="public">
    <compoundname>PcpNodeIterator</compoundname>
    <includes refid="usd_2pcp_2iterator_8h" local="no">iterator.h</includes>
    <innerclass refid="class_pcp_node_iterator_1_1___ptr_proxy" prot="private">PcpNodeIterator::_PtrProxy</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_node_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="61" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_iterator_1acbbed9a32140e189eff624e9a18664cc" prot="public" static="no">
        <type><ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>using value_type =  PcpNodeRef</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="62" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_iterator_1adabe57c97af5568fe42d558a2a97fcd6" prot="public" static="no">
        <type><ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>using reference =  PcpNodeRef</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="63" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_iterator_1a43aae23301e40e6834a080a920395b72" prot="public" static="no">
        <type>_PtrProxy</type>
        <definition>using pointer =  _PtrProxy</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="64" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="65" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_node_iterator_1aabad41d517edc4e11d2f3f12f5004dd6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PcpPrimIndex</definition>
        <argsstring></argsstring>
        <name>PcpPrimIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="161" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_node_iterator_1ad33091d1fcf9bd7d0b5bb577f7069672" prot="private" static="no" mutable="no">
        <type>PcpPrimIndex_Graph *</type>
        <definition>PcpPrimIndex_Graph* _graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="179" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_node_iterator_1af8b8545a114c08473765097ba1b3d4ba" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _nodeIdx</definition>
        <argsstring></argsstring>
        <name>_nodeIdx</name>
        <initializer>= <ref refid="usd_2pcp_2types_8h_1a47d33cb3fadc3838de011adec4459efc" kindref="member">PCP_INVALID_INDEX</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="180" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_node_iterator_1af8a92523a8597fbcd8c1706dcdd3c734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpNodeIterator</definition>
        <argsstring>()=default</argsstring>
        <name>PcpNodeIterator</name>
        <briefdescription>
<para>Constructs an invalid iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1abb99ed5b9fc4130b92f5213bee3f03de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Pcp_CompressedSdSite</type>
        <definition>Pcp_CompressedSdSite GetCompressedSdSite</definition>
        <argsstring>(size_t layerIndex) const</argsstring>
        <name>GetCompressedSdSite</name>
        <param>
          <type>size_t</type>
          <declname>layerIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="71" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_ref" kindref="compound">reference</ref></type>
        <definition>reference operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="76" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="77" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_ref" kindref="compound">reference</ref></type>
        <definition>reference operator[]</definition>
        <argsstring>(const difference_type index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const difference_type</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="78" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1ad42527eaaacdb45959f74208136a4848" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type operator-</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="84" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1ad7283892396e93312427d3a5dfbd5b62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
        <definition>PcpNodeIterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="88" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a39e3d015cfe66c8d4d529c0e0df2edb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
        <definition>PcpNodeIterator&amp; operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="93" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1af5e4deb12d000a6350a839060c21711d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="98" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a782b1b689ae1ba201c47c47f6657e3b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="104" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a85478318e0bcbdbcc8d3b2f7b03c70a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator operator+</definition>
        <argsstring>(const difference_type increment) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="110" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a0aad840edab423d71bbc0e78a9664ab1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref></type>
        <definition>PcpNodeIterator operator-</definition>
        <argsstring>(const difference_type decrement) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="116" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a715a5d8bbe9d425170c0bae63099607f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
        <definition>PcpNodeIterator&amp; operator+=</definition>
        <argsstring>(const difference_type increment)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const difference_type</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="122" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a0cc1fc316daf8f7c598f500331cdd598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
        <definition>PcpNodeIterator&amp; operator-=</definition>
        <argsstring>(const difference_type decrement)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const difference_type</type>
          <declname>decrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="127" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a1b8fa9a669f0d5b74fb58720c7ee4b64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="132" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1ac18c09a1f2a75e397e3d7fa6eb6b8cab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="136" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1af73e48bb66469bf25b3dced099864aa7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="140" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1aa0b75b309ac10c76f351b86e75634169" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="145" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1ad8f54e0cffd0abe48d22883afe1c7d33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="150" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1af9087bfe36794916e22c6545fde91133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="155" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="155" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_node_iterator_1a1a1f8704526ffe4365ddebe59e0d3d13" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpNodeIterator</definition>
        <argsstring>(PcpPrimIndex_Graph *graph, size_t nodeIdx)</argsstring>
        <name>PcpNodeIterator</name>
        <param>
          <type>PcpPrimIndex_Graph *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nodeIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="162" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="162" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1aeb2624c7a86b765725fd80cd426e147d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="165" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1af998f1201f6ff5160003144e5818b8ba" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void decrement</definition>
        <argsstring>()</argsstring>
        <name>decrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="166" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1ae3915a223e99ebf2c6a054bea20cdae0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void advance</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>advance</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="167" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1aa6f70f9c5d97bf1dd02f72e8b414b6e7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>difference_type</type>
        <definition>difference_type distance_to</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>distance_to</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="168" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1a8510da44bf742ec445a2814afea7a468" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool equal</definition>
        <argsstring>(const PcpNodeIterator &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="class_pcp_node_iterator" kindref="compound">PcpNodeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="171" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_iterator_1afbda5def72ca573e3af2660546cb35f8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_pcp_node_ref" kindref="compound">reference</ref></type>
        <definition>reference dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/iterator.h" line="174" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="174" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object used to iterate over nodes in the prim index graph in strong-to-weak order. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/pcp/iterator.h" line="51" column="1" bodyfile="pxr/usd/pcp/iterator.h" bodystart="50" bodyend="181"/>
    <listofallmembers>
      <member refid="class_pcp_node_iterator_1ad33091d1fcf9bd7d0b5bb577f7069672" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>_graph</name></member>
      <member refid="class_pcp_node_iterator_1af8b8545a114c08473765097ba1b3d4ba" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>_nodeIdx</name></member>
      <member refid="class_pcp_node_iterator_1ae3915a223e99ebf2c6a054bea20cdae0" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>advance</name></member>
      <member refid="class_pcp_node_iterator_1af998f1201f6ff5160003144e5818b8ba" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>decrement</name></member>
      <member refid="class_pcp_node_iterator_1afbda5def72ca573e3af2660546cb35f8" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>dereference</name></member>
      <member refid="class_pcp_node_iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>difference_type</name></member>
      <member refid="class_pcp_node_iterator_1aa6f70f9c5d97bf1dd02f72e8b414b6e7" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>distance_to</name></member>
      <member refid="class_pcp_node_iterator_1a8510da44bf742ec445a2814afea7a468" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>equal</name></member>
      <member refid="class_pcp_node_iterator_1abb99ed5b9fc4130b92f5213bee3f03de" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>GetCompressedSdSite</name></member>
      <member refid="class_pcp_node_iterator_1aeb2624c7a86b765725fd80cd426e147d" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>increment</name></member>
      <member refid="class_pcp_node_iterator_1a8806ca091813ced0b0658fedaa448357" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>iterator_category</name></member>
      <member refid="class_pcp_node_iterator_1a5b18bb8c3a765334dd1e3bd2eb8374f3" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator *</name></member>
      <member refid="class_pcp_node_iterator_1ac18c09a1f2a75e397e3d7fa6eb6b8cab" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator!=</name></member>
      <member refid="class_pcp_node_iterator_1a85478318e0bcbdbcc8d3b2f7b03c70a6" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator+</name></member>
      <member refid="class_pcp_node_iterator_1ad7283892396e93312427d3a5dfbd5b62" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_node_iterator_1af5e4deb12d000a6350a839060c21711d" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator++</name></member>
      <member refid="class_pcp_node_iterator_1a715a5d8bbe9d425170c0bae63099607f" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator+=</name></member>
      <member refid="class_pcp_node_iterator_1ad42527eaaacdb45959f74208136a4848" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_node_iterator_1a0aad840edab423d71bbc0e78a9664ab1" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator-</name></member>
      <member refid="class_pcp_node_iterator_1a39e3d015cfe66c8d4d529c0e0df2edb8" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_node_iterator_1a782b1b689ae1ba201c47c47f6657e3b7" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator--</name></member>
      <member refid="class_pcp_node_iterator_1a0cc1fc316daf8f7c598f500331cdd598" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator-=</name></member>
      <member refid="class_pcp_node_iterator_1aef4e7d4e0fa56e9f7509c555f73d24d2" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator-&gt;</name></member>
      <member refid="class_pcp_node_iterator_1af73e48bb66469bf25b3dced099864aa7" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator&lt;</name></member>
      <member refid="class_pcp_node_iterator_1aa0b75b309ac10c76f351b86e75634169" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator&lt;=</name></member>
      <member refid="class_pcp_node_iterator_1a1b8fa9a669f0d5b74fb58720c7ee4b64" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator==</name></member>
      <member refid="class_pcp_node_iterator_1ad8f54e0cffd0abe48d22883afe1c7d33" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator&gt;</name></member>
      <member refid="class_pcp_node_iterator_1af9087bfe36794916e22c6545fde91133" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator&gt;=</name></member>
      <member refid="class_pcp_node_iterator_1a923464d743d395bcd695133aa8d876c5" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>operator[]</name></member>
      <member refid="class_pcp_node_iterator_1af8a92523a8597fbcd8c1706dcdd3c734" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>PcpNodeIterator</name></member>
      <member refid="class_pcp_node_iterator_1a1a1f8704526ffe4365ddebe59e0d3d13" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>PcpNodeIterator</name></member>
      <member refid="class_pcp_node_iterator_1aabad41d517edc4e11d2f3f12f5004dd6" prot="private" virt="non-virtual"><scope>PcpNodeIterator</scope><name>PcpPrimIndex</name></member>
      <member refid="class_pcp_node_iterator_1a43aae23301e40e6834a080a920395b72" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>pointer</name></member>
      <member refid="class_pcp_node_iterator_1adabe57c97af5568fe42d558a2a97fcd6" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>reference</name></member>
      <member refid="class_pcp_node_iterator_1acbbed9a32140e189eff624e9a18664cc" prot="public" virt="non-virtual"><scope>PcpNodeIterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
