<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_xformable" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomXformable</compoundname>
    <basecompoundref refid="class_usd_geom_imageable" prot="public" virt="non-virtual">UsdGeomImageable</basecompoundref>
    <derivedcompoundref refid="class_usd_geom_boundable" prot="public" virt="non-virtual">UsdGeomBoundable</derivedcompoundref>
    <derivedcompoundref refid="class_usd_geom_camera" prot="public" virt="non-virtual">UsdGeomCamera</derivedcompoundref>
    <derivedcompoundref refid="class_usd_geom_xform" prot="public" virt="non-virtual">UsdGeomXform</derivedcompoundref>
    <derivedcompoundref refid="class_usd_lux_light_filter" prot="public" virt="non-virtual">UsdLuxLightFilter</derivedcompoundref>
    <derivedcompoundref refid="class_usd_lux_nonboundable_light_base" prot="public" virt="non-virtual">UsdLuxNonboundableLightBase</derivedcompoundref>
    <derivedcompoundref refid="class_usd_lux_plugin_light" prot="public" virt="non-virtual">UsdLuxPluginLight</derivedcompoundref>
    <derivedcompoundref refid="class_usd_media_spatial_audio" prot="public" virt="non-virtual">UsdMediaSpatialAudio</derivedcompoundref>
    <derivedcompoundref refid="class_usd_vol_field_base" prot="public" virt="non-virtual">UsdVolFieldBase</derivedcompoundref>
    <includes refid="xformable_8h" local="no">xformable.h</includes>
    <innerclass refid="class_usd_geom_xformable_1_1_xform_query" prot="public">UsdGeomXformable::XformQuery</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_xformable_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741a033ea5f40e4407ad16629e9a769ac9c1" kindref="member">UsdSchemaKind::AbstractTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="258" column="1" bodyfile="pxr/usd/usdGeom/xformable.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_xformable_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="311" column="1" bodyfile="pxr/usd/usdGeom/xformable.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomXformable</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomXformable</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_xformable_1ad072bbfa1381c569964857648dbd2823" kindref="member">UsdGeomXformable::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="264" column="1" bodyfile="pxr/usd/usdGeom/xformable.h" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomXformable</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomXformable</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="272" column="1" bodyfile="pxr/usd/usdGeom/xformable.h" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomXformable</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomXformable</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetXformOpOrderAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetXformOpOrderAttr</name>
        <briefdescription>
<para>Encodes the sequence of transformation operations in the order in which they should be pushed onto a transform stack while visiting a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>&apos;s prims in a graph traversal that will effect the desired positioning for this prim and its descendant prims. </para>
        </briefdescription>
        <detaileddescription>
<para>You should rarely, if ever, need to manipulate this attribute directly. It is managed by the <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" kindref="member">SetResetXformStack()</ref>, and <ref refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" kindref="member">SetXformOpOrder()</ref>, and consulted by <ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref> and <ref refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" kindref="member">GetLocalTransformation()</ref>.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token[] xformOpOrder</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_vt_array" kindref="compound">VtArray&lt;TfToken&gt;</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;TokenArray   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateXformOpOrderAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateXformOpOrderAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" kindref="member">GetXformOpOrderAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddXformOp</definition>
        <argsstring>(UsdGeomXformOp::Type const opType, UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionDouble, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddXformOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">UsdGeomXformOp::Type</ref> const</type>
          <declname>opType</declname>
        </param>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a5c205bb93ab724aad7931d0c2271fd9c" kindref="member">UsdGeomXformOp::PrecisionDouble</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add an affine transformation to the local stack represented by this Xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>This will fail if there is already a transform operation of the same name in the ordered ops on this prim (i.e. as returned by <ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref>), or if an op of the same name exists at all on the prim with a different precision than that specified.</para>
<para>The newly created operation will become the most-locally applied transformation on the prim, and will appear last in the list returned by <ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref>. It is OK to begin authoring values to the returned <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> immediately, interspersed with subsequent calls to <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> - just note the order of application, which <emphasis>can</emphasis> be changed at any time (and in stronger layers) via <ref refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" kindref="member">SetXformOpOrder()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opType</parametername>
</parameternamelist>
<parameterdescription>
<para>is the type of transform operation, one of <ref refid="class_usd_geom_xform_op_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">UsdGeomXformOp::Type</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>allows you to specify the precision with which you desire to encode the data. This should be one of the values in the enum <ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> . </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opSuffix</parametername>
</parameternamelist>
<parameterdescription>
<para>allows you to specify the purpose/meaning of the op in the stack. When opSuffix is specified, the associated attribute&apos;s name is set to &quot;xformOp:&lt;opType&gt;:&lt;opSuffix&gt;&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isInverseOp</parametername>
</parameternamelist>
<parameterdescription>
<para>is used to indicate an inverse transformation operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> that can be used to author to the operation. An error is issued and the returned object will be invalid (evaluate to false) if the op being added already exists in <ref refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" kindref="member">xformOpOrder</ref> or if the arguments supplied are invalid.</para>
</simplesect>
<simplesect kind="note"><para>If the attribute associated with the op already exists, but isn&apos;t of the requested precision, a coding error is issued, but a valid xformOp is returned with the existing attribute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetXformOp</definition>
        <argsstring>(UsdGeomXformOp::Type const opType, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetXformOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">UsdGeomXformOp::Type</ref> const</type>
          <declname>opType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get an affine transformation from the local stack represented by this Xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>This will return an invalid op if there is no transform operation of the same name in the ordered ops on this prim (i.e. as returned by <ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref>)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opType</parametername>
</parameternamelist>
<parameterdescription>
<para>is the type of transform operation, one of <ref refid="class_usd_geom_xform_op_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">UsdGeomXformOp::Type</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opSuffix</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the purpose/meaning of the op in the stack. When opSuffix is specified, the associated attribute&apos;s name is &quot;xformOp:&lt;opType&gt;:&lt;opSuffix&gt;&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isInverseOp</parametername>
</parameternamelist>
<parameterdescription>
<para>is used to indicate an inverse transformation operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> with the specified attributes. The returned object will be invalid (evaluate to false) if the op requested does not exist in <ref refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" kindref="member">xformOpOrder</ref> or if the arguments supplied are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddTranslateOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionDouble, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddTranslateOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a5c205bb93ab724aad7931d0c2271fd9c" kindref="member">UsdGeomXformOp::PrecisionDouble</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a translate operation to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetTranslateOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetTranslateOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a translate operation from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddScaleOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddScaleOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a scale operation to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetScaleOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetScaleOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a scale operation from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateXOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateXOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation about the X-axis to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle value of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateXOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateXOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation about the X-axis from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateYOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateYOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation about the Y-axis to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle value of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateYOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateYOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation about the Y-axis from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateZOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateZOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation about the Z-axis to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateZOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateZOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation about the Z-axis from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateXYZOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateXYZOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with XYZ rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle value of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateXYZOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateXYZOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with XYZ rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateXZYOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateXZYOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with XZY rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle values of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateXZYOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateXZYOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with XZY rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateYXZOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateYXZOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with YXZ rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle values of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateYXZOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateYXZOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with YXZ rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateYZXOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateYZXOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with YZX rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle values of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateYZXOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateYZXOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with YZX rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateZXYOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateZXYOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with ZXY rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle values of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateZXYOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateZXYOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with ZXY rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddRotateZYXOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddRotateZYXOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a rotation op with ZYX rotation order to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the angle values of the resulting <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> <bold>in degrees</bold> <simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetRotateZYXOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetRotateZYXOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a rotation op with ZYX rotation order from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref>, <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on angle packing order</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddOrientOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionFloat, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddOrientOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a orient op (arbitrary axis/angle rotation) to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetOrientOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetOrientOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get an orient op (arbitrary axis/angle rotation) from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp AddTransformOp</definition>
        <argsstring>(UsdGeomXformOp::Precision const precision=UsdGeomXformOp::PrecisionDouble, TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>AddTransformOp</name>
        <param>
          <type><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref> const</type>
          <declname>precision</declname>
          <defval><ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a5c205bb93ab724aad7931d0c2271fd9c" kindref="member">UsdGeomXformOp::PrecisionDouble</ref></defval>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a tranform op (4x4 matrix transformation) to the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref></para>
</simplesect>
Note: This method takes a precision argument only to be consistent with the other types of xformOps. The only valid precision here is double since matrix values cannot be encoded in floating-pt precision in Sdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="728" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp GetTransformOp</definition>
        <argsstring>(TfToken const &amp;opSuffix=TfToken(), bool isInverseOp=false) const</argsstring>
        <name>GetTransformOp</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>opSuffix</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isInverseOp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get a tranform op (4x4 matrix transformation) from the local stack represented by this xformable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" kindref="member">GetXformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetResetXformStack</definition>
        <argsstring>(bool resetXform) const</argsstring>
        <name>SetResetXformStack</name>
        <param>
          <type>bool</type>
          <declname>resetXform</declname>
        </param>
        <briefdescription>
<para>Specify whether this prim&apos;s transform should reset the transformation stack inherited from its parent prim. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, parent transforms are inherited. <ref refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" kindref="member">SetResetXformStack()</ref> can be called at any time during authoring, but will always add a &apos;!resetXformStack!&apos; op as the <emphasis>first</emphasis> op in the ordered list, if one does not exist already. If one already exists, and <computeroutput>resetXform</computeroutput> is false, it will remove all ops upto and including the last &quot;!resetXformStack!&quot; op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="751" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetResetXformStack</definition>
        <argsstring>() const</argsstring>
        <name>GetResetXformStack</name>
        <briefdescription>
<para>Does this prim reset its parent&apos;s inherited transformation? </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if &quot;!resetXformStack!&quot; appears <emphasis>anywhere</emphasis> in xformOpOrder. When this returns true, all ops upto the last &quot;!resetXformStack!&quot; in xformOpOrder are ignored when computing the local transformation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="760" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool SetXformOpOrder</definition>
        <argsstring>(std::vector&lt; UsdGeomXformOp &gt; const &amp;orderedXformOps, bool resetXformStack=false) const</argsstring>
        <name>SetXformOpOrder</name>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; const &amp;</type>
          <declname>orderedXformOps</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resetXformStack</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reorder the already-existing transform ops on this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements in <computeroutput>orderedXformOps</computeroutput> must be valid and represent attributes on this prim. Note that it is <emphasis>not</emphasis> required that all the existing operations be present in <computeroutput>orderedXformOps</computeroutput>, so this method can be used to completely change the transformation structure applied to the prim.</para>
<para>If <computeroutput>resetXformStack</computeroutput> is set to true, then "!resetXformOp! will be set as the first op in xformOpOrder, to indicate that the prim does not inherit its parent&apos;s transformation.</para>
<para><simplesect kind="note"><para>If you wish to re-specify a prim&apos;s transformation completely in a stronger layer, you should first call this method with an <emphasis>empty</emphasis> <computeroutput>orderedXformOps</computeroutput> vector. From there you can call <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> just as if you were authoring to the prim from scratch.</para>
</simplesect>
<simplesect kind="return"><para>false if any of the elements of <computeroutput>orderedXformOps</computeroutput> are not extant on this prim, or if an error occurred while authoring the ordering metadata. Under either condition, no scene description is authored.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="784" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt;</type>
        <definition>USDGEOM_API std::vector&lt;UsdGeomXformOp&gt; GetOrderedXformOps</definition>
        <argsstring>(bool *resetsXformStack) const</argsstring>
        <name>GetOrderedXformOps</name>
        <param>
          <type>bool *</type>
          <declname>resetsXformStack</declname>
        </param>
        <briefdescription>
<para>Return the ordered list of transform operations to be applied to this prim, in least-to-most-local order. </para>
        </briefdescription>
        <detaileddescription>
<para>This is determined by the intersection of authored op-attributes and the explicit ordering of those attributes encoded in the <computeroutput>xformOpOrder</computeroutput> attribute on this prim. Any entries in <computeroutput>xformOpOrder</computeroutput> that do not correspond to valid attributes on the xformable prim are skipped and a warning is issued.</para>
<para>A UsdGeomTransformable that has not had any ops added via <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> will return an empty vector.</para>
<para>The function also sets <computeroutput>resetsXformStack</computeroutput> to true if &quot;!resetXformStack!&quot; appears <emphasis>anywhere</emphasis> in xformOpOrder (i.e., if the prim resets its parent&apos;s inherited transformation).</para>
<para><simplesect kind="note"><para>A coding error is issued if resetsXformStack is NULL.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" kindref="member">GetResetXformStack()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="805" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool ClearXformOpOrder</definition>
        <argsstring>() const</argsstring>
        <name>ClearXformOpOrder</name>
        <briefdescription>
<para>Clears the local transform stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref></type>
        <definition>USDGEOM_API UsdGeomXformOp MakeMatrixXform</definition>
        <argsstring>() const</argsstring>
        <name>MakeMatrixXform</name>
        <briefdescription>
<para>Clears the existing local transform stack and creates a new xform op of type &apos;transform&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>This API is provided for convenience since this is the most common xform authoring operation.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" kindref="member">ClearXformOpOrder()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" kindref="member">AddTransformOp()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool TransformMightBeTimeVarying</definition>
        <argsstring>() const</argsstring>
        <name>TransformMightBeTimeVarying</name>
        <briefdescription>
<para>Determine whether there is any possibility that this prim&apos;s <emphasis>local</emphasis> transformation may vary over time. </para>
        </briefdescription>
        <detaileddescription>
<para>The determination is based on a snapshot of the authored state of the op attributes on the prim, and may become invalid in the face of further authoring. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool TransformMightBeTimeVarying</definition>
        <argsstring>(const std::vector&lt; UsdGeomXformOp &gt; &amp;ops) const</argsstring>
        <name>TransformMightBeTimeVarying</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Determine whether there is any possibility that this prim&apos;s <emphasis>local</emphasis> transformation may vary over time, using a pre-fetched (cached) list of ordered xform ops supplied by the client. </para>
        </briefdescription>
        <detaileddescription>
<para>The determination is based on a snapshot of the authored state of the op attributes on the prim, and may become invalid in the face of further authoring. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="840" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetTimeSamples</definition>
        <argsstring>(std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamples</name>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Sets <computeroutput>times</computeroutput> to the union of all the timesamples at which xformOps that are included in the xformOpOrder attribute are authored. </para>
        </briefdescription>
        <detaileddescription>
<para>This clears the <computeroutput>times</computeroutput> vector before accumulating sample times from all the xformOps.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="851" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetTimeSamplesInInterval</definition>
        <argsstring>(const GfInterval &amp;interval, std::vector&lt; double &gt; *times) const</argsstring>
        <name>GetTimeSamplesInInterval</name>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Sets <computeroutput>times</computeroutput> to the union of all the timesamples in the interval, <computeroutput>interval</computeroutput>, at which xformOps that are included in the xformOpOrder attribute are authored. </para>
        </briefdescription>
        <detaileddescription>
<para>This clears the <computeroutput>times</computeroutput> vector before accumulating sample times from all the xformOps.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_attribute_1a0aba275933a77f28ab44b750964aa9a2" kindref="member">UsdAttribute::GetTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetLocalTransformation</definition>
        <argsstring>(GfMatrix4d *transform, bool *resetsXformStack, const UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>GetLocalTransformation</name>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>resetsXformStack</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Computes the fully-combined, local-to-parent transformation for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>If a client does not need to manipulate the individual ops themselves, and requires only the combined transform on this prim, this method will take care of all the data marshalling and linear algebra needed to combine the ops into a 4x4 affine transformation matrix, in double-precision, regardless of the precision of the op inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output parameter that will hold the local transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetsXformStack</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output parameter that informs client whether they need to reset the transform stack before pushing <computeroutput>transform</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> at which to sample the ops.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if there was an error reading data.</para>
</simplesect>
<simplesect kind="note"><para>A coding error is issued if <computeroutput>transform</computeroutput> or <computeroutput>resetsXformStack</computeroutput> is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool GetLocalTransformation</definition>
        <argsstring>(GfMatrix4d *transform, bool *resetsXformStack, const std::vector&lt; UsdGeomXformOp &gt; &amp;ops, const UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>GetLocalTransformation</name>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>resetsXformStack</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Computes the fully-combined, local-to-parent transformation for this prim as efficiently as possible, using a pre-fetched (cached) list of ordered xform ops supplied by the client. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output parameter that will hold the local transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resetsXformStack</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output parameter that informs client whether they need to reset the transform stack before pushing <computeroutput>transform</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>is the ordered set of xform ops for this prim, and will be queried without any validity checking. Passing this in can save significant value-resolution costs, if the client is able to retain this data from a call to <ref refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" kindref="member">GetOrderedXformOps()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> at which to sample the ops.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if there was an error reading data.</para>
</simplesect>
<simplesect kind="note"><para>A coding error is issued if <computeroutput>transform</computeroutput> or <computeroutput>resetsXformStack</computeroutput> is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="939" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_xformable_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ad072bbfa1381c569964857648dbd2823" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref></type>
        <definition>static USDGEOM_API UsdGeomXformable Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomXformable(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool GetTimeSamples</definition>
        <argsstring>(std::vector&lt; UsdGeomXformOp &gt; const &amp;orderedXformOps, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetTimeSamples</name>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; const &amp;</type>
          <declname>orderedXformOps</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Returns the union of all the timesamples at which the attributes belonging to the given <computeroutput>orderedXformOps</computeroutput> are authored. </para>
        </briefdescription>
        <detaileddescription>
<para>This clears the <computeroutput>times</computeroutput> vector before accumulating sample times from <computeroutput>orderedXformOps</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" kindref="member">UsdGeomXformable::GetTimeSamples</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool GetTimeSamplesInInterval</definition>
        <argsstring>(std::vector&lt; UsdGeomXformOp &gt; const &amp;orderedXformOps, const GfInterval &amp;interval, std::vector&lt; double &gt; *times)</argsstring>
        <name>GetTimeSamplesInInterval</name>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; const &amp;</type>
          <declname>orderedXformOps</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_interval" kindref="compound">GfInterval</ref> &amp;</type>
          <declname>interval</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>Returns the union of all the timesamples in the <computeroutput>interval</computeroutput> at which the attributes belonging to the given <computeroutput>orderedXformOps</computeroutput> are authored. </para>
        </briefdescription>
        <detaileddescription>
<para>This clears the <computeroutput>times</computeroutput> vector before accumulating sample times from <computeroutput>orderedXformOps</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" kindref="member">UsdGeomXformable::GetTimeSamplesInInterval</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool GetLocalTransformation</definition>
        <argsstring>(GfMatrix4d *transform, std::vector&lt; UsdGeomXformOp &gt; const &amp;ops, const UsdTimeCode time)</argsstring>
        <name>GetLocalTransformation</name>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt; const &amp;</type>
          <declname>ops</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. This is a static version of the preceding function that takes a cached list of ordered xform ops. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>is the output parameter that will hold the local transform. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>is the ordered set of xform ops that must be combined together to compute the local transformation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref> at which to sample the ops.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if there was an error reading data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsTransformationAffectedByAttrNamed</definition>
        <argsstring>(const TfToken &amp;attrName)</argsstring>
        <name>IsTransformationAffectedByAttrNamed</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>attrName</declname>
        </param>
        <briefdescription>
<para>Returns true if the attribute named <computeroutput>attrName</computeroutput> could affect the local transformation of an xformable prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="964" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_xformable_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_imageable_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <reimplementedby refid="class_usd_vol_field_base_1a34ce525a51f595a6b87f70afbafc2e96">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_nonboundable_light_base_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_boundable_light_base_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_vol_field_asset_1a34ce525a51f595a6b87f70afbafc2e96">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_sphere_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_distant_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_disk_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_portal_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_geometry_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_cylinder_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_rect_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_vol_open_v_d_b_asset_1a34ce525a51f595a6b87f70afbafc2e96">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_vol_field3_d_asset_1a34ce525a51f595a6b87f70afbafc2e96">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_skel_skeleton_1a79df5075439172ba191c1de8af616879">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_skel_root_1a79df5075439172ba191c1de8af616879">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_plugin_light_filter_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_plugin_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_vol_volume_1a34ce525a51f595a6b87f70afbafc2e96">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_proc_generative_procedural_1a69f2b85c953c2cadf65f80ac0d4781af">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_light_filter_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_dome_light_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_lux_dome_light__1_1ac19433aa62f0ecfb00450abefb7ccd4f">_GetSchemaKind</reimplementedby>
        <reimplementedby refid="class_usd_media_spatial_audio_1a4b449c2d8fd036608b3560779b7be4a3">_GetSchemaKind</reimplementedby>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="307" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_xformable_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="315" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_xformable_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_imageable_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <reimplementedby refid="class_usd_vol_field_base_1a356aa28f8af508383319bbd3645b6026">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_nonboundable_light_base_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_boundable_light_base_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_vol_field_asset_1a356aa28f8af508383319bbd3645b6026">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_sphere_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_distant_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_disk_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_portal_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_geometry_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_cylinder_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_rect_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_vol_open_v_d_b_asset_1a356aa28f8af508383319bbd3645b6026">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_vol_field3_d_asset_1a356aa28f8af508383319bbd3645b6026">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_skel_skeleton_1a55221575e16049b1dbd6147c54af4f43">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_skel_root_1a55221575e16049b1dbd6147c54af4f43">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_plugin_light_filter_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_plugin_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_vol_volume_1a356aa28f8af508383319bbd3645b6026">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_proc_generative_procedural_1a66ed99efc245a0752bc7439dc47a593e">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_light_filter_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_dome_light_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_lux_dome_light__1_1a3c52f215cf5ae7b408293d0b504d07c0">_GetTfType</reimplementedby>
        <reimplementedby refid="class_usd_media_spatial_audio_1a0761fce9ddea0f86c69c833dfb52348b">_GetTfType</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1afbeb07c1f6bc7ed8c7d362c06f32a7ca" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _GetXformOpOrderValue</definition>
        <argsstring>(VtTokenArray *xformOpOrder) const</argsstring>
        <name>_GetXformOpOrderValue</name>
        <param>
          <type>VtTokenArray *</type>
          <declname>xformOpOrder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="970" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_xformable_1aed34fb73897ddbd1837e5ad54f871264" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> &gt;</type>
        <definition>std::vector&lt;UsdGeomXformOp&gt; _GetOrderedXformOps</definition>
        <argsstring>(bool *resetsXformStack, bool withAttributeQueries) const</argsstring>
        <name>_GetOrderedXformOps</name>
        <param>
          <type>bool *</type>
          <declname>resetsXformStack</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>withAttributeQueries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/xformable.h" line="974" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all transformable prims, which allows arbitrary sequences of component affine transformations to be encoded. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>You may find it useful to review <ref refid="usd_geom_page_front_1UsdGeom_LinAlgBasics" kindref="member">Linear Algebra in UsdGeom</ref> while reading this class description.</para>
</simplesect>
<bold>Supported Component Transformation Operations</bold></para>
<para><ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> currently supports arbitrary sequences of the following operations, each of which can be encoded in an attribute of the proper shape in any supported precision: <itemizedlist>
<listitem><para>translate - 3D </para>
</listitem>
<listitem><para>scale - 3D </para>
</listitem>
<listitem><para>rotateX - 1D angle in degrees </para>
</listitem>
<listitem><para>rotateY - 1D angle in degrees </para>
</listitem>
<listitem><para>rotateZ - 1D angle in degrees </para>
</listitem>
<listitem><para>rotateABC - 3D where ABC can be any combination of the six principle Euler Angle sets: XYZ, XZY, YXZ, YZX, ZXY, ZYX. See <ref refid="class_usd_geom_xform_op_1usdGeom_rotationPackingOrder" kindref="member">note on rotation packing order</ref> </para>
</listitem>
<listitem><para>orient - 4D (quaternion) </para>
</listitem>
<listitem><para>transform - 4x4D</para>
</listitem>
</itemizedlist>
<bold>Creating a Component Transformation</bold></para>
<para>To add components to a <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> prim, simply call <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> with the desired op type, as enumerated in <ref refid="class_usd_geom_xform_op_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">UsdGeomXformOp::Type</ref>, and the desired precision, which is one of <ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2" kindref="member">UsdGeomXformOp::Precision</ref>. Optionally, you can also provide an &quot;op suffix&quot; for the operator that disambiguates it from other components of the same type on the same prim.</para>
<para>Application-specific transform schemas can use the suffixes to fill a role similar to that played by AbcGeom::XformOp&apos;s &quot;Hint&quot; enums for their own round-tripping logic.</para>
<para>We also provide specific &quot;Add&quot; API for each type, for clarity and conciseness, e.g. <ref refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" kindref="member">AddTranslateOp()</ref>, <ref refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" kindref="member">AddRotateXYZOp()</ref> etc.</para>
<para><ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> will return a <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> object, which is a schema on a newly created <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> that provides convenience API for authoring and computing the component transformations. The <ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref> can then be used to author any number of timesamples and default for the op.</para>
<para>Each successive call to <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> adds an operator that will be applied &quot;more locally&quot; than the preceding operator, just as if we were pushing transforms onto a transformation stack - which is precisely what should happen when the operators are consumed by a reader.</para>
<para><simplesect kind="note"><para>If you can, please try to use the <ref refid="class_usd_geom_xform_common_a_p_i" kindref="compound">UsdGeomXformCommonAPI</ref>, which wraps the <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> with an interface in which Op creation is taken care of for you, and there is a much higher chance that the data you author will be importable without flattening into other DCC&apos;s, as it conforms to a fixed set of Scale-Rotate-Translate Ops.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_geom_xformable_1usdGeom_xformableExamples" kindref="member">Using the Authoring API</ref></para>
</simplesect>
<bold>Data Encoding and Op Ordering</bold></para>
<para>Because there is no &quot;fixed schema&quot; of operations, all of the attributes that encode transform operations are dynamic, and are scoped in the namespace &quot;xformOp&quot;. The second component of an attribute&apos;s name provides the <emphasis>type</emphasis> of operation, as listed above. An &quot;xformOp&quot; attribute can have additional namespace components derived from the <emphasis>opSuffix</emphasis> argument to the <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> suite of methods, which provides a preferred way of naming the ops such that we can have multiple &quot;translate&quot; ops with unique attribute names. For example, in the attribute named &quot;xformOp:translate:maya:pivot&quot;, &quot;translate&quot; is the type of operation and &quot;maya:pivot&quot; is the suffix.</para>
<para>The following ordered list of attribute declarations in usda define a basic Scale-Rotate-Translate with XYZ Euler angles, wherein the translation is double-precision, and the remainder of the ops are single, in which we will:</para>
<para><orderedlist>
<listitem>
<para>Scale by 2.0 in each dimension </para>
</listitem>
<listitem>
<para>Rotate about the X, Y, and Z axes by 30, 60, and 90 degrees, respectively </para>
</listitem>
<listitem>
<para>Translate by 100 units in the Y direction </para>
</listitem>
</orderedlist>
</para>
<para><programlisting><codeline><highlight class="normal">float3<sp/>xformOp:rotateXYZ<sp/>=<sp/>(30,<sp/>60,<sp/>90)</highlight></codeline>
<codeline><highlight class="normal">float3<sp/>xformOp:scale<sp/>=<sp/>(2,<sp/>2,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>100,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[<sp/>&quot;xformOp:translate&quot;,<sp/>&quot;xformOp:rotateXYZ&quot;,<sp/>&quot;xformOp:scale&quot;<sp/>]</highlight></codeline>
</programlisting></para>
<para>The attributes appear in the dictionary order in which USD, by default, sorts them. To ensure the ops are recovered and evaluated in the correct order, the schema introduces the <bold>xformOpOrder</bold> attribute, which contains the names of the op attributes, in the precise sequence in which they should be pushed onto a transform stack. <bold>Note</bold> that the order is opposite to what you might expect, given the matrix algebra described in <ref refid="usd_geom_page_front_1UsdGeom_LinAlgBasics" kindref="member">Linear Algebra in UsdGeom</ref>. This also dictates order of op creation, since each call to <ref refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" kindref="member">AddXformOp()</ref> adds a new op to the end of the <bold>xformOpOrder</bold> array, as a new &quot;most-local&quot; operation. See <ref refid="class_usd_geom_xformable_1usdGeom_xformableExamples" kindref="member">Example 2 below</ref> for C++ code that could have produced this USD.</para>
<para>If it were important for the prim&apos;s rotations to be independently overridable, we could equivalently (at some performance cost) encode the transformation also like so: <programlisting><codeline><highlight class="normal">float<sp/>xformOp:rotateX<sp/>=<sp/>30</highlight></codeline>
<codeline><highlight class="normal">float<sp/>xformOp:rotateY<sp/>=<sp/>60</highlight></codeline>
<codeline><highlight class="normal">float<sp/>xformOp:rotateZ<sp/>=<sp/>90</highlight></codeline>
<codeline><highlight class="normal">float3<sp/>xformOp:scale<sp/>=<sp/>(2,<sp/>2,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>100,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[<sp/>&quot;xformOp:translate&quot;,<sp/>&quot;xformOp:rotateZ&quot;,<sp/>&quot;xformOp:rotateY&quot;,<sp/>&quot;xformOp:rotateX&quot;,<sp/>&quot;xformOp:scale&quot;<sp/>]</highlight></codeline>
</programlisting></para>
<para>Again, note that although we are encoding an XYZ rotation, the three rotations appear in the <bold>xformOpOrder</bold> in the opposite order, with Z, followed, by Y, followed by X.</para>
<para>Were we to add a Maya-style scalePivot to the above example, it might look like the following: <programlisting><codeline><highlight class="normal">float3<sp/>xformOp:rotateXYZ<sp/>=<sp/>(30,<sp/>60,<sp/>90)</highlight></codeline>
<codeline><highlight class="normal">float3<sp/>xformOp:scale<sp/>=<sp/>(2,<sp/>2,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal">double3<sp/>xformOp:translate<sp/>=<sp/>(0,<sp/>100,<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">double3<sp/>xformOp:translate:scalePivot</highlight></codeline>
<codeline><highlight class="normal">uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[<sp/>&quot;xformOp:translate&quot;,<sp/>&quot;xformOp:rotateXYZ&quot;,<sp/>&quot;xformOp:translate:scalePivot&quot;,<sp/>&quot;xformOp:scale&quot;<sp/>]</highlight></codeline>
</programlisting></para>
<para><bold>Paired &quot;Inverted&quot; Ops</bold></para>
<para>We have been claiming that the ordered list of ops serves as a set of instructions to a transform stack, but you may have noticed in the last example that there is a missing operation - the pivot for the scale op needs to be applied in its inverse-form as a final (most local) op! In the AbcGeom::Xform schema, we would have encoded an actual &quot;final&quot; translation op whose value was authored by the exporter as the negation of the pivot&apos;s value. However, doing so would be brittle in USD, given that each op can be independently overridden, and the constraint that one attribute must be maintained as the negation of the other in order for successful re-importation of the schema cannot be expressed in USD.</para>
<para>Our solution leverages the <bold>xformOpOrder</bold> member of the schema, which, in addition to ordering the ops, may also contain one of two special tokens that address the paired op and &quot;stack resetting&quot; behavior.</para>
<para>The &quot;paired op&quot; behavior is encoded as an &quot;!invert!&quot; prefix in <bold>xformOpOrder</bold>, as the result of an AddXformOp(isInverseOp=True) call.</para>
<para>The <bold>xformOpOrder</bold> for the last example would look like: <programlisting><codeline><highlight class="normal">uniform<sp/>token[]<sp/>xformOpOrder<sp/>=<sp/>[<sp/>&quot;xformOp:translate&quot;,<sp/>&quot;xformOp:rotateXYZ&quot;,<sp/>&quot;xformOp:translate:scalePivot&quot;,<sp/>&quot;xformOp:scale&quot;,<sp/>&quot;!invert!xformOp:translate:scalePivot&quot;<sp/>]</highlight></codeline>
</programlisting></para>
<para>When asked for its value via <ref refid="class_usd_geom_xform_op_1a4eba3e8ff2317982f9bf0bccb7626a2b" kindref="member">UsdGeomXformOp::GetOpTransform()</ref>, an &quot;inverted&quot; Op (i.e. the &quot;inverted&quot; half of a set of paired Ops) will fetch the value of its paired attribute and return its negation. This works for all op types - an error will be issued if a &quot;transform&quot; type op is singular and cannot be inverted. When getting the authored value of an inverted op via <ref refid="class_usd_geom_xform_op_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdGeomXformOp::Get()</ref>, the raw, uninverted value of the associated attribute is returned.</para>
<para>For the sake of robustness, <bold>setting a value on an inverted op is disallowed.</bold> Attempting to set a value on an inverted op will result in a coding error and no value being set.</para>
<para><bold>Resetting the Transform Stack</bold></para>
<para>The other special op/token that can appear in <emphasis>xformOpOrder</emphasis> is <emphasis>&quot;!resetXformStack!&quot;</emphasis>, which, appearing as the first element of <emphasis>xformOpOrder</emphasis>, indicates this prim should not inherit the transformation of its namespace parent. See <ref refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" kindref="member">SetResetXformStack()</ref></para>
<para><bold>Expected Behavior for &quot;Missing&quot; Ops</bold></para>
<para>If an importer expects Scale-Rotate-Translate operations, but a prim has only translate and rotate ops authored, the importer should assume an identity scale. This allows us to optimize the data a bit, if only a few components of a very rich schema (like Maya&apos;s) are authored in the app.</para>
<para><anchor id="class_usd_geom_xformable_1usdGeom_xformableExamples"/><bold>Using the C++ API</bold></para>
<para>#1. Creating a simple transform matrix encoding <programlisting filename="examples_usdGeom.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CreateMatrixWithDefault(<ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gprim,<sp/><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defValue)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/>transform<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" kindref="member">MakeMatrixXform</ref>()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transform.Set(defValue,<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> #2. Creating the simple SRT from the example above <programlisting filename="examples_usdGeom.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CreateExampleSRT(<ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gprim)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>insurance,<sp/>we<sp/>will<sp/>make<sp/>sure<sp/>there<sp/>aren&apos;t<sp/>any<sp/>ordered<sp/>ops</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>we<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gprim.<ref refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" kindref="member">ClearXformOpOrder</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/>s,<sp/>r,<sp/>t;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(t<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" kindref="member">AddTranslateOp</ref>())){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(r<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" kindref="member">AddRotateXYZOp</ref>())){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(s<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" kindref="member">AddScaleOp</ref>())){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(<ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref>(0,<sp/>100,<sp/>0),<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>())<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(<ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>(30,<sp/>60,<sp/>90),<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>())<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(<ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>(2,<sp/>2,<sp/>2),<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> #3. Creating a parameterized SRT with pivot using <ref refid="class_usd_geom_xform_common_a_p_i" kindref="compound">UsdGeomXformCommonAPI</ref> <programlisting filename="examples_usdGeom.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CreateSRTWithDefaults(<ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gprim,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defTranslate,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defRotateXYZ,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defScale,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defPivot)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_usd_geom_xform_common_a_p_i" kindref="compound">UsdGeomXformCommonAPI</ref><sp/>xform<sp/>=<sp/><ref refid="class_usd_geom_xform_common_a_p_i" kindref="compound">UsdGeomXformCommonAPI</ref>(gprim)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xform.SetXformVectors(defTranslate,<sp/>defRotateXYZ,<sp/>defScale,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defPivot,<sp/>UsdGeomXformCommonAPI::RotationOrderXYZ,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> #4. Creating a rotate-only pivot transform with animated rotation and translation <programlisting filename="examples_usdGeom.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CreateAnimatedTransform(<ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;gprim,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;baseTranslate,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;baseRotateXYZ,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;defPivot)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>need<sp/>to<sp/>do<sp/>this<sp/>if<sp/>you&apos;re<sp/>overriding<sp/>an<sp/>existing<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gprim.<ref refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" kindref="member">ClearXformOpOrder</ref>()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_token" kindref="compound">TfToken</ref><sp/><sp/>pivSuffix(</highlight><highlight class="stringliteral">&quot;pivot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/><sp/><sp/><sp/>trans<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" kindref="member">AddTranslateOp</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/><sp/><sp/><sp/>pivot<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" kindref="member">AddTranslateOp</ref>(<ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivSuffix);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/><sp/><sp/>rotate<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" kindref="member">AddRotateXYZOp</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_geom_xform_op" kindref="compound">UsdGeomXformOp</ref><sp/>pivotInv<sp/>=<sp/>gprim.<ref refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" kindref="member">AddTranslateOp</ref>(<ref refid="class_usd_geom_xform_op_1ad1fbd6a28bdb0f04414d526ebeaed0e2a00752a6adacf6d7b01d8775399ecc06b" kindref="member">UsdGeomXformOp::PrecisionFloat</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivSuffix,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>isInverseOp<sp/>=<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>we<sp/>have<sp/>created<sp/>all<sp/>the<sp/>ops,<sp/>set<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>(and<sp/>cannot)<sp/>set<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>pivot&apos;s<sp/>inverse<sp/>op.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>didactic<sp/>brevity<sp/>we<sp/>are<sp/>eliding<sp/>success<sp/>return<sp/>value<sp/>checks,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>would<sp/>absolutely<sp/>have<sp/>them<sp/>in<sp/>exporters!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>trans.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(baseTranslate,<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pivot.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(defPivot,<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rotate.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(baseRotateXYZ,<sp/><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>animate<sp/>the<sp/>translation<sp/>and<sp/>rotation<sp/>over<sp/>a<sp/>fixed<sp/>interval<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cheesy<sp/>linear<sp/>animation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref><sp/><sp/>position(baseTranslate);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref><sp/><sp/>rotation(baseRotateXYZ);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frame<sp/>=<sp/>0;<sp/>frame<sp/>&lt;<sp/>100.0;<sp/>frame<sp/>+=<sp/>1.0){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(position,<sp/>frame);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotate.<ref refid="class_usd_geom_xform_op_1aff4c54cde9338879d90c01ae44539b79" kindref="member">Set</ref>(rotation,<sp/>frame);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position[0]<sp/>+=<sp/>5.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation[2]<sp/>+=<sp/>7.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6524">
        <label>UsdGeomCylinder</label>
        <link refid="class_usd_geom_cylinder"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6532">
        <label>UsdGeomMesh</label>
        <link refid="class_usd_geom_mesh"/>
        <childnode refid="6527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6543">
        <label>UsdLuxSphereLight</label>
        <link refid="class_usd_lux_sphere_light"/>
        <childnode refid="6538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6554">
        <label>UsdLuxDomeLight_1</label>
        <link refid="class_usd_lux_dome_light__1"/>
        <childnode refid="6551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6546">
        <label>UsdSkelSkeleton</label>
        <link refid="class_usd_skel_skeleton"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6529">
        <label>UsdGeomBasisCurves</label>
        <link refid="class_usd_geom_basis_curves"/>
        <childnode refid="6528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6538">
        <label>UsdLuxBoundableLightBase</label>
        <link refid="class_usd_lux_boundable_light_base"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6522">
        <label>UsdGeomCone</label>
        <link refid="class_usd_geom_cone"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6521">
        <label>UsdGeomCapsule_1</label>
        <link refid="class_usd_geom_capsule__1"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6537">
        <label>UsdGeomPointInstancer</label>
        <link refid="class_usd_geom_point_instancer"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6525">
        <label>UsdGeomCylinder_1</label>
        <link refid="class_usd_geom_cylinder__1"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6540">
        <label>UsdLuxDiskLight</label>
        <link refid="class_usd_lux_disk_light"/>
        <childnode refid="6538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6515">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6516" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6551">
        <label>UsdLuxNonboundableLightBase</label>
        <link refid="class_usd_lux_nonboundable_light_base"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6535">
        <label>UsdGeomSphere</label>
        <link refid="class_usd_geom_sphere"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6539">
        <label>UsdLuxCylinderLight</label>
        <link refid="class_usd_lux_cylinder_light"/>
        <childnode refid="6538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6528">
        <label>UsdGeomCurves</label>
        <link refid="class_usd_geom_curves"/>
        <childnode refid="6527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6536">
        <label>UsdVolVolume</label>
        <link refid="class_usd_vol_volume"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6519">
        <label>UsdGeomGprim</label>
        <link refid="class_usd_geom_gprim"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6549">
        <label>UsdLuxLightFilter</label>
        <link refid="class_usd_lux_light_filter"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6553">
        <label>UsdLuxDomeLight</label>
        <link refid="class_usd_lux_dome_light"/>
        <childnode refid="6551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6527">
        <label>UsdGeomPointBased</label>
        <link refid="class_usd_geom_point_based"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6556">
        <label>UsdLuxPluginLight</label>
        <link refid="class_usd_lux_plugin_light"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6516">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6517" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6558">
        <label>UsdVolFieldBase</label>
        <link refid="class_usd_vol_field_base"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6526">
        <label>UsdGeomPlane</label>
        <link refid="class_usd_geom_plane"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6523">
        <label>UsdGeomCube</label>
        <link refid="class_usd_geom_cube"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6533">
        <label>UsdGeomNurbsPatch</label>
        <link refid="class_usd_geom_nurbs_patch"/>
        <childnode refid="6527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6557">
        <label>UsdMediaSpatialAudio</label>
        <link refid="class_usd_media_spatial_audio"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6531">
        <label>UsdGeomNurbsCurves</label>
        <link refid="class_usd_geom_nurbs_curves"/>
        <childnode refid="6528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6560">
        <label>UsdVolField3DAsset</label>
        <link refid="class_usd_vol_field3_d_asset"/>
        <childnode refid="6559" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6534">
        <label>UsdGeomPoints</label>
        <link refid="class_usd_geom_points"/>
        <childnode refid="6527" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6548">
        <label>UsdGeomXform</label>
        <link refid="class_usd_geom_xform"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6517">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6530">
        <label>UsdGeomHermiteCurves</label>
        <link refid="class_usd_geom_hermite_curves"/>
        <childnode refid="6528" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6555">
        <label>UsdLuxGeometryLight</label>
        <link refid="class_usd_lux_geometry_light"/>
        <childnode refid="6551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6547">
        <label>UsdGeomCamera</label>
        <link refid="class_usd_geom_camera"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6561">
        <label>UsdVolOpenVDBAsset</label>
        <link refid="class_usd_vol_open_v_d_b_asset"/>
        <childnode refid="6559" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6542">
        <label>UsdLuxRectLight</label>
        <link refid="class_usd_lux_rect_light"/>
        <childnode refid="6538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6552">
        <label>UsdLuxDistantLight</label>
        <link refid="class_usd_lux_distant_light"/>
        <childnode refid="6551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6559">
        <label>UsdVolFieldAsset</label>
        <link refid="class_usd_vol_field_asset"/>
        <childnode refid="6558" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6541">
        <label>UsdLuxPortalLight</label>
        <link refid="class_usd_lux_portal_light"/>
        <childnode refid="6538" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6544">
        <label>UsdProcGenerativeProcedural</label>
        <link refid="class_usd_proc_generative_procedural"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6518">
        <label>UsdGeomBoundable</label>
        <link refid="class_usd_geom_boundable"/>
        <childnode refid="6514" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6550">
        <label>UsdLuxPluginLightFilter</label>
        <link refid="class_usd_lux_plugin_light_filter"/>
        <childnode refid="6549" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6545">
        <label>UsdSkelRoot</label>
        <link refid="class_usd_skel_root"/>
        <childnode refid="6518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6520">
        <label>UsdGeomCapsule</label>
        <link refid="class_usd_geom_capsule"/>
        <childnode refid="6519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6514">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="6515" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6563">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="6564" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6564">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="6565" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6565">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6562">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="6563" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/xformable.h" line="253" column="1" bodyfile="pxr/usd/usdGeom/xformable.h" bodystart="252" bodyend="976"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_geom_xformable_1aed34fb73897ddbd1837e5ad54f871264" prot="private" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_xformable_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomXformable</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomXformable</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_xformable_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_xformable_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomXformable</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_GetType</name></member>
      <member refid="class_usd_geom_xformable_1afbeb07c1f6bc7ed8c7d362c06f32a7ca" prot="private" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_GetXformOpOrderValue</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomXformable</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_xformable_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomXformable</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddOrientOp</name></member>
      <member refid="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddTranslateOp</name></member>
      <member refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>AddXformOp</name></member>
      <member refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ClearXformOpOrder</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>CreateXformOpOrderAttr</name></member>
      <member refid="class_usd_geom_xformable_1ad072bbfa1381c569964857648dbd2823" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>Get</name></member>
      <member refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetOrientOp</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetTranslateOp</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetXformOp</name></member>
      <member refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>GetXformOpOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsTransformationAffectedByAttrNamed</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>IsTyped</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>MakeMatrixXform</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_xformable_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>SetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>SetXformOpOrder</name></member>
      <member refid="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_xformable_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdGeomXformable</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdGeomXformable</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" virt="virtual"><scope>UsdGeomXformable</scope><name>~UsdGeomXformable</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomXformable</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdGeomXformable</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
