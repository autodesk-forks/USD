<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__tf___basic_math" kind="group">
    <compoundname>group_tf_BasicMath</compoundname>
    <title>Basic Mathematical Operations</title>
    <innerfile refid="bit_utils_8h">bitUtils.h</innerfile>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__tf___basic_math_1gad69d3ecbde0e717cddae6a32fc1e163c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int TfAbs</definition>
        <argsstring>(int v)</argsstring>
        <name>TfAbs</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the absolute value of the given <computeroutput>int</computeroutput> value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/tf.h" line="61" column="1" bodyfile="pxr/base/tf/tf.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___basic_math_1gab553653b235f561e35f76a36c287c221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double TfAbs</definition>
        <argsstring>(double v)</argsstring>
        <name>TfAbs</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the absolute value of the given <computeroutput>double</computeroutput> value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/tf.h" line="66" column="1" bodyfile="pxr/base/tf/tf.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___basic_math_1ga265764b254c758837014aaa0919ca3b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T TfMin</definition>
        <argsstring>(const T &amp;v1, const T &amp;v2)</argsstring>
        <name>TfMin</name>
        <param>
          <type>const T &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Returns the smaller of the two given <computeroutput>values</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/tf.h" line="72" column="1" bodyfile="pxr/base/tf/tf.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___basic_math_1ga25c831584715b2748b4ffbbfb3daee68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T TfMax</definition>
        <argsstring>(const T &amp;v1, const T &amp;v2)</argsstring>
        <name>TfMax</name>
        <param>
          <type>const T &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Returns the larger of the two given <computeroutput>values</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/tf.h" line="78" column="1" bodyfile="pxr/base/tf/tf.h" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__tf___basic_math_1ga4e327f701be63d6e6cd91fdc48e2ed96" prot="public" static="no">
        <name>TF_BITS_FOR_VALUES</name>
        <param><defname>n</defname></param>
        <briefdescription>
<para>Compute the number of bits required to store the given number of values. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the computed result for a number smaller or equal to zero is undefined. The input number can be any compile-time constant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/bitUtils.h" line="44" column="9" bodyfile="pxr/base/tf/bitUtils.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__tf___basic_math_1ga1288927e0e4aeaac8735d02e1370a196" prot="public" static="no">
        <name>TF_BITS_FOR_ENUM_VALUES</name>
        <param><defname>n</defname></param>
        <briefdescription>
<para>Compute the number of bits required to store the given number of (signed) enum values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is intended to be used when storing enum values in a bitfield without casting the enum type to an unsigned integer. (At least GCC considers enums to be signed and hence wastes one bit when all enumerants are non-negative). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/bitUtils.h" line="77" column="9" bodyfile="pxr/base/tf/bitUtils.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions for basic mathematical operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
