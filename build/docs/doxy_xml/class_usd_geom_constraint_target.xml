<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_constraint_target" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomConstraintTarget</compoundname>
    <includes refid="constraint_target_8h" local="no">constraintTarget.h</includes>
      <sectiondef kind="user-defined">
      <header>UsdAttribute API</header>
      <memberdef kind="variable" id="class_usd_geom_constraint_target_1a5264980b5cd3db34a397bfda54c1b566" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>UsdAttribute _attr</definition>
        <argsstring></argsstring>
        <name>_attr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="170" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1aa7de176ee0f6bf8890f1812e93e43ce7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator UsdAttribute const &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator UsdAttribute const &amp;</name>
        <briefdescription>
<para>Allow <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref> to auto-convert to <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref>, so you can pass a <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref> to any function that accepts a <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> or const-ref thereto. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="108" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a1d68bd302d71917d30a1ff9e4e30d220" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> const  &amp;</type>
        <definition>UsdAttribute const&amp; GetAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetAttr</name>
        <briefdescription>
<para>Explicit <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> extractor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="111" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsDefined</definition>
        <argsstring>() const</argsstring>
        <name>IsDefined</name>
        <briefdescription>
<para>Return true if the wrapped <ref refid="class_usd_property_1a409637b99e0b5b487b9e7d1d2016dbfc" kindref="member">UsdAttribute::IsDefined()</ref>, and in addition the attribute is identified as a ConstraintTarget. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="115" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><anchor id="class_usd_geom_constraint_target_1UsdGeomConstraintTarget_explicit_bool"/>Explicit bool conversion operator. A ConstraintTarget object converts to <computeroutput>true</computeroutput> iff it is valid for querying and authoring values and metadata (which is identically equivalent to <ref refid="class_usd_geom_constraint_target_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">IsDefined()</ref>). It converts to <computeroutput>false</computeroutput> otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="123" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a5cd922f42ab0a7ab27a362d03546bfb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool Get</definition>
        <argsstring>(GfMatrix4d *value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Get</name>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Get the attribute value of the ConstraintTarget at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a82d74b972ab6b2b0ed1427c5e29b198a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>USDGEOM_API bool Set</definition>
        <argsstring>(const GfMatrix4d &amp;value, UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the attribute value of the ConstraintTarget at <computeroutput>time</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1aa2c77b080e91f23f6f362192857219f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDGEOM_API TfToken GetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetIdentifier</name>
        <briefdescription>
<para>Get the stored identifier unique to the enclosing model&apos;s namespace for this constraint target. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_constraint_target_1a9f861bc2cda1079e22e418fceed94feb" kindref="member">SetIdentifier()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a9f861bc2cda1079e22e418fceed94feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API void</type>
        <definition>USDGEOM_API void SetIdentifier</definition>
        <argsstring>(const TfToken &amp;identifier)</argsstring>
        <name>SetIdentifier</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Explicitly sets the stored identifier to the given string. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients are responsible for ensuring the uniqueness of this identifier within the enclosing model&apos;s namespace. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a2fd90045f7f6f31e2dee2222ec72d1ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>USDGEOM_API GfMatrix4d ComputeInWorldSpace</definition>
        <argsstring>(UsdTimeCode time=UsdTimeCode::Default(), UsdGeomXformCache *xfCache=NULL) const</argsstring>
        <name>ComputeInWorldSpace</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_usd_geom_xform_cache" kindref="compound">UsdGeomXformCache</ref> *</type>
          <declname>xfCache</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Computes the value of the constraint target in world space. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid <ref refid="class_usd_geom_xform_cache" kindref="compound">UsdGeomXformCache</ref> is provided in the argument <computeroutput>xfCache</computeroutput>, it is used to evaluate the CTM of the model to which the constraint target belongs.</para>
<para>To get the constraint value in model-space (or local space), simply use <ref refid="class_usd_geom_constraint_target_1a5cd922f42ab0a7ab27a362d03546bfb4" kindref="member">UsdGeomConstraintTarget::Get()</ref>, since the authored values must already be in model-space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1af151ef59c5360011e87df1a8b411b6fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static USDGEOM_API TfToken GetConstraintAttrName</definition>
        <argsstring>(const std::string &amp;constraintName)</argsstring>
        <name>GetConstraintAttrName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>constraintName</declname>
        </param>
        <briefdescription>
<para>Returns the fully namespaced constraint attribute name, given the constraint name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="152" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a0dcf731c5736af296318ff8e166bfda3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomConstraintTarget</definition>
        <argsstring>()</argsstring>
        <name>UsdGeomConstraintTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="75" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a5db9f40ff0c1f1c21e2f30ff9e88f2e3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>USDGEOM_API</type>
        <definition>USDGEOM_API UsdGeomConstraintTarget</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>UsdGeomConstraintTarget</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Speculative constructor that will produce a valid <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref> when <computeroutput>attr</computeroutput> already represents an attribute that is a <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref>, and produces an <emphasis>invalid</emphasis> <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref> otherwise (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_usd_geom_constraint_target_1UsdGeomConstraintTarget_explicit_bool" kindref="member">UsdGeomConstraintTarget_explicit_bool</ref> will return false).</para>
<para>Calling <computeroutput>UsdGeomConstraintTarget::IsValid(attr)</computeroutput> will return the same truth value as the object returned by this constructor, but if you plan to subsequently use the ConstraintTarget anyways, just construct the object and bool-evaluate it before proceeding. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_constraint_target_1a1a0f8c7844ebe8dcf54b7e0784f836b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool IsValid</definition>
        <argsstring>(const UsdAttribute &amp;attr)</argsstring>
        <name>IsValid</name>
        <param>
          <type>const <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
<para>Test whether a given <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> represents valid ConstraintTarget, which implies that creating a <ref refid="class_usd_geom_constraint_target" kindref="compound">UsdGeomConstraintTarget</ref> from the attribute will succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>Success implies that <computeroutput>attr.IsDefined()</computeroutput> is true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/constraintTarget.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Schema wrapper for <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref> for authoring and introspecting attributes that are constraint targets. </para>
    </briefdescription>
    <detaileddescription>
<para>Constraint targets correspond roughly to what some DCC&apos;s call locators. They are coordinate frames, represented as (animated or static) <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> values. We represent them as attributes in USD rather than transformable prims because generally we require no other coordinated information about a constraint target other than its name and its matrix value, and because attributes are more concise than prims.</para>
<para>Because consumer clients often care only about the identity and value of constraint targets and may be able to usefully consume them without caring about the actual geometry with which they may logically correspond, UsdGeom aggregates all constraint targets onto a model&apos;s root prim, assuming that an exporter will use property namespacing within the constraint target attribute&apos;s name to indicate a path to a prim within the model with which the constraint target may correspond.</para>
<para>To facilitate instancing, and also position-tweaking of baked assets, we stipulate that constraint target values always be recorded in <bold>model-relative transformation space</bold>. In other words, to get the world-space value of a constraint target, transform it by the local-to-world transformation of the prim on which it is recorded.</para>
<para><ref refid="class_usd_geom_constraint_target_1a2fd90045f7f6f31e2dee2222ec72d1ab" kindref="member">ComputeInWorldSpace()</ref> will perform this calculation.</para>
    </detaileddescription>
    <location file="pxr/usd/usdGeom/constraintTarget.h" line="70" column="1" bodyfile="pxr/usd/usdGeom/constraintTarget.h" bodystart="69" bodyend="171"/>
    <listofallmembers>
      <member refid="class_usd_geom_constraint_target_1a5264980b5cd3db34a397bfda54c1b566" prot="private" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>_attr</name></member>
      <member refid="class_usd_geom_constraint_target_1a2fd90045f7f6f31e2dee2222ec72d1ab" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>ComputeInWorldSpace</name></member>
      <member refid="class_usd_geom_constraint_target_1a5cd922f42ab0a7ab27a362d03546bfb4" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>Get</name></member>
      <member refid="class_usd_geom_constraint_target_1a1d68bd302d71917d30a1ff9e4e30d220" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>GetAttr</name></member>
      <member refid="class_usd_geom_constraint_target_1af151ef59c5360011e87df1a8b411b6fc" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>GetConstraintAttrName</name></member>
      <member refid="class_usd_geom_constraint_target_1aa2c77b080e91f23f6f362192857219f0" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>GetIdentifier</name></member>
      <member refid="class_usd_geom_constraint_target_1a87fbe0030c0fbb6307ee434664f1142f" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>IsDefined</name></member>
      <member refid="class_usd_geom_constraint_target_1a1a0f8c7844ebe8dcf54b7e0784f836b8" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>IsValid</name></member>
      <member refid="class_usd_geom_constraint_target_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_constraint_target_1aa7de176ee0f6bf8890f1812e93e43ce7" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>operator UsdAttribute const &amp;</name></member>
      <member refid="class_usd_geom_constraint_target_1a82d74b972ab6b2b0ed1427c5e29b198a" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>Set</name></member>
      <member refid="class_usd_geom_constraint_target_1a9f861bc2cda1079e22e418fceed94feb" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>SetIdentifier</name></member>
      <member refid="class_usd_geom_constraint_target_1a0dcf731c5736af296318ff8e166bfda3" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>UsdGeomConstraintTarget</name></member>
      <member refid="class_usd_geom_constraint_target_1a5db9f40ff0c1f1c21e2f30ff9e88f2e3" prot="public" virt="non-virtual"><scope>UsdGeomConstraintTarget</scope><name>UsdGeomConstraintTarget</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
