<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_line2d" kind="class" language="C++" prot="public">
    <compoundname>GfLine2d</compoundname>
    <includes refid="line2d_8h" local="no">line2d.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_line2d_1a90edfe2a23723b43def238feda36e60f" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d _p0</definition>
        <argsstring></argsstring>
        <name>_p0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="101" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_line2d_1a532cf9e5b1e08c48649a1f9b29995e98" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d _dir</definition>
        <argsstring></argsstring>
        <name>_dir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="102" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_line2d_1a2293517baf81ae422cb4bb1bf66d63f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfLine2d</definition>
        <argsstring>()</argsstring>
        <name>GfLine2d</name>
        <briefdescription>
<para>The default constructor leaves line parameters undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="54" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1a11d4b82b8e40de95e59f601671b3d5a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfLine2d</definition>
        <argsstring>(const GfVec2d &amp;p0, const GfVec2d &amp;dir)</argsstring>
        <name>GfLine2d</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Construct a line from a point and a direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="58" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1ab289b8723753b0006f710ecc26e84b8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Set</definition>
        <argsstring>(const GfVec2d &amp;p0, const GfVec2d &amp;dir)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="62" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1a6831900dd6c109ace0782e9a92f0ba53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetPoint</definition>
        <argsstring>(double t) const</argsstring>
        <name>GetPoint</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Return the point on the line at <computeroutput></computeroutput>( p0 + t * dir ). </para>
        </briefdescription>
        <detaileddescription>
<para>Remember dir has been normalized so t represents a unit distance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="70" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1a9264f4cae017b61a4b6671d4023f27ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>const GfVec2d&amp; GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
<para>Return the normalized direction of the line. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="73" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1aeb69e72c983b1829e8ba7b46c4c41e94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GF_API GfVec2d FindClosestPoint</definition>
        <argsstring>(const GfVec2d &amp;point, double *t=NULL) const</argsstring>
        <name>FindClosestPoint</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>t</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Returns the point on the line that is closest to <computeroutput>point</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>t</computeroutput> is not <computeroutput>NULL</computeroutput>, it will be set to the parametric distance along the line of the returned point. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1a0e9ef796d9d34eba8b1d55dfa22a92e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfLine2d &amp;l) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_line2d" kindref="compound">GfLine2d</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Component-wise equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points and directions, must match exactly for lines to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="83" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_line2d_1a9ae8b938d746b8dfa0c2619e1e277ce1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfLine2d &amp;r) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_line2d" kindref="compound">GfLine2d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Component-wise inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The starting points, and directions must match exactly for lines to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="89" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="89" bodyend="91"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_line2d_1ad7309cddccc4d3cfbc96255798612d5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend bool</type>
        <definition>GF_API friend bool GfFindClosestPoints</definition>
        <argsstring>(const GfLine2d &amp;, const GfLine2d &amp;, GfVec2d *, GfVec2d *, double *, double *)</argsstring>
        <name>GfFindClosestPoints</name>
        <param>
          <type>const <ref refid="class_gf_line2d" kindref="compound">GfLine2d</ref> &amp;</type>
          <defname>l1</defname>
        </param>
        <param>
          <type>const <ref refid="class_gf_line2d" kindref="compound">GfLine2d</ref> &amp;</type>
          <defname>l2</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> *</type>
          <defname>p1</defname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> *</type>
          <defname>p2</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t1</defname>
        </param>
        <param>
          <type>double *</type>
          <defname>t2</defname>
        </param>
        <briefdescription>
<para>Computes the closets points between two lines. </para>
        </briefdescription>
        <detaileddescription>
<para>The two points are returned in <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. The parametric distance of each point on the lines is returned in <computeroutput>t1</computeroutput> and <computeroutput>t2</computeroutput>.</para>
<para>This returns <computeroutput>false</computeroutput> if the lines were close enough to parallel that no points could be computed; in this case, the other return values are undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/line2d.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 2D line. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a two-dimensional line in space. Lines are constructed from a point, <computeroutput>p0</computeroutput>, and a direction, dir. The direction is normalized in the constructor.</para>
<para>The line is kept in a parametric represention, p = p0 + t * dir. </para>
    </detaileddescription>
    <location file="pxr/base/gf/line2d.h" line="49" column="1" bodyfile="pxr/base/gf/line2d.h" bodystart="49" bodyend="103"/>
    <listofallmembers>
      <member refid="class_gf_line2d_1a532cf9e5b1e08c48649a1f9b29995e98" prot="private" virt="non-virtual"><scope>GfLine2d</scope><name>_dir</name></member>
      <member refid="class_gf_line2d_1a90edfe2a23723b43def238feda36e60f" prot="private" virt="non-virtual"><scope>GfLine2d</scope><name>_p0</name></member>
      <member refid="class_gf_line2d_1aeb69e72c983b1829e8ba7b46c4c41e94" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>FindClosestPoint</name></member>
      <member refid="class_gf_line2d_1a9264f4cae017b61a4b6671d4023f27ac" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>GetDirection</name></member>
      <member refid="class_gf_line2d_1a6831900dd6c109ace0782e9a92f0ba53" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>GetPoint</name></member>
      <member refid="class_gf_line2d_1ad7309cddccc4d3cfbc96255798612d5c" prot="private" virt="non-virtual"><scope>GfLine2d</scope><name>GfFindClosestPoints</name></member>
      <member refid="class_gf_line2d_1a2293517baf81ae422cb4bb1bf66d63f3" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>GfLine2d</name></member>
      <member refid="class_gf_line2d_1a11d4b82b8e40de95e59f601671b3d5a9" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>GfLine2d</name></member>
      <member refid="class_gf_line2d_1a9ae8b938d746b8dfa0c2619e1e277ce1" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>operator !=</name></member>
      <member refid="class_gf_line2d_1a0e9ef796d9d34eba8b1d55dfa22a92e0" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>operator==</name></member>
      <member refid="class_gf_line2d_1ab289b8723753b0006f710ecc26e84b8b" prot="public" virt="non-virtual"><scope>GfLine2d</scope><name>Set</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
