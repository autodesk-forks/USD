<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_ext_comp_gpu_computation" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdStExtCompGpuComputation</compoundname>
    <basecompoundref refid="class_hd_st_computation" prot="public" virt="non-virtual">HdStComputation</basecompoundref>
    <includes refid="ext_comp_gpu_computation_8h" local="no">extCompGpuComputation.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_ext_comp_gpu_computation_1ae87c83b9f3d4f5ba91530df74da5e284" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="164" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_ext_comp_gpu_computation_1a1d3cd9ad06bc1346c8670d9a34e25972" prot="private" static="no" mutable="no">
        <type>HdStExtCompGpuComputationResourceSharedPtr</type>
        <definition>HdStExtCompGpuComputationResourceSharedPtr _resource</definition>
        <argsstring></argsstring>
        <name>_resource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="165" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_ext_comp_gpu_computation_1ade0e10cfb499f090afca146774880c71" prot="private" static="no" mutable="no">
        <type>HdExtComputationPrimvarDescriptorVector</type>
        <definition>HdExtComputationPrimvarDescriptorVector _compPrimvars</definition>
        <argsstring></argsstring>
        <name>_compPrimvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="166" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_ext_comp_gpu_computation_1a536dd0f24ff284985739a05c265ae526" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _dispatchCount</definition>
        <argsstring></argsstring>
        <name>_dispatchCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="167" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_ext_comp_gpu_computation_1ab7fce57aba32a41921913c655008b8a8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _elementCount</definition>
        <argsstring></argsstring>
        <name>_elementCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="168" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1aa1399510e7316947f5668808da9f535a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStExtCompGpuComputation</definition>
        <argsstring>(SdfPath const &amp;id, HdStExtCompGpuComputationResourceSharedPtr const &amp;resource, HdExtComputationPrimvarDescriptorVector const &amp;compPrimvars, int dispatchCount, int elementCount)</argsstring>
        <name>HdStExtCompGpuComputation</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>HdStExtCompGpuComputationResourceSharedPtr const &amp;</type>
          <declname>resource</declname>
        </param>
        <param>
          <type>HdExtComputationPrimvarDescriptorVector const &amp;</type>
          <declname>compPrimvars</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dispatchCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elementCount</declname>
        </param>
        <briefdescription>
<para>Constructs a new GPU ExtComputation computation. </para>
        </briefdescription>
        <detaileddescription>
<para>resource provides the set of input data and kernel to execute this computation. compPrimvars identifies the primvar data being computed</para>
<para>dispatchCount specifies the number of kernel invocations to execute. elementCount specifies the number of elements to allocate for output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a4f31be34f1641093e72a05cbbcf08119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStExtCompGpuComputation</definition>
        <argsstring>() override</argsstring>
        <name>~HdStExtCompGpuComputation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a596df3707c1a0ac69178be8b953a65ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void GetBufferSpecs</definition>
        <argsstring>(HdBufferSpecVector *specs) const override</argsstring>
        <name>GetBufferSpecs</name>
        <reimplements refid="class_hd_st_computation_1a8a168db3ae7e1b0a8e17ed98f40f9f4e">GetBufferSpecs</reimplements>
        <param>
          <type>HdBufferSpecVector *</type>
          <declname>specs</declname>
        </param>
        <briefdescription>
<para>Adds the output buffer specs generated by this computation to the passed in vector of buffer specs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">specs</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of <ref refid="struct_hd_buffer_spec" kindref="compound">HdBufferSpec</ref> to add this computation output buffer layout requirements to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a0c7e66f0a973f19d545a376c6acd8571" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Execute</definition>
        <argsstring>(HdBufferArrayRangeSharedPtr const &amp;range, HdResourceRegistry *resourceRegistry) override</argsstring>
        <name>Execute</name>
        <reimplements refid="class_hd_st_computation_1a0868e343ecbcdb8a87d6b26653d18fca">Execute</reimplements>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> *</type>
          <declname>resourceRegistry</declname>
        </param>
        <briefdescription>
<para>Executes the computation on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" kindref="member">HdResourceRegistry::Commit</ref> with the <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> given to the <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> when the computation was added to the registry. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">range</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer array range to save the computation result to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resourceRegistry</parametername>
</parameternamelist>
<parameterdescription>
<para>the registry that is current committing resources to the GPU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a7c13b1f05cc771942251ee4f9abafc51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API int</type>
        <definition>HDST_API int GetDispatchCount</definition>
        <argsstring>() const</argsstring>
        <name>GetDispatchCount</name>
        <briefdescription>
<para>Gets the number of GPU kernel invocations to execute. </para>
        </briefdescription>
        <detaileddescription>
<para>It can be useful for this to be different than the number of output elements, e.g. to run a per-curve kernel computing multiple points per-curve. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a70b4d3e1ba119e868a92d4347313293d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API int</type>
        <definition>HDST_API int GetNumOutputElements</definition>
        <argsstring>() const override</argsstring>
        <name>GetNumOutputElements</name>
        <reimplements refid="class_hd_st_computation_1ab35f67106a7590bcd1c96695a7ac3f4c">GetNumOutputElements</reimplements>
        <briefdescription>
<para>Gets the number of elements in the output primvar. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of elements produced by the computation must be known before doing the computation. The allocation of GPU resources needs to know the size to allocate before the kernel can run. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1aa5891644bb99efd1be9c82557e0ea39b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStExtCompGpuComputationResourceSharedPtr const  &amp;</type>
        <definition>HDST_API HdStExtCompGpuComputationResourceSharedPtr const&amp; GetResource</definition>
        <argsstring>() const</argsstring>
        <name>GetResource</name>
        <briefdescription>
<para>Gets the shared GPU resource holder for the computation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a93a1604317200477ef79e12e2eb00a83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStExtCompGpuComputationSharedPtr</type>
        <definition>static HDST_API HdStExtCompGpuComputationSharedPtr CreateGpuComputation</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdExtComputation const *sourceComp, HdExtComputationPrimvarDescriptorVector const &amp;compPrimvars)</argsstring>
        <name>CreateGpuComputation</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_ext_computation" kindref="compound">HdExtComputation</ref> const *</type>
          <declname>sourceComp</declname>
        </param>
        <param>
          <type>HdExtComputationPrimvarDescriptorVector const &amp;</type>
          <declname>compPrimvars</declname>
        </param>
        <briefdescription>
<para>Creates a GPU computation implementing the given abstract computation. </para>
        </briefdescription>
        <detaileddescription>
<para>When created this allocates <ref refid="class_hd_st_ext_comp_gpu_computation_resource" kindref="compound">HdStExtCompGpuComputationResource</ref>. Nothing is assigned GPU resources unless the source is subsequently added to the hdResourceRegistry and the registry is committed.</para>
<para>This delayed allocation allow Rprims to share computed primvar data and avoid duplicate allocations GPU resources for computation inputs and outputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sceneDelegate</parametername>
</parameternamelist>
<parameterdescription>
<para>the delegate to pull scene inputs from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sourceComp</parametername>
</parameternamelist>
<parameterdescription>
<para>the abstract computation in the <ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> this instance actually implements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">compPrimvars</parametername>
</parameternamelist>
<parameterdescription>
<para>identifies the primvar data being computed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_hd_ext_computation" kindref="compound">HdExtComputation</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a8476de507d04a45534510fc6365ff00e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStExtCompGpuComputation</definition>
        <argsstring>()=delete</argsstring>
        <name>HdStExtCompGpuComputation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1a8007e41412a41efb86bd40000a31b994" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdStExtCompGpuComputation</definition>
        <argsstring>(const HdStExtCompGpuComputation &amp;)=delete</argsstring>
        <name>HdStExtCompGpuComputation</name>
        <param>
          <type>const <ref refid="class_hd_st_ext_comp_gpu_computation" kindref="compound">HdStExtCompGpuComputation</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_ext_comp_gpu_computation_1aeb9019203c227df33db457853009bddb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_st_ext_comp_gpu_computation" kindref="compound">HdStExtCompGpuComputation</ref> &amp;</type>
        <definition>HdStExtCompGpuComputation&amp; operator=</definition>
        <argsstring>(const HdStExtCompGpuComputation &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hd_st_ext_comp_gpu_computation" kindref="compound">HdStExtCompGpuComputation</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Computation that represents a GPU implementation of a ExtComputation. </para>
    </briefdescription>
    <detaileddescription>
<para>The computation implements the basic: input <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> -&gt; processing -&gt; output <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> model of HdStComputations where processing happens in Execute during the Execute phase of <ref refid="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" kindref="member">HdResourceRegistry::Commit</ref>.</para>
<para>The computation is performed in three stages by three companion classes:</para>
<para><orderedlist>
<listitem><para>Input HdBuffersources are committed into the input <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> during the Resolve phase of the <ref refid="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" kindref="member">HdResourceRegistry::Commit</ref> processing.</para>
</listitem><listitem><para><ref refid="class_hd_st_ext_comp_gpu_computation_resource" kindref="compound">HdStExtCompGpuComputationResource</ref> holds the committed GPU resident resources along with the compiled compute shading kernel to execute. The values of the HdBufferArrayRanges for the inputs are stored in this object. The resource can store heterogenous sources with differing number of elements as may be required by computations.</para>
</listitem><listitem><para><ref refid="class_hd_st_ext_comp_gpu_computation" kindref="compound">HdStExtCompGpuComputation</ref> executes the kernel using the committed GPU resident resources and stores the results to the destination <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> given in Execute. The destination <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> is allocated by the owning <ref refid="class_hd_rprim" kindref="compound">HdRprim</ref> that registers the computation with the <ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> by calling HdResourceRegistry::AddComputation.</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="see"><para><ref refid="class_hd_st_ext_comp_gpu_computation_resource" kindref="compound">HdStExtCompGpuComputationResource</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_hd_rprim" kindref="compound">HdRprim</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_hd_st_computation" kindref="compound">HdStComputation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_hd_resource_registry" kindref="compound">HdResourceRegistry</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_hd_ext_computation" kindref="compound">HdExtComputation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3130">
        <label>HdStExtCompGpuComputation</label>
        <link refid="class_hd_st_ext_comp_gpu_computation"/>
        <childnode refid="3131" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3131">
        <label>HdStComputation</label>
        <link refid="class_hd_st_computation"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3132">
        <label>HdStExtCompGpuComputation</label>
        <link refid="class_hd_st_ext_comp_gpu_computation"/>
        <childnode refid="3133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3133">
        <label>HdStComputation</label>
        <link refid="class_hd_st_computation"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/extCompGpuComputation.h" line="86" column="1" bodyfile="pxr/imaging/hdSt/extCompGpuComputation.h" bodystart="85" bodyend="175"/>
    <listofallmembers>
      <member refid="class_hd_st_ext_comp_gpu_computation_1ade0e10cfb499f090afca146774880c71" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>_compPrimvars</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a536dd0f24ff284985739a05c265ae526" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>_dispatchCount</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1ab7fce57aba32a41921913c655008b8a8" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>_elementCount</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1ae87c83b9f3d4f5ba91530df74da5e284" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>_id</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a1d3cd9ad06bc1346c8670d9a34e25972" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>_resource</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a93a1604317200477ef79e12e2eb00a83" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>CreateGpuComputation</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a0c7e66f0a973f19d545a376c6acd8571" prot="public" virt="virtual"><scope>HdStExtCompGpuComputation</scope><name>Execute</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a596df3707c1a0ac69178be8b953a65ab" prot="public" virt="virtual"><scope>HdStExtCompGpuComputation</scope><name>GetBufferSpecs</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a7c13b1f05cc771942251ee4f9abafc51" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>GetDispatchCount</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a70b4d3e1ba119e868a92d4347313293d" prot="public" virt="virtual"><scope>HdStExtCompGpuComputation</scope><name>GetNumOutputElements</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1aa5891644bb99efd1be9c82557e0ea39b" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>GetResource</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1aa1399510e7316947f5668808da9f535a" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>HdStExtCompGpuComputation</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a8476de507d04a45534510fc6365ff00e" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>HdStExtCompGpuComputation</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a8007e41412a41efb86bd40000a31b994" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>HdStExtCompGpuComputation</name></member>
      <member refid="class_hd_st_computation_1a9dcb9b43a3d0fa9003d4c1c9d921f6b2" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>IsValid</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1aeb9019203c227df33db457853009bddb" prot="private" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>operator=</name></member>
      <member refid="class_hd_st_computation_1a68c76127de856de0467c3b350434ea88" prot="public" virt="virtual"><scope>HdStExtCompGpuComputation</scope><name>~HdStComputation</name></member>
      <member refid="class_hd_st_ext_comp_gpu_computation_1a4f31be34f1641093e72a05cbbcf08119" prot="public" virt="non-virtual"><scope>HdStExtCompGpuComputation</scope><name>~HdStExtCompGpuComputation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
