<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usdviewq_hydra_observer" kind="class" language="C++" prot="public">
    <compoundname>UsdviewqHydraObserver</compoundname>
    <includes refid="hydra_observer_8h" local="no">hydraObserver.h</includes>
    <innerclass refid="class_usdviewq_hydra_observer_1_1___observer" prot="private">UsdviewqHydraObserver::_Observer</innerclass>
    <innerclass refid="struct_usdviewq_hydra_observer_1_1_notice_entry" prot="public">UsdviewqHydraObserver::NoticeEntry</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usdviewq_hydra_observer_1a4bcaa5fe3cdbd55607576bb151fd8453" prot="public" static="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>using IndexList =  std::vector&lt;size_t&gt;</definition>
        <argsstring></argsstring>
        <name>IndexList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="68" column="1" bodyfile="pxr/usdImaging/usdviewq/hydraObserver.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_usdviewq_hydra_observer_1a6cd871ec875449a1902d7a8aa2c10d9e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_usdviewq_hydra_observer_1_1_notice_entry" kindref="compound">NoticeEntry</ref> &gt;</type>
        <definition>using NoticeEntryVector =  std::vector&lt;NoticeEntry&gt;</definition>
        <argsstring></argsstring>
        <name>NoticeEntryVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="129" column="1" bodyfile="pxr/usdImaging/usdviewq/hydraObserver.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usdviewq_hydra_observer_1a1866e67bd80277bb69e46b153cfe9a96" prot="private" static="no" mutable="no">
        <type>HdSceneIndexBaseRefPtr</type>
        <definition>HdSceneIndexBaseRefPtr _sceneIndex</definition>
        <argsstring></argsstring>
        <name>_sceneIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="176" column="1" bodyfile="pxr/usdImaging/usdviewq/hydraObserver.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usdviewq_hydra_observer_1a7150e301429ea727e0c3a0296d1626ff" prot="private" static="no" mutable="no">
        <type>_Observer</type>
        <definition>_Observer _observer</definition>
        <argsstring></argsstring>
        <name>_observer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="177" column="1" bodyfile="pxr/usdImaging/usdviewq/hydraObserver.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a5ba25e1d923eba44a37f6372f9e57d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API</type>
        <definition>USDVIEWQ_API UsdviewqHydraObserver</definition>
        <argsstring>()=default</argsstring>
        <name>UsdviewqHydraObserver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ad8f496cb934ba4ab0b9abc061915ce4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API</type>
        <definition>USDVIEWQ_API ~UsdviewqHydraObserver</definition>
        <argsstring>()</argsstring>
        <name>~UsdviewqHydraObserver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ab017561d17ab01a635e848e6ee011477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API bool</type>
        <definition>USDVIEWQ_API bool TargetToNamedSceneIndex</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>TargetToNamedSceneIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Target this observer to a scene index with the given name previously registered via <ref refid="class_hd_scene_index_name_registry" kindref="compound">HdSceneIndexNameRegistry</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a9c8485f650ec6ba419b74288a57be5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API bool</type>
        <definition>USDVIEWQ_API bool TargetToInputSceneIndex</definition>
        <argsstring>(const IndexList &amp;inputIndices)</argsstring>
        <name>TargetToInputSceneIndex</name>
        <param>
          <type>const IndexList &amp;</type>
          <declname>inputIndices</declname>
        </param>
        <briefdescription>
<para>Starting from the currently targeted HdSceneIndex, each value in the <computeroutput>inputIndices</computeroutput> is treated as an index into the result of HdFilteringSceneIndexBase::GetInputScenes. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if each followed index maps to a valid index into the input scenes of the previous. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ab7fdf056e17b60fc968e50b31fd3e65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API std::string</type>
        <definition>USDVIEWQ_API std::string GetDisplayName</definition>
        <argsstring>()</argsstring>
        <name>GetDisplayName</name>
        <briefdescription>
<para>Returns the display name of the actively targeted scene index. </para>
        </briefdescription>
        <detaileddescription>
<para>This display name is currently derived from the C++ typename. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a2af344a6a09e9daa5d670d6aab03440f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API std::vector&lt; std::string &gt;</type>
        <definition>USDVIEWQ_API std::vector&lt;std::string&gt; GetInputDisplayNames</definition>
        <argsstring>(const IndexList &amp;inputIndices)</argsstring>
        <name>GetInputDisplayNames</name>
        <param>
          <type>const IndexList &amp;</type>
          <declname>inputIndices</declname>
        </param>
        <briefdescription>
<para>Starting from the currently targeted HdSceneIndex, each value in the <computeroutput>inputIndices</computeroutput> is treated as an index into the result of HdFilteringSceneIndexBase::GetInputScenes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the scene index reached is a subclass of <ref refid="class_hd_filtering_scene_index_base" kindref="compound">HdFilteringSceneIndexBase</ref>, the display names of the return value of GetInputScenes is returned. Otherwise, the return value is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a87569f985c23790063d3ef5a1a08f08a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API SdfPathVector</type>
        <definition>USDVIEWQ_API SdfPathVector GetChildPrimPaths</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>GetChildPrimPaths</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Returns the paths of the immediate children of the specified <computeroutput>primPath</computeroutput> for the actively observer scene index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ae1b6680ef91e52baea53491c4fed9cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API <ref refid="struct_hd_scene_index_prim" kindref="compound">HdSceneIndexPrim</ref></type>
        <definition>USDVIEWQ_API HdSceneIndexPrim GetPrim</definition>
        <argsstring>(const SdfPath &amp;primPath)</argsstring>
        <name>GetPrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Returns the prim type and data source for the specified <computeroutput>primPath</computeroutput> for the actively observer scene index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a4e4cf6f39e67122fb426a185a3ccb161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API bool</type>
        <definition>USDVIEWQ_API bool HasPendingNotices</definition>
        <argsstring>()</argsstring>
        <name>HasPendingNotices</name>
        <briefdescription>
<para>Returns true if there are pending scene change notices. </para>
        </briefdescription>
        <detaileddescription>
<para>Consumers of this follow a polling rather than callback pattern. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1a56b3bf8452ae20bded14bac7f26b8021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API NoticeEntryVector</type>
        <definition>USDVIEWQ_API NoticeEntryVector GetPendingNotices</definition>
        <argsstring>()</argsstring>
        <name>GetPendingNotices</name>
        <briefdescription>
<para>Returns (and clears) any accumulated scene change notices. </para>
        </briefdescription>
        <detaileddescription>
<para>Consumers of this follow a polling rather than callback pattern. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ad7d2e85d2e7addf07872bc033c749e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API void</type>
        <definition>USDVIEWQ_API void ClearPendingNotices</definition>
        <argsstring>()</argsstring>
        <name>ClearPendingNotices</name>
        <briefdescription>
<para>Clears any accumulated scene change notices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1ae3d9b9983dd3fb280df8f8cbeacbd405" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDVIEWQ_API std::vector&lt; std::string &gt;</type>
        <definition>static USDVIEWQ_API std::vector&lt;std::string&gt; GetRegisteredSceneIndexNames</definition>
        <argsstring>()</argsstring>
        <name>GetRegisteredSceneIndexNames</name>
        <briefdescription>
<para>Returns the names of scene indices previously registered with <ref refid="class_hd_scene_index_name_registry" kindref="compound">HdSceneIndexNameRegistry</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows a browser to retrieve available instances without direct interaction with the application. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="60" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usdviewq_hydra_observer_1adb7ea8dfa1b3fbeb291695919b2cd86e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _Target</definition>
        <argsstring>(const HdSceneIndexBaseRefPtr &amp;sceneIndex)</argsstring>
        <name>_Target</name>
        <param>
          <type>const HdSceneIndexBaseRefPtr &amp;</type>
          <declname>sceneIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstracts pieces necessary for implementing a Hydra Scene Browser in a manner convenient for exposing to python. </para>
    </briefdescription>
    <detaileddescription>
<para>For C++ code, this offers no benefits over directly implementing an <ref refid="class_hd_scene_index_observer" kindref="compound">HdSceneIndexObserver</ref>. It exists solely in service of the python implementation of Hydra Scene Browser present in usdview.</para>
<para>See extras/imaging/examples/hdui for an example of a C++ direct implementation. </para>
    </detaileddescription>
    <location file="pxr/usdImaging/usdviewq/hydraObserver.h" line="46" column="1" bodyfile="pxr/usdImaging/usdviewq/hydraObserver.h" bodystart="45" bodyend="178"/>
    <listofallmembers>
      <member refid="class_usdviewq_hydra_observer_1a7150e301429ea727e0c3a0296d1626ff" prot="private" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>_observer</name></member>
      <member refid="class_usdviewq_hydra_observer_1a1866e67bd80277bb69e46b153cfe9a96" prot="private" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>_sceneIndex</name></member>
      <member refid="class_usdviewq_hydra_observer_1adb7ea8dfa1b3fbeb291695919b2cd86e" prot="private" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>_Target</name></member>
      <member refid="class_usdviewq_hydra_observer_1ad7d2e85d2e7addf07872bc033c749e81" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>ClearPendingNotices</name></member>
      <member refid="class_usdviewq_hydra_observer_1a87569f985c23790063d3ef5a1a08f08a" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetChildPrimPaths</name></member>
      <member refid="class_usdviewq_hydra_observer_1ab7fdf056e17b60fc968e50b31fd3e65d" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetDisplayName</name></member>
      <member refid="class_usdviewq_hydra_observer_1a2af344a6a09e9daa5d670d6aab03440f" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetInputDisplayNames</name></member>
      <member refid="class_usdviewq_hydra_observer_1a56b3bf8452ae20bded14bac7f26b8021" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetPendingNotices</name></member>
      <member refid="class_usdviewq_hydra_observer_1ae1b6680ef91e52baea53491c4fed9cfa" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetPrim</name></member>
      <member refid="class_usdviewq_hydra_observer_1ae3d9b9983dd3fb280df8f8cbeacbd405" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>GetRegisteredSceneIndexNames</name></member>
      <member refid="class_usdviewq_hydra_observer_1a4e4cf6f39e67122fb426a185a3ccb161" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>HasPendingNotices</name></member>
      <member refid="class_usdviewq_hydra_observer_1a4bcaa5fe3cdbd55607576bb151fd8453" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>IndexList</name></member>
      <member refid="class_usdviewq_hydra_observer_1a6cd871ec875449a1902d7a8aa2c10d9e" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>NoticeEntryVector</name></member>
      <member refid="class_usdviewq_hydra_observer_1a9c8485f650ec6ba419b74288a57be5ff" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>TargetToInputSceneIndex</name></member>
      <member refid="class_usdviewq_hydra_observer_1ab017561d17ab01a635e848e6ee011477" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>TargetToNamedSceneIndex</name></member>
      <member refid="class_usdviewq_hydra_observer_1a5ba25e1d923eba44a37f6372f9e57d46" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>UsdviewqHydraObserver</name></member>
      <member refid="class_usdviewq_hydra_observer_1ad8f496cb934ba4ab0b9abc061915ce4a" prot="public" virt="non-virtual"><scope>UsdviewqHydraObserver</scope><name>~UsdviewqHydraObserver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
