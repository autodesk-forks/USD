<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_atomic_ofstream_wrapper" kind="class" language="C++" prot="public">
    <compoundname>TfAtomicOfstreamWrapper</compoundname>
    <includes refid="atomic_ofstream_wrapper_8h" local="no">atomicOfstreamWrapper.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_atomic_ofstream_wrapper_1aae02cb4913dbcd20aeaba819c181012c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _filePath</definition>
        <argsstring></argsstring>
        <name>_filePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="113" column="1" bodyfile="pxr/base/tf/atomicOfstreamWrapper.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_atomic_ofstream_wrapper_1af0e7537d68261a64521842a47154111f" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _tmpFilePath</definition>
        <argsstring></argsstring>
        <name>_tmpFilePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="114" column="1" bodyfile="pxr/base/tf/atomicOfstreamWrapper.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_atomic_ofstream_wrapper_1ace9305280a00a502384f4612de2b4991" prot="private" static="no" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream _stream</definition>
        <argsstring></argsstring>
        <name>_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="115" column="1" bodyfile="pxr/base/tf/atomicOfstreamWrapper.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a5778f9a158d8b3ddfca41e1a33c79841" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfAtomicOfstreamWrapper</definition>
        <argsstring>(const TfAtomicOfstreamWrapper &amp;)=delete</argsstring>
        <name>TfAtomicOfstreamWrapper</name>
        <param>
          <type>const <ref refid="class_tf_atomic_ofstream_wrapper" kindref="compound">TfAtomicOfstreamWrapper</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a9dfe7ad9985d57999417634876b80294" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_atomic_ofstream_wrapper" kindref="compound">TfAtomicOfstreamWrapper</ref> &amp;</type>
        <definition>TfAtomicOfstreamWrapper&amp; operator=</definition>
        <argsstring>(const TfAtomicOfstreamWrapper &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_tf_atomic_ofstream_wrapper" kindref="compound">TfAtomicOfstreamWrapper</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a6b7af8ec709a8e192c376b3facb8a5da" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfAtomicOfstreamWrapper</definition>
        <argsstring>(const std::string &amp;filePath)</argsstring>
        <name>TfAtomicOfstreamWrapper</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a24c78f0dee23fa305b2a050bd0e56a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API ~TfAtomicOfstreamWrapper</definition>
        <argsstring>()</argsstring>
        <name>~TfAtomicOfstreamWrapper</name>
        <briefdescription>
<para>Destructor. Calls <ref refid="class_tf_atomic_ofstream_wrapper_1a3a3b91283a3650b08f6924a6fa68a671" kindref="member">Cancel()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1aa3d1482e97c0b8bc7d76b23be84ac17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Open</definition>
        <argsstring>(std::string *reason=0)</argsstring>
        <name>Open</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Opens the temporary file for writing. </para>
        </briefdescription>
        <detaileddescription>
<para>If the destination directory does not exist, it is created. If the destination directory exists but is unwritable, the destination directory cannot be created, or the temporary file cannot be opened for writing in the destination directory, this method returns false and <computeroutput>reason</computeroutput> is set to the reason for failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a1e7a90af7311dc240c978a5dd707e5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Commit</definition>
        <argsstring>(std::string *reason=0)</argsstring>
        <name>Commit</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Synchronizes the temporary file contents to disk, and renames the temporary file into the file path passed to Open. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file path passed to the constructor names an existing file, the file, the file is atomically replaced with the temporary file. If the rename fails, false is returned and <computeroutput>reason</computeroutput> is set to the reason for failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a3a3b91283a3650b08f6924a6fa68a671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Cancel</definition>
        <argsstring>(std::string *reason=0)</argsstring>
        <name>Cancel</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Closes the temporary file and removes it from disk, if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_atomic_ofstream_wrapper_1a531042fff5ebd65c1fcba97412c01b7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ofstream &amp;</type>
        <definition>std::ofstream&amp; GetStream</definition>
        <argsstring>()</argsstring>
        <name>GetStream</name>
        <briefdescription>
<para>Returns the stream. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is called before a call to Open, the returned file stream is not yet initialized. If called after Commit or Cancel, the returned file stream is closed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="110" column="1" bodyfile="pxr/base/tf/atomicOfstreamWrapper.h" bodystart="110" bodyend="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that wraps a file output stream, providing improved tolerance for write failures. </para>
    </briefdescription>
    <detaileddescription>
<para>The wrapper opens an output file stream to a temporary file on the same file system as the desired destination file, and if no errors occur while writing the temporary file, it can be renamed atomically to the destination file name. In this way, write failures are encountered while writing the temporary file content, rather than while writing the destination file. This ensures that, if the destination existed prior to writing, it is left untouched in the event of a write failure, and if the destination did not exist, a partial file is not written.</para>
<sect1 id="class_tf_atomic_ofstream_wrapper_1cppcode_AtomicOfstreamWrapper">
<title>Example</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>new<sp/>wrapper<sp/>with<sp/>the<sp/>destination<sp/>file<sp/>path.</highlight></codeline>
<codeline><highlight class="normal">TfAtomicOfstreamWrapper<sp/>wrapper(&quot;/home/user/realFile.txt&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>the<sp/>wrapped<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal">string<sp/>reason;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(not<sp/>wrapper.Open(&amp;reason))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TF_RUNTIME_ERROR(reason);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>content<sp/>to<sp/>the<sp/>wrapped<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>ok<sp/>=<sp/>WriteContentToStream(wrapper.GetStream());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>No<sp/>errors<sp/>encountered,<sp/>rename<sp/>the<sp/>temporary<sp/>file<sp/>to<sp/>the<sp/>real<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>reason;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>wrapper.Commit(&amp;reason))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TF_RUNTIME_ERROR(reason);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>wrapper<sp/>goes<sp/>out<sp/>of<sp/>scope<sp/>without<sp/>being<sp/>Commit()ed,<sp/>Cancel()<sp/>is</highlight></codeline>
<codeline><highlight class="normal">//<sp/>called,<sp/>and<sp/>the<sp/>temporary<sp/>file<sp/>is<sp/>removed.</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="pxr/base/tf/atomicOfstreamWrapper.h" line="78" column="1" bodyfile="pxr/base/tf/atomicOfstreamWrapper.h" bodystart="77" bodyend="116"/>
    <listofallmembers>
      <member refid="class_tf_atomic_ofstream_wrapper_1aae02cb4913dbcd20aeaba819c181012c" prot="private" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>_filePath</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1ace9305280a00a502384f4612de2b4991" prot="private" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>_stream</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1af0e7537d68261a64521842a47154111f" prot="private" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>_tmpFilePath</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a3a3b91283a3650b08f6924a6fa68a671" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>Cancel</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a1e7a90af7311dc240c978a5dd707e5d8" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>Commit</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a531042fff5ebd65c1fcba97412c01b7e" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>GetStream</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1aa3d1482e97c0b8bc7d76b23be84ac17b" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>Open</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a9dfe7ad9985d57999417634876b80294" prot="private" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>operator=</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a5778f9a158d8b3ddfca41e1a33c79841" prot="private" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>TfAtomicOfstreamWrapper</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a6b7af8ec709a8e192c376b3facb8a5da" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>TfAtomicOfstreamWrapper</name></member>
      <member refid="class_tf_atomic_ofstream_wrapper_1a24c78f0dee23fa305b2a050bd0e56a31" prot="public" virt="non-virtual"><scope>TfAtomicOfstreamWrapper</scope><name>~TfAtomicOfstreamWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
