<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="shader_function_desc_8h" kind="file" language="C++">
    <compoundname>shaderFunctionDesc.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="imaging_2hgi_2api_8h" local="yes">pxr/imaging/hgi/api.h</includes>
    <includes refid="hgi_2enums_8h" local="yes">pxr/imaging/hgi/enums.h</includes>
    <includes refid="imaging_2hgi_2types_8h" local="yes">pxr/imaging/hgi/types.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="shader_function_8h" local="yes">pxr/imaging/hgi/shaderFunction.h</includedby>
    <incdepgraph>
      <node id="152744">
        <label>locale</label>
      </node>
      <node id="152746">
        <label>stdarg.h</label>
      </node>
      <node id="152754">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="152755" relation="include">
        </childnode>
        <childnode refid="152728" relation="include">
        </childnode>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152726" relation="include">
        </childnode>
        <childnode refid="152756" relation="include">
        </childnode>
      </node>
      <node id="152725">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="152726" relation="include">
        </childnode>
      </node>
      <node id="152768">
        <label>limits</label>
      </node>
      <node id="152728">
        <label>cstdint</label>
      </node>
      <node id="152729">
        <label>pxr/imaging/hgi/types.h</label>
        <link refid="imaging_2hgi_2types_8h_source"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152730" relation="include">
        </childnode>
        <childnode refid="152724" relation="include">
        </childnode>
        <childnode refid="152765" relation="include">
        </childnode>
        <childnode refid="152768" relation="include">
        </childnode>
        <childnode refid="152769" relation="include">
        </childnode>
      </node>
      <node id="152730">
        <label>pxr/base/gf/vec3i.h</label>
        <link refid="vec3i_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152731" relation="include">
        </childnode>
        <childnode refid="152747" relation="include">
        </childnode>
        <childnode refid="152748" relation="include">
        </childnode>
        <childnode refid="152749" relation="include">
        </childnode>
        <childnode refid="152751" relation="include">
        </childnode>
        <childnode refid="152766" relation="include">
        </childnode>
        <childnode refid="152767" relation="include">
        </childnode>
      </node>
      <node id="152743">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152738" relation="include">
        </childnode>
        <childnode refid="152737" relation="include">
        </childnode>
        <childnode refid="152726" relation="include">
        </childnode>
        <childnode refid="152744" relation="include">
        </childnode>
        <childnode refid="152745" relation="include">
        </childnode>
        <childnode refid="152735" relation="include">
        </childnode>
      </node>
      <node id="152769">
        <label>stdlib.h</label>
      </node>
      <node id="152757">
        <label>cmath</label>
      </node>
      <node id="152752">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152739" relation="include">
        </childnode>
        <childnode refid="152753" relation="include">
        </childnode>
        <childnode refid="152754" relation="include">
        </childnode>
        <childnode refid="152758" relation="include">
        </childnode>
        <childnode refid="152759" relation="include">
        </childnode>
      </node>
      <node id="152735">
        <label>string</label>
      </node>
      <node id="152737">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152725" relation="include">
        </childnode>
      </node>
      <node id="152761">
        <label>map</label>
      </node>
      <node id="152755">
        <label>cinttypes</label>
      </node>
      <node id="152723">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="152722">
        <label>pxr/imaging/hgi/shaderFunctionDesc.h</label>
        <link refid="shader_function_desc_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152724" relation="include">
        </childnode>
        <childnode refid="152727" relation="include">
        </childnode>
        <childnode refid="152729" relation="include">
        </childnode>
        <childnode refid="152735" relation="include">
        </childnode>
        <childnode refid="152765" relation="include">
        </childnode>
      </node>
      <node id="152742">
        <label>stddef.h</label>
      </node>
      <node id="152739">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152726" relation="include">
        </childnode>
      </node>
      <node id="152747">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="152725" relation="include">
        </childnode>
      </node>
      <node id="152745">
        <label>any</label>
      </node>
      <node id="152756">
        <label>sys/types.h</label>
      </node>
      <node id="152753">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152726" relation="include">
        </childnode>
        <childnode refid="152754" relation="include">
        </childnode>
        <childnode refid="152757" relation="include">
        </childnode>
      </node>
      <node id="152765">
        <label>vector</label>
      </node>
      <node id="152738">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="152725" relation="include">
        </childnode>
      </node>
      <node id="152759">
        <label>utility</label>
      </node>
      <node id="152732">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152733" relation="include">
        </childnode>
        <childnode refid="152734" relation="include">
        </childnode>
        <childnode refid="152735" relation="include">
        </childnode>
      </node>
      <node id="152726">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="152740">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="152726" relation="include">
        </childnode>
      </node>
      <node id="152751">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152752" relation="include">
        </childnode>
        <childnode refid="152738" relation="include">
        </childnode>
        <childnode refid="152760" relation="include">
        </childnode>
        <childnode refid="152735" relation="include">
        </childnode>
        <childnode refid="152761" relation="include">
        </childnode>
        <childnode refid="152762" relation="include">
        </childnode>
        <childnode refid="152763" relation="include">
        </childnode>
        <childnode refid="152764" relation="include">
        </childnode>
        <childnode refid="152750" relation="include">
        </childnode>
        <childnode refid="152759" relation="include">
        </childnode>
        <childnode refid="152765" relation="include">
        </childnode>
      </node>
      <node id="152758">
        <label>math.h</label>
      </node>
      <node id="152767">
        <label>iosfwd</label>
      </node>
      <node id="152741">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152738" relation="include">
        </childnode>
        <childnode refid="152734" relation="include">
        </childnode>
        <childnode refid="152742" relation="include">
        </childnode>
      </node>
      <node id="152766">
        <label>cstddef</label>
      </node>
      <node id="152736">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152737" relation="include">
        </childnode>
        <childnode refid="152738" relation="include">
        </childnode>
        <childnode refid="152739" relation="include">
        </childnode>
        <childnode refid="152740" relation="include">
        </childnode>
        <childnode refid="152741" relation="include">
        </childnode>
        <childnode refid="152742" relation="include">
        </childnode>
      </node>
      <node id="152727">
        <label>pxr/imaging/hgi/enums.h</label>
        <link refid="hgi_2enums_8h_source"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152724" relation="include">
        </childnode>
        <childnode refid="152728" relation="include">
        </childnode>
      </node>
      <node id="152750">
        <label>type_traits</label>
      </node>
      <node id="152763">
        <label>set</label>
      </node>
      <node id="152733">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="152725" relation="include">
        </childnode>
      </node>
      <node id="152724">
        <label>pxr/imaging/hgi/api.h</label>
        <link refid="imaging_2hgi_2api_8h_source"/>
        <childnode refid="152725" relation="include">
        </childnode>
      </node>
      <node id="152734">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="152726" relation="include">
        </childnode>
      </node>
      <node id="152748">
        <label>pxr/base/gf/limits.h</label>
        <link refid="limits_8h"/>
      </node>
      <node id="152760">
        <label>cstring</label>
      </node>
      <node id="152749">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152750" relation="include">
        </childnode>
      </node>
      <node id="152762">
        <label>memory</label>
      </node>
      <node id="152731">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="152723" relation="include">
        </childnode>
        <childnode refid="152732" relation="include">
        </childnode>
        <childnode refid="152736" relation="include">
        </childnode>
        <childnode refid="152738" relation="include">
        </childnode>
        <childnode refid="152740" relation="include">
        </childnode>
        <childnode refid="152743" relation="include">
        </childnode>
        <childnode refid="152742" relation="include">
        </childnode>
        <childnode refid="152746" relation="include">
        </childnode>
        <childnode refid="152735" relation="include">
        </childnode>
      </node>
      <node id="152764">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="152782">
        <label>pxr/imaging/hdSt/simpleLightingShader.h</label>
        <link refid="simple_lighting_shader_8h_source"/>
      </node>
      <node id="152778">
        <label>pxr/imaging/hdSt/shaderCode.h</label>
        <link refid="shader_code_8h_source"/>
        <childnode refid="152779" relation="include">
        </childnode>
        <childnode refid="152780" relation="include">
        </childnode>
        <childnode refid="152783" relation="include">
        </childnode>
        <childnode refid="152784" relation="include">
        </childnode>
        <childnode refid="152785" relation="include">
        </childnode>
      </node>
      <node id="152798">
        <label>pxr/imaging/hdx/boundingBoxTask.h</label>
        <link refid="bounding_box_task_8h_source"/>
        <childnode refid="152799" relation="include">
        </childnode>
      </node>
      <node id="152806">
        <label>pxr/imaging/hgiGL/computePipeline.h</label>
        <link refid="_l_2compute_pipeline_8h_source"/>
      </node>
      <node id="152775">
        <label>pxr/imaging/hdSt/extCompGpuComputationResource.h</label>
        <link refid="ext_comp_gpu_computation_resource_8h_source"/>
        <childnode refid="152776" relation="include">
        </childnode>
      </node>
      <node id="152795">
        <label>pxr/usdImaging/usdAppUtils/frameRecorder.h</label>
        <link refid="frame_recorder_8h"/>
      </node>
      <node id="152810">
        <label>pxr/imaging/hdx/skydomeTask.h</label>
        <link refid="skydome_task_8h_source"/>
      </node>
      <node id="152771">
        <label>pxr/imaging/hgi/shaderFunction.h</label>
        <link refid="shader_function_8h_source"/>
        <childnode refid="152772" relation="include">
        </childnode>
        <childnode refid="152796" relation="include">
        </childnode>
        <childnode refid="152814" relation="include">
        </childnode>
      </node>
      <node id="152803">
        <label>pxr/imaging/hdx/visualizeAovTask.h</label>
        <link refid="visualize_aov_task_8h_source"/>
      </node>
      <node id="152785">
        <label>pxr/imaging/hdSt/textureBinder.h</label>
        <link refid="texture_binder_8h_source"/>
      </node>
      <node id="152790">
        <label>pxr/imaging/hgiGL/computeCmds.h</label>
        <link refid="_l_2compute_cmds_8h_source"/>
      </node>
      <node id="152811">
        <label>pxr/imaging/hgi/indirectCommandEncoder.h</label>
        <link refid="indirect_command_encoder_8h_source"/>
      </node>
      <node id="152800">
        <label>pxr/imaging/hdx/colorCorrectionTask.h</label>
        <link refid="color_correction_task_8h_source"/>
        <childnode refid="152799" relation="include">
        </childnode>
      </node>
      <node id="152804">
        <label>pxr/imaging/hgi/computePipeline.h</label>
        <link refid="compute_pipeline_8h_source"/>
        <childnode refid="152805" relation="include">
        </childnode>
        <childnode refid="152790" relation="include">
        </childnode>
        <childnode refid="152806" relation="include">
        </childnode>
      </node>
      <node id="152779">
        <label>pxr/imaging/hdSt/geometricShader.h</label>
        <link refid="geometric_shader_8h_source"/>
      </node>
      <node id="152794">
        <label>pxr/usdImaging/usdImagingGL/engine.h</label>
        <link refid="usd_imaging_2usd_imaging_g_l_2engine_8h"/>
        <childnode refid="152795" relation="include">
        </childnode>
      </node>
      <node id="152781">
        <label>pxr/imaging/hdSt/fallbackLightingShader.h</label>
        <link refid="fallback_lighting_shader_8h_source"/>
      </node>
      <node id="152770">
        <label>pxr/imaging/hgi/shaderFunctionDesc.h</label>
        <link refid="shader_function_desc_8h"/>
        <childnode refid="152771" relation="include">
        </childnode>
      </node>
      <node id="152793">
        <label>pxr/imaging/hgiGL/graphicsCmds.h</label>
        <link refid="_l_2graphics_cmds_8h_source"/>
      </node>
      <node id="152787">
        <label>pxr/imaging/hgiGL/garbageCollector.h</label>
        <link refid="garbage_collector_8h_source"/>
        <childnode refid="152788" relation="include">
        </childnode>
      </node>
      <node id="152773">
        <label>pxr/imaging/hdSt/renderBuffer.h</label>
        <link refid="t_2render_buffer_8h_source"/>
      </node>
      <node id="152801">
        <label>pxr/imaging/hdx/effectsShader.h</label>
        <link refid="effects_shader_8h_source"/>
        <childnode refid="152802" relation="include">
        </childnode>
      </node>
      <node id="152799">
        <label>pxr/imaging/hdx/taskController.h</label>
        <link refid="task_controller_8h_source"/>
      </node>
      <node id="152813">
        <label>pxr/imaging/hgiGL/shaderProgram.h</label>
        <link refid="_l_2shader_program_8h_source"/>
      </node>
      <node id="152802">
        <label>pxr/imaging/hdx/fullscreenShader.h</label>
        <link refid="fullscreen_shader_8h_source"/>
      </node>
      <node id="152774">
        <label>pxr/imaging/hdSt/resourceRegistry.h</label>
        <link refid="t_2resource_registry_8h_source"/>
        <childnode refid="152775" relation="include">
        </childnode>
        <childnode refid="152777" relation="include">
        </childnode>
        <childnode refid="152778" relation="include">
        </childnode>
        <childnode refid="152786" relation="include">
        </childnode>
      </node>
      <node id="152812">
        <label>pxr/imaging/hgiGL/graphicsPipeline.h</label>
        <link refid="_l_2graphics_pipeline_8h_source"/>
      </node>
      <node id="152805">
        <label>pxr/imaging/hgi/computeCmds.h</label>
        <link refid="compute_cmds_8h_source"/>
        <childnode refid="152772" relation="include">
        </childnode>
        <childnode refid="152790" relation="include">
        </childnode>
      </node>
      <node id="152772">
        <label>pxr/imaging/hgi/hgi.h</label>
        <link refid="hgi_8h_source"/>
        <childnode refid="152773" relation="include">
        </childnode>
        <childnode refid="152774" relation="include">
        </childnode>
        <childnode refid="152787" relation="include">
        </childnode>
        <childnode refid="152788" relation="include">
        </childnode>
        <childnode refid="152794" relation="include">
        </childnode>
      </node>
      <node id="152780">
        <label>pxr/imaging/hdSt/lightingShader.h</label>
        <link refid="lighting_shader_8h_source"/>
        <childnode refid="152781" relation="include">
        </childnode>
        <childnode refid="152782" relation="include">
        </childnode>
      </node>
      <node id="152796">
        <label>pxr/imaging/hgi/shaderProgram.h</label>
        <link refid="shader_program_8h_source"/>
        <childnode refid="152797" relation="include">
        </childnode>
        <childnode refid="152798" relation="include">
        </childnode>
        <childnode refid="152800" relation="include">
        </childnode>
        <childnode refid="152801" relation="include">
        </childnode>
        <childnode refid="152802" relation="include">
        </childnode>
        <childnode refid="152803" relation="include">
        </childnode>
        <childnode refid="152804" relation="include">
        </childnode>
        <childnode refid="152807" relation="include">
        </childnode>
        <childnode refid="152772" relation="include">
        </childnode>
        <childnode refid="152813" relation="include">
        </childnode>
      </node>
      <node id="152792">
        <label>pxr/imaging/hgiGL/ops.h</label>
        <link refid="ops_8h_source"/>
      </node>
      <node id="152776">
        <label>pxr/imaging/hdSt/extCompGpuComputation.h</label>
        <link refid="ext_comp_gpu_computation_8h_source"/>
      </node>
      <node id="152788">
        <label>pxr/imaging/hgiGL/hgi.h</label>
        <link refid="_l_2hgi_8h_source"/>
        <childnode refid="152789" relation="include">
        </childnode>
        <childnode refid="152790" relation="include">
        </childnode>
        <childnode refid="152791" relation="include">
        </childnode>
        <childnode refid="152793" relation="include">
        </childnode>
      </node>
      <node id="152808">
        <label>pxr/imaging/hgi/graphicsCmds.h</label>
        <link refid="graphics_cmds_8h_source"/>
        <childnode refid="152798" relation="include">
        </childnode>
        <childnode refid="152809" relation="include">
        </childnode>
        <childnode refid="152800" relation="include">
        </childnode>
        <childnode refid="152810" relation="include">
        </childnode>
        <childnode refid="152772" relation="include">
        </childnode>
        <childnode refid="152793" relation="include">
        </childnode>
      </node>
      <node id="152797">
        <label>pxr/imaging/hdSt/glslProgram.h</label>
        <link refid="glsl_program_8h_source"/>
      </node>
      <node id="152786">
        <label>pxr/imaging/hdSt/vboSimpleMemoryManager.h</label>
        <link refid="vbo_simple_memory_manager_8h_source"/>
      </node>
      <node id="152814">
        <label>pxr/imaging/hgiGL/shaderFunction.h</label>
        <link refid="_l_2shader_function_8h_source"/>
        <childnode refid="152813" relation="include">
        </childnode>
      </node>
      <node id="152789">
        <label>pxr/imaging/hgiGL/blitCmds.h</label>
        <link refid="_l_2blit_cmds_8h_source"/>
      </node>
      <node id="152809">
        <label>pxr/imaging/hdx/colorChannelTask.h</label>
        <link refid="color_channel_task_8h_source"/>
      </node>
      <node id="152777">
        <label>pxr/imaging/hdSt/primUtils.h</label>
        <link refid="prim_utils_8h_source"/>
      </node>
      <node id="152791">
        <label>pxr/imaging/hgiGL/device.h</label>
        <link refid="device_8h_source"/>
        <childnode refid="152792" relation="include">
        </childnode>
      </node>
      <node id="152783">
        <label>pxr/imaging/hdSt/material.h</label>
        <link refid="imaging_2hd_st_2material_8h_source"/>
      </node>
      <node id="152784">
        <label>pxr/imaging/hdSt/renderPassShader.h</label>
        <link refid="render_pass_shader_8h_source"/>
      </node>
      <node id="152807">
        <label>pxr/imaging/hgi/graphicsPipeline.h</label>
        <link refid="graphics_pipeline_8h_source"/>
        <childnode refid="152798" relation="include">
        </childnode>
        <childnode refid="152800" relation="include">
        </childnode>
        <childnode refid="152801" relation="include">
        </childnode>
        <childnode refid="152802" relation="include">
        </childnode>
        <childnode refid="152803" relation="include">
        </childnode>
        <childnode refid="152808" relation="include">
        </childnode>
        <childnode refid="152772" relation="include">
        </childnode>
        <childnode refid="152811" relation="include">
        </childnode>
        <childnode refid="152812" relation="include">
        </childnode>
        <childnode refid="152792" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_hgi_shader_function_texture_desc" prot="public">HgiShaderFunctionTextureDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_buffer_desc" prot="public">HgiShaderFunctionBufferDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_param_desc" prot="public">HgiShaderFunctionParamDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_param_block_desc" prot="public">HgiShaderFunctionParamBlockDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_param_block_desc_1_1_member" prot="public">HgiShaderFunctionParamBlockDesc::Member</innerclass>
    <innerclass refid="struct_hgi_shader_function_compute_desc" prot="public">HgiShaderFunctionComputeDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_tessellation_desc" prot="public">HgiShaderFunctionTessellationDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_geometry_desc" prot="public">HgiShaderFunctionGeometryDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_fragment_desc" prot="public">HgiShaderFunctionFragmentDesc</innerclass>
    <innerclass refid="struct_hgi_shader_function_desc" prot="public">HgiShaderFunctionDesc</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="shader_function_desc_8h_1ae96ed244104f8c015bee80a1e25dc026" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref> &gt;</type>
        <definition>using HgiShaderFunctionTextureDescVector =  std::vector&lt;HgiShaderFunctionTextureDesc&gt;</definition>
        <argsstring></argsstring>
        <name>HgiShaderFunctionTextureDescVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="79" column="1" bodyfile="pxr/imaging/hgi/shaderFunctionDesc.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shader_function_desc_8h_1ae19ccf6596e45a313a8e87ff3d2acdf0" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref> &gt;</type>
        <definition>using HgiShaderFunctionBufferDescVector =  std::vector&lt;HgiShaderFunctionBufferDesc&gt;</definition>
        <argsstring></argsstring>
        <name>HgiShaderFunctionBufferDescVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="124" column="1" bodyfile="pxr/imaging/hgi/shaderFunctionDesc.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shader_function_desc_8h_1a2809eee82099ac45104a0ab19fda952d" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> &gt;</type>
        <definition>using HgiShaderFunctionParamDescVector =  std::vector&lt;HgiShaderFunctionParamDesc&gt;</definition>
        <argsstring></argsstring>
        <name>HgiShaderFunctionParamDescVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="179" column="1" bodyfile="pxr/imaging/hgi/shaderFunctionDesc.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shader_function_desc_8h_1a3cad7e6dd58651488595e8ff0bcffe33" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref> &gt;</type>
        <definition>using HgiShaderFunctionParamBlockDescVector =  std::vector&lt;HgiShaderFunctionParamBlockDesc&gt;</definition>
        <argsstring></argsstring>
        <name>HgiShaderFunctionParamBlockDescVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="228" column="1" bodyfile="pxr/imaging/hgi/shaderFunctionDesc.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="shader_function_desc_8h_1a0b19185639a9e14d3b7b7bac27f24ade" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &gt;</type>
        <definition>using HgiShaderFunctionDescVector =  std::vector&lt;HgiShaderFunctionDesc&gt;</definition>
        <argsstring></argsstring>
        <name>HgiShaderFunctionDescVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="460" column="1" bodyfile="pxr/imaging/hgi/shaderFunctionDesc.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="shader_function_desc_8h_1ab4369fdb62158efe868ad09e7da25aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionTextureDesc &amp;lhs, const HgiShaderFunctionTextureDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ab2def35a99fb822d9c9ef313108dad98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionTextureDesc &amp;lhs, const HgiShaderFunctionTextureDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a482721835d3ebdbc183cc73d10f2094e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionBufferDesc &amp;lhs, const HgiShaderFunctionBufferDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1aa6552d640d81ba11518afad6592dc7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionBufferDesc &amp;lhs, const HgiShaderFunctionBufferDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a6c2d55fcf6bbc204e9b0fb67076f3686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionParamDesc &amp;lhs, const HgiShaderFunctionParamDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a1ab2baed6cc377fcb8dc5c6693ff1b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionParamDesc &amp;lhs, const HgiShaderFunctionParamDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a9f1df362964bb6380e024ff8663caab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionParamBlockDesc &amp;lhs, const HgiShaderFunctionParamBlockDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a1bab188b1c69cf0cde235ec43bbef3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionParamBlockDesc &amp;lhs, const HgiShaderFunctionParamBlockDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ac91e10c26f274ad42e730e8105e5285e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionParamBlockDesc::Member &amp;lhs, const HgiShaderFunctionParamBlockDesc::Member &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const HgiShaderFunctionParamBlockDesc::Member &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const HgiShaderFunctionParamBlockDesc::Member &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ada859e63e7850e9fb33f900d3c9b9cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionParamBlockDesc::Member &amp;lhs, const HgiShaderFunctionParamBlockDesc::Member &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const HgiShaderFunctionParamBlockDesc::Member &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const HgiShaderFunctionParamBlockDesc::Member &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ae89ca03d6ea17e6f8b2d6f2f9e432c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionComputeDesc &amp;lhs, const HgiShaderFunctionComputeDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a22344975edb791e7bd7b6fc96e0e6419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionComputeDesc &amp;lhs, const HgiShaderFunctionComputeDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a7c161b9211effbb37050756f262be788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionTessellationDesc &amp;lhs, const HgiShaderFunctionTessellationDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a8fa42e1024e642de35a905c85a5d0c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionTessellationDesc &amp;lhs, const HgiShaderFunctionTessellationDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a4d388e36f7bfa8055dc41be16e84b4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionGeometryDesc &amp;lhs, const HgiShaderFunctionGeometryDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a2e4e5206d3fac4af9a1cfaabbaa39782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionGeometryDesc &amp;lhs, const HgiShaderFunctionGeometryDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1afe2a4d6e8e54ff860ec442f7d6d511f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionFragmentDesc &amp;lhs, const HgiShaderFunctionFragmentDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a0d9bf53e92dd8847caa153dbd989c33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionFragmentDesc &amp;lhs, const HgiShaderFunctionFragmentDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1af420960f6f231024ddc83a752ace5e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator==</definition>
        <argsstring>(const HgiShaderFunctionDesc &amp;lhs, const HgiShaderFunctionDesc &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1aad0ae10fc4d42a5d1757e5f9fdc866e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API bool</type>
        <definition>HGI_API bool operator!=</definition>
        <argsstring>(const HgiShaderFunctionDesc &amp;lhs, const HgiShaderFunctionDesc &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a396a25236462a444e943fac249062002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddTexture</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const uint32_t bindIndex=0, uint32_t dimensions=2, const HgiFormat &amp;format=HgiFormatFloat32Vec4, const HgiShaderTextureType textureType=HgiShaderTextureTypeTexture)</argsstring>
        <name>HgiShaderFunctionAddTexture</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bindIndex</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dimensions</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const HgiFormat &amp;</type>
          <declname>format</declname>
          <defval>HgiFormatFloat32Vec4</defval>
        </param>
        <param>
          <type>const HgiShaderTextureType</type>
          <declname>textureType</declname>
          <defval>HgiShaderTextureTypeTexture</defval>
        </param>
        <briefdescription>
<para>Adds texture descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a1db9483295ef7014986a2be156170749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddArrayOfTextures</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const uint32_t arraySize, const uint32_t bindIndex=0, const uint32_t dimensions=2, const HgiFormat &amp;format=HgiFormatFloat32Vec4, const HgiShaderTextureType textureType=HgiShaderTextureTypeTexture)</argsstring>
        <name>HgiShaderFunctionAddArrayOfTextures</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bindIndex</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>dimensions</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const HgiFormat &amp;</type>
          <declname>format</declname>
          <defval>HgiFormatFloat32Vec4</defval>
        </param>
        <param>
          <type>const HgiShaderTextureType</type>
          <declname>textureType</declname>
          <defval>HgiShaderTextureTypeTexture</defval>
        </param>
        <briefdescription>
<para>Adds array of textures descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a89b7ddeb762b2c4752b68224b815efa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddWritableTexture</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const uint32_t bindIndex=0, const uint32_t dimensions=2, const HgiFormat &amp;format=HgiFormatFloat32Vec4, const HgiShaderTextureType textureType=HgiShaderTextureTypeTexture)</argsstring>
        <name>HgiShaderFunctionAddWritableTexture</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bindIndex</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>dimensions</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const HgiFormat &amp;</type>
          <declname>format</declname>
          <defval>HgiFormatFloat32Vec4</defval>
        </param>
        <param>
          <type>const HgiShaderTextureType</type>
          <declname>textureType</declname>
          <defval>HgiShaderTextureTypeTexture</defval>
        </param>
        <briefdescription>
<para>Adds writable texture descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1aed3193b49e45cb525aae2b2d53bf3d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddBuffer</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const uint32_t bindIndex, HgiBindingType binding, const uint32_t arraySize=0)</argsstring>
        <name>HgiShaderFunctionAddBuffer</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>HgiBindingType</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>arraySize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Adds buffer descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a678fb50754276d7fa6fe17b8251c1483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddWritableBuffer</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const uint32_t bindIndex)</argsstring>
        <name>HgiShaderFunctionAddWritableBuffer</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <briefdescription>
<para>Adds buffer descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a07f3939f215ada75719cf25a512588e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddConstantParam</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const std::string &amp;role=std::string())</argsstring>
        <name>HgiShaderFunctionAddConstantParam</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>role</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Adds constant function param descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a5f418eaeb952562cb8088a7cb696d518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddStageInput</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const std::string &amp;role=std::string())</argsstring>
        <name>HgiShaderFunctionAddStageInput</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>role</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Adds stage input function param descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>The location is will be set to the next available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1acc65f7457e21d30b5676363181de503d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddStageInput</definition>
        <argsstring>(HgiShaderFunctionDesc *functionDesc, HgiShaderFunctionParamDesc const &amp;paramDesc)</argsstring>
        <name>HgiShaderFunctionAddStageInput</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>functionDesc</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> const &amp;</type>
          <declname>paramDesc</declname>
        </param>
        <briefdescription>
<para>Adds stage input function param descriptor to given shader function descriptor given param descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ad3b8124365956be0115443ea417d1d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddGlobalVariable</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const std::string &amp;arraySize)</argsstring>
        <name>HgiShaderFunctionAddGlobalVariable</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arraySize</declname>
        </param>
        <briefdescription>
<para>Interstage input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a6edb146dce4869cc40b12077f8e706ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddStageOutput</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const std::string &amp;role=std::string(), const std::string &amp;arraySize=std::string())</argsstring>
        <name>HgiShaderFunctionAddStageOutput</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>role</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arraySize</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Adds stage output function param descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1a576dc0692d698e355764c2cd8453b937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddStageOutput</definition>
        <argsstring>(HgiShaderFunctionDesc *desc, const std::string &amp;nameInShader, const std::string &amp;type, const uint32_t location)</argsstring>
        <name>HgiShaderFunctionAddStageOutput</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nameInShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Adds stage output function param descriptor to given shader function descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="shader_function_desc_8h_1ae423626d32a871fa95da87a1e7f6c36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API void</type>
        <definition>HGI_API void HgiShaderFunctionAddStageOutput</definition>
        <argsstring>(HgiShaderFunctionDesc *functionDesc, HgiShaderFunctionParamDesc const &amp;paramDesc)</argsstring>
        <name>HgiShaderFunctionAddStageOutput</name>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> *</type>
          <declname>functionDesc</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref> const &amp;</type>
          <declname>paramDesc</declname>
        </param>
        <briefdescription>
<para>Adds stage output function param descriptor to given shader function descriptor given param descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/shaderFunctionDesc.h" line="590" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_IMAGING_HGI_SHADERFUNCTIONDESC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_IMAGING_HGI_SHADERFUNCTIONDESC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/imaging/hgi/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/imaging/hgi/enums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/imaging/hgi/types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="struct_hgi_shader_function_texture_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>nameInShader;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dimensions;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiFormat<sp/>format;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiShaderTextureType<sp/>textureType;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bindIndex;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>arraySize;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HgiShaderFunctionTextureDescVector<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionTextureDesc&gt;;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_texture_desc" kindref="compound">HgiShaderFunctionTextureDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_hgi_shader_function_buffer_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>nameInShader;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bindIndex;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>arraySize;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiBindingType<sp/>binding;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writable;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HgiShaderFunctionBufferDescVector<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionBufferDesc&gt;;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_buffer_desc" kindref="compound">HgiShaderFunctionBufferDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="struct_hgi_shader_function_param_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref>();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>nameInShader;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>location;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>interstageSlot;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiInterpolationType<sp/>interpolation;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiSamplingType<sp/>sampling;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiStorageType<sp/>storage;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>role;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>arraySize;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamDescVector<sp/>=</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamDesc&gt;;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="struct_hgi_shader_function_param_block_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref></highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Member<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>type;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>MemberVector<sp/>=<sp/>std::vector&lt;Member&gt;;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>blockName;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>instanceName;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>MemberVector<sp/>members;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>arraySize;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>interstageSlot;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamBlockDescVector<sp/>=</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamBlockDesc&gt;;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_param_block_desc" kindref="compound">HgiShaderFunctionParamBlockDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamBlockDesc::Member&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamBlockDesc::Member&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamBlockDesc::Member&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderFunctionParamBlockDesc::Member&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="struct_hgi_shader_function_compute_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref></highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gf_vec3i" kindref="compound">GfVec3i</ref><sp/>localSize;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="struct_hgi_shader_function_tessellation_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref></highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>PatchType<sp/>{<sp/>Triangles,<sp/>Quads,<sp/>Isolines<sp/>};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Spacing<sp/>{<sp/>Equal,<sp/>FractionalEven,<sp/>FractionalOdd<sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Ordering<sp/>{<sp/>CW,<sp/>CCW<sp/>};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref>();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>PatchType<sp/>patchType;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Spacing<sp/>spacing;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>Ordering<sp/>ordering;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>numVertsPerPatchIn;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>numVertsPerPatchOut;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="struct_hgi_shader_function_geometry_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref></highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>InPrimitiveType<sp/>{<sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Points,<sp/>Lines,<sp/>LinesAdjacency,<sp/>Triangles,<sp/>TrianglesAdjacency<sp/>};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>OutPrimitiveType<sp/>{<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Points,<sp/>LineStrip,<sp/>TriangleStrip<sp/>};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref>();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>InPrimitiveType<sp/>inPrimitiveType;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>OutPrimitiveType<sp/>outPrimitiveType;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outMaxVertices;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="struct_hgi_shader_function_fragment_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref></highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref>();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>earlyFragmentTests;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="struct_hgi_shader_function_desc" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref></highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>HGI_API</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref>();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>debugName;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiShaderStage<sp/>shaderStage;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shaderCodeDeclarations;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*shaderCode;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>*generatedShaderCodeOut;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionTextureDesc&gt;<sp/>textures;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionBufferDesc&gt;<sp/>buffers;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamDesc&gt;<sp/>constantParams;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamDesc&gt;<sp/>stageGlobalMembers;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamDesc&gt;<sp/>stageInputs;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamDesc&gt;<sp/>stageOutputs;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamBlockDesc&gt;<sp/>stageInputBlocks;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionParamBlockDesc&gt;<sp/>stageOutputBlocks;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_compute_desc" kindref="compound">HgiShaderFunctionComputeDesc</ref><sp/>computeDescriptor;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_tessellation_desc" kindref="compound">HgiShaderFunctionTessellationDesc</ref><sp/>tessellationDescriptor;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_geometry_desc" kindref="compound">HgiShaderFunctionGeometryDesc</ref><sp/>geometryDescriptor;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_fragment_desc" kindref="compound">HgiShaderFunctionFragmentDesc</ref><sp/>fragmentDescriptor;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>HgiShaderFunctionDescVector<sp/>=</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;HgiShaderFunctionDesc&gt;;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1aeba317199ea34ef54f81f62a5c9048e2" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ar_asset_info_1a12deadfc180832b6029a5c4042668801" kindref="member">operator!=</ref>(</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">HgiShaderFunctionAddTexture(</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bindIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dimensions<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiFormat<sp/>&amp;format<sp/>=<sp/>HgiFormatFloat32Vec4,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderTextureType<sp/>textureType<sp/>=<sp/>HgiShaderTextureTypeTexture);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">HgiShaderFunctionAddArrayOfTextures(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>arraySize,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bindIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>dimensions<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiFormat<sp/>&amp;format<sp/>=<sp/>HgiFormatFloat32Vec4,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderTextureType<sp/>textureType<sp/>=<sp/>HgiShaderTextureTypeTexture);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">HgiShaderFunctionAddWritableTexture(</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bindIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>dimensions<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiFormat<sp/>&amp;format<sp/>=<sp/>HgiFormatFloat32Vec4,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HgiShaderTextureType<sp/>textureType<sp/>=<sp/>HgiShaderTextureTypeTexture);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">HgiShaderFunctionAddBuffer(</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bindIndex,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>HgiBindingType<sp/>binding,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>arraySize<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">HgiShaderFunctionAddWritableBuffer(</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bindIndex);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">HgiShaderFunctionAddConstantParam(</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;role<sp/>=<sp/>std::string());</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">HgiShaderFunctionAddStageInput(</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;role<sp/>=<sp/>std::string());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">HgiShaderFunctionAddStageInput(</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*functionDesc,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;paramDesc);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">HgiShaderFunctionAddGlobalVariable(</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arraySize);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">HgiShaderFunctionAddStageOutput(</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;role<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arraySize<sp/>=<sp/>std::string());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">HgiShaderFunctionAddStageOutput(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*desc,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameInShader,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;type,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>location);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">HGI_API</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">HgiShaderFunctionAddStageOutput(</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref><sp/>*functionDesc,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_hgi_shader_function_param_desc" kindref="compound">HgiShaderFunctionParamDesc</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;paramDesc);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pxr/imaging/hgi/shaderFunctionDesc.h"/>
  </compounddef>
</doxygen>
