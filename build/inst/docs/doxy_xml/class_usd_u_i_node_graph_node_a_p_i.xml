<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_u_i_node_graph_node_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdUINodeGraphNodeAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="node_graph_node_a_p_i_8h" local="no">nodeGraphNodeAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_u_i_node_graph_node_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="70" column="1" bodyfile="pxr/usd/usdUI/nodeGraphNodeAPI.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_u_i_node_graph_node_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="162" column="1" bodyfile="pxr/usd/usdUI/nodeGraphNodeAPI.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a4f03ec6607890baa82185ac191f87819" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdUINodeGraphNodeAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdUINodeGraphNodeAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_u_i_node_graph_node_a_p_i_1a7503645cfd74736e3a76c45de489115a" kindref="member">UsdUINodeGraphNodeAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="76" column="1" bodyfile="pxr/usd/usdUI/nodeGraphNodeAPI.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a42741fcdf6444ff090f6363c26270424" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdUINodeGraphNodeAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdUINodeGraphNodeAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="84" column="1" bodyfile="pxr/usd/usdUI/nodeGraphNodeAPI.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1aab1d8a50b8e4bda513621c4fe9f53544" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDUI_API</type>
        <definition>virtual USDUI_API ~UsdUINodeGraphNodeAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdUINodeGraphNodeAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a4a6bcfdb266dc694dc137c90e40facb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetPosAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetPosAttr</name>
        <briefdescription>
<para>Declared relative position to the parent in a node graph. </para>
        </briefdescription>
        <detaileddescription>
<para>X is the horizontal position. Y is the vertical position. Higher numbers correspond to lower positions (coordinates are Qt style, not cartesian).</para>
<para>These positions are not explicitly meant in pixel space, but rather assume that the size of a node is approximately 1.0x1.0. Where size-x is the node width and size-y height of the node. Depending on graph UI implementation, the size of a node may vary in each direction.</para>
<para>Example: If a node&apos;s width is 300 and it is position is at 1000, we store for x-position: 1000 * (1.0/300)</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform float2 ui:nodegraph:node:pos</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float2   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1acbf367f80f7ced8dcec517b9c2065169" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreatePosAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreatePosAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1a4a6bcfdb266dc694dc137c90e40facb4" kindref="member">GetPosAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a30d67665b0a1842a1ee2e51738e0603d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetStackingOrderAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetStackingOrderAttr</name>
        <briefdescription>
<para>This optional value is a useful hint when an application cares about the visibility of a node and whether each node overlaps another. </para>
        </briefdescription>
        <detaileddescription>
<para>Nodes with lower stacking order values are meant to be drawn below higher ones. Negative values are meant as background. Positive values are meant as foreground. Undefined values should be treated as 0.</para>
<para>There are no set limits in these values.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform int ui:nodegraph:node:stackingOrder</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>int   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Int   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a66ade7ada682ea06b18acd9c7fe8eb74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreateStackingOrderAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateStackingOrderAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1a30d67665b0a1842a1ee2e51738e0603d" kindref="member">GetStackingOrderAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1aa461d6911793fb4d247f5e6bbee6da86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetDisplayColorAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetDisplayColorAttr</name>
        <briefdescription>
<para>This hint defines what tint the node should have in the node graph. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform color3f ui:nodegraph:node:displayColor</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Color3f   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a8b90c0b74d7bd4063a0b6c96be3f5e9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreateDisplayColorAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateDisplayColorAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1aa461d6911793fb4d247f5e6bbee6da86" kindref="member">GetDisplayColorAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a7f5a43f2dc88a98920471902940c1cdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetIconAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetIconAttr</name>
        <briefdescription>
<para>This points to an image that should be displayed on the node. </para>
        </briefdescription>
        <detaileddescription>
<para>It is intended to be useful for summary visual classification of nodes, rather than a thumbnail preview of the computed result of the node in some computational system.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform asset ui:nodegraph:node:icon</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Asset   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a3a3c07e6eb50216f6da73d097996e1a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreateIconAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateIconAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1a7f5a43f2dc88a98920471902940c1cdb" kindref="member">GetIconAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a91081edc1f964eab182875de6a0896bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetExpansionStateAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetExpansionStateAttr</name>
        <briefdescription>
<para>The current expansionState of the node in the ui. </para>
        </briefdescription>
        <detaileddescription>
<para>&apos;open&apos; = fully expanded &apos;closed&apos; = fully collapsed &apos;minimized&apos; = should take the least space possible</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token ui:nodegraph:node:expansionState</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_u_i_2tokens_8h_1ad9e3de7ec37bbd0e3aeb816c6e3cf2d6" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>open, closed, minimized   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1ad4f2d921c12935e0c178fd4ed3b6edb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreateExpansionStateAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateExpansionStateAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1a91081edc1f964eab182875de6a0896bd" kindref="member">GetExpansionStateAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1acb96d71d414c78f301d4d7ba24374a36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute GetSizeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetSizeAttr</name>
        <briefdescription>
<para>Optional size hint for a node in a node graph. </para>
        </briefdescription>
        <detaileddescription>
<para>X is the width. Y is the height.</para>
<para>This value is optional, because node size is often determined based on the number of in- and outputs of a node.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform float2 ui:nodegraph:node:size</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_gf_vec2f" kindref="compound">GfVec2f</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float2   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1abdc6791abd7dceb54fb4e0bd190bc318" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDUI_API UsdAttribute CreateSizeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateSizeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_u_i_node_graph_node_a_p_i_1acb96d71d414c78f301d4d7ba24374a36" kindref="member">GetSizeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="351" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a4e003ae715a7aa14790a4fffc29cc088" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDUI_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a7503645cfd74736e3a76c45de489115a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref></type>
        <definition>static USDUI_API UsdUINodeGraphNodeAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdUINodeGraphNodeAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1acaa1c9842076b71db5e25d2d84299cf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API bool</type>
        <definition>static USDUI_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1a7940d8a06a385109f78b94816819ec55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref></type>
        <definition>static USDUI_API UsdUINodeGraphNodeAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;NodeGraphNodeAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_u_i_node_graph_node_a_p_i" kindref="compound">UsdUINodeGraphNodeAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1ad15ffdc5353a19f2de4cb27a4f1dd47d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDUI_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDUI_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="158" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1adf74913324000e010b3a0daf8cd4075f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDUI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDUI_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_u_i_node_graph_node_a_p_i_1ad926ae18bb68d07cd9c093d4722ad3d2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDUI_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDUI_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This api helps storing information about nodes in node graphs. </para>
    </briefdescription>
    <detaileddescription>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_u_i_2tokens_8h_1ad9e3de7ec37bbd0e3aeb816c6e3cf2d6" kindref="member">UsdUITokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdUITokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8388">
        <label>UsdUINodeGraphNodeAPI</label>
        <link refid="class_usd_u_i_node_graph_node_a_p_i"/>
        <childnode refid="8389" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8390">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8389">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8390" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8391">
        <label>UsdUINodeGraphNodeAPI</label>
        <link refid="class_usd_u_i_node_graph_node_a_p_i"/>
        <childnode refid="8392" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8393">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="8392">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="8393" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdUI/nodeGraphNodeAPI.h" line="65" column="1" bodyfile="pxr/usd/usdUI/nodeGraphNodeAPI.h" bodystart="64" bodyend="364"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1ad15ffdc5353a19f2de4cb27a4f1dd47d" prot="protected" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1adf74913324000e010b3a0daf8cd4075f" prot="private" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1ad926ae18bb68d07cd9c093d4722ad3d2" prot="private" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a7940d8a06a385109f78b94816819ec55" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>Apply</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1acaa1c9842076b71db5e25d2d84299cf5" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a8b90c0b74d7bd4063a0b6c96be3f5e9c" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreateDisplayColorAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1ad4f2d921c12935e0c178fd4ed3b6edb3" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreateExpansionStateAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a3a3c07e6eb50216f6da73d097996e1a4" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreateIconAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1acbf367f80f7ced8dcec517b9c2065169" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreatePosAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1abdc6791abd7dceb54fb4e0bd190bc318" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreateSizeAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a66ade7ada682ea06b18acd9c7fe8eb74" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>CreateStackingOrderAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a7503645cfd74736e3a76c45de489115a" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>Get</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1aa461d6911793fb4d247f5e6bbee6da86" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetDisplayColorAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a91081edc1f964eab182875de6a0896bd" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetExpansionStateAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a7f5a43f2dc88a98920471902940c1cdb" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetIconAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a4a6bcfdb266dc694dc137c90e40facb4" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetPosAttr</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a4e003ae715a7aa14790a4fffc29cc088" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1acb96d71d414c78f301d4d7ba24374a36" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetSizeAttr</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a30d67665b0a1842a1ee2e51738e0603d" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>GetStackingOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a4f03ec6607890baa82185ac191f87819" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdUINodeGraphNodeAPI</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1a42741fcdf6444ff090f6363c26270424" prot="public" virt="non-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>UsdUINodeGraphNodeAPI</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_u_i_node_graph_node_a_p_i_1aab1d8a50b8e4bda513621c4fe9f53544" prot="public" virt="virtual"><scope>UsdUINodeGraphNodeAPI</scope><name>~UsdUINodeGraphNodeAPI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
