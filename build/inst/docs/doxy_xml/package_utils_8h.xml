<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="package_utils_8h" kind="file" language="C++">
    <compoundname>packageUtils.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_2ar_2api_8h" local="yes">pxr/usd/ar/api.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="156583">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="156584" relation="include">
        </childnode>
      </node>
      <node id="156585">
        <label>string</label>
      </node>
      <node id="156581">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="156580">
        <label>pxr/usd/ar/packageUtils.h</label>
        <link refid="package_utils_8h"/>
        <childnode refid="156581" relation="include">
        </childnode>
        <childnode refid="156582" relation="include">
        </childnode>
        <childnode refid="156585" relation="include">
        </childnode>
        <childnode refid="156586" relation="include">
        </childnode>
      </node>
      <node id="156586">
        <label>vector</label>
      </node>
      <node id="156584">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="156582">
        <label>pxr/usd/ar/api.h</label>
        <link refid="usd_2ar_2api_8h_source"/>
        <childnode refid="156583" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Package Relative Paths</header>
      <description><para><anchor id="package_utils_8h_1Ar_packagePaths"/></para>
<para>Assets within package assets can be addressed via &quot;package-relative&quot; paths. For example, given a hypothetical package <computeroutput>&quot;Model.package&quot;</computeroutput>, the asset <computeroutput>&quot;Geom.file&quot;</computeroutput>, can be referred to using the path <computeroutput>&quot;Model.package[Geom.file]&quot;</computeroutput>.</para>
<para>A package-relative path consists of two parts:</para>
<para><itemizedlist>
<listitem><para>The outer &quot;package&quot; path is the path to the containing package asset. This path can be whatever is appropriate to the client&apos;s asset system.</para>
</listitem><listitem><para>The inner &quot;packaged&quot; path is the path to an asset contained within the package asset. This path must be a relative path delimited by forward slashes &apos;/&apos;, with no leading slashes or drive or device letters. Note that packaged paths may themselves be package-relative paths, since package assets may be nested.</para>
</listitem></itemizedlist>
</para>
<para>Examples:<itemizedlist>
<listitem><para><computeroutput>/path/to/Model.package[a/b/Geom.file]</computeroutput></para>
</listitem><listitem><para><computeroutput>/path/to/Model.package[a/b/Sub.package[c/d/Geom.file]]</computeroutput> </para>
</listitem></itemizedlist>
</para>
</description>
      <memberdef kind="function" id="package_utils_8h_1a9f7f9d441970f35ebd34bdd415b71f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API bool</type>
        <definition>AR_API bool ArIsPackageRelativePath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ArIsPackageRelativePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>path</computeroutput> is a package-relative path, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="package_utils_8h_1af6ecf0aee260b1b3c6ca9164ce46b3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string ArJoinPackageRelativePath</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;paths)</argsstring>
        <name>ArJoinPackageRelativePath</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Combines the given <computeroutput>paths</computeroutput> into a single package-relative path, nesting paths as necessary. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">ArJoinPackageRelativePath([&quot;a.pack&quot;,<sp/>&quot;b.pack&quot;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>&quot;a.pack[b.pack]&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ArJoinPackageRelativePath([&quot;a.pack&quot;,<sp/>&quot;b.pack&quot;,<sp/>&quot;c.pack&quot;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>&quot;a.pack[b.pack[c.pack]]&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ArJoinPackageRelativePath([&quot;a.pack[b.pack]&quot;,<sp/>&quot;c.pack&quot;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>&quot;a.pack[b.pack[c.pack]]&quot;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="package_utils_8h_1a93fddffd958f55242a6acc29717be1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string ArJoinPackageRelativePath</definition>
        <argsstring>(const std::pair&lt; std::string, std::string &gt; &amp;paths)</argsstring>
        <name>ArJoinPackageRelativePath</name>
        <param>
          <type>const std::pair&lt; std::string, std::string &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="package_utils_8h_1ab123f0aeb3c199fc539302363d5b1b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::string</type>
        <definition>AR_API std::string ArJoinPackageRelativePath</definition>
        <argsstring>(const std::string &amp;packagePath, const std::string &amp;packagedPath)</argsstring>
        <name>ArJoinPackageRelativePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>packagePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>packagedPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="package_utils_8h_1ab9cae5997434daf185fbb8b52129e18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::pair&lt; std::string, std::string &gt;</type>
        <definition>AR_API std::pair&lt;std::string, std::string&gt; ArSplitPackageRelativePathOuter</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ArSplitPackageRelativePathOuter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Split package-relative path <computeroutput>path</computeroutput> into a (package path, packaged path) pair. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>packageRelativePath</computeroutput> contains nested package-relative paths the package path will be the outermost package path, and the packaged path will be the inner package-relative path.</para>
<para><programlisting><codeline><highlight class="normal">ArSplitPackageRelativePathOuter(&quot;a.pack[b.pack]&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>(&quot;a.pack&quot;,<sp/>&quot;b.pack&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ArSplitPackageRelativePathOuter(&quot;a.pack[b.pack[c.pack]]&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>(&quot;a.pack&quot;,<sp/>&quot;b.pack[c.pack]&quot;)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="package_utils_8h_1a6a66c04186083700c3f0bcbbfb9fe8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AR_API std::pair&lt; std::string, std::string &gt;</type>
        <definition>AR_API std::pair&lt;std::string, std::string&gt; ArSplitPackageRelativePathInner</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ArSplitPackageRelativePathInner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Split package-relative path <computeroutput>path</computeroutput> into a (package path, packaged path) pair. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>packageRelativePath</computeroutput> contains nested package-relative paths the package path will be the outermost package-relative path, and the packaged path will be the innermost packaged path.</para>
<para><programlisting><codeline><highlight class="normal">ArSplitPackageRelativePathInner(&quot;a.pack[b.pack]&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>(&quot;a.pack&quot;,<sp/>&quot;b.pack&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ArSplitPackageRelativePathInner(&quot;a.pack[b.pack[c.pack]]&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>=&gt;<sp/>(&quot;a.pack[b.pack]&quot;,<sp/>&quot;c.pack&quot;)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ar/packageUtils.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility functions for working with package assets. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2018<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_AR_PACKAGE_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_AR_PACKAGE_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/ar/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------<sp/>//</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="package_utils_8h_1a9f7f9d441970f35ebd34bdd415b71f9a" kindref="member">ArIsPackageRelativePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="84"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="package_utils_8h_1af6ecf0aee260b1b3c6ca9164ce46b3ee" kindref="member">ArJoinPackageRelativePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>paths);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="89"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="package_utils_8h_1af6ecf0aee260b1b3c6ca9164ce46b3ee" kindref="member">ArJoinPackageRelativePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>std::string&gt;&amp;<sp/>paths);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="94"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="package_utils_8h_1af6ecf0aee260b1b3c6ca9164ce46b3ee" kindref="member">ArJoinPackageRelativePath</ref>(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>packagePath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>packagedPath);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="111"><highlight class="normal">std::pair&lt;std::string,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="package_utils_8h_1ab9cae5997434daf185fbb8b52129e18c" kindref="member">ArSplitPackageRelativePathOuter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">AR_API</highlight></codeline>
<codeline lineno="127"><highlight class="normal">std::pair&lt;std::string,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="package_utils_8h_1a6a66c04186083700c3f0bcbbfb9fe8ee" kindref="member">ArSplitPackageRelativePathInner</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_AR_PACKAGE_UTILS_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usd/ar/packageUtils.h"/>
  </compounddef>
</doxygen>
