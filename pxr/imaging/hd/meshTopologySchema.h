//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.h file to make changes.

#ifndef PXR_IMAGING_HD_MESH_TOPOLOGY_SCHEMA_H
#define PXR_IMAGING_HD_MESH_TOPOLOGY_SCHEMA_H

#include "pxr/imaging/hd/subdivisionTagsSchema.h"


PXR_NAMESPACE_OPEN_SCOPE

//-----------------------------------------------------------------------------

#define HDMESHTOPOLOGY_SCHEMA_TOKENS \
    (meshTopology) \
    (faceVertexCounts) \
    (faceVertexIndices) \
    (holeIndices) \
    (subdivisionScheme) \
    (orientation) \
    (doubleSided) \
    (subdivisionTags) \
    (leftHanded) \
    (rightHanded) \

TF_DECLARE_PUBLIC_TOKENS(HdMeshTopologySchemaTokens,
    HDMESHTOPOLOGY_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------

class HdMeshTopologySchema : public HdSchema
{
public:
    HdMeshTopologySchema(HdContainerDataSourceHandle container)
    : HdSchema(container) {}

    //ACCESSORS

    HdIntArrayDataSourceHandle GetFaceVertexCounts();
    HdIntArrayDataSourceHandle GetFaceVertexIndices();
    HdIntArrayDataSourceHandle GetHoleIndices();
    HdTokenDataSourceHandle GetSubdivisionScheme();
    HdTokenDataSourceHandle GetOrientation();
    HdBoolDataSourceHandle GetDoubleSided();
    HdSubdivisionTagsSchema GetSubdivisionTags();

    // RETRIEVING AND CONSTRUCTING

    static HdContainerDataSourceHandle
    BuildRetained(
        const HdIntArrayDataSourceHandle &faceVertexCounts,
        const HdIntArrayDataSourceHandle &faceVertexIndices,
        const HdIntArrayDataSourceHandle &holeIndices,
        const HdTokenDataSourceHandle &subdivisionScheme,
        const HdTokenDataSourceHandle &orientation,
        const HdBoolDataSourceHandle &doubleSided,
        const HdContainerDataSourceHandle &subdivisionTags
    );

    class Builder
    {
    public:
        Builder &SetFaceVertexCounts(
            const HdIntArrayDataSourceHandle &faceVertexCounts);
        Builder &SetFaceVertexIndices(
            const HdIntArrayDataSourceHandle &faceVertexIndices);
        Builder &SetHoleIndices(
            const HdIntArrayDataSourceHandle &holeIndices);
        Builder &SetSubdivisionScheme(
            const HdTokenDataSourceHandle &subdivisionScheme);
        Builder &SetOrientation(
            const HdTokenDataSourceHandle &orientation);
        Builder &SetDoubleSided(
            const HdBoolDataSourceHandle &doubleSided);
        Builder &SetSubdivisionTags(
            const HdContainerDataSourceHandle &subdivisionTags);

        HdContainerDataSourceHandle Build();

    private:
        HdIntArrayDataSourceHandle _faceVertexCounts;
        HdIntArrayDataSourceHandle _faceVertexIndices;
        HdIntArrayDataSourceHandle _holeIndices;
        HdTokenDataSourceHandle _subdivisionScheme;
        HdTokenDataSourceHandle _orientation;
        HdBoolDataSourceHandle _doubleSided;
        HdContainerDataSourceHandle _subdivisionTags;
    };

    static HdMeshTopologySchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    static const HdDataSourceLocator &GetDefaultLocator();

    static HdTokenDataSourceHandle BuildOrientationDataSource(
        const TfToken &orientation);

};

PXR_NAMESPACE_CLOSE_SCOPE

#endif