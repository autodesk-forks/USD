<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_py_obj_wrapper" kind="class" language="C++" prot="public">
    <compoundname>TfPyObjWrapper</compoundname>
    <basecompoundref prot="public" virt="non-virtual">boost::python::api::object_operators&lt; TfPyObjWrapper &gt;</basecompoundref>
    <derivedcompoundref refid="class_tf_py_override" prot="public" virt="non-virtual">TfPyOverride</derivedcompoundref>
    <includes refid="py_obj_wrapper_8h" local="no">pyObjWrapper.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_py_obj_wrapper_1afc1a4db57e2401d40989dd3394c74a98" prot="private" static="no">
        <type>boost::python::object</type>
        <definition>typedef boost::python::object object</definition>
        <argsstring></argsstring>
        <name>object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="98" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_py_obj_wrapper_1adf97220346a88ce80ed30522b5f6fc6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class boost::python::api::object_operators&lt; TfPyObjWrapper &gt;</definition>
        <argsstring></argsstring>
        <name>boost::python::api::object_operators&lt; TfPyObjWrapper &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="143" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_py_obj_wrapper_1a6aebe877436befd00564de5a48c897c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(TfPyObjWrapper const &amp;o)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> const &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Produce a hash code for this object. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this does not attempt to hash the underlying python object, it returns a hash code that&apos;s suitable for hash-table lookup of <ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> instances, and does not require taking the python lock. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="133" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="133" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_py_obj_wrapper_1a7abe4ac88575077f62e4e9eba395310f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; object &gt;</type>
        <definition>std::shared_ptr&lt;object&gt; _objectPtr</definition>
        <argsstring></argsstring>
        <name>_objectPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="155" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1ad9e36ff89e234ccad53d4618dc5fa475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfPyObjWrapper</definition>
        <argsstring>()</argsstring>
        <name>TfPyObjWrapper</name>
        <briefdescription>
<para>Default construct a <ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> holding a reference to python None. </para>
        </briefdescription>
        <detaileddescription>
<para>The GIL need not be held by the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1af5b9924c62126e5aeb241d21cb9a3295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfPyObjWrapper</definition>
        <argsstring>(object obj)</argsstring>
        <name>TfPyObjWrapper</name>
        <param>
          <type>object</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Construct a TfPyObjectWrapper wrapping <emphasis>obj</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The GIL must be held by the caller. Note, allowing the implicit conversion is intended here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1a115702fc3cb62a3c3bf4b3c89f3bc373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>object const  &amp;</type>
        <definition>object const&amp; Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Underlying object access. </para>
        </briefdescription>
        <detaileddescription>
<para>This method returns a reference, so technically, the GIL need not be held to call this. However, the caller is strongly advised to ensure the GIL is held, since assigning this object to another or otherwise operating on the returned object requires it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="116" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API PyObject *</type>
        <definition>TF_API PyObject* ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Underlying PyObject* access. </para>
        </briefdescription>
        <detaileddescription>
<para>This method returns a pointer, so technically, the GIL need not be held to call this. However, the caller is strongly advised to ensure the GIL is held, since assigning this object to another or otherwise operating on the returned object requires it. The returned PyObject * is a &quot;borrowed reference&quot;, meaning that the underlying object&apos;s reference count has not been incremented on behalf of the caller. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1a1c108a8743c168d71c9731e5e9f63596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool operator==</definition>
        <argsstring>(TfPyObjWrapper const &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns true if <emphasis>other</emphasis> refers to the same python object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1ac9250e102e555cde5d6c968dfe831456" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool operator!=</definition>
        <argsstring>(TfPyObjWrapper const &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns false if <emphasis>other</emphasis> refers to the same python object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_py_obj_wrapper_1af2301f20162d4891ab0d791029b16e5a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator object const &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator object const &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyObjWrapper.h" line="150" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="150" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Boost Python object wrapper. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides a wrapper around boost::python::object that works correctly for the following basic operations regardless of the GIL state: default construction, copy construction, assignment, (in)equality comparison, <ref refid="class_tf_py_obj_wrapper_1a6aebe877436befd00564de5a48c897c5" kindref="member">hash_value()</ref>, and destruction.</para>
<para>None of those work correctly in the presence of an unlocked GIL for boost::python::object. This class only actually acquires the GIL for default construction, destruction and for some (in)equality comparisons. The other operations do not require taking the GIL.</para>
<para>This is primarily useful in cases where a boost::python::object might be destroyed without a locked GIL by a client blind to that fact. This occurs when a registry, for example, holds type-erased objects. If one of the type-erased objects in the registry happens to hold a boost::python::object, that type-erased object must be destroyed while the GIL is held but it&apos;s unreasonable to require that the registry know that. This class helps solve that problem.</para>
<para>This class also provides many of the operators that boost::python::object provides, by virtue of deriving from boost::python::api::object_operators&lt;T&gt;. However it is important to note that callers must ensure the GIL is held before using these operators! </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5496">
        <label>TfPyOverride</label>
        <link refid="class_tf_py_override"/>
        <childnode refid="5495" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5495">
        <label>TfPyObjWrapper</label>
        <link refid="class_tf_py_obj_wrapper"/>
      </node>
    </inheritancegraph>
    <location file="pxr/base/tf/pyObjWrapper.h" line="97" column="1" bodyfile="pxr/base/tf/pyObjWrapper.h" bodystart="95" bodyend="156"/>
    <listofallmembers>
      <member refid="class_tf_py_obj_wrapper_1a7abe4ac88575077f62e4e9eba395310f" prot="private" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>_objectPtr</name></member>
      <member refid="class_tf_py_obj_wrapper_1adf97220346a88ce80ed30522b5f6fc6f" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>boost::python::api::object_operators&lt; TfPyObjWrapper &gt;</name></member>
      <member refid="class_tf_py_obj_wrapper_1a115702fc3cb62a3c3bf4b3c89f3bc373" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>Get</name></member>
      <member refid="class_tf_py_obj_wrapper_1a6aebe877436befd00564de5a48c897c5" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>hash_value</name></member>
      <member refid="class_tf_py_obj_wrapper_1afc1a4db57e2401d40989dd3394c74a98" prot="private" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>object</name></member>
      <member refid="class_tf_py_obj_wrapper_1af2301f20162d4891ab0d791029b16e5a" prot="private" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>operator object const &amp;</name></member>
      <member refid="class_tf_py_obj_wrapper_1ac9250e102e555cde5d6c968dfe831456" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>operator!=</name></member>
      <member refid="class_tf_py_obj_wrapper_1a1c108a8743c168d71c9731e5e9f63596" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>operator==</name></member>
      <member refid="class_tf_py_obj_wrapper_1aeddca8ee3f8a757ae8fdf114260df477" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>ptr</name></member>
      <member refid="class_tf_py_obj_wrapper_1ad9e36ff89e234ccad53d4618dc5fa475" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>TfPyObjWrapper</name></member>
      <member refid="class_tf_py_obj_wrapper_1af5b9924c62126e5aeb241d21cb9a3295" prot="public" virt="non-virtual"><scope>TfPyObjWrapper</scope><name>TfPyObjWrapper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
