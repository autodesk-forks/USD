<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_data" kind="class" language="C++" prot="public">
    <compoundname>SdfData</compoundname>
    <basecompoundref refid="class_sdf_abstract_data" prot="public" virt="non-virtual">SdfAbstractData</basecompoundref>
    <includes refid="data_8h" local="no">data.h</includes>
    <innerclass refid="struct_sdf_data_1_1___spec_data" prot="private">SdfData::_SpecData</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_sdf_data_1af8adec4814af23357048cdc7a0242262" prot="private" static="no">
        <type>std::pair&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_vt_value" kindref="compound">VtValue</ref> &gt;</type>
        <definition>typedef std::pair&lt;TfToken, VtValue&gt; _FieldValuePair</definition>
        <argsstring></argsstring>
        <name>_FieldValuePair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="169" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_data_1a3074ae849b94499ea9cfa7de1de086f3" prot="private" static="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>typedef SdfPath _Key</definition>
        <argsstring></argsstring>
        <name>_Key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="178" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_data_1ab67bba9f8a432611c26edbb2199495e1" prot="private" static="no">
        <type>SdfPath::Hash</type>
        <definition>typedef SdfPath::Hash _KeyHash</definition>
        <argsstring></argsstring>
        <name>_KeyHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="179" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_data_1aa7082ae1111e799c99bf36b239d2f373" prot="private" static="no">
        <type>TfHashMap&lt; <ref refid="class_sdf_path" kindref="compound">_Key</ref>, _SpecData, _KeyHash &gt;</type>
        <definition>typedef TfHashMap&lt;_Key, _SpecData, _KeyHash&gt; _HashTable</definition>
        <argsstring></argsstring>
        <name>_HashTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="180" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_data_1acc9da310f82f4efb699e12026a865b36" prot="private" static="no" mutable="no">
        <type>_HashTable</type>
        <definition>_HashTable _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="182" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_data_1a33fa7aea83e55901dcb131c9f5ae4f89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfData</definition>
        <argsstring>()</argsstring>
        <name>SdfData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="52" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1abdf068217d4468073a96752723daa0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API</type>
        <definition>virtual SDF_API ~SdfData</definition>
        <argsstring>()</argsstring>
        <name>~SdfData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a9db3c88d39af3045de40861043b4969a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool StreamsData</definition>
        <argsstring>() const</argsstring>
        <name>StreamsData</name>
        <reimplements refid="class_sdf_abstract_data_1ab2fdaabd75a772e61a04bb178d3e4bf7">StreamsData</reimplements>
        <briefdescription>
<para><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> overrides. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a4394939afe9f76296e90fca624064128" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool IsDetached</definition>
        <argsstring>() const</argsstring>
        <name>IsDetached</name>
        <reimplements refid="class_sdf_abstract_data_1a4394939afe9f76296e90fca624064128">IsDetached</reimplements>
        <briefdescription>
<para>Returns true if this data object is detached from its serialized data store, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>A detached data object must not be affected by external changes to the serialized data.</para>
<para>Sdf allows clients to specify detached layers to avoid problems that may occur if the underlying data is modified by an external process. For example, a data object that maintains an open file handle or memory mapping to the original layer on disk and reads data on demand is not detached. But a data object that pulls all of the layer contents into memory is detached.</para>
<para>The default implementation returns !StreamsData(). Non-streaming data objects are assumed to be detached from their serialized data, while streaming objects are conservatively assumed to not be detached. Note that it is possible to have a streaming data object that is also detached <ndash/> for example, if the data object were to make a private copy of the serialized data for its own use and streamed data from it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1abde490a020ddaa87b6a39940a58e091c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void CreateSpec</definition>
        <argsstring>(const SdfPath &amp;path, SdfSpecType specType)</argsstring>
        <name>CreateSpec</name>
        <reimplements refid="class_sdf_abstract_data_1a94da2d6ff88146fce59f8085b2d78e52">CreateSpec</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Create a new spec at <emphasis>path</emphasis> with the given <emphasis>specType</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the spec already exists the spec type will be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a228afd21308caf5ea340b85b7c2f7e8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpec</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>HasSpec</name>
        <reimplements refid="class_sdf_abstract_data_1a2d700bdac8a8aa2bbce5f54ffe213ffe">HasSpec</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if this data has a spec for <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a30bbd88d1a4ad399fbedec62e6e9c1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void EraseSpec</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>EraseSpec</name>
        <reimplements refid="class_sdf_abstract_data_1aa06b2681ff3185dd700df728dd4a687c">EraseSpec</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Erase the spec at <emphasis>path</emphasis> and any fields that are on it. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this does not erase child specs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1acb552bab4106db66504fb6100b71b5fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void MoveSpec</definition>
        <argsstring>(const SdfPath &amp;oldPath, const SdfPath &amp;newPath)</argsstring>
        <name>MoveSpec</name>
        <reimplements refid="class_sdf_abstract_data_1ac7c83700be4a7df1da15c6725872bd9f">MoveSpec</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <briefdescription>
<para>Move the spec at <emphasis>oldPath</emphasis> to <emphasis>newPath</emphasis>, including all the fields that are on it. </para>
        </briefdescription>
        <detaileddescription>
<para>This does not move any child specs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1ade7533c33c89bd82196765ba24417057" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
        <definition>virtual SDF_API SdfSpecType GetSpecType</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetSpecType</name>
        <reimplements refid="class_sdf_abstract_data_1ae64ab7994bc1d560ed8a23de0352fd15">GetSpecType</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the spec type for the spec at <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns SdfSpecTypeUnknown if the spec doesn&apos;t exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a0e6bbd51330209a6b9eb7f19ade3dfb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Has</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfAbstractDataValue *value) const</argsstring>
        <name>Has</name>
        <reimplements refid="class_sdf_abstract_data_1a2e977ec3972ceddae0f75f48fa9c7395">Has</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1ad5dcacf960eaee4e2d156b42630839de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Has</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value=NULL) const</argsstring>
        <name>Has</name>
        <reimplements refid="class_sdf_abstract_data_1a41e274a6476be557484cc0ad9b9c627f">Has</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Return whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1ab5667d22ada14798f19aa7bb9eb91413" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpecAndField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfAbstractDataValue *value, SdfSpecType *specType) const</argsstring>
        <name>HasSpecAndField</name>
        <reimplements refid="class_sdf_abstract_data_1ab5667d22ada14798f19aa7bb9eb91413">HasSpecAndField</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Fill <computeroutput>specType</computeroutput> (which cannot be nullptr) as if by a call to GetSpecType(path). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting specType is not SdfSpecTypeUnknown, then act as if Has(path, fieldName, value) was called and return its result. In other words, the semantics of this function must be identical to this sequence:</para>
<para><programlisting><codeline><highlight class="normal">*specType<sp/>=<sp/>GetSpecType(path);</highlight></codeline>
<codeline><highlight class="normal">return<sp/>*specType<sp/>!=<sp/>SdfSpecTypeUnknown<sp/>&amp;&amp;<sp/>Has(path,<sp/>fieldName,<sp/>value);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a9fe61e37cf49713f83157588556709c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool HasSpecAndField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value, SdfSpecType *specType) const</argsstring>
        <name>HasSpecAndField</name>
        <reimplements refid="class_sdf_abstract_data_1a9fe61e37cf49713f83157588556709c3">HasSpecAndField</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Fill <computeroutput>specType</computeroutput> (which cannot be nullptr) as if by a call to GetSpecType(path). </para>
        </briefdescription>
        <detaileddescription>
<para>If the resulting specType is not SdfSpecTypeUnknown, then act as if Has(path, fieldName, value) was called and return its result. In other words, the semantics of this function must be identical to this sequence:</para>
<para><programlisting><codeline><highlight class="normal">*specType<sp/>=<sp/>GetSpecType(path);</highlight></codeline>
<codeline><highlight class="normal">return<sp/>*specType<sp/>!=<sp/>SdfSpecTypeUnknown<sp/>&amp;&amp;<sp/>Has(path,<sp/>fieldName,<sp/>value);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a52ce23f1d579ef344cdbc4215970fdd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual SDF_API VtValue Get</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName) const</argsstring>
        <name>Get</name>
        <reimplements refid="class_sdf_abstract_data_1a8fa08ded7d1b9e7d6c0777224508b9c3">Get</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty value if none is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a3251bf4512de33ceb765d0ce368e0c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Set</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const VtValue &amp;value)</argsstring>
        <name>Set</name>
        <reimplements refid="class_sdf_abstract_data_1aad54304bc633e54f0c4026b83d583c86">Set</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to set a field on a spec that does not exist. Setting a field to an empty <ref refid="class_vt_value" kindref="compound">VtValue</ref> is the same as calling <ref refid="class_sdf_data_1a4e1d41995548e714d18bffa352d4ac25" kindref="member">Erase()</ref> on it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a490dbe15f59cd2dffa78b2b974f1f6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Set</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const SdfAbstractDataConstValue &amp;value)</argsstring>
        <name>Set</name>
        <reimplements refid="class_sdf_abstract_data_1a09e7d78b90a76008cab041278d98aa79">Set</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to set a field on a spec that does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a4e1d41995548e714d18bffa352d4ac25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void Erase</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName)</argsstring>
        <name>Erase</name>
        <reimplements refid="class_sdf_abstract_data_1ae187af21eb54ff639fdabe02c6e004ed">Erase</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Remove the field at <computeroutput>path</computeroutput> and <computeroutput>fieldName</computeroutput>, if one exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a1dab66d5100ff64608c727a613acc682" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>virtual SDF_API std::vector&lt;TfToken&gt; List</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>List</name>
        <reimplements refid="class_sdf_abstract_data_1acd8240b0c78e357e39669a901149a436">List</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the names of all the fields that are set at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a309bf40c34899d0ae80341aac4a8f4f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>virtual SDF_API std::set&lt;double&gt; ListAllTimeSamples</definition>
        <argsstring>() const</argsstring>
        <name>ListAllTimeSamples</name>
        <reimplements refid="class_sdf_abstract_data_1a72ac2e4c3f385e08255b5e1d9a71bfe9">ListAllTimeSamples</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a424d98330e338f1f413516059a891de2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>virtual SDF_API std::set&lt;double&gt; ListTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>ListTimeSamplesForPath</name>
        <reimplements refid="class_sdf_abstract_data_1a41bbab273707bc484c3ad5424a77790b">ListTimeSamplesForPath</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1af3aebdb37323cd1515407df8f6508082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool GetBracketingTimeSamples</definition>
        <argsstring>(double time, double *tLower, double *tUpper) const</argsstring>
        <name>GetBracketingTimeSamples</name>
        <reimplements refid="class_sdf_abstract_data_1af8064b7e845833816d19873376a89d87">GetBracketingTimeSamples</reimplements>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a379430d392cc8d82a23bc626b1e1cd5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API size_t</type>
        <definition>virtual SDF_API size_t GetNumTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetNumTimeSamplesForPath</name>
        <reimplements refid="class_sdf_abstract_data_1a952faf173c62083775176d753e5b3fef">GetNumTimeSamplesForPath</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a79c0fe1e4264605b565430ed266328f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool GetBracketingTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path, double time, double *tLower, double *tUpper) const</argsstring>
        <name>GetBracketingTimeSamplesForPath</name>
        <reimplements refid="class_sdf_abstract_data_1a4147b57e0777327a7cd40a40175390ab">GetBracketingTimeSamplesForPath</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1aeee79e13fa6a1755c0acf50b6db133df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, SdfAbstractDataValue *optionalValue) const</argsstring>
        <name>QueryTimeSample</name>
        <reimplements refid="class_sdf_abstract_data_1ad6272775c77ceabeb233ebf566e5f1d0">QueryTimeSample</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>optionalValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1ad556175d864b7f8aef3fc7d62bd45a4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, VtValue *value) const</argsstring>
        <name>QueryTimeSample</name>
        <reimplements refid="class_sdf_abstract_data_1a2b8a1affe7684411c593c8eaa2626bc4">QueryTimeSample</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1ae9ec4fc3aaf4980bea29dfccbc7b43ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void SetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const VtValue &amp;value)</argsstring>
        <name>SetTimeSample</name>
        <reimplements refid="class_sdf_abstract_data_1a783bc7d0309cf6f8402c8e4ededbc8ce">SetTimeSample</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a5c20e22b079430454bf7f025446dedee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void EraseTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time)</argsstring>
        <name>EraseTimeSample</name>
        <reimplements refid="class_sdf_abstract_data_1a10932eb46de21d8f0aa4c3d4f0bcdef0">EraseTimeSample</reimplements>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="146" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_data_1ae046dc4aefb50ecdbe1e73f6ffde5cb6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API void</type>
        <definition>virtual SDF_API void _VisitSpecs</definition>
        <argsstring>(SdfAbstractDataSpecVisitor *visitor) const</argsstring>
        <name>_VisitSpecs</name>
        <reimplements refid="class_sdf_abstract_data_1ac05ac5303d8faacf3d27c6e05d235365">_VisitSpecs</reimplements>
        <param>
          <type><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Visits every spec in this <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object with the given <computeroutput>visitor</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The order in which specs are visited is undefined. The visitor may not modify the <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object it is visiting. This method should <bold>not</bold> call <computeroutput>Done()</computeroutput> on the visitor. <simplesect kind="see"><para><ref refid="class_sdf_abstract_data_spec_visitor" kindref="compound">SdfAbstractDataSpecVisitor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="151" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_data_1aa4d94ef7c172356fd113ef13449e5b70" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
        <definition>const VtValue* _GetSpecTypeAndFieldValue</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;field, SdfSpecType *specType) const</argsstring>
        <name>_GetSpecTypeAndFieldValue</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a9c4854705f595822bd3dcb6b2c36c7b3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
        <definition>const VtValue* _GetFieldValue</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;field) const</argsstring>
        <name>_GetFieldValue</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1a90d5308c43071946a62743342d2a601a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
        <definition>VtValue* _GetMutableFieldValue</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;field)</argsstring>
        <name>_GetMutableFieldValue</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_data_1afe11c71e6361a5586c08a0a1c3b7eca0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
        <definition>VtValue* _GetOrCreateFieldValue</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;field)</argsstring>
        <name>_GetOrCreateFieldValue</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/data.h" line="164" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_sdf_data" kindref="compound">SdfData</ref> provides concrete scene description data storage. </para>
    </briefdescription>
    <detaileddescription>
<para>An <ref refid="class_sdf_data" kindref="compound">SdfData</ref> is an implementation of <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> that simply stores specs and fields in a map keyed by path. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5035">
        <label>SdfAbstractData</label>
        <link refid="class_sdf_abstract_data"/>
        <childnode refid="5036" relation="public-inheritance">
        </childnode>
        <childnode refid="5037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5037">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5034">
        <label>SdfData</label>
        <link refid="class_sdf_data"/>
        <childnode refid="5035" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5036">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5039">
        <label>SdfAbstractData</label>
        <link refid="class_sdf_abstract_data"/>
        <childnode refid="5040" relation="public-inheritance">
        </childnode>
        <childnode refid="5041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5041">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5038">
        <label>SdfData</label>
        <link refid="class_sdf_data"/>
        <childnode refid="5039" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5040">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/data.h" line="50" column="1" bodyfile="pxr/usd/sdf/data.h" bodystart="49" bodyend="183"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfData</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_sdf_data_1acc9da310f82f4efb699e12026a865b36" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_data</name></member>
      <member refid="class_sdf_data_1af8adec4814af23357048cdc7a0242262" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_FieldValuePair</name></member>
      <member refid="class_sdf_data_1a9c4854705f595822bd3dcb6b2c36c7b3" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_GetFieldValue</name></member>
      <member refid="class_sdf_data_1a90d5308c43071946a62743342d2a601a" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_GetMutableFieldValue</name></member>
      <member refid="class_sdf_data_1afe11c71e6361a5586c08a0a1c3b7eca0" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_GetOrCreateFieldValue</name></member>
      <member refid="class_sdf_data_1aa4d94ef7c172356fd113ef13449e5b70" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_GetSpecTypeAndFieldValue</name></member>
      <member refid="class_sdf_data_1aa7082ae1111e799c99bf36b239d2f373" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_HashTable</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfData</scope><name>_HasRemnant</name></member>
      <member refid="class_sdf_data_1a3074ae849b94499ea9cfa7de1de086f3" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_Key</name></member>
      <member refid="class_sdf_data_1ab67bba9f8a432611c26edbb2199495e1" prot="private" virt="non-virtual"><scope>SdfData</scope><name>_KeyHash</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfData</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfData</scope><name>_Register</name></member>
      <member refid="class_sdf_data_1ae046dc4aefb50ecdbe1e73f6ffde5cb6" prot="protected" virt="virtual"><scope>SdfData</scope><name>_VisitSpecs</name></member>
      <member refid="class_sdf_abstract_data_1a86a3598b40bc0f9c1c0dbd82be9165a1" prot="public" virt="virtual"><scope>SdfData</scope><name>CopyFrom</name></member>
      <member refid="class_sdf_data_1abde490a020ddaa87b6a39940a58e091c" prot="public" virt="virtual"><scope>SdfData</scope><name>CreateSpec</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfData</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_abstract_data_1a760f759cf45dd3f1b4e17daf631d24b3" prot="public" virt="virtual"><scope>SdfData</scope><name>Equals</name></member>
      <member refid="class_sdf_data_1a4e1d41995548e714d18bffa352d4ac25" prot="public" virt="virtual"><scope>SdfData</scope><name>Erase</name></member>
      <member refid="class_sdf_abstract_data_1a1fda052cd7113de84769fba44df4a280" prot="public" virt="virtual"><scope>SdfData</scope><name>EraseDictValueByKey</name></member>
      <member refid="class_sdf_data_1a30bbd88d1a4ad399fbedec62e6e9c1c0" prot="public" virt="virtual"><scope>SdfData</scope><name>EraseSpec</name></member>
      <member refid="class_sdf_data_1a5c20e22b079430454bf7f025446dedee" prot="public" virt="virtual"><scope>SdfData</scope><name>EraseTimeSample</name></member>
      <member refid="class_sdf_data_1a52ce23f1d579ef344cdbc4215970fdd1" prot="public" virt="virtual"><scope>SdfData</scope><name>Get</name></member>
      <member refid="class_sdf_abstract_data_1ad7917554d882d874d59aed4314dfc6af" prot="public" virt="non-virtual"><scope>SdfData</scope><name>GetAs</name></member>
      <member refid="class_sdf_data_1af3aebdb37323cd1515407df8f6508082" prot="public" virt="virtual"><scope>SdfData</scope><name>GetBracketingTimeSamples</name></member>
      <member refid="class_sdf_data_1a79c0fe1e4264605b565430ed266328f7" prot="public" virt="virtual"><scope>SdfData</scope><name>GetBracketingTimeSamplesForPath</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>SdfData</scope><name>GetCurrentCount</name></member>
      <member refid="class_sdf_abstract_data_1aff1990e8f93dbe644a17324e039e7bf8" prot="public" virt="virtual"><scope>SdfData</scope><name>GetDictValueByKey</name></member>
      <member refid="class_sdf_data_1a379430d392cc8d82a23bc626b1e1cd5d" prot="public" virt="virtual"><scope>SdfData</scope><name>GetNumTimeSamplesForPath</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>SdfData</scope><name>GetRefCount</name></member>
      <member refid="class_sdf_data_1ade7533c33c89bd82196765ba24417057" prot="public" virt="virtual"><scope>SdfData</scope><name>GetSpecType</name></member>
      <member refid="class_sdf_abstract_data_1aa6a0d145b8c917c81b26a19c8d774c72" prot="public" virt="virtual"><scope>SdfData</scope><name>GetTypeid</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfData</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_sdf_data_1a0e6bbd51330209a6b9eb7f19ade3dfb5" prot="public" virt="virtual"><scope>SdfData</scope><name>Has</name></member>
      <member refid="class_sdf_data_1ad5dcacf960eaee4e2d156b42630839de" prot="public" virt="virtual"><scope>SdfData</scope><name>Has</name></member>
      <member refid="class_sdf_abstract_data_1ae86ce4e10fda229878b45d643d20fb98" prot="public" virt="virtual"><scope>SdfData</scope><name>HasDictKey</name></member>
      <member refid="class_sdf_abstract_data_1abe5fbd19b2a97c13ec9b44211453fd84" prot="public" virt="virtual"><scope>SdfData</scope><name>HasDictKey</name></member>
      <member refid="class_sdf_data_1a228afd21308caf5ea340b85b7c2f7e8d" prot="public" virt="virtual"><scope>SdfData</scope><name>HasSpec</name></member>
      <member refid="class_sdf_data_1ab5667d22ada14798f19aa7bb9eb91413" prot="public" virt="virtual"><scope>SdfData</scope><name>HasSpecAndField</name></member>
      <member refid="class_sdf_data_1a9fe61e37cf49713f83157588556709c3" prot="public" virt="virtual"><scope>SdfData</scope><name>HasSpecAndField</name></member>
      <member refid="class_sdf_data_1a4394939afe9f76296e90fca624064128" prot="public" virt="virtual"><scope>SdfData</scope><name>IsDetached</name></member>
      <member refid="class_sdf_abstract_data_1a6c6a68d05c9716967063ac58b50cc299" prot="public" virt="virtual"><scope>SdfData</scope><name>IsEmpty</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>SdfData</scope><name>IsUnique</name></member>
      <member refid="class_sdf_data_1a1dab66d5100ff64608c727a613acc682" prot="public" virt="virtual"><scope>SdfData</scope><name>List</name></member>
      <member refid="class_sdf_data_1a309bf40c34899d0ae80341aac4a8f4f9" prot="public" virt="virtual"><scope>SdfData</scope><name>ListAllTimeSamples</name></member>
      <member refid="class_sdf_abstract_data_1a79f0aaa58996b322ddb049463483320a" prot="public" virt="virtual"><scope>SdfData</scope><name>ListDictKeys</name></member>
      <member refid="class_sdf_data_1a424d98330e338f1f413516059a891de2" prot="public" virt="virtual"><scope>SdfData</scope><name>ListTimeSamplesForPath</name></member>
      <member refid="class_sdf_data_1acb552bab4106db66504fb6100b71b5fc" prot="public" virt="virtual"><scope>SdfData</scope><name>MoveSpec</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>SdfData</scope><name>operator=</name></member>
      <member refid="class_sdf_data_1aeee79e13fa6a1755c0acf50b6db133df" prot="public" virt="virtual"><scope>SdfData</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_data_1ad556175d864b7f8aef3fc7d62bd45a4b" prot="public" virt="virtual"><scope>SdfData</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_abstract_data_1aa73c10b602f8fa23d740cfc7a3f135a7" prot="public" virt="non-virtual"><scope>SdfData</scope><name>SdfAbstractData</name></member>
      <member refid="class_sdf_data_1a33fa7aea83e55901dcb131c9f5ae4f89" prot="public" virt="non-virtual"><scope>SdfData</scope><name>SdfData</name></member>
      <member refid="class_sdf_data_1a3251bf4512de33ceb765d0ce368e0c51" prot="public" virt="virtual"><scope>SdfData</scope><name>Set</name></member>
      <member refid="class_sdf_data_1a490dbe15f59cd2dffa78b2b974f1f6ea" prot="public" virt="virtual"><scope>SdfData</scope><name>Set</name></member>
      <member refid="class_sdf_abstract_data_1afcbf22d0f4ab738076e0bdeb9237c827" prot="public" virt="virtual"><scope>SdfData</scope><name>SetDictValueByKey</name></member>
      <member refid="class_sdf_abstract_data_1afc86cab1584e328556ac0418d76cd266" prot="public" virt="virtual"><scope>SdfData</scope><name>SetDictValueByKey</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>SdfData</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_sdf_data_1ae9ec4fc3aaf4980bea29dfccbc7b43ca" prot="public" virt="virtual"><scope>SdfData</scope><name>SetTimeSample</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>SdfData</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_sdf_data_1a9db3c88d39af3045de40861043b4969a" prot="public" virt="virtual"><scope>SdfData</scope><name>StreamsData</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>SdfData</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfData</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfData</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>SdfData</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_sdf_abstract_data_1ac7514141cb78b2204fe103168f550d84" prot="public" virt="non-virtual"><scope>SdfData</scope><name>VisitSpecs</name></member>
      <member refid="class_sdf_abstract_data_1aa7156a449216c360f35cb481abbc2482" prot="public" virt="virtual"><scope>SdfData</scope><name>WriteToStream</name></member>
      <member refid="class_sdf_abstract_data_1acd894ec4c01454c828a70f6a7b50961c" prot="public" virt="virtual"><scope>SdfData</scope><name>~SdfAbstractData</name></member>
      <member refid="class_sdf_data_1abdf068217d4468073a96752723daa0f9" prot="public" virt="virtual"><scope>SdfData</scope><name>~SdfData</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>SdfData</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfData</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
