<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_template_string" kind="class" language="C++" prot="public">
    <compoundname>TfTemplateString</compoundname>
    <includes refid="template_string_8h" local="no">templateString.h</includes>
    <innerclass refid="struct_tf_template_string_1_1___data" prot="private">TfTemplateString::_Data</innerclass>
    <innerclass refid="struct_tf_template_string_1_1___place_holder" prot="private">TfTemplateString::_PlaceHolder</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_template_string_1a4b158130b14d39139e3669ee5ce66536" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string, std::string&gt; Mapping</definition>
        <argsstring></argsstring>
        <name>Mapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="65" column="1" bodyfile="pxr/base/tf/templateString.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_template_string_1a3b4ba79249f7422151bced0aeeb11038" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; _Data &gt;</type>
        <definition>std::shared_ptr&lt;_Data&gt; _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="145" column="1" bodyfile="pxr/base/tf/templateString.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_template_string_1a1915ecd064403507a004cb805cd6b7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfTemplateString</definition>
        <argsstring>()</argsstring>
        <name>TfTemplateString</name>
        <briefdescription>
<para>Constructs a new template string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a6e33db576f73f5906b8ab0ded725e9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfTemplateString</definition>
        <argsstring>(const std::string &amp;template_)</argsstring>
        <name>TfTemplateString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>template_</declname>
        </param>
        <briefdescription>
<para>Constructs a new template string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a4c6f036ae1597d5cf7f7000aefa08e7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetTemplate</definition>
        <argsstring>() const</argsstring>
        <name>GetTemplate</name>
        <briefdescription>
<para>Returns the template source string supplied to the constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="76" column="1" bodyfile="pxr/base/tf/templateString.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a394888515c897c1c68fc57703293c51b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>TF_API std::string Substitute</definition>
        <argsstring>(const Mapping &amp;) const</argsstring>
        <name>Substitute</name>
        <param>
          <type>const Mapping &amp;</type>
        </param>
        <briefdescription>
<para>Performs the template substitution, returning a new string. </para>
        </briefdescription>
        <detaileddescription>
<para>The mapping contains keys which match the placeholders in the template. If a placeholder is found for which no mapping is present, a coding error is raised. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a29a7469d47217cbe7a44de9be47222a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>TF_API std::string SafeSubstitute</definition>
        <argsstring>(const Mapping &amp;) const</argsstring>
        <name>SafeSubstitute</name>
        <param>
          <type>const Mapping &amp;</type>
        </param>
        <briefdescription>
<para>Like <ref refid="class_tf_template_string_1a394888515c897c1c68fc57703293c51b" kindref="member">Substitute()</ref>, except that if placeholders are missing from the mapping, instead of raising a coding error, the original placeholder will appear in the resulting string intact. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a454d910f5da9039a69c69c49bf8992f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API Mapping</type>
        <definition>TF_API Mapping GetEmptyMapping</definition>
        <argsstring>() const</argsstring>
        <name>GetEmptyMapping</name>
        <briefdescription>
<para>Returns an empty mapping for the current template. </para>
        </briefdescription>
        <detaileddescription>
<para>This method first calls IsValid to ensure that the template is valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a3da3fc495542dcfb22b59d4a0f3abe11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Returns true if the current template is well formed. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty templates are valid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a1c2f9b549383c5e3631c342e9d8d55ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::vector&lt; std::string &gt;</type>
        <definition>TF_API std::vector&lt;std::string&gt; GetParseErrors</definition>
        <argsstring>() const</argsstring>
        <name>GetParseErrors</name>
        <briefdescription>
<para>Returns any error messages generated during template parsing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="103" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_template_string_1a1ec8b403a14c28d5906e89f5cb5399e9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string _Evaluate</definition>
        <argsstring>(const Mapping &amp;, std::vector&lt; std::string &gt; *=0) const</argsstring>
        <name>_Evaluate</name>
        <param>
          <type>const Mapping &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a8a6242b6e08736989c25218a34c7f67b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _FindNextPlaceHolder</definition>
        <argsstring>(size_t *, std::vector&lt; std::string &gt; *) const</argsstring>
        <name>_FindNextPlaceHolder</name>
        <param>
          <type>size_t *</type>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a19d9081a624b25a3aa69532c0d66cd56" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ParseTemplate</definition>
        <argsstring>() const</argsstring>
        <name>_ParseTemplate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_template_string_1a3209edf18ef6e8bd5e692e2f7437ffe8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _EmitParseErrors</definition>
        <argsstring>() const</argsstring>
        <name>_EmitParseErrors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/templateString.h" line="128" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_tf_template_string" kindref="compound">TfTemplateString</ref> provides simple string substitutions based on named placeholders. </para>
    </briefdescription>
    <detaileddescription>
<para>Instead of the &apos;&apos;-based substitutions used by printf, template strings use &apos;$&apos;-based substitutions, using the following rules:</para>
<para><itemizedlist>
<listitem><para>&quot;$$&quot; is replaced with a single &quot;$&quot; </para>
</listitem>
<listitem><para>&quot;$identifier&quot; names a substitution placeholder matching a mapping key of &quot;identifier&quot;. The first non-identifier character after the &quot;$&quot; character terminates the placeholder specification. </para>
</listitem>
<listitem><para>&quot;${identifier}&quot; is equivalent to &quot;$identifier&quot;. It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as &quot;${noun}ification&quot;. </para>
</listitem>
<listitem><para>An identifier is a sequence of characters &quot;[A-Z][a-z][0-9]_&quot;.</para>
</listitem>
</itemizedlist>
<emphasis><ref refid="class_tf_template_string" kindref="compound">TfTemplateString</ref></emphasis> is immutable: once one is created it may not be modified. <emphasis><ref refid="class_tf_template_string" kindref="compound">TfTemplateString</ref></emphasis> is fast to copy, since it shares state internally between copies. <emphasis><ref refid="class_tf_template_string" kindref="compound">TfTemplateString</ref></emphasis> is thread-safe. It may be read freely by multiple threads concurrently. </para>
    </detaileddescription>
    <location file="pxr/base/tf/templateString.h" line="63" column="1" bodyfile="pxr/base/tf/templateString.h" bodystart="63" bodyend="146"/>
    <listofallmembers>
      <member refid="class_tf_template_string_1a3b4ba79249f7422151bced0aeeb11038" prot="private" virt="non-virtual"><scope>TfTemplateString</scope><name>_data</name></member>
      <member refid="class_tf_template_string_1a3209edf18ef6e8bd5e692e2f7437ffe8" prot="private" virt="non-virtual"><scope>TfTemplateString</scope><name>_EmitParseErrors</name></member>
      <member refid="class_tf_template_string_1a1ec8b403a14c28d5906e89f5cb5399e9" prot="private" virt="non-virtual"><scope>TfTemplateString</scope><name>_Evaluate</name></member>
      <member refid="class_tf_template_string_1a8a6242b6e08736989c25218a34c7f67b" prot="private" virt="non-virtual"><scope>TfTemplateString</scope><name>_FindNextPlaceHolder</name></member>
      <member refid="class_tf_template_string_1a19d9081a624b25a3aa69532c0d66cd56" prot="private" virt="non-virtual"><scope>TfTemplateString</scope><name>_ParseTemplate</name></member>
      <member refid="class_tf_template_string_1a454d910f5da9039a69c69c49bf8992f3" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>GetEmptyMapping</name></member>
      <member refid="class_tf_template_string_1a1c2f9b549383c5e3631c342e9d8d55ed" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>GetParseErrors</name></member>
      <member refid="class_tf_template_string_1a4c6f036ae1597d5cf7f7000aefa08e7d" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>GetTemplate</name></member>
      <member refid="class_tf_template_string_1a3da3fc495542dcfb22b59d4a0f3abe11" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>IsValid</name></member>
      <member refid="class_tf_template_string_1a4b158130b14d39139e3669ee5ce66536" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>Mapping</name></member>
      <member refid="class_tf_template_string_1a29a7469d47217cbe7a44de9be47222a0" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>SafeSubstitute</name></member>
      <member refid="class_tf_template_string_1a394888515c897c1c68fc57703293c51b" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>Substitute</name></member>
      <member refid="class_tf_template_string_1a1915ecd064403507a004cb805cd6b7b9" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>TfTemplateString</name></member>
      <member refid="class_tf_template_string_1a6e33db576f73f5906b8ab0ded725e9a6" prot="public" virt="non-virtual"><scope>TfTemplateString</scope><name>TfTemplateString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
