<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_glf_g_l_context" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>GlfGLContext</compoundname>
    <derivedcompoundref refid="class_glf_g_l_raw_context" prot="public" virt="non-virtual">GlfGLRawContext</derivedcompoundref>
    <derivedcompoundref refid="class_glf_test_g_l_context" prot="public" virt="non-virtual">GlfTestGLContext</derivedcompoundref>
    <includes refid="gl_context_8h" local="no">glContext.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_glf_g_l_context_1a849935c3950aaa2ec1767bc5c142e394" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>GLF_API</type>
        <definition>virtual GLF_API ~GlfGLContext</definition>
        <argsstring>()</argsstring>
        <name>~GlfGLContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a2db87ddac19e5fdda9df79dca704b7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GlfGLContext</definition>
        <argsstring>(const GlfGLContext &amp;)=delete</argsstring>
        <name>GlfGLContext</name>
        <param>
          <type>const <ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a7902f83b86d5da7698b127409857b690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> &amp;</type>
        <definition>GlfGLContext&amp; operator=</definition>
        <argsstring>(const GlfGLContext &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a60bb48de5293a89182f437417e180f44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API bool</type>
        <definition>GLF_API bool IsCurrent</definition>
        <argsstring>() const</argsstring>
        <name>IsCurrent</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this context is current. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a59da54f8af21d149f869355bdf2eb97f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API bool</type>
        <definition>GLF_API bool IsSharing</definition>
        <argsstring>(GlfGLContextSharedPtr const &amp;otherContext)</argsstring>
        <name>IsSharing</name>
        <param>
          <type>GlfGLContextSharedPtr const &amp;</type>
          <declname>otherContext</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this context is sharing with <emphasis>otherContext</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1aedec2959336b77211e97d8d072b33f88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IsValid</definition>
        <argsstring>() const =0</argsstring>
        <name>IsValid</name>
        <reimplementedby refid="class_glf_test_g_l_context_1adff35fe63301aa7011a05af2dc742dc9">IsValid</reimplementedby>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this context is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a8f68cde97d1e108fcd90d5b7f62579e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>GlfGLContextSharedPtr</type>
        <definition>virtual GlfGLContextSharedPtr CreateSharingContext</definition>
        <argsstring>()</argsstring>
        <name>CreateSharingContext</name>
        <briefdescription>
<para>Creates a new GlfContext that shares GL resources with this context. </para>
        </briefdescription>
        <detaileddescription>
<para>The purpose of this function is to be able to create a new GL context on a second thread that shares with the context on the main-thread. If the GlfContext implementation does not support sharing contexts null is returned. Example usage: Main-thread: RegisterGLContextCallbacks(); GlfGLContext::MakeCurrent(...); Second-thread: s = <ref refid="class_glf_g_l_context_1a02d1bac8598e394417f9a43a0df39e5a" kindref="member">GetCurrentGLContext()</ref>; c = s-&gt;<ref refid="class_glf_g_l_context_1a8f68cde97d1e108fcd90d5b7f62579e9" kindref="member">CreateSharingContext()</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="116" column="1" bodyfile="pxr/imaging/glf/glContext.h" bodystart="116" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_glf_g_l_context_1a02d1bac8598e394417f9a43a0df39e5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API GlfGLContextSharedPtr</type>
        <definition>static GLF_API GlfGLContextSharedPtr GetCurrentGLContext</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentGLContext</name>
        <briefdescription>
<para>Returns an instance for the current GL context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a8edf3563a4df403fb22e8d2409d3848a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API GlfGLContextSharedPtr</type>
        <definition>static GLF_API GlfGLContextSharedPtr GetSharedGLContext</definition>
        <argsstring>()</argsstring>
        <name>GetSharedGLContext</name>
        <briefdescription>
<para>Returns an instance for the shared GL context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1ad56702e9dbe5986f37448579df2beef3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API void</type>
        <definition>static GLF_API void MakeCurrent</definition>
        <argsstring>(const GlfGLContextSharedPtr &amp;context)</argsstring>
        <name>MakeCurrent</name>
        <param>
          <type>const GlfGLContextSharedPtr &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Makes <computeroutput>context</computeroutput> current if valid, otherwise makes no context current. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a7f2e69f2518b53e7ad33b4ee128e5dad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API bool</type>
        <definition>static GLF_API bool AreSharing</definition>
        <argsstring>(GlfGLContextSharedPtr const &amp;context1, GlfGLContextSharedPtr const &amp;context2)</argsstring>
        <name>AreSharing</name>
        <param>
          <type>GlfGLContextSharedPtr const &amp;</type>
          <declname>context1</declname>
        </param>
        <param>
          <type>GlfGLContextSharedPtr const &amp;</type>
          <declname>context2</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if <emphasis>context1</emphasis> and <emphasis>context2</emphasis> are sharing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1aa619a8c447ee78a134a11f521e098d60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API bool</type>
        <definition>static GLF_API bool IsInitialized</definition>
        <argsstring>()</argsstring>
        <name>IsInitialized</name>
        <briefdescription>
<para>Returns whether this interface has been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1aeb173c776891839b82717fb56385ac51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API void</type>
        <definition>static GLF_API void DoneCurrent</definition>
        <argsstring>()</argsstring>
        <name>DoneCurrent</name>
        <briefdescription>
<para>Makes no context current. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="96" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_glf_g_l_context_1a381f71593921fd52f05a1dc2a363588f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeCurrent</definition>
        <argsstring>()</argsstring>
        <name>MakeCurrent</name>
        <briefdescription>
<para>Makes this context current. </para>
        </briefdescription>
        <detaileddescription>
<para>If the context is not valid this does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="91" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_glf_g_l_context_1a9400b0d760934b5aa85c3a4f7087e93e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API</type>
        <definition>GLF_API GlfGLContext</definition>
        <argsstring>()</argsstring>
        <name>GlfGLContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a45025712ea60ea84b8d6fe3a52a4fad0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void _MakeCurrent</definition>
        <argsstring>()=0</argsstring>
        <name>_MakeCurrent</name>
        <reimplementedby refid="class_glf_test_g_l_context_1a8f5968b9e1deee1bcc5627c42918e56d">_MakeCurrent</reimplementedby>
        <briefdescription>
<para>Makes this context current. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a94096b06be7f0e7d4295f7fafbdc8da6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool _IsSharing</definition>
        <argsstring>(const GlfGLContextSharedPtr &amp;rhs) const =0</argsstring>
        <name>_IsSharing</name>
        <reimplementedby refid="class_glf_test_g_l_context_1a37f91dc8986678251dcc2b8e1e3fcd5c">_IsSharing</reimplementedby>
        <param>
          <type>const GlfGLContextSharedPtr &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this context is sharing with <emphasis>rhs</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_1a26f9852df990955113fd8bfb7cd0be70" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool _IsEqual</definition>
        <argsstring>(const GlfGLContextSharedPtr &amp;rhs) const =0</argsstring>
        <name>_IsEqual</name>
        <reimplementedby refid="class_glf_test_g_l_context_1a9bf542b6ddf48f17590174ffa28d0877">_IsEqual</reimplementedby>
        <param>
          <type>const GlfGLContextSharedPtr &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if this context is equal to <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides window system independent access to GL contexts. </para>
    </briefdescription>
    <detaileddescription>
<para>All OpenGL operation occurs within a current GL Context. The GL contexts used by an application are allocated and managed by the window system interface layer, i.e. Qt, GLUT, GLX, etc.</para>
<para>This class provides a way for lower-level OpenGL framework code to get useful information about the GL contexts in use by the application.</para>
<para>This mechanism depends on the application code registering callbacks to provide access to its GL contexts. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1455">
        <label>GlfTestGLContext</label>
        <link refid="class_glf_test_g_l_context"/>
        <childnode refid="1454" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1454">
        <label>GlfGLContext</label>
        <link refid="class_glf_g_l_context"/>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/glf/glContext.h" line="53" column="1" bodyfile="pxr/imaging/glf/glContext.h" bodystart="52" bodyend="130"/>
    <listofallmembers>
      <member refid="class_glf_g_l_context_1a26f9852df990955113fd8bfb7cd0be70" prot="protected" virt="pure-virtual"><scope>GlfGLContext</scope><name>_IsEqual</name></member>
      <member refid="class_glf_g_l_context_1a94096b06be7f0e7d4295f7fafbdc8da6" prot="protected" virt="pure-virtual"><scope>GlfGLContext</scope><name>_IsSharing</name></member>
      <member refid="class_glf_g_l_context_1a45025712ea60ea84b8d6fe3a52a4fad0" prot="protected" virt="pure-virtual"><scope>GlfGLContext</scope><name>_MakeCurrent</name></member>
      <member refid="class_glf_g_l_context_1a7f2e69f2518b53e7ad33b4ee128e5dad" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>AreSharing</name></member>
      <member refid="class_glf_g_l_context_1a8f68cde97d1e108fcd90d5b7f62579e9" prot="public" virt="virtual"><scope>GlfGLContext</scope><name>CreateSharingContext</name></member>
      <member refid="class_glf_g_l_context_1aeb173c776891839b82717fb56385ac51" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>DoneCurrent</name></member>
      <member refid="class_glf_g_l_context_1a02d1bac8598e394417f9a43a0df39e5a" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>GetCurrentGLContext</name></member>
      <member refid="class_glf_g_l_context_1a8edf3563a4df403fb22e8d2409d3848a" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>GetSharedGLContext</name></member>
      <member refid="class_glf_g_l_context_1a2db87ddac19e5fdda9df79dca704b7e7" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>GlfGLContext</name></member>
      <member refid="class_glf_g_l_context_1a9400b0d760934b5aa85c3a4f7087e93e" prot="protected" virt="non-virtual"><scope>GlfGLContext</scope><name>GlfGLContext</name></member>
      <member refid="class_glf_g_l_context_1a60bb48de5293a89182f437417e180f44" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>IsCurrent</name></member>
      <member refid="class_glf_g_l_context_1aa619a8c447ee78a134a11f521e098d60" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>IsInitialized</name></member>
      <member refid="class_glf_g_l_context_1a59da54f8af21d149f869355bdf2eb97f" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>IsSharing</name></member>
      <member refid="class_glf_g_l_context_1aedec2959336b77211e97d8d072b33f88" prot="public" virt="pure-virtual"><scope>GlfGLContext</scope><name>IsValid</name></member>
      <member refid="class_glf_g_l_context_1ad56702e9dbe5986f37448579df2beef3" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>MakeCurrent</name></member>
      <member refid="class_glf_g_l_context_1a381f71593921fd52f05a1dc2a363588f" prot="private" virt="non-virtual"><scope>GlfGLContext</scope><name>MakeCurrent</name></member>
      <member refid="class_glf_g_l_context_1a7902f83b86d5da7698b127409857b690" prot="public" virt="non-virtual"><scope>GlfGLContext</scope><name>operator=</name></member>
      <member refid="class_glf_g_l_context_1a849935c3950aaa2ec1767bc5c142e394" prot="public" virt="virtual"><scope>GlfGLContext</scope><name>~GlfGLContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
