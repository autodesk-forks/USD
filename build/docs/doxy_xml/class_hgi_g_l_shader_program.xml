<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_shader_program" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLShaderProgram</compoundname>
    <basecompoundref refid="class_hgi_shader_program" prot="public" virt="non-virtual">HgiShaderProgram</basecompoundref>
    <includes refid="_l_2shader_program_8h" local="no">shaderProgram.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hgi_g_l_shader_program_1a459c65427f4c47c738022928ea52ecae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HgiGL</definition>
        <argsstring></argsstring>
        <name>HgiGL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="77" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_shader_program_1a3951c617030ccb54dac31d10e6fb9a52" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _errors</definition>
        <argsstring></argsstring>
        <name>_errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="88" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_shader_program_1a6e314d455ef0200dac370ca8c0ed20ac" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t _programId</definition>
        <argsstring></argsstring>
        <name>_programId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="89" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_shader_program_1ac2cd0d5fc109b49fb97eb86db38de6c4" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _programByteSize</definition>
        <argsstring></argsstring>
        <name>_programByteSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="90" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_shader_program_1a93d638a268b68229172300ceae9dcddc" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t _uniformBuffer</definition>
        <argsstring></argsstring>
        <name>_uniformBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="91" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_shader_program_1ad06fe6afe5054b74adc27ab44eb8f2c1" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _uboByteSize</definition>
        <argsstring></argsstring>
        <name>_uboByteSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="92" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1ab6e9af92d946c411649cf5ff6de64735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLShaderProgram</definition>
        <argsstring>() override</argsstring>
        <name>~HgiGLShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a9ba9cc57ab3c62115348a872b214da24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API bool</type>
        <definition>HGIGL_API bool IsValid</definition>
        <argsstring>() const override</argsstring>
        <name>IsValid</name>
        <reimplements refid="class_hgi_shader_program_1a14252f4137a1cb84ced798214eabe2d3">IsValid</reimplements>
        <briefdescription>
<para>Returns false if any shader compile errors occured. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a9fa577dda7e07c0026be8278fe68aea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API std::string const  &amp;</type>
        <definition>HGIGL_API std::string const&amp; GetCompileErrors</definition>
        <argsstring>() override</argsstring>
        <name>GetCompileErrors</name>
        <reimplements refid="class_hgi_shader_program_1a0d8a616ea20c7ebe8b03436ddbde5e39">GetCompileErrors</reimplements>
        <briefdescription>
<para>Returns shader compile errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a1db57fdfc370ccc29f4f27eba2c95247" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API HgiShaderFunctionHandleVector const  &amp;</type>
        <definition>HGIGL_API HgiShaderFunctionHandleVector const&amp; GetShaderFunctions</definition>
        <argsstring>() const override</argsstring>
        <name>GetShaderFunctions</name>
        <reimplements refid="class_hgi_shader_program_1aec14b2f1d79fdc969f4866416c92b1f2">GetShaderFunctions</reimplements>
        <briefdescription>
<para>Returns the shader functions that are part of this program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1aaf2f07918f87f57adccda3e250297da7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API size_t</type>
        <definition>HGIGL_API size_t GetByteSizeOfResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetByteSizeOfResource</name>
        <reimplements refid="class_hgi_shader_program_1afb9f5da99a13e9adcab7f87cb9a6ad94">GetByteSizeOfResource</reimplements>
        <briefdescription>
<para>Returns the byte size of the GPU shader program. </para>
        </briefdescription>
        <detaileddescription>
<para>APIs that do not have programs can return the combined byte size of the shader functions used by the program. This can be helpful if the application wishes to tally up memory usage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API uint64_t</type>
        <definition>HGIGL_API uint64_t GetRawResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetRawResource</name>
        <reimplements refid="class_hgi_shader_program_1a1c1b84de203362af87c23d73c8f8d395">GetRawResource</reimplements>
        <briefdescription>
<para>This function returns the handle to the <ref refid="class_hgi" kindref="compound">Hgi</ref> backend&apos;s gpu resource, cast to a uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should avoid using this function and instead use <ref refid="class_hgi" kindref="compound">Hgi</ref> base classes so that client code works with any <ref refid="class_hgi" kindref="compound">Hgi</ref> platform. For transitioning code to <ref refid="class_hgi" kindref="compound">Hgi</ref>, it can however we useful to directly access a platform&apos;s internal resource handles. There is no safety provided in using this. If you by accident pass a HgiMetal resource into an OpenGL call, bad things may happen. In OpenGL this returns the GLuint resource name. In Metal, Vulkan this returns 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a2b1ec123f6c49e41a0dc4af6aa54ee63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API uint32_t</type>
        <definition>HGIGL_API uint32_t GetProgramId</definition>
        <argsstring>() const</argsstring>
        <name>GetProgramId</name>
        <briefdescription>
<para>Returns the gl resource id of the program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a9a262dec4026d686eb412a5624f4ea0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API uint32_t</type>
        <definition>HGIGL_API uint32_t GetUniformBuffer</definition>
        <argsstring>(size_t sizeHint)</argsstring>
        <name>GetUniformBuffer</name>
        <param>
          <type>size_t</type>
          <declname>sizeHint</declname>
        </param>
        <briefdescription>
<para>Returns the gl resource for the uniform block of this shader program. </para>
        </briefdescription>
        <detaileddescription>
<para>This uniform block is used to store some per-shader values, such as indices or offsets into other buffers. See also Hgi::SetConstantValues. &apos;sizeHint&apos; is used to store the byte size of the uniform buffer, but this fn does not actually allocate the data storage for the buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a7c8cce6e15333fb55f5ef3bdc8f49972" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLShaderProgram</definition>
        <argsstring>(HgiShaderProgramDesc const &amp;desc)</argsstring>
        <name>HgiGLShaderProgram</name>
        <param>
          <type><ref refid="struct_hgi_shader_program_desc" kindref="compound">HgiShaderProgramDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a3d90f7f222ac0c88e087867dfde4e3a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLShaderProgram</definition>
        <argsstring>()=delete</argsstring>
        <name>HgiGLShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1aaefa694cd68bc2deffa446e923d0c1f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_shader_program" kindref="compound">HgiGLShaderProgram</ref> &amp;</type>
        <definition>HgiGLShaderProgram&amp; operator=</definition>
        <argsstring>(const HgiGLShaderProgram &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_shader_program" kindref="compound">HgiGLShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_program_1a50b87d475c8394035a7b062d0af01f09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLShaderProgram</definition>
        <argsstring>(const HgiGLShaderProgram &amp;)=delete</argsstring>
        <name>HgiGLShaderProgram</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_shader_program" kindref="compound">HgiGLShaderProgram</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderProgram.h" line="85" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenGL implementation of <ref refid="class_hgi_shader_program" kindref="compound">HgiShaderProgram</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3867">
        <label>HgiShaderProgram</label>
        <link refid="class_hgi_shader_program"/>
      </node>
      <node id="3866">
        <label>HgiGLShaderProgram</label>
        <link refid="class_hgi_g_l_shader_program"/>
        <childnode refid="3867" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3870">
        <label>HgiShaderProgramDesc</label>
        <link refid="struct_hgi_shader_program_desc"/>
      </node>
      <node id="3869">
        <label>HgiShaderProgram</label>
        <link refid="class_hgi_shader_program"/>
        <childnode refid="3870" relation="usage">
          <edgelabel>_descriptor</edgelabel>
        </childnode>
      </node>
      <node id="3868">
        <label>HgiGLShaderProgram</label>
        <link refid="class_hgi_g_l_shader_program"/>
        <childnode refid="3869" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgiGL/shaderProgram.h" line="43" column="1" bodyfile="pxr/imaging/hgiGL/shaderProgram.h" bodystart="42" bodyend="93"/>
    <listofallmembers>
      <member refid="class_hgi_shader_program_1a0071d56df98bb283938d51aab4f6f40d" prot="protected" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_descriptor</name></member>
      <member refid="class_hgi_g_l_shader_program_1a3951c617030ccb54dac31d10e6fb9a52" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_errors</name></member>
      <member refid="class_hgi_g_l_shader_program_1ac2cd0d5fc109b49fb97eb86db38de6c4" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_programByteSize</name></member>
      <member refid="class_hgi_g_l_shader_program_1a6e314d455ef0200dac370ca8c0ed20ac" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_programId</name></member>
      <member refid="class_hgi_g_l_shader_program_1ad06fe6afe5054b74adc27ab44eb8f2c1" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_uboByteSize</name></member>
      <member refid="class_hgi_g_l_shader_program_1a93d638a268b68229172300ceae9dcddc" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>_uniformBuffer</name></member>
      <member refid="class_hgi_g_l_shader_program_1aaf2f07918f87f57adccda3e250297da7" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>GetByteSizeOfResource</name></member>
      <member refid="class_hgi_g_l_shader_program_1a9fa577dda7e07c0026be8278fe68aea9" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>GetCompileErrors</name></member>
      <member refid="class_hgi_shader_program_1a19d7b188a82322b49ffc70cb77bd717a" prot="public" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>GetDescriptor</name></member>
      <member refid="class_hgi_g_l_shader_program_1a2b1ec123f6c49e41a0dc4af6aa54ee63" prot="public" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>GetProgramId</name></member>
      <member refid="class_hgi_g_l_shader_program_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>GetRawResource</name></member>
      <member refid="class_hgi_g_l_shader_program_1a1db57fdfc370ccc29f4f27eba2c95247" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>GetShaderFunctions</name></member>
      <member refid="class_hgi_g_l_shader_program_1a9a262dec4026d686eb412a5624f4ea0d" prot="public" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>GetUniformBuffer</name></member>
      <member refid="class_hgi_g_l_shader_program_1a459c65427f4c47c738022928ea52ecae" prot="protected" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>HgiGL</name></member>
      <member refid="class_hgi_g_l_shader_program_1a7c8cce6e15333fb55f5ef3bdc8f49972" prot="protected" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>HgiGLShaderProgram</name></member>
      <member refid="class_hgi_g_l_shader_program_1a3d90f7f222ac0c88e087867dfde4e3a0" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>HgiGLShaderProgram</name></member>
      <member refid="class_hgi_g_l_shader_program_1a50b87d475c8394035a7b062d0af01f09" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>HgiGLShaderProgram</name></member>
      <member refid="class_hgi_shader_program_1a28a1413604d68979b95e0cd55d937b9c" prot="protected" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>HgiShaderProgram</name></member>
      <member refid="class_hgi_g_l_shader_program_1a9ba9cc57ab3c62115348a872b214da24" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>IsValid</name></member>
      <member refid="class_hgi_g_l_shader_program_1aaefa694cd68bc2deffa446e923d0c1f9" prot="private" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>operator=</name></member>
      <member refid="class_hgi_g_l_shader_program_1ab6e9af92d946c411649cf5ff6de64735" prot="public" virt="non-virtual"><scope>HgiGLShaderProgram</scope><name>~HgiGLShaderProgram</name></member>
      <member refid="class_hgi_shader_program_1aa1c85326c0cf5d88a16c5100d4190c44" prot="public" virt="virtual"><scope>HgiGLShaderProgram</scope><name>~HgiShaderProgram</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
