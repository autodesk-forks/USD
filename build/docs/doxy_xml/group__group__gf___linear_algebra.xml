<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__gf___linear_algebra" kind="group">
    <compoundname>group_gf_LinearAlgebra</compoundname>
    <title>Linear Algebra</title>
    <innerfile refid="dual_quatd_8h">dualQuatd.h</innerfile>
    <innerfile refid="dual_quatf_8h">dualQuatf.h</innerfile>
    <innerfile refid="dual_quath_8h">dualQuath.h</innerfile>
    <innerfile refid="homogeneous_8h">homogeneous.h</innerfile>
    <innerfile refid="matrix2d_8h">matrix2d.h</innerfile>
    <innerfile refid="matrix2f_8h">matrix2f.h</innerfile>
    <innerfile refid="matrix3d_8h">matrix3d.h</innerfile>
    <innerfile refid="matrix3f_8h">matrix3f.h</innerfile>
    <innerfile refid="matrix4d_8h">matrix4d.h</innerfile>
    <innerfile refid="matrix4f_8h">matrix4f.h</innerfile>
    <innerfile refid="quatd_8h">quatd.h</innerfile>
    <innerfile refid="quaternion_8h">quaternion.h</innerfile>
    <innerfile refid="quatf_8h">quatf.h</innerfile>
    <innerfile refid="quath_8h">quath.h</innerfile>
    <innerfile refid="rect2i_8h">rect2i.h</innerfile>
    <innerfile refid="rotation_8h">rotation.h</innerfile>
    <innerfile refid="size2_8h">size2.h</innerfile>
    <innerfile refid="size3_8h">size3.h</innerfile>
    <innerfile refid="transform_8h">transform.h</innerfile>
    <innerfile refid="vec2d_8h">vec2d.h</innerfile>
    <innerfile refid="vec2f_8h">vec2f.h</innerfile>
    <innerfile refid="vec2h_8h">vec2h.h</innerfile>
    <innerfile refid="vec2i_8h">vec2i.h</innerfile>
    <innerfile refid="vec3d_8h">vec3d.h</innerfile>
    <innerfile refid="vec3f_8h">vec3f.h</innerfile>
    <innerfile refid="vec3h_8h">vec3h.h</innerfile>
    <innerfile refid="vec3i_8h">vec3i.h</innerfile>
    <innerfile refid="vec4d_8h">vec4d.h</innerfile>
    <innerfile refid="vec4f_8h">vec4f.h</innerfile>
    <innerfile refid="vec4h_8h">vec4h.h</innerfile>
    <innerfile refid="vec4i_8h">vec4i.h</innerfile>
    <innerclass refid="class_gf_dual_quatd" prot="public">GfDualQuatd</innerclass>
    <innerclass refid="class_gf_dual_quatf" prot="public">GfDualQuatf</innerclass>
    <innerclass refid="class_gf_dual_quath" prot="public">GfDualQuath</innerclass>
    <innerclass refid="class_gf_matrix2d" prot="public">GfMatrix2d</innerclass>
    <innerclass refid="class_gf_matrix2f" prot="public">GfMatrix2f</innerclass>
    <innerclass refid="class_gf_matrix3d" prot="public">GfMatrix3d</innerclass>
    <innerclass refid="class_gf_matrix3f" prot="public">GfMatrix3f</innerclass>
    <innerclass refid="class_gf_matrix4d" prot="public">GfMatrix4d</innerclass>
    <innerclass refid="class_gf_matrix4f" prot="public">GfMatrix4f</innerclass>
    <innerclass refid="class_gf_quatd" prot="public">GfQuatd</innerclass>
    <innerclass refid="class_gf_quaternion" prot="public">GfQuaternion</innerclass>
    <innerclass refid="class_gf_quatf" prot="public">GfQuatf</innerclass>
    <innerclass refid="class_gf_quath" prot="public">GfQuath</innerclass>
    <innerclass refid="class_gf_rect2i" prot="public">GfRect2i</innerclass>
    <innerclass refid="class_gf_rotation" prot="public">GfRotation</innerclass>
    <innerclass refid="class_gf_size2" prot="public">GfSize2</innerclass>
    <innerclass refid="class_gf_size3" prot="public">GfSize3</innerclass>
    <innerclass refid="class_gf_transform" prot="public">GfTransform</innerclass>
    <innerclass refid="class_gf_vec2d" prot="public">GfVec2d</innerclass>
    <innerclass refid="class_gf_vec2f" prot="public">GfVec2f</innerclass>
    <innerclass refid="class_gf_vec2h" prot="public">GfVec2h</innerclass>
    <innerclass refid="class_gf_vec2i" prot="public">GfVec2i</innerclass>
    <innerclass refid="class_gf_vec3d" prot="public">GfVec3d</innerclass>
    <innerclass refid="class_gf_vec3f" prot="public">GfVec3f</innerclass>
    <innerclass refid="class_gf_vec3h" prot="public">GfVec3h</innerclass>
    <innerclass refid="class_gf_vec3i" prot="public">GfVec3i</innerclass>
    <innerclass refid="class_gf_vec4d" prot="public">GfVec4d</innerclass>
    <innerclass refid="class_gf_vec4f" prot="public">GfVec4f</innerclass>
    <innerclass refid="class_gf_vec4h" prot="public">GfVec4h</innerclass>
    <innerclass refid="class_gf_vec4i" prot="public">GfVec4i</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__gf___linear_algebra_1ga931f9bc0b2cee5082c212b4cffbb1cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GF_API GfVec4f GfGetHomogenized</definition>
        <argsstring>(const GfVec4f &amp;v)</argsstring>
        <name>GfGetHomogenized</name>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns a vector which is <computeroutput>v</computeroutput> homogenized. </para>
        </briefdescription>
        <detaileddescription>
<para>If the fourth element of <computeroutput>v</computeroutput> is 0, it is set to 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/homogeneous.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___linear_algebra_1gaff6cb87fd35056aef991b3da64532510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GF_API GfVec4f GfHomogeneousCross</definition>
        <argsstring>(const GfVec4f &amp;a, const GfVec4f &amp;b)</argsstring>
        <name>GfHomogeneousCross</name>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Homogenizes <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> and then performs the cross product on the first three elements of each. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the cross product as a homogenized vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/homogeneous.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__gf___linear_algebra_1ga3c5188ff9a6800bb5bae9b0ec406175a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref></type>
        <definition>GF_API GfVec4d GfHomogeneousCross</definition>
        <argsstring>(const GfVec4d &amp;a, const GfVec4d &amp;b)</argsstring>
        <name>GfHomogeneousCross</name>
        <param>
          <type>const <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Homogenizes <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> and then performs the cross product on the first three elements of each. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the cross product as a homogenized vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/homogeneous.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__gf___linear_algebra_1ga85234a23eefa21de1dcf309d445b688e" prot="public" static="no">
        <name>GF_MIN_ORTHO_TOLERANCE</name>
        <initializer>1e-6</initializer>
        <briefdescription>
<para>This constant is used to determine when a set of basis vectors is close to orthogonal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/limits.h" line="39" column="9" bodyfile="pxr/base/gf/limits.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
