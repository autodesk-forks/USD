<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range3d" kind="class" language="C++" prot="public">
    <compoundname>GfRange3d</compoundname>
    <includes refid="range3d_8h" local="no">range3d.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range3d_1a56f82f51cd1c09959ee2adb3ad1b5197" prot="public" static="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>typedef GfVec3d MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="68" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range3d_1a214a03c813b360bc62204f93e4a771b0" prot="public" static="no">
        <type><ref refid="class_gf_vec3d_1a5459d6283bff692e454aad6e9ad9acf0" kindref="member">GfVec3d::ScalarType</ref></type>
        <definition>typedef GfVec3d::ScalarType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="71" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range3d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= GfVec3d::dimension</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="70" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range3d_1a7e0bbe7c2b753dcd631294037ef7f3b5" prot="public" static="yes" mutable="no">
        <type>GF_API const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GF_API const GfRange3d UnitCube</definition>
        <argsstring></argsstring>
        <name>UnitCube</name>
        <briefdescription>
<para>The unit cube. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="341" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range3d_1a32b603634d604338a7e77d104641ff91" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="345" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range3d_1a68bf86bb820a642adadfe057d67d8726" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="345" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range3d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="75" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1af3d4a8a92cc6865e621d8afd2ae54218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange3d</definition>
        <argsstring>()</argsstring>
        <name>GfRange3d</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="81" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a35d6644a67f9af285551f1df3da02840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange3d</definition>
        <argsstring>(const GfVec3d &amp;min, const GfVec3d &amp;max)</argsstring>
        <name>GfRange3d</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="86" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ae9c3f7ba88843f203115c01f5fd2fa27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange3d</definition>
        <argsstring>(class GfRange3f const &amp;other)</argsstring>
        <name>GfRange3d</name>
        <param>
          <type>class <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1adfc71d0179d3a236409d41f05c8fa4d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="97" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1aab96c3e031a197f3a99005b312bf52e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="100" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a81218eab75495b42230f02b0f56b4d21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="103" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ac2042284a81e1554c57593eb4f9050fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range3d_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="108" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ab29f842b5a9f13db7f4ade2caa1c9530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(const GfVec3d &amp;min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="114" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a923875bc141959af9aa4fab2fd666ed8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(const GfVec3d &amp;max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="117" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="120" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1aae2d557e1e41efde6ff0948b6deb8d9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfVec3d &amp;point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000037"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="126" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a228e32e48d585722cb99e464e28d0afb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange3d &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000038"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="130" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a6316d6bae05d45a21af2ff04a4949c96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfVec3d &amp;point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="134" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1aacb452369394db63efebdd9196d78a38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange3d &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="143" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a3616f0722ca04a23012a3bc97328d5ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfVec3d &amp;point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000039"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a6316d6bae05d45a21af2ff04a4949c96" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="150" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1af1a445f38ddf7697ea1bdcf54878a29a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange3d &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000040"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a6316d6bae05d45a21af2ff04a4949c96" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="158" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a56cc60d154bdffc020b03400e5cb9cb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange3d &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="165" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; UnionWith</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="180" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a9042a583331b806f700f8fb3d2554298" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; UnionWith</definition>
        <argsstring>(const GfVec3d &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="187" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a0d74f58948d461ad42355d3d68cfb030" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; Union</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000042"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="201" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a06a13c08597667bddeaba515a900733d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; Union</definition>
        <argsstring>(const GfVec3d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000043"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="207" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ae3520ed47d6e4fd51a9e7c8ff4283056" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; IntersectWith</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="227" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1afa61f7a0285f08a5367eb17f1faba293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>const GfRange3d&amp; Intersection</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000045"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1ae3520ed47d6e4fd51a9e7c8ff4283056" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="236" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a1d6b9a8cf216917ca8b215433ae4165c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>GfRange3d&amp; operator+=</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="241" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1aef168fcd945a638af445d268a4b4c70d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>GfRange3d&amp; operator -=</definition>
        <argsstring>(const GfRange3d &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="248" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a6dc66476afdb72e62fa6d57aff732a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>GfRange3d&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="255" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a2864b240b7da7e7965b1cc9bbda7da93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
        <definition>GfRange3d&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="268" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1adbec54b2da6cf514597667f9bad52b38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d operator+</definition>
        <argsstring>(const GfRange3d &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="273" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ae411ec0d17dc31fbcb5ab42c05644151" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d operator -</definition>
        <argsstring>(const GfRange3d &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="279" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ad82684d8d1e73d6dc6d2ea2403e20107" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange3d &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="308" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1af06908991dbbd8e34c354ba07092d47e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange3d &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="312" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ad8495d6de37e885ab565f4e53f526cdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange3f &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="320" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a11f91c0ff36f3b9a3f31d3e2e8a2ad04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange3f &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range3f" kindref="compound">GfRange3f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="321" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1ac20bdee563c7d1dc3a9fe4d728548e3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(const GfVec3d &amp;p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1af3e88ddd9c61229ce81086a4bdac1bc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GF_API GfVec3d GetCorner</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetCorner</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith corner of the range, in the following order: LDB, RDB, LUB, RUB, LDF, RDF, LUF, RUF. </para>
        </briefdescription>
        <detaileddescription>
<para>Where L/R is left/right, D/U is down/up, and B/F is back/front. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a66fc3bddc814a31cd30d485cb33e65fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GF_API GfRange3d GetOctant</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetOctant</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith octant of the range, in the following order: LDB, RDB, LUB, RUB, LDF, RDF, LUF, RUF. </para>
        </briefdescription>
        <detaileddescription>
<para>Where L/R is left/right, D/U is down/up, and B/F is back/front. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="337" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range3d_1a287a2815997c889be986842635cb63f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>static GfRange3d GetUnion</definition>
        <argsstring>(const GfRange3d &amp;a, const GfRange3d &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="172" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="172" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a33ca61536a6eabbb82db4c94356e007e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>static GfRange3d Union</definition>
        <argsstring>(const GfRange3d &amp;a, const GfRange3d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000041"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a287a2815997c889be986842635cb63f0" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="195" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a07b4bc43c25bd498f516ef85f2426197" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>static GfRange3d GetIntersection</definition>
        <argsstring>(const GfRange3d &amp;a, const GfRange3d &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="212" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1aebb6596b433bbe4c2351f0babf26b14d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>static GfRange3d Intersection</definition>
        <argsstring>(const GfRange3d &amp;a, const GfRange3d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000044"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range3d_1a07b4bc43c25bd498f516ef85f2426197" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="221" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="221" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range3d_1a079ec437f84d20438163bd4a85773344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d operator *</definition>
        <argsstring>(double m, const GfRange3d &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="284" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3d_1a91941200fd7e6c48623a66842eff08d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d operator *</definition>
        <argsstring>(const GfRange3d &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="291" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3d_1a84c0388fb334485bdd365f4eeee4737a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>GfRange3d operator/</definition>
        <argsstring>(const GfRange3d &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="298" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range3d_1acf640c836f5059f8314d3eb4e69d67ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange3d &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="303" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="303" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range3d_1ad716882691a518253c5dbe7aee32d40f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(GfVec3d &amp;dest, const GfVec3d &amp;point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="348" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="348" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range3d_1a03a3e720fee7a837eb242b546aad9aba" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(GfVec3d &amp;dest, const GfVec3d &amp;point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range3d.h" line="355" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="355" bodyend="359"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 3-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 3-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1395">
        <label>GfRange3d</label>
        <link refid="class_gf_range3d"/>
        <childnode refid="1395" relation="usage">
          <edgelabel>UnitCube</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/gf/range3d.h" line="64" column="1" bodyfile="pxr/base/gf/range3d.h" bodystart="63" bodyend="360"/>
    <listofallmembers>
      <member refid="class_gf_range3d_1a03a3e720fee7a837eb242b546aad9aba" prot="private" virt="non-virtual"><scope>GfRange3d</scope><name>_FindMax</name></member>
      <member refid="class_gf_range3d_1ad716882691a518253c5dbe7aee32d40f" prot="private" virt="non-virtual"><scope>GfRange3d</scope><name>_FindMin</name></member>
      <member refid="class_gf_range3d_1a68bf86bb820a642adadfe057d67d8726" prot="private" virt="non-virtual"><scope>GfRange3d</scope><name>_max</name></member>
      <member refid="class_gf_range3d_1a32b603634d604338a7e77d104641ff91" prot="private" virt="non-virtual"><scope>GfRange3d</scope><name>_min</name></member>
      <member refid="class_gf_range3d_1a6316d6bae05d45a21af2ff04a4949c96" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Contains</name></member>
      <member refid="class_gf_range3d_1aacb452369394db63efebdd9196d78a38" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Contains</name></member>
      <member refid="class_gf_range3d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>dimension</name></member>
      <member refid="class_gf_range3d_1aae2d557e1e41efde6ff0948b6deb8d9b" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range3d_1a228e32e48d585722cb99e464e28d0afb" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range3d_1af3e88ddd9c61229ce81086a4bdac1bc8" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetCorner</name></member>
      <member refid="class_gf_range3d_1ac20bdee563c7d1dc3a9fe4d728548e3b" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range3d_1a07b4bc43c25bd498f516ef85f2426197" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range3d_1aab96c3e031a197f3a99005b312bf52e7" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetMax</name></member>
      <member refid="class_gf_range3d_1ac2042284a81e1554c57593eb4f9050fa" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range3d_1adfc71d0179d3a236409d41f05c8fa4d8" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetMin</name></member>
      <member refid="class_gf_range3d_1a66fc3bddc814a31cd30d485cb33e65fa" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetOctant</name></member>
      <member refid="class_gf_range3d_1a81218eab75495b42230f02b0f56b4d21" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetSize</name></member>
      <member refid="class_gf_range3d_1a287a2815997c889be986842635cb63f0" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GetUnion</name></member>
      <member refid="class_gf_range3d_1af3d4a8a92cc6865e621d8afd2ae54218" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GfRange3d</name></member>
      <member refid="class_gf_range3d_1a35d6644a67f9af285551f1df3da02840" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GfRange3d</name></member>
      <member refid="class_gf_range3d_1ae9c3f7ba88843f203115c01f5fd2fa27" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>GfRange3d</name></member>
      <member refid="class_gf_range3d_1acf640c836f5059f8314d3eb4e69d67ed" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>hash_value</name></member>
      <member refid="class_gf_range3d_1aebb6596b433bbe4c2351f0babf26b14d" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Intersection</name></member>
      <member refid="class_gf_range3d_1afa61f7a0285f08a5367eb17f1faba293" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Intersection</name></member>
      <member refid="class_gf_range3d_1ae3520ed47d6e4fd51a9e7c8ff4283056" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range3d_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range3d_1a3616f0722ca04a23012a3bc97328d5ea" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>IsInside</name></member>
      <member refid="class_gf_range3d_1af1a445f38ddf7697ea1bdcf54878a29a" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>IsInside</name></member>
      <member refid="class_gf_range3d_1a56cc60d154bdffc020b03400e5cb9cb1" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>IsOutside</name></member>
      <member refid="class_gf_range3d_1a56f82f51cd1c09959ee2adb3ad1b5197" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range3d_1af06908991dbbd8e34c354ba07092d47e" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator !=</name></member>
      <member refid="class_gf_range3d_1a11f91c0ff36f3b9a3f31d3e2e8a2ad04" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator !=</name></member>
      <member refid="class_gf_range3d_1a079ec437f84d20438163bd4a85773344" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator *</name></member>
      <member refid="class_gf_range3d_1a91941200fd7e6c48623a66842eff08d7" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator *</name></member>
      <member refid="class_gf_range3d_1a6dc66476afdb72e62fa6d57aff732a65" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator *=</name></member>
      <member refid="class_gf_range3d_1ae411ec0d17dc31fbcb5ab42c05644151" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator -</name></member>
      <member refid="class_gf_range3d_1aef168fcd945a638af445d268a4b4c70d" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator -=</name></member>
      <member refid="class_gf_range3d_1adbec54b2da6cf514597667f9bad52b38" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator+</name></member>
      <member refid="class_gf_range3d_1a1d6b9a8cf216917ca8b215433ae4165c" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator+=</name></member>
      <member refid="class_gf_range3d_1a84c0388fb334485bdd365f4eeee4737a" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator/</name></member>
      <member refid="class_gf_range3d_1a2864b240b7da7e7965b1cc9bbda7da93" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator/=</name></member>
      <member refid="class_gf_range3d_1ad82684d8d1e73d6dc6d2ea2403e20107" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator==</name></member>
      <member refid="class_gf_range3d_1ad8495d6de37e885ab565f4e53f526cdb" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>operator==</name></member>
      <member refid="class_gf_range3d_1a214a03c813b360bc62204f93e4a771b0" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>ScalarType</name></member>
      <member refid="class_gf_range3d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range3d_1a923875bc141959af9aa4fab2fd666ed8" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>SetMax</name></member>
      <member refid="class_gf_range3d_1ab29f842b5a9f13db7f4ade2caa1c9530" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>SetMin</name></member>
      <member refid="class_gf_range3d_1a33ca61536a6eabbb82db4c94356e007e" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Union</name></member>
      <member refid="class_gf_range3d_1a0d74f58948d461ad42355d3d68cfb030" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Union</name></member>
      <member refid="class_gf_range3d_1a06a13c08597667bddeaba515a900733d" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>Union</name></member>
      <member refid="class_gf_range3d_1a0e9c3d5d56115c20cc2d371b96c33a5b" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>UnionWith</name></member>
      <member refid="class_gf_range3d_1a9042a583331b806f700f8fb3d2554298" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>UnionWith</name></member>
      <member refid="class_gf_range3d_1a7e0bbe7c2b753dcd631294037ef7f3b5" prot="public" virt="non-virtual"><scope>GfRange3d</scope><name>UnitCube</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
