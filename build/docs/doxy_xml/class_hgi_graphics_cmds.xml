<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_graphics_cmds" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>HgiGraphicsCmds</compoundname>
    <basecompoundref refid="class_hgi_cmds" prot="public" virt="non-virtual">HgiCmds</basecompoundref>
    <derivedcompoundref refid="class_hgi_g_l_graphics_cmds" prot="public" virt="non-virtual">HgiGLGraphicsCmds</derivedcompoundref>
    <includes refid="graphics_cmds_8h" local="no">graphicsCmds.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a79e0b2c9b746664ab735b23a4d9fcdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API</type>
        <definition>HGI_API ~HgiGraphicsCmds</definition>
        <argsstring>() override</argsstring>
        <name>~HgiGraphicsCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a4faea3ac78fb17fe44b934ddcd670ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void PushDebugGroup</definition>
        <argsstring>(const char *label)=0</argsstring>
        <name>PushDebugGroup</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1afef735fb601fa2235b72d0b42214a08d">PushDebugGroup</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Push a debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a7f3b9bc0bba2f41ee8fadb843c6220d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void PopDebugGroup</definition>
        <argsstring>()=0</argsstring>
        <name>PopDebugGroup</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1ac03f05639627f7e78f42fdbc9ebbfd74">PopDebugGroup</reimplementedby>
        <briefdescription>
<para>Pop the last debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a381cd1e10f417750614c812862ffc608" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void SetViewport</definition>
        <argsstring>(GfVec4i const &amp;vp)=0</argsstring>
        <name>SetViewport</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a8b900c3a85982bce371ba2e47708ad2c">SetViewport</reimplementedby>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Set viewport [left, BOTTOM, width, height] - OpenGL coords. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a90bbeebb75cdb96b8dfbe88e45957e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void SetScissor</definition>
        <argsstring>(GfVec4i const &amp;sc)=0</argsstring>
        <name>SetScissor</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a0c9e4dafcddbebda0e852191307e98d4">SetScissor</reimplementedby>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
<para>Only pixels that lie within the scissor box are modified by drawing commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a3dc012f85a2af9cc4160b94e12501d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void BindPipeline</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline)=0</argsstring>
        <name>BindPipeline</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1aeeb0eef09ee89bcf5dfc295b6da566b1">BindPipeline</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
<para>Bind a pipeline state object. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after calling CreateGraphicsCmds to set the graphics pipeline state. The resource bindings used when creating the pipeline must be compatible with the resources bound via <ref refid="class_hgi_graphics_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" kindref="member">BindResources()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void BindResources</definition>
        <argsstring>(HgiResourceBindingsHandle resources)=0</argsstring>
        <name>BindResources</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a56192fa6096e9b20a821789a42e3ee37">BindResources</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiResourceBindingsHandle</ref></type>
          <declname>resources</declname>
        </param>
        <briefdescription>
<para>Bind resources such as textures and uniform buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after <ref refid="class_hgi_graphics_cmds_1a3dc012f85a2af9cc4160b94e12501d1b" kindref="member">BindPipeline()</ref> and the resources bound must be compatible with the bound pipeline. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a80ee2100bf3a54e2786daa5c84c5375e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void SetConstantValues</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline, HgiShaderStage stages, uint32_t bindIndex, uint32_t byteSize, const void *data)=0</argsstring>
        <name>SetConstantValues</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a5814e68517a8e751c12c7c3f7f2737a5">SetConstantValues</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>HgiShaderStage</type>
          <declname>stages</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set Push / Function constants. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>pipeline</computeroutput> is the pipeline that you are binding before the draw call. It contains the program used for the uniform buffer <computeroutput>stages</computeroutput> describes for what shader stage you are setting the push constant values for. Each stage can have its own (or none) binding and they must match what is described in the shader functions. <computeroutput>bindIndex</computeroutput> is the binding point index in the pipeline&apos;s shader to bind the data to. <computeroutput>byteSize</computeroutput> is the size of the data you are updating. <computeroutput>data</computeroutput> is the data you are copying into the push constants block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a261c8e9e278e1ad6b42a42ebc1715421" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void BindVertexBuffers</definition>
        <argsstring>(HgiVertexBufferBindingVector const &amp;bindings)=0</argsstring>
        <name>BindVertexBuffers</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a52d2512d2214d878d9e26441630c587e">BindVertexBuffers</reimplementedby>
        <param>
          <type>HgiVertexBufferBindingVector const &amp;</type>
          <declname>bindings</declname>
        </param>
        <briefdescription>
<para>Binds the vertex buffer(s) that describe the vertex attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a6c611fdd260b51a498f433a141b58521" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void Draw</definition>
        <argsstring>(uint32_t vertexCount, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance)=0</argsstring>
        <name>Draw</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1af995a8b95b7f9c7acc6ec1e91eabd3d2">Draw</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>vertexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
<para>Records a draw command that renders one or more instances of primitives using the number of vertices provided. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>vertexCount</computeroutput>: The number of vertices to draw. <computeroutput>baseVertex</computeroutput>: The index of the first vertex to draw. <computeroutput>instanceCount</computeroutput>: Number of instances to draw. <computeroutput>baseInstance</computeroutput>: The first instance to draw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a94fabafc9f88b9a334d04f0063f4d97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void DrawIndirect</definition>
        <argsstring>(HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride)=0</argsstring>
        <name>DrawIndirect</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1afd2b9805533430c4ad7b8a83cebeffca">DrawIndirect</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Records a multi-draw command that reads the draw parameters from a provided drawParameterBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>drawParameterBuffer</computeroutput>: an array of structures: <computeroutput>drawBufferByteOffset</computeroutput>: Byte offset where the draw parameters begin. <computeroutput>drawCount</computeroutput>: The number of draws to execute. <computeroutput>stride</computeroutput>: byte stride between successive sets of draw parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a3d30d34d81e5880f1f1ca2210a35dc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void DrawIndexed</definition>
        <argsstring>(HgiBufferHandle const &amp;indexBuffer, uint32_t indexCount, uint32_t indexBufferByteOffset, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance)=0</argsstring>
        <name>DrawIndexed</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1adb5ea8fd2e39a9ebd710726bd519bc52">DrawIndexed</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
<para>Records a draw command that renders one or more instances of primitives using an indexBuffer starting from the base vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>indexCount</computeroutput>: The number of indices in the index buffer (num vertices). <computeroutput>indexBufferByteOffset</computeroutput>: Byte offset within index buffer to start reading the indices from. <computeroutput>baseVertex</computeroutput>: The value added to the vertex index before indexing into the vertex buffer (baseVertex). <computeroutput>instanceCount</computeroutput>: Number of instances to draw. <computeroutput>baseInstance</computeroutput>: The first instance to draw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1aaff9c300ca656c2803fefe60c153978c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void DrawIndexedIndirect</definition>
        <argsstring>(HgiBufferHandle const &amp;indexBuffer, HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride, std::vector&lt; uint32_t &gt; const &amp;drawParameterBufferUInt32, uint32_t patchBaseVertexByteOffset)=0</argsstring>
        <name>DrawIndexedIndirect</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a7bc3803a8d12059b3112d04bd66d66a2">DrawIndexedIndirect</reimplementedby>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; const &amp;</type>
          <declname>drawParameterBufferUInt32</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>patchBaseVertexByteOffset</declname>
        </param>
        <briefdescription>
<para>Records a indexed multi-draw command that reads the draw parameters from a provided drawParameterBuffer, and indices from indexBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>drawParameterBuffer</computeroutput>: an array of structures (Metal has a different encoding of indirect commands for tessellated patches): <computeroutput>drawBufferByteOffset</computeroutput>: Byte offset where the draw parameters begin. <computeroutput>drawCount</computeroutput>: The number of draws to execute. <computeroutput>stride</computeroutput>: byte stride between successive sets of draw parameters. <computeroutput>drawParameterBufferUInt32</computeroutput>: CPU addressable <computeroutput>drawParameterBuffer</computeroutput> which contains the <computeroutput>baseVertex</computeroutput> offset needed for each patch draw for Metal. <computeroutput>patchBaseVertexByteOffset</computeroutput>: Byte offset to the uint32_t value in <computeroutput>drawParameterBufferUint32</computeroutput> which is the <computeroutput>baseVertex</computeroutput> value which must be applied to each HgiVertexBufferPerPatchControlPoint vertex buffer for each patch draw for Metal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1af7fca4b663cc7418d36f96c36b72cc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>HGI_API void</type>
        <definition>virtual HGI_API void InsertMemoryBarrier</definition>
        <argsstring>(HgiMemoryBarrier barrier)=0</argsstring>
        <name>InsertMemoryBarrier</name>
        <reimplementedby refid="class_hgi_g_l_graphics_cmds_1a150f08387a4c7165f2c5aeeb19542a33">InsertMemoryBarrier</reimplementedby>
        <param>
          <type>HgiMemoryBarrier</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
<para>Inserts a barrier so that data written to memory by commands before the barrier is available to commands after the barrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="204" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a6587d25cb28b725200701781e77cae04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGI_API</type>
        <definition>HGI_API HgiGraphicsCmds</definition>
        <argsstring>()</argsstring>
        <name>HgiGraphicsCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="208" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_graphics_cmds_1af7773b4bddf566f642614c0bb7bdf3c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_graphics_cmds" kindref="compound">HgiGraphicsCmds</ref> &amp;</type>
        <definition>HgiGraphicsCmds&amp; operator=</definition>
        <argsstring>(const HgiGraphicsCmds &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_graphics_cmds" kindref="compound">HgiGraphicsCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_graphics_cmds_1a48c9fc45351b0a46c6595b5b5a511a7a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGraphicsCmds</definition>
        <argsstring>(const HgiGraphicsCmds &amp;)=delete</argsstring>
        <name>HgiGraphicsCmds</name>
        <param>
          <type>const <ref refid="class_hgi_graphics_cmds" kindref="compound">HgiGraphicsCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgi/graphicsCmds.h" line="212" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A graphics API independent abstraction of graphics commands. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_hgi_graphics_cmds" kindref="compound">HgiGraphicsCmds</ref> is a lightweight object that cannot be re-used after it has been submitted. A new cmds object should be acquired for each frame. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3882">
        <label>HgiGLGraphicsCmds</label>
        <link refid="class_hgi_g_l_graphics_cmds"/>
        <childnode refid="3880" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3880">
        <label>HgiGraphicsCmds</label>
        <link refid="class_hgi_graphics_cmds"/>
        <childnode refid="3881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3881">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3883">
        <label>HgiGraphicsCmds</label>
        <link refid="class_hgi_graphics_cmds"/>
        <childnode refid="3884" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3884">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgi/graphicsCmds.h" line="48" column="1" bodyfile="pxr/imaging/hgi/graphicsCmds.h" bodystart="47" bodyend="213"/>
    <listofallmembers>
      <member refid="class_hgi_cmds_1ac15c43bdc2f47df7bc72769b366c3de7" prot="protected" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>_SetSubmitted</name></member>
      <member refid="class_hgi_cmds_1ada9b3b32ca4eb9804e3a47ddd8954062" prot="protected" virt="virtual"><scope>HgiGraphicsCmds</scope><name>_Submit</name></member>
      <member refid="class_hgi_graphics_cmds_1a3dc012f85a2af9cc4160b94e12501d1b" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>BindPipeline</name></member>
      <member refid="class_hgi_graphics_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>BindResources</name></member>
      <member refid="class_hgi_graphics_cmds_1a261c8e9e278e1ad6b42a42ebc1715421" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>BindVertexBuffers</name></member>
      <member refid="class_hgi_graphics_cmds_1a6c611fdd260b51a498f433a141b58521" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>Draw</name></member>
      <member refid="class_hgi_graphics_cmds_1a3d30d34d81e5880f1f1ca2210a35dc3e" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>DrawIndexed</name></member>
      <member refid="class_hgi_graphics_cmds_1aaff9c300ca656c2803fefe60c153978c" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>DrawIndexedIndirect</name></member>
      <member refid="class_hgi_graphics_cmds_1a94fabafc9f88b9a334d04f0063f4d97e" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>DrawIndirect</name></member>
      <member refid="class_hgi_cmds_1aacf15024d99594cd7e32536f934141ab" prot="protected" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>HgiCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1a6587d25cb28b725200701781e77cae04" prot="protected" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>HgiGraphicsCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1a48c9fc45351b0a46c6595b5b5a511a7a" prot="private" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>HgiGraphicsCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1af7fca4b663cc7418d36f96c36b72cc54" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>InsertMemoryBarrier</name></member>
      <member refid="class_hgi_cmds_1ae21ceb4d878a96527fa7e9aa2eec6c0b" prot="public" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>IsSubmitted</name></member>
      <member refid="class_hgi_graphics_cmds_1af7773b4bddf566f642614c0bb7bdf3c6" prot="private" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>operator=</name></member>
      <member refid="class_hgi_graphics_cmds_1a7f3b9bc0bba2f41ee8fadb843c6220d3" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>PopDebugGroup</name></member>
      <member refid="class_hgi_graphics_cmds_1a4faea3ac78fb17fe44b934ddcd670ff5" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>PushDebugGroup</name></member>
      <member refid="class_hgi_graphics_cmds_1a80ee2100bf3a54e2786daa5c84c5375e" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>SetConstantValues</name></member>
      <member refid="class_hgi_graphics_cmds_1a90bbeebb75cdb96b8dfbe88e45957e45" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>SetScissor</name></member>
      <member refid="class_hgi_graphics_cmds_1a381cd1e10f417750614c812862ffc608" prot="public" virt="pure-virtual"><scope>HgiGraphicsCmds</scope><name>SetViewport</name></member>
      <member refid="class_hgi_cmds_1acfebf344be18afe51829d5c843d53ccd" prot="public" virt="virtual"><scope>HgiGraphicsCmds</scope><name>~HgiCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1a79e0b2c9b746664ab735b23a4d9fcdf1" prot="public" virt="non-virtual"><scope>HgiGraphicsCmds</scope><name>~HgiGraphicsCmds</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
