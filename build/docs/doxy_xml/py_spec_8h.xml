<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="py_spec_8h" kind="file" language="C++">
    <compoundname>pySpec.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_2sdf_2api_8h" local="yes">pxr/usd/sdf/api.h</includes>
    <includes local="no">boost/python/def_visitor.hpp</includes>
    <includes local="no">boost/python/dict.hpp</includes>
    <includes local="no">boost/python/errors.hpp</includes>
    <includes local="no">boost/python/raw_function.hpp</includes>
    <includes local="no">boost/python/pointee.hpp</includes>
    <includes local="no">boost/python/to_python_converter.hpp</includes>
    <includes local="no">boost/python/tuple.hpp</includes>
    <includes refid="py_error_8h" local="yes">pxr/base/tf/pyError.h</includes>
    <includes refid="base_2tf_2py_utils_8h" local="yes">pxr/base/tf/pyUtils.h</includes>
    <includes refid="declare_handles_8h" local="yes">pxr/usd/sdf/declareHandles.h</includes>
    <includes refid="tf_8h" local="yes">pxr/base/tf/tf.h</includes>
    <includes refid="base_2tf_2diagnostic_8h" local="yes">pxr/base/tf/diagnostic.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes refid="demangle_8h" local="yes">pxr/base/arch/demangle.h</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <incdepgraph>
      <node id="185798">
        <label>list</label>
      </node>
      <node id="185811">
        <label>locale</label>
      </node>
      <node id="185786">
        <label>atomic</label>
      </node>
      <node id="185813">
        <label>stdarg.h</label>
      </node>
      <node id="185757">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="185758" relation="include">
        </childnode>
        <childnode refid="185759" relation="include">
        </childnode>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
        <childnode refid="185760" relation="include">
        </childnode>
      </node>
      <node id="185782">
        <label>functional</label>
      </node>
      <node id="185737">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185833">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="185787">
        <label>iterator</label>
      </node>
      <node id="185759">
        <label>cstdint</label>
      </node>
      <node id="185748">
        <label>pxr/base/tf/errorMark.h</label>
        <link refid="error_mark_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185749" relation="include">
        </childnode>
        <childnode refid="185820" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185802">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185791" relation="include">
        </childnode>
        <childnode refid="185770" relation="include">
        </childnode>
        <childnode refid="185801" relation="include">
        </childnode>
        <childnode refid="185794" relation="include">
        </childnode>
        <childnode refid="185778" relation="include">
        </childnode>
        <childnode refid="185803" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
        <childnode refid="185804" relation="include">
        </childnode>
      </node>
      <node id="185832">
        <label>pxr/base/tf/declarePtrs.h</label>
        <link refid="declare_ptrs_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185800" relation="include">
        </childnode>
        <childnode refid="185802" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185743">
        <label>boost/python/pointee.hpp</label>
      </node>
      <node id="185810">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
        <childnode refid="185811" relation="include">
        </childnode>
        <childnode refid="185812" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
      </node>
      <node id="185815">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185761">
        <label>cmath</label>
      </node>
      <node id="185754">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185755" relation="include">
        </childnode>
        <childnode refid="185756" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185762" relation="include">
        </childnode>
        <childnode refid="185763" relation="include">
        </childnode>
      </node>
      <node id="185826">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="185788">
        <label>numeric</label>
      </node>
      <node id="185794">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185795" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185797">
        <label>cstdarg</label>
      </node>
      <node id="185767">
        <label>string</label>
      </node>
      <node id="185781">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185737" relation="include">
        </childnode>
      </node>
      <node id="185827">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="185817">
        <label>pxr/base/tf/warning.h</label>
        <link refid="warning_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185793" relation="include">
        </childnode>
      </node>
      <node id="185772">
        <label>map</label>
      </node>
      <node id="185758">
        <label>cinttypes</label>
      </node>
      <node id="185735">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="185765">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185766" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
        <childnode refid="185769" relation="include">
        </childnode>
      </node>
      <node id="185818">
        <label>tbb/enumerable_thread_specific.h</label>
      </node>
      <node id="185741">
        <label>boost/python/errors.hpp</label>
      </node>
      <node id="185736">
        <label>pxr/usd/sdf/api.h</label>
        <link refid="usd_2sdf_2api_8h_source"/>
        <childnode refid="185737" relation="include">
        </childnode>
      </node>
      <node id="185752">
        <label>stddef.h</label>
      </node>
      <node id="185755">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185749">
        <label>pxr/base/tf/diagnosticMgr.h</label>
        <link refid="diagnostic_mgr_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185750" relation="include">
        </childnode>
        <childnode refid="185753" relation="include">
        </childnode>
        <childnode refid="185791" relation="include">
        </childnode>
        <childnode refid="185792" relation="include">
        </childnode>
        <childnode refid="185814" relation="include">
        </childnode>
        <childnode refid="185816" relation="include">
        </childnode>
        <childnode refid="185796" relation="include">
        </childnode>
        <childnode refid="185817" relation="include">
        </childnode>
        <childnode refid="185800" relation="include">
        </childnode>
        <childnode refid="185764" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185751" relation="include">
        </childnode>
        <childnode refid="185818" relation="include">
        </childnode>
        <childnode refid="185819" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
        <childnode refid="185797" relation="include">
        </childnode>
        <childnode refid="185798" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185777">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185734">
        <label>pxr/usd/sdf/pySpec.h</label>
        <link refid="py_spec_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185736" relation="include">
        </childnode>
        <childnode refid="185739" relation="include">
        </childnode>
        <childnode refid="185740" relation="include">
        </childnode>
        <childnode refid="185741" relation="include">
        </childnode>
        <childnode refid="185742" relation="include">
        </childnode>
        <childnode refid="185743" relation="include">
        </childnode>
        <childnode refid="185744" relation="include">
        </childnode>
        <childnode refid="185745" relation="include">
        </childnode>
        <childnode refid="185746" relation="include">
        </childnode>
        <childnode refid="185822" relation="include">
        </childnode>
        <childnode refid="185831" relation="include">
        </childnode>
        <childnode refid="185754" relation="include">
        </childnode>
        <childnode refid="185808" relation="include">
        </childnode>
        <childnode refid="185796" relation="include">
        </childnode>
        <childnode refid="185765" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
      </node>
      <node id="185825">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185826" relation="include">
        </childnode>
        <childnode refid="185827" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
      </node>
      <node id="185795">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
      </node>
      <node id="185778">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
      </node>
      <node id="185806">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185823">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="185815" relation="include">
        </childnode>
        <childnode refid="185811" relation="include">
        </childnode>
        <childnode refid="185824" relation="include">
        </childnode>
      </node>
      <node id="185819">
        <label>tbb/spin_rw_mutex.h</label>
      </node>
      <node id="185831">
        <label>pxr/usd/sdf/declareHandles.h</label>
        <link refid="declare_handles_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185736" relation="include">
        </childnode>
        <childnode refid="185765" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185808" relation="include">
        </childnode>
        <childnode refid="185807" relation="include">
        </childnode>
        <childnode refid="185832" relation="include">
        </childnode>
        <childnode refid="185774" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
        <childnode refid="185833" relation="include">
        </childnode>
      </node>
      <node id="185812">
        <label>any</label>
      </node>
      <node id="185792">
        <label>pxr/base/tf/error.h</label>
        <link refid="tf_2error_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185793" relation="include">
        </childnode>
      </node>
      <node id="185740">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="185760">
        <label>sys/types.h</label>
      </node>
      <node id="185783">
        <label>pxr/base/tf/stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185784" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185779" relation="include">
        </childnode>
      </node>
      <node id="185807">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185808" relation="include">
        </childnode>
        <childnode refid="185770" relation="include">
        </childnode>
        <childnode refid="185802" relation="include">
        </childnode>
        <childnode refid="185805" relation="include">
        </childnode>
        <childnode refid="185765" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
      </node>
      <node id="185764">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
        <childnode refid="185765" relation="include">
        </childnode>
        <childnode refid="185770" relation="include">
        </childnode>
        <childnode refid="185777" relation="include">
        </childnode>
        <childnode refid="185778" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185779" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185768">
        <label>typeinfo</label>
      </node>
      <node id="185790">
        <label>cstdio</label>
      </node>
      <node id="185745">
        <label>boost/python/tuple.hpp</label>
      </node>
      <node id="185800">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185801" relation="include">
        </childnode>
        <childnode refid="185802" relation="include">
        </childnode>
        <childnode refid="185754" relation="include">
        </childnode>
        <childnode refid="185805" relation="include">
        </childnode>
        <childnode refid="185807" relation="include">
        </childnode>
        <childnode refid="185804" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
      </node>
      <node id="185756">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185761" relation="include">
        </childnode>
      </node>
      <node id="185776">
        <label>vector</label>
      </node>
      <node id="185747">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="185737" relation="include">
        </childnode>
      </node>
      <node id="185828">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185823" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185784">
        <label>pxr/base/arch/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185766" relation="include">
        </childnode>
        <childnode refid="185738" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185785" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
        <childnode refid="185787" relation="include">
        </childnode>
        <childnode refid="185788" relation="include">
        </childnode>
      </node>
      <node id="185821">
        <label>boost/python/default_call_policies.hpp</label>
      </node>
      <node id="185829">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="185763">
        <label>utility</label>
      </node>
      <node id="185809">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185766" relation="include">
        </childnode>
        <childnode refid="185751" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
      </node>
      <node id="185799">
        <label>sstream</label>
      </node>
      <node id="185739">
        <label>boost/python/def_visitor.hpp</label>
      </node>
      <node id="185801">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185738">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="185753">
        <label>pxr/base/tf/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185754" relation="include">
        </childnode>
        <childnode refid="185764" relation="include">
        </childnode>
        <childnode refid="185777" relation="include">
        </childnode>
        <childnode refid="185780" relation="include">
        </childnode>
        <childnode refid="185783" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
        <childnode refid="185790" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185789">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185770">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185754" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185771" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185772" relation="include">
        </childnode>
        <childnode refid="185773" relation="include">
        </childnode>
        <childnode refid="185774" relation="include">
        </childnode>
        <childnode refid="185769" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
        <childnode refid="185763" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185762">
        <label>math.h</label>
      </node>
      <node id="185796">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185764" relation="include">
        </childnode>
        <childnode refid="185797" relation="include">
        </childnode>
        <childnode refid="185771" relation="include">
        </childnode>
        <childnode refid="185798" relation="include">
        </childnode>
        <childnode refid="185774" relation="include">
        </childnode>
        <childnode refid="185799" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185775" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
      </node>
      <node id="185822">
        <label>pxr/base/tf/pyUtils.h</label>
        <link refid="base_2tf_2py_utils_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185802" relation="include">
        </childnode>
        <childnode refid="185800" relation="include">
        </childnode>
        <childnode refid="185791" relation="include">
        </childnode>
        <childnode refid="185777" relation="include">
        </childnode>
        <childnode refid="185823" relation="include">
        </childnode>
        <childnode refid="185825" relation="include">
        </childnode>
        <childnode refid="185828" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185782" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
        <childnode refid="185776" relation="include">
        </childnode>
        <childnode refid="185740" relation="include">
        </childnode>
        <childnode refid="185829" relation="include">
        </childnode>
        <childnode refid="185826" relation="include">
        </childnode>
        <childnode refid="185827" relation="include">
        </childnode>
        <childnode refid="185830" relation="include">
        </childnode>
      </node>
      <node id="185779">
        <label>iosfwd</label>
      </node>
      <node id="185750">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185751" relation="include">
        </childnode>
        <childnode refid="185752" relation="include">
        </childnode>
      </node>
      <node id="185824">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="185804">
        <label>cstddef</label>
      </node>
      <node id="185814">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185815" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
      </node>
      <node id="185803">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185773" relation="include">
        </childnode>
      </node>
      <node id="185791">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185755" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185750" relation="include">
        </childnode>
        <childnode refid="185752" relation="include">
        </childnode>
      </node>
      <node id="185820">
        <label>pxr/base/tf/errorTransport.h</label>
        <link refid="error_transport_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185749" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
      </node>
      <node id="185746">
        <label>pxr/base/tf/pyError.h</label>
        <link refid="py_error_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185748" relation="include">
        </childnode>
        <childnode refid="185821" relation="include">
        </childnode>
      </node>
      <node id="185775">
        <label>type_traits</label>
      </node>
      <node id="185744">
        <label>boost/python/to_python_converter.hpp</label>
      </node>
      <node id="185774">
        <label>set</label>
      </node>
      <node id="185830">
        <label>boost/python/type_id.hpp</label>
      </node>
      <node id="185766">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="185737" relation="include">
        </childnode>
      </node>
      <node id="185742">
        <label>boost/python/raw_function.hpp</label>
      </node>
      <node id="185751">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="185738" relation="include">
        </childnode>
      </node>
      <node id="185785">
        <label>algorithm</label>
      </node>
      <node id="185771">
        <label>cstring</label>
      </node>
      <node id="185793">
        <label>pxr/base/tf/diagnosticBase.h</label>
        <link refid="diagnostic_base_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185750" relation="include">
        </childnode>
        <childnode refid="185764" relation="include">
        </childnode>
        <childnode refid="185794" relation="include">
        </childnode>
        <childnode refid="185796" relation="include">
        </childnode>
        <childnode refid="185800" relation="include">
        </childnode>
        <childnode refid="185757" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185809" relation="include">
        </childnode>
        <childnode refid="185812" relation="include">
        </childnode>
        <childnode refid="185797" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
      </node>
      <node id="185816">
        <label>pxr/base/tf/status.h</label>
        <link refid="status_8h_source"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185793" relation="include">
        </childnode>
      </node>
      <node id="185805">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185806" relation="include">
        </childnode>
        <childnode refid="185802" relation="include">
        </childnode>
        <childnode refid="185786" relation="include">
        </childnode>
      </node>
      <node id="185773">
        <label>memory</label>
      </node>
      <node id="185780">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185781" relation="include">
        </childnode>
        <childnode refid="185777" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185782" relation="include">
        </childnode>
        <childnode refid="185768" relation="include">
        </childnode>
      </node>
      <node id="185808">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="185735" relation="include">
        </childnode>
        <childnode refid="185809" relation="include">
        </childnode>
        <childnode refid="185791" relation="include">
        </childnode>
        <childnode refid="185747" relation="include">
        </childnode>
        <childnode refid="185789" relation="include">
        </childnode>
        <childnode refid="185810" relation="include">
        </childnode>
        <childnode refid="185752" relation="include">
        </childnode>
        <childnode refid="185813" relation="include">
        </childnode>
        <childnode refid="185767" relation="include">
        </childnode>
      </node>
      <node id="185769">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="structboost_1_1python_1_1pointee_3_011_1_1_sdf_handle_3_01_t_01_4_01_4" prot="public">boost::python::pointee&lt; 1::SdfHandle&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1python">boost::python</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="py_spec_8h_1a62858e01f6197598ffeafe0d37d386c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Sdf_PySpecDetail::NewVisitor&lt; typename Sdf_PySpecDetail::NewCtor&lt; T &gt; &gt;</type>
        <definition>Sdf_PySpecDetail::NewVisitor&lt;typename Sdf_PySpecDetail::NewCtor&lt;T&gt; &gt; SdfMakePySpecConstructor</definition>
        <argsstring>(T *func, const std::string &amp;doc=std::string())</argsstring>
        <name>SdfMakePySpecConstructor</name>
        <param>
          <type>T *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>doc</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pySpec.h" line="200" column="1" bodyfile="pxr/usd/sdf/pySpec.h" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="py_spec_8h_1a5917777cf2fbfb106156cf54bdab6b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Sdf_PySpecDetail::SpecVisitor&lt; false &gt;</type>
        <definition>Sdf_PySpecDetail::SpecVisitor&lt;false&gt; SdfPySpec</definition>
        <argsstring>()</argsstring>
        <name>SdfPySpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pySpec.h" line="445" column="1" bodyfile="pxr/usd/sdf/pySpec.h" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="py_spec_8h_1a4ecb460694177ae582dfd041a0d39337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Sdf_PySpecDetail::SpecVisitor&lt; true &gt;</type>
        <definition>Sdf_PySpecDetail::SpecVisitor&lt;true&gt; SdfPyAbstractSpec</definition>
        <argsstring>()</argsstring>
        <name>SdfPyAbstractSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pySpec.h" line="452" column="1" bodyfile="pxr/usd/sdf/pySpec.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="py_spec_8h_1aa77a6dd0db9e11c849d1ce9d3dc09aae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Sdf_PySpecDetail::SpecVisitor&lt; false &gt;</type>
        <definition>Sdf_PySpecDetail::SpecVisitor&lt;false&gt; SdfPySpecNoRepr</definition>
        <argsstring>()</argsstring>
        <name>SdfPySpecNoRepr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pySpec.h" line="459" column="1" bodyfile="pxr/usd/sdf/pySpec.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="py_spec_8h_1aa977c82fd8d4dd8e915fcc87cd894bf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Sdf_PySpecDetail::SpecVisitor&lt; true &gt;</type>
        <definition>Sdf_PySpecDetail::SpecVisitor&lt;true&gt; SdfPyAbstractSpecNoRepr</definition>
        <argsstring>()</argsstring>
        <name>SdfPyAbstractSpecNoRepr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pySpec.h" line="466" column="1" bodyfile="pxr/usd/sdf/pySpec.h" bodystart="466" bodyend="469"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> Python wrapping utilities. </para>
    </briefdescription>
    <detaileddescription>
<para>An <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> subclass is not the representation of scene data. An <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> simply provides an interface to data stored in some internal representation. <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> subclasses are value types and their lifetimes don&apos;t reflect the lifetime of the scene data. However, clients still create scene data using the New methods on <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> subclasses.</para>
<para>When wrapping to Python we need to wrap the New methods as the constructors. This used to look like this:</para>
<para><programlisting><codeline><highlight class="normal">class_&lt;MyClass,<sp/>MyClassHandle&gt;(&quot;MyClass&quot;,<sp/>no_init)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.def(TfPyRefAndWeakPtr())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.def(TfMakePyConstructor(&amp;MyClass::New))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
<para>But we can&apos;t use TfMakePyConstructor() because an <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> handle is not a weak pointer. Furthermore, we don&apos;t have the problem of needing to store a ref pointer in the Python object. But we do still need conversion of spec types to yield the most-derived type in python.</para>
<para>This file introduces a few boost::python::class_ def visitors to make wrapping specs easy. Spec wrapping should now look like:</para>
<para><programlisting><codeline><highlight class="normal">class_&lt;MyClass,<sp/>SdfHandle&lt;MyClass&gt;,<sp/>bases&lt;SdfSpec&gt;,<sp/>boost::noncopyable&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(&quot;MyClass&quot;,<sp/>no_init)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.def(SdfPySpec())<sp/><sp/>//<sp/>or<sp/>SdfPyAbstractSpec()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.def(SdfMakePySpecConstructor(&amp;MyClass::New))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
</programlisting></para>
<para>If you need a custom repr you can use SdfPySpecNoRepr() or SdfPyAbstractSpecNoRepr() and def(&quot;__repr__&quot;, ...). </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_SDF_PY_SPEC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_SDF_PY_SPEC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/sdf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/def_visitor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/dict.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/errors.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/raw_function.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/pointee.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/to_python_converter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2py_utils_8h" kindref="compound">pxr/base/tf/pyUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="declare_handles_8h" kindref="compound">pxr/usd/sdf/declareHandles.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tf_8h" kindref="compound">pxr/base/tf/tf.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2diagnostic_8h" kindref="compound">pxr/base/tf/diagnostic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">pxr/base/arch/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">python<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pointee&lt;PXR_NS::<ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Sdf_PySpecDetail<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bp<sp/>=<sp/>boost::python;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">SDF_API<sp/>bp::object<sp/>_DummyInit(bp::tuple<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*<sp/>args<sp/>*/</highlight><highlight class="normal">,<sp/>bp::dict<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*<sp/>kw<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CTOR&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewVisitor<sp/>:<sp/>bp::def_visitor&lt;NewVisitor&lt;CTOR&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>NewVisitor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())<sp/>:<sp/>_doc(doc)<sp/>{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS&amp;<sp/>c)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>already<sp/>a<sp/>__new__<sp/>method,<sp/>look<sp/>through<sp/>the<sp/>staticmethod<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>underlying<sp/>function,<sp/>replace<sp/>__new__<sp/>with<sp/>that,<sp/>then<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overload,<sp/>and<sp/>recreate<sp/>the<sp/>staticmethod.<sp/><sp/>This<sp/>is<sp/>required<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>python<sp/>needs<sp/>to<sp/>have<sp/>all<sp/>overloads<sp/>exported<sp/>before<sp/>you<sp/>say</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.staticmethod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>looks<sp/>like<sp/>this<sp/>should<sp/>do<sp/>nothing,<sp/>but<sp/>it<sp/>actually<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something!<sp/><sp/>Here&apos;s<sp/>what<sp/>it<sp/>does:<sp/>looking<sp/>up<sp/>__new__<sp/>on<sp/>c<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>produce<sp/>the<sp/>staticmethod<sp/>object<sp/>--<sp/>it<sp/>does<sp/>a<sp/>&quot;descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__get__&quot;<sp/>which<sp/>produces<sp/>the<sp/>underlying<sp/>function.<sp/><sp/>Replacing<sp/>__new__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>that<sp/>underlying<sp/>thing<sp/>has<sp/>the<sp/>effect<sp/>of<sp/>unwrapping<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staticmethod,<sp/>which<sp/>is<sp/>exactly<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_HasAttrString(c.ptr(),<sp/></highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">)<sp/>=<sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">,<sp/>CTOR::template<sp/>__new__&lt;CLS&gt;,<sp/>_doc.c_str());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.staticmethod(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>bp::raw_function(_DummyInit));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Options&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/>Options&amp;<sp/>options)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="139"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>already<sp/>a<sp/>__new__<sp/>method,<sp/>look<sp/>through<sp/>the<sp/>staticmethod<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>underlying<sp/>function,<sp/>replace<sp/>__new__<sp/>with<sp/>that,<sp/>then<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overload,<sp/>and<sp/>recreate<sp/>the<sp/>staticmethod.<sp/><sp/>This<sp/>is<sp/>required<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>python<sp/>needs<sp/>to<sp/>have<sp/>all<sp/>overloads<sp/>exported<sp/>before<sp/>you<sp/>say</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.staticmethod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>looks<sp/>like<sp/>this<sp/>should<sp/>do<sp/>nothing,<sp/>but<sp/>it<sp/>actually<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something!<sp/><sp/>Here&apos;s<sp/>what<sp/>it<sp/>does:<sp/>looking<sp/>up<sp/>__new__<sp/>on<sp/>c<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>produce<sp/>the<sp/>staticmethod<sp/>object<sp/>--<sp/>it<sp/>does<sp/>a<sp/>&quot;descriptor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__get__&quot;<sp/>which<sp/>produces<sp/>the<sp/>underlying<sp/>function.<sp/><sp/>Replacing<sp/>__new__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>that<sp/>underlying<sp/>thing<sp/>has<sp/>the<sp/>effect<sp/>of<sp/>unwrapping<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>staticmethod,<sp/>which<sp/>is<sp/>exactly<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_HasAttrString(c.ptr(),<sp/></highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">)<sp/>=<sp/>c.attr(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">,<sp/>CTOR::template<sp/>__new__&lt;CLS&gt;,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>we<sp/>ignore<sp/>options.doc()<sp/>in<sp/>favor<sp/>of<sp/>_doc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_doc.c_str(),</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.keywords(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.policies()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.staticmethod(</highlight><highlight class="stringliteral">&quot;__new__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__init__&quot;</highlight><highlight class="normal">,<sp/>bp::raw_function(_DummyInit));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>_doc;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bp::def_visitor_access;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CtorBase<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SIG<sp/>Sig;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Sig<sp/>*_func;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetFunc(Sig<sp/>*func)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>_func)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_func<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Ctor<sp/>with<sp/>signature<sp/>&apos;%s&apos;<sp/>is<sp/>already<sp/>registered.<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Duplicate<sp/>will<sp/>be<sp/>ignored.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Sig)).c_str());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/>SIG<sp/>*CtorBase&lt;SIG&gt;::_func<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SIG&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtor;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Sdf_PySpecDetail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">Sdf_PySpecDetail::NewVisitor&lt;typename<sp/>Sdf_PySpecDetail::NewCtor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">SdfMakePySpecConstructor(T<sp/>*func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;doc<sp/>=<sp/>std::string())</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>to<sp/>set<sp/>static<sp/>constructor<sp/>pointer,<sp/>then<sp/>return<sp/>the<sp/>visitor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Sdf_PySpecDetail::NewCtor&lt;T&gt;<sp/>Ctor(func);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sdf_PySpecDetail::NewVisitor&lt;Sdf_PySpecDetail::NewCtor&lt;T&gt;<sp/>&gt;(doc);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Sdf_PySpecDetail<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>repr<sp/>for<sp/>a<sp/>spec<sp/>using<sp/>Sdf.Find().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">SDF_API<sp/>std::string<sp/>_SpecRepr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::object&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref>*);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registration<sp/>for<sp/>spec<sp/>types<sp/>to<sp/>functions<sp/>to<sp/>create<sp/>a<sp/>holder<sp/>with<sp/>the<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>corresponding<sp/>to<sp/>the<sp/>spec<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject*<sp/>(*_HolderCreator)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref>&amp;);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">SDF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_RegisterHolderCreator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;,<sp/>_HolderCreator);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">SDF_API<sp/>PyObject*<sp/>_CreateHolder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref>&amp;);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_SpecType&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ConstHandleToPython<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_SpecType<sp/>SpecType;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_sdf_handle" kindref="compound">SdfHandle&lt;SpecType&gt;</ref><sp/>Handle;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_sdf_handle" kindref="compound">SdfHandle&lt;const SpecType&gt;</ref><sp/>ConstHandle;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>_ConstHandleToPython()<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::to_python_converter&lt;ConstHandle,<sp/>_ConstHandleToPython&lt;SpecType&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*convert(ConstHandle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::incref(bp::object(TfConst_cast&lt;Handle&gt;(p)).ptr());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Register<sp/>and<sp/>perform<sp/>python<sp/>conversions<sp/>of<sp/>SdfHandles<sp/>to<sp/>holders.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_SpecType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Held,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_Holder&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_HandleToPython<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_SpecType<sp/>SpecType;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Holder<sp/>Holder;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Held<sp/>Handle;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_HandleToPython&lt;SpecType,<sp/>Handle,<sp/>Holder&gt;<sp/>This;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Register()</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_originalConverter<sp/>=<sp/>_RegisterConverter&lt;Handle&gt;(&amp;This::_Convert);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_RegisterHolderCreator(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(SpecType),<sp/>&amp;This::_Creator);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Handle&amp;<sp/>x)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_CreateHolder(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(SpecType),<sp/>x.GetSpec());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>_Creator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref>&amp;<sp/>spec)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handle<sp/>x(Sdf_CastAccess::CastSpec&lt;SpecType,SdfSpec&gt;(spec));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bp::objects::make_ptr_instance&lt;SpecType,<sp/>Holder&gt;::execute(x);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>bp::converter::to_python_function_t</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>_RegisterConverter(bp::converter::to_python_function_t<sp/>f)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>old<sp/>converter,<sp/>installed<sp/>automatically<sp/>when<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>registered<sp/>the<sp/>class.<sp/><sp/>WBN<sp/>if<sp/>boost<sp/>python<sp/>let<sp/>us<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>playing<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::registration*<sp/>r<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;bp::converter::registration*&gt;(</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::registry::query(bp::type_id&lt;T&gt;()));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::to_python_function_t<sp/>old<sp/>=<sp/>r-&gt;m_to_python;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;m_to_python<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_OFF<sp/>Can<sp/>only<sp/>happen<sp/>if<sp/>there&apos;s<sp/>a<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>python<sp/>registration<sp/>for<sp/>&apos;%s&apos;!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Handle)).c_str());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>_Convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Handle&amp;<sp/>x<sp/>=<sp/>*static_cast&lt;const<sp/>Handle*&gt;(p);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_CreateHolder(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(SpecType),<sp/>x.GetSpec());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::converter::to_python_function_t<sp/>_originalConverter;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SpecType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Held,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Holder&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">bp::converter::to_python_function_t</highlight></codeline>
<codeline lineno="294"><highlight class="normal">_HandleToPython&lt;SpecType,<sp/>Held,<sp/>Holder&gt;::_originalConverter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>_SpecType&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_HandleFromPython<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_SpecType<sp/>SpecType;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_sdf_handle" kindref="compound">SdfHandle&lt;SpecType&gt;</ref><sp/>Handle;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>_HandleFromPython()</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::registry::insert(&amp;convertible,<sp/>&amp;construct,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::type_id&lt;Handle&gt;());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*convertible(PyObject<sp/>*p)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result<sp/>=</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::get_lvalue_from_python(p,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::registered&lt;SpecType&gt;::converters);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct(PyObject*<sp/>source,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::converter::rvalue_from_python_stage1_data*<sp/>data)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>storage<sp/>=</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((bp::converter::rvalue_from_python_storage&lt;Handle&gt;*)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data)-&gt;storage.bytes;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deal<sp/>with<sp/>the<sp/>&quot;None&quot;<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;convertible<sp/>==<sp/>source)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/>Handle();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/>Handle(*static_cast&lt;SpecType*&gt;(data-&gt;convertible));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;convertible<sp/>=<sp/>storage;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visitor<sp/>for<sp/>def().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Abstract&gt;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SpecVisitor<sp/>:<sp/>bp::def_visitor&lt;SpecVisitor&lt;Abstract&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Helper<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::wrapped_type<sp/>SpecType;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type_arg<sp/>HeldArgType;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::holder<sp/>HolderType;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>Repr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bp::object&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>held<sp/>=<sp/>bp::extract&lt;const<sp/>HeldType&amp;&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_SpecRepr(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>get_pointer(held));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsExpired(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>__hash__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="half_8h_1a46cd4803c1efd2558d7a291d7c288ab3" kindref="member">hash_value</ref>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__eq__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>==<sp/>b;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__ne__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>!=<sp/>b;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__lt__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__le__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;=<sp/>b;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__gt__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>b;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__ge__(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HeldType&amp;<sp/>b)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;=<sp/>b;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>SpecVisitor(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addRepr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:<sp/>_addRepr(addRepr)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS&amp;<sp/>c)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="403"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::wrapped_type<sp/>SpecType;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type_arg<sp/>HeldArgType;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::holder<sp/>HolderType;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;HeldType,<sp/><ref refid="class_sdf_handle" kindref="compound">SdfHandle&lt;SpecType&gt;</ref><sp/>&gt;::value,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;HeldType<sp/>must<sp/>be<sp/>SdfHandle&lt;SpecType&gt;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.add_property(</highlight><highlight class="stringliteral">&quot;expired&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::IsExpired);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__bool__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::IsValid);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__hash__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__hash__);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__eq__);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__ne__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__ne__);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__lt__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__lt__);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__le__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__le__);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__gt__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__gt__);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__ge__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::__ge__);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>python<sp/>conversion<sp/>to<sp/>cast<sp/>away<sp/>constness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ConstHandleToPython&lt;SpecType&gt;();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>python<sp/>conversion<sp/>for<sp/>SdfHandle&lt;SpecType&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_HandleFromPython&lt;SpecType&gt;();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_HandleFromPython&lt;const<sp/>SpecType&gt;();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_HandleToPython&lt;SpecType,<sp/>HeldArgType,<sp/>HolderType&gt;::Register();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>__repr__.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_addRepr)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,<sp/>&amp;_Helper&lt;CLS&gt;::Repr);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_addRepr;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Sdf_PySpecDetail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">Sdf_PySpecDetail::SpecVisitor&lt;false&gt;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">SdfPySpec()</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sdf_PySpecDetail::SpecVisitor&lt;false&gt;();</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">Sdf_PySpecDetail::SpecVisitor&lt;true&gt;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">SdfPyAbstractSpec()</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sdf_PySpecDetail::SpecVisitor&lt;true&gt;();</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">Sdf_PySpecDetail::SpecVisitor&lt;false&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">SdfPySpecNoRepr()</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sdf_PySpecDetail::SpecVisitor&lt;false&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">Sdf_PySpecDetail::SpecVisitor&lt;true&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">SdfPyAbstractSpecNoRepr()</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Sdf_PySpecDetail::SpecVisitor&lt;true&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Sdf_PySpecDetail</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generates<sp/>multi-argument<sp/>specializations<sp/>for<sp/>NewCtor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewCtor&lt;R(Args...)&gt;<sp/>:<sp/>CtorBase&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CtorBase&lt;R(Args...)&gt;<sp/>Base;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base::Sig<sp/>Sig;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>NewCtor(Sig<sp/>*func)<sp/>{<sp/>Base::SetFunc(func);<sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>bp::object<sp/>__new__(bp::object<sp/>&amp;cls,<sp/>Args...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type<sp/>HeldType;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_error_mark" kindref="compound">TfErrorMark</ref><sp/>m;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeldType<sp/>specHandle(Base::_func(args...));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TfPyConvertTfErrorsToPythonException(m))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::throw_error_already_set();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::object<sp/>result<sp/>=<sp/><ref refid="base_2tf_2py_utils_8h_1a6f2f19ff2808e6c89870e2ee61812185" kindref="member">TfPyObject</ref>(specHandle);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="base_2tf_2py_utils_8h_1a4b4188c0e93926173249aea201501853" kindref="member">TfPyIsNone</ref>(result))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base_2tf_2py_utils_8h_1a1e839ce3036c43e22fe18e08dbc43e09" kindref="member">TfPyThrowRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>construct<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(HeldType)));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::detail::initialize_wrapper(result.ptr(),<sp/>get_pointer(specHandle));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>object<sp/>have<sp/>the<sp/>right<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bp::setattr(result,<sp/></highlight><highlight class="stringliteral">&quot;__class__&quot;</highlight><highlight class="normal">,<sp/>cls);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal">};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Sdf_PySpecDetail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_SDF_PY_SPEC_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usd/sdf/pySpec.h"/>
  </compounddef>
</doxygen>
