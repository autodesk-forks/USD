<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_path_expression" kind="class" language="C++" prot="public">
    <compoundname>SdfPathExpression</compoundname>
    <includes refid="path_expression_8h" local="no">pathExpression.h</includes>
    <briefdescription>
<para>Objects of this class represent a logical expression syntax tree consisting of <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> matching patterns (with optionally embedded predicate expressions) joined by the set-algebraic operators &apos;+&apos; (union), &apos;&amp;&apos; (intersection), &apos;-&apos; (difference), &apos;~&apos; (complement) and an implied-union operator represented by two subexpressions joined by whitespace. </para>
    </briefdescription>
    <detaileddescription>
<para>An <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> can be constructed from a string, which will parse the string into an expression object. The syntax for an expression is as follows:</para>
<para>The fundamental building blocks are path patterns and expression references. A path pattern is similar to an <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, but it may contain glob-style wild-card characters, embedded brace-enclosed predicate expressions (see <ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref>) and &apos;//&apos; elements indicating arbitrary levels of prim hierarchy. For example, consider "/foo//bar </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/pathExpression.h" line="41" column="1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
