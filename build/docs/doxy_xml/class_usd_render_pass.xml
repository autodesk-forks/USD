<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_render_pass" kind="class" language="C++" prot="public">
    <compoundname>UsdRenderPass</compoundname>
    <basecompoundref refid="class_usd_typed" prot="public" virt="non-virtual">UsdTyped</basecompoundref>
    <includes refid="pass_8h" local="no">pass.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_render_pass_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="95" column="1" bodyfile="pxr/usd/usdRender/pass.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_render_pass_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="173" column="1" bodyfile="pxr/usd/usdRender/pass.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_render_pass_1aa4fb49d56e988b1b0be4518391d1f0a0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRenderPass</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdRenderPass</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_render_pass_1a0ff11b6b214e177d8d551f55ab6f34fc" kindref="member">UsdRenderPass::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="101" column="1" bodyfile="pxr/usd/usdRender/pass.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1ae1f8016fa4c03a3b35b338157d3375f6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdRenderPass</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdRenderPass</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="109" column="1" bodyfile="pxr/usd/usdRender/pass.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a91cd8d0b7f26ec119540c984a4a8dcca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API</type>
        <definition>virtual USDRENDER_API ~UsdRenderPass</definition>
        <argsstring>()</argsstring>
        <name>~UsdRenderPass</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1ae77e264903869ff517af847f3f7822bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetPassTypeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetPassTypeAttr</name>
        <briefdescription>
<para>A string used to categorize differently structured or executed types of passes within a customized pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, when multiple DCC&apos;s (e.g. Houdini, Katana, Nuke) each compute and contribute different Products to a final result, it may be clearest and most flexible to create a separate RenderPass for each.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token passType</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1ae85bfa80b53c3b292dcd9daddb781ea5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreatePassTypeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreatePassTypeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1ae77e264903869ff517af847f3f7822bc" kindref="member">GetPassTypeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a5ccd753c6f706e0f160f6b6c8b89976c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetCommandAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCommandAttr</name>
        <briefdescription>
<para>The command to run in order to generate renders for this pass. </para>
        </briefdescription>
        <detaileddescription>
<para>The job submission code can use this to properly send tasks to the job scheduling software that will generate products.</para>
<para>The command can contain variables that will be substituted appropriately during submission, as seen in the example below with {fileName}.</para>
<para>For example: command[0] = &quot;prman&quot; command[1] = &quot;-progress&quot; command[2] = &quot;-pixelvariance&quot; command[3] = &quot;-0.15&quot; command[4] = &quot;{fileName}&quot; # the fileName property will be substituted</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform string[] command</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>VtArray&lt;std::string&gt;   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;StringArray   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1af81960c4b675e4f6b49610913c3dcd31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateCommandAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCommandAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1a5ccd753c6f706e0f160f6b6c8b89976c" kindref="member">GetCommandAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a2c478972651120527026d0f873084710" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetFileNameAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetFileNameAttr</name>
        <briefdescription>
<para>The asset that contains the rendering prims or other information needed to render this pass. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform asset fileName</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Asset   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1af1bc03c80de10f066cf7f7119ef4b2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateFileNameAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateFileNameAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1a2c478972651120527026d0f873084710" kindref="member">GetFileNameAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a2ae98caaf1a601ba3526c4dd850e3db0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute GetDenoiseEnableAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetDenoiseEnableAttr</name>
        <briefdescription>
<para>When True, this Pass pass should be denoised. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform bool denoise:enable = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a18d1df83126b860cfa3e9e4788da1d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDRENDER_API UsdAttribute CreateDenoiseEnableAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateDenoiseEnableAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1a2ae98caaf1a601ba3526c4dd850e3db0" kindref="member">GetDenoiseEnableAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1aac15cd9f12a47a35d03fce992cd85924" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship GetRenderSourceRel</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderSourceRel</name>
        <briefdescription>
<para>The source prim to render from. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>fileName</emphasis> is not present, the source is assumed to be a RenderSettings prim present in the current Usd stage. If fileName is present, the source should be found in the file there. This relationship might target a string attribute on this or another prim that identifies the appropriate object in the external container.</para>
<para>For example, for a Usd-backed pass, this would point to a RenderSettings prim. Houdini passes would point to a Rop. Nuke passes would point to a write node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a6c591a0088816f096f6fe898120e3c94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship CreateRenderSourceRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateRenderSourceRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1aac15cd9f12a47a35d03fce992cd85924" kindref="member">GetRenderSourceRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1aa2d40f79dee80e8d5695588a9593db30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship GetInputPassesRel</definition>
        <argsstring>() const</argsstring>
        <name>GetInputPassesRel</name>
        <briefdescription>
<para>The set of other Passes that this Pass depends on in order to be constructed properly. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, a Pass A may generate a texture, which is then used as an input to Pass B.</para>
<para>By default, usdRender makes some assumptions about the relationship between this prim and the prims listed in inputPasses. Namely, when per-frame tasks are generated from these pass prims, usdRender will assume a one-to-one relationship between tasks that share their frame number. Consider a pass named &apos;composite&apos; whose <emphasis>inputPasses</emphasis> targets a Pass prim named &apos;beauty`.</para>
<para>By default, each frame for &apos;composite&apos; will depend on the same frame from &apos;beauty&apos;: beauty.1 -&gt; composite.1 beauty.2 -&gt; composite.2 etc</para>
<para>The consumer of this RenderPass graph of inputs will need to resolve the transitive dependencies. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1abaa8a20da56dc8b1612472a2513ad376" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship CreateInputPassesRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateInputPassesRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1aa2d40f79dee80e8d5695588a9593db30" kindref="member">GetInputPassesRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1afc4c0ce2e91cdea1e1e3f2359be5ed78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship GetDenoisePassRel</definition>
        <argsstring>() const</argsstring>
        <name>GetDenoisePassRel</name>
        <briefdescription>
<para>The The <ref refid="class_usd_render_denoise_pass" kindref="compound">UsdRenderDenoisePass</ref> prim from which to source denoise settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1afd6836c8e4c59f6b29e6edb88beacfcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDRENDER_API UsdRelationship CreateDenoisePassRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateDenoisePassRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_render_pass_1afc4c0ce2e91cdea1e1e3f2359be5ed78" kindref="member">GetDenoisePassRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1afa8281fad42fd5327da07df679628d60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>USDRENDER_API UsdCollectionAPI GetRenderVisibilityCollectionAPI</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderVisibilityCollectionAPI</name>
        <briefdescription>
<para>Return the <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> interface used for examining and modifying the render visibility of this prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="389" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_render_pass_1a213b41b80903043bb63cfba685831205" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDRENDER_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a0ff11b6b214e177d8d551f55ab6f34fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref></type>
        <definition>static USDRENDER_API UsdRenderPass Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdRenderPass(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1a877569b6070694f319ec40d667ce5b17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API <ref refid="class_usd_render_pass" kindref="compound">UsdRenderPass</ref></type>
        <definition>static USDRENDER_API UsdRenderPass Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_render_pass_1ab337deeefb883bb6bcb563c6c7c9e1fd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDRENDER_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_typed_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_render_pass_1a843b95ad9d64c52fc862cd569bc623be" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDRENDER_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDRENDER_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_render_pass_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="177" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_render_pass_1a6fb6bc8e96b6a96303733398a432ee9f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDRENDER_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDRENDER_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_typed_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdRender/pass.h" line="181" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A RenderPass prim encapsulates the necessary information to generate multipass renders. </para>
    </briefdescription>
    <detaileddescription>
<para>It houses properties for generating dependencies and the necessary commands to run to generate renders, as well as visibility controls for the scene. While RenderSettings describes the information needed to generate images from a single invocation of a renderer, RenderPass describes the additional information needed to generate a time varying set of images.</para>
<para>There are two consumers of RenderPass prims - a runtime executable that generates images from usdRender prims, and pipeline specific code that translates between usdRender prims and the pipeline&apos;s resource scheduling software. We&apos;ll refer to the latter as &apos;job submission code&apos;.</para>
<para><anchor id="class_usd_render_pass_1usdRender_renderVisibility"/>The objects that are relevant to the render is specified via the renderVisibility collection (<ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>) and can be accessed via <ref refid="class_usd_render_pass_1afa8281fad42fd5327da07df679628d60" kindref="member">GetRenderVisibilityCollectionAPI()</ref>. This collection has includeRoot set to true so that all objects participate in the render by default. To render only a specific set of objects, there are two options. One is to modify the collection paths to explicitly exclude objects that don&apos;t participate in the render, assuming it is known; the other option is to set includeRoot to false and explicitly include the desired objects. These are complementary approaches that may each be preferable depending on the scenario.</para>
<para>The name of the prim is used as the pass&apos;s name.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_render_2tokens_8h_1a0839e25f1ba9d721171eb25ab7a911b0" kindref="member">UsdRenderTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdRenderTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7923">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7924">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7922">
        <label>UsdRenderPass</label>
        <link refid="class_usd_render_pass"/>
        <childnode refid="7923" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7926">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7927" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7927">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7925">
        <label>UsdRenderPass</label>
        <link refid="class_usd_render_pass"/>
        <childnode refid="7926" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdRender/pass.h" line="90" column="1" bodyfile="pxr/usd/usdRender/pass.h" bodystart="89" bodyend="390"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdRenderPass</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_render_pass_1ab337deeefb883bb6bcb563c6c7c9e1fd" prot="protected" virt="virtual"><scope>UsdRenderPass</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdRenderPass</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_render_pass_1a843b95ad9d64c52fc862cd569bc623be" prot="private" virt="non-virtual"><scope>UsdRenderPass</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_render_pass_1a6fb6bc8e96b6a96303733398a432ee9f" prot="private" virt="virtual"><scope>UsdRenderPass</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdRenderPass</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdRenderPass</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_render_pass_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdRenderPass</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_render_pass_1af81960c4b675e4f6b49610913c3dcd31" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateCommandAttr</name></member>
      <member refid="class_usd_render_pass_1a18d1df83126b860cfa3e9e4788da1d2d" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateDenoiseEnableAttr</name></member>
      <member refid="class_usd_render_pass_1afd6836c8e4c59f6b29e6edb88beacfcd" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateDenoisePassRel</name></member>
      <member refid="class_usd_render_pass_1af1bc03c80de10f066cf7f7119ef4b2fd" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateFileNameAttr</name></member>
      <member refid="class_usd_render_pass_1abaa8a20da56dc8b1612472a2513ad376" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateInputPassesRel</name></member>
      <member refid="class_usd_render_pass_1ae85bfa80b53c3b292dcd9daddb781ea5" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreatePassTypeAttr</name></member>
      <member refid="class_usd_render_pass_1a6c591a0088816f096f6fe898120e3c94" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>CreateRenderSourceRel</name></member>
      <member refid="class_usd_render_pass_1a877569b6070694f319ec40d667ce5b17" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>Define</name></member>
      <member refid="class_usd_render_pass_1a0ff11b6b214e177d8d551f55ab6f34fc" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>Get</name></member>
      <member refid="class_usd_render_pass_1a5ccd753c6f706e0f160f6b6c8b89976c" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetCommandAttr</name></member>
      <member refid="class_usd_render_pass_1a2ae98caaf1a601ba3526c4dd850e3db0" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetDenoiseEnableAttr</name></member>
      <member refid="class_usd_render_pass_1afc4c0ce2e91cdea1e1e3f2359be5ed78" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetDenoisePassRel</name></member>
      <member refid="class_usd_render_pass_1a2c478972651120527026d0f873084710" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetFileNameAttr</name></member>
      <member refid="class_usd_render_pass_1aa2d40f79dee80e8d5695588a9593db30" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetInputPassesRel</name></member>
      <member refid="class_usd_render_pass_1ae77e264903869ff517af847f3f7822bc" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetPassTypeAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetPrim</name></member>
      <member refid="class_usd_render_pass_1aac15cd9f12a47a35d03fce992cd85924" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetRenderSourceRel</name></member>
      <member refid="class_usd_render_pass_1afa8281fad42fd5327da07df679628d60" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetRenderVisibilityCollectionAPI</name></member>
      <member refid="class_usd_render_pass_1a213b41b80903043bb63cfba685831205" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>operator bool</name></member>
      <member refid="class_usd_render_pass_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>schemaKind</name></member>
      <member refid="class_usd_render_pass_1aa4fb49d56e988b1b0be4518391d1f0a0" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdRenderPass</name></member>
      <member refid="class_usd_render_pass_1ae1f8016fa4c03a3b35b338157d3375f6" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdRenderPass</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_render_pass_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdRenderPass</scope><name>UsdTyped</name></member>
      <member refid="class_usd_render_pass_1a91cd8d0b7f26ec119540c984a4a8dcca" prot="public" virt="virtual"><scope>UsdRenderPass</scope><name>~UsdRenderPass</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdRenderPass</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdRenderPass</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
