<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_allowed" kind="class" language="C++" prot="public">
    <compoundname>SdfAllowed</compoundname>
    <includes refid="allowed_8h" local="no">allowed.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_sdf_allowed_1a821501ff821d02b5d70eccface47c839" prot="private" static="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>typedef boost::optional&lt;std::string&gt; _State</definition>
        <argsstring></argsstring>
        <name>_State</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="48" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_allowed_1ac1a2306d4d82e5b8f0bba9a6859e7a04" prot="public" static="no">
        <type>std::pair&lt; bool, std::string &gt;</type>
        <definition>typedef std::pair&lt;bool, std::string&gt; Pair</definition>
        <argsstring></argsstring>
        <name>Pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="51" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_allowed_1a23a700e1ca70ae09488de4da138f1fdc" prot="private" static="no" mutable="no">
        <type>_State</type>
        <definition>_State _state</definition>
        <argsstring></argsstring>
        <name>_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="121" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_allowed_1a0fab1ba78a6b5d8af17fa5737a274d9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>()</argsstring>
        <name>SdfAllowed</name>
        <briefdescription>
<para>Construct <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="54" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a3c6ef5bfa12b48aecbea21e37330a5e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(bool x)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>bool</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct <computeroutput>true</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="56" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1aae370c0c49a267309a15aace07ce50c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(const char *whyNot)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>const char *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Construct <computeroutput>false</computeroutput> with annotation <computeroutput>whyNot</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="58" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a95804bdfbb6f3424e0df93fc14303eb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(const std::string &amp;whyNot)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Construct <computeroutput>false</computeroutput> with annotation <computeroutput>whyNot</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="60" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a6a7e0b076a409d7ffc76dfb8d7d46fff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(bool condition, const char *whyNot)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Construct in <computeroutput>condition</computeroutput> with annotation <computeroutput>whyNot</computeroutput> if <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="62" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1ac495e379d54ad16be9eb07232ae8bb05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(bool condition, const std::string &amp;whyNot)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Construct in <computeroutput>condition</computeroutput> with annotation <computeroutput>whyNot</computeroutput> if <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="65" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a38028d6455376dbc974c2ffb4efdb100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfAllowed</definition>
        <argsstring>(const Pair &amp;x)</argsstring>
        <name>SdfAllowed</name>
        <param>
          <type>const Pair &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Construct from bool,string pair <computeroutput>x</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="68" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1af6b5c1dbd427a15331ed0014210a8601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~SdfAllowed</definition>
        <argsstring>()</argsstring>
        <name>~SdfAllowed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="69" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator UnspecifiedBoolType</definition>
        <argsstring>() const</argsstring>
        <name>operator UnspecifiedBoolType</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> in a boolean context if allowed, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="76" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a61efd4196a96540ee018fee8791f3f10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Returns <computeroutput>false</computeroutput> in a boolean context if allowed, <computeroutput>true</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="82" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1ac91ebb8fe9956bbc1dfa3a22c9012235" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator const std::string &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator const std::string &amp;</name>
        <briefdescription>
<para>Returns the reason why the operation is not allowed. </para>
        </briefdescription>
        <detaileddescription>
<para>If the operation is allowed this returns the empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="89" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1af83a75ca511f343d4591eb1e0824312b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetWhyNot</definition>
        <argsstring>() const</argsstring>
        <name>GetWhyNot</name>
        <briefdescription>
<para>Returns the reason why the operation is not allowed. </para>
        </briefdescription>
        <detaileddescription>
<para>If the operation is allowed this returns the empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a1062cff328c589d4d5fa2031f3ed3b12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsAllowed</definition>
        <argsstring>(std::string *whyNot) const</argsstring>
        <name>IsAllowed</name>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if allowed, otherwise fills <computeroutput>whyNot</computeroutput> if not <computeroutput>NULL</computeroutput> and returns <computeroutput>false</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="100" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a457d87991774a899bca1a83f6e5606b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const SdfAllowed &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare to <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if both are <computeroutput>true</computeroutput> or both are <computeroutput>false</computeroutput> and reasons why not are identical. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="110" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_allowed_1a98b707a5f882d88532cfaa806ae16c15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfAllowed &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/allowed.h" line="115" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="115" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Indicates if an operation is allowed and, if not, why not. </para>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></computeroutput> either evaluates to <computeroutput>true</computeroutput> in a boolean context or evaluates to <computeroutput>false</computeroutput> and has a string annotation. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/allowed.h" line="46" column="1" bodyfile="pxr/usd/sdf/allowed.h" bodystart="46" bodyend="122"/>
    <listofallmembers>
      <member refid="class_sdf_allowed_1a821501ff821d02b5d70eccface47c839" prot="private" virt="non-virtual"><scope>SdfAllowed</scope><name>_State</name></member>
      <member refid="class_sdf_allowed_1a23a700e1ca70ae09488de4da138f1fdc" prot="private" virt="non-virtual"><scope>SdfAllowed</scope><name>_state</name></member>
      <member refid="class_sdf_allowed_1af83a75ca511f343d4591eb1e0824312b" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>GetWhyNot</name></member>
      <member refid="class_sdf_allowed_1a1062cff328c589d4d5fa2031f3ed3b12" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>IsAllowed</name></member>
      <member refid="class_sdf_allowed_1ac91ebb8fe9956bbc1dfa3a22c9012235" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>operator const std::string &amp;</name></member>
      <member refid="class_sdf_allowed_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>operator UnspecifiedBoolType</name></member>
      <member refid="class_sdf_allowed_1a61efd4196a96540ee018fee8791f3f10" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>operator!</name></member>
      <member refid="class_sdf_allowed_1a98b707a5f882d88532cfaa806ae16c15" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>operator!=</name></member>
      <member refid="class_sdf_allowed_1a457d87991774a899bca1a83f6e5606b1" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>operator==</name></member>
      <member refid="class_sdf_allowed_1ac1a2306d4d82e5b8f0bba9a6859e7a04" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>Pair</name></member>
      <member refid="class_sdf_allowed_1a0fab1ba78a6b5d8af17fa5737a274d9e" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1a3c6ef5bfa12b48aecbea21e37330a5e4" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1aae370c0c49a267309a15aace07ce50c5" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1a95804bdfbb6f3424e0df93fc14303eb8" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1a6a7e0b076a409d7ffc76dfb8d7d46fff" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1ac495e379d54ad16be9eb07232ae8bb05" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1a38028d6455376dbc974c2ffb4efdb100" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>SdfAllowed</name></member>
      <member refid="class_sdf_allowed_1af6b5c1dbd427a15331ed0014210a8601" prot="public" virt="non-virtual"><scope>SdfAllowed</scope><name>~SdfAllowed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
