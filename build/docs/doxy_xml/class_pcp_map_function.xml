<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_map_function" kind="class" language="C++" prot="public">
    <compoundname>PcpMapFunction</compoundname>
    <includes refid="map_function_8h" local="no">mapFunction.h</includes>
    <innerclass refid="struct_pcp_map_function_1_1___data" prot="private">PcpMapFunction::_Data</innerclass>
    <innerclass refid="union_pcp_map_function_1_1___data_8____unnamed____" prot="public">PcpMapFunction::_Data.__unnamed__</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_map_function_1aa5a61a41bdea2c241a4c3ca2ef92bfcd" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, SdfPath::FastLessThan &gt;</type>
        <definition>typedef std::map&lt;SdfPath, SdfPath, SdfPath::FastLessThan&gt; PathMap</definition>
        <argsstring></argsstring>
        <name>PathMap</name>
        <briefdescription>
<para>A mapping from path to path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="85" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_map_function_1ad2361dcef0d6c89864842539b9db291d" prot="public" static="no">
        <type>std::pair&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &gt;</type>
        <definition>typedef std::pair&lt;SdfPath, SdfPath&gt; PathPair</definition>
        <argsstring></argsstring>
        <name>PathPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="86" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_map_function_1adf41e6f81a51ea2bc96a23c1c03d0c92" prot="public" static="no">
        <type>std::vector&lt; PathPair &gt;</type>
        <definition>typedef std::vector&lt;PathPair&gt; PathPairVector</definition>
        <argsstring></argsstring>
        <name>PathPairVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="87" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_pcp_map_function_1ab319c856c5593fef4fb56df6645118e1" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int _MaxLocalPairs</definition>
        <argsstring></argsstring>
        <name>_MaxLocalPairs</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="254" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_map_function_1a34bb36a4f0d0e6ccac49faaa798ed26f" prot="private" static="no" mutable="no">
        <type>_Data</type>
        <definition>_Data _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="373" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_map_function_1a9a50b3962d1518b877c761755d98c5f0" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SdfLayerOffset _offset</definition>
        <argsstring></argsstring>
        <name>_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="374" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_map_function_1a8daa0689921d038a9ac23bc847c10ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PcpMapFunction</definition>
        <argsstring>()=default</argsstring>
        <name>PcpMapFunction</name>
        <briefdescription>
<para>Construct a null function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a1ac5ce505d3f9c0398a7b009b9f1530d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void Swap</definition>
        <argsstring>(PcpMapFunction &amp;map)</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this map function with <computeroutput>map</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a6f017efb6acae58eb3e7b242640e5690" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(PcpMapFunction &amp;map)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="114" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1ae1b591785e8d874df12b2e75aedac68b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator==</definition>
        <argsstring>(const PcpMapFunction &amp;map) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a9f8bf539ffebf7215af7d6a57df73a4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator!=</definition>
        <argsstring>(const PcpMapFunction &amp;map) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
<para>Inequality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1af3873c7231b7d7075d2f37dddbe26629" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsNull</definition>
        <argsstring>() const</argsstring>
        <name>IsNull</name>
        <briefdescription>
<para>Return true if this map function is the null function. </para>
        </briefdescription>
        <detaileddescription>
<para>For a null function, <ref refid="class_pcp_map_function_1a517c37a14bf2c8412836ede455adb5c1" kindref="member">MapSourceToTarget()</ref> always returns an empty path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a56f4c15babb0622984d8d1410aaa70a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsIdentity</definition>
        <argsstring>() const</argsstring>
        <name>IsIdentity</name>
        <briefdescription>
<para>Return true if the map function is the identity function. </para>
        </briefdescription>
        <detaileddescription>
<para>The identity function has an identity path mapping and time offset. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1ad7119f36346e0d3ecd8baf2a83eee987" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsIdentityPathMapping</definition>
        <argsstring>() const</argsstring>
        <name>IsIdentityPathMapping</name>
        <briefdescription>
<para>Return true if the map function uses the identity path mapping. </para>
        </briefdescription>
        <detaileddescription>
<para>If true, <ref refid="class_pcp_map_function_1a517c37a14bf2c8412836ede455adb5c1" kindref="member">MapSourceToTarget()</ref> always returns the path unchanged. However, this map function may have a non-identity time offset. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a5307b27d7e4bf0da9b4d73195bd9c4ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasRootIdentity</definition>
        <argsstring>() const</argsstring>
        <name>HasRootIdentity</name>
        <briefdescription>
<para>Return true if the map function maps the absolute root path to the absolute root path, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="142" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a517c37a14bf2c8412836ede455adb5c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>PCP_API SdfPath MapSourceToTarget</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>MapSourceToTarget</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Map a path in the source namespace to the target. </para>
        </briefdescription>
        <detaileddescription>
<para>If the path is not in the domain, returns an empty path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a9aef0054e2ea858f5a9ceee469a4458a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>PCP_API SdfPath MapTargetToSource</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>MapTargetToSource</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Map a path in the target namespace to the source. </para>
        </briefdescription>
        <detaileddescription>
<para>If the path is not in the co-domain, returns an empty path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a7126cf5696aedccaed2c5dd41c569108" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
        <definition>PCP_API SdfPathExpression MapSourceToTarget</definition>
        <argsstring>(const SdfPathExpression &amp;pathExpr, std::vector&lt; SdfPathExpression::PathPattern &gt; *unmappedPatterns=nullptr, std::vector&lt; SdfPathExpression::ExpressionReference &gt; *unmappedRefs=nullptr) const</argsstring>
        <name>MapSourceToTarget</name>
        <param>
          <type>const <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> &amp;</type>
          <declname>pathExpr</declname>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::PathPattern &gt; *</type>
          <declname>unmappedPatterns</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::ExpressionReference &gt; *</type>
          <declname>unmappedRefs</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Map all path pattern prefix paths and expression reference paths in the source namespace to the target. </para>
        </briefdescription>
        <detaileddescription>
<para>For any references or patterns with prefix paths that are not in the domain, replace with an SdfPathPattern::Nothing() subexpression, to be simplified.</para>
<para>For example, if the mapping specifies /Foo -&gt; /World/Foo_1, and the expression is &apos;/Foo/Bar//Baz + /Something/Else//Entirely&apos;, the resulting expression will be &apos;/World/Foo_1/Bar//Baz&apos;, since the /Something/Else prefix is outside the domain.</para>
<para>If <computeroutput>excludedPatterns</computeroutput> and/or <computeroutput>excludedReferences</computeroutput> are supplied, they are populated with those patterns &amp; references that could not be translated and were replaced with SdfPathPattern::Nothing(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a263a940d85ec63cc7a0bef8a5698292b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
        <definition>PCP_API SdfPathExpression MapTargetToSource</definition>
        <argsstring>(const SdfPathExpression &amp;pathExpr, std::vector&lt; SdfPathExpression::PathPattern &gt; *unmappedPatterns=nullptr, std::vector&lt; SdfPathExpression::ExpressionReference &gt; *unmappedRefs=nullptr) const</argsstring>
        <name>MapTargetToSource</name>
        <param>
          <type>const <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> &amp;</type>
          <declname>pathExpr</declname>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::PathPattern &gt; *</type>
          <declname>unmappedPatterns</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::ExpressionReference &gt; *</type>
          <declname>unmappedRefs</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Map all path pattern prefix paths and expression reference paths in the target namespace to the source. </para>
        </briefdescription>
        <detaileddescription>
<para>For any references or patterns with prefix paths that are not in the co-domain, replace with an SdfPathPattern::Nothing() subexpression, to be simplified.</para>
<para>For example, if the mapping specifies /World/Foo_1 -&gt; /Foo, and the expression is &apos;/World/Foo_1/Bar//Baz + /World/Bar//&apos;, the resulting expression will be &apos;/Foo/Bar//Baz&apos;, since the /World/Bar prefix is outside the co-domain.</para>
<para>If <computeroutput>excludedPatterns</computeroutput> and/or <computeroutput>excludedReferences</computeroutput> are supplied, they are populated with those patterns &amp; references that could not be translated and were replaced with SdfPathPattern::Nothing(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1ad4138392d5099973351bb5ac19d5aa8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref></type>
        <definition>PCP_API PcpMapFunction Compose</definition>
        <argsstring>(const PcpMapFunction &amp;f) const</argsstring>
        <name>Compose</name>
        <param>
          <type>const <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Compose this map over the given map function. </para>
        </briefdescription>
        <detaileddescription>
<para>The result will represent the application of f followed by the application of this function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1abefa3c59abcf52e0020fecf18cbef223" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref></type>
        <definition>PCP_API PcpMapFunction ComposeOffset</definition>
        <argsstring>(const SdfLayerOffset &amp;newOffset) const</argsstring>
        <name>ComposeOffset</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>newOffset</declname>
        </param>
        <briefdescription>
<para>Compose this map function over a hypothetical map function that has an identity path mapping and <computeroutput>offset</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to building such a map function and invoking <ref refid="class_pcp_map_function_1ad4138392d5099973351bb5ac19d5aa8b" kindref="member">Compose()</ref>, but is faster. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1ad04053267fd79a637116d7b3d432fe4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref></type>
        <definition>PCP_API PcpMapFunction GetInverse</definition>
        <argsstring>() const</argsstring>
        <name>GetInverse</name>
        <briefdescription>
<para>Return the inverse of this map function. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns a true inverse <computeroutput>inv:</computeroutput> for any path p in this function&apos;s domain that it maps to p&apos;, inv(p&apos;) -&gt; p. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1af99302b54721f70402f7107d19799f21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_function_1aa5a61a41bdea2c241a4c3ca2ef92bfcd" kindref="member">PathMap</ref></type>
        <definition>PCP_API PathMap GetSourceToTargetMap</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceToTargetMap</name>
        <briefdescription>
<para>The set of path mappings, from source to target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a8113b7544dcabb159bc75671a5197ed0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
        <definition>const SdfLayerOffset&amp; GetTimeOffset</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeOffset</name>
        <briefdescription>
<para>The time offset of the mapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="223" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a771051ad27e94c42008b9631a1fc102a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API std::string</type>
        <definition>PCP_API std::string GetString</definition>
        <argsstring>() const</argsstring>
        <name>GetString</name>
        <briefdescription>
<para>Returns a string representation of this mapping for debugging purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a6f9ac6edfcc7117909418b3eadd3b797" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API size_t</type>
        <definition>PCP_API size_t Hash</definition>
        <argsstring>() const</argsstring>
        <name>Hash</name>
        <briefdescription>
<para>Return a size_t hash for this map function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="232" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_pcp_map_function_1a19f1e74bfdc3162e464edcfa98d9ebd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref></type>
        <definition>static PCP_API PcpMapFunction Create</definition>
        <argsstring>(const PathMap &amp;sourceToTargetMap, const SdfLayerOffset &amp;offset)</argsstring>
        <name>Create</name>
        <param>
          <type>const <ref refid="class_pcp_map_function_1aa5a61a41bdea2c241a4c3ca2ef92bfcd" kindref="member">PathMap</ref> &amp;</type>
          <declname>sourceToTargetMap</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Constructs a map function with the given arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a null map function on error (see <ref refid="class_pcp_map_function_1af3873c7231b7d7075d2f37dddbe26629" kindref="member">IsNull()</ref>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourceToTargetMap</parametername>
</parameternamelist>
<parameterdescription>
<para>The map from source paths to target paths. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The time offset to apply from source to target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a8cac88e657aab74c7c1e93ed88a33a91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
        <definition>static PCP_API const PcpMapFunction&amp; Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
<para>Construct an identity map function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a0899753655a62da8127bc14949d185e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_map_function_1aa5a61a41bdea2c241a4c3ca2ef92bfcd" kindref="member">PathMap</ref> &amp;</type>
        <definition>static PCP_API const PathMap&amp; IdentityPathMap</definition>
        <argsstring>()</argsstring>
        <name>IdentityPathMap</name>
        <briefdescription>
<para>Returns an identity path mapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="109" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_map_function_1a5f2d99c973763286291155bf6af9f03c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpMapFunction</definition>
        <argsstring>(PathPair const *sourceToTargetBegin, PathPair const *sourceToTargetEnd, SdfLayerOffset offset, bool hasRootIdentity)</argsstring>
        <name>PcpMapFunction</name>
        <param>
          <type>PathPair const *</type>
          <declname>sourceToTargetBegin</declname>
        </param>
        <param>
          <type>PathPair const *</type>
          <declname>sourceToTargetEnd</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasRootIdentity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_map_function_1a955eab8a2f2346866f2de75976a67d6d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
        <definition>PCP_API SdfPathExpression _MapPathExpressionImpl</definition>
        <argsstring>(bool invert, const SdfPathExpression &amp;pathExpr, std::vector&lt; SdfPathExpression::PathPattern &gt; *unmappedPatterns, std::vector&lt; SdfPathExpression::ExpressionReference &gt; *unmappedRefs) const</argsstring>
        <name>_MapPathExpressionImpl</name>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> &amp;</type>
          <declname>pathExpr</declname>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::PathPattern &gt; *</type>
          <declname>unmappedPatterns</declname>
        </param>
        <param>
          <type>std::vector&lt; SdfPathExpression::ExpressionReference &gt; *</type>
          <declname>unmappedRefs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="244" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_map_function_1acd18821661a699941c6624a4d682335f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const PcpMapFunction &amp;x)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/mapFunction.h" line="368" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="368" bodyend="371"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A function that maps values from one namespace (and time domain) to another. </para>
    </briefdescription>
    <detaileddescription>
<para>It represents the transformation that an arc such as a reference arc applies as it incorporates values across the arc.</para>
<para>Take the example of a reference arc, where a source path &lt;/Model&gt; is referenced as a target path, &lt;/Model_1&gt;. The source path &lt;/Model&gt; is the source of the opinions; the target path &lt;/Model_1&gt; is where they are incorporated in the scene. Values in the model that refer to paths relative to &lt;/Model&gt; must be transformed to be relative to &lt;/Model_1&gt; instead. The <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> for the arc provides this service.</para>
<para>Map functions have a specific <emphasis>domain</emphasis>, or set of values they can operate on. Any values outside the domain cannot be mapped. The domain precisely tracks what areas of namespace can be referred to across various forms of arcs.</para>
<para>Map functions can be chained to represent a series of map operations applied in sequence. The map function represent the cumulative effect as efficiently as possible. For example, in the case of a chained reference from &lt;/Model&gt; to &lt;/Model&gt; to &lt;/Model&gt; to &lt;/Model_1&gt;, this is effectively the same as a mapping directly from &lt;/Model&gt; to &lt;/Model_1&gt;. Representing the cumulative effect of arcs in this way is important for handling larger scenes efficiently.</para>
<para>Map functions can be <emphasis>inverted</emphasis>. Formally, map functions are bijections (one-to-one and onto), which ensures that they can be inverted. Put differently, no information is lost by applying a map function to set of values within its domain; they retain their distinct identities and can always be mapped back.</para>
<para>One analogy that may or may not be helpful: In the same way a geometric transform maps a model&apos;s points in its rest space into the world coordinates for a particular instance, a <ref refid="class_pcp_map_function" kindref="compound">PcpMapFunction</ref> maps values about a referenced model into the composed scene for a particular instance of that model. But rather than translating and rotating points, the map function shifts the values in namespace (and time). </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/mapFunction.h" line="82" column="1" bodyfile="pxr/usd/pcp/mapFunction.h" bodystart="81" bodyend="375"/>
    <listofallmembers>
      <member refid="class_pcp_map_function_1a34bb36a4f0d0e6ccac49faaa798ed26f" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>_data</name></member>
      <member refid="class_pcp_map_function_1a955eab8a2f2346866f2de75976a67d6d" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>_MapPathExpressionImpl</name></member>
      <member refid="class_pcp_map_function_1ab319c856c5593fef4fb56df6645118e1" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>_MaxLocalPairs</name></member>
      <member refid="class_pcp_map_function_1a9a50b3962d1518b877c761755d98c5f0" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>_offset</name></member>
      <member refid="class_pcp_map_function_1ad4138392d5099973351bb5ac19d5aa8b" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>Compose</name></member>
      <member refid="class_pcp_map_function_1abefa3c59abcf52e0020fecf18cbef223" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>ComposeOffset</name></member>
      <member refid="class_pcp_map_function_1a19f1e74bfdc3162e464edcfa98d9ebd5" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>Create</name></member>
      <member refid="class_pcp_map_function_1ad04053267fd79a637116d7b3d432fe4b" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>GetInverse</name></member>
      <member refid="class_pcp_map_function_1af99302b54721f70402f7107d19799f21" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>GetSourceToTargetMap</name></member>
      <member refid="class_pcp_map_function_1a771051ad27e94c42008b9631a1fc102a" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>GetString</name></member>
      <member refid="class_pcp_map_function_1a8113b7544dcabb159bc75671a5197ed0" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>GetTimeOffset</name></member>
      <member refid="class_pcp_map_function_1a6f9ac6edfcc7117909418b3eadd3b797" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>Hash</name></member>
      <member refid="class_pcp_map_function_1a5307b27d7e4bf0da9b4d73195bd9c4ff" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>HasRootIdentity</name></member>
      <member refid="class_pcp_map_function_1a8cac88e657aab74c7c1e93ed88a33a91" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>Identity</name></member>
      <member refid="class_pcp_map_function_1a0899753655a62da8127bc14949d185e6" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>IdentityPathMap</name></member>
      <member refid="class_pcp_map_function_1a56f4c15babb0622984d8d1410aaa70a2" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>IsIdentity</name></member>
      <member refid="class_pcp_map_function_1ad7119f36346e0d3ecd8baf2a83eee987" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>IsIdentityPathMapping</name></member>
      <member refid="class_pcp_map_function_1af3873c7231b7d7075d2f37dddbe26629" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>IsNull</name></member>
      <member refid="class_pcp_map_function_1a517c37a14bf2c8412836ede455adb5c1" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>MapSourceToTarget</name></member>
      <member refid="class_pcp_map_function_1a7126cf5696aedccaed2c5dd41c569108" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>MapSourceToTarget</name></member>
      <member refid="class_pcp_map_function_1a9aef0054e2ea858f5a9ceee469a4458a" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>MapTargetToSource</name></member>
      <member refid="class_pcp_map_function_1a263a940d85ec63cc7a0bef8a5698292b" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>MapTargetToSource</name></member>
      <member refid="class_pcp_map_function_1a9f8bf539ffebf7215af7d6a57df73a4d" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>operator!=</name></member>
      <member refid="class_pcp_map_function_1ae1b591785e8d874df12b2e75aedac68b" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>operator==</name></member>
      <member refid="class_pcp_map_function_1aa5a61a41bdea2c241a4c3ca2ef92bfcd" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>PathMap</name></member>
      <member refid="class_pcp_map_function_1ad2361dcef0d6c89864842539b9db291d" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>PathPair</name></member>
      <member refid="class_pcp_map_function_1adf41e6f81a51ea2bc96a23c1c03d0c92" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>PathPairVector</name></member>
      <member refid="class_pcp_map_function_1a8daa0689921d038a9ac23bc847c10ad3" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>PcpMapFunction</name></member>
      <member refid="class_pcp_map_function_1a5f2d99c973763286291155bf6af9f03c" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>PcpMapFunction</name></member>
      <member refid="class_pcp_map_function_1a6f017efb6acae58eb3e7b242640e5690" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>swap</name></member>
      <member refid="class_pcp_map_function_1a1ac5ce505d3f9c0398a7b009b9f1530d" prot="public" virt="non-virtual"><scope>PcpMapFunction</scope><name>Swap</name></member>
      <member refid="class_pcp_map_function_1acd18821661a699941c6624a4d682335f" prot="private" virt="non-virtual"><scope>PcpMapFunction</scope><name>TfHashAppend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
