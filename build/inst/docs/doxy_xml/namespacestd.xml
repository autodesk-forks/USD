<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="namespacestd" kind="namespace" language="C++">
    <compoundname>std</compoundname>
    <innerclass refid="classstd_1_1allocator" prot="public">std::allocator</innerclass>
    <innerclass refid="classstd_1_1array" prot="public">std::array</innerclass>
    <innerclass refid="classstd_1_1auto__ptr" prot="public">std::auto_ptr</innerclass>
    <innerclass refid="classstd_1_1bad__alloc" prot="public">std::bad_alloc</innerclass>
    <innerclass refid="classstd_1_1bad__cast" prot="public">std::bad_cast</innerclass>
    <innerclass refid="classstd_1_1bad__exception" prot="public">std::bad_exception</innerclass>
    <innerclass refid="classstd_1_1bad__typeid" prot="public">std::bad_typeid</innerclass>
    <innerclass refid="classstd_1_1basic__fstream" prot="public">std::basic_fstream</innerclass>
    <innerclass refid="classstd_1_1basic__ifstream" prot="public">std::basic_ifstream</innerclass>
    <innerclass refid="classstd_1_1basic__ios" prot="public">std::basic_ios</innerclass>
    <innerclass refid="classstd_1_1basic__iostream" prot="public">std::basic_iostream</innerclass>
    <innerclass refid="classstd_1_1basic__istream" prot="public">std::basic_istream</innerclass>
    <innerclass refid="classstd_1_1basic__istringstream" prot="public">std::basic_istringstream</innerclass>
    <innerclass refid="classstd_1_1basic__ofstream" prot="public">std::basic_ofstream</innerclass>
    <innerclass refid="classstd_1_1basic__ostream" prot="public">std::basic_ostream</innerclass>
    <innerclass refid="classstd_1_1basic__ostringstream" prot="public">std::basic_ostringstream</innerclass>
    <innerclass refid="classstd_1_1basic__string" prot="public">std::basic_string</innerclass>
    <innerclass refid="classstd_1_1basic__stringstream" prot="public">std::basic_stringstream</innerclass>
    <innerclass refid="classstd_1_1bitset" prot="public">std::bitset</innerclass>
    <innerclass refid="classstd_1_1complex" prot="public">std::complex</innerclass>
    <innerclass refid="classstd_1_1deque" prot="public">std::deque</innerclass>
    <innerclass refid="classstd_1_1domain__error" prot="public">std::domain_error</innerclass>
    <innerclass refid="classstd_1_1error__category" prot="public">std::error_category</innerclass>
    <innerclass refid="classstd_1_1error__code" prot="public">std::error_code</innerclass>
    <innerclass refid="classstd_1_1error__condition" prot="public">std::error_condition</innerclass>
    <innerclass refid="classstd_1_1exception" prot="public">std::exception</innerclass>
    <innerclass refid="classstd_1_1forward__list" prot="public">std::forward_list</innerclass>
    <innerclass refid="classstd_1_1fstream" prot="public">std::fstream</innerclass>
    <innerclass refid="structstd_1_1hash_3_011_1_1_garch_g_l_platform_context_state_01_4" prot="public">std::hash&lt; 1::GarchGLPlatformContextState &gt;</innerclass>
    <innerclass refid="classstd_1_1ifstream" prot="public">std::ifstream</innerclass>
    <innerclass refid="classstd_1_1invalid__argument" prot="public">std::invalid_argument</innerclass>
    <innerclass refid="classstd_1_1ios" prot="public">std::ios</innerclass>
    <innerclass refid="classstd_1_1ios__base" prot="public">std::ios_base</innerclass>
    <innerclass refid="classstd_1_1istream" prot="public">std::istream</innerclass>
    <innerclass refid="classstd_1_1istringstream" prot="public">std::istringstream</innerclass>
    <innerclass refid="classstd_1_1length__error" prot="public">std::length_error</innerclass>
    <innerclass refid="classstd_1_1list" prot="public">std::list</innerclass>
    <innerclass refid="classstd_1_1logic__error" prot="public">std::logic_error</innerclass>
    <innerclass refid="classstd_1_1map" prot="public">std::map</innerclass>
    <innerclass refid="classstd_1_1multimap" prot="public">std::multimap</innerclass>
    <innerclass refid="classstd_1_1multiset" prot="public">std::multiset</innerclass>
    <innerclass refid="classstd_1_1numeric__limits_3_011_1_1pxr__half_1_1half_01_4" prot="public">std::numeric_limits&lt; 1::pxr_half::half &gt;</innerclass>
    <innerclass refid="classstd_1_1ofstream" prot="public">std::ofstream</innerclass>
    <innerclass refid="classstd_1_1ostream" prot="public">std::ostream</innerclass>
    <innerclass refid="classstd_1_1ostringstream" prot="public">std::ostringstream</innerclass>
    <innerclass refid="classstd_1_1out__of__range" prot="public">std::out_of_range</innerclass>
    <innerclass refid="classstd_1_1overflow__error" prot="public">std::overflow_error</innerclass>
    <innerclass refid="classstd_1_1priority__queue" prot="public">std::priority_queue</innerclass>
    <innerclass refid="classstd_1_1queue" prot="public">std::queue</innerclass>
    <innerclass refid="classstd_1_1range__error" prot="public">std::range_error</innerclass>
    <innerclass refid="classstd_1_1runtime__error" prot="public">std::runtime_error</innerclass>
    <innerclass refid="classstd_1_1set" prot="public">std::set</innerclass>
    <innerclass refid="classstd_1_1shared__ptr" prot="public">std::shared_ptr</innerclass>
    <innerclass refid="classstd_1_1smart__ptr" prot="public">std::smart_ptr</innerclass>
    <innerclass refid="classstd_1_1stack" prot="public">std::stack</innerclass>
    <innerclass refid="classstd_1_1string" prot="public">std::string</innerclass>
    <innerclass refid="classstd_1_1stringstream" prot="public">std::stringstream</innerclass>
    <innerclass refid="classstd_1_1system__error" prot="public">std::system_error</innerclass>
    <innerclass refid="classstd_1_1thread" prot="public">std::thread</innerclass>
    <innerclass refid="classstd_1_1underflow__error" prot="public">std::underflow_error</innerclass>
    <innerclass refid="classstd_1_1unique__ptr" prot="public">std::unique_ptr</innerclass>
    <innerclass refid="classstd_1_1unordered__map" prot="public">std::unordered_map</innerclass>
    <innerclass refid="classstd_1_1unordered__multimap" prot="public">std::unordered_multimap</innerclass>
    <innerclass refid="classstd_1_1unordered__multiset" prot="public">std::unordered_multiset</innerclass>
    <innerclass refid="classstd_1_1unordered__set" prot="public">std::unordered_set</innerclass>
    <innerclass refid="classstd_1_1valarray" prot="public">std::valarray</innerclass>
    <innerclass refid="classstd_1_1vector" prot="public">std::vector</innerclass>
    <innerclass refid="classstd_1_1weak__ptr" prot="public">std::weak_ptr</innerclass>
    <innerclass refid="classstd_1_1wfstream" prot="public">std::wfstream</innerclass>
    <innerclass refid="classstd_1_1wifstream" prot="public">std::wifstream</innerclass>
    <innerclass refid="classstd_1_1wios" prot="public">std::wios</innerclass>
    <innerclass refid="classstd_1_1wistream" prot="public">std::wistream</innerclass>
    <innerclass refid="classstd_1_1wistringstream" prot="public">std::wistringstream</innerclass>
    <innerclass refid="classstd_1_1wofstream" prot="public">std::wofstream</innerclass>
    <innerclass refid="classstd_1_1wostream" prot="public">std::wostream</innerclass>
    <innerclass refid="classstd_1_1wostringstream" prot="public">std::wostringstream</innerclass>
    <innerclass refid="classstd_1_1wstring" prot="public">std::wstring</innerclass>
    <innerclass refid="classstd_1_1wstringstream" prot="public">std::wstringstream</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__tf___debugging_output_1ga8635953e3fdf59540d85c2f766a6afdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; 1::Tf_IsOstreamable&lt; T &gt;), std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt;1::Tf_IsOstreamable&lt;T&gt;), std::ostream &amp;&gt;::type std::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output an STL vector using [ ] as delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/ostreamMethods.h" line="95" column="1" bodyfile="pxr/base/tf/ostreamMethods.h" bodystart="96" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___debugging_output_1ga9f287e3b6a6532a4b1325d4c5d6bed14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; 1::Tf_IsOstreamable&lt; T &gt;), std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt;1::Tf_IsOstreamable&lt;T&gt;), std::ostream &amp;&gt;::type std::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::set&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output an STL set using ( ) as delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/ostreamMethods.h" line="109" column="1" bodyfile="pxr/base/tf/ostreamMethods.h" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___debugging_output_1gab8c029e19bd3baf06c2921bed4c3843c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; 1::Tf_IsOstreamable&lt; T &gt;), std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt;1::Tf_IsOstreamable&lt;T&gt;), std::ostream &amp;&gt;::type std::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::list&lt; T &gt; &amp;l)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::list&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Output an STL list using { } as delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/ostreamMethods.h" line="123" column="1" bodyfile="pxr/base/tf/ostreamMethods.h" bodystart="124" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___debugging_output_1ga8b825695ad26ffacfa7030e74d6f451c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class M</type>
          </param>
          <param>
            <type>class H</type>
          </param>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; 1::Tf_IsOstreamable&lt; K &gt;) &amp;&amp;1::Tf_IsOstreamable&lt; M &gt;), std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; 1::Tf_IsOstreamable&lt;K&gt;) &amp;&amp; 1::Tf_IsOstreamable&lt;M&gt;), std::ostream &amp;&gt;::type std::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const 1::TfHashMap&lt; K, M, H, C, A &gt; &amp;h)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const 1::TfHashMap&lt; K, M, H, C, A &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Output an TfHashMap using &lt; &gt; as delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/ostreamMethods.h" line="138" column="1" bodyfile="pxr/base/tf/ostreamMethods.h" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___debugging_output_1gae2420183990ed203c8a17378582cce41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class M</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; 1::Tf_IsOstreamable&lt; K &gt;) &amp;&amp;1::Tf_IsOstreamable&lt; M &gt;), std::ostream &amp; &gt;::type</type>
        <definition>std::enable_if&lt; 1::Tf_IsOstreamable&lt;K&gt;) &amp;&amp; 1::Tf_IsOstreamable&lt;M&gt;), std::ostream &amp;&gt;::type std::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::map&lt; K, M &gt; &amp;h)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::map&lt; K, M &gt; &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Output an STL map using &lt; &gt; as delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/ostreamMethods.h" line="152" column="1" bodyfile="pxr/base/tf/ostreamMethods.h" bodystart="153" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>STL namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="[STL]" line="1" column="1"/>
  </compounddef>
</doxygen>
