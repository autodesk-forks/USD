<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_notice_1_1_objects_changed" kind="class" language="C++" prot="public">
    <compoundname>UsdNotice::ObjectsChanged</compoundname>
    <basecompoundref refid="class_usd_notice_1_1_stage_notice" prot="public" virt="non-virtual">UsdNotice::StageNotice</basecompoundref>
    <includes refid="usd_2usd_2notice_8h" local="no">notice.h</includes>
    <innerclass refid="class_usd_notice_1_1_objects_changed_1_1_path_range" prot="public">UsdNotice::ObjectsChanged::PathRange</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_usd_notice_1_1_objects_changed_1add1344e081b07353e13ecbf9b9e08e15" prot="private" static="no">
        <type>std::map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, std::vector&lt; const <ref refid="struct_sdf_change_list_1_1_entry" kindref="compound">SdfChangeList::Entry</ref> * &gt; &gt;</type>
        <definition>using _PathsToChangesMap =  std::map&lt;SdfPath, std::vector&lt;const SdfChangeList::Entry*&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>_PathsToChangesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="129" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_notice_1_1_objects_changed_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdStage</definition>
        <argsstring></argsstring>
        <name>UsdStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="134" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_notice_1_1_objects_changed_1a01fc26557df60e6cb69a7c1b3431a49a" prot="private" static="no" mutable="no">
        <type>const _PathsToChangesMap *</type>
        <definition>const _PathsToChangesMap* _resyncChanges</definition>
        <argsstring></argsstring>
        <name>_resyncChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="383" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_notice_1_1_objects_changed_1abad3ebaa127dd82652f65b7ae20b926d" prot="private" static="no" mutable="no">
        <type>const _PathsToChangesMap *</type>
        <definition>const _PathsToChangesMap* _infoChanges</definition>
        <argsstring></argsstring>
        <name>_infoChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="384" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_notice_1_1_objects_changed_1ad47552fb9a1b02697019a0cbe88af93b" prot="private" static="no" mutable="no">
        <type>const _PathsToChangesMap *</type>
        <definition>const _PathsToChangesMap* _assetPathChanges</definition>
        <argsstring></argsstring>
        <name>_assetPathChanges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="385" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1af6342223f0b954e646eec88e96ff567a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const _PathsToChangesMap &amp;</type>
        <definition>static const _PathsToChangesMap&amp; _GetEmptyChangesMap</definition>
        <argsstring>()</argsstring>
        <name>_GetEmptyChangesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a50aebac0af228c11f2c060a6e0c986ad" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ObjectsChanged</definition>
        <argsstring>(const UsdStageWeakPtr &amp;stage, const _PathsToChangesMap *resyncChanges, const _PathsToChangesMap *infoChanges, const _PathsToChangesMap *assetPathChanges)</argsstring>
        <name>ObjectsChanged</name>
        <param>
          <type>const UsdStageWeakPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const _PathsToChangesMap *</type>
          <declname>resyncChanges</declname>
        </param>
        <param>
          <type>const _PathsToChangesMap *</type>
          <declname>infoChanges</declname>
        </param>
        <param>
          <type>const _PathsToChangesMap *</type>
          <declname>assetPathChanges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="135" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="135" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1af7dcf207cd01abba11a4caa95bf96075" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ObjectsChanged</definition>
        <argsstring>(const UsdStageWeakPtr &amp;stage, const _PathsToChangesMap *resyncChanges)</argsstring>
        <name>ObjectsChanged</name>
        <param>
          <type>const UsdStageWeakPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const _PathsToChangesMap *</type>
          <declname>resyncChanges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="144" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1af926390673d9eb2d91d367c35b06e4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USD_API</type>
        <definition>virtual USD_API ~ObjectsChanged</definition>
        <argsstring>()</argsstring>
        <name>~ObjectsChanged</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a3c090cd8e87d62dfabf10555d6c7db13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool AffectedObject</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>AffectedObject</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>obj</computeroutput> was possibly affected by the layer changes that generated this notice. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the case if either the object is subject to a resync or has changed info. Equivalent to: <programlisting><codeline><highlight class="normal">ResyncedObject(obj)<sp/>||<sp/>ResolvedAssetPathsResynced(obj)<sp/>||<sp/>ChangedInfoOnly(obj)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="156" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1abb3e5a33dc3dadb89d449d05af55cb30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ResyncedObject</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>ResyncedObject</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>obj</computeroutput> was resynced by the layer changes that generated this notice. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the case if the object&apos;s path or an ancestor path is present in <ref refid="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" kindref="member">GetResyncedPaths()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a768a49c4023d84257077721ddc4ae2a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ResolvedAssetPathsResynced</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>ResolvedAssetPathsResynced</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return true if asset path values in <computeroutput>obj</computeroutput> were resynced by the layer changes that generated this notice. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the case if the object&apos;s path or an ancestor path is present in <ref refid="class_usd_notice_1_1_objects_changed_1ab68a6c3f07f34791df1d4794a86ccaf6" kindref="member">GetResolvedAssetPathsResyncedPaths()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1ab939047696102fb8ff522b5bbcaeb274" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ChangedInfoOnly</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>ChangedInfoOnly</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>obj</computeroutput> was changed but not resynced by the layer changes that generated this notice. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the case if this object&apos;s exact path is present in <ref refid="class_usd_notice_1_1_objects_changed_1a235ad194cc01a9a16dabc0abe9bed144" kindref="member">GetChangedInfoOnlyPaths()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_notice_1_1_objects_changed_1_1_path_range" kindref="compound">PathRange</ref></type>
        <definition>USD_API PathRange GetResyncedPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetResyncedPaths</name>
        <briefdescription>
<para>Return the set of paths that are resynced in lexicographical order. </para>
        </briefdescription>
        <detaileddescription>
<para>Resyncs imply entire subtree invalidation of all descendant prims and properties, so this set is minimal regarding ancestors and descendants. For example, if the path &apos;/foo&apos; appears in this set, the entire subtree at &apos;/foo&apos; is resynced so the path &apos;/foo/bar&apos; will not appear, but it should be considered resynced.</para>
<para>Since object resyncs fully invalidate entire subtrees, this set of paths subsumes all other paths. For example, if the path &apos;/foo&apos; appears in this set, but an attribute value was changed at &apos;/foo/bar.x&apos;, this notice will only contain &apos;/foo&apos; in the set returned by this path and empty sets from all other functions. This is because the change to &apos;/foo/bar.x&apos; is implied by the resync of &apos;/foo&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a235ad194cc01a9a16dabc0abe9bed144" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_notice_1_1_objects_changed_1_1_path_range" kindref="compound">PathRange</ref></type>
        <definition>USD_API PathRange GetChangedInfoOnlyPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetChangedInfoOnlyPaths</name>
        <briefdescription>
<para>Return the set of paths that have only info changes (those that do not affect the structure of cached UsdPrims on a <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>) in lexicographical order. </para>
        </briefdescription>
        <detaileddescription>
<para>Info changes do not imply entire subtree invalidation, so this set is not minimal regarding ancestors and descendants, as opposed to <ref refid="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" kindref="member">GetResyncedPaths()</ref>. For example, both the paths &apos;/foo&apos; and &apos;/foo/bar&apos; may appear in this set.</para>
<para><simplesect kind="note"><para>The &quot;only&quot; in &quot;changed info only paths&quot; was historically meant to distinguish these paths from the object resync paths returned by GetResyncedPaths, since the former is subsumed by the latter. It is now slightly misleading; paths in &quot;changed info only&quot; are still subsumed by &quot;object resync&quot; paths, but are <emphasis>not</emphasis> subsumed by other types of changes, like &quot;resolved asset path resyncs&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1ab68a6c3f07f34791df1d4794a86ccaf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_notice_1_1_objects_changed_1_1_path_range" kindref="compound">PathRange</ref></type>
        <definition>USD_API PathRange GetResolvedAssetPathsResyncedPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetResolvedAssetPathsResyncedPaths</name>
        <briefdescription>
<para>Return the set of paths affected by changes that may cause asset path values to resolve to different locations, even though the asset path authored in scene description has not changed. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, asset paths using expression variables may be invalidated when a variable value is modified, even though the authored asset paths have not changed. The set of paths are returned in lexicographical order.</para>
<para>Resolved asset path resyncs imply invalidation of asset paths within entire subtrees including all descendant prims and properties, so this set is minimal regarding ancestors and descendants. For example, if the path &apos;/foo&apos; appears in this set, all asset paths in the entire subtree at &apos;/foo&apos; are invalidated, so the path &apos;/foo/bar&apos; will not appear, but asset paths on that prim should be considered invalidated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a635f91971271c3fead108b2288fb0781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetChangedFields</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>GetChangedFields</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return the set of changed fields in layers that affected <computeroutput>obj</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This set will be empty for objects whose paths are not in <ref refid="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" kindref="member">GetResyncedPaths()</ref> or <ref refid="class_usd_notice_1_1_objects_changed_1a235ad194cc01a9a16dabc0abe9bed144" kindref="member">GetChangedInfoOnlyPaths()</ref>.</para>
<para>If a field is present in this set, it does not necessarily mean the composed value of that field on <computeroutput>obj</computeroutput> has changed. For example, if a metadata value on <computeroutput>obj</computeroutput> is overridden in a stronger layer and is changed in a weaker layer, that field will appear in this set. However, since the value in the stronger layer did not change, the composed value returned by GetMetadata() will not have changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a6a4d7574081752d2ecc6c0aaa31d4e50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>USD_API TfTokenVector GetChangedFields</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetChangedFields</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1a8c1cac8459f107fde54042a657aaf440" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasChangedFields</definition>
        <argsstring>(const UsdObject &amp;obj) const</argsstring>
        <name>HasChangedFields</name>
        <param>
          <type>const <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Return true if there are any changed fields that affected <computeroutput>obj</computeroutput>, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>See GetChangedFields for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_notice_1_1_objects_changed_1ab10bc8abddba1c9eb3c7f864636ec1d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasChangedFields</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>HasChangedFields</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/notice.h" line="380" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Notice sent in response to authored changes that affect UsdObjects. </para>
    </briefdescription>
    <detaileddescription>
<para>The kinds of object changes are divided into these categories:</para>
<para><itemizedlist>
<listitem><para>Object resync: <parblock><para>&quot;Resyncs&quot; are potentially structural changes that invalidate entire subtrees of UsdObjects (including prims and properties). For example, if the path &quot;/foo&quot; is resynced, then all subpaths like &quot;/foo/bar&quot; and &quot;/foo/bar.baz&quot; may be arbitrarily changed.</para>
<para>When a prim is resynced, say &quot;/foo/bar&quot;, it might have been created or destroyed. Indication of possible changes flows down the resynced prim namespace, implicitly via prim resync notices. We <emphasis>do not</emphasis> consider the parent &quot;/foo&quot; to be resynced, as this would incorrectly imply that some or all of &quot;/foo/bar&quot;&apos;s siblings (and their descendants) have also changed. Additionally, we do not propagate change indication to objects associated with the changed object through relationships or connections. </para>
</parblock></para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Resolved asset path resync: <parblock><para>&quot;Resolved asset path resyncs&quot; invalidate asset paths in a subtree of objects. Asset paths authored anywhere in this subtree of objects (e.g. as attribute or metadata values) may now resolve to different locations, even though the asset path authored in scene description has not changed.</para>
<para></para>
</parblock></para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Changed info: <parblock><para>&quot;Changed-info&quot; means that a nonstructural change has occurred, like an attribute value change or a value change to a metadata field not related to composition. Unlike resyncs, changed-info notices for an object do not imply that the subtree beneath that object have changed.</para>
<para></para>
</parblock></para>
</listitem></itemizedlist>
</para>
<para>This notice provides API for two client use-cases. Clients interested in testing whether specific objects are affected by the changes should use the methods that return a bool, like <ref refid="class_usd_notice_1_1_objects_changed_1a3c090cd8e87d62dfabf10555d6c7db13" kindref="member">AffectedObject()</ref>. Clients that wish to reason about all changes as a whole should use the methods that return a <ref refid="class_usd_notice_1_1_objects_changed_1_1_path_range" kindref="compound">PathRange</ref>, like <ref refid="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" kindref="member">GetResyncedPaths()</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4353">
        <label>TfNotice</label>
        <link refid="class_tf_notice"/>
      </node>
      <node id="4352">
        <label>StageNotice</label>
        <link refid="class_usd_notice_1_1_stage_notice"/>
        <childnode refid="4353" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4351">
        <label>UsdNotice::ObjectsChanged</label>
        <link refid="class_usd_notice_1_1_objects_changed"/>
        <childnode refid="4352" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4356">
        <label>TfNotice</label>
        <link refid="class_tf_notice"/>
      </node>
      <node id="4355">
        <label>StageNotice</label>
        <link refid="class_usd_notice_1_1_stage_notice"/>
        <childnode refid="4356" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4354">
        <label>UsdNotice::ObjectsChanged</label>
        <link refid="class_usd_notice_1_1_objects_changed"/>
        <childnode refid="4355" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/notice.h" line="128" column="1" bodyfile="pxr/usd/usd/notice.h" bodystart="128" bodyend="386"/>
    <listofallmembers>
      <member refid="class_usd_notice_1_1_objects_changed_1ad47552fb9a1b02697019a0cbe88af93b" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>_assetPathChanges</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1af6342223f0b954e646eec88e96ff567a" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>_GetEmptyChangesMap</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1abad3ebaa127dd82652f65b7ae20b926d" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>_infoChanges</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1add1344e081b07353e13ecbf9b9e08e15" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>_PathsToChangesMap</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a01fc26557df60e6cb69a7c1b3431a49a" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>_resyncChanges</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a3c090cd8e87d62dfabf10555d6c7db13" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>AffectedObject</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1ab939047696102fb8ff522b5bbcaeb274" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>ChangedInfoOnly</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a635f91971271c3fead108b2288fb0781" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetChangedFields</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a6a4d7574081752d2ecc6c0aaa31d4e50" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetChangedFields</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a235ad194cc01a9a16dabc0abe9bed144" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetChangedInfoOnlyPaths</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1ab68a6c3f07f34791df1d4794a86ccaf6" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetResolvedAssetPathsResyncedPaths</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a793e3d781e6e01889a0ba8d789c09102" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetResyncedPaths</name></member>
      <member refid="class_usd_notice_1_1_stage_notice_1a3fab094a5c5319978d55b3c57724b9a7" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>GetStage</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a8c1cac8459f107fde54042a657aaf440" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>HasChangedFields</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1ab10bc8abddba1c9eb3c7f864636ec1d2" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>HasChangedFields</name></member>
      <member refid="class_tf_notice_1a32fa7dd9c926ede28304ba0fea5a0a57" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>InsertProbe</name></member>
      <member refid="class_tf_notice_1ae99914824a9e7ee4f109b0aecd927fab" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Keys</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a50aebac0af228c11f2c060a6e0c986ad" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>ObjectsChanged</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1af7dcf207cd01abba11a4caa95bf96075" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>ObjectsChanged</name></member>
      <member refid="class_tf_notice_1a68c24dba64e7a7135f62d1bdab33ca7f" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Register</name></member>
      <member refid="class_tf_notice_1af10135651f3124a42f325391ce12e1cb" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Register</name></member>
      <member refid="class_tf_notice_1a179046f55a4cf28983aecdae9e5f5ff5" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Register</name></member>
      <member refid="class_tf_notice_1a8f588ed9ae01d514c51ac36c255a7223" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>RemoveProbe</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1a768a49c4023d84257077721ddc4ae2a2" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>ResolvedAssetPathsResynced</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1abb3e5a33dc3dadb89d449d05af55cb30" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>ResyncedObject</name></member>
      <member refid="class_tf_notice_1ab183e05189affeabc78270a9c1be4241" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Revoke</name></member>
      <member refid="class_tf_notice_1a5a994f26e22e2b2dfa28e36a11349f7a" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Revoke</name></member>
      <member refid="class_tf_notice_1a02732e32bee22f2efad0b07baa997a80" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Send</name></member>
      <member refid="class_tf_notice_1a3a0aa0bd6d35b4e26e01f932687690e6" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>Send</name></member>
      <member refid="class_tf_notice_1a94b84b1ac443ab812c795a9945bede00" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>SendWithWeakBase</name></member>
      <member refid="class_usd_notice_1_1_stage_notice_1a14d4874502ccb6c0e31fb0a4923ebe16" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>StageNotice</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>UsdStage</name></member>
      <member refid="class_tf_notice_1ae0fdf4eb13bcd999def723fade0981bc" prot="public" virt="non-virtual"><scope>UsdNotice::ObjectsChanged</scope><name>WeakProbePtr</name></member>
      <member refid="class_usd_notice_1_1_objects_changed_1af926390673d9eb2d91d367c35b06e4fb" prot="public" virt="virtual"><scope>UsdNotice::ObjectsChanged</scope><name>~ObjectsChanged</name></member>
      <member refid="class_usd_notice_1_1_stage_notice_1add74554479125c9cb774f5137be1d6fb" prot="public" virt="virtual"><scope>UsdNotice::ObjectsChanged</scope><name>~StageNotice</name></member>
      <member refid="class_tf_notice_1ac79079190e565d59be9fc80b94d0341c" prot="public" virt="virtual"><scope>UsdNotice::ObjectsChanged</scope><name>~TfNotice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
