<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_stage_cache_context" kind="class" language="C++" prot="public">
    <compoundname>UsdStageCacheContext</compoundname>
    <includes refid="stage_cache_context_8h" local="no">stageCacheContext.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_stage_cache_context_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdStage</definition>
        <argsstring></argsstring>
        <name>UsdStage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="143" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_stage_cache_context_1a49c2a89a1984dda6bb9cb3e7df1683f3" prot="private" static="no" mutable="no">
        <type>union UsdStageCacheContext::@9</type>
        <definition>union UsdStageCacheContext::@9 @10</definition>
        <argsstring></argsstring>
        <name>@10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_cache_context_1aa9025202123534e19a66769d0bfb6516" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isReadOnlyCache</definition>
        <argsstring></argsstring>
        <name>_isReadOnlyCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="154" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_cache_context_1a9b6d4f6c637d231b94cc902ebe3233f4" prot="private" static="no" mutable="no">
        <type>UsdStageCacheContextBlockType</type>
        <definition>UsdStageCacheContextBlockType _blockType</definition>
        <argsstring></argsstring>
        <name>_blockType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="155" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_stage_cache_context_1a74e9dc1f54babbd86609dc563fc6b2cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdStageCacheContext</definition>
        <argsstring>(UsdStageCache &amp;cache)</argsstring>
        <name>UsdStageCacheContext</name>
        <param>
          <type><ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
<para>Bind a cache for calls to <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> to read from and write to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="125" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_context_1a55e9970659b6bc552a71ed4021a4e515" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdStageCacheContext</definition>
        <argsstring>(Usd_NonPopulatingStageCacheWrapper holder)</argsstring>
        <name>UsdStageCacheContext</name>
        <param>
          <type>Usd_NonPopulatingStageCacheWrapper</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
<para>Bind a cache for calls to <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> to read from. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>UsdUseButDoNotPopulateCache() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="132" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_context_1afac0954168dc8a48ae78a1a602ac309a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdStageCacheContext</definition>
        <argsstring>(UsdStageCacheContextBlockType blockType)</argsstring>
        <name>UsdStageCacheContext</name>
        <param>
          <type>UsdStageCacheContextBlockType</type>
          <declname>blockType</declname>
        </param>
        <briefdescription>
<para>Disable cache use completely (with UsdBlockStageCaches) or only for writing (with UsdBlockStageCacheWrites). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="139" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="139" bodyend="140"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_stage_cache_context_1a0804982209694ee84982ca7497659c74" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> * &gt;</type>
        <definition>static std::vector&lt;const UsdStageCache *&gt; _GetReadOnlyCaches</definition>
        <argsstring>()</argsstring>
        <name>_GetReadOnlyCaches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_context_1a3589cd2989281ae61b7d060e5a6db76e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> * &gt;</type>
        <definition>static std::vector&lt;const UsdStageCache *&gt; _GetReadableCaches</definition>
        <argsstring>()</argsstring>
        <name>_GetReadableCaches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_context_1a75f766c636977c0cdf1232c9ca4bc820" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> * &gt;</type>
        <definition>static std::vector&lt;UsdStageCache *&gt; _GetWritableCaches</definition>
        <argsstring>()</argsstring>
        <name>_GetWritableCaches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCacheContext.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A context object that lets the <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> API read from or read from and write to a <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> instance during a scope of execution. </para>
    </briefdescription>
    <detaileddescription>
<para>Code examples illustrate typical use: <programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>stage<sp/>cache<sp/>to<sp/>work<sp/>with.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UsdStageCache<sp/>stageCache;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Bind<sp/>this<sp/>cache.<sp/><sp/>UsdStage::Open()<sp/>will<sp/>attempt<sp/>to<sp/>find<sp/>a<sp/>matching</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>stage<sp/>in<sp/>the<sp/>cache.<sp/><sp/>If<sp/>none<sp/>is<sp/>found,<sp/>it<sp/>will<sp/>open<sp/>a<sp/>new<sp/>stage<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>cache.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UsdStageCacheContext<sp/>context(stageCache);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Since<sp/>the<sp/>cache<sp/>is<sp/>currently<sp/>empty,<sp/>this<sp/>Open<sp/>call<sp/>will<sp/>not<sp/>find<sp/>an</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>existing<sp/>stage<sp/>in<sp/>the<sp/>cache,<sp/>but<sp/>will<sp/>insert<sp/>the<sp/>newly<sp/>opened<sp/>stage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>in<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>stage<sp/>=<sp/>UsdStage::Open(&lt;args&gt;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stageCache.Contains(stage));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>A<sp/>subsequent<sp/>Open()<sp/>call<sp/>with<sp/>the<sp/>same<sp/>arguments<sp/>will<sp/>retrieve<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>stage<sp/>from<sp/>cache.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>stage2<sp/>=<sp/>UsdStage::Open(&lt;args&gt;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(stage2<sp/>==<sp/>stage);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> API examines caches in UsdStageCacheContexts that exist on the stack in the current thread in order starting with the most recently created (deepest in the stack) to the least recently created.</para>
<para>The UsdUseButDoNotPopulateCache() function makes a cache available for <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> to find stages in, but newly opened stages will not be published to it. This can be useful if you want to make use of a cache but cannot or do not wish to mutate that cache.</para>
<para>Passing UsdBlockStageCaches disables cache use entirely (as if no UsdStageCacheContexts exist on the stack), while UsdBlockStageCachePopulation disables writing to all bound caches (as if they were all established with UsdUseButDoNotPopulateCache()).</para>
<para>Threading note: Different threads have different call stacks, so <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> objects that exist in one thread&apos;s stack do not influence calls to <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> from a different thread. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/stageCacheContext.h" line="122" column="1" bodyfile="pxr/usd/usd/stageCacheContext.h" bodystart="121" bodyend="156"/>
    <listofallmembers>
      <member refid="class_usd_stage_cache_context_1a9b6d4f6c637d231b94cc902ebe3233f4" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>_blockType</name></member>
      <member refid="class_usd_stage_cache_context_1a3589cd2989281ae61b7d060e5a6db76e" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>_GetReadableCaches</name></member>
      <member refid="class_usd_stage_cache_context_1a0804982209694ee84982ca7497659c74" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>_GetReadOnlyCaches</name></member>
      <member refid="class_usd_stage_cache_context_1a75f766c636977c0cdf1232c9ca4bc820" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>_GetWritableCaches</name></member>
      <member refid="class_usd_stage_cache_context_1aa9025202123534e19a66769d0bfb6516" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>_isReadOnlyCache</name></member>
      <member refid="class_usd_stage_cache_context_1ab763ff44a10a7cbf08ec18a4557203e3" prot="private" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>UsdStage</name></member>
      <member refid="class_usd_stage_cache_context_1a74e9dc1f54babbd86609dc563fc6b2cd" prot="public" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>UsdStageCacheContext</name></member>
      <member refid="class_usd_stage_cache_context_1a55e9970659b6bc552a71ed4021a4e515" prot="public" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>UsdStageCacheContext</name></member>
      <member refid="class_usd_stage_cache_context_1afac0954168dc8a48ae78a1a602ac309a" prot="public" virt="non-virtual"><scope>UsdStageCacheContext</scope><name>UsdStageCacheContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
