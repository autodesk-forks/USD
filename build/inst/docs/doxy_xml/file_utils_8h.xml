<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="file_utils_8h" kind="file" language="C++">
    <compoundname>fileUtils.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="60763">
        <label>functional</label>
      </node>
      <node id="60759">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="60760" relation="include">
        </childnode>
      </node>
      <node id="60756">
        <label>pxr/base/tf/fileUtils.h</label>
        <link refid="file_utils_8h"/>
        <childnode refid="60757" relation="include">
        </childnode>
        <childnode refid="60758" relation="include">
        </childnode>
        <childnode refid="60761" relation="include">
        </childnode>
        <childnode refid="60762" relation="include">
        </childnode>
        <childnode refid="60763" relation="include">
        </childnode>
      </node>
      <node id="60761">
        <label>string</label>
      </node>
      <node id="60757">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="60762">
        <label>vector</label>
      </node>
      <node id="60758">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="60759" relation="include">
        </childnode>
      </node>
      <node id="60760">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="file_utils_8h_1afe99afb9ebdeeee31c1cfd0e98d25d30" prot="public" static="no">
        <type>std::function&lt; bool(std::string const  &amp;, std::vector&lt; std::string &gt; *, std::vector&lt; std::string &gt; const  &amp;)&gt;</type>
        <definition>typedef std::function&lt;bool (std::string const&amp;, std::vector&lt;std::string&gt; *, std::vector&lt;std::string&gt; const&amp;)&gt; TfWalkFunction</definition>
        <argsstring></argsstring>
        <name>TfWalkFunction</name>
        <briefdescription>
<para>Function type for TfWalkDirs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called once for each directory visited by TfWalkDirs. The first parameter is the directory path; if the topmost directory passed to TfWalkDirs is relative, this path will also be relative. The second parameter is a vector of subdirectory names, relative to the directory path. This parameter is a pointer, allowing the subdirectory list to be modified, thus controlling which directories are visited. Note that modifying the subdirectory vector has no effect when TfWalkDirs is called with <computeroutput>topDown</computeroutput> set to <computeroutput>false</computeroutput>. The final parameter is a vector of file names found in the directory path. The returned value determines whether the walk should be terminated (<computeroutput>false</computeroutput>), or continue (<computeroutput>true</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="123" column="1" bodyfile="pxr/base/tf/fileUtils.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" prot="public" static="no">
        <type>std::function&lt; void(std::string const  &amp;, std::string const  &amp;)&gt;</type>
        <definition>typedef std::function&lt;void (std::string const&amp;, std::string const&amp;)&gt; TfWalkErrorHandler</definition>
        <argsstring></argsstring>
        <name>TfWalkErrorHandler</name>
        <briefdescription>
<para>TfRmTree error handler function. </para>
        </briefdescription>
        <detaileddescription>
<para>The first parameter is the path which caused the error (file or directory), and the second parameter is an error message indicating why the error occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="131" column="1" bodyfile="pxr/base/tf/fileUtils.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="file_utils_8h_1a3b14032bdad08925c463fce221820892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfPathExists</definition>
        <argsstring>(std::string const &amp;path, bool resolveSymlinks=false)</argsstring>
        <name>TfPathExists</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resolveSymlinks</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if the path exists. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>resolveSymlinks</computeroutput> is false (default), the path is checked using lstat(). if <computeroutput>resolveSymlinks</computeroutput> is true, the path is checked using stat(), which resolves all symbolic links in the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1ace3ad3e06c8ee544cd05617e2a79674f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfIsDir</definition>
        <argsstring>(std::string const &amp;path, bool resolveSymlinks=false)</argsstring>
        <name>TfIsDir</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resolveSymlinks</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if the path exists and is a directory. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>resolveSymlinks</computeroutput> is false (default), the path is checked using lstat(). if <computeroutput>resolveSymlinks</computeroutput> is true, the path is checked using stat(), which resolves all symbolic links in the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a156004c4e3f04458516b11b6ebc007c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfIsFile</definition>
        <argsstring>(std::string const &amp;path, bool resolveSymlinks=false)</argsstring>
        <name>TfIsFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resolveSymlinks</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if the path exists and is a file. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>resolveSymlinks</computeroutput> is false (default), the path is checked using lstat(). if <computeroutput>resolveSymlinks</computeroutput> is true, the path is checked using stat(), which resolves all symbolic links in the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1af6b4ff034d549d7accbeb15d9cbe99b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfIsLink</definition>
        <argsstring>(std::string const &amp;path)</argsstring>
        <name>TfIsLink</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns true if the path exists and is a symbolic link. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a0f90e5790fa26728d6d8648740dacd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfIsWritable</definition>
        <argsstring>(std::string const &amp;path)</argsstring>
        <name>TfIsWritable</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns true if the file or directory at <computeroutput>path</computeroutput> is writable. </para>
        </briefdescription>
        <detaileddescription>
<para>For this function to return true, the file must exist and be writable by the effective user, effective group, or all users. This function dereferences symbolic links, returning whether or not the resolved file or directory path is writable. If the file or directory does not exist, this function returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a58d9cd36ab7c6ab1c2bc80ba75dec929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfIsDirEmpty</definition>
        <argsstring>(std::string const &amp;path)</argsstring>
        <name>TfIsDirEmpty</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns true if the path is an empty directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a46ec9096fbf25676a2abc46a038e753a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfSymlink</definition>
        <argsstring>(std::string const &amp;src, std::string const &amp;dst)</argsstring>
        <name>TfSymlink</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Creates a symbolic link from <computeroutput>src</computeroutput> to <computeroutput>dst</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a9b436e64a25da3c628de63bbaeabe7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfDeleteFile</definition>
        <argsstring>(std::string const &amp;path)</argsstring>
        <name>TfDeleteFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Deletes a file at path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1afedf3046e469ab8c3a01f27d06115547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfMakeDir</definition>
        <argsstring>(std::string const &amp;path, int mode=-1)</argsstring>
        <name>TfMakeDir</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Creates a directory. </para>
        </briefdescription>
        <detaileddescription>
<para>If the directory cannot be created, this function returns false. If no mode is specified, the default mode is 0777. If the specified path already exists, or an error occurs while creating the directory, this method returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a7e589d6a72f5360a66c5167c9a531cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfMakeDirs</definition>
        <argsstring>(std::string const &amp;path, int mode=-1, bool existOk=false)</argsstring>
        <name>TfMakeDirs</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>existOk</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates a directory hierarchy. </para>
        </briefdescription>
        <detaileddescription>
<para>If any element of the path cannot be created, this function will return false. The specified mode will be used to create all new directories. If no mode is specified, the default mode of <computeroutput>TfMakeDir</computeroutput> is used. If the target directory exists, this function returns false if <computeroutput>existOk</computeroutput> is false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a5e6f2c9397e474df53adfd0fd62fa43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void TfWalkIgnoreErrorHandler</definition>
        <argsstring>(std::string const &amp;path, std::string const &amp;msg)</argsstring>
        <name>TfWalkIgnoreErrorHandler</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>error handler to use when you want to ignore errors </para>
        </briefdescription>
        <detaileddescription>
<para>When calling TfWalkDirs/ChmodTree/RmTree and you want to ignore errors, you can pass in this public error handler which will ignore all the errors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1aea63a3735c77401b04cbeaf9e561e16a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void TfWalkDirs</definition>
        <argsstring>(std::string const &amp;top, TfWalkFunction fn, bool topDown=true, TfWalkErrorHandler onError=0, bool followLinks=false)</argsstring>
        <name>TfWalkDirs</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>top</declname>
        </param>
        <param>
          <type><ref refid="file_utils_8h_1afe99afb9ebdeeee31c1cfd0e98d25d30" kindref="member">TfWalkFunction</ref></type>
          <declname>fn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>topDown</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" kindref="member">TfWalkErrorHandler</ref></type>
          <declname>onError</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>followLinks</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Directory tree walker. </para>
        </briefdescription>
        <detaileddescription>
<para>This function attempts to be as compatible as possible with Python&apos;s os.walk() function.</para>
<para>For each directory in the tree rooted at <computeroutput>top</computeroutput> (including <computeroutput>top</computeroutput> itself, but excluding &apos;.&apos; and &apos;..&apos;), the std::function <computeroutput>fn</computeroutput> is called with three arguments: <computeroutput>dirpath</computeroutput>, <computeroutput>dirnames</computeroutput>, and <computeroutput>filenames</computeroutput>.</para>
<para><computeroutput>dirpath</computeroutput> is a string, the path to the directory. <computeroutput>dirnames</computeroutput> is a list of the names of the subdirectories in <computeroutput>dirpath</computeroutput> (excluding &apos;.&apos; and &apos;..&apos;). <computeroutput>filenames</computeroutput> is a list of the names of the non-directory files in <computeroutput>dirpath</computeroutput>. Note that the names in the sets are just names, with no path components. To get a full path (which begins with <computeroutput>top</computeroutput>) to a file or directory in <computeroutput>dirpath</computeroutput>, use <computeroutput>TfStringCatPaths(dirpath, name)</computeroutput>.</para>
<para>If optional argument <computeroutput>topDown</computeroutput> is true, or not specified, <computeroutput>fn</computeroutput> is called for a directory before any subdirectories. If topdown is false, <computeroutput>fn</computeroutput> is called for a directory after all subdirectories. Additionally, when <computeroutput>topDown</computeroutput> is true, the walk function can modify the <computeroutput>dirnames</computeroutput> set in place. This can be used to prune the search, or to impose a specific visitation order. Modifying <computeroutput>dirnames</computeroutput> when <computeroutput>topDown</computeroutput> is false has no effect, since the directories in <computeroutput>dirnames</computeroutput> have already been visited by the time they are passed to <computeroutput>fn</computeroutput>.</para>
<para>The value returned by the error handler function <computeroutput>onError</computeroutput> determines what further action will be taken if an error is encountered. If <computeroutput>true</computeroutput> is returned, the walk will continue; if <computeroutput>false</computeroutput>, the walk will not continue.</para>
<para>If <computeroutput>followLinks</computeroutput> is false, symbolic links to directories encountered during the walk are passed to the walk function in the <computeroutput>filenames</computeroutput> vector. If <computeroutput>followLinks</computeroutput> is true, symbolic links to directories are passed to the walk function in the <computeroutput>dirnames</computeroutput> vector, and the walk will recurse into these directories.</para>
<para>If <computeroutput>top</computeroutput> is a symbolic link to a directory, it is followed regardless of the value of <computeroutput>followLinks</computeroutput>. Calling TfWalkDirs with a file argument returns immediately without calling <computeroutput>fn</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a5cf835e0541b91229b3a5cb407d168d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void TfRmTree</definition>
        <argsstring>(std::string const &amp;path, TfWalkErrorHandler onError=0)</argsstring>
        <name>TfRmTree</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" kindref="member">TfWalkErrorHandler</ref></type>
          <declname>onError</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Recursively delete a directory tree rooted at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Tf runtime errors are raised if any errors are encountered while deleting the specified <computeroutput>path</computeroutput>. Pass in <ref refid="file_utils_8h_1a5e6f2c9397e474df53adfd0fd62fa43c" kindref="member">TfWalkIgnoreErrorHandler()</ref> to ignore errors. Alternately, sending in a custom TfWalkErrorHandler will call this handler when errors occur. This handler receives the path which caused the error, and a message indicating why the error occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1aa77baa03e312f851a97961f684ebea33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::vector&lt; std::string &gt;</type>
        <definition>TF_API std::vector&lt;std::string&gt; TfListDir</definition>
        <argsstring>(std::string const &amp;path, bool recursive=false)</argsstring>
        <name>TfListDir</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return a list containing files and directories in <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>A trailing path separator character is appended to directories returned in the listing. If <computeroutput>recursive</computeroutput> is true, the directory listing will include all subdirectory structure of <computeroutput>path</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a2fbeca2dc7ffc69540c82f197336e8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfReadDir</definition>
        <argsstring>(std::string const &amp;dirPath, std::vector&lt; std::string &gt; *dirnames, std::vector&lt; std::string &gt; *filenames, std::vector&lt; std::string &gt; *symlinknames, std::string *errMsg=NULL)</argsstring>
        <name>TfReadDir</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>dirPath</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>dirnames</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>filenames</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>symlinknames</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Read the contents of <computeroutput>dirPath</computeroutput> and append the names of the contained directories, files, and symlinks to <computeroutput>dirnames</computeroutput>, <computeroutput>filenames</computeroutput>, and <computeroutput>symlinknames</computeroutput>, respectively. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if <computeroutput>dirPath</computeroutput> &apos;s contents were read successfully. Otherwise return false and set <computeroutput>errMsg</computeroutput> with a description of the error if <computeroutput>errMsg</computeroutput> is not NULL.</para>
<para>It is safe to pass NULL for any of <computeroutput>dirnames</computeroutput>, <computeroutput>filenames</computeroutput>, and <computeroutput>symlinknames</computeroutput>. In that case those elements are not reported </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="file_utils_8h_1a4f0621eadbc8eff6be2848226be342b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfTouchFile</definition>
        <argsstring>(std::string const &amp;fileName, bool create=true)</argsstring>
        <name>TfTouchFile</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>create</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Touch <computeroutput>fileName</computeroutput>, updating access and modification time to &apos;now&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para>A simple touch-like functionality. Simple in a sense that it does not offer as many options as the same-name unix touch command, but otherwise is identical to the default touch behavior. If <computeroutput>create</computeroutput> is true and the file does not already exist, an empty file gets created, otherwise the touch call fails if the file does not already exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/fileUtils.h" line="232" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definitions of basic file utilities in tf. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_FILE_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_FILE_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a3b14032bdad08925c463fce221820892" kindref="member">TfPathExists</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveSymlinks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1ace3ad3e06c8ee544cd05617e2a79674f" kindref="member">TfIsDir</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveSymlinks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a156004c4e3f04458516b11b6ebc007c7" kindref="member">TfIsFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resolveSymlinks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1af6b4ff034d549d7accbeb15d9cbe99b4" kindref="member">TfIsLink</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a0f90e5790fa26728d6d8648740dacd0a" kindref="member">TfIsWritable</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a58d9cd36ab7c6ab1c2bc80ba75dec929" kindref="member">TfIsDirEmpty</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a46ec9096fbf25676a2abc46a038e753a" kindref="member">TfSymlink</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>src,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>dst);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a9b436e64a25da3c628de63bbaeabe7a6" kindref="member">TfDeleteFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1afedf3046e469ab8c3a01f27d06115547" kindref="member">TfMakeDir</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode=-1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a7e589d6a72f5360a66c5167c9a531cca" kindref="member">TfMakeDirs</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode=-1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>existOk=</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::function&lt;bool<sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>*,</highlight></codeline>
<codeline lineno="123" refid="file_utils_8h_1afe99afb9ebdeeee31c1cfd0e98d25d30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;<sp/><ref refid="file_utils_8h_1afe99afb9ebdeeee31c1cfd0e98d25d30" kindref="member">TfWalkFunction</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::function&lt;void<sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="131" refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;<sp/><ref refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" kindref="member">TfWalkErrorHandler</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a5e6f2c9397e474df53adfd0fd62fa43c" kindref="member">TfWalkIgnoreErrorHandler</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1aea63a3735c77401b04cbeaf9e561e16a" kindref="member">TfWalkDirs</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>top,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file_utils_8h_1afe99afb9ebdeeee31c1cfd0e98d25d30" kindref="member">TfWalkFunction</ref><sp/>fn,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>topDown=</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" kindref="member">TfWalkErrorHandler</ref><sp/>onError<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>followLinks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a5cf835e0541b91229b3a5cb407d168d2" kindref="member">TfRmTree</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="file_utils_8h_1af749128724f9f7f63784fb8312de9f23" kindref="member">TfWalkErrorHandler</ref><sp/>onError<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="203"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="file_utils_8h_1aa77baa03e312f851a97961f684ebea33" kindref="member">TfListDir</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>path,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="file_utils_8h_1a2fbeca2dc7ffc69540c82f197336e8e2" kindref="member">TfReadDir</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;dirPath,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>*dirnames,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>*filenames,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>*symlinknames,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>*errMsg<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="file_utils_8h_1a4f0621eadbc8eff6be2848226be342b4" kindref="member">TfTouchFile</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fileName,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create=</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_FILE_UTILS_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/fileUtils.h"/>
  </compounddef>
</doxygen>
