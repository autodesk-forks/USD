<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_scoped_auto_var" kind="class" language="C++" prot="public">
    <compoundname>TfScopedAutoVar</compoundname>
    <includes refid="scoped_8h" local="no">scoped.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_scoped_auto_var_1a4c1e3901666a3910652364ca5dc4f1d7" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_scoped" kindref="compound">TfScoped</ref></type>
        <definition>TfScoped _scope</definition>
        <argsstring></argsstring>
        <name>_scope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="207" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_scoped_auto_var_1aa31d81fa9df73c6e8f1dc19f4b583f20" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TfScopedAutoVar</definition>
        <argsstring>(TfScopedAutoVar const &amp;)=delete</argsstring>
        <name>TfScopedAutoVar</name>
        <param>
          <type><ref refid="class_tf_scoped_auto_var" kindref="compound">TfScopedAutoVar</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_auto_var_1ad6b7eab0aea09aee148293cfc0c66b2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_scoped_auto_var" kindref="compound">TfScopedAutoVar</ref> &amp;</type>
        <definition>TfScopedAutoVar&amp; operator=</definition>
        <argsstring>(TfScopedAutoVar const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_tf_scoped_auto_var" kindref="compound">TfScopedAutoVar</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="182" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_scoped_auto_var_1a3d7619dc01a484136c9fa52f564e86c4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfScopedAutoVar</definition>
        <argsstring>(T &amp;x, const T &amp;val)</argsstring>
        <name>TfScopedAutoVar</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set/reset variable. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets <computeroutput>x</computeroutput> to <computeroutput>val</computeroutput> immediately and restores its old value when this goes out of scope. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="189" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="189" bodyend="193"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_scoped_auto_var_1accd8cd27da75b417e9f9fe44e1fde063" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void _Set</definition>
        <argsstring>(T *x, const T &amp;val)</argsstring>
        <name>_Set</name>
        <param>
          <type>T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="198" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_scoped_auto_var_1a22c141c33f74d21f21be163696e53af3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* operator new</definition>
        <argsstring>(::std::size_t size)</argsstring>
        <name>operator new</name>
        <param>
          <type>::std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/scoped.h" line="204" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reset variable on exiting scope. </para>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="class_tf_scoped_auto_var" kindref="compound">TfScopedAutoVar</ref></computeroutput> sets a variable to a value when created then restores its original value when destroyed.</para>
<para>For example: <programlisting><codeline><highlight class="normal">int<sp/>func(bool<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TfScopedAutoVar<sp/>scope(x,<sp/>true);<sp/><sp/><sp/><sp/>//<sp/>set<sp/>x<sp/>to<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>return<sp/>func2(x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>restore<sp/>x<sp/>after<sp/>calling<sp/>func2</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This differs from <computeroutput><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref></computeroutput> in that it&apos;s not a template class, the value type is deduced automatically and it allocates memory on the heap. If performance is critical or memory must not be allocated then use <computeroutput><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref></computeroutput> instead.</para>
<para><simplesect kind="see"><para><ref refid="class_tf_scoped_var" kindref="compound">TfScopedVar</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="pxr/base/tf/scoped.h" line="180" column="1" bodyfile="pxr/base/tf/scoped.h" bodystart="180" bodyend="208"/>
    <listofallmembers>
      <member refid="class_tf_scoped_auto_var_1a4c1e3901666a3910652364ca5dc4f1d7" prot="private" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>_scope</name></member>
      <member refid="class_tf_scoped_auto_var_1accd8cd27da75b417e9f9fe44e1fde063" prot="private" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>_Set</name></member>
      <member refid="class_tf_scoped_auto_var_1a22c141c33f74d21f21be163696e53af3" prot="private" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>operator new</name></member>
      <member refid="class_tf_scoped_auto_var_1ad6b7eab0aea09aee148293cfc0c66b2b" prot="private" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>operator=</name></member>
      <member refid="class_tf_scoped_auto_var_1aa31d81fa9df73c6e8f1dc19f4b583f20" prot="private" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>TfScopedAutoVar</name></member>
      <member refid="class_tf_scoped_auto_var_1a3d7619dc01a484136c9fa52f564e86c4" prot="public" virt="non-virtual"><scope>TfScopedAutoVar</scope><name>TfScopedAutoVar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
