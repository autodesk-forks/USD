<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_range2d" kind="class" language="C++" prot="public">
    <compoundname>GfRange2d</compoundname>
    <includes refid="range2d_8h" local="no">range2d.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_range2d_1abc62e6d1f3f899223798e6cfbdda63c4" prot="public" static="no">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>typedef GfVec2d MinMaxType</definition>
        <argsstring></argsstring>
        <name>MinMaxType</name>
        <briefdescription>
<para>Helper typedef. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="68" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_gf_range2d_1aae3deb868f1ab3a47ef7e6f13c6aefb6" prot="public" static="no">
        <type><ref refid="class_gf_vec2d_1a5459d6283bff692e454aad6e9ad9acf0" kindref="member">GfVec2d::ScalarType</ref></type>
        <definition>typedef GfVec2d::ScalarType ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="71" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_range2d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t dimension</definition>
        <argsstring></argsstring>
        <name>dimension</name>
        <initializer>= GfVec2d::dimension</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="70" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range2d_1a6be5c88b17194160f079a18cf98c773e" prot="public" static="yes" mutable="no">
        <type>GF_API const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GF_API const GfRange2d UnitSquare</definition>
        <argsstring></argsstring>
        <name>UnitSquare</name>
        <briefdescription>
<para>The unit square. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="337" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_range2d_1a73e96d3eebf505f65e8e19ac4ef2cd29" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d _min</definition>
        <argsstring></argsstring>
        <name>_min</name>
        <briefdescription>
<para>Minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="341" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_range2d_1ad109d1d45e6c56557931213ad4ccc0c7" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d _max</definition>
        <argsstring></argsstring>
        <name>_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="341" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_range2d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetEmpty</definition>
        <argsstring>()</argsstring>
        <name>SetEmpty</name>
        <briefdescription>
<para>Sets the range to an empty interval. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="75" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ae83dc40ff549db63237ecb82ff8f0739" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange2d</definition>
        <argsstring>()</argsstring>
        <name>GfRange2d</name>
        <briefdescription>
<para>The default constructor creates an empty range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="81" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ad64aafae137da4eb099105972e7ef7d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfRange2d</definition>
        <argsstring>(const GfVec2d &amp;min, const GfVec2d &amp;max)</argsstring>
        <name>GfRange2d</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the minimum and maximum points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="86" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a44565cf7f7e7c1182f0241ab4082a7d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfRange2d</definition>
        <argsstring>(class GfRange2f const &amp;other)</argsstring>
        <name>GfRange2d</name>
        <param>
          <type>class <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Implicitly convert from <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a2085b3b2b4519250446db05e888334c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>const GfVec2d&amp; GetMin</definition>
        <argsstring>() const</argsstring>
        <name>GetMin</name>
        <briefdescription>
<para>Returns the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="97" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a947c8ef1864edfd6c06b7164f64d8e94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
        <definition>const GfVec2d&amp; GetMax</definition>
        <argsstring>() const</argsstring>
        <name>GetMax</name>
        <briefdescription>
<para>Returns the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="100" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ab9fd8f85e26bda7a726648211b913ef0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Returns the size of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="103" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a892a3cfd815a381c4d8f4c9f56e9fd51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GfVec2d GetMidpoint</definition>
        <argsstring>() const</argsstring>
        <name>GetMidpoint</name>
        <briefdescription>
<para>Returns the midpoint of the range, that is, 0.5*(min+max). </para>
        </briefdescription>
        <detaileddescription>
<para>Note: this returns zero in the case of default-constructed ranges, or ranges set via <ref refid="class_gf_range2d_1ac033765bcde1ac9c2004c4a3a24428ab" kindref="member">SetEmpty()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="108" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ae706ad3fc6512095cd9317ea107651df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMin</definition>
        <argsstring>(const GfVec2d &amp;min)</argsstring>
        <name>SetMin</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <briefdescription>
<para>Sets the minimum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="114" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ad2aab5ce7ab45b102f5e9d13d50d06a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetMax</definition>
        <argsstring>(const GfVec2d &amp;max)</argsstring>
        <name>SetMax</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Sets the maximum value of the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="117" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether the range is empty (max &lt; min). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="120" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a1900e0442f909091946f3967d9c7dc14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfVec2d &amp;point)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000019"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="126" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ae0ec0a3689e6fabaf63b04383e4d8bf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ExtendBy</definition>
        <argsstring>(const GfRange2d &amp;range)</argsstring>
        <name>ExtendBy</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Modifies the range if necessary to surround the given range. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000020"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="130" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ad4e7e8f649cf098016c04e1c1fa9db31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfVec2d &amp;point) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="134" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a8245dff127dbbc5ccb18d9df8cdaa0b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const GfRange2d &amp;range) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="142" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1adbb43dcded467b67695a970e1788f5e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfVec2d &amp;point) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>point</computeroutput> is located inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the range is assumed to include its extrema. <xrefsect id="deprecated_1_deprecated000021"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1ad4e7e8f649cf098016c04e1c1fa9db31" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="149" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a4c4534d6b367dc685bc96988e13bc6f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsInside</definition>
        <argsstring>(const GfRange2d &amp;range) const</argsstring>
        <name>IsInside</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely inside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. <xrefsect id="deprecated_1_deprecated000022"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1ad4e7e8f649cf098016c04e1c1fa9db31" kindref="member">Contains()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="157" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1ac8e74bed643161aba177891a33321fd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsOutside</definition>
        <argsstring>(const GfRange2d &amp;range) const</argsstring>
        <name>IsOutside</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>range</computeroutput> is located entirely outside the range. </para>
        </briefdescription>
        <detaileddescription>
<para>As with all operations of this type, the ranges are assumed to include their extrema. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="164" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; UnionWith</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="178" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a7ad4d41975985c9ddcdb5c08b92c6fcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; UnionWith</definition>
        <argsstring>(const GfVec2d &amp;b)</argsstring>
        <name>UnionWith</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="185" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aa69fc2275cca2eb848edb6f059a0fe9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; Union</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000024"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="199" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aac74fce2dde441a0a911825ccdfb50ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; Union</definition>
        <argsstring>(const GfVec2d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Extend <computeroutput>this</computeroutput> to include <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000025"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" kindref="member">UnionWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="205" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a289d35d0a2327a7b3c6a637e04472bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; IntersectWith</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>IntersectWith</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="225" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aa4ee50b052880a2b5b8aefa2ba7699a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>const GfRange2d&amp; Intersection</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modifies this range to hold its intersection with <computeroutput>b</computeroutput> and returns the result. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000027"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a289d35d0a2327a7b3c6a637e04472bca" kindref="member">IntersectWith()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="234" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a8b792dd2caf7ea5bee7c1212f52a2d36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>GfRange2d&amp; operator+=</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="239" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a926693d92f245d3ca26ed7d9e4788c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>GfRange2d&amp; operator -=</definition>
        <argsstring>(const GfRange2d &amp;b)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>unary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="246" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a054981d4f5a1696c12aad6d5473e0e0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>GfRange2d&amp; operator *=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="253" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="253" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a7c5442252b7e6e7324f40eb24efe91ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
        <definition>GfRange2d&amp; operator/=</definition>
        <argsstring>(double m)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>unary division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="266" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1afc739230ae0344cf887933a573540475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d operator+</definition>
        <argsstring>(const GfRange2d &amp;b) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="271" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a602f25b4d955465697966d210a5ae807" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d operator -</definition>
        <argsstring>(const GfRange2d &amp;b) const</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>binary difference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="277" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a52e9e96299603cdcfaf57ec6edd494f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange2d &amp;b) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The min and max points must match exactly for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="306" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a72ecad84bcf68c4d4e9925c6088a7784" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange2d &amp;b) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="310" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a3892d44a8367e70bf854617710cdd2c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfRange2f &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this range to a <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The values must match exactly and it does exactly what you might expect when comparing float and double values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="318" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1af5cc6e17431fcd0713614acb159f5ae7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfRange2f &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_range2f" kindref="compound">GfRange2f</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="319" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aef4cb5f075c2278bf8fbad78f26ca2fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDistanceSquared</definition>
        <argsstring>(const GfVec2d &amp;p) const</argsstring>
        <name>GetDistanceSquared</name>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance from a point to the range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1afaac6c1d4b4d0543f88caa4d47e6cb0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref></type>
        <definition>GF_API GfVec2d GetCorner</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetCorner</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith corner of the range, in the following order: SW, SE, NW, NE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a5a2b584e50e9b8a5cf8fb70abed5e0fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GF_API GfRange2d GetQuadrant</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>GetQuadrant</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the ith quadrant of the range, in the following order: SW, SE, NW, NE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gf_range2d_1a571ee90efd1642e253bc87ca35e93305" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>static GfRange2d GetUnion</definition>
        <argsstring>(const GfRange2d &amp;a, const GfRange2d &amp;b)</argsstring>
        <name>GetUnion</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="170" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="170" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aae277573787cd7ee12c69aec7abac187" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>static GfRange2d Union</definition>
        <argsstring>(const GfRange2d &amp;a, const GfRange2d &amp;b)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns the smallest <computeroutput><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></computeroutput> which contains both <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000023"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a571ee90efd1642e253bc87ca35e93305" kindref="member">GetUnion()</ref> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="193" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1a8041c58d48fb1bd1ef7d4345440dc187" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>static GfRange2d GetIntersection</definition>
        <argsstring>(const GfRange2d &amp;a, const GfRange2d &amp;b)</argsstring>
        <name>GetIntersection</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="210" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="210" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aae97aa1922cbdb11f403643842843b11" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>static GfRange2d Intersection</definition>
        <argsstring>(const GfRange2d &amp;a, const GfRange2d &amp;b)</argsstring>
        <name>Intersection</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></computeroutput> that describes the intersection of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000026"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="class_gf_range2d_1a8041c58d48fb1bd1ef7d4345440dc187" kindref="member">GetIntersection()</ref> instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="219" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="219" bodyend="221"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_range2d_1a629e09aceb2644fd5e4b41e6212fcd72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d operator *</definition>
        <argsstring>(double m, const GfRange2d &amp;r)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="282" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2d_1ade87a6184489b8922d8de18ab2951aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d operator *</definition>
        <argsstring>(const GfRange2d &amp;r, double m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar multiply. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="289" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="289" bodyend="293"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2d_1a8762ea30d9d216a8392416798c8a14ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref></type>
        <definition>GfRange2d operator/</definition>
        <argsstring>(const GfRange2d &amp;r, double m)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>scalar divide. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="296" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_range2d_1a1483b7b76f5a33dcd9807de3f3e02c5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const GfRange2d &amp;r)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_gf_range2d" kindref="compound">GfRange2d</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="301" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="301" bodyend="303"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gf_range2d_1ae97ea31f7c171200c04742f9c661cf8d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMin</definition>
        <argsstring>(GfVec2d &amp;dest, const GfVec2d &amp;point)</argsstring>
        <name>_FindMin</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends minimum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="344" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_range2d_1aeb1d0b030f72da5e3250ef4fb58b8e7f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void _FindMax</definition>
        <argsstring>(GfVec2d &amp;dest, const GfVec2d &amp;point)</argsstring>
        <name>_FindMax</name>
        <param>
          <type><ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec2d" kindref="compound">GfVec2d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Extends maximum point if necessary to contain given point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/range2d.h" line="350" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="350" bodyend="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 2-dimensional floating point range. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a 2-dimensional range (or interval) All operations are component-wise and conform to interval mathematics. An empty range is one where max &lt; min. The default empty is [FLT_MAX,-FLT_MAX] </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1391">
        <label>GfRange2d</label>
        <link refid="class_gf_range2d"/>
        <childnode refid="1391" relation="usage">
          <edgelabel>UnitSquare</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/base/gf/range2d.h" line="64" column="1" bodyfile="pxr/base/gf/range2d.h" bodystart="63" bodyend="354"/>
    <listofallmembers>
      <member refid="class_gf_range2d_1aeb1d0b030f72da5e3250ef4fb58b8e7f" prot="private" virt="non-virtual"><scope>GfRange2d</scope><name>_FindMax</name></member>
      <member refid="class_gf_range2d_1ae97ea31f7c171200c04742f9c661cf8d" prot="private" virt="non-virtual"><scope>GfRange2d</scope><name>_FindMin</name></member>
      <member refid="class_gf_range2d_1ad109d1d45e6c56557931213ad4ccc0c7" prot="private" virt="non-virtual"><scope>GfRange2d</scope><name>_max</name></member>
      <member refid="class_gf_range2d_1a73e96d3eebf505f65e8e19ac4ef2cd29" prot="private" virt="non-virtual"><scope>GfRange2d</scope><name>_min</name></member>
      <member refid="class_gf_range2d_1ad4e7e8f649cf098016c04e1c1fa9db31" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Contains</name></member>
      <member refid="class_gf_range2d_1a8245dff127dbbc5ccb18d9df8cdaa0b7" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Contains</name></member>
      <member refid="class_gf_range2d_1a18dbd530c26457eb5c19d22bef9ebbe1" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>dimension</name></member>
      <member refid="class_gf_range2d_1a1900e0442f909091946f3967d9c7dc14" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range2d_1ae0ec0a3689e6fabaf63b04383e4d8bf7" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>ExtendBy</name></member>
      <member refid="class_gf_range2d_1afaac6c1d4b4d0543f88caa4d47e6cb0c" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetCorner</name></member>
      <member refid="class_gf_range2d_1aef4cb5f075c2278bf8fbad78f26ca2fb" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetDistanceSquared</name></member>
      <member refid="class_gf_range2d_1a8041c58d48fb1bd1ef7d4345440dc187" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetIntersection</name></member>
      <member refid="class_gf_range2d_1a947c8ef1864edfd6c06b7164f64d8e94" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetMax</name></member>
      <member refid="class_gf_range2d_1a892a3cfd815a381c4d8f4c9f56e9fd51" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetMidpoint</name></member>
      <member refid="class_gf_range2d_1a2085b3b2b4519250446db05e888334c7" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetMin</name></member>
      <member refid="class_gf_range2d_1a5a2b584e50e9b8a5cf8fb70abed5e0fc" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetQuadrant</name></member>
      <member refid="class_gf_range2d_1ab9fd8f85e26bda7a726648211b913ef0" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetSize</name></member>
      <member refid="class_gf_range2d_1a571ee90efd1642e253bc87ca35e93305" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GetUnion</name></member>
      <member refid="class_gf_range2d_1ae83dc40ff549db63237ecb82ff8f0739" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GfRange2d</name></member>
      <member refid="class_gf_range2d_1ad64aafae137da4eb099105972e7ef7d1" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GfRange2d</name></member>
      <member refid="class_gf_range2d_1a44565cf7f7e7c1182f0241ab4082a7d2" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>GfRange2d</name></member>
      <member refid="class_gf_range2d_1a1483b7b76f5a33dcd9807de3f3e02c5d" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>hash_value</name></member>
      <member refid="class_gf_range2d_1aae97aa1922cbdb11f403643842843b11" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Intersection</name></member>
      <member refid="class_gf_range2d_1aa4ee50b052880a2b5b8aefa2ba7699a5" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Intersection</name></member>
      <member refid="class_gf_range2d_1a289d35d0a2327a7b3c6a637e04472bca" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>IntersectWith</name></member>
      <member refid="class_gf_range2d_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>IsEmpty</name></member>
      <member refid="class_gf_range2d_1adbb43dcded467b67695a970e1788f5e0" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>IsInside</name></member>
      <member refid="class_gf_range2d_1a4c4534d6b367dc685bc96988e13bc6f4" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>IsInside</name></member>
      <member refid="class_gf_range2d_1ac8e74bed643161aba177891a33321fd5" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>IsOutside</name></member>
      <member refid="class_gf_range2d_1abc62e6d1f3f899223798e6cfbdda63c4" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>MinMaxType</name></member>
      <member refid="class_gf_range2d_1a72ecad84bcf68c4d4e9925c6088a7784" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator !=</name></member>
      <member refid="class_gf_range2d_1af5cc6e17431fcd0713614acb159f5ae7" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator !=</name></member>
      <member refid="class_gf_range2d_1a629e09aceb2644fd5e4b41e6212fcd72" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator *</name></member>
      <member refid="class_gf_range2d_1ade87a6184489b8922d8de18ab2951aa4" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator *</name></member>
      <member refid="class_gf_range2d_1a054981d4f5a1696c12aad6d5473e0e0d" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator *=</name></member>
      <member refid="class_gf_range2d_1a602f25b4d955465697966d210a5ae807" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator -</name></member>
      <member refid="class_gf_range2d_1a926693d92f245d3ca26ed7d9e4788c3b" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator -=</name></member>
      <member refid="class_gf_range2d_1afc739230ae0344cf887933a573540475" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator+</name></member>
      <member refid="class_gf_range2d_1a8b792dd2caf7ea5bee7c1212f52a2d36" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator+=</name></member>
      <member refid="class_gf_range2d_1a8762ea30d9d216a8392416798c8a14ba" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator/</name></member>
      <member refid="class_gf_range2d_1a7c5442252b7e6e7324f40eb24efe91ae" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator/=</name></member>
      <member refid="class_gf_range2d_1a52e9e96299603cdcfaf57ec6edd494f8" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator==</name></member>
      <member refid="class_gf_range2d_1a3892d44a8367e70bf854617710cdd2c1" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>operator==</name></member>
      <member refid="class_gf_range2d_1aae3deb868f1ab3a47ef7e6f13c6aefb6" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>ScalarType</name></member>
      <member refid="class_gf_range2d_1ac033765bcde1ac9c2004c4a3a24428ab" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>SetEmpty</name></member>
      <member refid="class_gf_range2d_1ad2aab5ce7ab45b102f5e9d13d50d06a6" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>SetMax</name></member>
      <member refid="class_gf_range2d_1ae706ad3fc6512095cd9317ea107651df" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>SetMin</name></member>
      <member refid="class_gf_range2d_1aae277573787cd7ee12c69aec7abac187" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Union</name></member>
      <member refid="class_gf_range2d_1aa69fc2275cca2eb848edb6f059a0fe9c" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Union</name></member>
      <member refid="class_gf_range2d_1aac74fce2dde441a0a911825ccdfb50ce" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>Union</name></member>
      <member refid="class_gf_range2d_1a7a3c8c7702a489d376b443fd325f2f83" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>UnionWith</name></member>
      <member refid="class_gf_range2d_1a7ad4d41975985c9ddcdb5c08b92c6fcd" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>UnionWith</name></member>
      <member refid="class_gf_range2d_1a6be5c88b17194160f079a18cf98c773e" prot="public" virt="non-virtual"><scope>GfRange2d</scope><name>UnitSquare</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
