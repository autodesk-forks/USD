<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357" kind="struct" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">true_type</basecompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a58b363a6c15dff89a9b7fad93191ea96" prot="public" static="no">
        <type>typename T::value_type</type>
        <definition>using value_type =  typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1071" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a716fcc5999bac1265a9e26f6fd599c8e" prot="public" static="no">
        <type>typename std::remove_const&lt; typename value_type::first_type &gt;::type</type>
        <definition>using first_type =  typename std::remove_const&lt;typename value_type::first_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>first_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1072" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab691b73e69e50b53d89839f60e4a1567" prot="public" static="no">
        <type>typename std::remove_const&lt; typename value_type::second_type &gt;::type</type>
        <definition>using second_type =  typename std::remove_const&lt;typename value_type::second_type&gt;::type</definition>
        <argsstring></argsstring>
        <name>second_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1073" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1073" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab3aa810ae0f34874621845b6676c7209" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Q</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto first</definition>
        <argsstring>(Q &amp;&amp;pair_value) -&gt; decltype(std::get&lt; 0 &gt;(std::forward&lt; Q &gt;(pair_value)))</argsstring>
        <name>first</name>
        <param>
          <type>Q &amp;&amp;</type>
          <declname>pair_value</declname>
        </param>
        <briefdescription>
<para>Get the first value (really just the underlying value) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1076" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1076" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a96fab0a544e6cee3a577e568565162d6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Q</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto second</definition>
        <argsstring>(Q &amp;&amp;pair_value) -&gt; decltype(std::get&lt; 1 &gt;(std::forward&lt; Q &gt;(pair_value)))</argsstring>
        <name>second</name>
        <param>
          <type>Q &amp;&amp;</type>
          <declname>pair_value</declname>
        </param>
        <briefdescription>
<para>Get the second value (really just the underlying value) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1080" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1080" bodyend="1082"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Adaptor for map-like structure (true version, must have key_type and mapped_type). </para>
    </briefdescription>
    <detaileddescription>
<para>This wraps a mapped container in a few utilities access it in a general way. </para>
    </detaileddescription>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="1070" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="1067" bodyend="1083"/>
    <listofallmembers>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab3aa810ae0f34874621845b6676c7209" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</scope><name>first</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a716fcc5999bac1265a9e26f6fd599c8e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</scope><name>first_type</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a96fab0a544e6cee3a577e568565162d6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</scope><name>second</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1ab691b73e69e50b53d89839f60e4a1567" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</scope><name>second_type</name></member>
      <member refid="structpxr___c_l_i_1_1_c_l_i_1_1detail_1_1pair__adaptor_3_01_t_00_01conditional__t_3_01false_00_061b9c0d15beb21e206a58583a1ffa357_1a58b363a6c15dff89a9b7fad93191ea96" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::detail::pair_adaptor&lt; T, conditional_t&lt; false, void_t&lt; typename T::value_type::first_type, typename T::value_type::second_type &gt;, void &gt; &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
