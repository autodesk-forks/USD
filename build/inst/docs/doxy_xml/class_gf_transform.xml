<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_transform" kind="class" language="C++" prot="public">
    <compoundname>GfTransform</compoundname>
    <includes refid="transform_8h" local="no">transform.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_transform_1a7562c185a90261e83e6371bd8039f9b8" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _translation</definition>
        <argsstring></argsstring>
        <name>_translation</name>
        <briefdescription>
<para>translation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="234" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_transform_1a0ff5107d3cbc70f76f2a14d097d4671f" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation _rotation</definition>
        <argsstring></argsstring>
        <name>_rotation</name>
        <briefdescription>
<para>rotation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="236" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_transform_1adbdd6861a7f94efd46da9715f454b366" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _scale</definition>
        <argsstring></argsstring>
        <name>_scale</name>
        <briefdescription>
<para>scale factors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="238" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_transform_1a2816f276ab0dcdf8ac0afa13777a4c7f" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GfRotation _pivotOrientation</definition>
        <argsstring></argsstring>
        <name>_pivotOrientation</name>
        <briefdescription>
<para>orientation used for scaling and rotation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="240" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_transform_1a380fd89749a673df21d32017d8d54516" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _pivotPosition</definition>
        <argsstring></argsstring>
        <name>_pivotPosition</name>
        <briefdescription>
<para>center of rotation and scaling </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="242" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_transform_1af02411ea5a36563fbbd2d63c1e3fab5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfTransform</definition>
        <argsstring>()</argsstring>
        <name>GfTransform</name>
        <briefdescription>
<para>The default constructor sets the component values to the identity transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="75" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a330d1cbb221d0039f0c66f920dc0c87d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfTransform</definition>
        <argsstring>(const GfVec3d &amp;scale, const GfRotation &amp;pivotOrientation, const GfRotation &amp;rotation, const GfVec3d &amp;pivotPosition, const GfVec3d &amp;translation)</argsstring>
        <name>GfTransform</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrientation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivotPosition</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the transformation from all component values. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the constructor used by 2x code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="81" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a055e56635185cdec01e3f0b3fb572ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfTransform</definition>
        <argsstring>(const GfVec3d &amp;translation, const GfRotation &amp;rotation, const GfVec3d &amp;scale, const GfVec3d &amp;pivotPosition, const GfRotation &amp;pivotOrientation)</argsstring>
        <name>GfTransform</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivotPosition</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrientation</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the transformation from all component values. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the constructor used by 3x code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="91" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1ad3c42d176c8e40ec59df982131c11a83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfTransform</definition>
        <argsstring>(const GfMatrix4d &amp;m)</argsstring>
        <name>GfTransform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This constructor initializes the transformation with a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_gf_transform_1a053c889166a9e09d667a74d106c06c14" kindref="member">SetMatrix()</ref> for more information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="101" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a9b0fac8eb10b44b6b2f14de09d37379a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        <definition>GF_API GfTransform&amp; Set</definition>
        <argsstring>(const GfVec3d &amp;scale, const GfRotation &amp;pivotOrientation, const GfRotation &amp;rotation, const GfVec3d &amp;pivotPosition, const GfVec3d &amp;translation)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrientation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivotPosition</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Sets the transformation from all component values. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor orders its arguments the way that 2x expects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a58f64970cd7de14ebc942bfa26649bed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        <definition>GfTransform&amp; Set</definition>
        <argsstring>(const GfVec3d &amp;translation, const GfRotation &amp;rotation, const GfVec3d &amp;scale, const GfVec3d &amp;pivotPosition, const GfRotation &amp;pivotOrientation)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivotPosition</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrientation</declname>
        </param>
        <briefdescription>
<para>Sets the transformation from all component values. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor orders its arguments the way that 3x expects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="117" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a053c889166a9e09d667a74d106c06c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        <definition>GF_API GfTransform&amp; SetMatrix</definition>
        <argsstring>(const GfMatrix4d &amp;m)</argsstring>
        <name>SetMatrix</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Sets the transform components to implement the transformation represented by matrix <computeroutput>m</computeroutput> , ignoring any projection. </para>
        </briefdescription>
        <detaileddescription>
<para>This tries to leave the current center unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a0767e58fad64a84980272cd6a05e4e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        <definition>GF_API GfTransform&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the transformation to the identity transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a4d8820a1f1b1ada97c2f189d370d6f9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetScale</definition>
        <argsstring>(const GfVec3d &amp;scale)</argsstring>
        <name>SetScale</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Sets the scale component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="137" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1afe4595f5fc3a5d3e376e2f1f1925d6c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPivotOrientation</definition>
        <argsstring>(const GfRotation &amp;pivotOrient)</argsstring>
        <name>SetPivotOrientation</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrient</declname>
        </param>
        <briefdescription>
<para>Sets the pivot orientation component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="142" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1abf850f5b3da21ad36f9e03b34e8da140" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetScaleOrientation</definition>
        <argsstring>(const GfRotation &amp;pivotOrient)</argsstring>
        <name>SetScaleOrientation</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>pivotOrient</declname>
        </param>
        <briefdescription>
<para>Sets the pivot orientation component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="147" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1ad1ac72a331a5ac590f411b45a7c1ac87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRotation</definition>
        <argsstring>(const GfRotation &amp;rotation)</argsstring>
        <name>SetRotation</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
<para>Sets the rotation component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="152" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1af75cd7922b5001a98479db930eaaf8d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetPivotPosition</definition>
        <argsstring>(const GfVec3d &amp;pivPos)</argsstring>
        <name>SetPivotPosition</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivPos</declname>
        </param>
        <briefdescription>
<para>Sets the pivot position component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="157" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a56f120a492af9828e4955a95809d147f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetCenter</definition>
        <argsstring>(const GfVec3d &amp;pivPos)</argsstring>
        <name>SetCenter</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pivPos</declname>
        </param>
        <briefdescription>
<para>Sets the pivot position component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="162" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a2defa7dda8e9726b45e5e07eaa952b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetTranslation</definition>
        <argsstring>(const GfVec3d &amp;translation)</argsstring>
        <name>SetTranslation</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Sets the translation component, leaving all others untouched. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="167" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a9bb8447813872eb7e5a618cd0b1c6a36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetScale</definition>
        <argsstring>() const</argsstring>
        <name>GetScale</name>
        <briefdescription>
<para>Returns the scale component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="172" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a6ca397cf259aab190a68ef29f7995e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>const GfRotation&amp; GetPivotOrientation</definition>
        <argsstring>() const</argsstring>
        <name>GetPivotOrientation</name>
        <briefdescription>
<para>Returns the pivot orientation component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="177" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1acd599481d93f30ceb09d2bbe0dbc9e66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>const GfRotation&amp; GetScaleOrientation</definition>
        <argsstring>() const</argsstring>
        <name>GetScaleOrientation</name>
        <briefdescription>
<para>Returns the scale orientation component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="182" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1aea848c38adf4fde97f02e6864d31e586" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
        <definition>const GfRotation&amp; GetRotation</definition>
        <argsstring>() const</argsstring>
        <name>GetRotation</name>
        <briefdescription>
<para>Returns the rotation component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="187" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a462d5f4c9ffc871fc94cecef1bbc6031" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetPivotPosition</definition>
        <argsstring>() const</argsstring>
        <name>GetPivotPosition</name>
        <briefdescription>
<para>Returns the pivot position component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="192" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1ae018e3c4438e08cb70037003be80864b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetCenter</definition>
        <argsstring>() const</argsstring>
        <name>GetCenter</name>
        <briefdescription>
<para>Returns the pivot position component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="197" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a25677d7cea1748f66bfe9b23d92ed7e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetTranslation</definition>
        <argsstring>() const</argsstring>
        <name>GetTranslation</name>
        <briefdescription>
<para>Returns the translation component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="202" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1af3004b456a0b44834d14de16dc8c493c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>GF_API GfMatrix4d GetMatrix</definition>
        <argsstring>() const</argsstring>
        <name>GetMatrix</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></computeroutput> that implements the cumulative transformation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a733c672066f13f224f529eefa90b9025" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfTransform &amp;xf) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
          <declname>xf</declname>
        </param>
        <briefdescription>
<para>Component-wise transform equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>All components must match exactly for transforms to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1a8c42ff1f4abff5cc07e665f77a15b8e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfTransform &amp;xf) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
          <declname>xf</declname>
        </param>
        <briefdescription>
<para>Component-wise transform inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>All components must match exactly for transforms to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="217" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_transform_1ad79732cded9d3f39fc109269dabb02d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
        <definition>GF_API GfTransform&amp; operator *=</definition>
        <argsstring>(const GfTransform &amp;xf)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
          <declname>xf</declname>
        </param>
        <briefdescription>
<para>Post-multiplies transform <computeroutput>xf</computeroutput> into this transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="223" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_transform_1a7489b0a3de8ce9df06e4c1bfceb2aa4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_transform" kindref="compound">GfTransform</ref></type>
        <definition>GfTransform operator *</definition>
        <argsstring>(const GfTransform &amp;xf1, const GfTransform &amp;xf2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
          <declname>xf1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_transform" kindref="compound">GfTransform</ref> &amp;</type>
          <declname>xf2</declname>
        </param>
        <briefdescription>
<para>Returns the product of transforms <computeroutput>xf1</computeroutput> and <computeroutput>xf2</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/transform.h" line="226" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="226" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: Compound linear transformation. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a linear transformation specified as a series of individual components: a <emphasis>translation</emphasis>, a <emphasis>rotation</emphasis>, a <emphasis>scale</emphasis>, a <emphasis>pivotPosition</emphasis>, and a <emphasis>pivotOrientation</emphasis>. When applied to a point, the point will be transformed as follows (in order):</para>
<para><itemizedlist>
<listitem><para>Scaled by the <emphasis>scale</emphasis> with respect to <emphasis>pivotPosition</emphasis> and the orientation specified by the <emphasis>pivotOrientation</emphasis>. </para>
</listitem>
<listitem><para>Rotated by the <emphasis>rotation</emphasis> about <emphasis>pivotPosition</emphasis>. </para>
</listitem>
<listitem><para>Translated by <emphasis>Translation</emphasis> </para>
</listitem>
</itemizedlist>
That is, the cumulative matrix that this represents looks like this.</para>
<para><programlisting><codeline><highlight class="normal">M<sp/>=<sp/>-P<sp/>*<sp/>-O<sp/>*<sp/>S<sp/>*<sp/>O<sp/>*<sp/>R<sp/>*<sp/>P<sp/>*<sp/>T</highlight></codeline>
</programlisting></para>
<para>where <itemizedlist>
<listitem><para><emphasis>T</emphasis> is the <emphasis>translation</emphasis> matrix </para>
</listitem>
<listitem><para><emphasis>P</emphasis> is the matrix that translates by <emphasis>pivotPosition</emphasis> </para>
</listitem>
<listitem><para><emphasis>R</emphasis> is the <emphasis>rotation</emphasis> matrix </para>
</listitem>
<listitem><para><emphasis>O</emphasis> is the matrix that rotates to <emphasis>pivotOrientation</emphasis> </para>
</listitem>
<listitem><para><emphasis>S</emphasis> is the <emphasis>scale</emphasis> matrix </para>
</listitem>
</itemizedlist>
</para>
    </detaileddescription>
    <location file="pxr/base/gf/transform.h" line="69" column="1" bodyfile="pxr/base/gf/transform.h" bodystart="69" bodyend="243"/>
    <listofallmembers>
      <member refid="class_gf_transform_1a2816f276ab0dcdf8ac0afa13777a4c7f" prot="private" virt="non-virtual"><scope>GfTransform</scope><name>_pivotOrientation</name></member>
      <member refid="class_gf_transform_1a380fd89749a673df21d32017d8d54516" prot="private" virt="non-virtual"><scope>GfTransform</scope><name>_pivotPosition</name></member>
      <member refid="class_gf_transform_1a0ff5107d3cbc70f76f2a14d097d4671f" prot="private" virt="non-virtual"><scope>GfTransform</scope><name>_rotation</name></member>
      <member refid="class_gf_transform_1adbdd6861a7f94efd46da9715f454b366" prot="private" virt="non-virtual"><scope>GfTransform</scope><name>_scale</name></member>
      <member refid="class_gf_transform_1a7562c185a90261e83e6371bd8039f9b8" prot="private" virt="non-virtual"><scope>GfTransform</scope><name>_translation</name></member>
      <member refid="class_gf_transform_1ae018e3c4438e08cb70037003be80864b" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetCenter</name></member>
      <member refid="class_gf_transform_1af3004b456a0b44834d14de16dc8c493c" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetMatrix</name></member>
      <member refid="class_gf_transform_1a6ca397cf259aab190a68ef29f7995e5a" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetPivotOrientation</name></member>
      <member refid="class_gf_transform_1a462d5f4c9ffc871fc94cecef1bbc6031" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetPivotPosition</name></member>
      <member refid="class_gf_transform_1aea848c38adf4fde97f02e6864d31e586" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetRotation</name></member>
      <member refid="class_gf_transform_1a9bb8447813872eb7e5a618cd0b1c6a36" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetScale</name></member>
      <member refid="class_gf_transform_1acd599481d93f30ceb09d2bbe0dbc9e66" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetScaleOrientation</name></member>
      <member refid="class_gf_transform_1a25677d7cea1748f66bfe9b23d92ed7e2" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GetTranslation</name></member>
      <member refid="class_gf_transform_1af02411ea5a36563fbbd2d63c1e3fab5c" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GfTransform</name></member>
      <member refid="class_gf_transform_1a330d1cbb221d0039f0c66f920dc0c87d" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GfTransform</name></member>
      <member refid="class_gf_transform_1a055e56635185cdec01e3f0b3fb572ba1" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GfTransform</name></member>
      <member refid="class_gf_transform_1ad3c42d176c8e40ec59df982131c11a83" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>GfTransform</name></member>
      <member refid="class_gf_transform_1a8c42ff1f4abff5cc07e665f77a15b8e8" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>operator !=</name></member>
      <member refid="class_gf_transform_1a7489b0a3de8ce9df06e4c1bfceb2aa4f" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>operator *</name></member>
      <member refid="class_gf_transform_1ad79732cded9d3f39fc109269dabb02d1" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>operator *=</name></member>
      <member refid="class_gf_transform_1a733c672066f13f224f529eefa90b9025" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>operator==</name></member>
      <member refid="class_gf_transform_1a9b0fac8eb10b44b6b2f14de09d37379a" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>Set</name></member>
      <member refid="class_gf_transform_1a58f64970cd7de14ebc942bfa26649bed" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>Set</name></member>
      <member refid="class_gf_transform_1a56f120a492af9828e4955a95809d147f" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetCenter</name></member>
      <member refid="class_gf_transform_1a0767e58fad64a84980272cd6a05e4e3e" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetIdentity</name></member>
      <member refid="class_gf_transform_1a053c889166a9e09d667a74d106c06c14" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetMatrix</name></member>
      <member refid="class_gf_transform_1afe4595f5fc3a5d3e376e2f1f1925d6c0" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetPivotOrientation</name></member>
      <member refid="class_gf_transform_1af75cd7922b5001a98479db930eaaf8d1" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetPivotPosition</name></member>
      <member refid="class_gf_transform_1ad1ac72a331a5ac590f411b45a7c1ac87" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetRotation</name></member>
      <member refid="class_gf_transform_1a4d8820a1f1b1ada97c2f189d370d6f9a" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetScale</name></member>
      <member refid="class_gf_transform_1abf850f5b3da21ad36f9e03b34e8da140" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetScaleOrientation</name></member>
      <member refid="class_gf_transform_1a2defa7dda8e9726b45e5e07eaa952b44" prot="public" virt="non-virtual"><scope>GfTransform</scope><name>SetTranslation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
