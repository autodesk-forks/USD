<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_stage_cache" kind="class" language="C++" prot="public">
    <compoundname>UsdStageCache</compoundname>
    <includes refid="stage_cache_8h" local="no">stageCache.h</includes>
    <innerclass refid="struct_usd_stage_cache_1_1_id" prot="public">UsdStageCache::Id</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_usd_stage_cache_1a635bee9968e8b9655ce1bc2b54179a9a" prot="private" static="no">
        <type>struct Usd_StageCacheImpl</type>
        <definition>typedef struct Usd_StageCacheImpl _Impl</definition>
        <argsstring></argsstring>
        <name>_Impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="378" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_stage_cache_1a1330d959056750a36c212e3b71c22d97" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; _Impl &gt;</type>
        <definition>std::unique_ptr&lt;_Impl&gt; _impl</definition>
        <argsstring></argsstring>
        <name>_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="383" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_stage_cache_1a3f0b4c278cb19f9c2b2dbdb065f51e14" prot="private" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex _mutex</definition>
        <argsstring></argsstring>
        <name>_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="384" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_stage_cache_1ab5dc73a26264ad9c8c09a47df68d3ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdStageCache</definition>
        <argsstring>()</argsstring>
        <name>UsdStageCache</name>
        <briefdescription>
<para>Default construct an empty cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a83713300d065975965e76d964b5ba71a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API UsdStageCache</definition>
        <argsstring>(const UsdStageCache &amp;other)</argsstring>
        <name>UsdStageCache</name>
        <param>
          <type>const <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct a new cache as a copy of <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a100d82951608fb7e510541b28b3c48af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API</type>
        <definition>USD_API ~UsdStageCache</definition>
        <argsstring>()</argsstring>
        <name>~UsdStageCache</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a231a99c1563fbb9ff081d8a5da7fe02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
        <definition>USD_API UsdStageCache&amp; operator=</definition>
        <argsstring>(const UsdStageCache &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Replace the contents of this cache with a copy of <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a6cc2c3343d8890093190aa006f67a745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void swap</definition>
        <argsstring>(UsdStageCache &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the contents of this cache with <computeroutput>other</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a09581831acaf70e6b7c5b393ab7312f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; UsdStageRefPtr &gt;</type>
        <definition>USD_API std::vector&lt;UsdStageRefPtr&gt; GetAllStages</definition>
        <argsstring>() const</argsstring>
        <name>GetAllStages</name>
        <briefdescription>
<para>Return a vector containing the stages present in this cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a2d1903b2778975c7f5bd448e0e158e8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <briefdescription>
<para>Return the number of stages present in this cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a8e12342fc420701fbffd97025421575a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Return true if this cache holds no stages, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="198" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a4ead4d21c546f3e674f149b2bc905612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::pair&lt; UsdStageRefPtr, bool &gt;</type>
        <definition>USD_API std::pair&lt;UsdStageRefPtr, bool&gt; RequestStage</definition>
        <argsstring>(UsdStageCacheRequest &amp;&amp;request)</argsstring>
        <name>RequestStage</name>
        <param>
          <type>UsdStageCacheRequest &amp;&amp;</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Find an existing stage in the cache that satisfies <computeroutput>request</computeroutput>, or invoke request.Manufacture() to create one and insert it into the cache. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the resulting stage and a bool indicating whether or not this call manufactured the stage.</para>
<para>This avoids race conditions in concurrent code that can occur using the other public methods. Consider this racy example:</para>
<para><programlisting><codeline><highlight class="normal">if<sp/>(!cache.FindOneMatching(rootLayer))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>stage<sp/>=<sp/>UsdStage::Open(rootLayer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cache.Insert(stage);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This will race with another thread doing the same thing, resulting in two stages with the same root layer inserted in the cache. This is potentially rather inefficient since stage creation can be expensive, depending on how many objects and how many prims &amp; layers the stage contains. <ref refid="class_usd_stage_cache_1a4ead4d21c546f3e674f149b2bc905612" kindref="member">RequestStage()</ref> avoids this by ensuring that there is no race and the stage is created only once.</para>
<para>Note that request should not be retained and must not be reused. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1aa943c9ffa292ed6750c93a939d6a5388" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>USD_API UsdStageRefPtr Find</definition>
        <argsstring>(Id id) const</argsstring>
        <name>Find</name>
        <param>
          <type><ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find the stage in this cache corresponding to <computeroutput>id</computeroutput> in this cache. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>id</computeroutput> is not valid (see <ref refid="struct_usd_stage_cache_1_1_id_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">Id::IsValid()</ref>) or if this cache does not have a stage corresponding to <computeroutput>id</computeroutput>, return null. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a318f0e9417138a4eefc928e969e9f4df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>USD_API UsdStageRefPtr FindOneMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer) const</argsstring>
        <name>FindOneMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <briefdescription>
<para>Find a stage in this cache with <computeroutput>rootLayer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return null. If there is more than one matching stage in this cache, return an arbitrary matching one. See also <ref refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" kindref="member">FindAllMatching()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1ab1d77ce4cd96bf04f084ff322290d601" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>USD_API UsdStageRefPtr FindOneMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer) const</argsstring>
        <name>FindOneMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <briefdescription>
<para>Find a stage in this cache with <computeroutput>rootLayer</computeroutput> and <computeroutput>sessionLayer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return null. If there is more than one matching stage in this cache, return an arbitrary matching one. See also <ref refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" kindref="member">FindAllMatching()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a09e7c1fa6fd8af0f06d441224c34018f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>USD_API UsdStageRefPtr FindOneMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const ArResolverContext &amp;pathResolverContext) const</argsstring>
        <name>FindOneMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <briefdescription>
<para>Find a stage in this cache with <computeroutput>rootLayer</computeroutput> and <computeroutput>pathResolverContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return null. If there is more than one matching stage in this cache, return an arbitrary matching one. <simplesect kind="see"><para><ref refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" kindref="member">FindAllMatching()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a6ca2fe752524412233b2801877572307" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API UsdStageRefPtr</type>
        <definition>USD_API UsdStageRefPtr FindOneMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext) const</argsstring>
        <name>FindOneMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <briefdescription>
<para>Find a stage in this cache with <computeroutput>rootLayer</computeroutput>, <computeroutput>sessionLayer</computeroutput>, and <computeroutput>pathResolverContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return null. If there is more than one matching stage in this cache, return an arbitrary matching one. <simplesect kind="see"><para><ref refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" kindref="member">FindAllMatching()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; UsdStageRefPtr &gt;</type>
        <definition>USD_API std::vector&lt;UsdStageRefPtr&gt; FindAllMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer) const</argsstring>
        <name>FindAllMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <briefdescription>
<para>Find all stages in this cache with <computeroutput>rootLayer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return an empty vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1af56e46b01b82cd273bc2b5cc8474f065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; UsdStageRefPtr &gt;</type>
        <definition>USD_API std::vector&lt;UsdStageRefPtr&gt; FindAllMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer) const</argsstring>
        <name>FindAllMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <briefdescription>
<para>Find all stages in this cache with <computeroutput>rootLayer</computeroutput> and <computeroutput>sessionLayer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return an empty vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a5a664b95d04eed7dacc7dd65bf95ad2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; UsdStageRefPtr &gt;</type>
        <definition>USD_API std::vector&lt;UsdStageRefPtr&gt; FindAllMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const ArResolverContext &amp;pathResolverContext) const</argsstring>
        <name>FindAllMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <briefdescription>
<para>Find all stages in this cache with <computeroutput>rootLayer</computeroutput> and <computeroutput>pathResolverContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return an empty vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a33e9e5980ebbe24e1c13597dcc1a60d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; UsdStageRefPtr &gt;</type>
        <definition>USD_API std::vector&lt;UsdStageRefPtr&gt; FindAllMatching</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext) const</argsstring>
        <name>FindAllMatching</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <briefdescription>
<para>Find all stages in this cache with <computeroutput>rootLayer</computeroutput>, <computeroutput>sessionLayer</computeroutput>, and <computeroutput>pathResolverContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no matching stage in this cache, return an empty vector. If there is more than one matching stage in this cache, return an arbitrary matching one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a2dd79fdcace8a44088f25e29a517b521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref></type>
        <definition>USD_API Id GetId</definition>
        <argsstring>(const UsdStageRefPtr &amp;stage) const</argsstring>
        <name>GetId</name>
        <param>
          <type>const UsdStageRefPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Return the <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref> associated with <computeroutput>stage</computeroutput> in this cache. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>stage</computeroutput> is not present in this cache, return an invalid <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a261371f98556781a039419355515d2fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(const UsdStageRefPtr &amp;stage) const</argsstring>
        <name>Contains</name>
        <param>
          <type>const UsdStageRefPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>stage</computeroutput> is present in this cache, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="306" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a27e2bf93efbb82a16b37b91ca5411bf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Contains</definition>
        <argsstring>(Id id) const</argsstring>
        <name>Contains</name>
        <param>
          <type><ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>id</computeroutput> is present in this cache, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="311" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1ab2629465d95c0c1f536879802f33b398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref></type>
        <definition>USD_API Id Insert</definition>
        <argsstring>(const UsdStageRefPtr &amp;stage)</argsstring>
        <name>Insert</name>
        <param>
          <type>const UsdStageRefPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Insert <computeroutput>stage</computeroutput> into this cache and return its associated <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given <computeroutput>stage</computeroutput> is already present in this cache, simply return its associated <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a956778102e7b381797fed5db7f285b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Erase</definition>
        <argsstring>(Id id)</argsstring>
        <name>Erase</name>
        <param>
          <type><ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">Id</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Erase the stage identified by <computeroutput>id</computeroutput> from this cache and return true. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>id</computeroutput> is invalid or there is no associated stage in this cache, do nothing and return false. Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1aa86dd5660941598a07187008f68b306e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Erase</definition>
        <argsstring>(const UsdStageRefPtr &amp;stage)</argsstring>
        <name>Erase</name>
        <param>
          <type>const UsdStageRefPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Erase <computeroutput>stage</computeroutput> from this cache and return true. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>stage</computeroutput> is not present in this cache, do nothing and return false. Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a154b408376290f8d0177a4fc9034dae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t EraseAll</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer)</argsstring>
        <name>EraseAll</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <briefdescription>
<para>Erase all stages present in the cache with <computeroutput>rootLayer</computeroutput> and return the number erased. </para>
        </briefdescription>
        <detaileddescription>
<para>Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1af6690ef679763123a475660f2fef7c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t EraseAll</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer)</argsstring>
        <name>EraseAll</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <briefdescription>
<para>Erase all stages present in the cache with <computeroutput>rootLayer</computeroutput> and <computeroutput>sessionLayer</computeroutput> and return the number erased. </para>
        </briefdescription>
        <detaileddescription>
<para>Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1adf5ed71389379fbe30086ec5b33b2a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API size_t</type>
        <definition>USD_API size_t EraseAll</definition>
        <argsstring>(const SdfLayerHandle &amp;rootLayer, const SdfLayerHandle &amp;sessionLayer, const ArResolverContext &amp;pathResolverContext)</argsstring>
        <name>EraseAll</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>rootLayer</declname>
        </param>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>sessionLayer</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolver_context" kindref="compound">ArResolverContext</ref> &amp;</type>
          <declname>pathResolverContext</declname>
        </param>
        <briefdescription>
<para>Erase all stages present in the cache with <computeroutput>rootLayer</computeroutput>, <computeroutput>sessionLayer</computeroutput>, and <computeroutput>pathResolverContext</computeroutput> and return the number erased. </para>
        </briefdescription>
        <detaileddescription>
<para>Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1af725b80cd09ad1809f16c75747313c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Remove all entries from this cache, leaving it empty and equivalent to a default-constructed cache. </para>
        </briefdescription>
        <detaileddescription>
<para>Since the cache contains UsdStageRefPtr, erasing a stage from the cache will only destroy the stage if no other UsdStageRefPtrs exist referring to it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1adaf8ed1f2b26778b1ad95c5774c63cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void SetDebugName</definition>
        <argsstring>(const std::string &amp;debugName)</argsstring>
        <name>SetDebugName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>debugName</declname>
        </param>
        <briefdescription>
<para>Assign a debug name to this cache. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be emitted in debug output messages when the USD_STAGE_CACHES debug flag is enabled. If set to the empty string, the cache&apos;s address will be used instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_stage_cache_1a83e6e2b08b031b14ebc05e65b33c591c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::string</type>
        <definition>USD_API std::string GetDebugName</definition>
        <argsstring>() const</argsstring>
        <name>GetDebugName</name>
        <briefdescription>
<para>Retrieve this cache&apos;s debug name, set with <ref refid="class_usd_stage_cache_1adaf8ed1f2b26778b1ad95c5774c63cbc" kindref="member">SetDebugName()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no debug name has been assigned, return the empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="375" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_stage_cache_1a0f52d7552155978aefba607343bbdcb3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(UsdStageCache &amp;lhs, UsdStageCache &amp;rhs)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/stageCache.h" line="378" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="378" bodyend="380"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A strongly concurrency safe collection of UsdStageRefPtr s, enabling sharing across multiple clients and threads. </para>
    </briefdescription>
    <detaileddescription>
<para>See <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> for typical use cases finding <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> s in a cache and publishing <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> s to a cache.</para>
<para><ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> is strongly thread safe: all operations other than construction and destruction may be performed concurrently.</para>
<para>Clients typically populate and fetch <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> s in caches by binding a <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> object to a cache, then using the <ref refid="class_usd_stage_1abd74eb9ec70572c2dadaf4cd07144380" kindref="member">UsdStage::Open()</ref> API. See <ref refid="class_usd_stage_cache_context" kindref="compound">UsdStageCacheContext</ref> for more details. Clients may also populate and fetch directly via <ref refid="class_usd_stage_cache_1ab2629465d95c0c1f536879802f33b398" kindref="member">UsdStageCache::Insert()</ref>, <ref refid="class_usd_stage_cache_1aa943c9ffa292ed6750c93a939d6a5388" kindref="member">UsdStageCache::Find()</ref>, <ref refid="class_usd_stage_cache_1a318f0e9417138a4eefc928e969e9f4df" kindref="member">UsdStageCache::FindOneMatching()</ref>, and <ref refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" kindref="member">UsdStageCache::FindAllMatching()</ref> API.</para>
<para>Caches provide a mechanism that associates a lightweight key, <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">UsdStageCache::Id</ref>, with a cached stage. A <ref refid="struct_usd_stage_cache_1_1_id" kindref="compound">UsdStageCache::Id</ref> can be converted to and from long int and string. This can be useful for communicating within a third party application that cannot transmit arbitrary C++ objects. See <ref refid="class_usd_stage_cache_1a2dd79fdcace8a44088f25e29a517b521" kindref="member">UsdStageCache::GetId()</ref>.</para>
<para>Clients may iterate all cache elements using <ref refid="class_usd_stage_cache_1a09581831acaf70e6b7c5b393ab7312f1" kindref="member">UsdStageCache::GetAllStages()</ref> and remove elements with <ref refid="class_usd_stage_cache_1a956778102e7b381797fed5db7f285b70" kindref="member">UsdStageCache::Erase()</ref>, <ref refid="class_usd_stage_cache_1a154b408376290f8d0177a4fc9034dae8" kindref="member">UsdStageCache::EraseAll()</ref>, and <ref refid="class_usd_stage_cache_1af725b80cd09ad1809f16c75747313c6c" kindref="member">UsdStageCache::Clear()</ref>.</para>
<para>Note that this class is a regular type: it can be copied and assigned at will. It is not a singleton. Also, since it holds a collection of UsdStageRefPtr objects, copying it does not create new <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> instances, it merely copies the RefPtrs.</para>
<para>Enabling the USD_STAGE_CACHE TF_DEBUG code will issue debug output for <ref refid="class_usd_stage_cache" kindref="compound">UsdStageCache</ref> Find/Insert/Erase/Clear operations. Also see <ref refid="class_usd_stage_cache_1adaf8ed1f2b26778b1ad95c5774c63cbc" kindref="member">UsdStageCache::SetDebugName()</ref> and <ref refid="class_usd_stage_cache_1a83e6e2b08b031b14ebc05e65b33c591c" kindref="member">UsdStageCache::GetDebugName()</ref>. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/stageCache.h" line="85" column="1" bodyfile="pxr/usd/usd/stageCache.h" bodystart="84" bodyend="385"/>
    <listofallmembers>
      <member refid="class_usd_stage_cache_1a635bee9968e8b9655ce1bc2b54179a9a" prot="private" virt="non-virtual"><scope>UsdStageCache</scope><name>_Impl</name></member>
      <member refid="class_usd_stage_cache_1a1330d959056750a36c212e3b71c22d97" prot="private" virt="non-virtual"><scope>UsdStageCache</scope><name>_impl</name></member>
      <member refid="class_usd_stage_cache_1a3f0b4c278cb19f9c2b2dbdb065f51e14" prot="private" virt="non-virtual"><scope>UsdStageCache</scope><name>_mutex</name></member>
      <member refid="class_usd_stage_cache_1af725b80cd09ad1809f16c75747313c6c" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Clear</name></member>
      <member refid="class_usd_stage_cache_1a261371f98556781a039419355515d2fd" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Contains</name></member>
      <member refid="class_usd_stage_cache_1a27e2bf93efbb82a16b37b91ca5411bf7" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Contains</name></member>
      <member refid="class_usd_stage_cache_1a956778102e7b381797fed5db7f285b70" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Erase</name></member>
      <member refid="class_usd_stage_cache_1aa86dd5660941598a07187008f68b306e" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Erase</name></member>
      <member refid="class_usd_stage_cache_1a154b408376290f8d0177a4fc9034dae8" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>EraseAll</name></member>
      <member refid="class_usd_stage_cache_1af6690ef679763123a475660f2fef7c27" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>EraseAll</name></member>
      <member refid="class_usd_stage_cache_1adf5ed71389379fbe30086ec5b33b2a87" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>EraseAll</name></member>
      <member refid="class_usd_stage_cache_1aa943c9ffa292ed6750c93a939d6a5388" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Find</name></member>
      <member refid="class_usd_stage_cache_1ad474bff3fd954eba903d6b512d07d5bb" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindAllMatching</name></member>
      <member refid="class_usd_stage_cache_1af56e46b01b82cd273bc2b5cc8474f065" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindAllMatching</name></member>
      <member refid="class_usd_stage_cache_1a5a664b95d04eed7dacc7dd65bf95ad2b" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindAllMatching</name></member>
      <member refid="class_usd_stage_cache_1a33e9e5980ebbe24e1c13597dcc1a60d6" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindAllMatching</name></member>
      <member refid="class_usd_stage_cache_1a318f0e9417138a4eefc928e969e9f4df" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindOneMatching</name></member>
      <member refid="class_usd_stage_cache_1ab1d77ce4cd96bf04f084ff322290d601" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindOneMatching</name></member>
      <member refid="class_usd_stage_cache_1a09e7c1fa6fd8af0f06d441224c34018f" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindOneMatching</name></member>
      <member refid="class_usd_stage_cache_1a6ca2fe752524412233b2801877572307" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>FindOneMatching</name></member>
      <member refid="class_usd_stage_cache_1a09581831acaf70e6b7c5b393ab7312f1" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>GetAllStages</name></member>
      <member refid="class_usd_stage_cache_1a83e6e2b08b031b14ebc05e65b33c591c" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>GetDebugName</name></member>
      <member refid="class_usd_stage_cache_1a2dd79fdcace8a44088f25e29a517b521" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>GetId</name></member>
      <member refid="class_usd_stage_cache_1ab2629465d95c0c1f536879802f33b398" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Insert</name></member>
      <member refid="class_usd_stage_cache_1a8e12342fc420701fbffd97025421575a" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>IsEmpty</name></member>
      <member refid="class_usd_stage_cache_1a231a99c1563fbb9ff081d8a5da7fe02b" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>operator=</name></member>
      <member refid="class_usd_stage_cache_1a4ead4d21c546f3e674f149b2bc905612" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>RequestStage</name></member>
      <member refid="class_usd_stage_cache_1adaf8ed1f2b26778b1ad95c5774c63cbc" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>SetDebugName</name></member>
      <member refid="class_usd_stage_cache_1a2d1903b2778975c7f5bd448e0e158e8f" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>Size</name></member>
      <member refid="class_usd_stage_cache_1a6cc2c3343d8890093190aa006f67a745" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>swap</name></member>
      <member refid="class_usd_stage_cache_1a0f52d7552155978aefba607343bbdcb3" prot="private" virt="non-virtual"><scope>UsdStageCache</scope><name>swap</name></member>
      <member refid="class_usd_stage_cache_1ab5dc73a26264ad9c8c09a47df68d3ea4" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>UsdStageCache</name></member>
      <member refid="class_usd_stage_cache_1a83713300d065975965e76d964b5ba71a" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>UsdStageCache</name></member>
      <member refid="class_usd_stage_cache_1a100d82951608fb7e510541b28b3c48af" prot="public" virt="non-virtual"><scope>UsdStageCache</scope><name>~UsdStageCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
