<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_scene_index_plugin_registry" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdSceneIndexPluginRegistry</compoundname>
    <basecompoundref refid="class_hf_plugin_registry" prot="public" virt="non-virtual">HfPluginRegistry</basecompoundref>
    <innerclass refid="struct_hd_scene_index_plugin_registry_1_1___entry" prot="private">HdSceneIndexPluginRegistry::_Entry</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869" prot="public" static="no" strong="no">
        <type></type>
        <name>InsertionOrder</name>
        <enumvalue id="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869a7deeb83d46d3c96a8561009fe6062ebc" prot="public">
          <name>InsertionOrderAtStart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869a461be03c0c38c59a84820c541af59855" prot="public">
          <name>InsertionOrderAtEnd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="87" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1a16e4acdc90f6a98a7087eff19cfaaada" prot="public" static="no">
        <type>int</type>
        <definition>using InsertionPhase =  int</definition>
        <argsstring></argsstring>
        <name>InsertionPhase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="92" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1a598c7d40a1d32128789c52b938c6e478" prot="public" static="no">
        <type>std::function&lt; HdSceneIndexBaseRefPtr(const std::string &amp;renderInstanceId, const HdSceneIndexBaseRefPtr &amp;inputScene, const HdContainerDataSourceHandle &amp;inputArgs)&gt;</type>
        <definition>using SceneIndexAppendCallback =  std::function&lt; HdSceneIndexBaseRefPtr( const std::string &amp;renderInstanceId, const HdSceneIndexBaseRefPtr &amp;inputScene, const HdContainerDataSourceHandle &amp;inputArgs)&gt;</definition>
        <argsstring></argsstring>
        <name>SceneIndexAppendCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="111" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1a8647e32999556a888f92e5551f1760a5" prot="private" static="no">
        <type>std::vector&lt; _Entry &gt;</type>
        <definition>using _EntryList =  std::vector&lt;_Entry&gt;</definition>
        <argsstring></argsstring>
        <name>_EntryList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="178" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1a1fa868438fe8cc1a21cf1cd319fb8d48" prot="private" static="no">
        <type>std::map&lt; InsertionPhase, _EntryList &gt;</type>
        <definition>using _PhasesMap =  std::map&lt;InsertionPhase, _EntryList&gt;</definition>
        <argsstring></argsstring>
        <name>_PhasesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="179" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1ac7fe76b2bec7bc31126e85e97eaa2494" prot="private" static="no">
        <type>std::map&lt; std::string, _PhasesMap &gt;</type>
        <definition>using _RenderersMap =  std::map&lt;std::string, _PhasesMap&gt;</definition>
        <argsstring></argsstring>
        <name>_RenderersMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="180" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_scene_index_plugin_registry_1a158737a11497f3e6822d432f565ccca2" prot="private" static="no">
        <type>std::map&lt; std::string, <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &gt;</type>
        <definition>using _PreloadMap =  std::map&lt;std::string, TfTokenVector&gt;</definition>
        <argsstring></argsstring>
        <name>_PreloadMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="194" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hd_scene_index_plugin_registry_1ae1e6233778feb3fe2f477b422979ea81" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfSingleton&lt; HdSceneIndexPluginRegistry &gt;</definition>
        <argsstring></argsstring>
        <name>TfSingleton&lt; HdSceneIndexPluginRegistry &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="147" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_scene_index_plugin_registry_1afa7be99175531efcce1a5a3df5524f05" prot="private" static="no" mutable="no">
        <type>_RenderersMap</type>
        <definition>_RenderersMap _sceneIndicesForRenderers</definition>
        <argsstring></argsstring>
        <name>_sceneIndicesForRenderers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="188" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_scene_index_plugin_registry_1a1bf8d6a9f688ff140fc59f68a77e1e64" prot="private" static="no" mutable="no">
        <type>_PreloadMap</type>
        <definition>_PreloadMap _preloadsForRenderer</definition>
        <argsstring></argsstring>
        <name>_preloadsForRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="195" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a87b46c12a719dd8ab1cd522f096abe2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdSceneIndexPluginRegistry &amp;</type>
        <definition>static HD_API HdSceneIndexPluginRegistry&amp; GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
<para>Returns the singleton registry for <computeroutput>HdSceneIndexPlugin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a9a35e98db745020b8b860c67a5c2bb64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Bases</declname>
            <defname>Bases</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Define</definition>
        <argsstring>()</argsstring>
        <name>Define</name>
        <briefdescription>
<para>Entry point for defining an HdSceneIndexPlugin plugin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="60" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="200" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a96e662821772f38b0517b229cfb82eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdSceneIndexBaseRefPtr</type>
        <definition>HD_API HdSceneIndexBaseRefPtr AppendSceneIndex</definition>
        <argsstring>(const TfToken &amp;sceneIndexPluginId, const HdSceneIndexBaseRefPtr &amp;inputScene, const HdContainerDataSourceHandle &amp;inputArgs)</argsstring>
        <name>AppendSceneIndex</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sceneIndexPluginId</declname>
        </param>
        <param>
          <type>const HdSceneIndexBaseRefPtr &amp;</type>
          <declname>inputScene</declname>
        </param>
        <param>
          <type>const HdContainerDataSourceHandle &amp;</type>
          <declname>inputArgs</declname>
        </param>
        <briefdescription>
<para>Given a specific scene index plug-in id, give the plug-in a chance to add scene indices to the end of the chain. </para>
        </briefdescription>
        <detaileddescription>
<para>Return value is the last scene index <ndash/> or inputScene if the plug-in chooses not to act. Input arguments may be nullptr if not relevant to this plug-in. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a287b61a73a42a311dda35b4f3754e7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdSceneIndexBaseRefPtr</type>
        <definition>HD_API HdSceneIndexBaseRefPtr AppendSceneIndicesForRenderer</definition>
        <argsstring>(const std::string &amp;rendererDisplayName, const HdSceneIndexBaseRefPtr &amp;inputScene, const std::string &amp;renderInstanceId=std::string())</argsstring>
        <name>AppendSceneIndicesForRenderer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rendererDisplayName</declname>
        </param>
        <param>
          <type>const HdSceneIndexBaseRefPtr &amp;</type>
          <declname>inputScene</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>renderInstanceId</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Append scene indices generated by plug-ins registered (via RegisterSceneIndexForRenderer) for this renderer. </para>
        </briefdescription>
        <detaileddescription>
<para>Return value is the last scene index <ndash/> or inputScene if no plugins are registered or taking action. This also includes plug-ins registered for all renderers (via an empty rendererDisplayName) to be added in advance of any registered for the specified rendeer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1aac9190e7d0c36d230dbdc0f79c93eb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void RegisterSceneIndexForRenderer</definition>
        <argsstring>(const std::string &amp;rendererDisplayName, const TfToken &amp;sceneIndexPluginId, const HdContainerDataSourceHandle &amp;inputArgs, InsertionPhase insertionPhase, InsertionOrder insertionOrder)</argsstring>
        <name>RegisterSceneIndexForRenderer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rendererDisplayName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sceneIndexPluginId</declname>
        </param>
        <param>
          <type>const HdContainerDataSourceHandle &amp;</type>
          <declname>inputArgs</declname>
        </param>
        <param>
          <type>InsertionPhase</type>
          <declname>insertionPhase</declname>
        </param>
        <param>
          <type>InsertionOrder</type>
          <declname>insertionOrder</declname>
        </param>
        <briefdescription>
<para>Register a scene index to be instantiated for a specified renderer (or all renderers if rendererDisplayName is empty). </para>
        </briefdescription>
        <detaileddescription>
<para>Insertion phase is a broad ordering value with lower values indicating earlier instantiation (possibly given render plugin-specific meaning via enum values). Insertion order indicates whether this entry should go at the start or end of the specified phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a93e4da0dfd854927410257a219aeb341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void RegisterSceneIndexForRenderer</definition>
        <argsstring>(const std::string &amp;rendererDisplayName, SceneIndexAppendCallback callback, const HdContainerDataSourceHandle &amp;inputArgs, InsertionPhase insertionPhase, InsertionOrder insertionOrder)</argsstring>
        <name>RegisterSceneIndexForRenderer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>rendererDisplayName</declname>
        </param>
        <param>
          <type>SceneIndexAppendCallback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const HdContainerDataSourceHandle &amp;</type>
          <declname>inputArgs</declname>
        </param>
        <param>
          <type>InsertionPhase</type>
          <declname>insertionPhase</declname>
        </param>
        <param>
          <type>InsertionOrder</type>
          <declname>insertionOrder</declname>
        </param>
        <briefdescription>
<para>Register a scene index to be instantiated via a callback for a specified renderer (or all renderers if rendererDisplayName is empty). </para>
        </briefdescription>
        <detaileddescription>
<para>This is most useful for application-specific behavior which wants to append and manage scene index instances associated with a specific render. To aid in that association, the callback is provided a renderInstanceId value typically defined by the application itself.</para>
<para>Insertion phase is a broad ordering value with lower values indicating earlier instantiation (possibly given render plugin-specific meaning via enum values). Insertion order indicates whether this entry should go at the start or end of the specified phase.</para>
<para><simplesect kind="note"><para>This method should be invoked <emphasis>before</emphasis> render index construction when Hydra scene index emulation is enabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="136" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1ac9bc0bdb8446367a031cd6a2a72888ba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CollectAdditionalMetadata</definition>
        <argsstring>(const PlugRegistry &amp;plugRegistry, const TfType &amp;pluginType) override</argsstring>
        <name>_CollectAdditionalMetadata</name>
        <param>
          <type>const <ref refid="class_plug_registry" kindref="compound">PlugRegistry</ref> &amp;</type>
          <declname>plugRegistry</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>pluginType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1ad0f639ec3bd34da0fba0c875907de628" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdSceneIndexPluginRegistry</definition>
        <argsstring>()</argsstring>
        <name>HdSceneIndexPluginRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a96d54fc8f12a48016a8040e3aca6343d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HdSceneIndexPluginRegistry</definition>
        <argsstring>() override</argsstring>
        <name>~HdSceneIndexPluginRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1a4a4d0396eaf6877ef6556780f39abf95" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdSceneIndexPlugin *</type>
        <definition>HdSceneIndexPlugin* _GetSceneIndexPlugin</definition>
        <argsstring>(const TfToken &amp;pluginId)</argsstring>
        <name>_GetSceneIndexPlugin</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>pluginId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_index_plugin_registry_1af03966335fab786cd062eeafc8b57473" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdSceneIndexBaseRefPtr</type>
        <definition>HdSceneIndexBaseRefPtr _AppendForPhases</definition>
        <argsstring>(const HdSceneIndexBaseRefPtr &amp;inputScene, const _PhasesMap &amp;phasesMap, const HdContainerDataSourceHandle &amp;argsUnderlay, const std::string &amp;renderInstanceId)</argsstring>
        <name>_AppendForPhases</name>
        <param>
          <type>const HdSceneIndexBaseRefPtr &amp;</type>
          <declname>inputScene</declname>
        </param>
        <param>
          <type>const _PhasesMap &amp;</type>
          <declname>phasesMap</declname>
        </param>
        <param>
          <type>const HdContainerDataSourceHandle &amp;</type>
          <declname>argsUnderlay</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>renderInstanceId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="182" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2806">
        <label>HfPluginRegistry</label>
        <link refid="class_hf_plugin_registry"/>
      </node>
      <node id="2805">
        <label>HdSceneIndexPluginRegistry</label>
        <childnode refid="2806" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2808">
        <label>HfPluginRegistry</label>
        <link refid="class_hf_plugin_registry"/>
      </node>
      <node id="2807">
        <label>HdSceneIndexPluginRegistry</label>
        <childnode refid="2808" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hd/sceneIndexPluginRegistry.h" line="48" column="1" bodyfile="pxr/imaging/hd/sceneIndexPluginRegistry.h" bodystart="47" bodyend="197"/>
    <listofallmembers>
      <member refid="class_hd_scene_index_plugin_registry_1af03966335fab786cd062eeafc8b57473" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_AppendForPhases</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1ac9bc0bdb8446367a031cd6a2a72888ba" prot="protected" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_CollectAdditionalMetadata</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a8647e32999556a888f92e5551f1760a5" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_EntryList</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a4a4d0396eaf6877ef6556780f39abf95" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_GetSceneIndexPlugin</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a1fa868438fe8cc1a21cf1cd319fb8d48" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_PhasesMap</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a158737a11497f3e6822d432f565ccca2" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_PreloadMap</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a1bf8d6a9f688ff140fc59f68a77e1e64" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_preloadsForRenderer</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1ac7fe76b2bec7bc31126e85e97eaa2494" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_RenderersMap</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1afa7be99175531efcce1a5a3df5524f05" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>_sceneIndicesForRenderers</name></member>
      <member refid="class_hf_plugin_registry_1a575a9dfe97fd1136df95cdcb5796b106" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>AddPluginReference</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a96e662821772f38b0517b229cfb82eab" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>AppendSceneIndex</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a287b61a73a42a311dda35b4f3754e7bc" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>AppendSceneIndicesForRenderer</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a9a35e98db745020b8b860c67a5c2bb64" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>Define</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a87b46c12a719dd8ab1cd522f096abe2e" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>GetInstance</name></member>
      <member refid="class_hf_plugin_registry_1adc57c0b7f2c83f138e6e59113b90a87e" prot="protected" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>GetPlugin</name></member>
      <member refid="class_hf_plugin_registry_1aa769b020f0f9e34c4bec190456645db4" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>GetPluginDesc</name></member>
      <member refid="class_hf_plugin_registry_1a9485c432e6f61ffdc0663b700bf94844" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>GetPluginDescs</name></member>
      <member refid="class_hf_plugin_registry_1affbd654d94df3e82ad404e1314787e02" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>GetPluginId</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1ad0f639ec3bd34da0fba0c875907de628" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>HdSceneIndexPluginRegistry</name></member>
      <member refid="class_hf_plugin_registry_1a04183e446211ba6400466634b87fe6f0" prot="protected" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>HfPluginRegistry</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>InsertionOrder</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869a461be03c0c38c59a84820c541af59855" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>InsertionOrderAtEnd</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a9a000315f1790a399cce2b6264b89869a7deeb83d46d3c96a8561009fe6062ebc" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>InsertionOrderAtStart</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a16e4acdc90f6a98a7087eff19cfaaada" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>InsertionPhase</name></member>
      <member refid="class_hf_plugin_registry_1a926c8e66084a2838c1ccc9729341a1c6" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>IsRegisteredPlugin</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1aac9190e7d0c36d230dbdc0f79c93eb8d" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>RegisterSceneIndexForRenderer</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a93e4da0dfd854927410257a219aeb341" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>RegisterSceneIndexForRenderer</name></member>
      <member refid="class_hf_plugin_registry_1a37c659eb25f556f9d3ccf5bea3fd885e" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>ReleasePlugin</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a598c7d40a1d32128789c52b938c6e478" prot="public" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>SceneIndexAppendCallback</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1ae1e6233778feb3fe2f477b422979ea81" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>TfSingleton&lt; HdSceneIndexPluginRegistry &gt;</name></member>
      <member refid="class_hd_scene_index_plugin_registry_1a96d54fc8f12a48016a8040e3aca6343d" prot="private" virt="non-virtual"><scope>HdSceneIndexPluginRegistry</scope><name>~HdSceneIndexPluginRegistry</name></member>
      <member refid="class_hf_plugin_registry_1ada2cb686c326cb80eae23a432e810a4c" prot="protected" virt="virtual"><scope>HdSceneIndexPluginRegistry</scope><name>~HfPluginRegistry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
