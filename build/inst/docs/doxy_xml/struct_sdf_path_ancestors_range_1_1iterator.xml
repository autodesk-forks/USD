<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_sdf_path_ancestors_range_1_1iterator" kind="struct" language="C++" prot="public">
    <compoundname>SdfPathAncestorsRange::iterator</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_sdf_path_ancestors_range_1_1iterator_1a6b137a24d9328a60aef01d0f938cf0c3" prot="public" static="no">
        <type>std::forward_iterator_tag</type>
        <definition>using iterator_category =  std::forward_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1101" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_sdf_path_ancestors_range_1_1iterator_1a9a5c4c902820971bbff87ff14437345e" prot="public" static="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>using value_type =  SdfPath</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1102" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_sdf_path_ancestors_range_1_1iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1103" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_sdf_path_ancestors_range_1_1iterator_1aaa7c867ce8cef55ff2e7242ec4b33b44" prot="public" static="no">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>using reference =  const SdfPath&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1104" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_sdf_path_ancestors_range_1_1iterator_1a19d9f56256f1906b53fd2d39126d2a11" prot="public" static="no">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> *</type>
        <definition>using pointer =  const SdfPath*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1105" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_sdf_path_ancestors_range_1_1iterator_1aa304c6ad1391da3e54231de29ffddfd0" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _path</definition>
        <argsstring></argsstring>
        <name>_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1129" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1a24cde6689f6ea8dcb4cfbab07284fc0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>iterator</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>iterator</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1107" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1107" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1a230cbb7a1d56ec8edb03f35e01525409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iterator</definition>
        <argsstring>()=default</argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1a8f0f7c1dfccf2c3931d00beae7be8931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API iterator &amp;</type>
        <definition>SDF_API iterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1a84aa306759cf35c10570f07f95b8c011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>const SdfPath&amp; operator *</definition>
        <argsstring>() const</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1114" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1114" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1ada5b9aba5da1d014ea45cd70486117a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> *</type>
        <definition>const SdfPath* operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1116" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1116" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1ac001c2d252ef0b5a437b2f5c0f35b1a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const iterator &amp;o) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1118" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1118" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_ancestors_range_1_1iterator_1a1703e3cfcad23e7f12450505ac4f4716" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const iterator &amp;o) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1120" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1120" bodyend="1120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="struct_sdf_path_ancestors_range_1_1iterator_1a044088600ff0bb99f705ed1eced274f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API friend difference_type</type>
        <definition>SDF_API friend difference_type distance</definition>
        <argsstring>(const iterator &amp;first, const iterator &amp;last)</argsstring>
        <name>distance</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const iterator &amp;</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Return the distance between two iterators. </para>
        </briefdescription>
        <detaileddescription>
<para>It is only valid to compute the distance between paths that share a common prefix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/path.h" line="1126" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/sdf/path.h" line="1100" column="1" bodyfile="pxr/usd/sdf/path.h" bodystart="1100" bodyend="1130"/>
    <listofallmembers>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1aa304c6ad1391da3e54231de29ffddfd0" prot="private" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>_path</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1ace405568d0b2f3fad4990044252c7732" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>difference_type</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a044088600ff0bb99f705ed1eced274f7" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>distance</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a24cde6689f6ea8dcb4cfbab07284fc0a" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>iterator</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a230cbb7a1d56ec8edb03f35e01525409" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>iterator</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a6b137a24d9328a60aef01d0f938cf0c3" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>iterator_category</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a84aa306759cf35c10570f07f95b8c011" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>operator *</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a1703e3cfcad23e7f12450505ac4f4716" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>operator!=</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a8f0f7c1dfccf2c3931d00beae7be8931" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>operator++</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1ada5b9aba5da1d014ea45cd70486117a1" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>operator-&gt;</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1ac001c2d252ef0b5a437b2f5c0f35b1a1" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>operator==</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a19d9f56256f1906b53fd2d39126d2a11" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>pointer</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1aaa7c867ce8cef55ff2e7242ec4b33b44" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>reference</name></member>
      <member refid="struct_sdf_path_ancestors_range_1_1iterator_1a9a5c4c902820971bbff87ff14437345e" prot="public" virt="non-virtual"><scope>SdfPathAncestorsRange::iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
