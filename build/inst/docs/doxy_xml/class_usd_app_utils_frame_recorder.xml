<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_app_utils_frame_recorder" kind="class" language="C++" prot="public">
    <compoundname>UsdAppUtilsFrameRecorder</compoundname>
    <includes refid="frame_recorder_8h" local="no">frameRecorder.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a15d9940c602f76e2763753bf2857e0fb" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_imaging_g_l_engine" kindref="compound">UsdImagingGLEngine</ref></type>
        <definition>UsdImagingGLEngine _imagingEngine</definition>
        <argsstring></argsstring>
        <name>_imagingEngine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="152" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a32e9bc7a46268418a95cad9a6912820a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _imageWidth</definition>
        <argsstring></argsstring>
        <name>_imageWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="153" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a10aceabf75ae5f07210f6afa57468719" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float _complexity</definition>
        <argsstring></argsstring>
        <name>_complexity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="154" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a5eeaf00e003a1b0f1954bb6d22370608" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _colorCorrectionMode</definition>
        <argsstring></argsstring>
        <name>_colorCorrectionMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="155" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a1e05f6237243e03dde2a664fc0e84288" prot="private" static="no" mutable="no">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _purposes</definition>
        <argsstring></argsstring>
        <name>_purposes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="156" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_usd_app_utils_frame_recorder_1a4a83524d0b8a98460457018fa9fcc428" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _renderSettingsPrimPath</definition>
        <argsstring></argsstring>
        <name>_renderSettingsPrimPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="157" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1a97ffef226fe4f94dade2863f8a9460c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDAPPUTILS_API</type>
        <definition>USDAPPUTILS_API UsdAppUtilsFrameRecorder</definition>
        <argsstring>(const TfToken &amp;rendererPluginId=TfToken(), bool gpuEnabled=true, const SdfPath &amp;renderSettingsPrimPath=SdfPath())</argsstring>
        <name>UsdAppUtilsFrameRecorder</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>rendererPluginId</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>gpuEnabled</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>renderSettingsPrimPath</declname>
          <defval><ref refid="class_sdf_path" kindref="compound">SdfPath</ref>()</defval>
        </param>
        <briefdescription>
<para>The <computeroutput>rendererPluginId</computeroutput> argument indicates the renderer plugin that Hyrda should use. </para>
        </briefdescription>
        <detaileddescription>
<para>If the empty token is passed in, a default renderer plugin will be chosen depending on the value of <computeroutput>gpuEnabled</computeroutput>. The <computeroutput>gpuEnabled</computeroutput> argument determines if the <ref refid="class_usd_app_utils_frame_recorder" kindref="compound">UsdAppUtilsFrameRecorder</ref> instance will allow Hydra to use the GPU to produce images. The <computeroutput>renderSettingsPrimPath</computeroutput> argument is used to set the active render settings prim path in Hydra. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1ac16981c0c093858d2c252abefdffba6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetCurrentRendererId</definition>
        <argsstring>() const</argsstring>
        <name>GetCurrentRendererId</name>
        <briefdescription>
<para>Gets the ID of the Hydra renderer plugin that will be used for recording. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="75" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1a81435cc3be32736ae2509e564311e2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetRendererPlugin</definition>
        <argsstring>(const TfToken &amp;id)</argsstring>
        <name>SetRendererPlugin</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Sets the Hydra renderer plugin to be used for recording. </para>
        </briefdescription>
        <detaileddescription>
<para>This also resets the presentation flag on the <ref refid="class_hdx_present_task" kindref="compound">HdxPresentTask</ref> to false, to avoid the need for an OpenGL context.</para>
<para>Note that the renderer plugins that may be set will be restricted if this <ref refid="class_usd_app_utils_frame_recorder" kindref="compound">UsdAppUtilsFrameRecorder</ref> instance has disabled the GPU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="85" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1a6ab113017140941aad168c8b9f39ec39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetImageWidth</definition>
        <argsstring>(const size_t imageWidth)</argsstring>
        <name>SetImageWidth</name>
        <param>
          <type>const size_t</type>
          <declname>imageWidth</declname>
        </param>
        <briefdescription>
<para>Sets the width of the recorded image. </para>
        </briefdescription>
        <detaileddescription>
<para>The height of the recorded image will be computed using this value and the aspect ratio of the camera used for recording.</para>
<para>The default image width is 960 pixels. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="98" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1adc55a20899f84cf3b5cdf6c8792a7d30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetComplexity</definition>
        <argsstring>(const float complexity)</argsstring>
        <name>SetComplexity</name>
        <param>
          <type>const float</type>
          <declname>complexity</declname>
        </param>
        <briefdescription>
<para>Sets the level of refinement complexity. </para>
        </briefdescription>
        <detaileddescription>
<para>The default complexity is &quot;low&quot; (1.0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="109" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1a6a7811363b695e405b0bb4d63328621f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDAPPUTILS_API void</type>
        <definition>USDAPPUTILS_API void SetColorCorrectionMode</definition>
        <argsstring>(const TfToken &amp;colorCorrectionMode)</argsstring>
        <name>SetColorCorrectionMode</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>colorCorrectionMode</declname>
        </param>
        <briefdescription>
<para>Sets the color correction mode to be used for recording. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, color correction is disabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1ae6b1fbc5dde451a8a9a28888775d5ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDAPPUTILS_API void</type>
        <definition>USDAPPUTILS_API void SetIncludedPurposes</definition>
        <argsstring>(const TfTokenVector &amp;purposes)</argsstring>
        <name>SetIncludedPurposes</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>purposes</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> purposes to be used for rendering. </para>
        </briefdescription>
        <detaileddescription>
<para>We will <bold>always</bold> include &quot;default&quot; purpose, and by default, we will also include UsdGeomTokens-&gt;proxy. Use this method to explicitly enumerate an alternate set of purposes to be included along with &quot;default&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_app_utils_frame_recorder_1aee5dd12078ebc90885d1f8e894413a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDAPPUTILS_API bool</type>
        <definition>USDAPPUTILS_API bool Record</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const UsdGeomCamera &amp;usdCamera, const UsdTimeCode timeCode, const std::string &amp;outputImagePath)</argsstring>
        <name>Record</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_geom_camera" kindref="compound">UsdGeomCamera</ref> &amp;</type>
          <declname>usdCamera</declname>
        </param>
        <param>
          <type>const <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>timeCode</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputImagePath</declname>
        </param>
        <briefdescription>
<para>Records an image and writes the result to <computeroutput>outputImagePath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The recorded image will represent the view from <computeroutput>usdCamera</computeroutput> looking at the imageable prims on USD stage <computeroutput>stage</computeroutput> at time <computeroutput>timeCode</computeroutput>.</para>
<para>If <computeroutput>usdCamera</computeroutput> is not a valid camera, a camera will be computed to automatically frame the stage geometry.</para>
<para>When we are using a RenderSettings prim, the generated image will be written to the file indicated on the connected RenderProducts, instead of the given <computeroutput>outputImagePath</computeroutput>. Note that in this case the given <computeroutput>usdCamera</computeroutput> will later be overridden by the one authored on the RenderSettings Prim.</para>
<para>Returns true if the image was generated and written successfully, or false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A utility class for recording images of USD stages. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_usd_app_utils_frame_recorder" kindref="compound">UsdAppUtilsFrameRecorder</ref> uses Hydra to produce recorded images of a USD stage looking through a particular <ref refid="class_usd_geom_camera" kindref="compound">UsdGeomCamera</ref> on that stage at a particular <ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref>. The images generated will be effectively the same as what you would see in the viewer in usdview.</para>
<para>Note that it is assumed that an OpenGL context has already been setup for the <ref refid="class_usd_app_utils_frame_recorder" kindref="compound">UsdAppUtilsFrameRecorder</ref> if OpenGL is being used as the underlying HGI device. This is not required for Metal or Vulkan. </para>
    </detaileddescription>
    <location file="pxr/usdImaging/usdAppUtils/frameRecorder.h" line="58" column="1" bodyfile="pxr/usdImaging/usdAppUtils/frameRecorder.h" bodystart="57" bodyend="158"/>
    <listofallmembers>
      <member refid="class_usd_app_utils_frame_recorder_1a5eeaf00e003a1b0f1954bb6d22370608" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_colorCorrectionMode</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a10aceabf75ae5f07210f6afa57468719" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_complexity</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a32e9bc7a46268418a95cad9a6912820a" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_imageWidth</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a15d9940c602f76e2763753bf2857e0fb" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_imagingEngine</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a1e05f6237243e03dde2a664fc0e84288" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_purposes</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a4a83524d0b8a98460457018fa9fcc428" prot="private" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>_renderSettingsPrimPath</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1ac16981c0c093858d2c252abefdffba6b" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>GetCurrentRendererId</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1aee5dd12078ebc90885d1f8e894413a32" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>Record</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a6a7811363b695e405b0bb4d63328621f" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>SetColorCorrectionMode</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1adc55a20899f84cf3b5cdf6c8792a7d30" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>SetComplexity</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a6ab113017140941aad168c8b9f39ec39" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>SetImageWidth</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1ae6b1fbc5dde451a8a9a28888775d5ab7" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>SetIncludedPurposes</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a81435cc3be32736ae2509e564311e2db" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>SetRendererPlugin</name></member>
      <member refid="class_usd_app_utils_frame_recorder_1a97ffef226fe4f94dade2863f8a9460c6" prot="public" virt="non-virtual"><scope>UsdAppUtilsFrameRecorder</scope><name>UsdAppUtilsFrameRecorder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
