<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_lux_light_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdLuxLightAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="light_a_p_i_8h" local="no">lightAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Conversion to and from UsdShadeConnectableAPI</header>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1acd92351d088953e6f262215228c30934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API</type>
        <definition>USDLUX_API UsdLuxLightAPI</definition>
        <argsstring>(const UsdShadeConnectableAPI &amp;connectable)</argsstring>
        <name>UsdLuxLightAPI</name>
        <param>
          <type>const <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> &amp;</type>
          <declname>connectable</declname>
        </param>
        <briefdescription>
<para>Constructor that takes a ConnectableAPI object. </para>
        </briefdescription>
        <detaileddescription>
<para>Allow implicit conversion of a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> to <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref></type>
        <definition>USDLUX_API UsdShadeConnectableAPI ConnectableAPI</definition>
        <argsstring>() const</argsstring>
        <name>ConnectableAPI</name>
        <briefdescription>
<para>Contructs and returns a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object with this light. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that most tasks can be accomplished without explicitly constructing a UsdShadeConnectable API, since connection-related API such as <ref refid="class_usd_shade_connectable_a_p_i_1aac78bb24a340a92604879b416c230629" kindref="member">UsdShadeConnectableAPI::ConnectToSource()</ref> are static methods, and <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> will auto-convert to a <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> when passed to functions that want to act generically on a connectable <ref refid="class_usd_shade_connectable_a_p_i" kindref="compound">UsdShadeConnectableAPI</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="517" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Outputs API</header>
      <description><para>Outputs represent a typed attribute on a light whose value is computed externally. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a2ba17066845267892079570da4eadef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput CreateOutput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an output which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the output is created in the &quot;outputs:&quot; namespace. Outputs on a light cannot be connected, as their value is assumed to be computed externally. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref></type>
        <definition>USDLUX_API UsdShadeOutput GetOutput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested output if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a7ceff029383f362ac833a4414aa932cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_output" kindref="compound">UsdShadeOutput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeOutput&gt; GetOutputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetOutputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Outputs are represented by attributes in the &quot;outputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="548" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inputs API</header>
      <description><para>Inputs are connectable attribute with a typed value.</para>
<para>Light parameters are encoded as inputs. </para>
</description>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a49f83c685591e60db110db9e9b32c10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput CreateInput</definition>
        <argsstring>(const TfToken &amp;name, const SdfValueTypeName &amp;typeName)</argsstring>
        <name>CreateInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Create an input which can either have a value or can be connected. </para>
        </briefdescription>
        <detaileddescription>
<para>The attribute representing the input is created in the &quot;inputs:&quot; namespace. Inputs on lights are connectable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref></type>
        <definition>USDLUX_API UsdShadeInput GetInput</definition>
        <argsstring>(const TfToken &amp;name) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the requested input if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a9a5eca34d13a31c615dad2391d20576f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API std::vector&lt; <ref refid="class_usd_shade_input" kindref="compound">UsdShadeInput</ref> &gt;</type>
        <definition>USDLUX_API std::vector&lt;UsdShadeInput&gt; GetInputs</definition>
        <argsstring>(bool onlyAuthored=true) const</argsstring>
        <name>GetInputs</name>
        <param>
          <type>bool</type>
          <declname>onlyAuthored</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Inputs are represented by attributes in the &quot;inputs:&quot; namespace. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>onlyAuthored</computeroutput> is true (the default), then only return authored attributes; otherwise, this also returns un-authored builtins. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="580" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_lux_light_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="95" column="1" bodyfile="pxr/usd/usdLux/lightAPI.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_lux_light_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="187" column="1" bodyfile="pxr/usd/usdLux/lightAPI.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a328d5e0478bc4ad3bb8e506c12e57d6c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdLuxLightAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_lux_light_a_p_i_1a8ec4a3f83a4f767ca615029c1d60c8aa" kindref="member">UsdLuxLightAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="101" column="1" bodyfile="pxr/usd/usdLux/lightAPI.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ae79a082e6ccd69b1abb2370c27321ac1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdLuxLightAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdLuxLightAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="109" column="1" bodyfile="pxr/usd/usdLux/lightAPI.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ab9b47d00173c54ee4a02671b518b1e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API</type>
        <definition>virtual USDLUX_API ~UsdLuxLightAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdLuxLightAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a55d8e3d23a43fe993f4e584a05387f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShaderIdAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetShaderIdAttr</name>
        <briefdescription>
<para>Default ID for the light&apos;s shader. </para>
        </briefdescription>
        <detaileddescription>
<para>This defines the shader ID for this light when a render context specific shader ID is not available.</para>
<para>The default shaderId for the intrinsic UsdLux lights (RectLight, DistantLight, etc.) are set to default to the light&apos;s type name. For each intrinsic UsdLux light, we will always register an <ref refid="class_sdr_shader_node" kindref="compound">SdrShaderNode</ref> in the <ref refid="class_sdr_registry" kindref="compound">SdrRegistry</ref>, with the identifier matching the type name and the source type &quot;USD&quot;, that corresponds to the light&apos;s inputs. <simplesect kind="see"><para><ref refid="class_usd_lux_light_a_p_i_1a0241498a53d4d25436a1f707d5743b75" kindref="member">GetShaderId</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_lux_light_a_p_i_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdr_registry_1a6c2ad66b092001bde543fa07a712f7d8" kindref="member">SdrRegistry::GetShaderNodeByIdentifier</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdr_registry_1ab4dd8f74d5f900a59a5bfa9c55751889" kindref="member">SdrRegistry::GetShaderNodeByIdentifierAndType</ref></para>
</simplesect>
<table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token light:shaderId = &quot;&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a5bc69dacb1d879cbf403db7ecd71e2c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShaderIdAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShaderIdAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a098a257ee074db8e791793dbec1637cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetMaterialSyncModeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetMaterialSyncModeAttr</name>
        <briefdescription>
<para>For a LightAPI applied to geometry that has a bound Material, which is entirely or partly emissive, this specifies the relationship of the Material response to the lighting response. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>materialGlowTintsLight: All primary and secondary rays see the emissive/glow response as dictated by the bound Material while the base color seen by light rays (which is then modulated by all of the other LightAPI controls) is the multiplication of the color feeding the emission/glow input of the Material (i.e. its surface or volume shader) with the scalar or pattern input to <emphasis>inputs:color</emphasis>. This allows the light&apos;s color to tint the geometry&apos;s glow color while preserving access to intensity and other light controls as ways to further modulate the illumination.</para>
</listitem><listitem><para>independent: All primary and secondary rays see the emissive/glow response as dictated by the bound Material, while the base color seen by light rays is determined solely by <emphasis>inputs:color</emphasis>. Note that for partially emissive geometry (in which some parts are reflective rather than emissive), a suitable pattern must be connected to the light&apos;s color input, or else the light will radiate uniformly from the geometry.</para>
</listitem><listitem><para>noMaterialResponse: The geometry behaves as if there is no Material bound at all, i.e. there is no diffuse, specular, or transmissive response. The base color of light rays is entirely controlled by the <emphasis>inputs:color</emphasis>. This is the standard mode for &quot;canonical&quot; lights in UsdLux and indicates to renderers that a Material will either never be bound or can always be ignored.</para>
</listitem></itemizedlist>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token light:materialSyncMode = &quot;noMaterialResponse&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>materialGlowTintsLight, independent, noMaterialResponse   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ae90efbacd68db7f7f4c9bf08b944f509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateMaterialSyncModeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateMaterialSyncModeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a098a257ee074db8e791793dbec1637cf" kindref="member">GetMaterialSyncModeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aaa8abfb3def944066eca3eb7ddb2a340" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetIntensityAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetIntensityAttr</name>
        <briefdescription>
<para>Scales the power of the light linearly. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:intensity = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a6e072625143be71e751dd5df6e424f32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateIntensityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateIntensityAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1aaa8abfb3def944066eca3eb7ddb2a340" kindref="member">GetIntensityAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a9644cb90bd4e984bde1e539dec71909e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetExposureAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetExposureAttr</name>
        <briefdescription>
<para>Scales the power of the light exponentially as a power of 2 (similar to an F-stop control over exposure). </para>
        </briefdescription>
        <detaileddescription>
<para>The result is multiplied against the intensity.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:exposure = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aa2476d5b2f457df829bff5c7ae945de1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateExposureAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateExposureAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a9644cb90bd4e984bde1e539dec71909e" kindref="member">GetExposureAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a7f3e53a973a864890b6466500f1b9305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetDiffuseAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetDiffuseAttr</name>
        <briefdescription>
<para>A multiplier for the effect of this light on the diffuse response of materials. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non-physical control.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:diffuse = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ad2fb42fcd363430bf22f67dbd6616cb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateDiffuseAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateDiffuseAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a7f3e53a973a864890b6466500f1b9305" kindref="member">GetDiffuseAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1adfd8a4d162bb0983eb6766eec7ae969c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetSpecularAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetSpecularAttr</name>
        <briefdescription>
<para>A multiplier for the effect of this light on the specular response of materials. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a non-physical control.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:specular = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a38bbf350c4aed31f54fc25f8416f42ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateSpecularAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateSpecularAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1adfd8a4d162bb0983eb6766eec7ae969c" kindref="member">GetSpecularAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1acb777a3177e8ad3aeb13dcbafc03b921" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetNormalizeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetNormalizeAttr</name>
        <briefdescription>
<para>Normalizes power by the surface area of the light. </para>
        </briefdescription>
        <detaileddescription>
<para>This makes it easier to independently adjust the power and shape of the light, by causing the power to not vary with the area or angular size of the light.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>bool inputs:normalize = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a258c14f40fd6752b0ce5b9f761ddef16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateNormalizeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateNormalizeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1acb777a3177e8ad3aeb13dcbafc03b921" kindref="member">GetNormalizeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1afec0ec447ae09fb0208fc13bf1354744" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetColorAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetColorAttr</name>
        <briefdescription>
<para>The color of emitted light, in energy-linear terms. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>color3f inputs:color = (1, 1, 1)</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Color3f   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aeffd3f8ebffb0291e16928d79dfb5277" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateColorAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateColorAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1afec0ec447ae09fb0208fc13bf1354744" kindref="member">GetColorAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a0d52e668b58caa585643f6f524914791" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetEnableColorTemperatureAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetEnableColorTemperatureAttr</name>
        <briefdescription>
<para>Enables using colorTemperature. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>bool inputs:enableColorTemperature = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a9be67c10c9dc3bac947485338ce0b2fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateEnableColorTemperatureAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateEnableColorTemperatureAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a0d52e668b58caa585643f6f524914791" kindref="member">GetEnableColorTemperatureAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ad990b3360a3c172c5340ce4e7af463a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetColorTemperatureAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetColorTemperatureAttr</name>
        <briefdescription>
<para>Color temperature, in degrees Kelvin, representing the white point. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is a common white point, D65. Lower values are warmer and higher values are cooler. The valid range is from 1000 to 10000. Only takes effect when enableColorTemperature is set to true. When active, the computed result multiplies against the color attribute. See <ref refid="blackbody_8h_1a41b58103dd4be683dde8a90954a70266" kindref="member">UsdLuxBlackbodyTemperatureAsRgb()</ref>.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float inputs:colorTemperature = 6500</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a1a615e306620fce3931ee64c32f0408f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateColorTemperatureAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateColorTemperatureAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1ad990b3360a3c172c5340ce4e7af463a6" kindref="member">GetColorTemperatureAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aa485d9b82346018fbef817aafe00b40c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship GetFiltersRel</definition>
        <argsstring>() const</argsstring>
        <name>GetFiltersRel</name>
        <briefdescription>
<para>Relationship to the light filters that apply to this light. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ab986f7f45bc7296c1700b2cadf49501a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDLUX_API UsdRelationship CreateFiltersRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateFiltersRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1aa485d9b82346018fbef817aafe00b40c" kindref="member">GetFiltersRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a049f1e4c77a4dfca17fda1a124958fce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>USDLUX_API UsdCollectionAPI GetLightLinkCollectionAPI</definition>
        <argsstring>() const</argsstring>
        <name>GetLightLinkCollectionAPI</name>
        <briefdescription>
<para>Return the <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> interface used for examining and modifying the light-linking of this light. </para>
        </briefdescription>
        <detaileddescription>
<para>Light-linking controls which geometry this light illuminates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a6911822cb227c8ef89f5a8b320ccd06d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>USDLUX_API UsdCollectionAPI GetShadowLinkCollectionAPI</definition>
        <argsstring>() const</argsstring>
        <name>GetShadowLinkCollectionAPI</name>
        <briefdescription>
<para>Return the <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> interface used for examining and modifying the shadow-linking of this light. </para>
        </briefdescription>
        <detaileddescription>
<para>Shadow-linking controls which geometry casts shadows from this light. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a58d00be60ef03619955066d7c2b5f538" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute GetShaderIdAttrForRenderContext</definition>
        <argsstring>(const TfToken &amp;renderContext) const</argsstring>
        <name>GetShaderIdAttrForRenderContext</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>renderContext</declname>
        </param>
        <briefdescription>
<para>Returns the shader ID attribute for the given <computeroutput>renderContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>renderContext</computeroutput> is non-empty, this will try to return an attribute named <emphasis>light:shaderId</emphasis> with the namespace prefix <computeroutput>renderContext</computeroutput>. For example, if the passed in render context is &quot;ri&quot; then the attribute returned by this function would have the following signature: <table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>token ri:light:shaderId</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
</table>
</para>
<para>If the render context is empty, this will return the default shader ID attribute as returned by <ref refid="class_usd_lux_light_a_p_i_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aec0306261acae05089632dfa060e2872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDLUX_API UsdAttribute CreateShaderIdAttrForRenderContext</definition>
        <argsstring>(const TfToken &amp;renderContext, VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateShaderIdAttrForRenderContext</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>renderContext</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates the shader ID attribute for the given <computeroutput>renderContext</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_usd_lux_light_a_p_i_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a0241498a53d4d25436a1f707d5743b75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>USDLUX_API TfToken GetShaderId</definition>
        <argsstring>(const TfTokenVector &amp;renderContexts) const</argsstring>
        <name>GetShaderId</name>
        <param>
          <type>const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
          <declname>renderContexts</declname>
        </param>
        <briefdescription>
<para>Return the light&apos;s shader ID for the given list of available <computeroutput>renderContexts</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The shader ID returned by this function is the identifier to use when looking up the shader definition for this light in the <ref refid="class_sdr_registry" kindref="compound">shader registry</ref>.</para>
<para>The render contexts are expected to be listed in priority order, so for each render context provided, this will try to find the shader ID attribute specific to that render context (see <ref refid="class_usd_lux_light_a_p_i_1a58d00be60ef03619955066d7c2b5f538" kindref="member">GetShaderIdAttrForRenderContext()</ref>) and will return the value of the first one found that has a non-empty value. If no shader ID value can be found for any of the given render contexts or <computeroutput>renderContexts</computeroutput> is empty, then this will return the value of the default shader ID attribute (see <ref refid="class_usd_lux_light_a_p_i_1a55d8e3d23a43fe993f4e584a05387f54" kindref="member">GetShaderIdAttr()</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="643" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDLUX_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a8ec4a3f83a4f767ca615029c1d60c8aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref></type>
        <definition>static USDLUX_API UsdLuxLightAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdLuxLightAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API bool</type>
        <definition>static USDLUX_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a50d213f976aefcca940c14449cfa6283" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref></type>
        <definition>static USDLUX_API UsdLuxLightAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;LightAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_lux_light_a_p_i" kindref="compound">UsdLuxLightAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="176" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDLUX_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="183" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDLUX_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="191" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_lux_light_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDLUX_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDLUX_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdLux/lightAPI.h" line="195" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API schema that imparts the quality of being a light onto a prim. </para>
    </briefdescription>
    <detaileddescription>
<para>A light is any prim that has this schema applied to it. This is true regardless of whether LightAPI is included as a built-in API of the prim type (e.g. RectLight or DistantLight) or is applied directly to a Gprim that should be treated as a light.</para>
<para><bold>Linking</bold></para>
<para>Lights can be linked to geometry. Linking controls which geometry a light illuminates, and which geometry casts shadows from the light.</para>
<para>Linking is specified as collections (<ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>) which can be accessed via GetLightLinkCollection() and GetShadowLinkCollection(). Note that these collections have their includeRoot set to true, so that lights will illuminate and cast shadows from all objects by default. To illuminate only a specific set of objects, there are two options. One option is to modify the collection paths to explicitly exclude everything else, assuming it is known; the other option is to set includeRoot to false and explicitly include the desired objects. These are complementary approaches that may each be preferable depending on the scenario and how to best express the intent of the light setup.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_lux_2tokens_8h_1a90b43d1b550e2d801daa346910c95abd" kindref="member">UsdLuxTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdLuxTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7550">
        <label>UsdLuxLightAPI</label>
        <link refid="class_usd_lux_light_a_p_i"/>
        <childnode refid="7551" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7552">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7551">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7552" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7553">
        <label>UsdLuxLightAPI</label>
        <link refid="class_usd_lux_light_a_p_i"/>
        <childnode refid="7554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7555">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7554">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="7555" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdLux/lightAPI.h" line="90" column="1" bodyfile="pxr/usd/usdLux/lightAPI.h" bodystart="89" bodyend="644"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ac19433aa62f0ecfb00450abefb7ccd4f" prot="protected" virt="virtual"><scope>UsdLuxLightAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdLuxLightAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a9bb91b8fbfd69050762b6a51b3ece78e" prot="private" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a3c52f215cf5ae7b408293d0b504d07c0" prot="private" virt="virtual"><scope>UsdLuxLightAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdLuxLightAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_lux_light_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a50d213f976aefcca940c14449cfa6283" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>Apply</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ad68e902741bca71afb78c45a194fba45" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a7a397289aa8760e0cfac308a378e4ff7" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>ConnectableAPI</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aeffd3f8ebffb0291e16928d79dfb5277" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateColorAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a1a615e306620fce3931ee64c32f0408f" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ad2fb42fcd363430bf22f67dbd6616cb3" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateDiffuseAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a9be67c10c9dc3bac947485338ce0b2fe" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateEnableColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aa2476d5b2f457df829bff5c7ae945de1" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateExposureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ab986f7f45bc7296c1700b2cadf49501a" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateFiltersRel</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a49f83c685591e60db110db9e9b32c10a" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateInput</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a6e072625143be71e751dd5df6e424f32" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateIntensityAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ae90efbacd68db7f7f4c9bf08b944f509" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateMaterialSyncModeAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a258c14f40fd6752b0ce5b9f761ddef16" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateNormalizeAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a2ba17066845267892079570da4eadef4" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateOutput</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a5bc69dacb1d879cbf403db7ecd71e2c6" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateShaderIdAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aec0306261acae05089632dfa060e2872" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateShaderIdAttrForRenderContext</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a38bbf350c4aed31f54fc25f8416f42ff" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>CreateSpecularAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a8ec4a3f83a4f767ca615029c1d60c8aa" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>Get</name></member>
      <member refid="class_usd_lux_light_a_p_i_1afec0ec447ae09fb0208fc13bf1354744" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetColorAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ad990b3360a3c172c5340ce4e7af463a6" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a7f3e53a973a864890b6466500f1b9305" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetDiffuseAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a0d52e668b58caa585643f6f524914791" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetEnableColorTemperatureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a9644cb90bd4e984bde1e539dec71909e" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetExposureAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aa485d9b82346018fbef817aafe00b40c" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetFiltersRel</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ae9114b47c8f19407e8a24e00546f52fe" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetInput</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a9a5eca34d13a31c615dad2391d20576f" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetInputs</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aaa8abfb3def944066eca3eb7ddb2a340" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetIntensityAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a049f1e4c77a4dfca17fda1a124958fce" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetLightLinkCollectionAPI</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a098a257ee074db8e791793dbec1637cf" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetMaterialSyncModeAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1acb777a3177e8ad3aeb13dcbafc03b921" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetNormalizeAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ac84e188e276e2273a2d6d7970f95a5b3" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetOutput</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a7ceff029383f362ac833a4414aa932cd" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetOutputs</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aa95969c93c4bf00af4f4b7133d28152b" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a0241498a53d4d25436a1f707d5743b75" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetShaderId</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a55d8e3d23a43fe993f4e584a05387f54" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetShaderIdAttr</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a58d00be60ef03619955066d7c2b5f538" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetShaderIdAttrForRenderContext</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a6911822cb227c8ef89f5a8b320ccd06d" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetShadowLinkCollectionAPI</name></member>
      <member refid="class_usd_lux_light_a_p_i_1adfd8a4d162bb0983eb6766eec7ae969c" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>GetSpecularAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_light_a_p_i_1a328d5e0478bc4ad3bb8e506c12e57d6c" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdLuxLightAPI</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ae79a082e6ccd69b1abb2370c27321ac1" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdLuxLightAPI</name></member>
      <member refid="class_usd_lux_light_a_p_i_1acd92351d088953e6f262215228c30934" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdLuxLightAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_lux_light_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdLuxLightAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdLuxLightAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_lux_light_a_p_i_1ab9b47d00173c54ee4a02671b518b1e0b" prot="public" virt="virtual"><scope>UsdLuxLightAPI</scope><name>~UsdLuxLightAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdLuxLightAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
