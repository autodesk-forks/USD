<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_schema_base" kind="class" language="C++" prot="public">
    <compoundname>SdfSchemaBase</compoundname>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <derivedcompoundref refid="class_sdf_schema" prot="public" virt="non-virtual">SdfSchema</derivedcompoundref>
    <includes refid="usd_2sdf_2schema_8h" local="no">schema.h</includes>
    <innerclass refid="struct_sdf_schema_base_1_1___field_info" prot="public">SdfSchemaBase::_FieldInfo</innerclass>
    <innerclass refid="class_sdf_schema_base_1_1___spec_definer" prot="protected">SdfSchemaBase::_SpecDefiner</innerclass>
    <innerclass refid="class_sdf_schema_base_1_1___value_type_registrar" prot="protected">SdfSchemaBase::_ValueTypeRegistrar</innerclass>
    <innerclass refid="class_sdf_schema_base_1_1_empty_tag" prot="protected">SdfSchemaBase::EmptyTag</innerclass>
    <innerclass refid="class_sdf_schema_base_1_1_field_definition" prot="public">SdfSchemaBase::FieldDefinition</innerclass>
    <innerclass refid="class_sdf_schema_base_1_1_spec_definition" prot="public">SdfSchemaBase::SpecDefinition</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_sdf_schema_base_1a58bdcd9dcca0401e3659bddb957820e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsRegistered</definition>
        <argsstring>(const TfToken &amp;fieldKey, VtValue *fallback=NULL) const</argsstring>
        <name>IsRegistered</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>fallback</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Convenience functions for accessing specific field information. </para>
        </briefdescription>
        <detaileddescription>
<para>Return whether the specified field has been registered. Also optionally return the fallback value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a44c58c58e6288dde10e8c669acafd2c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HoldsChildren</definition>
        <argsstring>(const TfToken &amp;fieldKey) const</argsstring>
        <name>HoldsChildren</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <briefdescription>
<para>Returns whether the given field is a &apos;children&apos; field <ndash/> that is, it indexes certain children beneath the owning spec. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a98a6d2e4f27f55fb6d5ebe3dd3f5b089" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>SDF_API const VtValue&amp; GetFallback</definition>
        <argsstring>(const TfToken &amp;fieldKey) const</argsstring>
        <name>GetFallback</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <briefdescription>
<para>Return the fallback value for the specified <computeroutput>fieldKey</computeroutput> or the empty value if <computeroutput>fieldKey</computeroutput> is not registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a14de5282e805d892d1bbd96ff1f8013a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue CastToTypeOf</definition>
        <argsstring>(const TfToken &amp;fieldKey, const VtValue &amp;value) const</argsstring>
        <name>CastToTypeOf</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Coerce <computeroutput>value</computeroutput> to the correct type for the specified field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1aa114bff64f274f0ffa88a34d192e4bd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsValidFieldForSpec</definition>
        <argsstring>(const TfToken &amp;fieldKey, SdfSpecType specType) const</argsstring>
        <name>IsValidFieldForSpec</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Return whether the given field is valid for the given spec type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ab92491383d1de400e7a93b83af45bb33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>SDF_API TfTokenVector GetFields</definition>
        <argsstring>(SdfSpecType specType) const</argsstring>
        <name>GetFields</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Returns all fields registered for the given spec type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a50868748c5c13ddd96ba4f2626b7badb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>SDF_API TfTokenVector GetMetadataFields</definition>
        <argsstring>(SdfSpecType specType) const</argsstring>
        <name>GetMetadataFields</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Returns all metadata fields registered for the given spec type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a0ac2a3037110dff51d95f707513d0d48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetMetadataFieldDisplayGroup</definition>
        <argsstring>(SdfSpecType specType, TfToken const &amp;metadataField) const</argsstring>
        <name>GetMetadataFieldDisplayGroup</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>metadataField</declname>
        </param>
        <briefdescription>
<para>Return the metadata field display group for metadata <emphasis>metadataField</emphasis> on <emphasis>specType</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the empty token if <emphasis>metadataField</emphasis> is not a metadata field, or if it has no display group. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1adb3856036127ce76df93b6f8d894d0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>SDF_API const TfTokenVector&amp; GetRequiredFields</definition>
        <argsstring>(SdfSpecType specType) const</argsstring>
        <name>GetRequiredFields</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Returns all required fields registered for the given spec type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a3e9eb1b5a343ccfe2b52bc4046af247b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRequiredFieldName</definition>
        <argsstring>(const TfToken &amp;fieldName) const</argsstring>
        <name>IsRequiredFieldName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>fieldName</computeroutput> is a required field name for at least one spec type, return false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>The main use of this function is to quickly rule out field names that aren&apos;t required (and thus don&apos;t need special handling). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="279" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="279" bodyend="286"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_sdf_schema_base_1a612c33a1c6101721708239d48cd719ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidAttributeConnectionPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsValidAttributeConnectionPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Specific validation functions for various fields. </para>
        </briefdescription>
        <detaileddescription>
<para>These are internally registered as validators for the associated field, but can also be used directly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ae623fbf8877de4cb6a8e0dd29e44092d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidIdentifier</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>IsValidIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a9975a5c4800149a901290f3b78a4a70d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidNamespacedIdentifier</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>IsValidNamespacedIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a2d27bcd14a80baa3f97685fb8c9a0e69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidInheritPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsValidInheritPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a19425b12c3708476bbd5ac65255a3013" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidPayload</definition>
        <argsstring>(const SdfPayload &amp;payload)</argsstring>
        <name>IsValidPayload</name>
        <param>
          <type>const <ref refid="class_sdf_payload" kindref="compound">SdfPayload</ref> &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1abfd7ee98b00f55f9a1609ab0b08373c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidReference</definition>
        <argsstring>(const SdfReference &amp;ref)</argsstring>
        <name>IsValidReference</name>
        <param>
          <type>const <ref refid="class_sdf_reference" kindref="compound">SdfReference</ref> &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a3123e524c6f8134e770924964383b284" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidRelationshipTargetPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsValidRelationshipTargetPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a299c79aa18585bc1cd90d8189d9550e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidRelocatesPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsValidRelocatesPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1afc3fb0e0dc974d672ce5166558a39f89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidSpecializesPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>IsValidSpecializesPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a7a3b6591d7c0bb8c6456b55a167bf605" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidSubLayer</definition>
        <argsstring>(const std::string &amp;sublayer)</argsstring>
        <name>IsValidSubLayer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sublayer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ae9aee45b84dfbafb031d388da7aee02b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidVariantIdentifier</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>IsValidVariantIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a67bd3514207d003ef4cf771e3e0428d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>static SDF_API SdfAllowed IsValidVariantSelection</definition>
        <argsstring>(const std::string &amp;sel)</argsstring>
        <name>IsValidVariantSelection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="318" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="class_sdf_schema_base_1a7c020f9a8b5c143822adbac8c1c4a9ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_allowed" kindref="compound">SdfAllowed</ref></type>
        <definition>SDF_API SdfAllowed IsValidValue</definition>
        <argsstring>(const VtValue &amp;value) const</argsstring>
        <name>IsValidValue</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Scene description value types. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a value, check if it is a valid value type. This function only checks that the type of the value is valid for this schema. It does not imply that the value is valid for a particular field <ndash/> the field&apos;s validation function must be used for that. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a5f3ba9ef839165a47a1b81457ab67166" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;SdfValueTypeName&gt; GetAllTypes</definition>
        <argsstring>() const</argsstring>
        <name>GetAllTypes</name>
        <briefdescription>
<para>Returns all registered type names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a36773929cbe4ffa065e441d12330d3ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindType</definition>
        <argsstring>(const TfToken &amp;typeName) const</argsstring>
        <name>FindType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Return the type name object for the given type name token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1acc819633c460e3dfff6696697481e20c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindType</definition>
        <argsstring>(const char *typeName) const</argsstring>
        <name>FindType</name>
        <param>
          <type>const char *</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a856b17b5fb11d0aeb63455f3335130b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindType</definition>
        <argsstring>(std::string const &amp;typeName) const</argsstring>
        <name>FindType</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ac42e4d23acf8aeeaffdf0b9be42102bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindType</definition>
        <argsstring>(const TfType &amp;type, const TfToken &amp;role=TfToken()) const</argsstring>
        <name>FindType</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>role</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Return the type name object for the given type and optional role. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a5558b0df89bad70cdcf9c22d91e1cfd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindType</definition>
        <argsstring>(const VtValue &amp;value, const TfToken &amp;role=TfToken()) const</argsstring>
        <name>FindType</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>role</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Return the type name object for the value&apos;s type and optional role. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a6087e04b0a7f8d0ac62cb000c6d64e1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_value_type_name" kindref="compound">SdfValueTypeName</ref></type>
        <definition>SDF_API SdfValueTypeName FindOrCreateType</definition>
        <argsstring>(const TfToken &amp;typeName) const</argsstring>
        <name>FindOrCreateType</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>typeName</declname>
        </param>
        <briefdescription>
<para>Return the type name object for the given type name string if it exists otherwise create a temporary type name object. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should not normally need to call this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="361" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="class_sdf_schema_base_1a367e311c63209003dccadad6660b7c65" prot="protected" static="no">
        <type>std::function&lt; <ref refid="class_vt_value" kindref="compound">VtValue</ref>(const std::string &amp;, const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;)&gt;</type>
        <definition>typedef std::function&lt;VtValue(const std::string&amp;, const JsValue&amp;)&gt; _DefaultValueFactoryFn</definition>
        <argsstring></argsstring>
        <name>_DefaultValueFactoryFn</name>
        <briefdescription>
<para>Factory function for creating a default value for a metadata field. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameters are the value type name and default value (if any) specified in the defining plugin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="511" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_sdf_schema_base_1a8d9bd2f236124ed87b1640b04b63eae5" prot="private" static="no">
        <type>TfHashMap&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">SdfSchemaBase::FieldDefinition</ref>, <ref refid="struct_tf_token_1_1_hash_functor" kindref="compound">TfToken::HashFunctor</ref> &gt;</type>
        <definition>typedef TfHashMap&lt;TfToken, SdfSchemaBase::FieldDefinition, TfToken::HashFunctor&gt; _FieldDefinitionMap</definition>
        <argsstring></argsstring>
        <name>_FieldDefinitionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="552" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_schema_base_1ad526b38f92d0b83552e6448fa4a3ef73" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class _SpecDefiner</definition>
        <argsstring></argsstring>
        <name>_SpecDefiner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="523" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_schema_base_1a9161da1499bf043371939fc671f3346a" prot="private" static="no" mutable="no">
        <type>_FieldDefinitionMap</type>
        <definition>_FieldDefinitionMap _fieldDefinitions</definition>
        <argsstring></argsstring>
        <name>_fieldDefinitions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="553" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_schema_base_1a4fb35909b9cb7e75cbfceea4531f16ab" prot="private" static="no" mutable="no">
        <type>std::pair&lt; <ref refid="class_sdf_schema_base_1_1_spec_definition" kindref="compound">SdfSchemaBase::SpecDefinition</ref>, bool &gt;</type>
        <definition>std::pair&lt;SdfSchemaBase::SpecDefinition, bool&gt; _specDefinitions[SdfNumSpecTypes]</definition>
        <argsstring>[SdfNumSpecTypes]</argsstring>
        <name>_specDefinitions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="557" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_schema_base_1a3c4ccf7e6422adf4f94775be4f502c50" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Sdf_ValueTypeRegistry &gt;</type>
        <definition>std::unique_ptr&lt;Sdf_ValueTypeRegistry&gt; _valueTypeRegistry</definition>
        <argsstring></argsstring>
        <name>_valueTypeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="559" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_schema_base_1a19d471491862c5d62a295c5e3eff14f0" prot="private" static="no" mutable="no">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _requiredFieldNames</definition>
        <argsstring></argsstring>
        <name>_requiredFieldNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="560" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_schema_base_1a9253ac9ab4e705e3a47ace46459c98b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfSchemaBase</definition>
        <argsstring>(const SdfSchemaBase &amp;)=delete</argsstring>
        <name>SdfSchemaBase</name>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a9b3c1330142d66af2472fb2dedd80384" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>SdfSchemaBase&amp; operator=</definition>
        <argsstring>(const SdfSchemaBase &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ac569439a9505d9fa2dfcee7318ac14e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _OnDidRegisterPlugins</definition>
        <argsstring>(const PlugNotice::DidRegisterPlugins &amp;n)</argsstring>
        <name>_OnDidRegisterPlugins</name>
        <param>
          <type>const <ref refid="class_plug_notice_1_1_did_register_plugins" kindref="compound">PlugNotice::DidRegisterPlugins</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1abc3288a5077d0d62fdf02859e1b9ee9b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1___spec_definer" kindref="compound">_SpecDefiner</ref></type>
        <definition>_SpecDefiner _Define</definition>
        <argsstring>(SpecDefinition *local)</argsstring>
        <name>_Define</name>
        <param>
          <type><ref refid="class_sdf_schema_base_1_1_spec_definition" kindref="compound">SpecDefinition</ref> *</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="528" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="528" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a12d3ec06fb70b210ace493c15429a6c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AddRequiredFieldName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>_AddRequiredFieldName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a06e23ec1642365567c1af92984e99fae" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_sdf_schema_base_1_1_spec_definition" kindref="compound">SpecDefinition</ref> *</type>
        <definition>const SpecDefinition* _CheckAndGetSpecDefinition</definition>
        <argsstring>(SdfSpecType type) const</argsstring>
        <name>_CheckAndGetSpecDefinition</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a1c8ca7fd000a5f7db18053024aa20c35" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">FieldDefinition</ref> &amp;</type>
        <definition>FieldDefinition&amp; _CreateField</definition>
        <argsstring>(const TfToken &amp;fieldKey, const VtValue &amp;fallback, bool plugin=false)</argsstring>
        <name>_CreateField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>fallback</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>plugin</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a0adf8ac9d83782e7f4dd834b5c22f5af" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">FieldDefinition</ref> &amp;</type>
        <definition>FieldDefinition&amp; _DoRegisterField</definition>
        <argsstring>(const TfToken &amp;fieldKey, const T &amp;fallback)</argsstring>
        <name>_DoRegisterField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>fallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="541" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="541" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a526845bf32ae6c5cb7f0c428625e4721" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">FieldDefinition</ref> &amp;</type>
        <definition>FieldDefinition&amp; _DoRegisterField</definition>
        <argsstring>(const TfToken &amp;fieldKey, const VtValue &amp;fallback)</argsstring>
        <name>_DoRegisterField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>fallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="546" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_schema_base_1a8d13a26dd79e0df27abf67e5d5ea7eb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">FieldDefinition</ref> *</type>
        <definition>SDF_API const FieldDefinition* GetFieldDefinition</definition>
        <argsstring>(const TfToken &amp;fieldKey) const</argsstring>
        <name>GetFieldDefinition</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <briefdescription>
<para>Returns the field definition for the given field. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns NULL if no definition exists for given field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a617de8df4a429e74f7b6c8cbd4c5c54a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_sdf_schema_base_1_1_spec_definition" kindref="compound">SpecDefinition</ref> *</type>
        <definition>const SpecDefinition* GetSpecDefinition</definition>
        <argsstring>(SdfSpecType specType) const</argsstring>
        <name>GetSpecDefinition</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Returns the spec definition for the given spec type. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns NULL if no definition exists for the given spec type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="228" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="228" bodyend="231"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_schema_base_1ab44ee5eb0c30e482bc9ec49787c986c4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfSchemaBase</definition>
        <argsstring>()</argsstring>
        <name>SdfSchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a284baa0c41cc5866a1dd2d51f9a771f7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfSchemaBase</definition>
        <argsstring>(EmptyTag)</argsstring>
        <name>SdfSchemaBase</name>
        <param>
          <type><ref refid="class_sdf_schema_base_1_1_empty_tag" kindref="compound">EmptyTag</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a3aba568120eab8c93b4247fb06ad3095" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~SdfSchemaBase</definition>
        <argsstring>()</argsstring>
        <name>~SdfSchemaBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a41ccc4065a49876d0eab8261a4a15189" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">FieldDefinition</ref> &amp;</type>
        <definition>FieldDefinition&amp; _RegisterField</definition>
        <argsstring>(const TfToken &amp;fieldKey, const T &amp;fallback, bool plugin=false)</argsstring>
        <name>_RegisterField</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldKey</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>fallback</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>plugin</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates and registers a new field named <computeroutput>fieldKey</computeroutput> with the fallback value <computeroutput>fallback</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>plugin</computeroutput> is specified, it indicates that this field is not a built-in field from this schema, but rather a field that was externally registered.</para>
<para>It is a fatal error to call this function with a key that has already been used for another field. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="473" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1adc083906f78370e6db2066864baf2031" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1___spec_definer" kindref="compound">_SpecDefiner</ref></type>
        <definition>_SpecDefiner _Define</definition>
        <argsstring>(SdfSpecType type)</argsstring>
        <name>_Define</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Registers the given spec <computeroutput>type</computeroutput> with this schema and return a <ref refid="class_sdf_schema_base_1_1___spec_definer" kindref="compound">_SpecDefiner</ref> for specifying additional fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="481" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a55f3fbde24abdf969b83dc4840eeb202" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1___spec_definer" kindref="compound">_SpecDefiner</ref></type>
        <definition>_SpecDefiner _ExtendSpecDefinition</definition>
        <argsstring>(SdfSpecType specType)</argsstring>
        <name>_ExtendSpecDefinition</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="class_sdf_schema_base_1_1___spec_definer" kindref="compound">_SpecDefiner</ref> for the previously-defined spec <computeroutput>type</computeroutput> for specifying additional fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a70bd66eeabe3821e1815215432c17e7b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterStandardFields</definition>
        <argsstring>()</argsstring>
        <name>_RegisterStandardFields</name>
        <briefdescription>
<para>Registers the standard fields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a028c1a137319ef342eb570ec0df5d094" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterPluginFields</definition>
        <argsstring>()</argsstring>
        <name>_RegisterPluginFields</name>
        <briefdescription>
<para>Registers plugin fields and sets up handling so that fields will be added when additional plugins are registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a6edeb98d7efea34479f0ce89881ad66f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterStandardTypes</definition>
        <argsstring>()</argsstring>
        <name>_RegisterStandardTypes</name>
        <briefdescription>
<para>Registers standard attribute value types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ac3c1f41cd09bd5d5dfcdb1b529b7c76d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterLegacyTypes</definition>
        <argsstring>()</argsstring>
        <name>_RegisterLegacyTypes</name>
        <briefdescription>
<para>Registers legacy attribute value types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1ac479543bbefeac3be6742401168ebf2d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1___value_type_registrar" kindref="compound">_ValueTypeRegistrar</ref></type>
        <definition>_ValueTypeRegistrar _GetTypeRegistrar</definition>
        <argsstring>() const</argsstring>
        <name>_GetTypeRegistrar</name>
        <briefdescription>
<para>Returns a type registrar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_schema_base_1a344d4af62143d3ca5b6ab51896cea1b8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">SdfSchemaBase::FieldDefinition</ref> * &gt;</type>
        <definition>const std::vector&lt;const SdfSchemaBase::FieldDefinition *&gt; _UpdateMetadataFromPlugins</definition>
        <argsstring>(const PlugPluginPtrVector &amp;plugins, const std::string &amp;metadataTag=std::string(), const _DefaultValueFactoryFn &amp;defFactory=_DefaultValueFactoryFn())</argsstring>
        <name>_UpdateMetadataFromPlugins</name>
        <param>
          <type>const PlugPluginPtrVector &amp;</type>
          <declname>plugins</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>metadataTag</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base_1a367e311c63209003dccadad6660b7c65" kindref="member">_DefaultValueFactoryFn</ref> &amp;</type>
          <declname>defFactory</declname>
          <defval><ref refid="class_sdf_schema_base_1a367e311c63209003dccadad6660b7c65" kindref="member">_DefaultValueFactoryFn</ref>()</defval>
        </param>
        <briefdescription>
<para>Registers all metadata fields specified in the given plugins under the given metadata tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/schema.h" line="516" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic class that provides information about scene description fields but doesn&apos;t actually provide any fields. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5192">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5193">
        <label>SdfSchema</label>
        <link refid="class_sdf_schema"/>
        <childnode refid="5191" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5191">
        <label>SdfSchemaBase</label>
        <link refid="class_sdf_schema_base"/>
        <childnode refid="5192" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5195">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5194">
        <label>SdfSchemaBase</label>
        <link refid="class_sdf_schema_base"/>
        <childnode refid="5195" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/schema.h" line="62" column="1" bodyfile="pxr/usd/sdf/schema.h" bodystart="62" bodyend="561"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_sdf_schema_base_1a12d3ec06fb70b210ace493c15429a6c8" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_AddRequiredFieldName</name></member>
      <member refid="class_sdf_schema_base_1a06e23ec1642365567c1af92984e99fae" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_CheckAndGetSpecDefinition</name></member>
      <member refid="class_sdf_schema_base_1a1c8ca7fd000a5f7db18053024aa20c35" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_CreateField</name></member>
      <member refid="class_sdf_schema_base_1a367e311c63209003dccadad6660b7c65" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_DefaultValueFactoryFn</name></member>
      <member refid="class_sdf_schema_base_1adc083906f78370e6db2066864baf2031" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_Define</name></member>
      <member refid="class_sdf_schema_base_1abc3288a5077d0d62fdf02859e1b9ee9b" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_Define</name></member>
      <member refid="class_sdf_schema_base_1a0adf8ac9d83782e7f4dd834b5c22f5af" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_DoRegisterField</name></member>
      <member refid="class_sdf_schema_base_1a526845bf32ae6c5cb7f0c428625e4721" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_DoRegisterField</name></member>
      <member refid="class_sdf_schema_base_1a55f3fbde24abdf969b83dc4840eeb202" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_ExtendSpecDefinition</name></member>
      <member refid="class_sdf_schema_base_1a8d9bd2f236124ed87b1640b04b63eae5" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_FieldDefinitionMap</name></member>
      <member refid="class_sdf_schema_base_1a9161da1499bf043371939fc671f3346a" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_fieldDefinitions</name></member>
      <member refid="class_sdf_schema_base_1ac479543bbefeac3be6742401168ebf2d" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_GetTypeRegistrar</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_HasRemnant</name></member>
      <member refid="class_sdf_schema_base_1ac569439a9505d9fa2dfcee7318ac14e6" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_OnDidRegisterPlugins</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_Register</name></member>
      <member refid="class_sdf_schema_base_1a41ccc4065a49876d0eab8261a4a15189" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_RegisterField</name></member>
      <member refid="class_sdf_schema_base_1ac3c1f41cd09bd5d5dfcdb1b529b7c76d" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_RegisterLegacyTypes</name></member>
      <member refid="class_sdf_schema_base_1a028c1a137319ef342eb570ec0df5d094" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_RegisterPluginFields</name></member>
      <member refid="class_sdf_schema_base_1a70bd66eeabe3821e1815215432c17e7b" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_RegisterStandardFields</name></member>
      <member refid="class_sdf_schema_base_1a6edeb98d7efea34479f0ce89881ad66f" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_RegisterStandardTypes</name></member>
      <member refid="class_sdf_schema_base_1a19d471491862c5d62a295c5e3eff14f0" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_requiredFieldNames</name></member>
      <member refid="class_sdf_schema_base_1ad526b38f92d0b83552e6448fa4a3ef73" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_SpecDefiner</name></member>
      <member refid="class_sdf_schema_base_1a4fb35909b9cb7e75cbfceea4531f16ab" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_specDefinitions</name></member>
      <member refid="class_sdf_schema_base_1a344d4af62143d3ca5b6ab51896cea1b8" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_UpdateMetadataFromPlugins</name></member>
      <member refid="class_sdf_schema_base_1a3c4ccf7e6422adf4f94775be4f502c50" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>_valueTypeRegistry</name></member>
      <member refid="class_sdf_schema_base_1a14de5282e805d892d1bbd96ff1f8013a" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>CastToTypeOf</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_schema_base_1a6087e04b0a7f8d0ac62cb000c6d64e1a" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindOrCreateType</name></member>
      <member refid="class_sdf_schema_base_1a36773929cbe4ffa065e441d12330d3ad" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindType</name></member>
      <member refid="class_sdf_schema_base_1acc819633c460e3dfff6696697481e20c" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindType</name></member>
      <member refid="class_sdf_schema_base_1a856b17b5fb11d0aeb63455f3335130b2" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindType</name></member>
      <member refid="class_sdf_schema_base_1ac42e4d23acf8aeeaffdf0b9be42102bb" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindType</name></member>
      <member refid="class_sdf_schema_base_1a5558b0df89bad70cdcf9c22d91e1cfd6" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>FindType</name></member>
      <member refid="class_sdf_schema_base_1a5f3ba9ef839165a47a1b81457ab67166" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetAllTypes</name></member>
      <member refid="class_sdf_schema_base_1a98a6d2e4f27f55fb6d5ebe3dd3f5b089" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetFallback</name></member>
      <member refid="class_sdf_schema_base_1a8d13a26dd79e0df27abf67e5d5ea7eb9" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetFieldDefinition</name></member>
      <member refid="class_sdf_schema_base_1ab92491383d1de400e7a93b83af45bb33" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetFields</name></member>
      <member refid="class_sdf_schema_base_1a0ac2a3037110dff51d95f707513d0d48" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetMetadataFieldDisplayGroup</name></member>
      <member refid="class_sdf_schema_base_1a50868748c5c13ddd96ba4f2626b7badb" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetMetadataFields</name></member>
      <member refid="class_sdf_schema_base_1adb3856036127ce76df93b6f8d894d0fd" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetRequiredFields</name></member>
      <member refid="class_sdf_schema_base_1a617de8df4a429e74f7b6c8cbd4c5c54a" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetSpecDefinition</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_sdf_schema_base_1a44c58c58e6288dde10e8c669acafd2c4" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>HoldsChildren</name></member>
      <member refid="class_sdf_schema_base_1a58bdcd9dcca0401e3659bddb957820e3" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsRegistered</name></member>
      <member refid="class_sdf_schema_base_1a3e9eb1b5a343ccfe2b52bc4046af247b" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsRequiredFieldName</name></member>
      <member refid="class_sdf_schema_base_1a612c33a1c6101721708239d48cd719ac" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidAttributeConnectionPath</name></member>
      <member refid="class_sdf_schema_base_1aa114bff64f274f0ffa88a34d192e4bd5" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidFieldForSpec</name></member>
      <member refid="class_sdf_schema_base_1ae623fbf8877de4cb6a8e0dd29e44092d" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidIdentifier</name></member>
      <member refid="class_sdf_schema_base_1a2d27bcd14a80baa3f97685fb8c9a0e69" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidInheritPath</name></member>
      <member refid="class_sdf_schema_base_1a9975a5c4800149a901290f3b78a4a70d" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidNamespacedIdentifier</name></member>
      <member refid="class_sdf_schema_base_1a19425b12c3708476bbd5ac65255a3013" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidPayload</name></member>
      <member refid="class_sdf_schema_base_1abfd7ee98b00f55f9a1609ab0b08373c6" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidReference</name></member>
      <member refid="class_sdf_schema_base_1a3123e524c6f8134e770924964383b284" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidRelationshipTargetPath</name></member>
      <member refid="class_sdf_schema_base_1a299c79aa18585bc1cd90d8189d9550e2" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidRelocatesPath</name></member>
      <member refid="class_sdf_schema_base_1afc3fb0e0dc974d672ce5166558a39f89" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidSpecializesPath</name></member>
      <member refid="class_sdf_schema_base_1a7a3b6591d7c0bb8c6456b55a167bf605" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidSubLayer</name></member>
      <member refid="class_sdf_schema_base_1a7c020f9a8b5c143822adbac8c1c4a9ac" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidValue</name></member>
      <member refid="class_sdf_schema_base_1ae9aee45b84dfbafb031d388da7aee02b" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidVariantIdentifier</name></member>
      <member refid="class_sdf_schema_base_1a67bd3514207d003ef4cf771e3e0428d1" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>IsValidVariantSelection</name></member>
      <member refid="class_sdf_schema_base_1a9b3c1330142d66af2472fb2dedd80384" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>SdfSchemaBase</scope><name>operator=</name></member>
      <member refid="class_sdf_schema_base_1a9253ac9ab4e705e3a47ace46459c98b9" prot="private" virt="non-virtual"><scope>SdfSchemaBase</scope><name>SdfSchemaBase</name></member>
      <member refid="class_sdf_schema_base_1ab44ee5eb0c30e482bc9ec49787c986c4" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>SdfSchemaBase</name></member>
      <member refid="class_sdf_schema_base_1a284baa0c41cc5866a1dd2d51f9a771f7" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>SdfSchemaBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfSchemaBase</scope><name>TfWeakBase</name></member>
      <member refid="class_sdf_schema_base_1a3aba568120eab8c93b4247fb06ad3095" prot="protected" virt="virtual"><scope>SdfSchemaBase</scope><name>~SdfSchemaBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfSchemaBase</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
