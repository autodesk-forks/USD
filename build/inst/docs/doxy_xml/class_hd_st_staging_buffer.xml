<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_staging_buffer" kind="class" language="C++" prot="public">
    <compoundname>HdStStagingBuffer</compoundname>
    <includes refid="staging_buffer_8h" local="no">stagingBuffer.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1af9a17b66d7ce6192148da647f6a298f6" prot="private" static="yes" mutable="no">
        <type>constexpr int32_t</type>
        <definition>constexpr int32_t MULTIBUFFERING</definition>
        <argsstring></argsstring>
        <name>MULTIBUFFERING</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="81" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1a33c5de4dfb2c30c6b2539a97affea45d" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_resource_registry" kindref="compound">HdStResourceRegistry</ref> *</type>
        <definition>HdStResourceRegistry* _resourceRegistry</definition>
        <argsstring></argsstring>
        <name>_resourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="83" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1a2c9e370529c28e7beca4a585e4540fa7" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref></type>
        <definition>HgiBufferHandle _handles[MULTIBUFFERING]</definition>
        <argsstring>[MULTIBUFFERING]</argsstring>
        <name>_handles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="84" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1accaf0752e08bbdc945d53dcaf325820f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _head</definition>
        <argsstring></argsstring>
        <name>_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="85" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1a1ab19118d95ead89c86cc27bd950d34a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _capacity</definition>
        <argsstring></argsstring>
        <name>_capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="86" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1a5e4400112c03ac7c857686e7a967ac6b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _activeSlot</definition>
        <argsstring></argsstring>
        <name>_activeSlot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="87" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1ad0e8af8c925ed785178ec058a34e3d37" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _tripleBuffered</definition>
        <argsstring></argsstring>
        <name>_tripleBuffered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="88" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_staging_buffer_1aeff31eb72e5d88e3359a6af7f7c66fe5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="struct_hgi_buffer_gpu_to_gpu_op" kindref="compound">HgiBufferGpuToGpuOp</ref> &gt;</type>
        <definition>std::vector&lt;HgiBufferGpuToGpuOp&gt; _gpuCopyOps</definition>
        <argsstring></argsstring>
        <name>_gpuCopyOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="89" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_staging_buffer_1af43fb68443e5826f9831be541d4e84f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStStagingBuffer</definition>
        <argsstring>(HdStResourceRegistry *resourceRegistry)</argsstring>
        <name>HdStStagingBuffer</name>
        <param>
          <type><ref refid="class_hd_st_resource_registry" kindref="compound">HdStResourceRegistry</ref> *</type>
          <declname>resourceRegistry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_staging_buffer_1a751b2405b6c6a3634b1b498ee79f1738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStStagingBuffer</definition>
        <argsstring>()</argsstring>
        <name>~HdStStagingBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_staging_buffer_1ad6639c4f65788f5c1ab1cdf14407c897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Deallocate</definition>
        <argsstring>()</argsstring>
        <name>Deallocate</name>
        <briefdescription>
<para>Destroys contained HgiBuffers and resets state to empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_staging_buffer_1a8956923a95abd2e3dd0286689d153eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Resize</definition>
        <argsstring>(size_t totalSize)</argsstring>
        <name>Resize</name>
        <param>
          <type>size_t</type>
          <declname>totalSize</declname>
        </param>
        <briefdescription>
<para>Set the capacity for the staging buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Only applied once first call to StageCopy is called. Cannot be called if there have already been calls to StageCopy for this commit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_staging_buffer_1a5c7483a78f0f07599c5fafad17996268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void StageCopy</definition>
        <argsstring>(HgiBufferCpuToGpuOp const &amp;copyOp)</argsstring>
        <name>StageCopy</name>
        <param>
          <type><ref refid="struct_hgi_buffer_cpu_to_gpu_op" kindref="compound">HgiBufferCpuToGpuOp</ref> const &amp;</type>
          <declname>copyOp</declname>
        </param>
        <briefdescription>
<para>Submit a CPU to GPU copy operation to be added to the staging buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The contents are memcpy&apos;d over into the staging buffer during this call and a GPU to GPU blit is queued up to do the final copy to destination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_staging_buffer_1aaa7d3d635e9bf3237ab1d0652570d3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Flush</definition>
        <argsstring>()</argsstring>
        <name>Flush</name>
        <briefdescription>
<para>Flush the queued GPU to GPU blits from the calls to StageCopy. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the state for the next ResoureRegistry commit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/stagingBuffer.h" line="78" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a staging buffer for CPU writes of triple-buffered resources. </para>
    </briefdescription>
    <detaileddescription>
<para>None of the function calls are thread safe, they should be only accessed from the commit call to ResourceRegistry. </para>
    </detaileddescription>
    <location file="pxr/imaging/hdSt/stagingBuffer.h" line="50" column="1" bodyfile="pxr/imaging/hdSt/stagingBuffer.h" bodystart="49" bodyend="90"/>
    <listofallmembers>
      <member refid="class_hd_st_staging_buffer_1a5e4400112c03ac7c857686e7a967ac6b" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_activeSlot</name></member>
      <member refid="class_hd_st_staging_buffer_1a1ab19118d95ead89c86cc27bd950d34a" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_capacity</name></member>
      <member refid="class_hd_st_staging_buffer_1aeff31eb72e5d88e3359a6af7f7c66fe5" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_gpuCopyOps</name></member>
      <member refid="class_hd_st_staging_buffer_1a2c9e370529c28e7beca4a585e4540fa7" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_handles</name></member>
      <member refid="class_hd_st_staging_buffer_1accaf0752e08bbdc945d53dcaf325820f" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_head</name></member>
      <member refid="class_hd_st_staging_buffer_1a33c5de4dfb2c30c6b2539a97affea45d" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_resourceRegistry</name></member>
      <member refid="class_hd_st_staging_buffer_1ad0e8af8c925ed785178ec058a34e3d37" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>_tripleBuffered</name></member>
      <member refid="class_hd_st_staging_buffer_1ad6639c4f65788f5c1ab1cdf14407c897" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>Deallocate</name></member>
      <member refid="class_hd_st_staging_buffer_1aaa7d3d635e9bf3237ab1d0652570d3a8" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>Flush</name></member>
      <member refid="class_hd_st_staging_buffer_1af43fb68443e5826f9831be541d4e84f4" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>HdStStagingBuffer</name></member>
      <member refid="class_hd_st_staging_buffer_1af9a17b66d7ce6192148da647f6a298f6" prot="private" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>MULTIBUFFERING</name></member>
      <member refid="class_hd_st_staging_buffer_1a8956923a95abd2e3dd0286689d153eee" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>Resize</name></member>
      <member refid="class_hd_st_staging_buffer_1a5c7483a78f0f07599c5fafad17996268" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>StageCopy</name></member>
      <member refid="class_hd_st_staging_buffer_1a751b2405b6c6a3634b1b498ee79f1738" prot="public" virt="non-virtual"><scope>HdStStagingBuffer</scope><name>~HdStStagingBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
