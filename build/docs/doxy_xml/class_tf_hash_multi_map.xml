<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_hash_multi_map" kind="class" language="C++" prot="public">
    <compoundname>TfHashMultiMap</compoundname>
    <basecompoundref prot="private" virt="non-virtual">std::unordered_multimap&lt; Key, Mapped, HashFn, EqualKey, Alloc &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Key</declname>
        <defname>Key</defname>
      </param>
      <param>
        <type>class</type>
        <declname>Mapped</declname>
        <defname>Mapped</defname>
      </param>
      <param>
        <type>class</type>
        <declname>HashFn</declname>
        <defname>HashFn</defname>
        <defval>std::hash&lt;Key&gt;</defval>
      </param>
      <param>
        <type>class</type>
        <declname>EqualKey</declname>
        <defname>EqualKey</defname>
        <defval>std::equal_to&lt;Key&gt;</defval>
      </param>
      <param>
        <type>class</type>
        <declname>Alloc</declname>
        <defname>Alloc</defname>
        <defval>std::allocator&lt;std::pair&lt;const Key, Mapped&gt; &gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a9f3cea8796840f34ab25165bb5a01c0b" prot="private" static="no">
        <type>std::unordered_multimap&lt; Key, Mapped, HashFn, EqualKey, Alloc &gt;</type>
        <definition>typedef std::unordered_multimap&lt;Key, Mapped, HashFn, EqualKey, Alloc&gt; _Base</definition>
        <argsstring></argsstring>
        <name>_Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="362" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a0651d24cb7f6a75fdef802cd1360d9cd" prot="public" static="no">
        <type>_Base::key_type</type>
        <definition>typedef _Base::key_type key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="364" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a35b435f4aa2435318bcdaff9f0935b9e" prot="public" static="no">
        <type>_Base::mapped_type</type>
        <definition>typedef _Base::mapped_type mapped_type</definition>
        <argsstring></argsstring>
        <name>mapped_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="365" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a64100583b25ebb72f232d140d9befae1" prot="public" static="no">
        <type>_Base::value_type</type>
        <definition>typedef _Base::value_type value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="366" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1aefcad3c093e9915ceb4360ce11cc3130" prot="public" static="no">
        <type>_Base::hasher</type>
        <definition>typedef _Base::hasher hasher</definition>
        <argsstring></argsstring>
        <name>hasher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="367" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1ac0a09c689fcca06cafa34fc7fc47f8de" prot="public" static="no">
        <type>_Base::key_equal</type>
        <definition>typedef _Base::key_equal key_equal</definition>
        <argsstring></argsstring>
        <name>key_equal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="368" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a502a30fbc758c71e627db567c3c06929" prot="public" static="no">
        <type>_Base::size_type</type>
        <definition>typedef _Base::size_type size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="369" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1aa5a58befa6586aa9c6c61a310831e0b6" prot="public" static="no">
        <type>_Base::difference_type</type>
        <definition>typedef _Base::difference_type difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="370" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a6b408838e63773be343f3225927c3313" prot="public" static="no">
        <type>_Base::pointer</type>
        <definition>typedef _Base::pointer pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="371" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a50728ddfc4a8e7d635c49ebd4a9cbda0" prot="public" static="no">
        <type>_Base::const_pointer</type>
        <definition>typedef _Base::const_pointer const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="372" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a14e3b51b93bdf09483f3013ae8cdcff0" prot="public" static="no">
        <type>_Base::reference</type>
        <definition>typedef _Base::reference reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="373" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a2909c7801320c39c712e6b21f8d38bd2" prot="public" static="no">
        <type>_Base::const_reference</type>
        <definition>typedef _Base::const_reference const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="374" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1ab4c0a55438ff52693fa929f04cf45f45" prot="public" static="no">
        <type>_Base::iterator</type>
        <definition>typedef _Base::iterator iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="375" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1abf50bf9ebf304ff61d988214abe2705b" prot="public" static="no">
        <type>_Base::const_iterator</type>
        <definition>typedef _Base::const_iterator const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="376" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_hash_multi_map_1a8e78a5dfa50c83f71230f468f65f678c" prot="public" static="no">
        <type>_Base::allocator_type</type>
        <definition>typedef _Base::allocator_type allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="377" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_hash_multi_map_1a0b816c6a447b964f1b07055282a49388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfHashMultiMap</definition>
        <argsstring>()</argsstring>
        <name>TfHashMultiMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="380" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="380" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a7e0b19d093916dacf418d642e2682a92" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfHashMultiMap</definition>
        <argsstring>(size_type n, const hasher &amp;hf=hasher(), const key_equal &amp;eql=key_equal(), const allocator_type &amp;alloc=allocator_type())</argsstring>
        <name>TfHashMultiMap</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const hasher &amp;</type>
          <declname>hf</declname>
          <defval>hasher()</defval>
        </param>
        <param>
          <type>const key_equal &amp;</type>
          <declname>eql</declname>
          <defval>key_equal()</defval>
        </param>
        <param>
          <type>const allocator_type &amp;</type>
          <declname>alloc</declname>
          <defval>allocator_type()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="382" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1ad2b34c89d194382a053c6a90e4517ad1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfHashMultiMap</definition>
        <argsstring>(const allocator_type &amp;alloc)</argsstring>
        <name>TfHashMultiMap</name>
        <param>
          <type>const allocator_type &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="387" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a2da962ae0b64e5af8300c9b5abde6660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>TfHashMultiMap</definition>
        <argsstring>(InputIterator first, InputIterator last, size_type n=0, const hasher &amp;hf=hasher(), const key_equal &amp;eql=key_equal(), const allocator_type &amp;alloc=allocator_type())</argsstring>
        <name>TfHashMultiMap</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const hasher &amp;</type>
          <declname>hf</declname>
          <defval>hasher()</defval>
        </param>
        <param>
          <type>const key_equal &amp;</type>
          <declname>eql</declname>
          <defval>key_equal()</defval>
        </param>
        <param>
          <type>const allocator_type &amp;</type>
          <declname>alloc</declname>
          <defval>allocator_type()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="389" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a51dddb3c88e4048fb679799e544bd837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfHashMultiMap</definition>
        <argsstring>(const TfHashMultiMap &amp;other)</argsstring>
        <name>TfHashMultiMap</name>
        <param>
          <type>const TfHashMultiMap &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="394" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a419d5d55602c52b3bea1c30a4c268882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TfHashMultiMap &amp;</type>
        <definition>TfHashMultiMap&amp; operator=</definition>
        <argsstring>(const TfHashMultiMap &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const TfHashMultiMap &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="396" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1ad69bd11391be1a1dba5c8202259664f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="401" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="401" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a29305669b60ca1680752e2fc3592ba99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="402" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="402" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a39112ae08f6ffc7ee58c6aa79772e094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="406" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="406" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a93791e61ab486b4022c389d634b4facc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="407" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1acad38d52497a975bfb6f2f6acd76631f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="411" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="412" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1ae57ff6dd1cb4dc347b892dfa87ea6613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type erase</definition>
        <argsstring>(const key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="414" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a1d1ebfe90d3c757899a8fe7c1851a082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erase</definition>
        <argsstring>(const_iterator position)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="415" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1aa976d06faa51fef1b6bdc440aa31507e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void erase</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="416" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="416" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1adfc10f2aee7cb4ae03578d73388f6b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator insert</definition>
        <argsstring>(const value_type &amp;v)</argsstring>
        <name>insert</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="422" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="422" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a33e22fbb075ded8303ad5f49beb3fbd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator insert</definition>
        <argsstring>(const_iterator hint, const value_type &amp;v)</argsstring>
        <name>insert</name>
        <param>
          <type>const_iterator</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>const value_type &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="425" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="425" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1ac048f549259de32da2acd742cce52d5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void insert</definition>
        <argsstring>(InputIterator first, InputIterator last)</argsstring>
        <name>insert</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="429" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1ac23bc175d43f26deda9a144d27c8f6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(TfHashMultiMap &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type>TfHashMultiMap &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="441" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="441" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_hash_multi_map_1a678ef3a8a6c7007dc90723785b9e494a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mapped_type &amp;</type>
        <definition>mapped_type&amp; operator[]</definition>
        <argsstring>(const key_type &amp;k)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="442" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="442" bodyend="442"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_hash_multi_map_1a3ea1e636e14d80db29906854cca5297c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key2</type>
          </param>
          <param>
            <type>class Mapped2</type>
          </param>
          <param>
            <type>class HashFn2</type>
          </param>
          <param>
            <type>class EqualKey2</type>
          </param>
          <param>
            <type>class Alloc2</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TfHashMap&lt; Key2, Mapped2, HashFn2, EqualKey2, Alloc2 &gt; &amp;, const TfHashMap&lt; Key2, Mapped2, HashFn2, EqualKey2, Alloc2 &gt; &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const TfHashMap&lt; Key2, Mapped2, HashFn2, EqualKey2, Alloc2 &gt; &amp;</type>
        </param>
        <param>
          <type>const TfHashMap&lt; Key2, Mapped2, HashFn2, EqualKey2, Alloc2 &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/hashmap.h" line="446" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/hashmap.h" line="361" column="1" bodyfile="pxr/base/tf/hashmap.h" bodystart="360" bodyend="448"/>
    <listofallmembers>
      <member refid="class_tf_hash_multi_map_1a9f3cea8796840f34ab25165bb5a01c0b" prot="private" virt="non-virtual"><scope>TfHashMultiMap</scope><name>_Base</name></member>
      <member refid="class_tf_hash_multi_map_1a8e78a5dfa50c83f71230f468f65f678c" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>allocator_type</name></member>
      <member refid="class_tf_hash_multi_map_1ad69bd11391be1a1dba5c8202259664f8" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>begin</name></member>
      <member refid="class_tf_hash_multi_map_1a29305669b60ca1680752e2fc3592ba99" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>begin</name></member>
      <member refid="class_tf_hash_multi_map_1a39112ae08f6ffc7ee58c6aa79772e094" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>cbegin</name></member>
      <member refid="class_tf_hash_multi_map_1a93791e61ab486b4022c389d634b4facc" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>cend</name></member>
      <member refid="class_tf_hash_multi_map_1abf50bf9ebf304ff61d988214abe2705b" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>const_iterator</name></member>
      <member refid="class_tf_hash_multi_map_1a50728ddfc4a8e7d635c49ebd4a9cbda0" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>const_pointer</name></member>
      <member refid="class_tf_hash_multi_map_1a2909c7801320c39c712e6b21f8d38bd2" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>const_reference</name></member>
      <member refid="class_tf_hash_multi_map_1aa5a58befa6586aa9c6c61a310831e0b6" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>difference_type</name></member>
      <member refid="classstd_1_1unordered__multimap_1af400dbe3fe1572c567f882190c772196" prot="private" virt="non-virtual"><scope>TfHashMultiMap</scope><name>elements</name></member>
      <member refid="class_tf_hash_multi_map_1acad38d52497a975bfb6f2f6acd76631f" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>end</name></member>
      <member refid="class_tf_hash_multi_map_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>end</name></member>
      <member refid="class_tf_hash_multi_map_1ae57ff6dd1cb4dc347b892dfa87ea6613" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>erase</name></member>
      <member refid="class_tf_hash_multi_map_1a1d1ebfe90d3c757899a8fe7c1851a082" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>erase</name></member>
      <member refid="class_tf_hash_multi_map_1aa976d06faa51fef1b6bdc440aa31507e" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>erase</name></member>
      <member refid="class_tf_hash_multi_map_1aefcad3c093e9915ceb4360ce11cc3130" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>hasher</name></member>
      <member refid="class_tf_hash_multi_map_1adfc10f2aee7cb4ae03578d73388f6b3a" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>insert</name></member>
      <member refid="class_tf_hash_multi_map_1a33e22fbb075ded8303ad5f49beb3fbd0" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>insert</name></member>
      <member refid="class_tf_hash_multi_map_1ac048f549259de32da2acd742cce52d5c" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>insert</name></member>
      <member refid="class_tf_hash_multi_map_1ab4c0a55438ff52693fa929f04cf45f45" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>iterator</name></member>
      <member refid="class_tf_hash_multi_map_1ac0a09c689fcca06cafa34fc7fc47f8de" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>key_equal</name></member>
      <member refid="class_tf_hash_multi_map_1a0651d24cb7f6a75fdef802cd1360d9cd" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>key_type</name></member>
      <member refid="classstd_1_1unordered__multimap_1a4736f9b2b54dddaa10b54581a23a1789" prot="private" virt="non-virtual"><scope>TfHashMultiMap</scope><name>keys</name></member>
      <member refid="class_tf_hash_multi_map_1a35b435f4aa2435318bcdaff9f0935b9e" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>mapped_type</name></member>
      <member refid="class_tf_hash_multi_map_1a419d5d55602c52b3bea1c30a4c268882" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>operator=</name></member>
      <member refid="class_tf_hash_multi_map_1a3ea1e636e14d80db29906854cca5297c" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>operator==</name></member>
      <member refid="class_tf_hash_multi_map_1a678ef3a8a6c7007dc90723785b9e494a" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>operator[]</name></member>
      <member refid="class_tf_hash_multi_map_1a6b408838e63773be343f3225927c3313" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>pointer</name></member>
      <member refid="class_tf_hash_multi_map_1a14e3b51b93bdf09483f3013ae8cdcff0" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>reference</name></member>
      <member refid="class_tf_hash_multi_map_1a502a30fbc758c71e627db567c3c06929" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>size_type</name></member>
      <member refid="class_tf_hash_multi_map_1ac23bc175d43f26deda9a144d27c8f6ff" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>swap</name></member>
      <member refid="class_tf_hash_multi_map_1a0b816c6a447b964f1b07055282a49388" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>TfHashMultiMap</name></member>
      <member refid="class_tf_hash_multi_map_1a7e0b19d093916dacf418d642e2682a92" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>TfHashMultiMap</name></member>
      <member refid="class_tf_hash_multi_map_1ad2b34c89d194382a053c6a90e4517ad1" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>TfHashMultiMap</name></member>
      <member refid="class_tf_hash_multi_map_1a2da962ae0b64e5af8300c9b5abde6660" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>TfHashMultiMap</name></member>
      <member refid="class_tf_hash_multi_map_1a51dddb3c88e4048fb679799e544bd837" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>TfHashMultiMap</name></member>
      <member refid="class_tf_hash_multi_map_1a64100583b25ebb72f232d140d9befae1" prot="public" virt="non-virtual"><scope>TfHashMultiMap</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
