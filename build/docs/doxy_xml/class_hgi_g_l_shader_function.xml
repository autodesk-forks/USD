<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_shader_function" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLShaderFunction</compoundname>
    <basecompoundref refid="class_hgi_shader_function" prot="public" virt="non-virtual">HgiShaderFunction</basecompoundref>
    <includes refid="_l_2shader_function_8h" local="no">shaderFunction.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hgi_g_l_shader_function_1a459c65427f4c47c738022928ea52ecae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HgiGL</definition>
        <argsstring></argsstring>
        <name>HgiGL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="62" column="1" bodyfile="pxr/imaging/hgiGL/shaderFunction.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_shader_function_1a3951c617030ccb54dac31d10e6fb9a52" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _errors</definition>
        <argsstring></argsstring>
        <name>_errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="73" column="1" bodyfile="pxr/imaging/hgiGL/shaderFunction.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_shader_function_1a3156938aa80cac21e4529661cb0b7dca" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t _shaderId</definition>
        <argsstring></argsstring>
        <name>_shaderId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="74" column="1" bodyfile="pxr/imaging/hgiGL/shaderFunction.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1a84b1845e8ee361fe05f58f0b8e7b549d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLShaderFunction</definition>
        <argsstring>() override</argsstring>
        <name>~HgiGLShaderFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1a9ba9cc57ab3c62115348a872b214da24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API bool</type>
        <definition>HGIGL_API bool IsValid</definition>
        <argsstring>() const override</argsstring>
        <name>IsValid</name>
        <reimplements refid="class_hgi_shader_function_1a14252f4137a1cb84ced798214eabe2d3">IsValid</reimplements>
        <briefdescription>
<para>Returns false if any shader compile errors occured. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1a9fa577dda7e07c0026be8278fe68aea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API std::string const  &amp;</type>
        <definition>HGIGL_API std::string const&amp; GetCompileErrors</definition>
        <argsstring>() override</argsstring>
        <name>GetCompileErrors</name>
        <reimplements refid="class_hgi_shader_function_1a0d8a616ea20c7ebe8b03436ddbde5e39">GetCompileErrors</reimplements>
        <briefdescription>
<para>Returns shader compile errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1aaf2f07918f87f57adccda3e250297da7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API size_t</type>
        <definition>HGIGL_API size_t GetByteSizeOfResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetByteSizeOfResource</name>
        <reimplements refid="class_hgi_shader_function_1afb9f5da99a13e9adcab7f87cb9a6ad94">GetByteSizeOfResource</reimplements>
        <briefdescription>
<para>Returns the byte size of the GPU shader function. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be helpful if the application wishes to tally up memory usage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API uint64_t</type>
        <definition>HGIGL_API uint64_t GetRawResource</definition>
        <argsstring>() const override</argsstring>
        <name>GetRawResource</name>
        <reimplements refid="class_hgi_shader_function_1a1c1b84de203362af87c23d73c8f8d395">GetRawResource</reimplements>
        <briefdescription>
<para>This function returns the handle to the <ref refid="class_hgi" kindref="compound">Hgi</ref> backend&apos;s gpu resource, cast to a uint64_t. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should avoid using this function and instead use <ref refid="class_hgi" kindref="compound">Hgi</ref> base classes so that client code works with any <ref refid="class_hgi" kindref="compound">Hgi</ref> platform. For transitioning code to <ref refid="class_hgi" kindref="compound">Hgi</ref>, it can however we useful to directly access a platform&apos;s internal resource handles. There is no safety provided in using this. If you by accident pass a HgiMetal resource into an OpenGL call, bad things may happen. In OpenGL this returns the GLuint resource name. In Metal this returns the id&lt;MTLFunction&gt; as uint64_t. In Vulkan this returns the VkShaderModule as uint64_t. In DX12 this returns the ID3D12Resource pointer as uint64_t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1aecb4a0053ff003c66e53e30ff7c56dad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API uint32_t</type>
        <definition>HGIGL_API uint32_t GetShaderId</definition>
        <argsstring>() const</argsstring>
        <name>GetShaderId</name>
        <briefdescription>
<para>Returns the gl resource id of the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1a8bfc2c00496673c9ce7867d4351733a9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLShaderFunction</definition>
        <argsstring>(Hgi const *hgi, HgiShaderFunctionDesc const &amp;desc)</argsstring>
        <name>HgiGLShaderFunction</name>
        <param>
          <type><ref refid="class_hgi" kindref="compound">Hgi</ref> const *</type>
          <declname>hgi</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_shader_function_desc" kindref="compound">HgiShaderFunctionDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1adddf098ee2e5b9a580faf288fbaf07d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLShaderFunction</definition>
        <argsstring>()=delete</argsstring>
        <name>HgiGLShaderFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1a114cc26d0e23301c42927ec7ace90618" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_shader_function" kindref="compound">HgiGLShaderFunction</ref> &amp;</type>
        <definition>HgiGLShaderFunction&amp; operator=</definition>
        <argsstring>(const HgiGLShaderFunction &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_shader_function" kindref="compound">HgiGLShaderFunction</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_shader_function_1ae4de621b17208b0156311a78d55d9475" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLShaderFunction</definition>
        <argsstring>(const HgiGLShaderFunction &amp;)=delete</argsstring>
        <name>HgiGLShaderFunction</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_shader_function" kindref="compound">HgiGLShaderFunction</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/shaderFunction.h" line="70" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenGL implementation of <ref refid="class_hgi_shader_function" kindref="compound">HgiShaderFunction</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3857">
        <label>HgiShaderFunction</label>
        <link refid="class_hgi_shader_function"/>
      </node>
      <node id="3856">
        <label>HgiGLShaderFunction</label>
        <link refid="class_hgi_g_l_shader_function"/>
        <childnode refid="3857" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3859">
        <label>HgiShaderFunction</label>
        <link refid="class_hgi_shader_function"/>
        <childnode refid="3860" relation="usage">
          <edgelabel>_descriptor</edgelabel>
        </childnode>
      </node>
      <node id="3860">
        <label>HgiShaderFunctionDesc</label>
        <link refid="struct_hgi_shader_function_desc"/>
        <childnode refid="3861" relation="usage">
          <edgelabel>computeDescriptor</edgelabel>
        </childnode>
        <childnode refid="3863" relation="usage">
          <edgelabel>geometryDescriptor</edgelabel>
        </childnode>
        <childnode refid="3864" relation="usage">
          <edgelabel>tessellationDescriptor</edgelabel>
        </childnode>
        <childnode refid="3865" relation="usage">
          <edgelabel>fragmentDescriptor</edgelabel>
        </childnode>
      </node>
      <node id="3858">
        <label>HgiGLShaderFunction</label>
        <link refid="class_hgi_g_l_shader_function"/>
        <childnode refid="3859" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3864">
        <label>HgiShaderFunctionTessellationDesc</label>
        <link refid="struct_hgi_shader_function_tessellation_desc"/>
      </node>
      <node id="3862">
        <label>GfVec3i</label>
        <link refid="class_gf_vec3i"/>
      </node>
      <node id="3865">
        <label>HgiShaderFunctionFragmentDesc</label>
        <link refid="struct_hgi_shader_function_fragment_desc"/>
      </node>
      <node id="3863">
        <label>HgiShaderFunctionGeometryDesc</label>
        <link refid="struct_hgi_shader_function_geometry_desc"/>
      </node>
      <node id="3861">
        <label>HgiShaderFunctionComputeDesc</label>
        <link refid="struct_hgi_shader_function_compute_desc"/>
        <childnode refid="3862" relation="usage">
          <edgelabel>localSize</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgiGL/shaderFunction.h" line="40" column="1" bodyfile="pxr/imaging/hgiGL/shaderFunction.h" bodystart="39" bodyend="75"/>
    <listofallmembers>
      <member refid="class_hgi_shader_function_1aa16bc16000e250f48580ae98cd787d61" prot="protected" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>_descriptor</name></member>
      <member refid="class_hgi_g_l_shader_function_1a3951c617030ccb54dac31d10e6fb9a52" prot="private" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>_errors</name></member>
      <member refid="class_hgi_g_l_shader_function_1a3156938aa80cac21e4529661cb0b7dca" prot="private" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>_shaderId</name></member>
      <member refid="class_hgi_g_l_shader_function_1aaf2f07918f87f57adccda3e250297da7" prot="public" virt="virtual"><scope>HgiGLShaderFunction</scope><name>GetByteSizeOfResource</name></member>
      <member refid="class_hgi_g_l_shader_function_1a9fa577dda7e07c0026be8278fe68aea9" prot="public" virt="virtual"><scope>HgiGLShaderFunction</scope><name>GetCompileErrors</name></member>
      <member refid="class_hgi_shader_function_1a6efa7a57ed091f72612e667cb835d732" prot="public" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>GetDescriptor</name></member>
      <member refid="class_hgi_g_l_shader_function_1adc3ffb4c04b3ab04225e25cf3f7dfe05" prot="public" virt="virtual"><scope>HgiGLShaderFunction</scope><name>GetRawResource</name></member>
      <member refid="class_hgi_g_l_shader_function_1aecb4a0053ff003c66e53e30ff7c56dad" prot="public" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>GetShaderId</name></member>
      <member refid="class_hgi_g_l_shader_function_1a459c65427f4c47c738022928ea52ecae" prot="protected" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>HgiGL</name></member>
      <member refid="class_hgi_g_l_shader_function_1a8bfc2c00496673c9ce7867d4351733a9" prot="protected" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>HgiGLShaderFunction</name></member>
      <member refid="class_hgi_g_l_shader_function_1adddf098ee2e5b9a580faf288fbaf07d3" prot="private" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>HgiGLShaderFunction</name></member>
      <member refid="class_hgi_g_l_shader_function_1ae4de621b17208b0156311a78d55d9475" prot="private" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>HgiGLShaderFunction</name></member>
      <member refid="class_hgi_shader_function_1a02b7c847ae4f4fc4f7c8d36446fccd51" prot="protected" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>HgiShaderFunction</name></member>
      <member refid="class_hgi_g_l_shader_function_1a9ba9cc57ab3c62115348a872b214da24" prot="public" virt="virtual"><scope>HgiGLShaderFunction</scope><name>IsValid</name></member>
      <member refid="class_hgi_g_l_shader_function_1a114cc26d0e23301c42927ec7ace90618" prot="private" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>operator=</name></member>
      <member refid="class_hgi_g_l_shader_function_1a84b1845e8ee361fe05f58f0b8e7b549d" prot="public" virt="non-virtual"><scope>HgiGLShaderFunction</scope><name>~HgiGLShaderFunction</name></member>
      <member refid="class_hgi_shader_function_1a9a363cc817bf5a724a6491c05d2bc13e" prot="public" virt="virtual"><scope>HgiGLShaderFunction</scope><name>~HgiShaderFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
