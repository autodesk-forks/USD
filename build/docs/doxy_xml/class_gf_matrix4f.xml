<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_matrix4f" kind="class" language="C++" prot="public">
    <compoundname>GfMatrix4f</compoundname>
    <includes refid="matrix4f_8h" local="no">matrix4f.h</includes>
      <sectiondef kind="user-defined">
      <header>3D Transformation Utilities</header>
      <memberdef kind="function" id="class_gf_matrix4f_1a6940412688b36f5b2027c883b7d9364d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotate</definition>
        <argsstring>(const GfQuatf &amp;rot)</argsstring>
        <name>SetRotate</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>, and clears the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6969f7189731f46adc2c7f876c20af8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotateOnly</definition>
        <argsstring>(const GfQuatf &amp;rot)</argsstring>
        <name>SetRotateOnly</name>
        <param>
          <type>const <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>, without clearing the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a8971b8f88f6cd50fa4bc7a08c3b5bccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotate</definition>
        <argsstring>(const GfRotation &amp;rot)</argsstring>
        <name>SetRotate</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>, and clears the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a46a167cf437f2064dc2de97cb5e974a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotateOnly</definition>
        <argsstring>(const GfRotation &amp;rot)</argsstring>
        <name>SetRotateOnly</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>rot</emphasis>, without clearing the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a002eaa1320c281403362622f55053776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotate</definition>
        <argsstring>(const GfMatrix3f &amp;mx)</argsstring>
        <name>SetRotate</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>mx</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>mx</emphasis>, and clears the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ade3bfa52137e18e4a510368b9ecc8614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetRotateOnly</definition>
        <argsstring>(const GfMatrix3f &amp;mx)</argsstring>
        <name>SetRotateOnly</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>mx</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a rotation equivalent to <emphasis>mx</emphasis>, without clearing the translation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a686baa9f639c127361e6982899f1305e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetScale</definition>
        <argsstring>(const GfVec3f &amp;scaleFactors)</argsstring>
        <name>SetScale</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>scaleFactors</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a nonuniform scaling in x, y, and z by the factors in vector <emphasis>scaleFactors</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1aa607cb4ddabc19d5e4026aaa544f2d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetTranslate</definition>
        <argsstring>(const GfVec3f &amp;trans)</argsstring>
        <name>SetTranslate</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a translation by the vector <emphasis>trans</emphasis>, and clears the rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ad0fcc9ac70b5a557aa4bf4f0113c0f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetTranslateOnly</definition>
        <argsstring>(const GfVec3f &amp;t)</argsstring>
        <name>SetTranslateOnly</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a translation by the vector <emphasis>trans</emphasis>, without clearing the rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a411484cb5c739ea814d5377e628a8950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetTransform</definition>
        <argsstring>(const GfRotation &amp;rotate, const GfVec3f &amp;translate)</argsstring>
        <name>SetTransform</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotate</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translate</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a rotation by <emphasis>rotate</emphasis> and a translation by <emphasis>translate</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a1772aa10977e4abc451bee6a77246c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetTransform</definition>
        <argsstring>(const GfMatrix3f &amp;rotmx, const GfVec3f &amp;translate)</argsstring>
        <name>SetTransform</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>rotmx</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translate</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a rotation by <emphasis>rotmx</emphasis> and a translation by <emphasis>translate</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a926f620a5062e277e23bafe3daa88b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetLookAt</definition>
        <argsstring>(const GfVec3f &amp;eyePoint, const GfVec3f &amp;centerPoint, const GfVec3f &amp;upDirection)</argsstring>
        <name>SetLookAt</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>eyePoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>centerPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>upDirection</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a viewing matrix from parameters similar to those used by <computeroutput>gluLookAt(3G)</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><emphasis>eyePoint</emphasis> represents the eye point in world space. <emphasis>centerPoint</emphasis> represents the world-space center of attention. <emphasis>upDirection</emphasis> is a vector indicating which way is up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6a7daa81bd908a2c50fd0cb7883eb59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetLookAt</definition>
        <argsstring>(const GfVec3f &amp;eyePoint, const GfRotation &amp;orientation)</argsstring>
        <name>SetLookAt</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>eyePoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to specify a viewing matrix from a world-space <emphasis>eyePoint</emphasis> and a world-space rotation that rigidly rotates the orientation from its canonical frame, which is defined to be looking along the <computeroutput>-z</computeroutput> axis with the <computeroutput>+y</computeroutput> axis as the up direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a743303978b530a680fe6b49bb742e29e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Factor</definition>
        <argsstring>(GfMatrix4f *r, GfVec3f *s, GfMatrix4f *u, GfVec3f *t, GfMatrix4f *p, float eps=1e-5) const</argsstring>
        <name>Factor</name>
        <param>
          <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> *</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>float</type>
          <declname>eps</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>Factors the matrix into 5 components: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput><emphasis>M</emphasis> = r * s * -r * u * t</computeroutput> where </para>
</listitem>
<listitem><para><emphasis>t</emphasis> is a translation. </para>
</listitem>
<listitem><para><emphasis>u</emphasis> and <emphasis>r</emphasis> are rotations, and <emphasis>-r</emphasis> is the transpose (inverse) of <emphasis>r</emphasis>. The <emphasis>u</emphasis> matrix may contain shear information. </para>
</listitem>
<listitem><para><emphasis>s</emphasis> is a scale. Any projection information could be returned in matrix <emphasis>p</emphasis>, but currently p is never modified.</para>
</listitem>
</itemizedlist>
Returns <computeroutput>false</computeroutput> if the matrix is singular (as determined by <emphasis>eps</emphasis>). In that case, any zero scales in <emphasis>s</emphasis> are clamped to <emphasis>eps</emphasis> to allow computation of <emphasis>u</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a28736416504b2733d36bad353988a0bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f ExtractTranslation</definition>
        <argsstring>() const</argsstring>
        <name>ExtractTranslation</name>
        <briefdescription>
<para>Returns the translation part of the matrix, defined as the first three elements of the last row. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="618" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="618" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1af2e19e46fe072ff91db329dfa7b21807" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref></type>
        <definition>GF_API GfRotation ExtractRotation</definition>
        <argsstring>() const</argsstring>
        <name>ExtractRotation</name>
        <briefdescription>
<para>Returns the rotation corresponding to this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This works well only if the matrix represents a rotation.</para>
<para>For good results, consider calling <ref refid="class_gf_matrix4f_1ac8cefaffeb9d5c1e76d2c10eae0793c5" kindref="member">Orthonormalize()</ref> before calling this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a043d523f01a0076acc63a5f15b76d317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_quatf" kindref="compound">GfQuatf</ref></type>
        <definition>GF_API GfQuatf ExtractRotationQuat</definition>
        <argsstring>() const</argsstring>
        <name>ExtractRotationQuat</name>
        <briefdescription>
<para>Return the rotation corresponding to this matrix as a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para>This works well only if the matrix represents a rotation.</para>
<para>For good results, consider calling <ref refid="class_gf_matrix4f_1ac8cefaffeb9d5c1e76d2c10eae0793c5" kindref="member">Orthonormalize()</ref> before calling this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6c48e376daaac37a1f791dc774556c46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GF_API GfVec3f DecomposeRotation</definition>
        <argsstring>(const GfVec3f &amp;axis0, const GfVec3f &amp;axis1, const GfVec3f &amp;axis2) const</argsstring>
        <name>DecomposeRotation</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>axis0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>axis1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>axis2</declname>
        </param>
        <briefdescription>
<para>Decompose the rotation corresponding to this matrix about 3 orthogonal axes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the axes are not orthogonal, warnings will be spewed.</para>
<para>This is a convenience method that is equivalent to calling <ref refid="class_gf_matrix4f_1af2e19e46fe072ff91db329dfa7b21807" kindref="member">ExtractRotation()</ref>.Decompose(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a99e70e414c60d96fcd3f73b7a2fe1264" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref></type>
        <definition>GF_API GfMatrix3f ExtractRotationMatrix</definition>
        <argsstring>() const</argsstring>
        <name>ExtractRotationMatrix</name>
        <briefdescription>
<para>Returns the rotation corresponding to this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This works well only if the matrix represents a rotation.</para>
<para>For good results, consider calling <ref refid="class_gf_matrix4f_1ac8cefaffeb9d5c1e76d2c10eae0793c5" kindref="member">Orthonormalize()</ref> before calling this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a10f82d32748d0fcb00277b5f9485c910" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d Transform</definition>
        <argsstring>(const GfVec3d &amp;vec) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a 4-component vector whose fourth component is 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="659" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae1102b60f8cb5c93303c4b75e05a8fd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f Transform</definition>
        <argsstring>(const GfVec3f &amp;vec) const</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a 4-component vector whose fourth component is 1. This is an overloaded method; it differs from the other version in that it returns a different value type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="671" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="671" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a2a98d5017ab606b757cffbf60912fbf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d TransformDir</definition>
        <argsstring>(const GfVec3d &amp;vec) const</argsstring>
        <name>TransformDir</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a direction vector, so the translation information in the matrix is ignored. That is, it treats the vector as a 4-component vector whose fourth component is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="683" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="683" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a9b5fcc3a69a69eb0451be57a48ed82c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f TransformDir</definition>
        <argsstring>(const GfVec3f &amp;vec) const</argsstring>
        <name>TransformDir</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a direction vector, so the translation information in the matrix is ignored. That is, it treats the vector as a 4-component vector whose fourth component is 0. This is an overloaded method; it differs from the other version in that it returns a different value type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="696" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="696" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ac379f460c0ef02fddd31ee3dc11f284d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d TransformAffine</definition>
        <argsstring>(const GfVec3d &amp;vec) const</argsstring>
        <name>TransformAffine</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a 4-component vector whose fourth component is 1 and ignores the fourth column of the matrix (i.e. assumes it is (0, 0, 0, 1)). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="707" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="707" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1af2bef8d29d5cbb9d9e27b05d0dd6f0ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f TransformAffine</definition>
        <argsstring>(const GfVec3f &amp;vec) const</argsstring>
        <name>TransformAffine</name>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Transforms the row vector <emphasis>vec</emphasis> by the matrix, returning the result. </para>
        </briefdescription>
        <detaileddescription>
<para>This treats the vector as a 4-component vector whose fourth component is 1 and ignores the fourth column of the matrix (i.e. assumes it is (0, 0, 0, 1)). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="718" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="718" bodyend="723"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_gf_matrix4f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" static="no">
        <type>float</type>
        <definition>typedef float ScalarType</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="90" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_gf_matrix4f_1aa1e57e1649aa43fa284959654bc9784a" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numRows</definition>
        <argsstring></argsstring>
        <name>numRows</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="92" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_matrix4f_1a0d7184866d68bd99f6685029368bf09e" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t numColumns</definition>
        <argsstring></argsstring>
        <name>numColumns</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="93" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_matrix4f_1a5a10a31867d3fe7be6672475461be87a" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_matrix_data" kindref="compound">GfMatrixData</ref>&lt; float, 4, 4 &gt;</type>
        <definition>GfMatrixData&lt;float, 4, 4&gt; _mtx</definition>
        <argsstring></argsstring>
        <name>_mtx</name>
        <briefdescription>
<para>Matrix storage, in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="743" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="743" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_gf_matrix4f_1a45ac35cf76a47a7b501472096e05cdf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GfMatrix4d</definition>
        <argsstring></argsstring>
        <name>GfMatrix4d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="746" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a71d8f1c729104a0e0d4d0c18211480bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(GfMatrix4f const &amp;m)</argsstring>
        <name>hash_value</name>
        <param>
          <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="304" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="304" bodyend="323"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a0c6f58277860710b506e13c7ea8b349d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator *</definition>
        <argsstring>(const GfMatrix4f &amp;m1, double d)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix and a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="437" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a6a32956732ddf5d85ea5e1a4377b4ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator *</definition>
        <argsstring>(double d, const GfMatrix4f &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="445" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a22c80478c68863390e719eab4b656867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GF_API friend GfMatrix4f operator -</definition>
        <argsstring>(const GfMatrix4f &amp;m)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the unary negation of matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a8211bdc60f08292afba56644cb87f914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator+</definition>
        <argsstring>(const GfMatrix4f &amp;m1, const GfMatrix4f &amp;m2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m2</emphasis> to <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="463" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="463" bodyend="468"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a9020512c9e68389e659115b04307d674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator -</definition>
        <argsstring>(const GfMatrix4f &amp;m1, const GfMatrix4f &amp;m2)</argsstring>
        <name>operator -</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m2</emphasis> from <emphasis>m1</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="471" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="471" bodyend="476"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a64bca55bb693350490429d676eed21d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator *</definition>
        <argsstring>(const GfMatrix4f &amp;m1, const GfMatrix4f &amp;m2)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Multiplies matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="479" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="479" bodyend="484"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1a6a07f7ab4b9ebbb4ee8529a8b2ba2297" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GfMatrix4f operator/</definition>
        <argsstring>(const GfMatrix4f &amp;m1, const GfMatrix4f &amp;m2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Divides matrix <emphasis>m1</emphasis> by <emphasis>m2</emphasis> (that is, <computeroutput>m1 * inv(m2)</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="487" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="487" bodyend="490"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1afe2fb4e654eecdb79c3411dde08285bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f operator *</definition>
        <argsstring>(const GfMatrix4f &amp;m, const GfVec4f &amp;vec)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Returns the product of a matrix <emphasis>m</emphasis> and a column vector <emphasis>vec</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="493" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="493" bodyend="498"/>
      </memberdef>
      <memberdef kind="friend" id="class_gf_matrix4f_1afb9cd47a4c992344390318728af5c0c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f operator *</definition>
        <argsstring>(const GfVec4f &amp;vec, const GfMatrix4f &amp;m)</argsstring>
        <name>operator *</name>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Returns the product of row vector <emphasis>vec</emphasis> and a matrix <emphasis>m</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="501" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="501" bodyend="506"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_matrix4f_1ad48adec7865ca2f212e744ffb36a0673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GfMatrix4f</definition>
        <argsstring>()=default</argsstring>
        <name>GfMatrix4f</name>
        <briefdescription>
<para>Default constructor. Leaves the matrix component values undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a988309f2a07cadc573babbea45b3e215" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix4f</definition>
        <argsstring>(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>float</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m02</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m03</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m11</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m12</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m13</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m20</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m21</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m22</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m23</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m30</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m31</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m32</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m33</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from 16 independent <computeroutput>float</computeroutput> values, specified in row-major order. For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="101" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ab8b45a6d2c280040a7bfb44ffef1b2f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix4f</definition>
        <argsstring>(const float m[4][4])</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const float</type>
          <declname>m</declname>
          <array>[4][4]</array>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the matrix from a 4x4 array of <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="113" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1acf7a5c2c40ba704f0841aed09772d042" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix4f</definition>
        <argsstring>(float s)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="119" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae1a7c95135fee454bc9ec6c0557f4c86" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfMatrix4f</definition>
        <argsstring>(const GfVec4f &amp;v)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Explicitly initializes the matrix to diagonal form, with the <emphasis>i</emphasis> th element on the diagonal set to <computeroutput>v[i]</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="125" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a743ae10dc6c300e434294d7d36e3ea8d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of double. The vector is expected to be 4x4. If it is too big, only the first 4 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a78651f37f6de02134b076cb859a7f524" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;v)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from a vector of vectors of float. The vector is expected to be 4x4. If it is too big, only the first 4 rows and/or columns will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a2fbe2ad84cd7f2d10c652cce839f50df" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;r0, const std::vector&lt; double &gt; &amp;r1, const std::vector&lt; double &gt; &amp;r2, const std::vector&lt; double &gt; &amp;r3)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>r0</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>r3</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from 4 row vectors of double. Each vector is expected to length 4. If it is too big, only the first 4 items will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a0681f4fc1f9aaf1220f30f711ba0d467" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;r0, const std::vector&lt; float &gt; &amp;r1, const std::vector&lt; float &gt; &amp;r2, const std::vector&lt; float &gt; &amp;r3)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>r0</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>r3</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the matrix from 4 row vectors of float. Each vector is expected to length 4. If it is too big, only the first 4 items will be used. If it is too small, uninitialized elements will be filled in with the corresponding elements from an identity matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a932b0396e06f82e729b00ecfe43a934e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const GfRotation &amp;rotate, const GfVec3f &amp;translate)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const <ref refid="class_gf_rotation" kindref="compound">GfRotation</ref> &amp;</type>
          <declname>rotate</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translate</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes a transformation matrix to perform the indicated rotation and translation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1abc10a2d288fe473e01fbb19c29fd96d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const GfMatrix3f &amp;rotmx, const GfVec3f &amp;translate)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const <ref refid="class_gf_matrix3f" kindref="compound">GfMatrix3f</ref> &amp;</type>
          <declname>rotmx</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>translate</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes a transformation matrix to perform the indicated rotation and translation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ad2aa8389e6d7f2fc09683e98372db76f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GF_API</type>
        <definition>GF_API GfMatrix4f</definition>
        <argsstring>(const class GfMatrix4d &amp;m)</argsstring>
        <name>GfMatrix4f</name>
        <param>
          <type>const class <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>This explicit constructor converts a &quot;double&quot; matrix to a &quot;float&quot; matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a9badccc622d159f01e45efbe02e96c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRow</definition>
        <argsstring>(int i, const GfVec4f &amp;v)</argsstring>
        <name>SetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a row of the matrix from a Vec4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="187" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="187" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae2521585ed65d53d8abcd50e62b0688c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetColumn</definition>
        <argsstring>(int i, const GfVec4f &amp;v)</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a column of the matrix from a Vec4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="195" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae90aec59f7369d7ee483540feb6d4b16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f GetRow</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetRow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a row of the matrix as a Vec4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="203" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae53c3ac3e4a3fd876bf44fa540854fca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref></type>
        <definition>GfVec4f GetColumn</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a column of the matrix as a Vec4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="208" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6df773beaa9a19f352f48dddd435135a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GfMatrix4f&amp; Set</definition>
        <argsstring>(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)</argsstring>
        <name>Set</name>
        <param>
          <type>float</type>
          <declname>m00</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m01</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m02</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m03</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m10</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m11</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m12</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m13</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m20</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m21</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m22</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m23</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m30</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m31</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m32</declname>
        </param>
        <param>
          <type>float</type>
          <declname>m33</declname>
        </param>
        <briefdescription>
<para>Sets the matrix from 16 independent <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, parameter <emphasis>m10</emphasis> specifies the value in row 1 and column 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="215" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="215" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1aa86995b47325361fafaa6082e0f1c8e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GfMatrix4f&amp; Set</definition>
        <argsstring>(const float m[4][4])</argsstring>
        <name>Set</name>
        <param>
          <type>const float</type>
          <declname>m</declname>
          <array>[4][4]</array>
        </param>
        <briefdescription>
<para>Sets the matrix from a 4x4 array of <computeroutput>float</computeroutput> values, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="228" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="228" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a3998548b6959cf4b04215ed3a8f3c253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GfMatrix4f&amp; SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
<para>Sets the matrix to the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="249" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a707e838556991f6d25b700218102fbf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GfMatrix4f&amp; SetZero</definition>
        <argsstring>()</argsstring>
        <name>SetZero</name>
        <briefdescription>
<para>Sets the matrix to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="254" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ab792f05b2ed2416d0521352b48112cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetDiagonal</definition>
        <argsstring>(float s)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Sets the matrix to <emphasis>s</emphasis> times the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6e3fc5751665b91d53febaada08ffc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetDiagonal</definition>
        <argsstring>(const GfVec4f &amp;)</argsstring>
        <name>SetDiagonal</name>
        <param>
          <type>const <ref refid="class_gf_vec4f" kindref="compound">GfVec4f</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Sets the matrix to have diagonal (<computeroutput>v[0], v[1], v[2], v[3]</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a7bd2bbbede083bee103384ee9eb8835c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API float *</type>
        <definition>GF_API float* Get</definition>
        <argsstring>(float m[4][4]) const</argsstring>
        <name>Get</name>
        <param>
          <type>float</type>
          <declname>m</declname>
          <array>[4][4]</array>
        </param>
        <briefdescription>
<para>Fills a 4x4 array of <computeroutput>float</computeroutput> values with the values in the matrix, specified in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a0983a49fcb2351e470bd415722cc4682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns raw access to components of matrix as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="273" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1aebe8a34a6aeec01aa4b8bc6fad8de6ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns const raw access to components of matrix as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
<para>Components are in row-major order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="279" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a09baf4d047c68ac25c606ac7234e9fa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* GetArray</definition>
        <argsstring>()</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as an array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="284" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a688e9b95af734597fbfe3f83d15ef6b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* GetArray</definition>
        <argsstring>() const</argsstring>
        <name>GetArray</name>
        <briefdescription>
<para>Returns vector components as a const array of <computeroutput>float</computeroutput> values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="289" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a9af5d45c48cba0e867e5ce49c44e4ff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float *</type>
        <definition>float* operator []</definition>
        <argsstring>(int i)</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 4 <computeroutput>float</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="296" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1aca0d3027d7c3e01fa1418715eab760ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* operator []</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator []</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accesses an indexed row <emphasis>i</emphasis> of the matrix as an array of 4 <computeroutput>float</computeroutput> values so that standard indexing (such as <computeroutput>m[0][1]</computeroutput>) works correctly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="301" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a96c6ef98b934f325f09961603224f98e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix4d &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a274b210747938c2eaec1ecd4a42c451f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool operator==</definition>
        <argsstring>(const GfMatrix4f &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix equality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a9476b2697b4d99596c6dc71959c8474a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix4d &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="337" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="337" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a7ca4214bf3d46ce39e1c04f68f9fd89e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfMatrix4f &amp;m) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Tests for element-wise matrix inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>All elements must match exactly for matrices to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="343" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="343" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a25dca3efd238958f5f2f0248a8c0e971" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GF_API GfMatrix4f GetTranspose</definition>
        <argsstring>() const</argsstring>
        <name>GetTranspose</name>
        <briefdescription>
<para>Returns the transpose of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6c9d9815be440adf3f49fd0cce29f0e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GF_API GfMatrix4f GetInverse</definition>
        <argsstring>(double *det=NULL, double eps=0) const</argsstring>
        <name>GetInverse</name>
        <param>
          <type>double *</type>
          <declname>det</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the inverse of the matrix, or FLT_MAX * <ref refid="class_gf_matrix4f_1a3998548b6959cf4b04215ed3a8f3c253" kindref="member">SetIdentity()</ref> if the matrix is singular. </para>
        </briefdescription>
        <detaileddescription>
<para>(FLT_MAX is the largest value a <computeroutput>float</computeroutput> can have, as defined by the system.) The matrix is considered singular if the determinant is less than or equal to the optional parameter <emphasis>eps</emphasis>. If <emphasis>det</emphasis> is non-null, <computeroutput>*det</computeroutput> is set to the determinant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetDeterminant</definition>
        <argsstring>() const</argsstring>
        <name>GetDeterminant</name>
        <briefdescription>
<para>Returns the determinant of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a49fc4757e10c643a43cecc76e29f9e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetRow3</definition>
        <argsstring>(int i, const GfVec3f &amp;v)</argsstring>
        <name>SetRow3</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sets a row of the matrix from a Vec3. </para>
        </briefdescription>
        <detaileddescription>
<para>The fourth element of the row is ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="365" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="365" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a6c661d2a26a90bf5be7910cf9eac70d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref></type>
        <definition>GfVec3f GetRow3</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetRow3</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Gets a row of the matrix as a Vec3. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="372" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ad665f77b7d5d5b86306ad72c6bffa503" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetDeterminant3</definition>
        <argsstring>() const</argsstring>
        <name>GetDeterminant3</name>
        <briefdescription>
<para>Returns the determinant of the upper 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is useful when the matrix describes a linear transformation such as a rotation or scale because the other values in the 4x4 matrix are not important. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="379" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="379" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a0d02194c175f3841f96a30002647c08e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasOrthogonalRows3</definition>
        <argsstring>() const</argsstring>
        <name>HasOrthogonalRows3</name>
        <briefdescription>
<para>Returns true, if the row vectors of the upper 3x3 matrix form an orthogonal basis. </para>
        </briefdescription>
        <detaileddescription>
<para>Note they do not have to be unit length for this test to return true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="386" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="386" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ac8cefaffeb9d5c1e76d2c10eae0793c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool Orthonormalize</definition>
        <argsstring>(bool issueWarning=true)</argsstring>
        <name>Orthonormalize</name>
        <param>
          <type>bool</type>
          <declname>issueWarning</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Makes the matrix orthonormal in place. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an iterative method that is much more stable than the previous cross/cross method. If the iterative method does not converge, a warning is issued.</para>
<para>Returns true if the iteration converged, false otherwise. Leaves any translation part of the matrix unchanged. If <emphasis>issueWarning</emphasis> is true, this method will issue a warning if the iteration does not converge, otherwise it will be silent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a169eaa4d78b43ec43ea393906956ff05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GF_API GfMatrix4f GetOrthonormalized</definition>
        <argsstring>(bool issueWarning=true) const</argsstring>
        <name>GetOrthonormalized</name>
        <param>
          <type>bool</type>
          <declname>issueWarning</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Returns an orthonormalized copy of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a9a131f93964d7e96a47fdf48f466b008" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double GetHandedness</definition>
        <argsstring>() const</argsstring>
        <name>GetHandedness</name>
        <briefdescription>
<para>Returns the sign of the determinant of the upper 3x3 matrix, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>1 for a right-handed matrix, -1 for a left-handed matrix, and 0 for a singular matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae1edd7a7cae253f883c09c3ee63c989c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRightHanded</definition>
        <argsstring>() const</argsstring>
        <name>IsRightHanded</name>
        <briefdescription>
<para>Returns true if the vectors in the upper 3x3 matrix form a right-handed coordinate system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="418" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ace17e64ba0fded94e8e4c28d7a804514" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLeftHanded</definition>
        <argsstring>() const</argsstring>
        <name>IsLeftHanded</name>
        <briefdescription>
<para>Returns true if the vectors in the upper 3x3 matrix form a left-handed coordinate system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="424" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="424" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ae2dbbc64719e8f747e7dacdcf998bc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; operator *=</definition>
        <argsstring>(const GfMatrix4f &amp;m)</argsstring>
        <name>operator *=</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Post-multiplies matrix <emphasis>m</emphasis> into this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a7eb0fdc298770d8d3d7597e710d85990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; operator *=</definition>
        <argsstring>(double)</argsstring>
        <name>operator *=</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
<para>Multiplies the matrix by a float. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1acf1596db7a1c8656feaf94e409acedd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; operator+=</definition>
        <argsstring>(const GfMatrix4f &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Adds matrix <emphasis>m</emphasis> to this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a50d6be0b7a7b7cb9503ce0cb41c89818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; operator -=</definition>
        <argsstring>(const GfMatrix4f &amp;m)</argsstring>
        <name>operator -=</name>
        <param>
          <type>const <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Subtracts matrix <emphasis>m</emphasis> from this matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1abe05189ae40357261ff136f9fa2d22a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> &amp;</type>
        <definition>GF_API GfMatrix4f&amp; SetScale</definition>
        <argsstring>(float scaleFactor)</argsstring>
        <name>SetScale</name>
        <param>
          <type>float</type>
          <declname>scaleFactor</declname>
        </param>
        <briefdescription>
<para>Sets matrix to specify a uniform scaling by <emphasis>scaleFactor</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1afbf6d9747de7933603f894d9ed776254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref></type>
        <definition>GF_API GfMatrix4f RemoveScaleShear</definition>
        <argsstring>() const</argsstring>
        <name>RemoveScaleShear</name>
        <briefdescription>
<para>Returns the matrix with any scaling or shearing removed, leaving only the rotation and translation. </para>
        </briefdescription>
        <detaileddescription>
<para>If the matrix cannot be decomposed, returns the original matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="516" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gf_matrix4f_1a83f91e8d24555528f6d7a66db59491d2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API double</type>
        <definition>GF_API double _GetDeterminant3</definition>
        <argsstring>(size_t row1, size_t row2, size_t row3, size_t col1, size_t col2, size_t col3) const</argsstring>
        <name>_GetDeterminant3</name>
        <param>
          <type>size_t</type>
          <declname>row1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>row3</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>col3</declname>
        </param>
        <briefdescription>
<para>Returns the determinant of the 3x3 submatrix specified by the three given row and column indices (0-3 for each). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1ad409e79fc6803128758c7bf4d7cf60fc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Jacobi3</definition>
        <argsstring>(GfVec3d *eigenvalues, GfVec3d eigenvectors[3]) const</argsstring>
        <name>_Jacobi3</name>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> *</type>
          <declname>eigenvalues</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
          <declname>eigenvectors</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
<para>Diagonalizes the upper 3x3 matrix of a matrix known to be symmetric. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="734" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_matrix4f_1a499f56a0ad87d0b709d653ef6b27cbc3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetRotateFromQuat</definition>
        <argsstring>(float r, const GfVec3f &amp;i)</argsstring>
        <name>_SetRotateFromQuat</name>
        <param>
          <type>float</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3f" kindref="compound">GfVec3f</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Set the 3x3 submatrix to the rotation given by a quaternion, defined by the real component <computeroutput>r</computeroutput> and imaginary components <computeroutput>i</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/matrix4f.h" line="738" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores a 4x4 matrix of <computeroutput>float</computeroutput> elements. </para>
    </briefdescription>
    <detaileddescription>
<para>A basic type.</para>
<para>Matrices are defined to be in row-major order, so <computeroutput>matrix[i][j]</computeroutput> indexes the element in the <emphasis>i</emphasis> th row and the <emphasis>j</emphasis> th column.</para>
<para><heading level="3">3D Transformations</heading>
</para>
<para>The following methods interpret a <ref refid="class_gf_matrix4f" kindref="compound">GfMatrix4f</ref> as a 3D transformation: <ref refid="class_gf_matrix4f_1a6940412688b36f5b2027c883b7d9364d" kindref="member">SetRotate()</ref>, <ref refid="class_gf_matrix4f_1abe05189ae40357261ff136f9fa2d22a6" kindref="member">SetScale()</ref>, <ref refid="class_gf_matrix4f_1aa607cb4ddabc19d5e4026aaa544f2d81" kindref="member">SetTranslate()</ref>, <ref refid="class_gf_matrix4f_1a926f620a5062e277e23bafe3daa88b3d" kindref="member">SetLookAt()</ref>, <ref refid="class_gf_matrix4f_1a743303978b530a680fe6b49bb742e29e" kindref="member">Factor()</ref>, <ref refid="class_gf_matrix4f_1a28736416504b2733d36bad353988a0bb" kindref="member">ExtractTranslation()</ref>, <ref refid="class_gf_matrix4f_1af2e19e46fe072ff91db329dfa7b21807" kindref="member">ExtractRotation()</ref>, <ref refid="class_gf_matrix4f_1a10f82d32748d0fcb00277b5f9485c910" kindref="member">Transform()</ref>, <ref refid="class_gf_matrix4f_1a2a98d5017ab606b757cffbf60912fbf6" kindref="member">TransformDir()</ref>. By convention, vectors are treated primarily as row vectors, implying the following: <itemizedlist>
<listitem><para>Transformation matrices are organized to deal with row vectors, not column vectors. For example, the last row of a matrix contains the translation amounts. </para>
</listitem>
<listitem><para>Each of the <ref refid="class_gf_matrix4f_1a6df773beaa9a19f352f48dddd435135a" kindref="member">Set()</ref> methods below completely rewrites the matrix; for example, <ref refid="class_gf_matrix4f_1aa607cb4ddabc19d5e4026aaa544f2d81" kindref="member">SetTranslate()</ref> yields a matrix which does nothing but translate. </para>
</listitem>
<listitem><para>When multiplying two transformation matrices, the matrix on the left applies a more local transformation to a row vector. For example, if R represents a rotation matrix and T represents a translation matrix, the product R*T will rotate a row vector, then translate it. </para>
</listitem>
</itemizedlist>
</para>
    </detaileddescription>
    <location file="pxr/base/gf/matrix4f.h" line="88" column="1" bodyfile="pxr/base/gf/matrix4f.h" bodystart="87" bodyend="747"/>
    <listofallmembers>
      <member refid="class_gf_matrix4f_1a83f91e8d24555528f6d7a66db59491d2" prot="private" virt="non-virtual"><scope>GfMatrix4f</scope><name>_GetDeterminant3</name></member>
      <member refid="class_gf_matrix4f_1ad409e79fc6803128758c7bf4d7cf60fc" prot="private" virt="non-virtual"><scope>GfMatrix4f</scope><name>_Jacobi3</name></member>
      <member refid="class_gf_matrix4f_1a5a10a31867d3fe7be6672475461be87a" prot="private" virt="non-virtual"><scope>GfMatrix4f</scope><name>_mtx</name></member>
      <member refid="class_gf_matrix4f_1a499f56a0ad87d0b709d653ef6b27cbc3" prot="private" virt="non-virtual"><scope>GfMatrix4f</scope><name>_SetRotateFromQuat</name></member>
      <member refid="class_gf_matrix4f_1a0983a49fcb2351e470bd415722cc4682" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>data</name></member>
      <member refid="class_gf_matrix4f_1aebe8a34a6aeec01aa4b8bc6fad8de6ce" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>data</name></member>
      <member refid="class_gf_matrix4f_1a6c48e376daaac37a1f791dc774556c46" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>DecomposeRotation</name></member>
      <member refid="class_gf_matrix4f_1af2e19e46fe072ff91db329dfa7b21807" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>ExtractRotation</name></member>
      <member refid="class_gf_matrix4f_1a99e70e414c60d96fcd3f73b7a2fe1264" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>ExtractRotationMatrix</name></member>
      <member refid="class_gf_matrix4f_1a043d523f01a0076acc63a5f15b76d317" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>ExtractRotationQuat</name></member>
      <member refid="class_gf_matrix4f_1a28736416504b2733d36bad353988a0bb" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>ExtractTranslation</name></member>
      <member refid="class_gf_matrix4f_1a743303978b530a680fe6b49bb742e29e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Factor</name></member>
      <member refid="class_gf_matrix4f_1a7bd2bbbede083bee103384ee9eb8835c" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Get</name></member>
      <member refid="class_gf_matrix4f_1a09baf4d047c68ac25c606ac7234e9fa3" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix4f_1a688e9b95af734597fbfe3f83d15ef6b8" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetArray</name></member>
      <member refid="class_gf_matrix4f_1ae53c3ac3e4a3fd876bf44fa540854fca" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetColumn</name></member>
      <member refid="class_gf_matrix4f_1a6b6c4feee3636df35d6ecbc672fa4ff9" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetDeterminant</name></member>
      <member refid="class_gf_matrix4f_1ad665f77b7d5d5b86306ad72c6bffa503" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetDeterminant3</name></member>
      <member refid="class_gf_matrix4f_1a9a131f93964d7e96a47fdf48f466b008" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetHandedness</name></member>
      <member refid="class_gf_matrix4f_1a6c9d9815be440adf3f49fd0cce29f0e8" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetInverse</name></member>
      <member refid="class_gf_matrix4f_1a169eaa4d78b43ec43ea393906956ff05" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetOrthonormalized</name></member>
      <member refid="class_gf_matrix4f_1ae90aec59f7369d7ee483540feb6d4b16" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetRow</name></member>
      <member refid="class_gf_matrix4f_1a6c661d2a26a90bf5be7910cf9eac70d8" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetRow3</name></member>
      <member refid="class_gf_matrix4f_1a25dca3efd238958f5f2f0248a8c0e971" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GetTranspose</name></member>
      <member refid="class_gf_matrix4f_1a45ac35cf76a47a7b501472096e05cdf4" prot="private" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4d</name></member>
      <member refid="class_gf_matrix4f_1ad48adec7865ca2f212e744ffb36a0673" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a988309f2a07cadc573babbea45b3e215" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1ab8b45a6d2c280040a7bfb44ffef1b2f7" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1acf7a5c2c40ba704f0841aed09772d042" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1ae1a7c95135fee454bc9ec6c0557f4c86" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a743ae10dc6c300e434294d7d36e3ea8d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a78651f37f6de02134b076cb859a7f524" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a2fbe2ad84cd7f2d10c652cce839f50df" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a0681f4fc1f9aaf1220f30f711ba0d467" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a932b0396e06f82e729b00ecfe43a934e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1abc10a2d288fe473e01fbb19c29fd96d9" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1ad2aa8389e6d7f2fc09683e98372db76f" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>GfMatrix4f</name></member>
      <member refid="class_gf_matrix4f_1a71d8f1c729104a0e0d4d0c18211480bb" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>hash_value</name></member>
      <member refid="class_gf_matrix4f_1a0d02194c175f3841f96a30002647c08e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>HasOrthogonalRows3</name></member>
      <member refid="class_gf_matrix4f_1ace17e64ba0fded94e8e4c28d7a804514" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>IsLeftHanded</name></member>
      <member refid="class_gf_matrix4f_1ae1edd7a7cae253f883c09c3ee63c989c" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>IsRightHanded</name></member>
      <member refid="class_gf_matrix4f_1a0d7184866d68bd99f6685029368bf09e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>numColumns</name></member>
      <member refid="class_gf_matrix4f_1aa1e57e1649aa43fa284959654bc9784a" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>numRows</name></member>
      <member refid="class_gf_matrix4f_1a9476b2697b4d99596c6dc71959c8474a" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix4f_1a7ca4214bf3d46ce39e1c04f68f9fd89e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator !=</name></member>
      <member refid="class_gf_matrix4f_1a0c6f58277860710b506e13c7ea8b349d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix4f_1a6a32956732ddf5d85ea5e1a4377b4ccf" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix4f_1a64bca55bb693350490429d676eed21d3" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix4f_1afe2fb4e654eecdb79c3411dde08285bb" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix4f_1afb9cd47a4c992344390318728af5c0c0" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *</name></member>
      <member refid="class_gf_matrix4f_1ae2dbbc64719e8f747e7dacdcf998bc3d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix4f_1a7eb0fdc298770d8d3d7597e710d85990" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator *=</name></member>
      <member refid="class_gf_matrix4f_1a22c80478c68863390e719eab4b656867" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator -</name></member>
      <member refid="class_gf_matrix4f_1a9020512c9e68389e659115b04307d674" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator -</name></member>
      <member refid="class_gf_matrix4f_1a50d6be0b7a7b7cb9503ce0cb41c89818" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator -=</name></member>
      <member refid="class_gf_matrix4f_1a9af5d45c48cba0e867e5ce49c44e4ff9" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator []</name></member>
      <member refid="class_gf_matrix4f_1aca0d3027d7c3e01fa1418715eab760ea" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator []</name></member>
      <member refid="class_gf_matrix4f_1a8211bdc60f08292afba56644cb87f914" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator+</name></member>
      <member refid="class_gf_matrix4f_1acf1596db7a1c8656feaf94e409acedd2" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator+=</name></member>
      <member refid="class_gf_matrix4f_1a6a07f7ab4b9ebbb4ee8529a8b2ba2297" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator/</name></member>
      <member refid="class_gf_matrix4f_1a96c6ef98b934f325f09961603224f98e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator==</name></member>
      <member refid="class_gf_matrix4f_1a274b210747938c2eaec1ecd4a42c451f" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>operator==</name></member>
      <member refid="class_gf_matrix4f_1ac8cefaffeb9d5c1e76d2c10eae0793c5" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Orthonormalize</name></member>
      <member refid="class_gf_matrix4f_1afbf6d9747de7933603f894d9ed776254" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>RemoveScaleShear</name></member>
      <member refid="class_gf_matrix4f_1ad5c19ca4f47d3f8ec21232a5af2624e5" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>ScalarType</name></member>
      <member refid="class_gf_matrix4f_1a6df773beaa9a19f352f48dddd435135a" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Set</name></member>
      <member refid="class_gf_matrix4f_1aa86995b47325361fafaa6082e0f1c8e1" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Set</name></member>
      <member refid="class_gf_matrix4f_1ae2521585ed65d53d8abcd50e62b0688c" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetColumn</name></member>
      <member refid="class_gf_matrix4f_1ab792f05b2ed2416d0521352b48112cb4" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix4f_1a6e3fc5751665b91d53febaada08ffc02" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetDiagonal</name></member>
      <member refid="class_gf_matrix4f_1a3998548b6959cf4b04215ed3a8f3c253" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetIdentity</name></member>
      <member refid="class_gf_matrix4f_1a926f620a5062e277e23bafe3daa88b3d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetLookAt</name></member>
      <member refid="class_gf_matrix4f_1a6a7daa81bd908a2c50fd0cb7883eb59d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetLookAt</name></member>
      <member refid="class_gf_matrix4f_1a6940412688b36f5b2027c883b7d9364d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotate</name></member>
      <member refid="class_gf_matrix4f_1a8971b8f88f6cd50fa4bc7a08c3b5bccd" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotate</name></member>
      <member refid="class_gf_matrix4f_1a002eaa1320c281403362622f55053776" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotate</name></member>
      <member refid="class_gf_matrix4f_1a6969f7189731f46adc2c7f876c20af8c" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotateOnly</name></member>
      <member refid="class_gf_matrix4f_1a46a167cf437f2064dc2de97cb5e974a7" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotateOnly</name></member>
      <member refid="class_gf_matrix4f_1ade3bfa52137e18e4a510368b9ecc8614" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRotateOnly</name></member>
      <member refid="class_gf_matrix4f_1a9badccc622d159f01e45efbe02e96c03" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRow</name></member>
      <member refid="class_gf_matrix4f_1a49fc4757e10c643a43cecc76e29f9e3d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetRow3</name></member>
      <member refid="class_gf_matrix4f_1abe05189ae40357261ff136f9fa2d22a6" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetScale</name></member>
      <member refid="class_gf_matrix4f_1a686baa9f639c127361e6982899f1305e" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetScale</name></member>
      <member refid="class_gf_matrix4f_1a411484cb5c739ea814d5377e628a8950" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetTransform</name></member>
      <member refid="class_gf_matrix4f_1a1772aa10977e4abc451bee6a77246c25" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetTransform</name></member>
      <member refid="class_gf_matrix4f_1aa607cb4ddabc19d5e4026aaa544f2d81" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetTranslate</name></member>
      <member refid="class_gf_matrix4f_1ad0fcc9ac70b5a557aa4bf4f0113c0f6a" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetTranslateOnly</name></member>
      <member refid="class_gf_matrix4f_1a707e838556991f6d25b700218102fbf6" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>SetZero</name></member>
      <member refid="class_gf_matrix4f_1a10f82d32748d0fcb00277b5f9485c910" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Transform</name></member>
      <member refid="class_gf_matrix4f_1ae1102b60f8cb5c93303c4b75e05a8fd5" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>Transform</name></member>
      <member refid="class_gf_matrix4f_1ac379f460c0ef02fddd31ee3dc11f284d" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>TransformAffine</name></member>
      <member refid="class_gf_matrix4f_1af2bef8d29d5cbb9d9e27b05d0dd6f0ac" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>TransformAffine</name></member>
      <member refid="class_gf_matrix4f_1a2a98d5017ab606b757cffbf60912fbf6" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>TransformDir</name></member>
      <member refid="class_gf_matrix4f_1a9b5fcc3a69a69eb0451be57a48ed82c1" prot="public" virt="non-virtual"><scope>GfMatrix4f</scope><name>TransformDir</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
