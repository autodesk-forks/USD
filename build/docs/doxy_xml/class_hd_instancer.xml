<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_instancer" kind="class" language="C++" prot="public">
    <compoundname>HdInstancer</compoundname>
    <derivedcompoundref refid="class_hd_embree_instancer" prot="public" virt="non-virtual">HdEmbreeInstancer</derivedcompoundref>
    <derivedcompoundref refid="class_hd_prman_instancer" prot="public" virt="non-virtual">HdPrmanInstancer</derivedcompoundref>
    <derivedcompoundref refid="class_hd_st_instancer" prot="public" virt="non-virtual">HdStInstancer</derivedcompoundref>
    <includes refid="instancer_8h" local="no">instancer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_instancer_1a995ec9749ea898e521911dd1aba36098" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
        <definition>HdSceneDelegate* _delegate</definition>
        <argsstring></argsstring>
        <name>_delegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="171" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_instancer_1ae87c83b9f3d4f5ba91530df74da5e284" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="172" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_instancer_1ae1a87708f176fbcfc676434a71b5c7ce" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _parentId</definition>
        <argsstring></argsstring>
        <name>_parentId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="173" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_instancer_1ae2631ad2bc650db086ba7159e705c726" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex _instanceLock</definition>
        <argsstring></argsstring>
        <name>_instanceLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="177" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_instancer_1a68716c7888bc2c0125d10b6cd402c24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdInstancer</definition>
        <argsstring>(HdSceneDelegate *delegate, SdfPath const &amp;id)</argsstring>
        <name>HdInstancer</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1abcc58e73a84dc6fe5ebaffe8fb2be87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API</type>
        <definition>virtual HD_API ~HdInstancer</definition>
        <argsstring>()</argsstring>
        <name>~HdInstancer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a9301243d9273afcba6395e86047490ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const  &amp;</type>
        <definition>SdfPath const&amp; GetId</definition>
        <argsstring>() const</argsstring>
        <name>GetId</name>
        <briefdescription>
<para>Returns the identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="135" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a1bb2fef816df9482f8c7f80799c312d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const  &amp;</type>
        <definition>SdfPath const&amp; GetParentId</definition>
        <argsstring>() const</argsstring>
        <name>GetParentId</name>
        <briefdescription>
<para>Returns the parent instancer identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="138" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a7a54e2c50b8cce793007581c7450b2af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
        <definition>HdSceneDelegate* GetDelegate</definition>
        <argsstring>() const</argsstring>
        <name>GetDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="140" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a22a4ee0efeaeb01071c64ae09f62b29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void Sync</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, HdDirtyBits *dirtyBits)</argsstring>
        <name>Sync</name>
        <reimplementedby refid="class_hd_embree_instancer_1a01d42ddc062aa607ea4c9fe02315189a">Sync</reimplementedby>
        <reimplementedby refid="class_hd_st_instancer_1a1ff320f5516aeeb22fb8316c87ce08de">Sync</reimplementedby>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a385eed04c15e636796b187bfdf0fcbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void Finalize</definition>
        <argsstring>(HdRenderParam *renderParam)</argsstring>
        <name>Finalize</name>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1ade051cd8ff53a108b7e6c27be99a5e3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdDirtyBits</type>
        <definition>virtual HD_API HdDirtyBits GetInitialDirtyBitsMask</definition>
        <argsstring>() const</argsstring>
        <name>GetInitialDirtyBitsMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="158" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hd_instancer_1afd35976486cc4ec447827980a44d97e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API int</type>
        <definition>static HD_API int GetInstancerNumLevels</definition>
        <argsstring>(HdRenderIndex &amp;index, HdRprim const &amp;rprim)</argsstring>
        <name>GetInstancerNumLevels</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_hd_rprim" kindref="compound">HdRprim</ref> const &amp;</type>
          <declname>rprim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a0ac325c9543f5e9a831d1e87fc661348" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const  &amp;</type>
        <definition>static HD_API TfTokenVector const&amp; GetBuiltinPrimvarNames</definition>
        <argsstring>()</argsstring>
        <name>GetBuiltinPrimvarNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_instancer_1a72e2aaa50810b72b5c322ca5c93c42a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>static HD_API void _SyncInstancerAndParents</definition>
        <argsstring>(HdRenderIndex &amp;renderIndex, SdfPath const &amp;instancerId)</argsstring>
        <name>_SyncInstancerAndParents</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> &amp;</type>
          <declname>renderIndex</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_instancer_1aa0549b24aee8576e46bd2dbffddad752" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void _UpdateInstancer</definition>
        <argsstring>(HdSceneDelegate *delegate, HdDirtyBits *dirtyBits)</argsstring>
        <name>_UpdateInstancer</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>delegate</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/instancer.h" line="167" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class exists to facilitate point cloud style instancing. </para>
    </briefdescription>
    <detaileddescription>
<para>Instancers, conceptually, are instructions to draw N objects; for each object, store which Rprim you&apos;re drawing and what instance-specific primvars you&apos;re binding. <verbatim>&quot;/InstancerA&quot;: prototypes = [&quot;/sphere&quot;, &quot;/cube&quot;, &quot;/sphere&quot;]; 
               hydra:instanceTranslations  = [&lt;0,0,0&gt;, &lt;1,0,0&gt;, &lt;0,1,0&gt;]
</verbatim></para>
<para>Hydra stores this in reverse: Rprims store which instancer is drawing them, and the instancer stores which indices in that array of N objects are the given Rprim. <verbatim>&quot;/sphere&quot;: instancerId = &quot;/InstancerA&quot;
&quot;/cube&quot;: instancerId = &quot;/InstancerA&quot;
Instancer A: indices(&quot;/sphere&quot;) = [0, 2]
             indices(&quot;/cube&quot;) = [1]
             hydra:instanceTranslations = [&lt;0,0,0&gt;, &lt;1,0,0&gt;, &lt;0,1,0&gt;]
</verbatim></para>
<para>Instancing is implemented by the prototype drawing itself multiple times, and looking up per-instance data each time based on &quot;indices&quot;: so &quot;/sphere&quot; would draw itself once with translate=&lt;0,0,0&gt; and once with translate=&lt;0,1,0&gt;.</para>
<para>To make things more exciting, instancers can be nested. <verbatim>&quot;/cube&quot;: instancerId = &quot;/InstancerA&quot;
&quot;/InstancerA&quot;: instancerId = &quot;/InstancerB&quot;
               indices(&quot;/cube&quot;) = [0, 1]
               hydra:instanceTranslations = [&lt;0,0,0&gt;, &lt;1,0,0&gt;]
&quot;/InstancerB&quot;: indices(&quot;/InstancerA&quot;) = [0, 1]
               hydra:instanceTranslations = [&lt;0,0,0&gt;, &lt;0,1,0&gt;]
</verbatim></para>
<para>In this case, &quot;/cube&quot; draws itself four times, for each of the index tuples &lt;0,0&gt;, &lt;0,1&gt;, &lt;1,0&gt;, &lt;1,1&gt; where the first index is the index in instancerA, and the second index is in instancerB.</para>
<para>If the same primvar (e.g. &quot;hydra:instanceTranslations&quot;) shows up at multiple levels of nesting, it&apos;s resolved as follows:</para>
<para><heading level="2">Transforms </heading>
</para>
<para>Instance primvars &quot;hydra:instanceTranslations&quot;, &quot;hydra:instanceRotations&quot;, &quot;hydra:instanceScales&quot;, and &quot;hydra:instanceTransforms&quot; are used to compute the final transform of an instance. &quot;hydra:instanceTranslations&quot; and &quot;hydra:instanceScales&quot; are interpreted as vec3: position, and axis-aligned scale respectively. &quot;hydra:instanceRotations&quot; is interpreted as a vec4 quaternion (&lt;real, i, j k&gt;), and &quot;hydra:instanceTransforms&quot; is a 4x4 matrix. In the transform computation, everything is converted to a 4x4 matrix.</para>
<para>There are additional transforms: &quot;instancerTransform&quot; comes from HdSceneDelegate::GetInstancerTransform(instancer, proto), and represents the constant transform between the instancer and the prototype. It varies with each level of nesting, but not across instances.</para>
<para>&quot;transform&quot; is the proto Rprim&apos;s local transform.</para>
<para>The final instance transform for instance &quot;index&quot; is computed as: <verbatim>nested_transform(level) = instancerTransform(level) *
                          hydra:instanceTranslations(level, index) *
                          hydra:instanceRotations(level, index) *
                          hydra:instanceScales(level, index) *
                          hydra:instanceTransforms(level, index);
output_transform = product(i : nested-levels - 1 -&gt; 0) {
                      nested_transform(i)
                   } * transform;
</verbatim></para>
<para>Any transforms not provided by the scene delegate are set to identity.</para>
<para><heading level="1">Class responsibilities </heading>
</para>
<para><ref refid="class_hd_instancer" kindref="compound">HdInstancer</ref>&apos;s primary role is to track the &quot;indices&quot; arrays for each proto used by an instancer, and any provided primvar arrays. The implementation is in the renderer-specific instancers, like <ref refid="class_hd_st_instancer" kindref="compound">HdStInstancer</ref>.</para>
<para>All data access (aside from local caches) is routed to the <ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2108">
        <label>HdInstancer</label>
        <link refid="class_hd_instancer"/>
      </node>
      <node id="2110">
        <label>HdStInstancer</label>
        <link refid="class_hd_st_instancer"/>
        <childnode refid="2108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2109">
        <label>HdEmbreeInstancer</label>
        <link refid="class_hd_embree_instancer"/>
        <childnode refid="2108" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/hd/instancer.h" line="125" column="1" bodyfile="pxr/imaging/hd/instancer.h" bodystart="125" bodyend="178"/>
    <listofallmembers>
      <member refid="class_hd_instancer_1a995ec9749ea898e521911dd1aba36098" prot="private" virt="non-virtual"><scope>HdInstancer</scope><name>_delegate</name></member>
      <member refid="class_hd_instancer_1ae87c83b9f3d4f5ba91530df74da5e284" prot="private" virt="non-virtual"><scope>HdInstancer</scope><name>_id</name></member>
      <member refid="class_hd_instancer_1ae2631ad2bc650db086ba7159e705c726" prot="private" virt="non-virtual"><scope>HdInstancer</scope><name>_instanceLock</name></member>
      <member refid="class_hd_instancer_1ae1a87708f176fbcfc676434a71b5c7ce" prot="private" virt="non-virtual"><scope>HdInstancer</scope><name>_parentId</name></member>
      <member refid="class_hd_instancer_1a72e2aaa50810b72b5c322ca5c93c42a8" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>_SyncInstancerAndParents</name></member>
      <member refid="class_hd_instancer_1aa0549b24aee8576e46bd2dbffddad752" prot="protected" virt="non-virtual"><scope>HdInstancer</scope><name>_UpdateInstancer</name></member>
      <member refid="class_hd_instancer_1a385eed04c15e636796b187bfdf0fcbf0" prot="public" virt="virtual"><scope>HdInstancer</scope><name>Finalize</name></member>
      <member refid="class_hd_instancer_1a0ac325c9543f5e9a831d1e87fc661348" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>GetBuiltinPrimvarNames</name></member>
      <member refid="class_hd_instancer_1a7a54e2c50b8cce793007581c7450b2af" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>GetDelegate</name></member>
      <member refid="class_hd_instancer_1a9301243d9273afcba6395e86047490ab" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>GetId</name></member>
      <member refid="class_hd_instancer_1ade051cd8ff53a108b7e6c27be99a5e3a" prot="public" virt="virtual"><scope>HdInstancer</scope><name>GetInitialDirtyBitsMask</name></member>
      <member refid="class_hd_instancer_1afd35976486cc4ec447827980a44d97e5" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>GetInstancerNumLevels</name></member>
      <member refid="class_hd_instancer_1a1bb2fef816df9482f8c7f80799c312d1" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>GetParentId</name></member>
      <member refid="class_hd_instancer_1a68716c7888bc2c0125d10b6cd402c24d" prot="public" virt="non-virtual"><scope>HdInstancer</scope><name>HdInstancer</name></member>
      <member refid="class_hd_instancer_1a22a4ee0efeaeb01071c64ae09f62b29b" prot="public" virt="virtual"><scope>HdInstancer</scope><name>Sync</name></member>
      <member refid="class_hd_instancer_1abcc58e73a84dc6fe5ebaffe8fb2be87b" prot="public" virt="virtual"><scope>HdInstancer</scope><name>~HdInstancer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
