<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_light" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdStLight</compoundname>
    <basecompoundref refid="class_hd_light" prot="public" virt="non-virtual">HdLight</basecompoundref>
    <includes refid="t_2light_8h" local="no">light.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_light_1af722c019c19b3a2fd6d7576ed12f6ffa" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _lightType</definition>
        <argsstring></argsstring>
        <name>_lightType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="88" column="1" bodyfile="pxr/imaging/hdSt/light.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_light_1afcb840dd4758fcbe2bfa31e008524967" prot="private" static="no" mutable="no">
        <type>TfHashMap&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_vt_value" kindref="compound">VtValue</ref>, <ref refid="struct_tf_token_1_1_hash_functor" kindref="compound">TfToken::HashFunctor</ref> &gt;</type>
        <definition>TfHashMap&lt;TfToken, VtValue, TfToken::HashFunctor&gt; _params</definition>
        <argsstring></argsstring>
        <name>_params</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="91" column="1" bodyfile="pxr/imaging/hdSt/light.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_light_1a716b76e24d6296661449801b4f87d264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStLight</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;lightType)</argsstring>
        <name>HdStLight</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>lightType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1a31ed298067641034db41755388bd5aad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStLight</definition>
        <argsstring>() override</argsstring>
        <name>~HdStLight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1a1ff320f5516aeeb22fb8316c87ce08de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Sync</definition>
        <argsstring>(HdSceneDelegate *sceneDelegate, HdRenderParam *renderParam, HdDirtyBits *dirtyBits) override</argsstring>
        <name>Sync</name>
        <reimplements refid="class_hd_sprim_1ac100b9064606ab088306512425439cf7">Sync</reimplements>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <param>
          <type>HdDirtyBits *</type>
          <declname>dirtyBits</declname>
        </param>
        <briefdescription>
<para>Synchronizes state from the delegate to this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1afacd7217dce1f83fe450e78b1624a8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void Finalize</definition>
        <argsstring>(HdRenderParam *renderParam) override</argsstring>
        <name>Finalize</name>
        <reimplements refid="class_hd_sprim_1a385eed04c15e636796b187bfdf0fcbf0">Finalize</reimplements>
        <param>
          <type><ref refid="class_hd_render_param" kindref="compound">HdRenderParam</ref> *</type>
          <declname>renderParam</declname>
        </param>
        <briefdescription>
<para>Finalizes object resources. </para>
        </briefdescription>
        <detaileddescription>
<para>This function might not delete resources, but it should deal with resource ownership so that the sprim is deletable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1a72ebd2507b7ce4521365206ba8e0c8f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>HDST_API VtValue Get</definition>
        <argsstring>(TfToken const &amp;token) const</argsstring>
        <name>Get</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Accessor for tasks to get the parameters cached in this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1a59b589b9042f2173054e853d4d58036f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API HdDirtyBits</type>
        <definition>HDST_API HdDirtyBits GetInitialDirtyBitsMask</definition>
        <argsstring>() const override</argsstring>
        <name>GetInitialDirtyBitsMask</name>
        <reimplements refid="class_hd_sprim_1ac05e81662ee475cfe52ce97e84e7205d">GetInitialDirtyBitsMask</reimplements>
        <briefdescription>
<para>Returns the minimal set of dirty bits to place in the change tracker for use in the first sync of this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>Typically this would be all dirty bits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="71" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_light_1aa4494d228109af854860f89202b5d05f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GlfSimpleLight</type>
        <definition>GlfSimpleLight _ApproximateAreaLight</definition>
        <argsstring>(SdfPath const &amp;id, HdSceneDelegate *sceneDelegate)</argsstring>
        <name>_ApproximateAreaLight</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_light_1ab4527ac2c6b23e72b6e3ff90a121b341" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GlfSimpleLight</type>
        <definition>GlfSimpleLight _PrepareDomeLight</definition>
        <argsstring>(SdfPath const &amp;id, HdSceneDelegate *sceneDelegate)</argsstring>
        <name>_PrepareDomeLight</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> *</type>
          <declname>sceneDelegate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/light.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A light model for use in Storm. </para>
    </briefdescription>
    <detaileddescription>
<para>Note: This class simply stores the light parameters and relies on an external task (HdxSimpleLightTask) to upload them to the GPU. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3214">
        <label>HdStLight</label>
        <link refid="class_hd_st_light"/>
        <childnode refid="3215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3216">
        <label>HdSprim</label>
        <link refid="class_hd_sprim"/>
      </node>
      <node id="3215">
        <label>HdLight</label>
        <link refid="class_hd_light"/>
        <childnode refid="3216" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3217">
        <label>HdStLight</label>
        <link refid="class_hd_st_light"/>
        <childnode refid="3218" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3219">
        <label>HdSprim</label>
        <link refid="class_hd_sprim"/>
      </node>
      <node id="3218">
        <label>HdLight</label>
        <link refid="class_hd_light"/>
        <childnode refid="3219" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/light.h" line="44" column="1" bodyfile="pxr/imaging/hdSt/light.h" bodystart="44" bodyend="92"/>
    <listofallmembers>
      <member refid="class_hd_st_light_1aa4494d228109af854860f89202b5d05f" prot="private" virt="non-virtual"><scope>HdStLight</scope><name>_ApproximateAreaLight</name></member>
      <member refid="class_hd_st_light_1af722c019c19b3a2fd6d7576ed12f6ffa" prot="private" virt="non-virtual"><scope>HdStLight</scope><name>_lightType</name></member>
      <member refid="class_hd_st_light_1afcb840dd4758fcbe2bfa31e008524967" prot="private" virt="non-virtual"><scope>HdStLight</scope><name>_params</name></member>
      <member refid="class_hd_st_light_1ab4527ac2c6b23e72b6e3ff90a121b341" prot="private" virt="non-virtual"><scope>HdStLight</scope><name>_PrepareDomeLight</name></member>
      <member refid="class_hd_light_1a07b717bf883db5ca574acb6a17b0c192" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>_UpdateInstancer</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa6f2ec4167b47e7269ed7b56e1928e731" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>AllDirty</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8faccea35f717039c64bc6ea05604ecddc0" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>Clean</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8f" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyBits</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa24a75d5ea1dbb8aefbc609b1d9f8515b" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyCollection</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa3a1395b08795cf00558a6944e1630daf" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyInstancer</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fae10a6f0d75a0571b8a6a5b77561740c6" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyParams</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa201d4d579ea12dc1546f44b6ff0757e2" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyResource</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa5e1fac03a1694ca8d80526519b5c34b2" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyShadowParams</name></member>
      <member refid="class_hd_light_1a2f2dbbbe47e871395a781c8105398c8fa3eaf7284f82a6abc25f2a02244014eb6" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>DirtyTransform</name></member>
      <member refid="class_hd_st_light_1afacd7217dce1f83fe450e78b1624a8b4" prot="public" virt="virtual"><scope>HdStLight</scope><name>Finalize</name></member>
      <member refid="class_hd_st_light_1a72ebd2507b7ce4521365206ba8e0c8f4" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>Get</name></member>
      <member refid="class_hd_sprim_1a9301243d9273afcba6395e86047490ab" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>GetId</name></member>
      <member refid="class_hd_st_light_1a59b589b9042f2173054e853d4d58036f" prot="public" virt="virtual"><scope>HdStLight</scope><name>GetInitialDirtyBitsMask</name></member>
      <member refid="class_hd_light_1a0c9779caa4bdbf97df698e0a468ee380" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>GetInstancerId</name></member>
      <member refid="class_hd_light_1a556348038adc9c0db73843bc29da13b8" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>HdLight</name></member>
      <member refid="class_hd_sprim_1a15a586d4a5f4e5c4f4e0ae664914dd26" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>HdSprim</name></member>
      <member refid="class_hd_st_light_1a716b76e24d6296661449801b4f87d264" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>HdStLight</name></member>
      <member refid="class_hd_light_1a7bbb96dd197d48623dae286f229fc29e" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>StringifyDirtyBits</name></member>
      <member refid="class_hd_st_light_1a1ff320f5516aeeb22fb8316c87ce08de" prot="public" virt="virtual"><scope>HdStLight</scope><name>Sync</name></member>
      <member refid="class_hd_light_1a9555cb9bd57f0f74850bf3d05e0d171e" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>~HdLight</name></member>
      <member refid="class_hd_sprim_1a35830c433fc9268fc4fe5ed23d8cc86b" prot="public" virt="virtual"><scope>HdStLight</scope><name>~HdSprim</name></member>
      <member refid="class_hd_st_light_1a31ed298067641034db41755388bd5aad" prot="public" virt="non-virtual"><scope>HdStLight</scope><name>~HdStLight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
