<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_option" kind="class" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::Option</compoundname>
    <basecompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base" prot="public" virt="non-virtual">OptionBase&lt; Option &gt;</basecompoundref>
      <sectiondef kind="user-defined">
      <header>Parsing results</header>
      <memberdef kind="enum" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9" prot="protected" static="no" strong="yes">
        <type>char</type>
        <name>option_state</name>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9adbc77665f51d780a776978e34f065af5" prot="protected">
          <name>parsing</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The option is currently collecting parsed results. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9ac9e825f4641cd3bec0ba01a0c2d67755" prot="protected">
          <name>validated</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>the results have been validated </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9a282fabc3aa55dcf5a73ad91ea6c62de6" prot="protected">
          <name>reduced</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>a subset of results has been generated </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9a3e711527b127cf4c52c3470324bb7a74" prot="protected">
          <name>callback_run</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>the callback has been executed </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>enumeration for the option state machine </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4437" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4437" bodyend="4442"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1afc2c864f2640020b2ba0b0ad1713cfd8" prot="protected" static="no" mutable="no">
        <type>results_t</type>
        <definition>results_t results_</definition>
        <argsstring></argsstring>
        <name>results_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>complete Results of parsing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4433" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a95422675675dd96c2dce37f89fc10d20" prot="protected" static="no" mutable="no">
        <type>results_t</type>
        <definition>results_t proc_results_</definition>
        <argsstring></argsstring>
        <name>proc_results_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>results after reduction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4435" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a911a624ab889bac1d7eeec202331a2fe" prot="protected" static="no" mutable="no">
        <type>option_state</type>
        <definition>option_state current_option_state_</definition>
        <argsstring></argsstring>
        <name>current_option_state_</name>
        <initializer>{option_state::parsing}</initializer>
        <briefdescription>
<para>Whether the callback has run (needed for INI parsing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4444" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a1da96a482716c3eaa8e599473499cbb9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool allow_extra_args_</definition>
        <argsstring></argsstring>
        <name>allow_extra_args_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Specify that extra args beyond type_size_max should be allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4446" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4002346dede09783532e185d741f4111" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool flag_like_</definition>
        <argsstring></argsstring>
        <name>flag_like_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Specify that the option should act like a flag vs regular option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4448" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2b4c36cf892e5ba1cb23c5422ccb184a" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool run_callback_for_default_</definition>
        <argsstring></argsstring>
        <name>run_callback_for_default_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Control option to run the callback to set the default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4450" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a19ef53998fa4dc666914344a18b3421f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool inject_separator_</definition>
        <argsstring></argsstring>
        <name>inject_separator_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>flag indicating a separator needs to be injected after each argument call </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4452" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a57759b9606662485ac2fdd918aa755" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool trigger_on_result_</definition>
        <argsstring></argsstring>
        <name>trigger_on_result_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>flag indicating that the option should trigger the validation and callback chain on each result when loaded </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4454" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a793247902f62e279e9b7f37c7aa20b03" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool force_callback_</definition>
        <argsstring></argsstring>
        <name>force_callback_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>flag indicating that the option should force the callback regardless if any results present </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4456" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4456" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Names</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a8998f719ad6dcdc9e858bb7ec57d6bbe" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; snames_</definition>
        <argsstring></argsstring>
        <name>snames_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of the short names (<computeroutput>-a</computeroutput>) without the leading dashes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4355" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a931c03e67f21c553e6814afc6b845468" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; lnames_</definition>
        <argsstring></argsstring>
        <name>lnames_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of the long names (<computeroutput>--long</computeroutput>) without the leading dashes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4358" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab8e93635f366abfb6d1b9f2df8998ef8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;std::string, std::string&gt; &gt; default_flag_values_</definition>
        <argsstring></argsstring>
        <name>default_flag_values_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of the flag names with the appropriate default value, the first part of the pair should be duplicates of what is in snames or lnames but will trigger a particular response on a flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4362" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab9e36cb115282083ede20a57094ff809" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; fnames_</definition>
        <argsstring></argsstring>
        <name>fnames_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>a list of flag names with specified default values; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4365" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7baa20f354a667e221eed138e6e83404" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string pname_</definition>
        <argsstring></argsstring>
        <name>pname_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A positional name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4368" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5b1be26c3f544d3827b3439cf3a97ef5" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string envname_</definition>
        <argsstring></argsstring>
        <name>envname_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>If given, check the environment for this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4371" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4371" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Help</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae841a0f62292d2d5f1a1747b0ef8f9fc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string description_</definition>
        <argsstring></argsstring>
        <name>description_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The description for help strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4378" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0818ca2fa22ce82fe7e1c1792a1b33bd" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string default_str_</definition>
        <argsstring></argsstring>
        <name>default_str_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A human readable default value, either manually set, captured, or captured by default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4381" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab72d0ab50d6b93da4d35e61175664e3f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string option_text_</definition>
        <argsstring></argsstring>
        <name>option_text_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>If given, replace the text that describes the option type and usage in the help text. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4384" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae12f5015daf19dde05c77317b17367d5" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string()&gt;</type>
        <definition>std::function&lt;std::string()&gt; type_name_</definition>
        <argsstring></argsstring>
        <name>type_name_</name>
        <initializer>{[]() { return std::string(); }}</initializer>
        <briefdescription>
<para>A human readable type value, set when <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> creates this. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a lambda function so &quot;types&quot; can be dynamic, such as when a set prints its contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4389" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0adf6ad7af276b55b0ba5faf250d3d37" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string()&gt;</type>
        <definition>std::function&lt;std::string()&gt; default_function_</definition>
        <argsstring></argsstring>
        <name>default_function_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Run this function to capture a default (ignore if empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4392" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Configuration</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a11d47bd659cebec4a3b2fa1f66a357c2" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int type_size_max_</definition>
        <argsstring></argsstring>
        <name>type_size_max_</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The number of arguments that make up one option. </para>
        </briefdescription>
        <detaileddescription>
<para>max is the nominal type size, min is the minimum number of strings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4400" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6403f9b2e627768debd4a6fea01c9381" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int type_size_min_</definition>
        <argsstring></argsstring>
        <name>type_size_min_</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The minimum number of arguments an option should be expecting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4402" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a3ba27db5f0b9e9938ecc8a233b8b0b2c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int expected_min_</definition>
        <argsstring></argsstring>
        <name>expected_min_</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The minimum number of expected values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4405" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a53eb2d13e4831a486e3eecdf41524fb5" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int expected_max_</definition>
        <argsstring></argsstring>
        <name>expected_max_</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>The maximum number of expected values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4407" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5493ab8a8a6388e2dfe99e199bf649eb" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &gt;</type>
        <definition>std::vector&lt;Validator&gt; validators_</definition>
        <argsstring></argsstring>
        <name>validators_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of Validators to run on each value parsed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4410" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0b297c70e1ff7d914a34aea8703330a0" prot="protected" static="no" mutable="no">
        <type>std::set&lt; Option * &gt;</type>
        <definition>std::set&lt;Option *&gt; needs_</definition>
        <argsstring></argsstring>
        <name>needs_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of options that are required with this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4413" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a181eaddbaef71c0196dfaca3ead33a19" prot="protected" static="no" mutable="no">
        <type>std::set&lt; Option * &gt;</type>
        <definition>std::set&lt;Option *&gt; excludes_</definition>
        <argsstring></argsstring>
        <name>excludes_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>A list of options that are excluded with this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4416" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4416" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other</header>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a80d98ce72f07f1660562be6cb2ed9ebe" prot="protected" static="no" mutable="no">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
        <definition>App* parent_</definition>
        <argsstring></argsstring>
        <name>parent_</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>link back up to the parent <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> for fallthrough </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4423" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2f8815cbeeac30b39784e98102e8a1dd" prot="protected" static="no" mutable="no">
        <type>callback_t</type>
        <definition>callback_t callback_</definition>
        <argsstring></argsstring>
        <name>callback_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Options store a callback to do all the work. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4426" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4426" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basic</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a68eeae1e0a02cff7a7d46d8298d8e8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Option</definition>
        <argsstring>(const Option &amp;)=delete</argsstring>
        <name>Option</name>
        <param>
          <type>const Option &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a97a8150b67f51b3f193726ec0f576525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option &amp;</type>
        <definition>Option&amp; operator=</definition>
        <argsstring>(const Option &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const Option &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac2ca386068235802660cc62c460ca8ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::size_t</type>
        <definition>CLI11_NODISCARD std::size_t count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
<para>Count the total number of times an option was passed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4473" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4473" bodyend="4473"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2d51c736a023e4485d1c33c6fcd41bc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>True if the option was not passed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4476" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4476" bodyend="4476"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>This bool operator returns true if any arguments were passed or the option callback is forced. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4479" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4479" bodyend="4479"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac8bb3912a3ce86b15842e79d0b421204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the parsed results (mostly for testing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4482" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4482" bodyend="4485"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Setting options</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9f419eef40e662b245bb8eaa771c509c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * expected</definition>
        <argsstring>(int value)</argsstring>
        <name>expected</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of expected arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4492" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4936" bodyend="4955"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2be5a85c27c2e45357a3f6aa8384417c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * expected</definition>
        <argsstring>(int value_min, int value_max)</argsstring>
        <name>expected</name>
        <param>
          <type>int</type>
          <declname>value_min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_max</declname>
        </param>
        <briefdescription>
<para>Set the range of expected arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4495" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4957" bodyend="4974"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa049ecde37fe31dd4693e1edc0fcb082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* allow_extra_args</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>allow_extra_args</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the value of allow_extra_args which allows extra value arguments on the flag or option to be included with each instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4499" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4499" bodyend="4502"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2f3cfd485a80debb2d3026712d5f4e27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_allow_extra_args</definition>
        <argsstring>() const</argsstring>
        <name>get_allow_extra_args</name>
        <briefdescription>
<para>Get the current value of allow extra args. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4504" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4504" bodyend="4504"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a54e46c60d5d1615beb9a0d504fc06521" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* trigger_on_parse</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>trigger_on_parse</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the value of trigger_on_parse which specifies that the option callback should be triggered on every parse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4506" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4506" bodyend="4509"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a878816fa1fae0cc2d7d3da6dbe871410" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_trigger_on_parse</definition>
        <argsstring>() const</argsstring>
        <name>get_trigger_on_parse</name>
        <briefdescription>
<para>The status of trigger on parse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4511" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4511" bodyend="4511"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a393bdea2200d36e13ff7bb8a272fda77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* force_callback</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>force_callback</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the value of force_callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4514" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4514" bodyend="4517"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a42071e43555c32c794d55d6cf1457589" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_force_callback</definition>
        <argsstring>() const</argsstring>
        <name>get_force_callback</name>
        <briefdescription>
<para>The status of force_callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4519" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4519" bodyend="4519"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5bc7b2bd811c1686e8a319f9b811c7af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* run_callback_for_default</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>run_callback_for_default</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the value of run_callback_for_default which controls whether the callback function should be called to set the default This is controlled automatically but could be manipulated by the user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4523" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4523" bodyend="4526"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2860810a56f3d4965b094a9408c40020" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_run_callback_for_default</definition>
        <argsstring>() const</argsstring>
        <name>get_run_callback_for_default</name>
        <briefdescription>
<para>Get the current value of run_callback_for_default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4528" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4528" bodyend="4528"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab73c8c7de05e88b6aac91631daad3219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * check</definition>
        <argsstring>(Validator validator, const std::string &amp;validator_name=&quot;&quot;)</argsstring>
        <name>check</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
          <declname>validator</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>validator_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Adds a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> with a built in type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4531" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4976" bodyend="4982"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4d7cdc45193321a0245ac372f2eeb6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * check</definition>
        <argsstring>(std::function&lt; std::string(const std::string &amp;)&gt; Validator, std::string Validator_description=&quot;&quot;, std::string Validator_name=&quot;&quot;)</argsstring>
        <name>check</name>
        <param>
          <type>std::function&lt; std::string(const std::string &amp;)&gt;</type>
          <declname>Validator</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>Validator_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>Validator_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Adds a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>. Takes a const string&amp; and returns an error message (empty if conversion/check is okay). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4534" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4984" bodyend="4990"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acb5406b08e7c4e916f451f19ecb78a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * transform</definition>
        <argsstring>(Validator Validator, const std::string &amp;Validator_name=&quot;&quot;)</argsstring>
        <name>transform</name>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
          <declname>Validator</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>Validator_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Adds a transforming <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> with a built in type name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4539" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4992" bodyend="4997"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2736f29aa820d1667db60520c63716fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * transform</definition>
        <argsstring>(const std::function&lt; std::string(std::string)&gt; &amp;func, std::string transform_description=&quot;&quot;, std::string transform_name=&quot;&quot;)</argsstring>
        <name>transform</name>
        <param>
          <type>const std::function&lt; std::string(std::string)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>transform_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>transform_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Adds a Validator-like function that can change result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4542" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4999" bodyend="5012"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a76c69b93756f86c764b779acfcb91481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * each</definition>
        <argsstring>(const std::function&lt; void(std::string)&gt; &amp;func)</argsstring>
        <name>each</name>
        <param>
          <type>const std::function&lt; void(std::string)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Adds a user supplied function to run on each item passed in (communicate though lambda capture) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4547" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5014" bodyend="5022"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a93179d6193074790191754291645d151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> *</type>
        <definition>CLI11_INLINE Validator * get_validator</definition>
        <argsstring>(const std::string &amp;Validator_name=&quot;&quot;)</argsstring>
        <name>get_validator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>Validator_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Get a named <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4550" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5024" bodyend="5034"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a01916491dc54cda72109a4903ed9527f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> *</type>
        <definition>CLI11_INLINE Validator * get_validator</definition>
        <argsstring>(int index)</argsstring>
        <name>get_validator</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> by index NOTE: this may not be the order of definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4553" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5036" bodyend="5042"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a994ddb718b3d3132f913694b8b4d6b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* needs</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>needs</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Sets required options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4556" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4556" bodyend="4561"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1af39b2b36444fc3764afd3132b8d65d66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref></defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* needs</definition>
        <argsstring>(std::string opt_name)</argsstring>
        <name>needs</name>
        <param>
          <type>std::string</type>
          <declname>opt_name</declname>
        </param>
        <briefdescription>
<para>Can find a string if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4564" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4564" bodyend="4570"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae082e7d148b1438d85d3d1d8d0908614" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARG</declname>
            <defname>ARG</defname>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* needs</definition>
        <argsstring>(A opt, B opt1, ARG... args)</argsstring>
        <name>needs</name>
        <param>
          <type>A</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>B</type>
          <declname>opt1</declname>
        </param>
        <param>
          <type>ARG...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Any number supported, any mix of string and Opt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4573" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4573" bodyend="4576"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0cb2a23bd82af1567a372dbe23c27614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_needs</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>remove_needs</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Remove needs link from an option. Returns true if the option really was in the needs list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4579" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5044" bodyend="5052"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7130c5136bea793a2225ff53b1d1aa18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * excludes</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>excludes</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Sets excluded options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4582" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5054" bodyend="5067"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aaa2ba9ba4584938b937c5d4b69a55c7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref></defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* excludes</definition>
        <argsstring>(std::string opt_name)</argsstring>
        <name>excludes</name>
        <param>
          <type>std::string</type>
          <declname>opt_name</declname>
        </param>
        <briefdescription>
<para>Can find a string if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4585" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4585" bodyend="4591"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa7bcc696a77630b5e16fc685cf1992e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ARG</declname>
            <defname>ARG</defname>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* excludes</definition>
        <argsstring>(A opt, B opt1, ARG... args)</argsstring>
        <name>excludes</name>
        <param>
          <type>A</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>B</type>
          <declname>opt1</declname>
        </param>
        <param>
          <type>ARG...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Any number supported, any mix of string and Opt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4594" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4594" bodyend="4597"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a83b03f774350787f6ecc34bdff8e3313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>CLI11_INLINE bool remove_excludes</definition>
        <argsstring>(Option *opt)</argsstring>
        <name>remove_excludes</name>
        <param>
          <type>Option *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Remove needs link from an option. Returns true if the option really was in the needs list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4600" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5069" bodyend="5077"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aeb8fc2b170ca0128d8cff633e6624e6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* envname</definition>
        <argsstring>(std::string name)</argsstring>
        <name>envname</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Sets environment variable to read if no option given. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4603" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4603" bodyend="4606"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a1abb72e412542f5e586e729dc159548d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref></defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option * ignore_case</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>ignore_case</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Ignore case. </para>
        </briefdescription>
        <detaileddescription>
<para>The template hides the fact that we don&apos;t have the definition of <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> yet. You are never expected to add an argument to the template here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4612" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5079" bodyend="5097"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac6140b6e0fa13d2b608225c238b4ffdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref></defval>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option * ignore_underscore</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>ignore_underscore</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Ignore underscores in the option names. </para>
        </briefdescription>
        <detaileddescription>
<para>The template hides the fact that we don&apos;t have the definition of <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> yet. You are never expected to add an argument to the template here. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4618" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5099" bodyend="5118"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa2e99508fd34274fbda286bcc2e15a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * multi_option_policy</definition>
        <argsstring>(MultiOptionPolicy value=MultiOptionPolicy::Throw)</argsstring>
        <name>multi_option_policy</name>
        <param>
          <type>MultiOptionPolicy</type>
          <declname>value</declname>
          <defval>MultiOptionPolicy::Throw</defval>
        </param>
        <briefdescription>
<para>Take the last argument if given multiple times (or another policy) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4621" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5120" bodyend="5131"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a563f5988e7f1f00a419a18e5979e4395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* disable_flag_override</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>disable_flag_override</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Disable flag overrides values, e.g. <ndash/>flag=</para>
<para>is not allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4624" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4624" bodyend="4627"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Accessors</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a43daba9ac6add8081e0f9cfd81ead0f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_type_size</definition>
        <argsstring>() const</argsstring>
        <name>get_type_size</name>
        <briefdescription>
<para>The number of arguments the option expects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4633" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4633" bodyend="4633"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5eea622be9d60d17471befdad72e3a9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_type_size_min</definition>
        <argsstring>() const</argsstring>
        <name>get_type_size_min</name>
        <briefdescription>
<para>The minimum number of arguments the option expects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4636" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4636" bodyend="4636"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a355e41e6a43b8095ce4ec223c68bd868" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_type_size_max</definition>
        <argsstring>() const</argsstring>
        <name>get_type_size_max</name>
        <briefdescription>
<para>The maximum number of arguments the option expects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4638" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4638" bodyend="4638"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a74b21f5ed47c158d6b7fd8b77d379fc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_inject_separator</definition>
        <argsstring>() const</argsstring>
        <name>get_inject_separator</name>
        <briefdescription>
<para>Return the inject_separator flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4641" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4641" bodyend="4641"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7784f0223471e01b347a523bdd05b6cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string get_envname</definition>
        <argsstring>() const</argsstring>
        <name>get_envname</name>
        <briefdescription>
<para>The environment variable associated to this value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4644" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4644" bodyend="4644"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1adaeee027be1498339a4c6b522c6780bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::set&lt; Option * &gt;</type>
        <definition>CLI11_NODISCARD std::set&lt;Option *&gt; get_needs</definition>
        <argsstring>() const</argsstring>
        <name>get_needs</name>
        <briefdescription>
<para>The set of options needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4647" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4647" bodyend="4647"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acafc9761630c7a8859e5d23288728845" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::set&lt; Option * &gt;</type>
        <definition>CLI11_NODISCARD std::set&lt;Option *&gt; get_excludes</definition>
        <argsstring>() const</argsstring>
        <name>get_excludes</name>
        <briefdescription>
<para>The set of options excluded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4650" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4650" bodyend="4650"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a25e3a6d50bf452eb035ba017652a0227" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string get_default_str</definition>
        <argsstring>() const</argsstring>
        <name>get_default_str</name>
        <briefdescription>
<para>The default value (for help printing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4653" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4653" bodyend="4653"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab504d5b13ccafa42f2ca4565fcc3e097" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD callback_t</type>
        <definition>CLI11_NODISCARD callback_t get_callback</definition>
        <argsstring>() const</argsstring>
        <name>get_callback</name>
        <briefdescription>
<para>Get the callback function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4656" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4656" bodyend="4656"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1abfb9f8879b074277c941883fd0d0cab0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::vector&lt; std::string &gt; &amp;</type>
        <definition>CLI11_NODISCARD const std::vector&lt;std::string&gt;&amp; get_lnames</definition>
        <argsstring>() const</argsstring>
        <name>get_lnames</name>
        <briefdescription>
<para>Get the long names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4659" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4659" bodyend="4659"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2fc379ecd61634d42e9cbe2e7cb82da1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::vector&lt; std::string &gt; &amp;</type>
        <definition>CLI11_NODISCARD const std::vector&lt;std::string&gt;&amp; get_snames</definition>
        <argsstring>() const</argsstring>
        <name>get_snames</name>
        <briefdescription>
<para>Get the short names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4662" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4662" bodyend="4662"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a3bcf91d3cdfcd95c857f364deefdae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::vector&lt; std::string &gt; &amp;</type>
        <definition>CLI11_NODISCARD const std::vector&lt;std::string&gt;&amp; get_fnames</definition>
        <argsstring>() const</argsstring>
        <name>get_fnames</name>
        <briefdescription>
<para>Get the flag names with specified default values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4665" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4665" bodyend="4665"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab070dc815a39eb6ec97e3a36fdc90dd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_single_name</definition>
        <argsstring>() const</argsstring>
        <name>get_single_name</name>
        <briefdescription>
<para>Get a single name for the option, first of lname, pname, sname, envname. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4667" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4667" bodyend="4678"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a12c4e411be20644298fa2e4a69bfbd04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_expected</definition>
        <argsstring>() const</argsstring>
        <name>get_expected</name>
        <briefdescription>
<para>The number of times the option expects to be included. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4680" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4680" bodyend="4680"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ad51077c741e71d76cc70de82d5b89b04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_expected_min</definition>
        <argsstring>() const</argsstring>
        <name>get_expected_min</name>
        <briefdescription>
<para>The number of times the option expects to be included. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4683" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4683" bodyend="4683"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a824530a3b21710beee7cbc040ede9f8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_expected_max</definition>
        <argsstring>() const</argsstring>
        <name>get_expected_max</name>
        <briefdescription>
<para>The max number of times the option expects to be included. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4685" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4685" bodyend="4685"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a99cf518764d2d813362b281811b7c7cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_items_expected_min</definition>
        <argsstring>() const</argsstring>
        <name>get_items_expected_min</name>
        <briefdescription>
<para>The total min number of expected string values to be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4688" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4688" bodyend="4688"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1afc5f9a612db0f3fa2476ae6dfcd38e5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_items_expected_max</definition>
        <argsstring>() const</argsstring>
        <name>get_items_expected_max</name>
        <briefdescription>
<para>Get the maximum number of items expected to be returned and used for the callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4691" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4691" bodyend="4694"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acfa26379ada913b0f38c8e2a547d9d35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_items_expected</definition>
        <argsstring>() const</argsstring>
        <name>get_items_expected</name>
        <briefdescription>
<para>The total min number of expected string values to be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4696" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4696" bodyend="4696"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7462513d2ae405903ff6fd57627f7282" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_positional</definition>
        <argsstring>() const</argsstring>
        <name>get_positional</name>
        <briefdescription>
<para>True if the argument can be given directly. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4699" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4699" bodyend="4699"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7bf6da13357bf54c447e0d9c2ac7c501" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool nonpositional</definition>
        <argsstring>() const</argsstring>
        <name>nonpositional</name>
        <briefdescription>
<para>True if option has at least one non-positional name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4702" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4702" bodyend="4702"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2268a30f456d28c507e34976d194d045" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool has_description</definition>
        <argsstring>() const</argsstring>
        <name>has_description</name>
        <briefdescription>
<para>True if option has description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4705" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4705" bodyend="4705"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a599852f08de51b384c7c6feb6d399a1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_description</definition>
        <argsstring>() const</argsstring>
        <name>get_description</name>
        <briefdescription>
<para>Get the description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4708" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4708" bodyend="4708"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac783ea6f267854a5f6139e5f600bc0b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* description</definition>
        <argsstring>(std::string option_description)</argsstring>
        <name>description</name>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
        </param>
        <briefdescription>
<para>Set the description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4711" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4711" bodyend="4714"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ad9a486fa934b6d24997de5b63ce9f8b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* option_text</definition>
        <argsstring>(std::string text)</argsstring>
        <name>option_text</name>
        <param>
          <type>std::string</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4716" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4716" bodyend="4719"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aba6ad3a2b66fa52d4cf4f456d0faf764" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_option_text</definition>
        <argsstring>() const</argsstring>
        <name>get_option_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4721" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4721" bodyend="4721"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Help tools</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae717f9c544fec757be8592abc624bfe0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string get_name</definition>
        <argsstring>(bool positional=false, bool all_options=false) const</argsstring>
        <name>get_name</name>
        <param>
          <type>bool</type>
          <declname>positional</declname>
          <defval>false</defval>
          <briefdescription><para>Show the positional name </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>all_options</declname>
          <defval>false</defval>
          <briefdescription><para>Show every option </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Gets a comma separated list of names. </para>
        </briefdescription>
        <detaileddescription>
<para>Will include / prefer the positional name if positional is true. If all_options is false, pick just the most descriptive name to show. Use <computeroutput>get_name(true)</computeroutput> to get the positional name (replaces <computeroutput>get_pname</computeroutput>) </para>
        </detaileddescription>
        <inbodydescription>
<para>The all list will never include a positional unless asked or that&apos;s the only name. </para>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4731" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5133" bodyend="5184"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parser tools</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a327fd8c66c6f7c7bf4276c7e2d511545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void run_callback</definition>
        <argsstring>()</argsstring>
        <name>run_callback</name>
        <briefdescription>
<para>Process the callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4740" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5186" bodyend="5210"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7d6f7fbd17589759a5f161b14d08c776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD CLI11_INLINE const std::string &amp; matching_name</definition>
        <argsstring>(const Option &amp;other) const</argsstring>
        <name>matching_name</name>
        <param>
          <type>const Option &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>If options share any of the same names, find it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4743" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5212" bodyend="5231"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6914b021db64009fe7a6575bb5809b7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Option &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const Option &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>If options share any of the same names, they are equal (not counting positional) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4746" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4746" bodyend="4746"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7671133ebb14c59049f82515c6944268" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD CLI11_INLINE bool check_name</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>check_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check a name. Requires &quot;-&quot; or &quot;--&quot; for short / long, supports positional name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4749" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5233" bodyend="5260"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a09491ca739549531296ff5c964799ff4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool check_sname</definition>
        <argsstring>(std::string name) const</argsstring>
        <name>check_sname</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Requires &quot;-&quot; to be removed from string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4752" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4752" bodyend="4754"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2aeada15397801615f0ee5318ad1a8cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool check_lname</definition>
        <argsstring>(std::string name) const</argsstring>
        <name>check_lname</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Requires &quot;--&quot; to be removed from string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4757" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4757" bodyend="4759"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a674e8d51f18294598fd48a34836b5f28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool check_fname</definition>
        <argsstring>(std::string name) const</argsstring>
        <name>check_fname</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Requires &quot;--&quot; to be removed from string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4762" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4762" bodyend="4767"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a117e1006ce7f3e660f9b615ce9c98903" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string get_flag_value</definition>
        <argsstring>(const std::string &amp;name, std::string input_value) const</argsstring>
        <name>get_flag_value</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>input_value</declname>
        </param>
        <briefdescription>
<para>Get the value that goes for a flag, nominally gets the default value but allows for overrides if not disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4771" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5262" bodyend="5303"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac92ddba25cd5195aa194b7eb321c9e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_result</definition>
        <argsstring>(std::string s)</argsstring>
        <name>add_result</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Puts a result at the end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4774" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5305" bodyend="5309"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9957792254f92a983de19d251a7aafca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_result</definition>
        <argsstring>(std::string s, int &amp;results_added)</argsstring>
        <name>add_result</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>results_added</declname>
        </param>
        <briefdescription>
<para>Puts a result at the end and get a count of the number of arguments actually added. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4777" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5311" bodyend="5315"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa7093873a1cef808de2ab6ad97e0713a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * add_result</definition>
        <argsstring>(std::vector&lt; std::string &gt; s)</argsstring>
        <name>add_result</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Puts a result at the end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4780" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5317" bodyend="5323"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9f5f9fb38675e4c2aaf6bd98cf4956f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const results_t &amp;</type>
        <definition>CLI11_NODISCARD const results_t&amp; results</definition>
        <argsstring>() const</argsstring>
        <name>results</name>
        <briefdescription>
<para>Get the current complete results set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4783" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4783" bodyend="4783"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9fc2fe7b488b2c2f37f416f0625caf2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD results_t</type>
        <definition>CLI11_NODISCARD CLI11_INLINE results_t reduced_results</definition>
        <argsstring>() const</argsstring>
        <name>reduced_results</name>
        <briefdescription>
<para>Get a copy of the results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4786" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5325" bodyend="5341"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0e7e1fccf0c3582d33854af518bd9c92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void results</definition>
        <argsstring>(T &amp;output) const</argsstring>
        <name>results</name>
        <param>
          <type>T &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Get the results as a specified type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4789" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4789" bodyend="4817"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae69bc72222ff376002792b9086aa6f27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>CLI11_NODISCARD T</type>
        <definition>CLI11_NODISCARD T as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
<para>Return the results as the specified type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4820" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4820" bodyend="4824"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab3a3a50dc8ea6e98859b810a557960f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_callback_run</definition>
        <argsstring>() const</argsstring>
        <name>get_callback_run</name>
        <briefdescription>
<para>See if the callback has been run already. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4827" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4827" bodyend="4827"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Custom options</header>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6796611f2033acb978595db59459a3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* type_name_fn</definition>
        <argsstring>(std::function&lt; std::string()&gt; typefun)</argsstring>
        <name>type_name_fn</name>
        <param>
          <type>std::function&lt; std::string()&gt;</type>
          <declname>typefun</declname>
        </param>
        <briefdescription>
<para>Set the type function to run when displayed on this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4834" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4834" bodyend="4837"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4a90eb02549bbca6fa1f2d0aaf1ba44e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* type_name</definition>
        <argsstring>(std::string typeval)</argsstring>
        <name>type_name</name>
        <param>
          <type>std::string</type>
          <declname>typeval</declname>
        </param>
        <briefdescription>
<para>Set a custom option typestring. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4840" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4840" bodyend="4843"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a425fb983a4ed6729921d497714b83a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * type_size</definition>
        <argsstring>(int option_type_size)</argsstring>
        <name>type_size</name>
        <param>
          <type>int</type>
          <declname>option_type_size</declname>
        </param>
        <briefdescription>
<para>Set a custom option size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4846" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5343" bodyend="5360"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5c0f857a958d1f63d9d92eb51ab03c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Option *</type>
        <definition>CLI11_INLINE Option * type_size</definition>
        <argsstring>(int option_type_size_min, int option_type_size_max)</argsstring>
        <name>type_size</name>
        <param>
          <type>int</type>
          <declname>option_type_size_min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>option_type_size_max</declname>
        </param>
        <briefdescription>
<para>Set a custom option type size range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4849" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5362" bodyend="5384"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a77d140878896487c25c48cd149f631b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void inject_separator</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>inject_separator</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the value of the separator injection flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4852" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4852" bodyend="4852"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a82c7577883c9375faaff4a1a502b48ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* default_function</definition>
        <argsstring>(const std::function&lt; std::string()&gt; &amp;func)</argsstring>
        <name>default_function</name>
        <param>
          <type>const std::function&lt; std::string()&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Set a capture function for the default. Mostly used by <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4855" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4855" bodyend="4858"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a328f2701740be8abdf12a96d53622e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* capture_default_str</definition>
        <argsstring>()</argsstring>
        <name>capture_default_str</name>
        <briefdescription>
<para>Capture the default value from the original value (if it can be captured) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4861" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4861" bodyend="4866"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1abf8050bf3360bba103cd69dfaf678d7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Option *</type>
        <definition>Option* default_str</definition>
        <argsstring>(std::string val)</argsstring>
        <name>default_str</name>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the default value string representation (does not change the contained value) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4869" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4869" bodyend="4872"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7eb61c63cd7a9357d8c80c4d01d79a4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type>Option *</type>
        <definition>Option* default_val</definition>
        <argsstring>(const X &amp;val)</argsstring>
        <name>default_val</name>
        <param>
          <type>const X &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the default value and validate the results and run the callback if appropriate to set the value into the bound value only available for types that can be converted to a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4876" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4876" bodyend="4900"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a752f5466a5cc52d4c1c2b48092a2a0e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD CLI11_INLINE std::string get_type_name</definition>
        <argsstring>() const</argsstring>
        <name>get_type_name</name>
        <briefdescription>
<para>Get the full typename for this option. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4903" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5386" bodyend="5397"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a867122093c4c1bf161f2984c6548bfc5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _validate_results</definition>
        <argsstring>(results_t &amp;res) const</argsstring>
        <name>_validate_results</name>
        <param>
          <type>results_t &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Run the results through the Validators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4907" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5399" bodyend="5435"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a53e37f843ae21802ab6073f49ad0af65" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _reduce_results</definition>
        <argsstring>(results_t &amp;out, const results_t &amp;original) const</argsstring>
        <name>_reduce_results</name>
        <param>
          <type>results_t &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const results_t &amp;</type>
          <declname>original</declname>
        </param>
        <briefdescription>
<para>reduce the results in accordance with the MultiOptionPolicy </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>results are assigned to res if there if they are different </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4912" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5437" bodyend="5499"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5eb79fc1514e7e47619ce8bdc4506aa2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string _validate</definition>
        <argsstring>(std::string &amp;result, int index) const</argsstring>
        <name>_validate</name>
        <param>
          <type>std::string &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4915" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5501" bodyend="5521"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a67ad0865bd2ad33687b3d61ce45fdb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>CLI11_INLINE int _add_result</definition>
        <argsstring>(std::string &amp;&amp;result, std::vector&lt; std::string &gt; &amp;res) const</argsstring>
        <name>_add_result</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Add a single result to the result set, taking into account delimiters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4918" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="5523" bodyend="5553"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a166290d4fd7e504492303af2b5ac6732" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend App</definition>
        <argsstring></argsstring>
        <name>App</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4348" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4348" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab5e8dd35399fd022735245819f19742a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Option</definition>
        <argsstring>(std::string option_name, std::string option_description, callback_t callback, App *parent)</argsstring>
        <name>Option</name>
        <param>
          <type>std::string</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>option_description</declname>
        </param>
        <param>
          <type>callback_t</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Making an option by hand is not defined, it must be made by the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_app" kindref="compound">App</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4460" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4460" bodyend="4463"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4362">
        <label>Option</label>
        <childnode refid="4363" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4363">
        <label>OptionBase&lt; Option &gt;</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4368">
        <label>OptionBase&lt; OptionDefaults &gt;</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base"/>
      </node>
      <node id="4366">
        <label>App</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_app"/>
        <childnode refid="4366" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
        <childnode refid="4367" relation="usage">
          <edgelabel>option_defaults_</edgelabel>
        </childnode>
      </node>
      <node id="4364">
        <label>Option</label>
        <childnode refid="4365" relation="public-inheritance">
        </childnode>
        <childnode refid="4366" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="4367">
        <label>OptionDefaults</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_defaults"/>
        <childnode refid="4368" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4365">
        <label>OptionBase&lt; Option &gt;</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="4347" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="4347" bodyend="4919"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a67ad0865bd2ad33687b3d61ce45fdb" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>_add_result</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a53e37f843ae21802ab6073f49ad0af65" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>_reduce_results</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5eb79fc1514e7e47619ce8bdc4506aa2" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>_validate</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a867122093c4c1bf161f2984c6548bfc5" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>_validate_results</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac92ddba25cd5195aa194b7eb321c9e79" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>add_result</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9957792254f92a983de19d251a7aafca" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>add_result</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa7093873a1cef808de2ab6ad97e0713a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>add_result</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa049ecde37fe31dd4693e1edc0fcb082" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>allow_extra_args</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a1da96a482716c3eaa8e599473499cbb9" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>allow_extra_args_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1af50cd15ab0f05d9c91cd9f8a2db34625" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>always_capture_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae0fc6abad4dbeb803bd65ce43113a6ac" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>always_capture_default_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a166290d4fd7e504492303af2b5ac6732" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>App</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae69bc72222ff376002792b9086aa6f27" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>as</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2f8815cbeeac30b39784e98102e8a1dd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a328f2701740be8abdf12a96d53622e87" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>capture_default_str</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab73c8c7de05e88b6aac91631daad3219" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4d7cdc45193321a0245ac372f2eeb6d5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a674e8d51f18294598fd48a34836b5f28" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check_fname</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2aeada15397801615f0ee5318ad1a8cf" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check_lname</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7671133ebb14c59049f82515c6944268" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a09491ca739549531296ff5c964799ff4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>check_sname</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac8bb3912a3ce86b15842e79d0b421204" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>clear</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3491d409f5efa790921d43ef33ea3e3f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1abe958697e9f37ea3369020d9efab40fd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>configurable_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a90de9cba7f4c9b40474a5b6cd058d97f" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>copy_to</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac2ca386068235802660cc62c460ca8ff" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>count</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a911a624ab889bac1d7eeec202331a2fe" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>current_option_state_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab8e93635f366abfb6d1b9f2df8998ef8" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_flag_values_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a82c7577883c9375faaff4a1a502b48ac" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_function</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0adf6ad7af276b55b0ba5faf250d3d37" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_function_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1abf8050bf3360bba103cd69dfaf678d7c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_str</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0818ca2fa22ce82fe7e1c1792a1b33bd" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_str_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7eb61c63cd7a9357d8c80c4d01d79a4b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>default_val</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a33af294b57ec5fc59cc1b098f7d7e510" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>delimiter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a26fdea54e16baaffe0ed9119c0e9d4e5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>delimiter_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac783ea6f267854a5f6139e5f600bc0b5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae841a0f62292d2d5f1a1747b0ef8f9fc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>description_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a563f5988e7f1f00a419a18e5979e4395" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>disable_flag_override</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a66663e15e713dab22fea4c2fe6db3b47" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>disable_flag_override_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a76c69b93756f86c764b779acfcb91481" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>each</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2d51c736a023e4485d1c33c6fcd41bc5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>empty</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aeb8fc2b170ca0128d8cff633e6624e6b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>envname</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5b1be26c3f544d3827b3439cf3a97ef5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>envname_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7130c5136bea793a2225ff53b1d1aa18" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aaa2ba9ba4584938b937c5d4b69a55c7b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa7bcc696a77630b5e16fc685cf1992e1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a181eaddbaef71c0196dfaca3ead33a19" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>excludes_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9f419eef40e662b245bb8eaa771c509c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>expected</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2be5a85c27c2e45357a3f6aa8384417c" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>expected</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a53eb2d13e4831a486e3eecdf41524fb5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>expected_max_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a3ba27db5f0b9e9938ecc8a233b8b0b2c" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>expected_min_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4002346dede09783532e185d741f4111" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>flag_like_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab9e36cb115282083ede20a57094ff809" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>fnames_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a393bdea2200d36e13ff7bb8a272fda77" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>force_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a793247902f62e279e9b7f37c7aa20b03" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>force_callback_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2f3cfd485a80debb2d3026712d5f4e27" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_allow_extra_args</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a7e67b84b58f3a1be85ba806e7b7185a2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_always_capture_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab504d5b13ccafa42f2ca4565fcc3e097" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab3a3a50dc8ea6e98859b810a557960f0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_callback_run</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8a16a63a10270e0fff7d240ed4822cfd" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_configurable</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a25e3a6d50bf452eb035ba017652a0227" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_default_str</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a2e1fcf873470e161bd71f18b74e84e81" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_delimiter</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a599852f08de51b384c7c6feb6d399a1b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad295f98654896912ebdb4a32ab19b618" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_disable_flag_override</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7784f0223471e01b347a523bdd05b6cb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_envname</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acafc9761630c7a8859e5d23288728845" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a12c4e411be20644298fa2e4a69bfbd04" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_expected</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a824530a3b21710beee7cbc040ede9f8b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_expected_max</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ad51077c741e71d76cc70de82d5b89b04" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_expected_min</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a117e1006ce7f3e660f9b615ce9c98903" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_flag_value</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a3bcf91d3cdfcd95c857f364deefdae" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_fnames</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a42071e43555c32c794d55d6cf1457589" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_force_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1afca7b35622137979783814ce756839ce" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a8b541e6f3cb51a57d01b59d700a465e1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_ignore_case</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a3d0bed939c8c3062b440bf5a38df8516" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_ignore_underscore</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a74b21f5ed47c158d6b7fd8b77d379fc0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_inject_separator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acfa26379ada913b0f38c8e2a547d9d35" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_items_expected</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1afc5f9a612db0f3fa2476ae6dfcd38e5e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_items_expected_max</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a99cf518764d2d813362b281811b7c7cc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_items_expected_min</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1abfb9f8879b074277c941883fd0d0cab0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_lnames</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae7881d0e3de032e25eff87c5e0d15169" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_multi_option_policy</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae717f9c544fec757be8592abc624bfe0" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1adaeee027be1498339a4c6b522c6780bb" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aba6ad3a2b66fa52d4cf4f456d0faf764" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_option_text</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7462513d2ae405903ff6fd57627f7282" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_positional</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adb854d8a9944e306e11497510854e240" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2860810a56f3d4965b094a9408c40020" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_run_callback_for_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab070dc815a39eb6ec97e3a36fdc90dd1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_single_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2fc379ecd61634d42e9cbe2e7cb82da1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_snames</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a878816fa1fae0cc2d7d3da6dbe871410" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_trigger_on_parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a752f5466a5cc52d4c1c2b48092a2a0e6" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_type_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a43daba9ac6add8081e0f9cfd81ead0f8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_type_size</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a355e41e6a43b8095ce4ec223c68bd868" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_type_size_max</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5eea622be9d60d17471befdad72e3a9b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_type_size_min</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a93179d6193074790191754291645d151" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_validator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a01916491dc54cda72109a4903ed9527f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>get_validator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1adba1b313a5a0035d1254a2404c23a69a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>group</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a1e4ef2b6a6b637530cebef95956e174b" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>group_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2268a30f456d28c507e34976d194d045" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>has_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a1abb72e412542f5e586e729dc159548d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>ignore_case</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a07fd60f1c284e28d83e09093221644cc" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>ignore_case_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ac6140b6e0fa13d2b608225c238b4ffdc" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>ignore_underscore</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a28fcf32f4384b1f95110a88b0c5145e0" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>ignore_underscore_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a77d140878896487c25c48cd149f631b9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>inject_separator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a19ef53998fa4dc666914344a18b3421f" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>inject_separator_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ae60a98016eb4fa4f52b35c1e04c4af57" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>join</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a9ddef37d6c61f1f918934ad9028d1e1d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>join</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a931c03e67f21c553e6814afc6b845468" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>lnames_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1add863d957d8a11f803fbbb1154f56f7a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>mandatory</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7d6f7fbd17589759a5f161b14d08c776" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>matching_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa2e99508fd34274fbda286bcc2e15a91" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>multi_option_policy</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad6154191dad8747927791f1a3d6f7576" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>multi_option_policy_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a994ddb718b3d3132f913694b8b4d6b70" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1af39b2b36444fc3764afd3132b8d65d66" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae082e7d148b1438d85d3d1d8d0908614" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0b297c70e1ff7d914a34aea8703330a0" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>needs_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7bf6da13357bf54c447e0d9c2ac7c501" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>nonpositional</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>operator bool</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a97a8150b67f51b3f193726ec0f576525" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>operator=</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6914b021db64009fe7a6575bb5809b7b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>operator==</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab5e8dd35399fd022735245819f19742a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>Option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a68eeae1e0a02cff7a7d46d8298d8e8fa" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>Option</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1aa58c7816670265c171f912ed8c67dbb9" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>option_state</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ad9a486fa934b6d24997de5b63ce9f8b1" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>option_text</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ab72d0ab50d6b93da4d35e61175664e3f" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>option_text_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a80d98ce72f07f1660562be6cb2ed9ebe" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>parent_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a7baa20f354a667e221eed138e6e83404" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>pname_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a95422675675dd96c2dce37f89fc10d20" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>proc_results_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9fc2fe7b488b2c2f37f416f0625caf2d" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>reduced_results</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a83b03f774350787f6ecc34bdff8e3313" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>remove_excludes</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0cb2a23bd82af1567a372dbe23c27614" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>remove_needs</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1aac09a2060348394a025a533ef00a5763" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>required</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a04d6b51cee22d95cad88e5d2f6d77f47" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>required_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a9f5f9fb38675e4c2aaf6bd98cf4956f5" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>results</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0e7e1fccf0c3582d33854af518bd9c92" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>results</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1afc2c864f2640020b2ba0b0ad1713cfd8" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>results_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a327fd8c66c6f7c7bf4276c7e2d511545" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>run_callback</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5bc7b2bd811c1686e8a319f9b811c7af" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>run_callback_for_default</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2b4c36cf892e5ba1cb23c5422ccb184a" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>run_callback_for_default_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a8998f719ad6dcdc9e858bb7ec57d6bbe" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>snames_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ab1bfc69b6a0d8f3ca5cc633373514309" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>take_all</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1ad3ac1a211f1ab1ba3a8233b9b3c7788a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>take_first</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_base_1a25f7524ba13846aceaa7012ab2ef6142" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>take_last</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1acb5406b08e7c4e916f451f19ecb78a46" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>transform</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a2736f29aa820d1667db60520c63716fa" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>transform</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a54e46c60d5d1615beb9a0d504fc06521" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>trigger_on_parse</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a0a57759b9606662485ac2fdd918aa755" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>trigger_on_result_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a4a90eb02549bbca6fa1f2d0aaf1ba44e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1ae12f5015daf19dde05c77317b17367d5" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_name_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6796611f2033acb978595db59459a3c4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_name_fn</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a425fb983a4ed6729921d497714b83a60" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_size</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5c0f857a958d1f63d9d92eb51ab03c82" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_size</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a11d47bd659cebec4a3b2fa1f66a357c2" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_size_max_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a6403f9b2e627768debd4a6fea01c9381" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>type_size_min_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_option_1a5493ab8a8a6388e2dfe99e199bf649eb" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Option</scope><name>validators_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
