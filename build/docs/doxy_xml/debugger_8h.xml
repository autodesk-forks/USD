<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="debugger_8h" kind="file" language="C++">
    <compoundname>debugger.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2arch_2api_8h" local="yes">pxr/base/arch/api.h</includes>
    <includes refid="attributes_8h" local="yes">pxr/base/arch/attributes.h</includes>
    <incdepgraph>
      <node id="10438">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="10439" relation="include">
        </childnode>
      </node>
      <node id="10440">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="10436" relation="include">
        </childnode>
        <childnode refid="10438" relation="include">
        </childnode>
      </node>
      <node id="10436">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="10435">
        <label>pxr/base/arch/debugger.h</label>
        <link refid="debugger_8h"/>
        <childnode refid="10436" relation="include">
        </childnode>
        <childnode refid="10437" relation="include">
        </childnode>
        <childnode refid="10440" relation="include">
        </childnode>
      </node>
      <node id="10439">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="10437">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="10438" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="debugger_8h_1ad9fc0e50dd7ec1d9636c7e1222a321be" prot="public" static="no">
        <name>ARCH_DEBUGGER_TRAP</name>
        <initializer>do { <ref refid="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" kindref="member">ArchDebuggerTrap</ref>(); } while (0)</initializer>
        <briefdescription>
<para>Stop in the debugger. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro expands to <computeroutput><ref refid="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" kindref="member">ArchDebuggerTrap()</ref></computeroutput> and, if necessary and possible, code to prevent optimization so the caller appears in the debugger&apos;s stack trace. The calling functions should also use the <computeroutput>ARCH_NOINLINE</computeroutput> function attribute. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="106" column="10" bodyfile="pxr/base/arch/debugger.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchDebuggerTrap</definition>
        <argsstring>() ARCH_NOINLINE</argsstring>
        <name>ArchDebuggerTrap</name>
        <briefdescription>
<para>Stop in a debugger. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will do one of the following: start a debugger attached to this process stopped on this function; stop in an already attached debugger; stop and wait for a debugger to attach, or nothing.</para>
<para>On Linux this will start a debugger using <computeroutput><ref refid="debugger_8h_1a7f5e29871290b792b7ed6d122ec6bff3" kindref="member">ArchDebuggerAttach()</ref></computeroutput> if no debugger is attached. If a debugger is (or was) attached it will stop on this function due to <computeroutput>SIGTRAP</computeroutput>. Alternatively, users can configure the debugger to not stop on <computeroutput>SIGTRAP</computeroutput> and instead break on <computeroutput><ref refid="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" kindref="member">ArchDebuggerTrap()</ref></computeroutput>.</para>
<para>If a debugger is not attached, <computeroutput><ref refid="debugger_8h_1a7f5e29871290b792b7ed6d122ec6bff3" kindref="member">ArchDebuggerAttach()</ref></computeroutput> does not attach one, and <computeroutput><ref refid="debugger_8h_1a99ede52ab8e0b3a5c5272c3b8b3e4e1c" kindref="member">ArchDebuggerWait()</ref></computeroutput> has been most recently called with <computeroutput>true</computeroutput> then this will wait for a debugger to attach, otherwise it does nothing and the process does not stop. The user can continue the process from the debugger simply by issuing the continue command. The user can also continue the process from an attached terminal by putting the process into the foreground or background. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="debugger_8h_1a99ede52ab8e0b3a5c5272c3b8b3e4e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchDebuggerWait</definition>
        <argsstring>(bool wait)</argsstring>
        <name>ArchDebuggerWait</name>
        <param>
          <type>bool</type>
          <declname>wait</declname>
        </param>
        <briefdescription>
<para>Cause debug traps to wait for the debugger or not. </para>
        </briefdescription>
        <detaileddescription>
<para>When <computeroutput>wait</computeroutput> is <computeroutput>true</computeroutput> the next call to <computeroutput><ref refid="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" kindref="member">ArchDebuggerTrap()</ref></computeroutput> will cause the process to wait for a signal. The user can attach a debugger to continue the process. The process will not wait again until another call to this function with <computeroutput>wait</computeroutput> <computeroutput>true</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="debugger_8h_1a7f5e29871290b792b7ed6d122ec6bff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchDebuggerAttach</definition>
        <argsstring>() ARCH_NOINLINE</argsstring>
        <name>ArchDebuggerAttach</name>
        <briefdescription>
<para>Attach a debugger. </para>
        </briefdescription>
        <detaileddescription>
<para>Attaches the debugger by running the contents of the enviroment variable ARCH_DEBUGGER using /bin/sh. Any &apos;p&apos; in the contents of this variable will be replaced with the process id of the process launching the debugger. Any &apos;e&apos; will be replaced with the path to the executable for the process.</para>
<para>Returns true if ARCH_DEBUGGER is set and the debugger was successfully launched, otherwise returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="debugger_8h_1a5811c9eb2bb1add7ecca354feda0737c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchDebuggerIsAttached</definition>
        <argsstring>() ARCH_NOINLINE</argsstring>
        <name>ArchDebuggerIsAttached</name>
        <briefdescription>
<para>Test if a debugger is attached. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempts to detect if a debugger is currently attached to the process. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="debugger_8h_1a52b045e94edc31b1157917743a085a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchAbort</definition>
        <argsstring>(bool logging=true)</argsstring>
        <name>ArchAbort</name>
        <param>
          <type>bool</type>
          <declname>logging</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Abort. </para>
        </briefdescription>
        <detaileddescription>
<para>This will try to avoid the JIT debugger if any if ARCH_AVOID_JIT is in the environment and the debugger isn&apos;t already attached. In that case it will _exit(134). If <computeroutput>logging</computeroutput> is <computeroutput>false</computeroutput> then this will attempt to bypass any crash logging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/debugger.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Routines for interacting with a debugger. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_ARCH_DEBUGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_ARCH_DEBUGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/arch/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="attributes_8h" kindref="compound">pxr/base/arch/attributes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="debugger_8h_1a0cc38181fefe49fe7038675bcc6707ab" kindref="member">ArchDebuggerTrap</ref>()<sp/><ref refid="attributes_8h_1ae464f2841814f185106b2966d9edd090" kindref="member">ARCH_NOINLINE</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="debugger_8h_1a99ede52ab8e0b3a5c5272c3b8b3e4e1c" kindref="member">ArchDebuggerWait</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="debugger_8h_1a7f5e29871290b792b7ed6d122ec6bff3" kindref="member">ArchDebuggerAttach</ref>()<sp/><ref refid="attributes_8h_1ae464f2841814f185106b2966d9edd090" kindref="member">ARCH_NOINLINE</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="debugger_8h_1a5811c9eb2bb1add7ecca354feda0737c" kindref="member">ArchDebuggerIsAttached</ref>()<sp/><ref refid="attributes_8h_1ae464f2841814f185106b2966d9edd090" kindref="member">ARCH_NOINLINE</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">[[noreturn]]</highlight></codeline>
<codeline lineno="94"><highlight class="normal">ARCH_API</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="debugger_8h_1a52b045e94edc31b1157917743a085a81" kindref="member">ArchAbort</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>logging<sp/>=<sp/>true);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">#if<sp/>defined(ARCH_COMPILER_GCC)<sp/>||<sp/>defined(ARCH_COMPILER_CLANG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DEBUGGER_TRAP<sp/>do<sp/>{<sp/>ArchDebuggerTrap();<sp/>asm(&quot;&quot;);<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="debugger_8h_1ad9fc0e50dd7ec1d9636c7e1222a321be" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARCH_DEBUGGER_TRAP<sp/>do<sp/>{<sp/>ArchDebuggerTrap();<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_ARCH_DEBUGGER_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/arch/debugger.h"/>
  </compounddef>
</doxygen>
