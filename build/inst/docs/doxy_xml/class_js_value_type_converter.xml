<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_js_value_type_converter" kind="class" language="C++" prot="public">
    <compoundname>JsValueTypeConverter</compoundname>
    <includes refid="converter_8h" local="no">converter.h</includes>
    <templateparamlist>
      <param>
        <type>class ValueType</type>
      </param>
      <param>
        <type>class MapType</type>
      </param>
      <param>
        <type>bool</type>
        <declname>UseInt64</declname>
        <defname>UseInt64</defname>
        <defval>true</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_js_value_type_converter_1a11115affd84603858fd1da8c0b8c40a9" prot="private" static="no">
        <type>std::vector&lt; ValueType &gt;</type>
        <definition>typedef std::vector&lt;ValueType&gt; VectorType</definition>
        <argsstring></argsstring>
        <name>VectorType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/converter.h" line="81" column="1" bodyfile="pxr/base/js/converter.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_js_value_type_converter_1a443a2ddd4c15b2c621eb5426a65ad7da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType</type>
        <definition>static ValueType Convert</definition>
        <argsstring>(const JsValue &amp;value)</argsstring>
        <name>Convert</name>
        <param>
          <type>const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts the given <computeroutput>value</computeroutput> recursively to a structure using the value and map types specified by the <computeroutput>ValueType</computeroutput> and <computeroutput>MapType</computeroutput> class template parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/converter.h" line="86" column="1" bodyfile="pxr/base/js/converter.h" bodystart="86" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_js_value_type_converter_1a0bef28d4ff235378a30e874baa374ba9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType</type>
        <definition>static ValueType _ToValueType</definition>
        <argsstring>(const JsValue &amp;value)</argsstring>
        <name>_ToValueType</name>
        <param>
          <type>const <ref refid="class_js_value" kindref="compound">JsValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput>value</computeroutput> to <computeroutput>ValueType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/converter.h" line="92" column="1" bodyfile="pxr/base/js/converter.h" bodystart="92" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_js_value_type_converter_1ab5bb8e363d6c7bda40a1d87f33fb91cf" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MapType</type>
        <definition>static MapType _ObjectToMap</definition>
        <argsstring>(const JsObject &amp;object)</argsstring>
        <name>_ObjectToMap</name>
        <param>
          <type>const JsObject &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput>object</computeroutput> to <computeroutput>MapType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/converter.h" line="116" column="1" bodyfile="pxr/base/js/converter.h" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_js_value_type_converter_1afaff188611f899033cb307848c5fc081" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>VectorType</type>
        <definition>static VectorType _ArrayToVector</definition>
        <argsstring>(const JsArray &amp;array)</argsstring>
        <name>_ArrayToVector</name>
        <param>
          <type>const JsArray &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput>array</computeroutput> to <computeroutput>VectorType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/js/converter.h" line="125" column="1" bodyfile="pxr/base/js/converter.h" bodystart="125" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A helper class that can convert recursive <ref refid="class_js_value" kindref="compound">JsValue</ref> structures to identical structures using a different container type. </para>
    </briefdescription>
    <detaileddescription>
<para>The destination container type is determined by the <computeroutput>ValueType</computeroutput> template parameter, while the type to map objects to is determined by the <computeroutput>MapType</computeroutput> template parameter.</para>
<para>It is expected that the class <computeroutput>ValueType</computeroutput> is default constructable. A default constructed <computeroutput>ValueType</computeroutput> is used to represent JSON null. The value type must also support construction from the fundamental bool, string, real and integer types supported by <ref refid="class_js_value" kindref="compound">JsValue</ref>.</para>
<para>JsArray values are converted to std::vector&lt;ValueType&gt;, and JsObject values are converted to the MapType. MapType must have a value type of <computeroutput>ValueType</computeroutput>, and support operator[] assignment.</para>
<para>If the <computeroutput>UseInt64</computeroutput> template parameter is <computeroutput>true</computeroutput> (default), value types converted from JsValue::IntType hold uint64_t or int64_t. If the parameter is <computeroutput>false</computeroutput>, all IntType values are converted to int. Note that this may cause truncation if the <ref refid="class_js_value" kindref="compound">JsValue</ref> holds values too large to be stored in an int on this platform. </para>
    </detaileddescription>
    <location file="pxr/base/js/converter.h" line="80" column="1" bodyfile="pxr/base/js/converter.h" bodystart="79" bodyend="133"/>
    <listofallmembers>
      <member refid="class_js_value_type_converter_1afaff188611f899033cb307848c5fc081" prot="private" virt="non-virtual"><scope>JsValueTypeConverter</scope><name>_ArrayToVector</name></member>
      <member refid="class_js_value_type_converter_1ab5bb8e363d6c7bda40a1d87f33fb91cf" prot="private" virt="non-virtual"><scope>JsValueTypeConverter</scope><name>_ObjectToMap</name></member>
      <member refid="class_js_value_type_converter_1a0bef28d4ff235378a30e874baa374ba9" prot="private" virt="non-virtual"><scope>JsValueTypeConverter</scope><name>_ToValueType</name></member>
      <member refid="class_js_value_type_converter_1a443a2ddd4c15b2c621eb5426a65ad7da" prot="public" virt="non-virtual"><scope>JsValueTypeConverter</scope><name>Convert</name></member>
      <member refid="class_js_value_type_converter_1a11115affd84603858fd1da8c0b8c40a9" prot="private" virt="non-virtual"><scope>JsValueTypeConverter</scope><name>VectorType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
