<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_trace_event_container_1_1const__iterator" kind="class" language="C++" prot="public">
    <compoundname>TraceEventContainer::const_iterator</compoundname>
    <includes refid="event_container_8h" local="no">eventContainer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_trace_event_container_1_1const__iterator_1a13fe24ca0865b19fbff05ff095c4ffea" prot="public" static="no">
        <type>std::bidirectional_iterator_tag</type>
        <definition>using iterator_category =  std::bidirectional_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="125" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_trace_event_container_1_1const__iterator_1ade6ae99ceeee43fed85ebfaea22eb195" prot="public" static="no">
        <type>const <ref refid="class_trace_event" kindref="compound">TraceEvent</ref></type>
        <definition>using value_type =  const TraceEvent</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="126" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_trace_event_container_1_1const__iterator_1acc4e70b6c5f2e22e6051b6ec3bb523de" prot="public" static="no">
        <type>int64_t</type>
        <definition>using difference_type =  int64_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="127" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_trace_event_container_1_1const__iterator_1a4a54de23f9d4ed944d7e1bcac28fe1fe" prot="public" static="no">
        <type>const <ref refid="class_trace_event" kindref="compound">TraceEvent</ref> *</type>
        <definition>using pointer =  const TraceEvent*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="128" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_trace_event_container_1_1const__iterator_1a671458e216d180d60b7bb3f14fe5b09a" prot="public" static="no">
        <type>const <ref refid="class_trace_event" kindref="compound">TraceEvent</ref> &amp;</type>
        <definition>using reference =  const TraceEvent&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="129" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_trace_event_container_1_1const__iterator_1a1e63921e6875dd78748f60d3403818c2" prot="private" static="no" mutable="no">
        <type>const _Node *</type>
        <definition>const _Node* _node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="191" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_trace_event_container_1_1const__iterator_1a41fc37580224da27e824630f74dae25f" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_trace_event" kindref="compound">TraceEvent</ref> *</type>
        <definition>const TraceEvent* _event</definition>
        <argsstring></argsstring>
        <name>_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="192" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_trace_event_container_1_1const__iterator_1a9aa68aa6b8f5857f88ffc8ec20c8ae0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TraceEventContainer</definition>
        <argsstring></argsstring>
        <name>TraceEventContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="194" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a6ee9dc5776b24dedfd849715bcc3bebc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event" kindref="compound">reference</ref></type>
        <definition>reference operator *</definition>
        <argsstring>()</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="131" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a170c65e2b49f7a77927598d053661ddb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event" kindref="compound">pointer</ref></type>
        <definition>pointer operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="135" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1afd4fe054b435cd231a06114dbc9f7135" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="139" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1aa0d0e755b4e77d2fd9dbb17d4f72255c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const const_iterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="143" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1ad5a73e69afab11500e7c48e766bc869e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="147" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a644114c330bd0e27ee08a7e1087beaef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="152" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1abfe09fc838e16267cd803d7f568b58ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; operator --</definition>
        <argsstring>()</argsstring>
        <name>operator --</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="158" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a8fa44074531ba0bfb73f2223743dfba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_event_container_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator operator --</definition>
        <argsstring>(int)</argsstring>
        <name>operator --</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="163" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="163" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a1a33117fae6ca1ca523744dfcccf348b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>const_iterator</definition>
        <argsstring>(const _Node *node, const TraceEvent *event)</argsstring>
        <name>const_iterator</name>
        <param>
          <type>const _Node *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="class_trace_event" kindref="compound">TraceEvent</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="170" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1a0ffa9f50c74be2eb5abc25084c73d620" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Advance</definition>
        <argsstring>()</argsstring>
        <name>Advance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="175" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_event_container_1_1const__iterator_1ae1b551cc51c9d556342b27b466a7c7cb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Reverse</definition>
        <argsstring>()</argsstring>
        <name>Reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/eventContainer.h" line="183" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="183" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bidirectional iterator of TraceEvents. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/trace/eventContainer.h" line="123" column="1" bodyfile="pxr/base/trace/eventContainer.h" bodystart="123" bodyend="195"/>
    <listofallmembers>
      <member refid="class_trace_event_container_1_1const__iterator_1a41fc37580224da27e824630f74dae25f" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>_event</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a1e63921e6875dd78748f60d3403818c2" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>_node</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a0ffa9f50c74be2eb5abc25084c73d620" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>Advance</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a1a33117fae6ca1ca523744dfcccf348b" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>const_iterator</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1acc4e70b6c5f2e22e6051b6ec3bb523de" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>difference_type</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a13fe24ca0865b19fbff05ff095c4ffea" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>iterator_category</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1afd4fe054b435cd231a06114dbc9f7135" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator !=</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a6ee9dc5776b24dedfd849715bcc3bebc" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator *</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1abfe09fc838e16267cd803d7f568b58ed" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator --</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a8fa44074531ba0bfb73f2223743dfba3" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator --</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1ad5a73e69afab11500e7c48e766bc869e" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator++</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a644114c330bd0e27ee08a7e1087beaef" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator++</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a170c65e2b49f7a77927598d053661ddb" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator-&gt;</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1aa0d0e755b4e77d2fd9dbb17d4f72255c" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>operator==</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a4a54de23f9d4ed944d7e1bcac28fe1fe" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>pointer</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a671458e216d180d60b7bb3f14fe5b09a" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>reference</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1ae1b551cc51c9d556342b27b466a7c7cb" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>Reverse</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1a9aa68aa6b8f5857f88ffc8ec20c8ae0f" prot="private" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>TraceEventContainer</name></member>
      <member refid="class_trace_event_container_1_1const__iterator_1ade6ae99ceeee43fed85ebfaea22eb195" prot="public" virt="non-virtual"><scope>TraceEventContainer::const_iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
