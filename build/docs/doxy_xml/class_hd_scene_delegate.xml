<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_scene_delegate" kind="class" language="C++" prot="public">
    <compoundname>HdSceneDelegate</compoundname>
    <derivedcompoundref refid="class_hd_scene_index_adapter_scene_delegate" prot="public" virt="non-virtual">HdSceneIndexAdapterSceneDelegate</derivedcompoundref>
    <derivedcompoundref refid="class_hd_unit_test_delegate" prot="public" virt="non-virtual">HdUnitTestDelegate</derivedcompoundref>
    <derivedcompoundref refid="class_hdx_free_camera_scene_delegate" prot="public" virt="non-virtual">HdxFreeCameraSceneDelegate</derivedcompoundref>
    <derivedcompoundref refid="class_usd_imaging_delegate" prot="public" virt="non-virtual">UsdImagingDelegate</derivedcompoundref>
    <includes refid="scene_delegate_8h" local="no">sceneDelegate.h</includes>
      <sectiondef kind="user-defined">
      <header>Options</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a326b9d1a1e75214cf26fd9b8e436de0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API bool</type>
        <definition>virtual HD_API bool IsEnabled</definition>
        <argsstring>(TfToken const &amp;option) const</argsstring>
        <name>IsEnabled</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Returns true if the named option is enabled by the delegate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="442" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Rprim Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1acfaf1d4856f431e93d40b776491bb37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_hd_mesh_topology" kindref="compound">HdMeshTopology</ref></type>
        <definition>virtual HD_API HdMeshTopology GetMeshTopology</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetMeshTopology</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a50ea2cbc3f801b671d8a1cb315214a0d">GetMeshTopology</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ae9a91856a10c1a65102bb7b27366906e">GetMeshTopology</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a0bb1a9b7ef97ed2ab9d50928105b37a4">GetMeshTopology</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the topological mesh data for a given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ae6ac3de94d899b9576f059e3214701b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_hd_basis_curves_topology" kindref="compound">HdBasisCurvesTopology</ref></type>
        <definition>virtual HD_API HdBasisCurvesTopology GetBasisCurvesTopology</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetBasisCurvesTopology</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a89ed87c04869d5eb44746ea567e2609d">GetBasisCurvesTopology</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a7656510ae228e8f76bc8af7023c7d31d">GetBasisCurvesTopology</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a8096fd702593d125d6858a07608219a1">GetBasisCurvesTopology</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the topological curve data for a given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1adaf716dc793d2fa4e17f83cef4604f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_px_osd_subdiv_tags" kindref="compound">PxOsdSubdivTags</ref></type>
        <definition>virtual HD_API PxOsdSubdivTags GetSubdivTags</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetSubdivTags</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a8f00f95b53623e3c37873dec53f72231">GetSubdivTags</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a48f91149cbf1486746c4aa4cac7ad4d1">GetSubdivTags</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1afe398c4f483b9d64d8f8d46c22eef4fa">GetSubdivTags</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the subdivision surface tags (sharpness, holes, etc). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a42def5fc0682ad1962df1a574224c808" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref></type>
        <definition>virtual HD_API GfRange3d GetExtent</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetExtent</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1afb06bb5e3d05d1bb1a5531440bee7459">GetExtent</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ad8d3f183fc142bf80f1046723d8b6d5a">GetExtent</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a093a2aa699d9c19aa12b5e02b6563023">GetExtent</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the axis aligned bounds of a prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned bounds are in the local space of the prim (transform is yet to be applied) and should contain the bounds of any child prims.</para>
<para>The returned bounds does not include any displacement that might occur as the result of running shaders on the prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a2081bef654e7e0b108c1652d47bf392f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual HD_API GfMatrix4d GetTransform</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetTransform</name>
        <reimplementedby refid="class_hdx_free_camera_scene_delegate_1a5fb63e42563b3cb55a15fa42043ee753">GetTransform</reimplementedby>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a86193589787a8ab4cfaaf39e7d945d49">GetTransform</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1af70d3bc5376a9a7083b9d868a970981c">GetTransform</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1acfb1a2ad08026dd0ddf83f13ed37c2e8">GetTransform</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the object space transform, including all parent transforms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1af743cd05654ed005cb376fb58c05202b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API bool</type>
        <definition>virtual HD_API bool GetVisible</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetVisible</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ab848438ddd7853371a61fcb56b97a9d4">GetVisible</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a9fddd93246c47d0b6ad6c043b6c50b43">GetVisible</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1af3e73f38dea62bff93487ab56cfed620">GetVisible</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the authored visible state of the prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a8aa249e1150994ee9623e062dd81e12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API bool</type>
        <definition>virtual HD_API bool GetDoubleSided</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetDoubleSided</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a4296ecb8f06b09b38d1e3f00aec73e32">GetDoubleSided</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a17cbbfd706be5d8c9b5c551956b5b4bf">GetDoubleSided</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a30fbae4d8746fda1f47814fbbdd96baa">GetDoubleSided</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the doubleSided state for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1afb706151d2cb528eb7df8d5c641a7092" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdCullStyle</type>
        <definition>virtual HD_API HdCullStyle GetCullStyle</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetCullStyle</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a222e5179ffad16c1696b7780a86229a6">GetCullStyle</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a694109491e41c386edf0d62bc228ef34">GetCullStyle</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a5ddb9efb0061e2a474687ad9579e2c50">GetCullStyle</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the cullstyle for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a30fc236108f25b67b06ffaf1d250a0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetShadingStyle</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetShadingStyle</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1aed353308e24c8346ff190e2cae6d4f4e">GetShadingStyle</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the shading style for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a2e12e749cb49f1e35e8b0bf91fc6a906" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="struct_hd_display_style" kindref="compound">HdDisplayStyle</ref></type>
        <definition>virtual HD_API HdDisplayStyle GetDisplayStyle</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetDisplayStyle</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1208e42e1925ee8fd872ccae92fe04b3">GetDisplayStyle</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a5b2f09267da47383f63cee1533909e3e">GetDisplayStyle</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a79e5c4bb20c14b129b2b76b2ef504210">GetDisplayStyle</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the refinement level for the given prim in the range [0,8]. </para>
        </briefdescription>
        <detaileddescription>
<para>The refinement level indicates how many iterations to apply when subdividing subdivision surfaces or other refinable primitives. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ac4b8288076517adc9e44fccbbc140d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue Get</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key)</argsstring>
        <name>Get</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ad3f7f16a3cd3b8f8175c7ad6b19ba145">Get</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1aca46f00d4789d1b2da1a072282cffb4a">Get</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a0849d62bd65f119b5d0cb14309489b23">Get</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns a named value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ac642fbff8fb615a2871456e436aa5927" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetIndexedPrimvar</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key, VtIntArray *outIndices)</argsstring>
        <name>GetIndexedPrimvar</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ad8afb9e984674e1a97a5bc894b2d3b52">GetIndexedPrimvar</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1adb63dfff22a77f551a287a11175813f8">GetIndexedPrimvar</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1ab0196f206b0f5e7b167ec3eecfe7da93">GetIndexedPrimvar</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>outIndices</declname>
        </param>
        <briefdescription>
<para>Returns a named primvar value. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>*outIndices</emphasis> is not nullptr and the primvar has indices, it will return the unflattened primvar and set <emphasis>*outIndices</emphasis> to the primvar&apos;s associated indices, clearing the array if the primvar is not indexed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ad7651b83aa342893ff7e900e35edeec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_hd_repr_selector" kindref="compound">HdReprSelector</ref></type>
        <definition>virtual HD_API HdReprSelector GetReprSelector</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetReprSelector</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a590a3e1e9373342943ec43402e67a80c">GetReprSelector</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a399c2cd18f0d419e40e5391d2bdfdf97">GetReprSelector</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a7661ed94efe7f11560a1595a16b8bf8f">GetReprSelector</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the authored repr (if any) for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a0803b53559f3a982c669e8ba12ab5915" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>virtual HD_API TfToken GetRenderTag</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetRenderTag</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a0213790bd97f765f93dbebde687fd500">GetRenderTag</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a5fca6379620373fb68846045e0a8b444">GetRenderTag</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1aad14891cede794390299f6f96d5d396c">GetRenderTag</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the render tag that will be used to bucket prims during render pass bucketing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a8973f50f161733c26a53652302790383" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>virtual HD_API VtArray&lt;TfToken&gt; GetCategories</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetCategories</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a2d282e05b6e4cbfac868caecab45cc9f">GetCategories</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a93f6d7cb1e99d876118baaf99b8f2812">GetCategories</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the prim categories. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a555b45b4c126d6448f0bed5d018953b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API std::vector&lt; <ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt; &gt;</type>
        <definition>virtual HD_API std::vector&lt;VtArray&lt;TfToken&gt; &gt; GetInstanceCategories</definition>
        <argsstring>(SdfPath const &amp;instancerId)</argsstring>
        <name>GetInstanceCategories</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1ee912349bed797f5dcb8978156bc46f">GetInstanceCategories</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a2474fe593ffcd4d79007d38dd2accee0">GetInstanceCategories</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <briefdescription>
<para>Returns the categories for all instances in the instancer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a9823c120d775a8fe3bb215a66e8332dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdIdVectorSharedPtr</type>
        <definition>virtual HD_API HdIdVectorSharedPtr GetCoordSysBindings</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetCoordSysBindings</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a315262714c99f3845a58bc8135ea2cd5">GetCoordSysBindings</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1acb90a1b59d794306b44b39d4b9d168e5">GetCoordSysBindings</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate system bindings, or a nullptr if none are bound. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1adcab87eb59e47581955ca6da639a2188" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="struct_hd_model_draw_mode" kindref="compound">HdModelDrawMode</ref></type>
        <definition>virtual HD_API HdModelDrawMode GetModelDrawMode</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetModelDrawMode</name>
        <reimplementedby refid="class_usd_imaging_delegate_1a36dd8c260956a2dea38e738774ac2f02">GetModelDrawMode</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the model draw mode object for the given prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="536" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motion samples</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a77b5da29281473d377d93c9b38ac99b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>virtual HD_API size_t SampleTransform</definition>
        <argsstring>(SdfPath const &amp;id, size_t maxSampleCount, float *sampleTimes, GfMatrix4d *sampleValues)</argsstring>
        <name>SampleTransform</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1accf2771be80207437ef7b6d584a3235c">SampleTransform</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1aab292c2aa35d4698a0894122bd7f1c12">SampleTransform</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSampleCount</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Store up to <emphasis>maxSampleCount</emphasis> transform samples in <emphasis>*sampleValues</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of the authored samples and the boundaries of the current camera shutter interval. If this number is greater than maxSampleCount, you might want to call this function again to get all the authored data. Sample times are relative to the scene delegate&apos;s current time. <simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a2081bef654e7e0b108c1652d47bf392f" kindref="member">GetTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1acecbea9221dad1768f23523fc3ec7b0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>CAPACITY</declname>
            <defname>CAPACITY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SampleTransform</definition>
        <argsstring>(SdfPath const &amp;id, HdTimeSampleArray&lt; GfMatrix4d, CAPACITY &gt; *sa)</argsstring>
        <name>SampleTransform</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>&lt; <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>, CAPACITY &gt; *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
<para>Convenience form of <ref refid="class_hd_scene_delegate_1a77b5da29281473d377d93c9b38ac99b4" kindref="member">SampleTransform()</ref> that takes an <ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the union of the authored transform samples and the boundaries of the current camera shutter interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="561" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="561" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ab1498ca73626e7be29ddc569f0275139" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>virtual HD_API size_t SampleInstancerTransform</definition>
        <argsstring>(SdfPath const &amp;instancerId, size_t maxSampleCount, float *sampleTimes, GfMatrix4d *sampleValues)</argsstring>
        <name>SampleInstancerTransform</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a0e84243037a32e2353e41926830766f1">SampleInstancerTransform</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a2decc237645966167b1e7c35aa864938">SampleInstancerTransform</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSampleCount</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Store up to <emphasis>maxSampleCount</emphasis> transform samples in <emphasis>*sampleValues</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of the authored samples and the boundaries of the current camera shutter interval. If this number is greater than maxSampleCount, you might want to call this function again to get all the authored data. Sample times are relative to the scene delegate&apos;s current time. <simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1a5aab8b5764cea69054ec3299899a87c0" kindref="member">GetInstancerTransform()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a0f698a29fecbb0aa330f3fec67e0730c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>CAPACITY</declname>
            <defname>CAPACITY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SampleInstancerTransform</definition>
        <argsstring>(SdfPath const &amp;instancerId, HdTimeSampleArray&lt; GfMatrix4d, CAPACITY &gt; *sa)</argsstring>
        <name>SampleInstancerTransform</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>&lt; <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref>, CAPACITY &gt; *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
<para>Convenience form of <ref refid="class_hd_scene_delegate_1ab1498ca73626e7be29ddc569f0275139" kindref="member">SampleInstancerTransform()</ref> that takes an <ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the union of the authored samples and the boundaries of the current camera shutter interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="600" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="600" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>virtual HD_API size_t SamplePrimvar</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key, size_t maxSampleCount, float *sampleTimes, VtValue *sampleValues)</argsstring>
        <name>SamplePrimvar</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1aea2c8eb0ead658cab3a67fd9c9189111">SamplePrimvar</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a2fb3c20add7a7934349828e1f040a5af">SamplePrimvar</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSampleCount</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Store up to <emphasis>maxSampleCount</emphasis> primvar samples in <emphasis>*samplesValues</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of the authored samples and the boundaries of the current camera shutter interval. If this number is greater than maxSampleCount, you might want to call this function again to get all the authored data.</para>
<para>Sample values that are array-valued will have a size described by the <ref refid="struct_hd_primvar_descriptor" kindref="compound">HdPrimvarDescriptor</ref> as applied to the toplogy.</para>
<para>For example, this means that a mesh that is fracturing over time will return samples with the same number of points; the number of points will change as the scene delegate is resynchronized to represent the scene at a time with different topology.</para>
<para>Sample times are relative to the scene delegate&apos;s current time.</para>
<para><simplesect kind="see"><para><ref refid="class_hd_scene_delegate_1ac4b8288076517adc9e44fccbbc140d9c" kindref="member">Get()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1aa5a2fca0e7e8df2fde96d3f27ac3cf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>CAPACITY</declname>
            <defname>CAPACITY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SamplePrimvar</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key, HdTimeSampleArray&lt; VtValue, CAPACITY &gt; *sa)</argsstring>
        <name>SamplePrimvar</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>&lt; <ref refid="class_vt_value" kindref="compound">VtValue</ref>, CAPACITY &gt; *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
<para>Convenience form of <ref refid="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" kindref="member">SamplePrimvar()</ref> that takes an <ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the union of the authored samples and the boundaries of the current camera shutter interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="653" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="921" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a0664f6c5132d8c113383e4f7bdc2eb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>virtual HD_API size_t SampleIndexedPrimvar</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key, size_t maxSampleCount, float *sampleTimes, VtValue *sampleValues, VtIntArray *sampleIndices)</argsstring>
        <name>SampleIndexedPrimvar</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a324897930027ce33de72e2a34e3ea236">SampleIndexedPrimvar</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a2112e31941abd3b4137d521677c41f6b">SampleIndexedPrimvar</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSampleCount</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <param>
          <type>VtIntArray *</type>
          <declname>sampleIndices</declname>
        </param>
        <briefdescription>
<para><ref refid="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" kindref="member">SamplePrimvar()</ref> for getting an unflattened primvar and its indices. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>*sampleIndices</emphasis> is not nullptr and the primvar has indices, it will return unflattened primvar samples in <emphasis>*sampleValues</emphasis> and the primvar&apos;s sampled indices in <emphasis>*sampleIndices</emphasis>, clearing the <emphasis>*sampleIndices</emphasis> array if the primvar is not indexed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a5c2cfbc0d7475d320e39f7516542bdc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>CAPACITY</declname>
            <defname>CAPACITY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SampleIndexedPrimvar</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;key, HdIndexedTimeSampleArray&lt; VtValue, CAPACITY &gt; *sa)</argsstring>
        <name>SampleIndexedPrimvar</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_indexed_time_sample_array" kindref="compound">HdIndexedTimeSampleArray</ref>&lt; <ref refid="class_vt_value" kindref="compound">VtValue</ref>, CAPACITY &gt; *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
<para>Convenience form of <ref refid="class_hd_scene_delegate_1a0664f6c5132d8c113383e4f7bdc2eb7e" kindref="member">SampleIndexedPrimvar()</ref> that takes HdTimeSampleArrays. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the union of the authored samples and the boundaries of the current camera shutter interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="676" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="949" bodyend="975"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instancer prototypes</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a3f473bdbe6c3b3d5d85003aa6f908a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API VtIntArray</type>
        <definition>virtual HD_API VtIntArray GetInstanceIndices</definition>
        <argsstring>(SdfPath const &amp;instancerId, SdfPath const &amp;prototypeId)</argsstring>
        <name>GetInstanceIndices</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ab5d49dc02ac68212e9ff614563a12c6a">GetInstanceIndices</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a7e6b9f65711cad9fc931bf7b6e899bf4">GetInstanceIndices</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a3adc30d63d07a1f68219653d7c44583b">GetInstanceIndices</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>prototypeId</declname>
        </param>
        <briefdescription>
<para>Gets the extracted indices array of the prototype id used in the instancer. </para>
        </briefdescription>
        <detaileddescription>
<para>example instances: 0, 1, 2, 3, 4, 5 protoypes: A, B, A, A, B, C</para>
<para>GetInstanceIndices(A) : [0, 2, 3] GetInstanceIndices(B) : [1, 4] GetInstanceIndices(C) : [5] GetInstanceIndices(D) : [] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a5aab8b5764cea69054ec3299899a87c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref></type>
        <definition>virtual HD_API GfMatrix4d GetInstancerTransform</definition>
        <argsstring>(SdfPath const &amp;instancerId)</argsstring>
        <name>GetInstancerTransform</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a52367bd43b05ca76fa8937f13d886adb">GetInstancerTransform</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1aa91da4583278f259a0b76db731fc07bf">GetInstancerTransform</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1ae6554a911c44ef3742332503a15905f1">GetInstancerTransform</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <briefdescription>
<para>Returns the instancer transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a10b7194fd79e3bd33e3283ba687e742a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual HD_API SdfPath GetInstancerId</definition>
        <argsstring>(SdfPath const &amp;primId)</argsstring>
        <name>GetInstancerId</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a8e080f8acf88b7a36d95c967688a3102">GetInstancerId</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a859d482f39c859d86744139642172881">GetInstancerId</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a1bbb244b23df6fec56295e9ce2bd18b6">GetInstancerId</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>primId</declname>
        </param>
        <briefdescription>
<para>Returns the parent instancer of the given rprim or instancer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a3c2dd2784015b3047b6d5cbcc47b7836" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API SdfPathVector</type>
        <definition>virtual HD_API SdfPathVector GetInstancerPrototypes</definition>
        <argsstring>(SdfPath const &amp;instancerId)</argsstring>
        <name>GetInstancerPrototypes</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1aa078c085c6e0401451f7d9778a90ec03">GetInstancerPrototypes</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1adb9d3a9cffaacef48173b1aff208af41">GetInstancerPrototypes</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a441ca798635083866ee8a9eb88ed7a8b">GetInstancerPrototypes</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>instancerId</declname>
        </param>
        <briefdescription>
<para>Returns a list of prototypes of this instancer. </para>
        </briefdescription>
        <detaileddescription>
<para>The intent is to let renderers cache instance indices by giving them a complete set of prims to call GetInstanceIndices(instancer, prototype) on. XXX: This is currently unused, but may be used in the future. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="713" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Path Translation</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1abf2d598723d5458ec074c92af3a4d318" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual HD_API SdfPath GetScenePrimPath</definition>
        <argsstring>(SdfPath const &amp;rprimId, int instanceIndex, HdInstancerContext *instancerContext=nullptr)</argsstring>
        <name>GetScenePrimPath</name>
        <reimplementedby refid="class_usd_imaging_delegate_1a27b588c05fcbe9a9fe197463bac44c27">GetScenePrimPath</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>rprimId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>instanceIndex</declname>
        </param>
        <param>
          <type>HdInstancerContext *</type>
          <declname>instancerContext</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns the scene address of the prim corresponding to the given rprim/instance index. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to give paths in scene namespace, rather than hydra namespace, so it always strips the delegate ID. <xrefsect id="deprecated_1_deprecated000145"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use GetScenePrimPaths </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a632cd4d98737ef615df8abfc3a3cae00" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API SdfPathVector</type>
        <definition>virtual HD_API SdfPathVector GetScenePrimPaths</definition>
        <argsstring>(SdfPath const &amp;rprimId, std::vector&lt; int &gt; instanceIndices, std::vector&lt; HdInstancerContext &gt; *instancerContexts=nullptr)</argsstring>
        <name>GetScenePrimPaths</name>
        <reimplementedby refid="class_usd_imaging_delegate_1a4faac1c5a17acdd6429ed783c47275ea">GetScenePrimPaths</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>rprimId</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>instanceIndices</declname>
        </param>
        <param>
          <type>std::vector&lt; HdInstancerContext &gt; *</type>
          <declname>instancerContexts</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>A vectorized version of GetScenePrimPath that allows the prim adapter to amortize expensive calculations across a number of path evaluations in a single call. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that only a single rprimId is supported. This allows this call to be forwarded directly to a single prim adapter rather than requiring a lot of data shuffling. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="734" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Material Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a428d357d31cd676710ac3d82b6b8d57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>virtual HD_API SdfPath GetMaterialId</definition>
        <argsstring>(SdfPath const &amp;rprimId)</argsstring>
        <name>GetMaterialId</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a4dd5dffb502a39e7d29714e89f3287cf">GetMaterialId</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a3d32c978d1f1aa1149625c08153cbf5b">GetMaterialId</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a38ef1d192d9b37af6f04ed1cb3bd178b">GetMaterialId</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>rprimId</declname>
        </param>
        <briefdescription>
<para>Returns the material ID bound to the rprim <computeroutput>rprimId</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a2e99135d98c6c757ecc0885e0a82e12c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetMaterialResource</definition>
        <argsstring>(SdfPath const &amp;materialId)</argsstring>
        <name>GetMaterialResource</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ad3d6cda875d1c303c7a90b9419936521">GetMaterialResource</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ae12cf7755829aa661eeed49f662da9c8">GetMaterialResource</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a53c9d6a2acea7f9b6ab7a7749f4b589b">GetMaterialResource</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>materialId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="749" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Renderbuffer Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a0507dd08e1dd737998166c873df79af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="struct_hd_render_buffer_descriptor" kindref="compound">HdRenderBufferDescriptor</ref></type>
        <definition>virtual HD_API HdRenderBufferDescriptor GetRenderBufferDescriptor</definition>
        <argsstring>(SdfPath const &amp;id)</argsstring>
        <name>GetRenderBufferDescriptor</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1b0b47140392e37120ddf49f17c2060d">GetRenderBufferDescriptor</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1a275893e2f209dad7525b9dac3b1eea3a">GetRenderBufferDescriptor</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Returns the allocation descriptor for a given render buffer prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="757" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Light Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1ad958d086eddda888620ee2e80ed0c0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetLightParamValue</definition>
        <argsstring>(SdfPath const &amp;id, TfToken const &amp;paramName)</argsstring>
        <name>GetLightParamValue</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ab2e8d9e1e1ebe822efe94a4d466e1d05">GetLightParamValue</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a45d7d59ddf23a86a49eec33eb082f36f">GetLightParamValue</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="765" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Camera Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a40d6e52c3139692b32e61ae78c40a22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetCameraParamValue</definition>
        <argsstring>(SdfPath const &amp;cameraId, TfToken const &amp;paramName)</argsstring>
        <name>GetCameraParamValue</name>
        <reimplementedby refid="class_hdx_free_camera_scene_delegate_1a210167f25e1b0438ac62c7794296ca2a">GetCameraParamValue</reimplementedby>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1abf5c8952663070947b44df508837d35a">GetCameraParamValue</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1afb5249b00c543d0b4e3a5b545671e03a">GetCameraParamValue</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1aed7eb422972fdda1bc2bb3ee7881f26a">GetCameraParamValue</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>cameraId</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>paramName</declname>
        </param>
        <briefdescription>
<para>Returns a single value for a given camera and parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>See HdCameraTokens for the list of paramters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="775" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Volume Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a4caa63d2108b228abd7301c6fa987a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdVolumeFieldDescriptorVector</type>
        <definition>virtual HD_API HdVolumeFieldDescriptorVector GetVolumeFieldDescriptors</definition>
        <argsstring>(SdfPath const &amp;volumeId)</argsstring>
        <name>GetVolumeFieldDescriptors</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a825fecf7344ab3e8045c1347b067ffe1">GetVolumeFieldDescriptors</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1aee5deca73f616ea24830e2fb16066437">GetVolumeFieldDescriptors</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>volumeId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="784" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>ExtComputation Aspects</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a5f22260a74a589b65490ed1ea7b3d844" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual HD_API TfTokenVector GetExtComputationSceneInputNames</definition>
        <argsstring>(SdfPath const &amp;computationId)</argsstring>
        <name>GetExtComputationSceneInputNames</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1375ff996f75a19777f0ed7d9383b266">GetExtComputationSceneInputNames</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a8e3cbd9c2985ad2df6864677b28ebf4a">GetExtComputationSceneInputNames</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <briefdescription>
<para>For the given computation id, returns a list of inputs which will be requested from the scene delegate using the <ref refid="class_hd_scene_delegate_1ac4b8288076517adc9e44fccbbc140d9c" kindref="member">Get()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para>See GetExtComputationInputDescriptors and GetExtComputationOutpuDescriptors for descriptions of other computation inputs and outputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1acd5942621d9f8b8dafa1a7dc8372efdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdExtComputationInputDescriptorVector</type>
        <definition>virtual HD_API HdExtComputationInputDescriptorVector GetExtComputationInputDescriptors</definition>
        <argsstring>(SdfPath const &amp;computationId)</argsstring>
        <name>GetExtComputationInputDescriptors</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a58bf5a9e416dce73da4af71b4ff1283c">GetExtComputationInputDescriptors</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a3f86c1d5fad686f083c4718a64847d14">GetExtComputationInputDescriptors</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <briefdescription>
<para>For the given computation id, returns a list of computation input descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para>See HdExtComputationInputDecriptor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a2ab4c6d4ba95538551b7afc5c5c28472" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdExtComputationOutputDescriptorVector</type>
        <definition>virtual HD_API HdExtComputationOutputDescriptorVector GetExtComputationOutputDescriptors</definition>
        <argsstring>(SdfPath const &amp;computationId)</argsstring>
        <name>GetExtComputationOutputDescriptors</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a59f3ee33e4ef98159689eb1a33d9e843">GetExtComputationOutputDescriptors</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a66312db9dad81a7ae1864b9308f0f408">GetExtComputationOutputDescriptors</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <briefdescription>
<para>For the given computation id, returns a list of computation output descriptors. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="struct_hd_ext_computation_output_descriptor" kindref="compound">HdExtComputationOutputDescriptor</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a8362c6dae90eeb20b6cd584fe61b5121" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdExtComputationPrimvarDescriptorVector</type>
        <definition>virtual HD_API HdExtComputationPrimvarDescriptorVector GetExtComputationPrimvarDescriptors</definition>
        <argsstring>(SdfPath const &amp;id, HdInterpolation interpolationMode)</argsstring>
        <name>GetExtComputationPrimvarDescriptors</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1776c5160616852ca79a542298536b0d">GetExtComputationPrimvarDescriptors</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ade4ee13318716d3115f86a8ce454ca32">GetExtComputationPrimvarDescriptors</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>HdInterpolation</type>
          <declname>interpolationMode</declname>
        </param>
        <briefdescription>
<para>Returns a list of primvar names that should be bound to a generated output from an ExtComputation for the given prim id and interpolation mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Binding information is obtained through GetExtComputationPrimvarDesc() Returns a structure describing source information for a primvar that is bound to an ExtComputation. See HdExtComputationPrimvarDesc for the expected information to be returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a9935b600e222f99ad26e202c9ea1f149" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>virtual HD_API VtValue GetExtComputationInput</definition>
        <argsstring>(SdfPath const &amp;computationId, TfToken const &amp;input)</argsstring>
        <name>GetExtComputationInput</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1ac5dac270337e9d516465e2bb01698fc8">GetExtComputationInput</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ae6e2e1cf2ad6f8af3f0f847984d22e0e">GetExtComputationInput</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Returns a single value for a given computation id and input token. </para>
        </briefdescription>
        <detaileddescription>
<para>The token may be a computation input or a computation config parameter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a0d1903d93b14fda1c6549bb473e0b0ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>virtual HD_API size_t SampleExtComputationInput</definition>
        <argsstring>(SdfPath const &amp;computationId, TfToken const &amp;input, size_t maxSampleCount, float *sampleTimes, VtValue *sampleValues)</argsstring>
        <name>SampleExtComputationInput</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a1f4139c8b4d091e81d937da7dce7ca0d">SampleExtComputationInput</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a525aca41a886e28f72f99f8bf25ca0f0">SampleExtComputationInput</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSampleCount</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampleTimes</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>sampleValues</declname>
        </param>
        <briefdescription>
<para>Return up to <emphasis>maxSampleCount</emphasis> samples for a given computation id and input token. </para>
        </briefdescription>
        <detaileddescription>
<para>The token may be a computation input or a computation config parameter. Returns the union of the authored samples and the boundaries of the current camera shutter interval. If this number is greater than maxSampleCount, you might want to call this function again to get all the authored data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a1c90ab50682413462e92f1630f24dcb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>CAPACITY</declname>
            <defname>CAPACITY</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SampleExtComputationInput</definition>
        <argsstring>(SdfPath const &amp;computationId, TfToken const &amp;input, HdTimeSampleArray&lt; VtValue, CAPACITY &gt; *sa)</argsstring>
        <name>SampleExtComputationInput</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>&lt; <ref refid="class_vt_value" kindref="compound">VtValue</ref>, CAPACITY &gt; *</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
<para>Convenience form of <ref refid="class_hd_scene_delegate_1a0d1903d93b14fda1c6549bb473e0b0ce" kindref="member">SampleExtComputationInput()</ref> that takes an <ref refid="struct_hd_time_sample_array" kindref="compound">HdTimeSampleArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of the authored samples and the boundaries of the current camera shutter interval. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="856" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="856" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1af7a640993a4f6fae7f03de8d8f6176d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API std::string</type>
        <definition>virtual HD_API std::string GetExtComputationKernel</definition>
        <argsstring>(SdfPath const &amp;computationId)</argsstring>
        <name>GetExtComputationKernel</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a6186700bf6da6e0d78ecbc7b2d8e28ec">GetExtComputationKernel</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a81ab3b1e235f68973f9e3510117f8615">GetExtComputationKernel</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <briefdescription>
<para>Returns the kernel source assigned to the computation at the path id. </para>
        </briefdescription>
        <detaileddescription>
<para>If the string is empty the computation has no GPU kernel and the CPU callback should be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ab8d5b919ece633ae41b5a4d3b7cd9a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void InvokeExtComputation</definition>
        <argsstring>(SdfPath const &amp;computationId, HdExtComputationContext *context)</argsstring>
        <name>InvokeExtComputation</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a737364f889f52075061a636e426c531b">InvokeExtComputation</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1a9090c55efb232d48020ddc5b438129dc">InvokeExtComputation</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>computationId</declname>
        </param>
        <param>
          <type><ref refid="class_hd_ext_computation_context" kindref="compound">HdExtComputationContext</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Requests the scene delegate run the ExtComputation with the given id. </para>
        </briefdescription>
        <detaileddescription>
<para>The context contains the input values that delegate requested through GetExtComputationInputNames().</para>
<para>The scene delegate is expected to set each output identified by GetExtComputationOutputNames() on the context.</para>
<para>Hydra may invoke the computation on a different thread from what <ref refid="class_hd_engine_1a75a0815239165c0bf1826a09415013a5" kindref="member">HdEngine::Execute()</ref> was called on. It may also invoke many computations in parallel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="892" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Primitive Variables</header>
      <memberdef kind="function" id="class_hd_scene_delegate_1a2d402698e716a161f0e10d9aebd0826c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API HdPrimvarDescriptorVector</type>
        <definition>virtual HD_API HdPrimvarDescriptorVector GetPrimvarDescriptors</definition>
        <argsstring>(SdfPath const &amp;id, HdInterpolation interpolation)</argsstring>
        <name>GetPrimvarDescriptors</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a49ce3acbdac08784f448557a29e46efc">GetPrimvarDescriptors</reimplementedby>
        <reimplementedby refid="class_usd_imaging_delegate_1ae2f195ea88a159c520304427cea47f8e">GetPrimvarDescriptors</reimplementedby>
        <reimplementedby refid="class_hd_unit_test_delegate_1ac1b14ef215a970b76d58a0df4bd44132">GetPrimvarDescriptors</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>HdInterpolation</type>
          <declname>interpolation</declname>
        </param>
        <briefdescription>
<para>Returns descriptors for all primvars of the given interpolation type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="902" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Task Aspects</header>
      <memberdef kind="variable" id="class_hd_scene_delegate_1a90ef9c929f15fc31262485d6f1a4c713" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
        <definition>HdRenderIndex* _index</definition>
        <argsstring></argsstring>
        <name>_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="911" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_scene_delegate_1a24b478d078f0cd5ee52e3629b1edc59d" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>SdfPath _delegateID</definition>
        <argsstring></argsstring>
        <name>_delegateID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="912" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a938690fa1d2af271b0156a2bfd9a12da" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>virtual HD_API TfTokenVector GetTaskRenderTags</definition>
        <argsstring>(SdfPath const &amp;taskId)</argsstring>
        <name>GetTaskRenderTags</name>
        <reimplementedby refid="class_hd_unit_test_delegate_1adacc3b9627da393174803ba066eb776f">GetTaskRenderTags</reimplementedby>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>taskId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a79fb6ccf698966d727490fdfc82de660" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdSceneDelegate</definition>
        <argsstring>()=delete</argsstring>
        <name>HdSceneDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a10e009d72a97954c8b0a91cfa7dbc16c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdSceneDelegate</definition>
        <argsstring>(HdSceneDelegate &amp;)=delete</argsstring>
        <name>HdSceneDelegate</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ab9bf511040417485790fc25718aa2134" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> &amp;</type>
        <definition>HdSceneDelegate&amp; operator=</definition>
        <argsstring>(HdSceneDelegate &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_hd_scene_delegate" kindref="compound">HdSceneDelegate</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="916" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_scene_delegate_1a578a0b86f40c3e1dd589144eafb11a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdSceneDelegate</definition>
        <argsstring>(HdRenderIndex *parentIndex, SdfPath const &amp;delegateID)</argsstring>
        <name>HdSceneDelegate</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> *</type>
          <declname>parentIndex</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const &amp;</type>
          <declname>delegateID</declname>
        </param>
        <briefdescription>
<para>Constructor used for nested delegate objects which share a RenderIndex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1aa71a01c241e5f409c1f6b233b6f87501" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API</type>
        <definition>virtual HD_API ~HdSceneDelegate</definition>
        <argsstring>()</argsstring>
        <name>~HdSceneDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a36c7bb37e37e694970b49303046d0aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> &amp;</type>
        <definition>HdRenderIndex&amp; GetRenderIndex</definition>
        <argsstring>()</argsstring>
        <name>GetRenderIndex</name>
        <briefdescription>
<para>Returns the RenderIndex owned by this delegate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="419" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1ab7439e7e33d17cadb44edcf2ecec6969" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> const  &amp;</type>
        <definition>SdfPath const&amp; GetDelegateID</definition>
        <argsstring>() const</argsstring>
        <name>GetDelegateID</name>
        <briefdescription>
<para>Returns the ID of this delegate, which is used as a prefix for all objects it creates in the RenderIndex. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is <ref refid="class_sdf_path_1a9e77b565c10268c2b55f92559f621606" kindref="member">SdfPath::AbsoluteRootPath()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="425" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="425" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a95bd13d07dfff95f8f314f2f5ee4d262" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void Sync</definition>
        <argsstring>(HdSyncRequestVector *request)</argsstring>
        <name>Sync</name>
        <reimplementedby refid="class_usd_imaging_delegate_1a8025c489896cba24f2ca018a6ed6bda2">Sync</reimplementedby>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a04d054f1e5c34a8cc216ef03ffa5b742">Sync</reimplementedby>
        <param>
          <type><ref refid="struct_hd_sync_request_vector" kindref="compound">HdSyncRequestVector</ref> *</type>
          <declname>request</declname>
        </param>
        <briefdescription>
<para>Synchronizes the delegate state for the given request vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_scene_delegate_1a6755e58ed360b29cc2282fbbe24fe647" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HD_API void</type>
        <definition>virtual HD_API void PostSyncCleanup</definition>
        <argsstring>()</argsstring>
        <name>PostSyncCleanup</name>
        <reimplementedby refid="class_hd_scene_index_adapter_scene_delegate_1a3e5ba6692865e99c1adfe3eda30254a7">PostSyncCleanup</reimplementedby>
        <briefdescription>
<para>Opportunity for the delegate to clean itself up after performing parallel work during sync phase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/sceneDelegate.h" line="434" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Adapter class providing data exchange with the client scene graph. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2733">
        <label>HdSceneIndexAdapterSceneDelegate</label>
        <link refid="class_hd_scene_index_adapter_scene_delegate"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2732">
        <label>HdSceneDelegate</label>
        <link refid="class_hd_scene_delegate"/>
      </node>
      <node id="2734">
        <label>HdUnitTestDelegate</label>
        <link refid="class_hd_unit_test_delegate"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2736">
        <label>UsdImagingDelegate</label>
        <link refid="class_usd_imaging_delegate"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2735">
        <label>HdxFreeCameraSceneDelegate</label>
        <link refid="class_hdx_free_camera_scene_delegate"/>
        <childnode refid="2732" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/hd/sceneDelegate.h" line="408" column="1" bodyfile="pxr/imaging/hd/sceneDelegate.h" bodystart="408" bodyend="917"/>
    <listofallmembers>
      <member refid="class_hd_scene_delegate_1a24b478d078f0cd5ee52e3629b1edc59d" prot="private" virt="non-virtual"><scope>HdSceneDelegate</scope><name>_delegateID</name></member>
      <member refid="class_hd_scene_delegate_1a90ef9c929f15fc31262485d6f1a4c713" prot="private" virt="non-virtual"><scope>HdSceneDelegate</scope><name>_index</name></member>
      <member refid="class_hd_scene_delegate_1ac4b8288076517adc9e44fccbbc140d9c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>Get</name></member>
      <member refid="class_hd_scene_delegate_1ae6ac3de94d899b9576f059e3214701b5" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetBasisCurvesTopology</name></member>
      <member refid="class_hd_scene_delegate_1a40d6e52c3139692b32e61ae78c40a22b" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetCameraParamValue</name></member>
      <member refid="class_hd_scene_delegate_1a8973f50f161733c26a53652302790383" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetCategories</name></member>
      <member refid="class_hd_scene_delegate_1a9823c120d775a8fe3bb215a66e8332dc" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetCoordSysBindings</name></member>
      <member refid="class_hd_scene_delegate_1afb706151d2cb528eb7df8d5c641a7092" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetCullStyle</name></member>
      <member refid="class_hd_scene_delegate_1ab7439e7e33d17cadb44edcf2ecec6969" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>GetDelegateID</name></member>
      <member refid="class_hd_scene_delegate_1a2e12e749cb49f1e35e8b0bf91fc6a906" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetDisplayStyle</name></member>
      <member refid="class_hd_scene_delegate_1a8aa249e1150994ee9623e062dd81e12c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetDoubleSided</name></member>
      <member refid="class_hd_scene_delegate_1a9935b600e222f99ad26e202c9ea1f149" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationInput</name></member>
      <member refid="class_hd_scene_delegate_1acd5942621d9f8b8dafa1a7dc8372efdc" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationInputDescriptors</name></member>
      <member refid="class_hd_scene_delegate_1af7a640993a4f6fae7f03de8d8f6176d7" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationKernel</name></member>
      <member refid="class_hd_scene_delegate_1a2ab4c6d4ba95538551b7afc5c5c28472" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationOutputDescriptors</name></member>
      <member refid="class_hd_scene_delegate_1a8362c6dae90eeb20b6cd584fe61b5121" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationPrimvarDescriptors</name></member>
      <member refid="class_hd_scene_delegate_1a5f22260a74a589b65490ed1ea7b3d844" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtComputationSceneInputNames</name></member>
      <member refid="class_hd_scene_delegate_1a42def5fc0682ad1962df1a574224c808" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetExtent</name></member>
      <member refid="class_hd_scene_delegate_1ac642fbff8fb615a2871456e436aa5927" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetIndexedPrimvar</name></member>
      <member refid="class_hd_scene_delegate_1a555b45b4c126d6448f0bed5d018953b8" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetInstanceCategories</name></member>
      <member refid="class_hd_scene_delegate_1a3f473bdbe6c3b3d5d85003aa6f908a38" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetInstanceIndices</name></member>
      <member refid="class_hd_scene_delegate_1a10b7194fd79e3bd33e3283ba687e742a" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetInstancerId</name></member>
      <member refid="class_hd_scene_delegate_1a3c2dd2784015b3047b6d5cbcc47b7836" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetInstancerPrototypes</name></member>
      <member refid="class_hd_scene_delegate_1a5aab8b5764cea69054ec3299899a87c0" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetInstancerTransform</name></member>
      <member refid="class_hd_scene_delegate_1ad958d086eddda888620ee2e80ed0c0eb" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetLightParamValue</name></member>
      <member refid="class_hd_scene_delegate_1a428d357d31cd676710ac3d82b6b8d57c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetMaterialId</name></member>
      <member refid="class_hd_scene_delegate_1a2e99135d98c6c757ecc0885e0a82e12c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetMaterialResource</name></member>
      <member refid="class_hd_scene_delegate_1acfaf1d4856f431e93d40b776491bb37c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetMeshTopology</name></member>
      <member refid="class_hd_scene_delegate_1adcab87eb59e47581955ca6da639a2188" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetModelDrawMode</name></member>
      <member refid="class_hd_scene_delegate_1a2d402698e716a161f0e10d9aebd0826c" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetPrimvarDescriptors</name></member>
      <member refid="class_hd_scene_delegate_1a0507dd08e1dd737998166c873df79af3" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetRenderBufferDescriptor</name></member>
      <member refid="class_hd_scene_delegate_1a36c7bb37e37e694970b49303046d0aa2" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>GetRenderIndex</name></member>
      <member refid="class_hd_scene_delegate_1a0803b53559f3a982c669e8ba12ab5915" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetRenderTag</name></member>
      <member refid="class_hd_scene_delegate_1ad7651b83aa342893ff7e900e35edeec2" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetReprSelector</name></member>
      <member refid="class_hd_scene_delegate_1abf2d598723d5458ec074c92af3a4d318" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetScenePrimPath</name></member>
      <member refid="class_hd_scene_delegate_1a632cd4d98737ef615df8abfc3a3cae00" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetScenePrimPaths</name></member>
      <member refid="class_hd_scene_delegate_1a30fc236108f25b67b06ffaf1d250a0f8" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetShadingStyle</name></member>
      <member refid="class_hd_scene_delegate_1adaf716dc793d2fa4e17f83cef4604f40" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetSubdivTags</name></member>
      <member refid="class_hd_scene_delegate_1a938690fa1d2af271b0156a2bfd9a12da" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetTaskRenderTags</name></member>
      <member refid="class_hd_scene_delegate_1a2081bef654e7e0b108c1652d47bf392f" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetTransform</name></member>
      <member refid="class_hd_scene_delegate_1af743cd05654ed005cb376fb58c05202b" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetVisible</name></member>
      <member refid="class_hd_scene_delegate_1a4caa63d2108b228abd7301c6fa987a57" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>GetVolumeFieldDescriptors</name></member>
      <member refid="class_hd_scene_delegate_1a578a0b86f40c3e1dd589144eafb11a7b" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>HdSceneDelegate</name></member>
      <member refid="class_hd_scene_delegate_1a79fb6ccf698966d727490fdfc82de660" prot="private" virt="non-virtual"><scope>HdSceneDelegate</scope><name>HdSceneDelegate</name></member>
      <member refid="class_hd_scene_delegate_1a10e009d72a97954c8b0a91cfa7dbc16c" prot="private" virt="non-virtual"><scope>HdSceneDelegate</scope><name>HdSceneDelegate</name></member>
      <member refid="class_hd_scene_delegate_1ab8d5b919ece633ae41b5a4d3b7cd9a6a" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>InvokeExtComputation</name></member>
      <member refid="class_hd_scene_delegate_1a326b9d1a1e75214cf26fd9b8e436de0d" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>IsEnabled</name></member>
      <member refid="class_hd_scene_delegate_1ab9bf511040417485790fc25718aa2134" prot="private" virt="non-virtual"><scope>HdSceneDelegate</scope><name>operator=</name></member>
      <member refid="class_hd_scene_delegate_1a6755e58ed360b29cc2282fbbe24fe647" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>PostSyncCleanup</name></member>
      <member refid="class_hd_scene_delegate_1a0d1903d93b14fda1c6549bb473e0b0ce" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>SampleExtComputationInput</name></member>
      <member refid="class_hd_scene_delegate_1a1c90ab50682413462e92f1630f24dcb1" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>SampleExtComputationInput</name></member>
      <member refid="class_hd_scene_delegate_1a0664f6c5132d8c113383e4f7bdc2eb7e" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>SampleIndexedPrimvar</name></member>
      <member refid="class_hd_scene_delegate_1a5c2cfbc0d7475d320e39f7516542bdc0" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>SampleIndexedPrimvar</name></member>
      <member refid="class_hd_scene_delegate_1ab1498ca73626e7be29ddc569f0275139" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>SampleInstancerTransform</name></member>
      <member refid="class_hd_scene_delegate_1a0f698a29fecbb0aa330f3fec67e0730c" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>SampleInstancerTransform</name></member>
      <member refid="class_hd_scene_delegate_1a487bdb0dc9804e6e42d3e0e7262bb592" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>SamplePrimvar</name></member>
      <member refid="class_hd_scene_delegate_1aa5a2fca0e7e8df2fde96d3f27ac3cf0c" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>SamplePrimvar</name></member>
      <member refid="class_hd_scene_delegate_1a77b5da29281473d377d93c9b38ac99b4" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>SampleTransform</name></member>
      <member refid="class_hd_scene_delegate_1acecbea9221dad1768f23523fc3ec7b0d" prot="public" virt="non-virtual"><scope>HdSceneDelegate</scope><name>SampleTransform</name></member>
      <member refid="class_hd_scene_delegate_1a95bd13d07dfff95f8f314f2f5ee4d262" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>Sync</name></member>
      <member refid="class_hd_scene_delegate_1aa71a01c241e5f409c1f6b233b6f87501" prot="public" virt="virtual"><scope>HdSceneDelegate</scope><name>~HdSceneDelegate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
