<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_garbage_collector" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLGarbageCollector</compoundname>
    <includes refid="garbage_collector_8h" local="no">garbageCollector.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ade3823c92a0794a0e3c375fea97a1e0b" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiBufferHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiBufferHandleVector*&gt; _bufferList</definition>
        <argsstring></argsstring>
        <name>_bufferList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="88" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ae1e8dd906931924a045e5ce2f5539368" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiTextureHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiTextureHandleVector*&gt; _textureList</definition>
        <argsstring></argsstring>
        <name>_textureList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="89" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1a3f82cdb51de3dcea700fbbb0d5e65dff" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiSamplerHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiSamplerHandleVector*&gt; _samplerList</definition>
        <argsstring></argsstring>
        <name>_samplerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="90" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ae875b07957e7639bc8ddef242655a4fd" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiShaderFunctionHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiShaderFunctionHandleVector*&gt; _shaderFunctionList</definition>
        <argsstring></argsstring>
        <name>_shaderFunctionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="91" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ad3441a49c5e5f690a5e9448ef27fa732" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiShaderProgramHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiShaderProgramHandleVector*&gt; _shaderProgramList</definition>
        <argsstring></argsstring>
        <name>_shaderProgramList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="92" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ab7da91bf77b4555d77e037da60e7f86b" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiResourceBindingsHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiResourceBindingsHandleVector*&gt; _resourceBindingsList</definition>
        <argsstring></argsstring>
        <name>_resourceBindingsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="93" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1a5d565d5588bf7f3c019d6b906cfd82ca" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiGraphicsPipelineHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiGraphicsPipelineHandleVector*&gt; _graphicsPipelineList</definition>
        <argsstring></argsstring>
        <name>_graphicsPipelineList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="94" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1a3cd1c2d26f69d70b6a7add106293c124" prot="private" static="yes" mutable="no">
        <type>std::vector&lt; HgiComputePipelineHandleVector * &gt;</type>
        <definition>std::vector&lt;HgiComputePipelineHandleVector*&gt; _computePipelineList</definition>
        <argsstring></argsstring>
        <name>_computePipelineList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="95" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_garbage_collector_1ae14a67fcdfee2fd761098170796222f6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isDestroying</definition>
        <argsstring></argsstring>
        <name>_isDestroying</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="97" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a6f04dd95a2fa69eee2607433a45a350f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLGarbageCollector</definition>
        <argsstring>()</argsstring>
        <name>HgiGLGarbageCollector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a59f069409bca50affaa339ca1a0bc91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLGarbageCollector</definition>
        <argsstring>()</argsstring>
        <name>~HgiGLGarbageCollector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1abf6675f09a344e59dcf0a55ac1462068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void PerformGarbageCollection</definition>
        <argsstring>()</argsstring>
        <name>PerformGarbageCollection</name>
        <briefdescription>
<para>Destroys the objects inside the garbage collector. </para>
        </briefdescription>
        <detaileddescription>
<para>Thread safety: This call is not thread safe and must be called from the thread that has the opengl context bound while no other threads are destroying objects (e.g. during EndFrame). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a4140ebab614b5579196690d623381629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiBufferHandleVector *</type>
        <definition>HgiBufferHandleVector* GetBufferList</definition>
        <argsstring>()</argsstring>
        <name>GetBufferList</name>
        <briefdescription>
<para>Returns a garbage collection vector for a type of handle. </para>
        </briefdescription>
        <detaileddescription>
<para>Thread safety: The returned vector is a thread_local vector so this call is thread safe as long as the vector is only used by the calling thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1af1a07163767c621bd3cf8834c4095964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiTextureHandleVector *</type>
        <definition>HgiTextureHandleVector* GetTextureList</definition>
        <argsstring>()</argsstring>
        <name>GetTextureList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1aa71d8f0089fb66f3826d308424043d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiSamplerHandleVector *</type>
        <definition>HgiSamplerHandleVector* GetSamplerList</definition>
        <argsstring>()</argsstring>
        <name>GetSamplerList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a56a6a8b4f2e88feb35098e0d48082a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiShaderFunctionHandleVector *</type>
        <definition>HgiShaderFunctionHandleVector* GetShaderFunctionList</definition>
        <argsstring>()</argsstring>
        <name>GetShaderFunctionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a343ac7016bca9423faafb75a8c4332c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiShaderProgramHandleVector *</type>
        <definition>HgiShaderProgramHandleVector* GetShaderProgramList</definition>
        <argsstring>()</argsstring>
        <name>GetShaderProgramList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a9f4aab6bb2793553989ded5487dd0a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiResourceBindingsHandleVector *</type>
        <definition>HgiResourceBindingsHandleVector* GetResourceBindingsList</definition>
        <argsstring>()</argsstring>
        <name>GetResourceBindingsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a76b7b362e28582f10c3b338aefa9550d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiGraphicsPipelineHandleVector *</type>
        <definition>HgiGraphicsPipelineHandleVector* GetGraphicsPipelineList</definition>
        <argsstring>()</argsstring>
        <name>GetGraphicsPipelineList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a62e07801c4b0f59b72dc47b444404949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HgiComputePipelineHandleVector *</type>
        <definition>HgiComputePipelineHandleVector* GetComputePipelineList</definition>
        <argsstring>()</argsstring>
        <name>GetComputePipelineList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="71" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a79b50cbad0a35e3b545c83df49466782" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_garbage_collector" kindref="compound">HgiGLGarbageCollector</ref> &amp;</type>
        <definition>HgiGLGarbageCollector&amp; operator=</definition>
        <argsstring>(const HgiGLGarbageCollector &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_garbage_collector" kindref="compound">HgiGLGarbageCollector</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a0e22694fb5061029787e28d1564be1e5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLGarbageCollector</definition>
        <argsstring>(const HgiGLGarbageCollector &amp;)=delete</argsstring>
        <name>HgiGLGarbageCollector</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_garbage_collector" kindref="compound">HgiGLGarbageCollector</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_garbage_collector_1a2bb119b9582b3c4764ce2110d225468f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* _GetThreadLocalStorageList</definition>
        <argsstring>(std::vector&lt; T * &gt; *collector)</argsstring>
        <name>_GetThreadLocalStorageList</name>
        <param>
          <type>std::vector&lt; T * &gt; *</type>
          <declname>collector</declname>
        </param>
        <briefdescription>
<para>Returns a thread_local vector in which to store a object handle. </para>
        </briefdescription>
        <detaileddescription>
<para>Thread safety: The returned vector is a thread_local vector so this call is thread safe as long as the vector is only used by the calling thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/garbageCollector.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Handles garbage collection of opengl objects by delaying their destruction until those objects are no longer used. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/imaging/hgiGL/garbageCollector.h" line="46" column="1" bodyfile="pxr/imaging/hgiGL/garbageCollector.h" bodystart="45" bodyend="98"/>
    <listofallmembers>
      <member refid="class_hgi_g_l_garbage_collector_1ade3823c92a0794a0e3c375fea97a1e0b" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_bufferList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a3cd1c2d26f69d70b6a7add106293c124" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_computePipelineList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a2bb119b9582b3c4764ce2110d225468f" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_GetThreadLocalStorageList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a5d565d5588bf7f3c019d6b906cfd82ca" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_graphicsPipelineList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1ae14a67fcdfee2fd761098170796222f6" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_isDestroying</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1ab7da91bf77b4555d77e037da60e7f86b" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_resourceBindingsList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a3f82cdb51de3dcea700fbbb0d5e65dff" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_samplerList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1ae875b07957e7639bc8ddef242655a4fd" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_shaderFunctionList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1ad3441a49c5e5f690a5e9448ef27fa732" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_shaderProgramList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1ae1e8dd906931924a045e5ce2f5539368" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>_textureList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a4140ebab614b5579196690d623381629" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetBufferList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a62e07801c4b0f59b72dc47b444404949" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetComputePipelineList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a76b7b362e28582f10c3b338aefa9550d" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetGraphicsPipelineList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a9f4aab6bb2793553989ded5487dd0a8c" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetResourceBindingsList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1aa71d8f0089fb66f3826d308424043d22" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetSamplerList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a56a6a8b4f2e88feb35098e0d48082a51" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetShaderFunctionList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a343ac7016bca9423faafb75a8c4332c1" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetShaderProgramList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1af1a07163767c621bd3cf8834c4095964" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>GetTextureList</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a6f04dd95a2fa69eee2607433a45a350f" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>HgiGLGarbageCollector</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a0e22694fb5061029787e28d1564be1e5" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>HgiGLGarbageCollector</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a79b50cbad0a35e3b545c83df49466782" prot="private" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>operator=</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1abf6675f09a344e59dcf0a55ac1462068" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>PerformGarbageCollection</name></member>
      <member refid="class_hgi_g_l_garbage_collector_1a59f069409bca50affaa339ca1a0bc91f" prot="public" virt="non-virtual"><scope>HgiGLGarbageCollector</scope><name>~HgiGLGarbageCollector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
