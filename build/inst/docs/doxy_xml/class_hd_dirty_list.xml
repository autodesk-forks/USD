<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_dirty_list" kind="class" language="C++" prot="public">
    <compoundname>HdDirtyList</compoundname>
    <includes refid="dirty_list_8h" local="no">dirtyList.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_dirty_list_1a20ca21ad2b34c94272ed9133d73df7fa" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> &amp;</type>
        <definition>HdRenderIndex&amp; _renderIndex</definition>
        <argsstring></argsstring>
        <name>_renderIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="138" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1a5bb26af520fdb906d15dd184b0750cf1" prot="private" static="no" mutable="no">
        <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>TfTokenVector _trackedRenderTags</definition>
        <argsstring></argsstring>
        <name>_trackedRenderTags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="139" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1aa95f9f39b544ce5a75d8ad3074d69210" prot="private" static="no" mutable="no">
        <type>HdReprSelectorVector</type>
        <definition>HdReprSelectorVector _trackedReprs</definition>
        <argsstring></argsstring>
        <name>_trackedReprs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="140" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1a3e33596b230be26c598af757933802a1" prot="private" static="no" mutable="no">
        <type>SdfPathVector</type>
        <definition>SdfPathVector _dirtyIds</definition>
        <argsstring></argsstring>
        <name>_dirtyIds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="141" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1a5d4674fa393938a2d292022c043f3465" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _sceneStateVersion</definition>
        <argsstring></argsstring>
        <name>_sceneStateVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="143" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1ac199f6c4edd0a35a01df456287bc9b23" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _rprimIndexVersion</definition>
        <argsstring></argsstring>
        <name>_rprimIndexVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="144" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1ade1c02c860d27bbcdd44f4bd1b4c9d1b" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _rprimRenderTagVersion</definition>
        <argsstring></argsstring>
        <name>_rprimRenderTagVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="145" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1a9d1cc50da3c08e979f13d849669de5a4" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _varyingStateVersion</definition>
        <argsstring></argsstring>
        <name>_varyingStateVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="146" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1af5c6bcf061de239746e278179b0b45d6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _rebuildDirtyList</definition>
        <argsstring></argsstring>
        <name>_rebuildDirtyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="148" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_dirty_list_1adab4fe0e5a53596504e413b13b9b9771" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _pruneDirtyList</definition>
        <argsstring></argsstring>
        <name>_pruneDirtyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="149" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_dirty_list_1a3e8e1c43cc8c663826f1e43d44582052" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdDirtyList</definition>
        <argsstring>(HdRenderIndex &amp;index)</argsstring>
        <name>HdDirtyList</name>
        <param>
          <type><ref refid="class_hd_render_index" kindref="compound">HdRenderIndex</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_dirty_list_1adfe44906ba88577392dc5d41b132fe6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API SdfPathVector const  &amp;</type>
        <definition>HD_API SdfPathVector const&amp; GetDirtyRprims</definition>
        <argsstring>()</argsstring>
        <name>GetDirtyRprims</name>
        <briefdescription>
<para>Returns a reference of dirty rprim ids. </para>
        </briefdescription>
        <detaileddescription>
<para>If the change tracker hasn&apos;t changed any state since the last time GetDirtyRprims gets called, and if the tracked filtering parameters (set via UpdateRenderTagsAndReprSelectors) are the same, it simply returns an empty list. Otherwise depending on what changed, it will return a list of Rprim ids to be synced. Therefore, it is expected that GetDirtyRprims is called <emphasis>only once</emphasis> per render index sync. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_dirty_list_1a592f378dfe4b60dd35893b1b67b2ecf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void UpdateRenderTagsAndReprSelectors</definition>
        <argsstring>(TfTokenVector const &amp;tags, HdReprSelectorVector const &amp;reprs)</argsstring>
        <name>UpdateRenderTagsAndReprSelectors</name>
        <param>
          <type><ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>HdReprSelectorVector const &amp;</type>
          <declname>reprs</declname>
        </param>
        <briefdescription>
<para>Updates the tracked filtering parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This typically comes from the tasks submitted to <ref refid="class_hd_engine_1a75a0815239165c0bf1826a09415013a5" kindref="member">HdEngine::Execute</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_dirty_list_1a1d1ba4ceff87fd263d1cf1c9e91f413e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PruneToVaryingRprims</definition>
        <argsstring>()</argsstring>
        <name>PruneToVaryingRprims</name>
        <briefdescription>
<para>Sets the flag to prune to dirty list to just the varying Rprims on the next call to GetDirtyRprims. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="128" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="128" bodyend="130"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_dirty_list_1ab39880d62a642c84b8cb1e56147c84d3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hd_change_tracker" kindref="compound">HdChangeTracker</ref> &amp;</type>
        <definition>HdChangeTracker&amp; _GetChangeTracker</definition>
        <argsstring>() const</argsstring>
        <name>_GetChangeTracker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_dirty_list_1a29e53b63ea09c316c7638a0d0488eddd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdateDirtyIdsIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>_UpdateDirtyIdsIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/dirtyList.h" line="134" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Used for faster iteration of dirty Rprims by the render index. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_hd_dirty_list_1adfe44906ba88577392dc5d41b132fe6e" kindref="member">GetDirtyRprims()</ref> implicitly refreshes and caches the list if needed. The returning prims list will be used for sync.</para>
<para>DirtyList construction can expensive. We have 3 layer versioning to make it efficient.</para>
<para><orderedlist>
<listitem><para>Nothing changed since last time (super fast), no prims need to be synced. DirtyList returns empty vector GetDirtyRprims. This can be detected by <ref refid="class_hd_change_tracker_1a388b88aa3fdd7ee1689f4325b9399445" kindref="member">HdChangeTracker::GetSceneStateVersion</ref>. It&apos;s incremented when any change made on any prim.</para>
</listitem><listitem><para>Constantly updating Prims in a stable set (fast) when munging or playing back, the same set of prims are being updated, while the remaining prims (could be huge <ndash/> for example a large set) are static. Those animating prims can be distinguished by the Varying bit. The Varying bit is set on a prim when any dirty bit is set, and stays even after cleaning the scene dirty bits, until <ref refid="class_hd_change_tracker_1a861627500b20b88ee6ac7d887a4cd4b9" kindref="member">HdChangeTracker::ResetVaryingState</ref> clears it out.</para>
<para>DirtyList caches those prims in a list at the first time (described in 3), and returns the list for the subsequent queries. Since that list is conservatively picked by the Varying bit instead of the actual DirtyBits needed for various reprs, consumer of DirtyList needs to check the dirtybits again (this is a common pattern in <ref refid="class_hd_rprim" kindref="compound">HdRprim</ref>, <ref refid="class_hd_mesh" kindref="compound">HdMesh</ref> and other).</para>
</listitem><listitem><para>Varying state changed (medium cost) when a exisitng prim newly starts updating (start munging), or when a majority of the dirtylist stop updating, we need to reconstruct the dirtylist. <ref refid="class_hd_change_tracker_1a8fbe49ed63dd729be17f23df0fdb65c9" kindref="member">HdChangeTracker::GetVaryingStateVersion()</ref> tells the right timing to refresh, by comparing the cached version number in the dirtylist.</para>
<para>To construct a dirtylist, the Varying bit is checked instead of other dirtybits, since effective dirtybits may differ over prims, by prim type (mesh vs curve) or by per-prim repr style (flat vs smooth)</para>
<para>example: [x]=Varying [x*]=Dirty,Varying</para>
<para>say in change tracker: A B C D E [F*] [G] [H*] [I*] [J] [K] L M N ... then the dirtylist will be: F*, G, H*, I*, J, K</para>
<para>Note that G, J and K are not dirty, but it exists in the dirtylist. This optimization gives the maximum efficiency when all of Varying prims are being updated.</para>
</listitem><listitem><para>Initial creation, filter changes (most expensive) If we fail to early out all the above condition, such as when we add new prims or switch the render tag set, all prims should be passed down to HdRenderIndex::Sync, except ones we know that are completely clean. Although it requires to sweep all prims in the render index, this traversal has already been optimized using the Gather utility. </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <location file="pxr/imaging/hd/dirtyList.h" line="103" column="1" bodyfile="pxr/imaging/hd/dirtyList.h" bodystart="103" bodyend="150"/>
    <listofallmembers>
      <member refid="class_hd_dirty_list_1a3e33596b230be26c598af757933802a1" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_dirtyIds</name></member>
      <member refid="class_hd_dirty_list_1ab39880d62a642c84b8cb1e56147c84d3" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_GetChangeTracker</name></member>
      <member refid="class_hd_dirty_list_1adab4fe0e5a53596504e413b13b9b9771" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_pruneDirtyList</name></member>
      <member refid="class_hd_dirty_list_1af5c6bcf061de239746e278179b0b45d6" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_rebuildDirtyList</name></member>
      <member refid="class_hd_dirty_list_1a20ca21ad2b34c94272ed9133d73df7fa" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_renderIndex</name></member>
      <member refid="class_hd_dirty_list_1ac199f6c4edd0a35a01df456287bc9b23" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_rprimIndexVersion</name></member>
      <member refid="class_hd_dirty_list_1ade1c02c860d27bbcdd44f4bd1b4c9d1b" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_rprimRenderTagVersion</name></member>
      <member refid="class_hd_dirty_list_1a5d4674fa393938a2d292022c043f3465" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_sceneStateVersion</name></member>
      <member refid="class_hd_dirty_list_1a5bb26af520fdb906d15dd184b0750cf1" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_trackedRenderTags</name></member>
      <member refid="class_hd_dirty_list_1aa95f9f39b544ce5a75d8ad3074d69210" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_trackedReprs</name></member>
      <member refid="class_hd_dirty_list_1a29e53b63ea09c316c7638a0d0488eddd" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_UpdateDirtyIdsIfNeeded</name></member>
      <member refid="class_hd_dirty_list_1a9d1cc50da3c08e979f13d849669de5a4" prot="private" virt="non-virtual"><scope>HdDirtyList</scope><name>_varyingStateVersion</name></member>
      <member refid="class_hd_dirty_list_1adfe44906ba88577392dc5d41b132fe6e" prot="public" virt="non-virtual"><scope>HdDirtyList</scope><name>GetDirtyRprims</name></member>
      <member refid="class_hd_dirty_list_1a3e8e1c43cc8c663826f1e43d44582052" prot="public" virt="non-virtual"><scope>HdDirtyList</scope><name>HdDirtyList</name></member>
      <member refid="class_hd_dirty_list_1a1d1ba4ceff87fd263d1cf1c9e91f413e" prot="public" virt="non-virtual"><scope>HdDirtyList</scope><name>PruneToVaryingRprims</name></member>
      <member refid="class_hd_dirty_list_1a592f378dfe4b60dd35893b1b67b2ecf3" prot="public" virt="non-virtual"><scope>HdDirtyList</scope><name>UpdateRenderTagsAndReprSelectors</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
