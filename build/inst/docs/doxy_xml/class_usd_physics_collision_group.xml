<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_physics_collision_group" kind="class" language="C++" prot="public">
    <compoundname>UsdPhysicsCollisionGroup</compoundname>
    <basecompoundref refid="class_usd_typed" prot="public" virt="non-virtual">UsdTyped</basecompoundref>
    <includes refid="collision_group_8h" local="no">collisionGroup.h</includes>
    <innerclass refid="struct_usd_physics_collision_group_1_1_collision_group_table" prot="public">UsdPhysicsCollisionGroup::CollisionGroupTable</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_physics_collision_group_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="72" column="1" bodyfile="pxr/usd/usdPhysics/collisionGroup.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_physics_collision_group_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="150" column="1" bodyfile="pxr/usd/usdPhysics/collisionGroup.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_physics_collision_group_1a92376f7bc80e8d465071b1e0e9e9608b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsCollisionGroup</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdPhysicsCollisionGroup</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_physics_collision_group_1ae235a53909331f71866885a0c0aed4f1" kindref="member">UsdPhysicsCollisionGroup::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="78" column="1" bodyfile="pxr/usd/usdPhysics/collisionGroup.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1acce7f582d79391cf879dde8e4afc6f30" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdPhysicsCollisionGroup</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdPhysicsCollisionGroup</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="86" column="1" bodyfile="pxr/usd/usdPhysics/collisionGroup.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a847e305b84c09b9c09e11793cd26d905" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API</type>
        <definition>virtual USDPHYSICS_API ~UsdPhysicsCollisionGroup</definition>
        <argsstring>()</argsstring>
        <name>~UsdPhysicsCollisionGroup</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a16531855ed825144af0aea579d601790" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute GetMergeGroupNameAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetMergeGroupNameAttr</name>
        <briefdescription>
<para>If non-empty, any collision groups in a stage with a matching mergeGroup should be considered to refer to the same collection. </para>
        </briefdescription>
        <detaileddescription>
<para>Matching collision groups should behave as if there were a single group containing referenced colliders and filter groups from both collections.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>string physics:mergeGroup</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>std::string   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;String   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a192743db0caa4da217ddf5c2711d7abe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute CreateMergeGroupNameAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateMergeGroupNameAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_collision_group_1a16531855ed825144af0aea579d601790" kindref="member">GetMergeGroupNameAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1ae3acd37afcf7db40ce2defe45aa1b27d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute GetInvertFilteredGroupsAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetInvertFilteredGroupsAttr</name>
        <briefdescription>
<para>Normally, the filter will disable collisions against the selected filter groups. </para>
        </briefdescription>
        <detaileddescription>
<para>However, if this option is set, the filter will disable collisions against all colliders except for those in the selected filter groups.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>bool physics:invertFilteredGroups</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a0c4979ae5a09e6983007d7f9fb2fa3f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDPHYSICS_API UsdAttribute CreateInvertFilteredGroupsAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateInvertFilteredGroupsAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_physics_collision_group_1ae3acd37afcf7db40ce2defe45aa1b27d" kindref="member">GetInvertFilteredGroupsAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1afc41422947f60385d369001d5c2e513a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDPHYSICS_API UsdRelationship GetFilteredGroupsRel</definition>
        <argsstring>() const</argsstring>
        <name>GetFilteredGroupsRel</name>
        <briefdescription>
<para>References a list of PhysicsCollisionGroups with which collisions should be ignored. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a131cd5750653db8920f66948ce08f4b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USDPHYSICS_API UsdRelationship CreateFilteredGroupsRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateFilteredGroupsRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_physics_collision_group_1afc41422947f60385d369001d5c2e513a" kindref="member">GetFilteredGroupsRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a615399d6b96cb8c1938bbac4e5af4dd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>USDPHYSICS_API UsdCollectionAPI GetCollidersCollectionAPI</definition>
        <argsstring>() const</argsstring>
        <name>GetCollidersCollectionAPI</name>
        <briefdescription>
<para>Return the <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> interface used for defining what colliders belong to the CollisionGroup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="240" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_physics_collision_group_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDPHYSICS_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1ae235a53909331f71866885a0c0aed4f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsCollisionGroup Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdPhysicsCollisionGroup(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1a7307e6afe4daa54a5ef4282eb198373f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="class_usd_physics_collision_group" kindref="compound">UsdPhysicsCollisionGroup</ref></type>
        <definition>static USDPHYSICS_API UsdPhysicsCollisionGroup Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1acc6909b737d4e87776f6444023ff4f8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API <ref refid="struct_usd_physics_collision_group_1_1_collision_group_table" kindref="compound">CollisionGroupTable</ref></type>
        <definition>static USDPHYSICS_API CollisionGroupTable ComputeCollisionGroupTable</definition>
        <argsstring>(const UsdStage &amp;stage)</argsstring>
        <name>ComputeCollisionGroupTable</name>
        <param>
          <type>const <ref refid="class_usd_stage" kindref="compound">UsdStage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Compute a table encoding all the collision groups filter rules for a stage. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be used as a reference to validate an implementation of the collision groups filters. The returned table is diagonally symmetric. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="276" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_physics_collision_group_1afe453b5ad73c3734b6c12709dd6f0c4f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDPHYSICS_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_typed_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="146" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_physics_collision_group_1adade0ff4639afd184e30c5708ae86f8d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDPHYSICS_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDPHYSICS_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_physics_collision_group_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_physics_collision_group_1a96538019a0566b8f54f05953ac1c6615" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDPHYSICS_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDPHYSICS_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_typed_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdPhysics/collisionGroup.h" line="158" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines a collision group for coarse filtering. </para>
    </briefdescription>
    <detaileddescription>
<para>When a collision occurs between two objects that have a PhysicsCollisionGroup assigned, they will collide with each other unless this PhysicsCollisionGroup pair is filtered. See filteredGroups attribute.</para>
<para>A CollectionAPI:colliders maintains a list of PhysicsCollisionAPI rel-s that defines the members of this Collisiongroup. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7735">
        <label>UsdPhysicsCollisionGroup</label>
        <link refid="class_usd_physics_collision_group"/>
        <childnode refid="7736" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7736">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7737">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7738">
        <label>UsdPhysicsCollisionGroup</label>
        <link refid="class_usd_physics_collision_group"/>
        <childnode refid="7739" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7739">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7740" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7740">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdPhysics/collisionGroup.h" line="67" column="1" bodyfile="pxr/usd/usdPhysics/collisionGroup.h" bodystart="66" bodyend="277"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_physics_collision_group_1afe453b5ad73c3734b6c12709dd6f0c4f" prot="protected" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_physics_collision_group_1adade0ff4639afd184e30c5708ae86f8d" prot="private" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_physics_collision_group_1a96538019a0566b8f54f05953ac1c6615" prot="private" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_physics_collision_group_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_physics_collision_group_1acc6909b737d4e87776f6444023ff4f8e" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>ComputeCollisionGroupTable</name></member>
      <member refid="class_usd_physics_collision_group_1a131cd5750653db8920f66948ce08f4b0" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>CreateFilteredGroupsRel</name></member>
      <member refid="class_usd_physics_collision_group_1a0c4979ae5a09e6983007d7f9fb2fa3f6" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>CreateInvertFilteredGroupsAttr</name></member>
      <member refid="class_usd_physics_collision_group_1a192743db0caa4da217ddf5c2711d7abe" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>CreateMergeGroupNameAttr</name></member>
      <member refid="class_usd_physics_collision_group_1a7307e6afe4daa54a5ef4282eb198373f" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>Define</name></member>
      <member refid="class_usd_physics_collision_group_1ae235a53909331f71866885a0c0aed4f1" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>Get</name></member>
      <member refid="class_usd_physics_collision_group_1a615399d6b96cb8c1938bbac4e5af4dd7" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetCollidersCollectionAPI</name></member>
      <member refid="class_usd_physics_collision_group_1afc41422947f60385d369001d5c2e513a" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetFilteredGroupsRel</name></member>
      <member refid="class_usd_physics_collision_group_1ae3acd37afcf7db40ce2defe45aa1b27d" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetInvertFilteredGroupsAttr</name></member>
      <member refid="class_usd_physics_collision_group_1a16531855ed825144af0aea579d601790" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetMergeGroupNameAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetPrim</name></member>
      <member refid="class_usd_physics_collision_group_1a7cad138857a9fbc4db1a366dc8168d90" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>operator bool</name></member>
      <member refid="class_usd_physics_collision_group_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>schemaKind</name></member>
      <member refid="class_usd_physics_collision_group_1a92376f7bc80e8d465071b1e0e9e9608b" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdPhysicsCollisionGroup</name></member>
      <member refid="class_usd_physics_collision_group_1acce7f582d79391cf879dde8e4afc6f30" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdPhysicsCollisionGroup</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_physics_collision_group_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdPhysicsCollisionGroup</scope><name>UsdTyped</name></member>
      <member refid="class_usd_physics_collision_group_1a847e305b84c09b9c09e11793cd26d905" prot="public" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>~UsdPhysicsCollisionGroup</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdPhysicsCollisionGroup</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
