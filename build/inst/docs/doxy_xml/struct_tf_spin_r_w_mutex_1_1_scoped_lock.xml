<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_tf_spin_r_w_mutex_1_1_scoped_lock" kind="struct" language="C++" prot="public">
    <compoundname>TfSpinRWMutex::ScopedLock</compoundname>
    <includes refid="spin_r_w_mutex_8h" local="no">spinRWMutex.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a1d15fe29410c4ba47a0eb8c9e45d2573" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int NotAcquired</definition>
        <argsstring></argsstring>
        <name>NotAcquired</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="82" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a413f9c27ba963a500ba5407ca1f72b0f" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int ReadAcquired</definition>
        <argsstring></argsstring>
        <name>ReadAcquired</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="83" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a8d37a09d9e4ea1e72de9a79caa6c379a" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int WriteAcquired</definition>
        <argsstring></argsstring>
        <name>WriteAcquired</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="84" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1aaef7741a3ed771de8830e76858c704f5" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_spin_r_w_mutex" kindref="compound">TfSpinRWMutex</ref> *</type>
        <definition>TfSpinRWMutex* _mutex</definition>
        <argsstring></argsstring>
        <name>_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="193" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a9bb763928c9a78bd220119bb042fabc7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _acqState</definition>
        <argsstring></argsstring>
        <name>_acqState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="194" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a23ea0f2f50491205f5147ea8530c0a1c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ScopedLock</definition>
        <argsstring>(TfSpinRWMutex &amp;m, bool write=true)</argsstring>
        <name>ScopedLock</name>
        <param>
          <type><ref refid="class_tf_spin_r_w_mutex" kindref="compound">TfSpinRWMutex</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct a scoped lock for mutex <computeroutput>m</computeroutput> and acquire either a read or a write lock depending on <computeroutput>write</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="88" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a3150d0659fbe1506be0ce262cd7b1278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ScopedLock</definition>
        <argsstring>()</argsstring>
        <name>ScopedLock</name>
        <briefdescription>
<para>Construct a scoped lock not associated with a <computeroutput>mutex</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="95" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1acc8f76dda0ec82b4120a2255b8ce74b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~ScopedLock</definition>
        <argsstring>()</argsstring>
        <name>~ScopedLock</name>
        <briefdescription>
<para>If this scoped lock is acquired for either read or write, <ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a94c93747c8daa99d65c2a04c6be0748c" kindref="member">Release()</ref> it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="99" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4e3f0536a7ff9dbcb9511be39a025b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Acquire</definition>
        <argsstring>(TfSpinRWMutex &amp;m, bool write=true)</argsstring>
        <name>Acquire</name>
        <param>
          <type><ref refid="class_tf_spin_r_w_mutex" kindref="compound">TfSpinRWMutex</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>If the current scoped lock is acquired, <ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a94c93747c8daa99d65c2a04c6be0748c" kindref="member">Release()</ref> it, then associate this lock with <computeroutput>m</computeroutput> and acquire either a read or a write lock, depending on <computeroutput>write</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="106" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a2b66e8e54ed47336076e5c23b0ef22c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Acquire</definition>
        <argsstring>(bool write=true)</argsstring>
        <name>Acquire</name>
        <param>
          <type>bool</type>
          <declname>write</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Acquire either a read or write lock on this lock&apos;s associated mutex depending on <computeroutput>write</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This lock must be associated with a mutex (typically by construction or by a call to <ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4e3f0536a7ff9dbcb9511be39a025b70" kindref="member">Acquire()</ref> that takes a mutex). This lock must not already be acquired when calling <ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4e3f0536a7ff9dbcb9511be39a025b70" kindref="member">Acquire()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="117" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a94c93747c8daa99d65c2a04c6be0748c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Release</definition>
        <argsstring>()</argsstring>
        <name>Release</name>
        <briefdescription>
<para>Release the currently required lock on the associated mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>If this lock is not currently acquired, silently do nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="128" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="128" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1aea82059734813662236ac5c264a87bbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void AcquireRead</definition>
        <argsstring>()</argsstring>
        <name>AcquireRead</name>
        <briefdescription>
<para>Acquire a read lock on this lock&apos;s associated mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This lock must not already be acquired when calling <computeroutput><ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1aea82059734813662236ac5c264a87bbd" kindref="member">AcquireRead()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="144" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1ae26cf2a0b6c906a79d7afc652ec6be24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void AcquireWrite</definition>
        <argsstring>()</argsstring>
        <name>AcquireWrite</name>
        <briefdescription>
<para>Acquire a write lock on this lock&apos;s associated mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>This lock must not already be acquired when calling <computeroutput><ref refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1ae26cf2a0b6c906a79d7afc652ec6be24" kindref="member">AcquireWrite()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="152" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a042b2ad177df032a8a617c043ac8626d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool UpgradeToWriter</definition>
        <argsstring>()</argsstring>
        <name>UpgradeToWriter</name>
        <briefdescription>
<para>Change this lock&apos;s acquisition state from a read lock to a write lock. </para>
        </briefdescription>
        <detaileddescription>
<para>This lock must already be acquired for reading. Return true if the upgrade occurred without releasing the read lock, false if it was released. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="162" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4c848a43c16a8b1847f885d014eb592b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool DowngradeToReader</definition>
        <argsstring>()</argsstring>
        <name>DowngradeToReader</name>
        <briefdescription>
<para>Change this lock&apos;s acquisition state from a write lock to a read lock. </para>
        </briefdescription>
        <detaileddescription>
<para>This lock must already be acquired for writing. Return true if the downgrade occurred without releasing the write in the interim, false if it was released and other writers may have intervened. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="173" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="173" bodyend="177"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1adabf24011352965b26550703f41eb1a5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _ReleaseRead</definition>
        <argsstring>()</argsstring>
        <name>_ReleaseRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="181" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1ab212ee067722bb714b87e2a3d59a51b9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _ReleaseWrite</definition>
        <argsstring>()</argsstring>
        <name>_ReleaseWrite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/spinRWMutex.h" line="187" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="187" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Scoped lock utility class. </para>
    </briefdescription>
    <detaileddescription>
<para>API modeled roughly after tbb::spin_rw_mutex::scoped_lock. </para>
    </detaileddescription>
    <location file="pxr/base/tf/spinRWMutex.h" line="79" column="1" bodyfile="pxr/base/tf/spinRWMutex.h" bodystart="79" bodyend="195"/>
    <listofallmembers>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a9bb763928c9a78bd220119bb042fabc7" prot="private" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>_acqState</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1aaef7741a3ed771de8830e76858c704f5" prot="private" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>_mutex</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1adabf24011352965b26550703f41eb1a5" prot="private" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>_ReleaseRead</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1ab212ee067722bb714b87e2a3d59a51b9" prot="private" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>_ReleaseWrite</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4e3f0536a7ff9dbcb9511be39a025b70" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>Acquire</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a2b66e8e54ed47336076e5c23b0ef22c0" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>Acquire</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1aea82059734813662236ac5c264a87bbd" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>AcquireRead</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1ae26cf2a0b6c906a79d7afc652ec6be24" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>AcquireWrite</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a4c848a43c16a8b1847f885d014eb592b" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>DowngradeToReader</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a1d15fe29410c4ba47a0eb8c9e45d2573" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>NotAcquired</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a413f9c27ba963a500ba5407ca1f72b0f" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>ReadAcquired</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a94c93747c8daa99d65c2a04c6be0748c" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>Release</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a23ea0f2f50491205f5147ea8530c0a1c" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>ScopedLock</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a3150d0659fbe1506be0ce262cd7b1278" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>ScopedLock</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a042b2ad177df032a8a617c043ac8626d" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>UpgradeToWriter</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1a8d37a09d9e4ea1e72de9a79caa6c379a" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>WriteAcquired</name></member>
      <member refid="struct_tf_spin_r_w_mutex_1_1_scoped_lock_1acc8f76dda0ec82b4120a2255b8ce74b7" prot="public" virt="non-virtual"><scope>TfSpinRWMutex::ScopedLock</scope><name>~ScopedLock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
