<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_reg_test" kind="class" language="C++" prot="public">
    <compoundname>TfRegTest</compoundname>
    <includes refid="reg_test_8h" local="no">regTest.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_tf_reg_test_1a873c112a0c7ab1bae6e415478d89d026" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* RegFunc) ()</definition>
        <argsstring>)()</argsstring>
        <name>RegFunc</name>
        <briefdescription>
<para>Type of a function with no arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="114" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_reg_test_1aac9c8ae193d39c62bb1df8d850d1d84e" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* RegFuncWithArgs) (int argc, char *argv[])</definition>
        <argsstring>)(int argc, char *argv[])</argsstring>
        <name>RegFuncWithArgs</name>
        <briefdescription>
<para>Type of a function with arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>When <computeroutput>Main(argc,argv)</computeroutput> is requested to run a function of type <computeroutput>RegFuncWithArgs</computeroutput>, it invokes the function with arguments <computeroutput>argc-1</computeroutput> and <computeroutput>argv+1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="121" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_tf_reg_test_1af9008c254e897204274531cd25456bb1" prot="private" static="no">
        <type>TfHashMap&lt; std::string, <ref refid="class_tf_reg_test_1a873c112a0c7ab1bae6e415478d89d026" kindref="member">RegFunc</ref>, <ref refid="class_tf_hash" kindref="compound">TfHash</ref> &gt;</type>
        <definition>typedef TfHashMap&lt;std::string, RegFunc, TfHash&gt; _Hash</definition>
        <argsstring></argsstring>
        <name>_Hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="135" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_tf_reg_test_1a322c6639f10c28acdaa79abb71c18eb5" prot="private" static="no">
        <type>TfHashMap&lt; std::string, <ref refid="class_tf_reg_test_1aac9c8ae193d39c62bb1df8d850d1d84e" kindref="member">RegFuncWithArgs</ref>, <ref refid="class_tf_hash" kindref="compound">TfHash</ref> &gt;</type>
        <definition>typedef TfHashMap&lt;std::string, RegFuncWithArgs, TfHash&gt; _HashWithArgs</definition>
        <argsstring></argsstring>
        <name>_HashWithArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="136" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_reg_test_1a9a78d5d29c1c64a04770e949ff80741f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfSingleton&lt; TfRegTest &gt;</definition>
        <argsstring></argsstring>
        <name>TfSingleton&lt; TfRegTest &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="126" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_reg_test_1a7e5171c3f26203cddfa7320d3beb0e29" prot="private" static="no" mutable="no">
        <type>_Hash</type>
        <definition>_Hash _functionTable</definition>
        <argsstring></argsstring>
        <name>_functionTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="137" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_reg_test_1a195ef9ec7f8db112d1c977d0bc0c9760" prot="private" static="no" mutable="no">
        <type>_HashWithArgs</type>
        <definition>_HashWithArgs _functionTableWithArgs</definition>
        <argsstring></argsstring>
        <name>_functionTableWithArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="138" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_tf_reg_test_1a43449224cb09c2401fd1571e686c104e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int Main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>Main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Run a single regression test function, returning 0 if the function succeeded and 1 otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is intended to be called as follows: <programlisting><codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char<sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>TfRegTest::Main(argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The first argument is the name of the test to be run. If the registered test function run takes no arguments, then no arguments other than the test name should be supplied. Otherwise, the <computeroutput><ref refid="class_tf_reg_test_1a43449224cb09c2401fd1571e686c104e" kindref="member">Main()</ref></computeroutput> passes <computeroutput>argc-1</computeroutput> and <computeroutput>argv+1</computeroutput> to the test function, and the test function is responsible for argument checking. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="106" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_reg_test_1a80245614999caec7541433be58739656" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API <ref refid="class_tf_reg_test" kindref="compound">TfRegTest</ref> &amp;</type>
        <definition>static TF_API TfRegTest&amp; GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="111" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_reg_test_1aadfddab2813a53b6b6f074065d0ef014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Register</definition>
        <argsstring>(const char *name, RegFunc)</argsstring>
        <name>Register</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_tf_reg_test_1a873c112a0c7ab1bae6e415478d89d026" kindref="member">RegFunc</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_reg_test_1ae6963e7a30a8595c18dc64f04cdc4b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool Register</definition>
        <argsstring>(const char *name, RegFuncWithArgs)</argsstring>
        <name>Register</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_tf_reg_test_1aac9c8ae193d39c62bb1df8d850d1d84e" kindref="member">RegFuncWithArgs</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="126" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_reg_test_1aef89cb2705c3113311dbdde5454fe926" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API int</type>
        <definition>TF_API int _Main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>_Main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_reg_test_1a243b78b57d88b1374eeae2348cf518eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrintTestNames</definition>
        <argsstring>()</argsstring>
        <name>_PrintTestNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/regTest.h" line="133" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="class_tf_reg_test" kindref="compound">TfRegTest</ref></computeroutput> is a singleton class, which is used to register functions with either type <computeroutput>bool</computeroutput> <computeroutput></computeroutput>(*)(int, char*[]), or functions returning type <computeroutput>bool</computeroutput> and taking no arguments. </para>
    </briefdescription>
    <detaileddescription>
<para>Here is how <computeroutput><ref refid="class_tf_reg_test" kindref="compound">TfRegTest</ref></computeroutput> is used to create tests in separate files, which are then compiled into a single standalone executable (and not part of any library):</para>
<para>// file: main.cpp <programlisting filename="test/main.cpp"></programlisting></para>
<para>// file: hammer.cpp <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pxr/base/tf/regTest.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>bool</highlight></codeline>
<codeline><highlight class="normal">Test_PtHammer()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>success;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>success;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">TF_ADD_REGTEST(PtHammer);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">//<sp/>file:<sp/>drill.cpp</highlight></codeline>
<codeline><highlight class="normal">static<sp/>bool</highlight></codeline>
<codeline><highlight class="normal">Test_PtDrill(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>success;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>success;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">TF_ADD_REGTEST(PtDrill);</highlight></codeline>
</programlisting></para>
<para>When <computeroutput>main.cpp</computeroutput>, <computeroutput>drill.cpp</computeroutput> and <computeroutput>hammer.cpp</computeroutput> are compiled into an executable, then a test can be run by invoking the executable with a first argument of either <computeroutput>PtHammer</computeroutput> or <computeroutput>PtDrill</computeroutput>. Since <computeroutput>PtHammer</computeroutput> is a function without arguments, supplying additional arguments is an error; but <computeroutput>PtDrill</computeroutput> takes arguments, so additional command-line arguments specified are passed to the function. (Most library test functions shouldn&apos;t need any arguments.) </para>
    </detaileddescription>
    <location file="pxr/base/tf/regTest.h" line="89" column="1" bodyfile="pxr/base/tf/regTest.h" bodystart="89" bodyend="139"/>
    <listofallmembers>
      <member refid="class_tf_reg_test_1a7e5171c3f26203cddfa7320d3beb0e29" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_functionTable</name></member>
      <member refid="class_tf_reg_test_1a195ef9ec7f8db112d1c977d0bc0c9760" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_functionTableWithArgs</name></member>
      <member refid="class_tf_reg_test_1af9008c254e897204274531cd25456bb1" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_Hash</name></member>
      <member refid="class_tf_reg_test_1a322c6639f10c28acdaa79abb71c18eb5" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_HashWithArgs</name></member>
      <member refid="class_tf_reg_test_1aef89cb2705c3113311dbdde5454fe926" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_Main</name></member>
      <member refid="class_tf_reg_test_1a243b78b57d88b1374eeae2348cf518eb" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>_PrintTestNames</name></member>
      <member refid="class_tf_reg_test_1a80245614999caec7541433be58739656" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>GetInstance</name></member>
      <member refid="class_tf_reg_test_1a43449224cb09c2401fd1571e686c104e" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>Main</name></member>
      <member refid="class_tf_reg_test_1a873c112a0c7ab1bae6e415478d89d026" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>RegFunc</name></member>
      <member refid="class_tf_reg_test_1aac9c8ae193d39c62bb1df8d850d1d84e" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>RegFuncWithArgs</name></member>
      <member refid="class_tf_reg_test_1aadfddab2813a53b6b6f074065d0ef014" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>Register</name></member>
      <member refid="class_tf_reg_test_1ae6963e7a30a8595c18dc64f04cdc4b14" prot="public" virt="non-virtual"><scope>TfRegTest</scope><name>Register</name></member>
      <member refid="class_tf_reg_test_1a9a78d5d29c1c64a04770e949ff80741f" prot="private" virt="non-virtual"><scope>TfRegTest</scope><name>TfSingleton&lt; TfRegTest &gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
