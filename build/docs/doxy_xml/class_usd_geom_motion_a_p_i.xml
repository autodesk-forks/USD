<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_motion_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomMotionAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="motion_a_p_i_8h" local="no">motionAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_motion_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="73" column="1" bodyfile="pxr/usd/usdGeom/motionAPI.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_motion_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="165" column="1" bodyfile="pxr/usd/usdGeom/motionAPI.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1abbb012d6c524c861ce19d4189c8116d0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomMotionAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomMotionAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_motion_a_p_i_1a1d02869d6c2e6548912917c2654b570d" kindref="member">UsdGeomMotionAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="79" column="1" bodyfile="pxr/usd/usdGeom/motionAPI.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1af19c2bfe2f88211f08342bc7fdcacedd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomMotionAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomMotionAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="87" column="1" bodyfile="pxr/usd/usdGeom/motionAPI.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1ac1d13c34e3f488db8ff5d6cae22826a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomMotionAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomMotionAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1acc8125985dd6550c18817609db40584b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetMotionBlurScaleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetMotionBlurScaleAttr</name>
        <briefdescription>
<para>BlurScale is an <bold>inherited</bold> float attribute that stipulates the rendered motion blur (as typically specified via <ref refid="class_usd_geom_camera" kindref="compound">UsdGeomCamera</ref>&apos;s <emphasis>shutter:open</emphasis> and <emphasis>shutter:close</emphasis> properties) should be scaled for <bold>all objects</bold> at and beneath the prim in namespace on which the <emphasis>motion:blurScale</emphasis> value is specified. </para>
        </briefdescription>
        <detaileddescription>
<para>Without changing any other data in the scene, <emphasis>blurScale</emphasis> allows artists to &quot;dial in&quot; the amount of blur on a per-object basis. A <emphasis>blurScale</emphasis> value of zero removes all blur, a value of 0.5 reduces blur by half, and a value of 2.0 doubles the blur. The legal range for <emphasis>blurScale</emphasis> is [0, inf), although very high values may result in extremely expensive renders, and may exceed the capabilities of some renderers.</para>
<para>Although renderers are free to implement this feature however they see fit, see <ref refid="usd_geom_page_front_1UsdGeomMotionAPI_blurScale" kindref="member">Effectively Applying motion:blurScale</ref> for our guidance on implementing the feature universally and efficiently.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_geom_motion_a_p_i_1a35c388f36953b1f1724a9843ed493b16" kindref="member">ComputeMotionBlurScale()</ref></para>
</simplesect>
<table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float motion:blurScale = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1af68a0b24b1f6e757498595d327d7c076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateMotionBlurScaleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateMotionBlurScaleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_motion_a_p_i_1acc8125985dd6550c18817609db40584b" kindref="member">GetMotionBlurScaleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a88b5796ba185af1ed7d2f0d8eccd1cf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetVelocityScaleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetVelocityScaleAttr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000078"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para>VelocityScale is an <bold>inherited</bold> float attribute that velocity-based schemas (e.g. PointBased, PointInstancer) can consume to compute interpolated positions and orientations by applying velocity and angularVelocity, which is required for interpolating between samples when topology is varying over time. Although these quantities are generally physically computed by a simulator, sometimes we require more or less motion-blur to achieve the desired look.</para>
<para>VelocityScale allows artists to dial-in, as a post-sim correction, a scale factor to be applied to the velocity prior to computing interpolated positions from it.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>float motion:velocityScale = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>float   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Float   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1ad4fcd42d1382ab844bc43cbc32f2597b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateVelocityScaleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateVelocityScaleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_motion_a_p_i_1a88b5796ba185af1ed7d2f0d8eccd1cf7" kindref="member">GetVelocityScaleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1adf99855f7e95e93eea32dcf05205cc54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetNonlinearSampleCountAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetNonlinearSampleCountAttr</name>
        <briefdescription>
<para>Determines the number of position or transformation samples created when motion is described by attributes contributing non-linear terms. </para>
        </briefdescription>
        <detaileddescription>
<para>To give an example, imagine an application (such as a renderer) consuming &apos;points&apos; and the USD document also contains &apos;accelerations&apos; for the same prim. Unless the application can consume these &apos;accelerations&apos; itself, an intermediate layer has to compute samples within the sampling interval for the point positions based on the value of &apos;points&apos;, &apos;velocities&apos; and &apos;accelerations&apos;. The number of these samples is given by &apos;nonlinearSampleCount&apos;. The samples are equally spaced within the sampling interval.</para>
<para>Another example involves the PointInstancer where &apos;nonlinearSampleCount&apos; is relevant when &apos;angularVelocities&apos; or &apos;accelerations&apos; are authored.</para>
<para>&apos;nonlinearSampleCount&apos; is an <bold>inherited</bold> attribute, also see <ref refid="class_usd_geom_motion_a_p_i_1af7179fbf425bf2cb6a01b9fd414d0d81" kindref="member">ComputeNonlinearSampleCount()</ref></para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>int motion:nonlinearSampleCount = 3</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>int   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Int   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1ae92e739cb659c9691b662c015972a7f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateNonlinearSampleCountAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateNonlinearSampleCountAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_motion_a_p_i_1adf99855f7e95e93eea32dcf05205cc54" kindref="member">GetNonlinearSampleCountAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a79391cff60f848f1e429178d48465046" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API float</type>
        <definition>USDGEOM_API float ComputeVelocityScale</definition>
        <argsstring>(UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>ComputeVelocityScale</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000079"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para>Compute the inherited value of <emphasis>velocityScale</emphasis> at <computeroutput>time</computeroutput>, i.e. the authored value on the prim closest to this prim in namespace, resolved upwards through its ancestors in namespace.</para>
<para><simplesect kind="return"><para>the inherited value, or 1.0 if neither the prim nor any of its ancestors possesses an authored value.</para>
</simplesect>
<simplesect kind="note"><para>this is a reference implementation that is not particularly efficient if evaluating over many prims, because it does not share inherited results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1af7179fbf425bf2cb6a01b9fd414d0d81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API int</type>
        <definition>USDGEOM_API int ComputeNonlinearSampleCount</definition>
        <argsstring>(UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>ComputeNonlinearSampleCount</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Compute the inherited value of <emphasis>nonlinearSampleCount</emphasis> at <computeroutput>time</computeroutput>, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>the authored value on the prim closest to this prim in namespace, resolved upwards through its ancestors in namespace.</para>
<para><simplesect kind="return"><para>the inherited value, or 3 if neither the prim nor any of its ancestors possesses an authored value.</para>
</simplesect>
<simplesect kind="note"><para>this is a reference implementation that is not particularly efficient if evaluating over many prims, because it does not share inherited results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a35c388f36953b1f1724a9843ed493b16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API float</type>
        <definition>USDGEOM_API float ComputeMotionBlurScale</definition>
        <argsstring>(UsdTimeCode time=UsdTimeCode::Default()) const</argsstring>
        <name>ComputeMotionBlurScale</name>
        <param>
          <type><ref refid="class_usd_time_code" kindref="compound">UsdTimeCode</ref></type>
          <declname>time</declname>
          <defval><ref refid="class_usd_time_code_1a8a2192045dc22e90fe08ef2d8d68f3b8" kindref="member">UsdTimeCode::Default</ref>()</defval>
        </param>
        <briefdescription>
<para>Compute the inherited value of <emphasis>motion:blurScale</emphasis> at <computeroutput>time</computeroutput>, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>the authored value on the prim closest to this prim in namespace, resolved upwards through its ancestors in namespace.</para>
<para><simplesect kind="return"><para>the inherited value, or 1.0 if neither the prim nor any of its ancestors possesses an authored value.</para>
</simplesect>
<simplesect kind="note"><para>this is a reference implementation that is not particularly efficient if evaluating over many prims, because it does not share inherited results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="341" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a1d02869d6c2e6548912917c2654b570d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref></type>
        <definition>static USDGEOM_API UsdGeomMotionAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomMotionAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a5282a74a6b9a05373d5c3e3e193eefa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a0b564af5bf7916cbfef20787ce1fc80b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref></type>
        <definition>static USDGEOM_API UsdGeomMotionAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;MotionAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_motion_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/motionAPI.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_geom_motion_a_p_i" kindref="compound">UsdGeomMotionAPI</ref> encodes data that can live on any prim that may affect computations involving: </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>computed motion for motion blur</para>
</listitem><listitem><para>sampling for motion blur</para>
</listitem></itemizedlist>
</para>
<para>The <ref refid="class_usd_geom_motion_a_p_i_1acc8125985dd6550c18817609db40584b" kindref="member">motion:blurScale</ref> attribute allows artists to scale the <bold>amount</bold> of motion blur to be rendered for parts of the scene without changing the recorded animation. See <ref refid="usd_geom_page_front_1UsdGeomMotionAPI_blurScale" kindref="member">Effectively Applying motion:blurScale</ref> for use and implementation details. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6358">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6356">
        <label>UsdGeomMotionAPI</label>
        <link refid="class_usd_geom_motion_a_p_i"/>
        <childnode refid="6357" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6357">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6358" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6361">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6359">
        <label>UsdGeomMotionAPI</label>
        <link refid="class_usd_geom_motion_a_p_i"/>
        <childnode refid="6360" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6360">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6361" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/motionAPI.h" line="68" column="1" bodyfile="pxr/usd/usdGeom/motionAPI.h" bodystart="67" bodyend="344"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a0b564af5bf7916cbfef20787ce1fc80b" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>Apply</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a5282a74a6b9a05373d5c3e3e193eefa1" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a35c388f36953b1f1724a9843ed493b16" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>ComputeMotionBlurScale</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1af7179fbf425bf2cb6a01b9fd414d0d81" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>ComputeNonlinearSampleCount</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a79391cff60f848f1e429178d48465046" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>ComputeVelocityScale</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1af68a0b24b1f6e757498595d327d7c076" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>CreateMotionBlurScaleAttr</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1ae92e739cb659c9691b662c015972a7f2" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>CreateNonlinearSampleCountAttr</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1ad4fcd42d1382ab844bc43cbc32f2597b" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>CreateVelocityScaleAttr</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a1d02869d6c2e6548912917c2654b570d" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>Get</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1acc8125985dd6550c18817609db40584b" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetMotionBlurScaleAttr</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1adf99855f7e95e93eea32dcf05205cc54" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetNonlinearSampleCountAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a88b5796ba185af1ed7d2f0d8eccd1cf7" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>GetVelocityScaleAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1abbb012d6c524c861ce19d4189c8116d0" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdGeomMotionAPI</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1af19c2bfe2f88211f08342bc7fdcacedd" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdGeomMotionAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomMotionAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdGeomMotionAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_motion_a_p_i_1ac1d13c34e3f488db8ff5d6cae22826a2" prot="public" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>~UsdGeomMotionAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomMotionAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
