<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_collection_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdCollectionAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="collection_a_p_i_8h" local="no">collectionAPI.h</includes>
      <sectiondef kind="user-defined">
      <header>Collection Authoring API</header>
      <description><para><anchor id="class_usd_collection_a_p_i_1UsdCollectionAPI_AuthoringAPI"/></para>
<para>Convenience API for adding or removing prims and properties to (or from) a collection.. </para>
</description>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a1fd5b069ed2724361b25697ba4f0df77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool IncludePath</definition>
        <argsstring>(const SdfPath &amp;pathToInclude) const</argsstring>
        <name>IncludePath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>pathToInclude</declname>
        </param>
        <briefdescription>
<para>Includes or adds the given path, <computeroutput>pathToInclude</computeroutput> in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para>This does nothing if the path is already included in the collection.</para>
<para>This does not modify the expansion-rule of the collection. Hence, if the expansionRule is <emphasis>expandPrims</emphasis> or <emphasis>expandPrimsAndProperties</emphasis>, then the descendants of <computeroutput>pathToInclude</computeroutput> will be also included in the collection unless explicitly excluded.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_collection_a_p_i_1ab253c00d8abab9573c2068d51cf16dc6" kindref="member">UsdCollectionAPI::ExcludePath()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ab253c00d8abab9573c2068d51cf16dc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ExcludePath</definition>
        <argsstring>(const SdfPath &amp;pathToExclude) const</argsstring>
        <name>ExcludePath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>pathToExclude</declname>
        </param>
        <briefdescription>
<para>Excludes or removes the given path, <computeroutput>pathToExclude</computeroutput> from the collection. </para>
        </briefdescription>
        <detaileddescription>
<para>If the collection is empty, the collection becomes one that includes all paths except the givne path. Otherwise, this does nothing if the path is not included in the collection.</para>
<para>This does not modify the expansion-rule of the collection. Hence, if the expansionRule is <emphasis>expandPrims</emphasis> or <emphasis>expandPrimsAndProperties</emphasis>, then the descendants of <computeroutput>pathToExclude</computeroutput> will also be excluded from the collection, unless explicitly included.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_collection_a_p_i_1a1fd5b069ed2724361b25697ba4f0df77" kindref="member">UsdCollectionAPI::IncludePath()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="612" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_usd_collection_a_p_i_1adc0f2249e3d96d538de1e3f1edeadaa9" prot="public" static="no">
        <type><ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref></type>
        <definition>using MembershipQuery =  UsdCollectionMembershipQuery</definition>
        <argsstring></argsstring>
        <name>MembershipQuery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="532" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_collection_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741a96af997eb3f5d95e044c45ca0a03faab" kindref="member">UsdSchemaKind::MultipleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="165" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_collection_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="311" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a09d5ea36fa27bf2cee267962e3b1e25f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdCollectionAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim(), const TfToken &amp;name=TfToken())</argsstring>
        <name>UsdCollectionAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> with name <computeroutput>name</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_collection_a_p_i_1a90ac7ac6c01b9d8bae8325119f621275" kindref="member">UsdCollectionAPI::Get</ref>( prim.GetStage(), prim.GetPath().AppendProperty( &quot;collection:name&quot;));</para>
<para>for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="176" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a4b4d524e07863da125003747463b798f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdCollectionAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj, const TfToken &amp;name)</argsstring>
        <name>UsdCollectionAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> with name <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref>(schemaObj.GetPrim(), name), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="185" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aa513bda678c7a5a24568dc417a773d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USD_API</type>
        <definition>virtual USD_API ~UsdCollectionAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdCollectionAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a381954a046cc6a7593835974f1f76b53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Returns the name of this multiple-apply schema instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="211" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aae2a459d5d05bd2d2b4dd3c2d54c83fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetExpansionRuleAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetExpansionRuleAttr</name>
        <briefdescription>
<para>Specifies how the paths that are included in the collection must be expanded to determine its members. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token expansionRule = &quot;expandPrims&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_2tokens_8h_1a0daf74f18bc410df45d3479074dd0b1f" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>explicitOnly, expandPrims, expandPrimsAndProperties   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a472f33804287ec5ac1e46838762d868d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateExpansionRuleAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateExpansionRuleAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1aae2a459d5d05bd2d2b4dd3c2d54c83fd" kindref="member">GetExpansionRuleAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a775b96084922f08c4d8b5f943b1fc94e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetIncludeRootAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetIncludeRootAttr</name>
        <briefdescription>
<para>Boolean attribute indicating whether the pseudo-root path &lt;/&gt; should be counted as one of the included target paths. </para>
        </briefdescription>
        <detaileddescription>
<para>The fallback is false. This separate attribute is required because relationships cannot directly target the root.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform bool includeRoot</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Bool   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ae60554748643af936041492cecab0071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateIncludeRootAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateIncludeRootAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1a775b96084922f08c4d8b5f943b1fc94e" kindref="member">GetIncludeRootAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a17e3955ec8714d1d11899340ddd2c456" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetMembershipExpressionAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetMembershipExpressionAttr</name>
        <briefdescription>
<para>Specifies a path expression that determines membership in this collection. </para>
        </briefdescription>
        <detaileddescription>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform pathExpression membershipExpression</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;PathExpression   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a9f416763b43fda9a0c3a21eae97255ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateMembershipExpressionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateMembershipExpressionAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1a17e3955ec8714d1d11899340ddd2c456" kindref="member">GetMembershipExpressionAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a4893a5516d69e1db350ba8b748ccb156" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute GetCollectionAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetCollectionAttr</name>
        <briefdescription>
<para>This property represents the collection for the purpose of allowing another collection to include it. </para>
        </briefdescription>
        <detaileddescription>
<para>When this property is targeted by another collection&apos;s <emphasis>includes</emphasis> relationship, the rules of this collection will be inserted into the rules of the collection that includes it.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform opaque __INSTANCE_NAME__</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_opaque_value" kindref="compound">SdfOpaqueValue</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Opaque   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a728a40011ea3cbf35715446dc18072dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USD_API UsdAttribute CreateCollectionAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateCollectionAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1a4893a5516d69e1db350ba8b748ccb156" kindref="member">GetCollectionAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ae1c5ecbdf5f1c5ffd90917d9e5755019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship GetIncludesRel</definition>
        <argsstring>() const</argsstring>
        <name>GetIncludesRel</name>
        <briefdescription>
<para>Specifies a list of targets that are included in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para>This can target prims or properties directly. A collection can insert the rules of another collection by making its <emphasis>includes</emphasis> relationship target the <bold>collection:{collectionName}</bold> property on the owning prim of the collection to be included </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship CreateIncludesRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateIncludesRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1ae1c5ecbdf5f1c5ffd90917d9e5755019" kindref="member">GetIncludesRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a9ae603622ee38d8db1e5578ccc302401" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship GetExcludesRel</definition>
        <argsstring>() const</argsstring>
        <name>GetExcludesRel</name>
        <briefdescription>
<para>Specifies a list of targets that are excluded below the included paths in this collection. </para>
        </briefdescription>
        <detaileddescription>
<para>This can target prims or properties directly, but cannot target another collection. This is to keep the membership determining logic simple, efficient and easier to reason about. Finally, it is invalid for a collection to exclude paths that are not included in it. The presence of such &quot;orphaned&quot; excluded paths will not affect the set of paths included in the collection, but may affect the performance of querying membership of a path in the collection (see UsdCollectionAPI::MembershipQuery::IsPathIncluded) or of enumerating the objects belonging to the collection (see UsdCollectionAPI::GetIncludedObjects). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a0b7beba593297cfacd7d2ac8a42dc8e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_relationship" kindref="compound">UsdRelationship</ref></type>
        <definition>USD_API UsdRelationship CreateExcludesRel</definition>
        <argsstring>() const</argsstring>
        <name>CreateExcludesRel</name>
        <briefdescription>
<para>See <ref refid="class_usd_collection_a_p_i_1a9ae603622ee38d8db1e5578ccc302401" kindref="member">GetExcludesRel()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>USD_API SdfPath GetCollectionPath</definition>
        <argsstring>() const</argsstring>
        <name>GetCollectionPath</name>
        <briefdescription>
<para>Returns the canonical path that represents this collection. </para>
        </briefdescription>
        <detaileddescription>
<para>This points to the property named &quot;collection:{collectionName}&quot; on the prim defining the collection. This is the path to be used to &quot;include&quot; this collection in another collection.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_collection_a_p_i_1a4893a5516d69e1db350ba8b748ccb156" kindref="member">GetCollectionAttr()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a7a6c1723bc9e6b502c2bd60a9360dd9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
        <definition>USD_API SdfPathExpression ResolveCompleteMembershipExpression</definition>
        <argsstring>() const</argsstring>
        <name>ResolveCompleteMembershipExpression</name>
        <briefdescription>
<para>Obtain a complete <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref> from this collection&apos;s membershipExpression. </para>
        </briefdescription>
        <detaileddescription>
<para>First, <ref refid="class_usd_attribute_1a9d41bc223be86408ba7d7f74df7c35a9" kindref="member">UsdAttribute::Get()</ref> the value of <ref refid="class_usd_collection_a_p_i_1a17e3955ec8714d1d11899340ddd2c456" kindref="member">GetMembershipExpressionAttr()</ref>, then resolve any contained references. Replace any remaining &quot;weaker&quot; references (_) with SdfPathExpression::Nothing(). Replace other references by recursively resolving the expressions from the collections on the referenced prims. If no such prims or no such collections exist, replace those references with SdfPathExpression::Nothing() as well. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aaa006b4fa2999cd240b78ce53b897ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref></type>
        <definition>USD_API UsdCollectionMembershipQuery ComputeMembershipQuery</definition>
        <argsstring>() const</argsstring>
        <name>ComputeMembershipQuery</name>
        <briefdescription>
<para>Computes and returns a <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> object which can be used to query inclusion or exclusion of paths in the collection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ade5fa1eae06daabb81586963ed48ebd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API void</type>
        <definition>USD_API void ComputeMembershipQuery</definition>
        <argsstring>(UsdCollectionMembershipQuery *query) const</argsstring>
        <name>ComputeMembershipQuery</name>
        <param>
          <type><ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> *</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Populates the <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> object with data from this collection, so it can be used to query inclusion or exclusion of paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1af0f2c7b9e95cda5de677f0ec86677f40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasNoIncludedPaths</definition>
        <argsstring>() const</argsstring>
        <name>HasNoIncludedPaths</name>
        <briefdescription>
<para>Returns true if the collection has nothing included in it. </para>
        </briefdescription>
        <detaileddescription>
<para>This requires both that the includes relationship have no target paths, and that the includeRoot attribute be false. Note that there may be cases where the collection has no objects included in it even when <ref refid="class_usd_collection_a_p_i_1af0f2c7b9e95cda5de677f0ec86677f40" kindref="member">HasNoIncludedPaths()</ref> returns false. For example, if the included objects are unloaded or if the included objects are also excluded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a93cc9cc8eaccb56b8524b005843240f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool Validate</definition>
        <argsstring>(std::string *reason) const</argsstring>
        <name>Validate</name>
        <param>
          <type>std::string *</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Validates the collection by checking the following rules: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>a collection&apos;s expansionRule should be one of &quot;explicitOnly&quot;, &quot;expandPrims&quot; or &quot;expandPrimsAndProperties&quot;.</para>
</listitem><listitem><para>a collection should not have have a circular dependency on another collection.</para>
</listitem><listitem><para>a collection should not have both includes and excludes among its top-level rules </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a084ca98228eb3c55465fe8d7701f4146" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool ResetCollection</definition>
        <argsstring>() const</argsstring>
        <name>ResetCollection</name>
        <briefdescription>
<para>Resets the collection by clearing both the includes and excludes targets of the collection in the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This does not modify the &quot;includeRoot&quot; attribute which is used to include or exclude everything (i.e. the pseudoRoot) in the USD stage. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a0d22e8d92ba01d357e1e1aa7f1073e42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool BlockCollection</definition>
        <argsstring>() const</argsstring>
        <name>BlockCollection</name>
        <briefdescription>
<para>Blocks the targets of the includes and excludes relationships of the collection, making it &lt;* <emphasis>empty</emphasis> if &quot;includeRoot&quot; is false (or unset) or. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><emphasis>include everything</emphasis> if &quot;includeRoot&quot; is true. (assuming there are no opinions in stronger edit targets). </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="640" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USD_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ae46aa5a479ea4f86b2e476d4f1274cd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref></type>
        <definition>static USD_API TfTokenVector GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited, const TfToken &amp;instanceName)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>instanceName</declname>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes for a given instance name. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. The names returned will have the proper namespace prefix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a90ac7ac6c01b9d8bae8325119f621275" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>static USD_API UsdCollectionAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. <computeroutput>path</computeroutput> must be of the format &lt;path&gt;.collection:name .</para>
<para>This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">TfToken<sp/>name<sp/>=<sp/>SdfPath::StripNamespace(path.GetToken());</highlight></codeline>
<codeline><highlight class="normal">UsdCollectionAPI(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stage-&gt;GetPrimAtPath(path.GetPrimPath()),<sp/>name);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a3bcf2ded29a2d0fd7b1e0ef2d0175f22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>static USD_API UsdCollectionAPI Get</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> with name <computeroutput>name</computeroutput> holding the prim <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Shorthand for <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI(prim, name)</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a8f00f98c5b4a5c502327d2eadcbc777a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> &gt;</type>
        <definition>static USD_API std::vector&lt;UsdCollectionAPI&gt; GetAll</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>GetAll</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Return a vector of all named instances of <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> on the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a3f2aa916f784cf6cf2410f1bbc7f37ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool IsSchemaPropertyBaseName</definition>
        <argsstring>(const TfToken &amp;baseName)</argsstring>
        <name>IsSchemaPropertyBaseName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseName</declname>
        </param>
        <briefdescription>
<para>Checks if the given name <computeroutput>baseName</computeroutput> is the base name of a property of CollectionAPI. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a897050bc40248846610a300ca4dc8808" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool IsCollectionAPIPath</definition>
        <argsstring>(const SdfPath &amp;path, TfToken *name)</argsstring>
        <name>IsCollectionAPIPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Checks if the given path <computeroutput>path</computeroutput> is of an API schema of type CollectionAPI. </para>
        </briefdescription>
        <detaileddescription>
<para>If so, it stores the instance name of the schema in <computeroutput>name</computeroutput> and returns true. Otherwise, it returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ac89a4769142d1a5e371a72d98db67aff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>multiple-apply</bold> API schema can be applied, with the given instance name, <computeroutput>name</computeroutput>, to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>static USD_API UsdCollectionAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>multiple-apply</bold> API schema to the given <computeroutput>prim</computeroutput> along with the given instance name, <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;CollectionAPI:&lt;i&gt;name&lt;/i&gt;&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim. For example, if <computeroutput>name</computeroutput> is &apos;instance1&apos;, the token &apos;CollectionAPI:instance1&apos; is added to &apos;apiSchemas&apos;.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a5c7435a846a6a7d08017098c0b4b10ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>static USD_API UsdCollectionAPI GetCollection</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;collectionPath)</argsstring>
        <name>GetCollection</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>collectionPath</declname>
        </param>
        <briefdescription>
<para>Returns the collection represented by the given collection path, <computeroutput>collectionPath</computeroutput> on the given USD stage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aa68296cd1ccf9c3a20a13f8b6ed7ee89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref></type>
        <definition>static USD_API UsdCollectionAPI GetCollection</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;name)</argsstring>
        <name>GetCollection</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the schema object representing a collection named <computeroutput>name</computeroutput> on the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a308134b6add2487b6349296613b077b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; <ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref> &gt;</type>
        <definition>static USD_API std::vector&lt;UsdCollectionAPI&gt; GetAllCollections</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>GetAllCollections</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Returns all the named collections on the given USD prim. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000065"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use GetAll(prim) instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1aa33f2918aeda332e0645e4cb469b2a87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>static USD_API SdfPath GetNamedCollectionPath</definition>
        <argsstring>(const UsdPrim &amp;prim, const TfToken &amp;collectionName)</argsstring>
        <name>GetNamedCollectionPath</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>collectionName</declname>
        </param>
        <briefdescription>
<para>Returns the canonical path to the collection named, <computeroutput>name</computeroutput> on the given prim, <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" kindref="member">GetCollectionPath()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a5e55e29431ada0cb83aa65d7390a4de4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
        <definition>static USD_API SdfPathExpression ResolveCompleteMembershipExpression</definition>
        <argsstring>(SdfPathExpression pathExpr, UsdPrim const &amp;prim)</argsstring>
        <name>ResolveCompleteMembershipExpression</name>
        <param>
          <type><ref refid="class_sdf_path_expression" kindref="compound">SdfPathExpression</ref></type>
          <declname>pathExpr</declname>
        </param>
        <param>
          <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> const &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a9f38cd94563697384bf8daf94bf86538" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::set&lt; <ref refid="class_usd_object" kindref="compound">UsdObject</ref> &gt;</type>
        <definition>static USD_API std::set&lt;UsdObject&gt; ComputeIncludedObjects</definition>
        <argsstring>(const UsdCollectionMembershipQuery &amp;query, const UsdStageWeakPtr &amp;stage, const Usd_PrimFlagsPredicate &amp;pred=UsdPrimDefaultPredicate)</argsstring>
        <name>ComputeIncludedObjects</name>
        <param>
          <type>const <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const UsdStageWeakPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>pred</declname>
          <defval><ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref></defval>
        </param>
        <briefdescription>
<para>Returns all the usd objects that satisfy the predicate, <computeroutput>pred</computeroutput> in the collection represented by the <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> object, <computeroutput>query</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The results depends on the load state of the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>, <computeroutput>stage</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1ad2ab3b250581a4863a943639c3a3ddc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API SdfPathSet</type>
        <definition>static USD_API SdfPathSet ComputeIncludedPaths</definition>
        <argsstring>(const UsdCollectionMembershipQuery &amp;query, const UsdStageWeakPtr &amp;stage, const Usd_PrimFlagsPredicate &amp;pred=UsdPrimDefaultPredicate)</argsstring>
        <name>ComputeIncludedPaths</name>
        <param>
          <type>const <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const UsdStageWeakPtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const Usd_PrimFlagsPredicate &amp;</type>
          <declname>pred</declname>
          <defval><ref refid="prim_flags_8h_1a29cc22af3e47af74a71814d9cca1c1fe" kindref="member">UsdPrimDefaultPredicate</ref></defval>
        </param>
        <briefdescription>
<para>Returns all the paths that satisfy the predicate, <computeroutput>pred</computeroutput> in the collection represented by the <ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> object, <computeroutput>query</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The result depends on the load state of the <ref refid="class_usd_stage" kindref="compound">UsdStage</ref>, <computeroutput>stage</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1adb037755237a9af3e8e7d3a31c1ca51e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>static USD_API bool CanContainPropertyName</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>CanContainPropertyName</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Test whether a given <computeroutput>name</computeroutput> contains the &quot;collection:&quot; prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="645" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USD_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="307" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USD_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="315" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USD_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USD_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_collection_a_p_i_1a3f5c58f32169be323fde25bc6fd139c2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _ComputeMembershipQueryImpl</definition>
        <argsstring>(UsdCollectionMembershipQuery *query, const SdfPathSet &amp;chainedCollectionPaths, bool *foundCircularDependency=nullptr) const</argsstring>
        <name>_ComputeMembershipQueryImpl</name>
        <param>
          <type><ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionMembershipQuery</ref> *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const SdfPathSet &amp;</type>
          <declname>chainedCollectionPaths</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>foundCircularDependency</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/collectionAPI.h" line="659" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is a general purpose API schema, used to describe a collection of heterogeneous objects within the scene. </para>
    </briefdescription>
    <detaileddescription>
<para>&quot;Objects&quot; here may be prims or properties belonging to prims or other collections. It&apos;s an add-on schema that can be applied many times to a prim with different collection names.</para>
<para>A collection allows an enumeration of a set of paths to include and a set of paths to exclude. Whether the descendants of an included path are members of a collection are decided by its expansion rule (see below). If the collection excludes paths that are not descendents of included paths, the collection implicitly includes the root path &lt;/&gt;. If such a collection also includes paths that are not descendants of the excluded paths, it is considered invalid, since the intention is ambiguous.</para>
<para>All the properties authored by the schema are namespaced under &quot;collection:&quot;. The given name of the collection provides additional namespacing for the various per-collection properties, which include the following:</para>
<para><itemizedlist>
<listitem>
<para><bold>uniform token collection:<emphasis>collectionName</emphasis>:expansionRule</bold> - specified how the paths that are included in the collection must be expanded to determine its members. Possible values include: <itemizedlist>
<listitem>
<para><bold>explicitOnly</bold> - only paths in the includes rel targets and not in the excludes rel targets belong to the collection.  </para>
</listitem>
<listitem>
<para><bold>expandPrims</bold> - all the prims at or below the includes rel- targets (and not under the excludes rel-targets) belong to the collection. Any property paths included in the collection would, of course, also be honored. This is the default behavior as it satisfies most use cases.  </para>
</listitem>
<listitem>
<para><bold>expandPrimsAndProperties</bold> - like expandPrims, but also includes all properties on all matched prims. We&apos;re still not quite sure what the use cases are for this, but you can use it to capture a whole lot of UsdObjects very concisely.  </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para><bold>bool collection:<emphasis>collectionName</emphasis>:includeRoot</bold> - boolean attribute indicating whether the pseudo-root path &lt;/&gt; should be counted as one of the included target paths. The fallback is false. This separate attribute is required because relationships cannot directly target the root. When expansionRule is explicitOnly, this attribute is ignored. </para>
</listitem>
<listitem>
<para><bold>rel collection:<emphasis>collectionName</emphasis>:includes</bold> - specifies a list of targets that are included in the collection. This can target prims or properties directly. A collection can insert the rules of another collection by making its <emphasis>includes</emphasis> relationship target the <bold>collection:{collectionName}</bold> property on the owning prim of the collection to be included (see <ref refid="class_usd_collection_a_p_i_1a4893a5516d69e1db350ba8b748ccb156" kindref="member">UsdCollectionAPI::GetCollectionAttr</ref>). It is important to note that including another collection does not guarantee the contents of that collection will be in the final collection; instead, the rules are merged. This means, for example, an exclude entry may exclude a portion of the included collection. When a collection includes one or more collections, the order in which targets are added to the includes relationship may become significant, if there are conflicting opinions about the same path. Targets that are added later are considered to be stronger than earlier targets for the same path.  </para>
</listitem>
<listitem>
<para><bold>rel collection:<emphasis>collectionName</emphasis>:excludes</bold> - specifies a list of targets that are excluded below the <bold>included</bold> paths in this collection. This can target prims or properties directly, but <bold>cannot target another collection</bold>. This is to keep the membership determining logic simple, efficient and easier to reason about. Finally, it is invalid for a collection to exclude paths that are not included in it. The presence of such &quot;orphaned&quot; excluded paths will not affect the set of paths included in the collection, but may affect the performance of querying membership of a path in the collection (see UsdCollectionAPI::MembershipQuery::IsPathIncluded) or of enumerating the objects belonging to the collection (see UsdCollectionAPI::GetIncludedObjects).  </para>
</listitem>
<listitem>
<para><bold>uniform opaque collection:<emphasis>collectionName</emphasis></bold> - opaque attribute (meaning it can never have a value) that represents the collection for the purpose of allowing another collection to include it. When this property is targeted by another collection&apos;s <emphasis>includes</emphasis> relationship, the rules of this collection will be inserted into the rules of the collection that includes it. </para>
</listitem>
</itemizedlist>
</para>
<para><bold>Implicit inclusion</bold></para>
<para>In some scenarios it is useful to express a collection that includes everything except certain paths. To support this, a collection that has an exclude that is not a descendent of any include will include the root path &lt;/&gt;.</para>
<para><bold>Creating collections in C++</bold></para>
<para><programlisting filename="examples_usd.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ApplyCollections(<ref refid="class_usd_prim" kindref="compound">UsdPrim</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;prim)</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assuming<sp/>the<sp/>folling<sp/>prim<sp/>hierarchy:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|-<sp/>Vehicles<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>FourWheelers</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>CarA</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>CarB</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>CarC</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>CarD</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>TruckA</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>TruckB</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>TwoWheelers</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>BikeA</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>BikeB</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>BicycleA</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-<sp/>FrontWheel</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-<sp/>BackWheel</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>Other</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|-<sp/>TricycleA</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-<sp/>FrontWheel</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|-<sp/>BackWheels</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>collection<sp/>that<sp/>includes<sp/>only<sp/>the<sp/>cars,<sp/>by<sp/>adding<sp/>all<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>&quot;FourWheelers&quot;<sp/>and<sp/>excluding<sp/>the<sp/>trucks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref><sp/>cars<sp/>=<sp/><ref refid="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" kindref="member">UsdCollectionAPI::Apply</ref>(prim,<sp/></highlight><highlight class="stringliteral">&quot;cars&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cars.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cars.<ref refid="class_usd_collection_a_p_i_1a0b7beba593297cfacd7d2ac8a42dc8e4" kindref="member">CreateExcludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/TruckA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cars.<ref refid="class_usd_collection_a_p_i_1a0b7beba593297cfacd7d2ac8a42dc8e4" kindref="member">CreateExcludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/TruckB&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>collection<sp/>that<sp/>includes<sp/>only<sp/>the<sp/>bikes<sp/>by<sp/>explicitly<sp/>inluding<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>the<sp/>two<sp/>bikes<sp/>in<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref><sp/>bikes<sp/>=<sp/><ref refid="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" kindref="member">UsdCollectionAPI::Apply</ref>(prim,<sp/></highlight><highlight class="stringliteral">&quot;bikes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bikes.<ref refid="class_usd_collection_a_p_i_1a472f33804287ec5ac1e46838762d868d" kindref="member">CreateExpansionRuleAttr</ref>(<ref refid="class_vt_value" kindref="compound">VtValue</ref>(<ref refid="usd_2usd_2tokens_8h_1a0daf74f18bc410df45d3479074dd0b1f" kindref="member">UsdTokens</ref>-&gt;explicitOnly));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bikes.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BikeA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bikes.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BikeB&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>explicit<sp/>collection<sp/>of<sp/>slow-moving<sp/>vehicles.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>explicit<sp/>collection<sp/>implies<sp/>that<sp/>descendants<sp/>(i.e.<sp/>the<sp/>front<sp/>and<sp/>back<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wheels)<sp/>are<sp/>not<sp/>considered<sp/>to<sp/>be<sp/>included<sp/>in<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref><sp/>slowVehicles<sp/>=<sp/><ref refid="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" kindref="member">UsdCollectionAPI::Apply</ref>(prim,<sp/></highlight><highlight class="stringliteral">&quot;slowVehicles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowVehicles.<ref refid="class_usd_collection_a_p_i_1a472f33804287ec5ac1e46838762d868d" kindref="member">CreateExpansionRuleAttr</ref>(<ref refid="class_vt_value" kindref="compound">VtValue</ref>(<ref refid="usd_2usd_2tokens_8h_1a0daf74f18bc410df45d3479074dd0b1f" kindref="member">UsdTokens</ref>-&gt;explicitOnly));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowVehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BicycleA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>slowVehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/Other/TricycleA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i" kindref="compound">UsdCollectionAPI</ref><sp/>vehicles<sp/>=<sp/><ref refid="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" kindref="member">UsdCollectionAPI::Apply</ref>(prim,<sp/></highlight><highlight class="stringliteral">&quot;vehicles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(cars.<ref refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" kindref="member">GetCollectionPath</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(bikes.<ref refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" kindref="member">GetCollectionPath</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(slowVehicles.<ref refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" kindref="member">GetCollectionPath</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/TruckA&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" kindref="member">CreateIncludesRel</ref>().<ref refid="class_usd_relationship_1a0db3d68820f130f08152592b0fe10b00" kindref="member">AddTarget</ref>(<ref refid="class_sdf_path" kindref="compound">SdfPath</ref>(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/TruckB&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_membership_query" kindref="compound">UsdCollectionAPI::MembershipQuery</ref><sp/>query<sp/>=<sp/>vehicles.<ref refid="class_usd_collection_a_p_i_1aaa006b4fa2999cd240b78ce53b897ce7" kindref="member">ComputeMembershipQuery</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CarA<sp/>is<sp/>included<sp/>in<sp/>the<sp/>&apos;vehicles&apos;<sp/>collection<sp/>through<sp/>the<sp/>&apos;cars&apos;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/CarA&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BikeB<sp/>is<sp/>included<sp/>in<sp/>the<sp/>&apos;vehicles&apos;<sp/>collection<sp/>through<sp/>the<sp/>&apos;cars&apos;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BikeB&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BikeB<sp/>is<sp/>included<sp/>directly<sp/>in<sp/>the<sp/>&apos;vehicles&apos;<sp/>collection<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/FourWheelers/TruckA&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BicycleA<sp/>is<sp/>included,<sp/>but<sp/>it&apos;s<sp/>descendants<sp/>are<sp/>not,<sp/>since<sp/>it<sp/>is<sp/>part<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>&quot;explicitOnly&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BicycleA&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(!query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/TwoWheelers/BicycleA/FrontWheel&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TricycleA<sp/>is<sp/>included,<sp/>but<sp/>it&apos;s<sp/>descendants<sp/>are<sp/>not,<sp/>since<sp/>it<sp/>is<sp/>part<sp/>of<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>&quot;explicitOnly&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/Other/TricycleA&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga12db62e70113a37341a127f0e0ec9ac4" kindref="member">TF_AXIOM</ref>(!query.IsPathIncluded(</highlight><highlight class="stringliteral">&quot;/Vehicles/Other/TricycleA/BackWheels&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SdfPathSet<sp/>includedPaths;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i_1ad2ab3b250581a4863a943639c3a3ddc1" kindref="member">UsdCollectionAPI::ComputeIncludedPaths</ref>(query,<sp/>prim.<ref refid="class_usd_object_1acbf11fd10a72dbc827b2f3738d2edfde" kindref="member">GetStage</ref>(),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;includedPaths);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;UsdObject&gt;<sp/>includedObjects;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_usd_collection_a_p_i_1a9f38cd94563697384bf8daf94bf86538" kindref="member">UsdCollectionAPI::ComputeIncludedObjects</ref>(query,<sp/>prim.<ref refid="class_usd_object_1acbf11fd10a72dbc827b2f3738d2edfde" kindref="member">GetStage</ref>(),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;includedObjects);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting></para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_2tokens_8h_1a0daf74f18bc410df45d3479074dd0b1f" kindref="member">UsdTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6033">
        <label>UsdCollectionAPI</label>
        <link refid="class_usd_collection_a_p_i"/>
        <childnode refid="6034" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6035">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6034">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6035" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6036">
        <label>UsdCollectionAPI</label>
        <link refid="class_usd_collection_a_p_i"/>
        <childnode refid="6037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6038">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6037">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6038" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usd/collectionAPI.h" line="160" column="1" bodyfile="pxr/usd/usd/collectionAPI.h" bodystart="159" bodyend="663"/>
    <listofallmembers>
      <member refid="class_usd_collection_a_p_i_1a3f5c58f32169be323fde25bc6fd139c2" prot="private" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_ComputeMembershipQueryImpl</name></member>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_collection_a_p_i_1a408aa7d080a2672e88403126cc197095" prot="protected" virt="virtual"><scope>UsdCollectionAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdCollectionAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_collection_a_p_i_1a86866fae65e3b935e7bd24b845c8e37e" prot="private" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_collection_a_p_i_1a6f7a3688b0129a59c6e70e925d7ac732" prot="private" virt="virtual"><scope>UsdCollectionAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdCollectionAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_collection_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_collection_a_p_i_1a4c9c1226d01a049864cc0d437900c458" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>Apply</name></member>
      <member refid="class_usd_collection_a_p_i_1a0d22e8d92ba01d357e1e1aa7f1073e42" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>BlockCollection</name></member>
      <member refid="class_usd_collection_a_p_i_1ac89a4769142d1a5e371a72d98db67aff" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_collection_a_p_i_1adb037755237a9af3e8e7d3a31c1ca51e" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CanContainPropertyName</name></member>
      <member refid="class_usd_collection_a_p_i_1a9f38cd94563697384bf8daf94bf86538" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ComputeIncludedObjects</name></member>
      <member refid="class_usd_collection_a_p_i_1ad2ab3b250581a4863a943639c3a3ddc1" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ComputeIncludedPaths</name></member>
      <member refid="class_usd_collection_a_p_i_1aaa006b4fa2999cd240b78ce53b897ce7" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ComputeMembershipQuery</name></member>
      <member refid="class_usd_collection_a_p_i_1ade5fa1eae06daabb81586963ed48ebd6" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ComputeMembershipQuery</name></member>
      <member refid="class_usd_collection_a_p_i_1a728a40011ea3cbf35715446dc18072dd" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateCollectionAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1a0b7beba593297cfacd7d2ac8a42dc8e4" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateExcludesRel</name></member>
      <member refid="class_usd_collection_a_p_i_1a472f33804287ec5ac1e46838762d868d" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateExpansionRuleAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1ae60554748643af936041492cecab0071" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateIncludeRootAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1aef8910075b5867e23d7037b55b4c6171" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateIncludesRel</name></member>
      <member refid="class_usd_collection_a_p_i_1a9f416763b43fda9a0c3a21eae97255ee" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>CreateMembershipExpressionAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1ab253c00d8abab9573c2068d51cf16dc6" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ExcludePath</name></member>
      <member refid="class_usd_collection_a_p_i_1a90ac7ac6c01b9d8bae8325119f621275" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>Get</name></member>
      <member refid="class_usd_collection_a_p_i_1a3bcf2ded29a2d0fd7b1e0ef2d0175f22" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>Get</name></member>
      <member refid="class_usd_collection_a_p_i_1a8f00f98c5b4a5c502327d2eadcbc777a" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetAll</name></member>
      <member refid="class_usd_collection_a_p_i_1a308134b6add2487b6349296613b077b0" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetAllCollections</name></member>
      <member refid="class_usd_collection_a_p_i_1a5c7435a846a6a7d08017098c0b4b10ae" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetCollection</name></member>
      <member refid="class_usd_collection_a_p_i_1aa68296cd1ccf9c3a20a13f8b6ed7ee89" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetCollection</name></member>
      <member refid="class_usd_collection_a_p_i_1a4893a5516d69e1db350ba8b748ccb156" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetCollectionAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1a81c6f2b093526c327673cf07cac801d9" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetCollectionPath</name></member>
      <member refid="class_usd_collection_a_p_i_1a9ae603622ee38d8db1e5578ccc302401" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetExcludesRel</name></member>
      <member refid="class_usd_collection_a_p_i_1aae2a459d5d05bd2d2b4dd3c2d54c83fd" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetExpansionRuleAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1a775b96084922f08c4d8b5f943b1fc94e" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetIncludeRootAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1ae1c5ecbdf5f1c5ffd90917d9e5755019" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetIncludesRel</name></member>
      <member refid="class_usd_collection_a_p_i_1a17e3955ec8714d1d11899340ddd2c456" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetMembershipExpressionAttr</name></member>
      <member refid="class_usd_collection_a_p_i_1a381954a046cc6a7593835974f1f76b53" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetName</name></member>
      <member refid="class_usd_collection_a_p_i_1aa33f2918aeda332e0645e4cb469b2a87" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetNamedCollectionPath</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_collection_a_p_i_1a5988bc4012f6a54f866f883727b9ce10" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_collection_a_p_i_1ae46aa5a479ea4f86b2e476d4f1274cd6" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_collection_a_p_i_1af0f2c7b9e95cda5de677f0ec86677f40" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>HasNoIncludedPaths</name></member>
      <member refid="class_usd_collection_a_p_i_1a1fd5b069ed2724361b25697ba4f0df77" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IncludePath</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_collection_a_p_i_1a897050bc40248846610a300ca4dc8808" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsCollectionAPIPath</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_collection_a_p_i_1a3f2aa916f784cf6cf2410f1bbc7f37ed" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsSchemaPropertyBaseName</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_collection_a_p_i_1adc0f2249e3d96d538de1e3f1edeadaa9" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>MembershipQuery</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_collection_a_p_i_1a084ca98228eb3c55465fe8d7701f4146" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ResetCollection</name></member>
      <member refid="class_usd_collection_a_p_i_1a5e55e29431ada0cb83aa65d7390a4de4" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ResolveCompleteMembershipExpression</name></member>
      <member refid="class_usd_collection_a_p_i_1a7a6c1723bc9e6b502c2bd60a9360dd9c" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>ResolveCompleteMembershipExpression</name></member>
      <member refid="class_usd_collection_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_collection_a_p_i_1a09d5ea36fa27bf2cee267962e3b1e25f" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdCollectionAPI</name></member>
      <member refid="class_usd_collection_a_p_i_1a4b4d524e07863da125003747463b798f" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdCollectionAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_collection_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_collection_a_p_i_1a93cc9cc8eaccb56b8524b005843240f7" prot="public" virt="non-virtual"><scope>UsdCollectionAPI</scope><name>Validate</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdCollectionAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_collection_a_p_i_1aa513bda678c7a5a24568dc417a773d46" prot="public" virt="virtual"><scope>UsdCollectionAPI</scope><name>~UsdCollectionAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdCollectionAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
