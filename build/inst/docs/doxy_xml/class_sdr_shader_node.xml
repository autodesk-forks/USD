<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdr_shader_node" kind="class" language="C++" prot="public">
    <compoundname>SdrShaderNode</compoundname>
    <basecompoundref refid="class_ndr_node" prot="public" virt="non-virtual">NdrNode</basecompoundref>
    <includes refid="shader_node_8h" local="no">shaderNode.h</includes>
      <sectiondef kind="user-defined">
      <header>Inputs and Outputs</header>
      <description><para>An input or output is also generically referred to as a &quot;property&quot;. </para>
</description>
      <memberdef kind="function" id="class_sdr_shader_node_1a3a0e1aa68cc115e4ef6c912710c08556" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderPropertyConstPtr</type>
        <definition>SDR_API SdrShaderPropertyConstPtr GetShaderInput</definition>
        <argsstring>(const TfToken &amp;inputName) const</argsstring>
        <name>GetShaderInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>inputName</declname>
        </param>
        <briefdescription>
<para>Get a shader input property by name. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> is returned if an input with the given name does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a7165154a114a58312d1bf4ff477f44a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderPropertyConstPtr</type>
        <definition>SDR_API SdrShaderPropertyConstPtr GetShaderOutput</definition>
        <argsstring>(const TfToken &amp;outputName) const</argsstring>
        <name>GetShaderOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>outputName</declname>
        </param>
        <briefdescription>
<para>Get a shader output property by name. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> is returned if an output with the given name does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a3d832d418c8d2cfe6f8bef4bb1503e07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrTokenVec</type>
        <definition>SDR_API NdrTokenVec GetAssetIdentifierInputNames</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetIdentifierInputNames</name>
        <briefdescription>
<para>Returns the list of all inputs that are tagged as asset identifier inputs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1accac64ba2093b4b6d648a8c5fc3b410d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API SdrShaderPropertyConstPtr</type>
        <definition>SDR_API SdrShaderPropertyConstPtr GetDefaultInput</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultInput</name>
        <briefdescription>
<para>Returns the first shader input that is tagged as the default input. </para>
        </briefdescription>
        <detaileddescription>
<para>A default input and its value can be used to acquire a fallback value for a node when the node is considered &apos;disabled&apos; or otherwise incapable of producing an output value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="125" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Metadata</header>
      <description><para>The metadata returned here is a direct result of what the parser plugin is able to determine about the node.</para>
<para>See the documentation for a specific parser plugin to get help on what the parser is looking for to populate these values. </para>
</description>
      <memberdef kind="function" id="class_sdr_shader_node_1a6ca56a54d82eb3e7c63c0e90b5a6a7eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetLabel</definition>
        <argsstring>() const</argsstring>
        <name>GetLabel</name>
        <briefdescription>
<para>The label assigned to this node, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Distinct from the name returned from <computeroutput><ref refid="class_ndr_node_1a5b52ba705bd2cbff2d8ba9a1fb0b39d8" kindref="member">GetName()</ref></computeroutput>. In the context of a UI, the label value might be used as the display name for the node instead of the name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="141" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1accce98d0a8ba33dc1234fff87b7a1100" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDR_API const TfToken&amp; GetCategory</definition>
        <argsstring>() const</argsstring>
        <name>GetCategory</name>
        <briefdescription>
<para>The category assigned to this node, if any. </para>
        </briefdescription>
        <detaileddescription>
<para>Distinct from the family returned from <computeroutput><ref refid="class_ndr_node_1acf302c95c871b993ab24f59856acfe46" kindref="member">GetFamily()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="146" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1ae02b471deaa0dda9742d36b34c038e66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string GetRole</definition>
        <argsstring>() const</argsstring>
        <name>GetRole</name>
        <briefdescription>
<para>Returns the role of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used to annotate the role that the shader node plays inside a shader network. We can tag certain shaders to indicate their role within a shading network. We currently tag primvar reading nodes, texture reading nodes and nodes that access volume fields (like extinction or scattering). This is done to identify resources used by a shading network. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a78dfac2cc65574c4f8e31136d1a8923d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string GetHelp</definition>
        <argsstring>() const</argsstring>
        <name>GetHelp</name>
        <briefdescription>
<para>The help message assigned to this node, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1adc7dcc62ca5f4ec9042de0eeea470f57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenVec &amp;</type>
        <definition>SDR_API const NdrTokenVec&amp; GetDepartments</definition>
        <argsstring>() const</argsstring>
        <name>GetDepartments</name>
        <briefdescription>
<para>The departments this node is associated with, if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="163" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a4a8dbd7cb7810f273c325d1dc8e990e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenVec &amp;</type>
        <definition>SDR_API const NdrTokenVec&amp; GetPages</definition>
        <argsstring>() const</argsstring>
        <name>GetPages</name>
        <briefdescription>
<para>Gets the pages on which the node&apos;s properties reside (an aggregate of the unique <computeroutput><ref refid="class_sdr_shader_property_1a17907347a410a7db40cd2a9b1aaf7416" kindref="member">SdrShaderProperty::GetPage()</ref></computeroutput> values for all of the node&apos;s properties). </para>
        </briefdescription>
        <detaileddescription>
<para>Nodes themselves do not reside on pages. In an example scenario, properties might be divided into two pages, &apos;Simple&apos; and &apos;Advanced&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="171" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a7178c74f9563490cc9219cadf87c4707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenVec &amp;</type>
        <definition>SDR_API const NdrTokenVec&amp; GetPrimvars</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimvars</name>
        <briefdescription>
<para>The list of primvars this node knows it requires / uses. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, a shader node may require the &apos;normals&apos; primvar to function correctly. Additional, user specified primvars may have been authored on the node. These can be queried via <computeroutput><ref refid="class_sdr_shader_node_1a55b4110d3cbba81e41f12880f6b6bacd" kindref="member">GetAdditionalPrimvarProperties()</ref></computeroutput>. Together, <computeroutput><ref refid="class_sdr_shader_node_1a7178c74f9563490cc9219cadf87c4707" kindref="member">GetPrimvars()</ref></computeroutput> and <computeroutput><ref refid="class_sdr_shader_node_1a55b4110d3cbba81e41f12880f6b6bacd" kindref="member">GetAdditionalPrimvarProperties()</ref></computeroutput>, provide the complete list of primvar requirements for the node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="180" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a55b4110d3cbba81e41f12880f6b6bacd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SDR_API const NdrTokenVec &amp;</type>
        <definition>SDR_API const NdrTokenVec&amp; GetAdditionalPrimvarProperties</definition>
        <argsstring>() const</argsstring>
        <name>GetAdditionalPrimvarProperties</name>
        <briefdescription>
<para>The list of string input properties whose values provide the names of additional primvars consumed by this node. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, this may return a token named <computeroutput>varname</computeroutput>. This indicates that the client should query the value of a (presumed to be string-valued) input attribute named varname from its scene description to determine the name of a primvar the node will consume. See <computeroutput><ref refid="class_sdr_shader_node_1a7178c74f9563490cc9219cadf87c4707" kindref="member">GetPrimvars()</ref></computeroutput> for additional information. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="189" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1aa6091590dd3e86ae4643f24c4b00a250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API std::string</type>
        <definition>SDR_API std::string GetImplementationName</definition>
        <argsstring>() const</argsstring>
        <name>GetImplementationName</name>
        <briefdescription>
<para>Returns the implementation name of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>The name of the node is how to refer to the node in shader networks. The label is how to present this node to users. The implementation name is the name of the function (or something) this node represents in the implementation. Any client using the implementation <bold>must</bold> call this method to get the correct name; using <computeroutput>getName()</computeroutput> is not correct. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="201" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Aggregate Information</header>
      <memberdef kind="function" id="class_sdr_shader_node_1a5637e253dc6ff692534a5cf5b29c650c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrTokenVec</type>
        <definition>SDR_API NdrTokenVec GetPropertyNamesForPage</definition>
        <argsstring>(const std::string &amp;pageName) const</argsstring>
        <name>GetPropertyNamesForPage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pageName</declname>
        </param>
        <briefdescription>
<para>Gets the names of the properties on a certain page (one that was returned by <computeroutput><ref refid="class_sdr_shader_node_1a4a8dbd7cb7810f273c325d1dc8e990e9" kindref="member">GetPages()</ref></computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para>To get properties that are not assigned to a page, an empty string can be used for <computeroutput>pageName</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1a6ea686754eb2c196ad9f4f8cf032eef4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API NdrTokenVec</type>
        <definition>SDR_API NdrTokenVec GetAllVstructNames</definition>
        <argsstring>() const</argsstring>
        <name>GetAllVstructNames</name>
        <briefdescription>
<para>Gets all vstructs that are present in the shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="217" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_sdr_shader_node_1a0e2a4a67df7e6fcd98b2691591f432d8" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _primvars</definition>
        <argsstring></argsstring>
        <name>_primvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="237" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1a40dcb6d3184128514ba271ce7f61b0fd" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _primvarNamingProperties</definition>
        <argsstring></argsstring>
        <name>_primvarNamingProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="238" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1a3b528c71a8fbb84ef57ace6ecb972f61" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _label</definition>
        <argsstring></argsstring>
        <name>_label</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="241" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1a6d7000a579e11bac722ab66f3b8348cb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _category</definition>
        <argsstring></argsstring>
        <name>_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="242" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1a7afe93fd819bdb1c4d9d858598abcc74" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _departments</definition>
        <argsstring></argsstring>
        <name>_departments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="243" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1ae36096b0f447b6e29358316969ea330f" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _pages</definition>
        <argsstring></argsstring>
        <name>_pages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="244" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1aefd1c9e1ff1299c4d5783c65f1fd92f2" prot="protected" static="no" mutable="no">
        <type>SdrPropertyMap</type>
        <definition>SdrPropertyMap _shaderInputs</definition>
        <argsstring></argsstring>
        <name>_shaderInputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="246" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdr_shader_node_1ad0ae0c0930d4f2abcc9794f81cbab61d" prot="protected" static="no" mutable="no">
        <type>SdrPropertyMap</type>
        <definition>SdrPropertyMap _shaderOutputs</definition>
        <argsstring></argsstring>
        <name>_shaderOutputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="247" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdr_shader_node_1a655058af9d0aca10d4608589538f3065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDR_API</type>
        <definition>SDR_API SdrShaderNode</definition>
        <argsstring>(const NdrIdentifier &amp;identifier, const NdrVersion &amp;version, const std::string &amp;name, const TfToken &amp;family, const TfToken &amp;context, const TfToken &amp;sourceType, const std::string &amp;definitionURI, const std::string &amp;implementationURI, NdrPropertyUniquePtrVec &amp;&amp;properties, const NdrTokenMap &amp;metadata=NdrTokenMap(), const std::string &amp;sourceCode=std::string())</argsstring>
        <name>SdrShaderNode</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const NdrVersion &amp;</type>
          <declname>version</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sourceType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>definitionURI</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>implementationURI</declname>
        </param>
        <param>
          <type>NdrPropertyUniquePtrVec &amp;&amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
          <defval>NdrTokenMap()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceCode</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdr_shader_node_1ae02facdce8d324109751537e0059f3fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _InitializePrimvars</definition>
        <argsstring>()</argsstring>
        <name>_InitializePrimvars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdr_shader_node_1ae148bf87f9c4429bfee739763f24bc08" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _ComputePages</definition>
        <argsstring>() const</argsstring>
        <name>_ComputePages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdr/shaderNode.h" line="254" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A specialized version of <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput> which holds shading information. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5267">
        <label>NdrNode</label>
        <link refid="class_ndr_node"/>
      </node>
      <node id="5266">
        <label>SdrShaderNode</label>
        <link refid="class_sdr_shader_node"/>
        <childnode refid="5267" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5269">
        <label>NdrNode</label>
        <link refid="class_ndr_node"/>
        <childnode refid="5270" relation="usage">
          <edgelabel>_family</edgelabel>
          <edgelabel>_context</edgelabel>
          <edgelabel>_sourceType</edgelabel>
          <edgelabel>_identifier</edgelabel>
        </childnode>
      </node>
      <node id="5270">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
      <node id="5268">
        <label>SdrShaderNode</label>
        <link refid="class_sdr_shader_node"/>
        <childnode refid="5269" relation="public-inheritance">
        </childnode>
        <childnode refid="5270" relation="usage">
          <edgelabel>_label</edgelabel>
          <edgelabel>_category</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdr/shaderNode.h" line="85" column="1" bodyfile="pxr/usd/sdr/shaderNode.h" bodystart="84" bodyend="255"/>
    <listofallmembers>
      <member refid="class_sdr_shader_node_1a6d7000a579e11bac722ab66f3b8348cb" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_category</name></member>
      <member refid="class_sdr_shader_node_1ae148bf87f9c4429bfee739763f24bc08" prot="private" virt="non-virtual"><scope>SdrShaderNode</scope><name>_ComputePages</name></member>
      <member refid="class_ndr_node_1a7507fea31b9da4774f30b6bda37454d2" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_context</name></member>
      <member refid="class_ndr_node_1ac6066cfa841857394b3450e7149a449b" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_definitionURI</name></member>
      <member refid="class_sdr_shader_node_1a7afe93fd819bdb1c4d9d858598abcc74" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_departments</name></member>
      <member refid="class_ndr_node_1a7ad68e28396ec7a3aa4f085bf137eb89" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_family</name></member>
      <member refid="class_ndr_node_1a9da446a87c6292c753228bdf35520dad" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_identifier</name></member>
      <member refid="class_ndr_node_1a9bee005befe3f61e1c8bcbbb275f88fd" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_implementationURI</name></member>
      <member refid="class_sdr_shader_node_1ae02facdce8d324109751537e0059f3fb" prot="private" virt="non-virtual"><scope>SdrShaderNode</scope><name>_InitializePrimvars</name></member>
      <member refid="class_ndr_node_1a34a1e6bf8287324ed937908a8d096a3f" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_inputNames</name></member>
      <member refid="class_ndr_node_1a6eafd197d2360cea0580eb237675385d" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_inputs</name></member>
      <member refid="class_ndr_node_1a934810816b55b3137fc1b8c6cde23ef8" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_isValid</name></member>
      <member refid="class_sdr_shader_node_1a3b528c71a8fbb84ef57ace6ecb972f61" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_label</name></member>
      <member refid="class_ndr_node_1a27c7adcfc5510ce6b0e8962c31aaef5e" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_metadata</name></member>
      <member refid="class_ndr_node_1aaf2ed934b37cbbd236fdd1b01a5f5005" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_name</name></member>
      <member refid="class_ndr_node_1ad08e2d7ac8db1513fa30c74e05a862b0" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_outputNames</name></member>
      <member refid="class_ndr_node_1a883a28012f4227e0f41aea025e35f843" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_outputs</name></member>
      <member refid="class_sdr_shader_node_1ae36096b0f447b6e29358316969ea330f" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_pages</name></member>
      <member refid="class_sdr_shader_node_1a40dcb6d3184128514ba271ce7f61b0fd" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_primvarNamingProperties</name></member>
      <member refid="class_sdr_shader_node_1a0e2a4a67df7e6fcd98b2691591f432d8" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_primvars</name></member>
      <member refid="class_ndr_node_1a8d346628320c97ea0a7b96c35f6ac97a" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_properties</name></member>
      <member refid="class_sdr_shader_node_1aefd1c9e1ff1299c4d5783c65f1fd92f2" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_shaderInputs</name></member>
      <member refid="class_sdr_shader_node_1ad0ae0c0930d4f2abcc9794f81cbab61d" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_shaderOutputs</name></member>
      <member refid="class_ndr_node_1ad2de6782c6b553cadb964f343f723d5a" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_sourceCode</name></member>
      <member refid="class_ndr_node_1aacda32dd7da3c6e148ff939b0f3025e3" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_sourceType</name></member>
      <member refid="class_ndr_node_1a7e3843f5a43e284f3d557561ce300e98" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>_version</name></member>
      <member refid="class_sdr_shader_node_1a55b4110d3cbba81e41f12880f6b6bacd" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetAdditionalPrimvarProperties</name></member>
      <member refid="class_sdr_shader_node_1a6ea686754eb2c196ad9f4f8cf032eef4" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetAllVstructNames</name></member>
      <member refid="class_sdr_shader_node_1a3d832d418c8d2cfe6f8bef4bb1503e07" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetAssetIdentifierInputNames</name></member>
      <member refid="class_sdr_shader_node_1accce98d0a8ba33dc1234fff87b7a1100" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetCategory</name></member>
      <member refid="class_ndr_node_1ac69ec85a964f5459e49e1408dc0d4e16" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetContext</name></member>
      <member refid="class_sdr_shader_node_1accac64ba2093b4b6d648a8c5fc3b410d" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetDefaultInput</name></member>
      <member refid="class_sdr_shader_node_1adc7dcc62ca5f4ec9042de0eeea470f57" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetDepartments</name></member>
      <member refid="class_ndr_node_1acf302c95c871b993ab24f59856acfe46" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetFamily</name></member>
      <member refid="class_sdr_shader_node_1a78dfac2cc65574c4f8e31136d1a8923d" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetHelp</name></member>
      <member refid="class_ndr_node_1a56660909bf6bc7cccafbe39d14a0ba8e" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetIdentifier</name></member>
      <member refid="class_sdr_shader_node_1aa6091590dd3e86ae4643f24c4b00a250" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetImplementationName</name></member>
      <member refid="class_ndr_node_1a81c8a5b9c158bfd6bb2682c469c44fd9" prot="public" virt="virtual"><scope>SdrShaderNode</scope><name>GetInfoString</name></member>
      <member refid="class_ndr_node_1a2d8d8881bd2b08de5cbbfb87b38a37ed" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetInput</name></member>
      <member refid="class_ndr_node_1ad490b06f671e5ac39a4abd61289a9b05" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetInputNames</name></member>
      <member refid="class_sdr_shader_node_1a6ca56a54d82eb3e7c63c0e90b5a6a7eb" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetLabel</name></member>
      <member refid="class_ndr_node_1a269d6be4f012db54c5ff468db4d1a3dd" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetMetadata</name></member>
      <member refid="class_ndr_node_1a5b52ba705bd2cbff2d8ba9a1fb0b39d8" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetName</name></member>
      <member refid="class_ndr_node_1a4fdb1034d86496427f78b133892f8690" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetOutput</name></member>
      <member refid="class_ndr_node_1a39aac36af8a2a852ea00be29b4ffd386" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetOutputNames</name></member>
      <member refid="class_sdr_shader_node_1a4a8dbd7cb7810f273c325d1dc8e990e9" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetPages</name></member>
      <member refid="class_sdr_shader_node_1a7178c74f9563490cc9219cadf87c4707" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetPrimvars</name></member>
      <member refid="class_sdr_shader_node_1a5637e253dc6ff692534a5cf5b29c650c" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetPropertyNamesForPage</name></member>
      <member refid="class_ndr_node_1aabf19757b3cebfbd39863d025fcf3124" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetResolvedDefinitionURI</name></member>
      <member refid="class_ndr_node_1ae26cea86218de93b2054ab2edfed402a" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetResolvedImplementationURI</name></member>
      <member refid="class_sdr_shader_node_1ae02b471deaa0dda9742d36b34c038e66" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetRole</name></member>
      <member refid="class_sdr_shader_node_1a3a0e1aa68cc115e4ef6c912710c08556" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetShaderInput</name></member>
      <member refid="class_sdr_shader_node_1a7165154a114a58312d1bf4ff477f44a3" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetShaderOutput</name></member>
      <member refid="class_ndr_node_1a339db7fbde449055832c9cb97e55930d" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetSourceCode</name></member>
      <member refid="class_ndr_node_1a552a651875e4dbe319770af335913253" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetSourceType</name></member>
      <member refid="class_ndr_node_1a270b251e08d8587ee3a9c8e4bd302ff8" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>GetVersion</name></member>
      <member refid="class_ndr_node_1a50dbd3d2deafeebaaef88247c38b338d" prot="public" virt="virtual"><scope>SdrShaderNode</scope><name>IsValid</name></member>
      <member refid="class_ndr_node_1a1b4685f5e146f4a44e0d3b7c53841ad9" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>NdrNode</name></member>
      <member refid="class_ndr_node_1a50671b1524efb60e8369a234fa622f89" prot="protected" virt="non-virtual"><scope>SdrShaderNode</scope><name>operator=</name></member>
      <member refid="class_sdr_shader_node_1a655058af9d0aca10d4608589538f3065" prot="public" virt="non-virtual"><scope>SdrShaderNode</scope><name>SdrShaderNode</name></member>
      <member refid="class_ndr_node_1a9694f80d0b137fe24dbe0baa3d8d7200" prot="public" virt="virtual"><scope>SdrShaderNode</scope><name>~NdrNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
