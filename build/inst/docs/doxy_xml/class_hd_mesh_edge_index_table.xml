<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_mesh_edge_index_table" kind="class" language="C++" prot="public">
    <compoundname>HdMeshEdgeIndexTable</compoundname>
    <includes refid="mesh_util_8h" local="no">meshUtil.h</includes>
    <innerclass refid="struct_hd_mesh_edge_index_table_1_1___compare_edge_vertices" prot="private">HdMeshEdgeIndexTable::_CompareEdgeVertices</innerclass>
    <innerclass refid="struct_hd_mesh_edge_index_table_1_1___edge" prot="private">HdMeshEdgeIndexTable::_Edge</innerclass>
    <innerclass refid="struct_hd_mesh_edge_index_table_1_1___edge_vertices_hash" prot="private">HdMeshEdgeIndexTable::_EdgeVerticesHash</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_mesh_edge_index_table_1a1c68d25cdc30075b730a93867944cad5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> &gt;</type>
        <definition>std::vector&lt;GfVec2i&gt; _edgeVertices</definition>
        <argsstring></argsstring>
        <name>_edgeVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="365" column="1" bodyfile="pxr/imaging/hd/meshUtil.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_mesh_edge_index_table_1aacdd2a0f73ebf2483840c5de496a08c2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _Edge &gt;</type>
        <definition>std::vector&lt;_Edge&gt; _edgesByIndex</definition>
        <argsstring></argsstring>
        <name>_edgesByIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="366" column="1" bodyfile="pxr/imaging/hd/meshUtil.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_mesh_edge_index_table_1af5485a49c187a8efad3301278c782658" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdMeshEdgeIndexTable</definition>
        <argsstring>(HdMeshTopology const *topology)</argsstring>
        <name>HdMeshEdgeIndexTable</name>
        <param>
          <type><ref refid="class_hd_mesh_topology" kindref="compound">HdMeshTopology</ref> const *</type>
          <declname>topology</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_mesh_edge_index_table_1a0e200f227ddf2304c0ff2d03806e8bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~HdMeshEdgeIndexTable</definition>
        <argsstring>()</argsstring>
        <name>~HdMeshEdgeIndexTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_mesh_edge_index_table_1af53f09624f06e6ca317c380ea5b5fb60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetVerticesForEdgeIndex</definition>
        <argsstring>(int edgeId, GfVec2i *edgeVerticesOut) const</argsstring>
        <name>GetVerticesForEdgeIndex</name>
        <param>
          <type>int</type>
          <declname>edgeId</declname>
        </param>
        <param>
          <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> *</type>
          <declname>edgeVerticesOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_mesh_edge_index_table_1a841f8450a24e73a8a4ca53dd98c58f61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetVerticesForEdgeIndices</definition>
        <argsstring>(std::vector&lt; int &gt; const &amp;edgeIndices, std::vector&lt; GfVec2i &gt; *edgeVerticesOut) const</argsstring>
        <name>GetVerticesForEdgeIndices</name>
        <param>
          <type>std::vector&lt; int &gt; const &amp;</type>
          <declname>edgeIndices</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> &gt; *</type>
          <declname>edgeVerticesOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_mesh_edge_index_table_1a65d79fb5f10bf55099c161a93ada0eb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetEdgeIndices</definition>
        <argsstring>(GfVec2i const &amp;edgeVertices, std::vector&lt; int &gt; *edgeIndicesOut) const</argsstring>
        <name>GetEdgeIndices</name>
        <param>
          <type><ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref> const &amp;</type>
          <declname>edgeVertices</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>edgeIndicesOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/meshUtil.h" line="324" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mesh edges are described as a pair of adjacent vertices encoded as <ref refid="class_gf_vec2i" kindref="compound">GfVec2i</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>The encoding of mesh edge indices is derived from the enumeration of face vertex index pairs provided by <ref refid="class_hd_mesh_util_1a3aea3e2d25e33795bcd17fc0f5808637" kindref="member">HdMeshUtil::EnumerateEdges()</ref>.</para>
<para>This encoding is consistent across triangulation or quadrangulation of the base mesh faces as well as for non-manifold faces on refined subdivision surface meshes.</para>
<para>There can be multiple edge indices associated with each pair of topological vertices in the mesh, e.g. one for each face incident on the edge.</para>
<para>For example, here is a typical edge index assignment for a mesh with 2 quad faces and 6 vertices:</para>
<para>faceVertexCounts: [4, 4] faceVertexIndices: [0, 1, 4, 3, 1, 2, 5, 4]</para>
<para>edgeId:(edgeVertex[0], edgeVertex[1]) <verbatim>  2:(3,4)          6:(4,5)
</verbatim> 3-------------<mdash/>4-------------<mdash/>5 | | | <table rows="5" cols="2"><row>
<entry thead="yes"><para>Face 0  </para>
</entry><entry thead="yes"><para>Face 1   </para>
</entry></row>
<row>
<entry thead="no"><para>3:(0,3) 1:(1,4)  </para>
</entry><entry thead="no"><para>7:(1,4) 5:(2,5)   </para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para></para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
0-------------<mdash/>1-------------<mdash/>2 0:(0,1) 4:(1,2)</para>
<para>Notice that with this assignment, there are eight edge indices even though the mesh has seven topological edges. The mesh edge between vertex 1 and vertex 4 is associated with two edgeIds (1 and 7), one for each incident face.</para>
<para>This kind of edge index assignment can be implemented efficiently on the GPU since it falls out automatically from the primitive drawing order and requires minimal additional GPU data. </para>
    </detaileddescription>
    <location file="pxr/imaging/hd/meshUtil.h" line="313" column="1" bodyfile="pxr/imaging/hd/meshUtil.h" bodystart="312" bodyend="367"/>
    <listofallmembers>
      <member refid="class_hd_mesh_edge_index_table_1aacdd2a0f73ebf2483840c5de496a08c2" prot="private" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>_edgesByIndex</name></member>
      <member refid="class_hd_mesh_edge_index_table_1a1c68d25cdc30075b730a93867944cad5" prot="private" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>_edgeVertices</name></member>
      <member refid="class_hd_mesh_edge_index_table_1a65d79fb5f10bf55099c161a93ada0eb4" prot="public" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>GetEdgeIndices</name></member>
      <member refid="class_hd_mesh_edge_index_table_1af53f09624f06e6ca317c380ea5b5fb60" prot="public" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>GetVerticesForEdgeIndex</name></member>
      <member refid="class_hd_mesh_edge_index_table_1a841f8450a24e73a8a4ca53dd98c58f61" prot="public" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>GetVerticesForEdgeIndices</name></member>
      <member refid="class_hd_mesh_edge_index_table_1af5485a49c187a8efad3301278c782658" prot="public" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>HdMeshEdgeIndexTable</name></member>
      <member refid="class_hd_mesh_edge_index_table_1a0e200f227ddf2304c0ff2d03806e8bfb" prot="public" virt="non-virtual"><scope>HdMeshEdgeIndexTable</scope><name>~HdMeshEdgeIndexTable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
