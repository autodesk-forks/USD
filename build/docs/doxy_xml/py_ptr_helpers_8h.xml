<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="py_ptr_helpers_8h" kind="file" language="C++">
    <compoundname>pyPtrHelpers.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="py_identity_8h" local="yes">pxr/base/tf/pyIdentity.h</includes>
    <includes refid="py_object_finder_8h" local="yes">pxr/base/tf/pyObjectFinder.h</includes>
    <includes refid="wrap_type_helpers_8h" local="yes">pxr/base/tf/wrapTypeHelpers.h</includes>
    <includes refid="demangle_8h" local="yes">pxr/base/arch/demangle.h</includes>
    <includes refid="base_2tf_2diagnostic_8h" local="yes">pxr/base/tf/diagnostic.h</includes>
    <includes refid="ref_ptr_8h" local="yes">pxr/base/tf/refPtr.h</includes>
    <includes refid="string_utils_8h" local="yes">pxr/base/tf/stringUtils.h</includes>
    <includes refid="weak_ptr_8h" local="yes">pxr/base/tf/weakPtr.h</includes>
    <includes refid="any_weak_ptr_8h" local="yes">pxr/base/tf/anyWeakPtr.h</includes>
    <includes local="no">boost/python/class.hpp</includes>
    <includes local="no">boost/python/converter/from_python.hpp</includes>
    <includes local="no">boost/python/converter/registered.hpp</includes>
    <includes local="no">boost/python/converter/registrations.hpp</includes>
    <includes local="no">boost/python/converter/registry.hpp</includes>
    <includes local="no">boost/python/converter/rvalue_from_python_data.hpp</includes>
    <includes local="no">boost/python/converter/to_python_function_type.hpp</includes>
    <includes local="no">boost/python/def_visitor.hpp</includes>
    <includes local="no">boost/python/handle.hpp</includes>
    <includes local="no">boost/python/implicit.hpp</includes>
    <includes local="no">boost/python/to_python_converter.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="py_singleton_8h" local="yes">pxr/base/tf/pySingleton.h</includedby>
    <incdepgraph>
      <node id="71612">
        <label>list</label>
      </node>
      <node id="71552">
        <label>locale</label>
      </node>
      <node id="71584">
        <label>atomic</label>
      </node>
      <node id="71598">
        <label>stdarg.h</label>
      </node>
      <node id="71566">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="71567" relation="include">
        </childnode>
        <childnode refid="71568" relation="include">
        </childnode>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
        <childnode refid="71569" relation="include">
        </childnode>
      </node>
      <node id="71604">
        <label>functional</label>
      </node>
      <node id="71615">
        <label>pxr/base/tf/hashmap.h</label>
        <link refid="hashmap_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
        <childnode refid="71616" relation="include">
        </childnode>
      </node>
      <node id="71547">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71620">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="71632">
        <label>boost/python/converter/registered.hpp</label>
      </node>
      <node id="71568">
        <label>cstdint</label>
      </node>
      <node id="71555">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71556" relation="include">
        </childnode>
        <childnode refid="71563" relation="include">
        </childnode>
        <childnode refid="71581" relation="include">
        </childnode>
        <childnode refid="71582" relation="include">
        </childnode>
        <childnode refid="71585" relation="include">
        </childnode>
        <childnode refid="71587" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71559" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71588" relation="include">
        </childnode>
      </node>
      <node id="71596">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71557" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
        <childnode refid="71552" relation="include">
        </childnode>
        <childnode refid="71597" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
      </node>
      <node id="71633">
        <label>boost/python/converter/registrations.hpp</label>
      </node>
      <node id="71551">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71570">
        <label>cmath</label>
      </node>
      <node id="71564">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71558" relation="include">
        </childnode>
        <childnode refid="71565" relation="include">
        </childnode>
        <childnode refid="71566" relation="include">
        </childnode>
        <childnode refid="71571" relation="include">
        </childnode>
        <childnode refid="71572" relation="include">
        </childnode>
      </node>
      <node id="71602">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="71582">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71583" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
      </node>
      <node id="71611">
        <label>cstdarg</label>
      </node>
      <node id="71574">
        <label>string</label>
      </node>
      <node id="71557">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71547" relation="include">
        </childnode>
      </node>
      <node id="71603">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="71575">
        <label>map</label>
      </node>
      <node id="71567">
        <label>cinttypes</label>
      </node>
      <node id="71544">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="71625">
        <label>pxr/base/tf/type_Impl.h</label>
        <link refid="type___impl_8h_source"/>
        <childnode refid="71626" relation="include">
        </childnode>
      </node>
      <node id="71599">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71595" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
        <childnode refid="71578" relation="include">
        </childnode>
      </node>
      <node id="71562">
        <label>stddef.h</label>
      </node>
      <node id="71558">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71600">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71601">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71602" relation="include">
        </childnode>
        <childnode refid="71603" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
      </node>
      <node id="71583">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71566" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71584" relation="include">
        </childnode>
      </node>
      <node id="71585">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
      </node>
      <node id="71591">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71559" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
      </node>
      <node id="71543">
        <label>pxr/base/tf/pyPtrHelpers.h</label>
        <link refid="py_ptr_helpers_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71545" relation="include">
        </childnode>
        <childnode refid="71617" relation="include">
        </childnode>
        <childnode refid="71618" relation="include">
        </childnode>
        <childnode refid="71599" relation="include">
        </childnode>
        <childnode refid="71593" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71608" relation="include">
        </childnode>
        <childnode refid="71589" relation="include">
        </childnode>
        <childnode refid="71629" relation="include">
        </childnode>
        <childnode refid="71614" relation="include">
        </childnode>
        <childnode refid="71631" relation="include">
        </childnode>
        <childnode refid="71632" relation="include">
        </childnode>
        <childnode refid="71633" relation="include">
        </childnode>
        <childnode refid="71634" relation="include">
        </childnode>
        <childnode refid="71635" relation="include">
        </childnode>
        <childnode refid="71636" relation="include">
        </childnode>
        <childnode refid="71628" relation="include">
        </childnode>
        <childnode refid="71602" relation="include">
        </childnode>
        <childnode refid="71637" relation="include">
        </childnode>
        <childnode refid="71638" relation="include">
        </childnode>
        <childnode refid="71576" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
      </node>
      <node id="71550">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="71551" relation="include">
        </childnode>
        <childnode refid="71552" relation="include">
        </childnode>
        <childnode refid="71553" relation="include">
        </childnode>
      </node>
      <node id="71637">
        <label>boost/python/implicit.hpp</label>
      </node>
      <node id="71597">
        <label>any</label>
      </node>
      <node id="71605">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="71569">
        <label>sys/types.h</label>
      </node>
      <node id="71592">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71593" relation="include">
        </childnode>
        <childnode refid="71563" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71590" relation="include">
        </childnode>
        <childnode refid="71599" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
      </node>
      <node id="71618">
        <label>pxr/base/tf/wrapTypeHelpers.h</label>
        <link refid="wrap_type_helpers_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71619" relation="include">
        </childnode>
        <childnode refid="71623" relation="include">
        </childnode>
        <childnode refid="71614" relation="include">
        </childnode>
        <childnode refid="71628" relation="include">
        </childnode>
      </node>
      <node id="71609">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
        <childnode refid="71599" relation="include">
        </childnode>
        <childnode refid="71563" relation="include">
        </childnode>
        <childnode refid="71600" relation="include">
        </childnode>
        <childnode refid="71585" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71610" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
      </node>
      <node id="71586">
        <label>typeinfo</label>
      </node>
      <node id="71617">
        <label>pxr/base/tf/pyObjectFinder.h</label>
        <link refid="py_object_finder_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71545" relation="include">
        </childnode>
        <childnode refid="71602" relation="include">
        </childnode>
        <childnode refid="71603" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
      </node>
      <node id="71630">
        <label>pxr/base/tf/cxxCast.h</label>
        <link refid="cxx_cast_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
      </node>
      <node id="71622">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="71621">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="71589">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71581" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71564" relation="include">
        </childnode>
        <childnode refid="71590" relation="include">
        </childnode>
        <childnode refid="71592" relation="include">
        </childnode>
        <childnode refid="71588" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
      </node>
      <node id="71626">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71584" relation="include">
        </childnode>
        <childnode refid="71627" relation="include">
        </childnode>
        <childnode refid="71568" relation="include">
        </childnode>
        <childnode refid="71610" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
      </node>
      <node id="71565">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71548" relation="include">
        </childnode>
        <childnode refid="71566" relation="include">
        </childnode>
        <childnode refid="71570" relation="include">
        </childnode>
      </node>
      <node id="71580">
        <label>vector</label>
      </node>
      <node id="71545">
        <label>pxr/base/tf/pyIdentity.h</label>
        <link refid="py_identity_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71549" relation="include">
        </childnode>
        <childnode refid="71554" relation="include">
        </childnode>
        <childnode refid="71599" relation="include">
        </childnode>
        <childnode refid="71593" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71585" relation="include">
        </childnode>
        <childnode refid="71608" relation="include">
        </childnode>
        <childnode refid="71589" relation="include">
        </childnode>
        <childnode refid="71614" relation="include">
        </childnode>
        <childnode refid="71602" relation="include">
        </childnode>
        <childnode refid="71603" relation="include">
        </childnode>
        <childnode refid="71615" relation="include">
        </childnode>
      </node>
      <node id="71546">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="71547" relation="include">
        </childnode>
      </node>
      <node id="71549">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71550" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
      </node>
      <node id="71606">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="71572">
        <label>utility</label>
      </node>
      <node id="71613">
        <label>sstream</label>
      </node>
      <node id="71594">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71595" relation="include">
        </childnode>
        <childnode refid="71561" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
      </node>
      <node id="71628">
        <label>boost/python/def_visitor.hpp</label>
      </node>
      <node id="71581">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
      </node>
      <node id="71548">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="71559">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71563">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71564" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71573" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71575" relation="include">
        </childnode>
        <childnode refid="71576" relation="include">
        </childnode>
        <childnode refid="71577" relation="include">
        </childnode>
        <childnode refid="71578" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71572" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
      </node>
      <node id="71571">
        <label>math.h</label>
      </node>
      <node id="71608">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71557" relation="include">
        </childnode>
        <childnode refid="71559" relation="include">
        </childnode>
        <childnode refid="71566" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71609" relation="include">
        </childnode>
        <childnode refid="71611" relation="include">
        </childnode>
        <childnode refid="71573" relation="include">
        </childnode>
        <childnode refid="71612" relation="include">
        </childnode>
        <childnode refid="71577" relation="include">
        </childnode>
        <childnode refid="71613" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
      </node>
      <node id="71554">
        <label>pxr/base/tf/pyUtils.h</label>
        <link refid="base_2tf_2py_utils_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71589" relation="include">
        </childnode>
        <childnode refid="71556" relation="include">
        </childnode>
        <childnode refid="71600" relation="include">
        </childnode>
        <childnode refid="71550" relation="include">
        </childnode>
        <childnode refid="71601" relation="include">
        </childnode>
        <childnode refid="71549" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71604" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
        <childnode refid="71605" relation="include">
        </childnode>
        <childnode refid="71606" relation="include">
        </childnode>
        <childnode refid="71602" relation="include">
        </childnode>
        <childnode refid="71603" relation="include">
        </childnode>
        <childnode refid="71607" relation="include">
        </childnode>
      </node>
      <node id="71610">
        <label>iosfwd</label>
      </node>
      <node id="71627">
        <label>cstdlib</label>
      </node>
      <node id="71560">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71561" relation="include">
        </childnode>
        <childnode refid="71562" relation="include">
        </childnode>
      </node>
      <node id="71623">
        <label>pxr/base/tf/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71624" relation="include">
        </childnode>
        <childnode refid="71587" relation="include">
        </childnode>
        <childnode refid="71610" relation="include">
        </childnode>
        <childnode refid="71576" relation="include">
        </childnode>
        <childnode refid="71577" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
        <childnode refid="71580" relation="include">
        </childnode>
        <childnode refid="71625" relation="include">
        </childnode>
      </node>
      <node id="71553">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="71588">
        <label>cstddef</label>
      </node>
      <node id="71587">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71576" relation="include">
        </childnode>
      </node>
      <node id="71616">
        <label>unordered_map</label>
      </node>
      <node id="71634">
        <label>boost/python/converter/registry.hpp</label>
      </node>
      <node id="71556">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71557" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71558" relation="include">
        </childnode>
        <childnode refid="71559" relation="include">
        </childnode>
        <childnode refid="71560" relation="include">
        </childnode>
        <childnode refid="71562" relation="include">
        </childnode>
      </node>
      <node id="71619">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71551" relation="include">
        </childnode>
        <childnode refid="71550" relation="include">
        </childnode>
        <childnode refid="71620" relation="include">
        </childnode>
        <childnode refid="71621" relation="include">
        </childnode>
        <childnode refid="71622" relation="include">
        </childnode>
        <childnode refid="71610" relation="include">
        </childnode>
        <childnode refid="71576" relation="include">
        </childnode>
      </node>
      <node id="71579">
        <label>type_traits</label>
      </node>
      <node id="71638">
        <label>boost/python/to_python_converter.hpp</label>
      </node>
      <node id="71577">
        <label>set</label>
      </node>
      <node id="71607">
        <label>boost/python/type_id.hpp</label>
      </node>
      <node id="71595">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="71547" relation="include">
        </childnode>
      </node>
      <node id="71561">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="71548" relation="include">
        </childnode>
      </node>
      <node id="71573">
        <label>cstring</label>
      </node>
      <node id="71631">
        <label>boost/python/converter/from_python.hpp</label>
      </node>
      <node id="71590">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71591" relation="include">
        </childnode>
        <childnode refid="71555" relation="include">
        </childnode>
        <childnode refid="71584" relation="include">
        </childnode>
      </node>
      <node id="71576">
        <label>memory</label>
      </node>
      <node id="71629">
        <label>pxr/base/tf/anyWeakPtr.h</label>
        <link refid="any_weak_ptr_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71630" relation="include">
        </childnode>
        <childnode refid="71623" relation="include">
        </childnode>
        <childnode refid="71589" relation="include">
        </childnode>
        <childnode refid="71554" relation="include">
        </childnode>
        <childnode refid="71619" relation="include">
        </childnode>
        <childnode refid="71588" relation="include">
        </childnode>
        <childnode refid="71579" relation="include">
        </childnode>
        <childnode refid="71572" relation="include">
        </childnode>
      </node>
      <node id="71624">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71557" relation="include">
        </childnode>
        <childnode refid="71600" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71604" relation="include">
        </childnode>
        <childnode refid="71586" relation="include">
        </childnode>
      </node>
      <node id="71593">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="71544" relation="include">
        </childnode>
        <childnode refid="71594" relation="include">
        </childnode>
        <childnode refid="71556" relation="include">
        </childnode>
        <childnode refid="71546" relation="include">
        </childnode>
        <childnode refid="71559" relation="include">
        </childnode>
        <childnode refid="71596" relation="include">
        </childnode>
        <childnode refid="71562" relation="include">
        </childnode>
        <childnode refid="71598" relation="include">
        </childnode>
        <childnode refid="71574" relation="include">
        </childnode>
      </node>
      <node id="71635">
        <label>boost/python/converter/rvalue_from_python_data.hpp</label>
      </node>
      <node id="71578">
        <label>typeindex</label>
      </node>
      <node id="71636">
        <label>boost/python/converter/to_python_function_type.hpp</label>
      </node>
      <node id="71614">
        <label>boost/python/class.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="71639">
        <label>pxr/base/tf/pyPtrHelpers.h</label>
        <link refid="py_ptr_helpers_8h"/>
        <childnode refid="71640" relation="include">
        </childnode>
      </node>
      <node id="71640">
        <label>pxr/base/tf/pySingleton.h</label>
        <link refid="py_singleton_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_tf_make_py_ptr" prot="public">TfMakePyPtr</innerclass>
    <innerclass refid="struct_tf_py_weak_ptr" prot="public">TfPyWeakPtr</innerclass>
    <innerclass refid="struct_tf_py_ref_and_weak_ptr" prot="public">TfPyRefAndWeakPtr</innerclass>
    <briefdescription>
<para>Enables wrapping of Weak or Ref &amp; Weak held types to python. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_PY_PTR_HELPERS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_PY_PTR_HELPERS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyIdentity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyObjectFinder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/wrapTypeHelpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="demangle_8h" kindref="compound">pxr/base/arch/demangle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2diagnostic_8h" kindref="compound">pxr/base/tf/diagnostic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ref_ptr_8h" kindref="compound">pxr/base/tf/refPtr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_utils_8h" kindref="compound">pxr/base/tf/stringUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="weak_ptr_8h" kindref="compound">pxr/base/tf/weakPtr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="any_weak_ptr_8h" kindref="compound">pxr/base/tf/anyWeakPtr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/class.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/from_python.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/registered.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/registrations.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/registry.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/rvalue_from_python_data.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/converter/to_python_function_type.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/def_visitor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/handle.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/implicit.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/to_python_converter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boost.Python<sp/>def<sp/>visitors<sp/>for<sp/>wrapping<sp/>objects<sp/>held<sp/>by<sp/>weak<sp/>pointers.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>create<sp/>a<sp/>read-only<sp/>property<sp/>on<sp/>your<sp/>class<sp/>called<sp/>&apos;expired&apos;<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true<sp/>if<sp/>the<sp/>object<sp/>has<sp/>expired.<sp/><sp/>This<sp/>also<sp/>adds<sp/>an<sp/>implementation<sp/>for<sp/>__eq__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>__ne__<sp/>which<sp/>compare<sp/>the<sp/>pointers<sp/>for<sp/>equality<sp/>and<sp/>non-equality,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class_&lt;MyClass,<sp/>MyClassPtr&gt;(&quot;MyClass&quot;,<sp/>no_init)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(TfPyWeakPtr())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>to<sp/>return<sp/>or<sp/>create<sp/>a<sp/>PyObject<sp/>holder<sp/>for<sp/>a<sp/>Ptr.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>specialized<sp/>for<sp/>custom<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TfMakePyPtr<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr::DataType<sp/>Pointee;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::python::objects::pointer_holder&lt;Ptr,<sp/>Pointee&gt;<sp/>Holder;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;PyObject*,<sp/>bool&gt;<sp/>Result;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>existing<sp/>PyObject<sp/>for<sp/>the<sp/>pointer<sp/>paired<sp/>with<sp/>false<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>and<sp/>return<sp/>a<sp/>new<sp/>PyObject<sp/>paired<sp/>with<sp/>true.<sp/><sp/>The<sp/>PyObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ref<sp/>count<sp/>must<sp/>have<sp/>been<sp/>incremented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Result<sp/>Execute(Ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>pointers<sp/>-&gt;<sp/>python<sp/>None.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p.GetUniqueIdentifier())</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result(boost::python::detail::none(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>instantiation.<sp/><sp/>We<sp/>must<sp/>do<sp/>this<sp/>before<sp/>checking<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>a<sp/>python<sp/>identity,<sp/>otherwise<sp/>the<sp/>identity<sp/>might<sp/>be<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>instantiation<sp/>and<sp/>our<sp/>caller<sp/>will<sp/>attempt<sp/>to<sp/>set<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>again,<sp/>which<sp/>isn&apos;t<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_pointer(p);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>Tf_PyGetPythonIdentity(p))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>make<sp/>a<sp/>new<sp/>python<sp/>object<sp/>holding<sp/>this<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>existing<sp/>to-python<sp/>conversion?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*res<sp/>=<sp/>boost::python::objects::make_ptr_instance</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;Pointee,<sp/>Holder&gt;::execute(p);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>got<sp/>back<sp/>Py_None,<sp/>no<sp/>new<sp/>object<sp/>was<sp/>made,<sp/>so<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>pass<sp/>back<sp/>false<sp/>in<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result(res,<sp/>res<sp/>!=<sp/>Py_None);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Tf_PyDefHelpers<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::python;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrInterface<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr::DataType<sp/>Pointee;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstPointee<sp/>=<sp/>std::add_const_t&lt;Pointee&gt;;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NonConstPointee<sp/>=<sp/>std::remove_const_t&lt;Pointee&gt;;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Rebind<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr::template<sp/>Rebind&lt;U&gt;::Type<sp/>Type;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Rebind&lt;ConstPointee&gt;::Type<sp/>ConstPtr;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Rebind&lt;NonConstPointee&gt;::Type<sp/>NonConstPtr;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsPtrExpired(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PtrType<sp/>p<sp/>=<sp/>extract&lt;PtrType&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!p;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::python::error_already_set<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_IsPtrValid(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!_IsPtrExpired&lt;PtrType&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_ArePtrsEqual(PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_ArePtrsNotEqual(PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_ArePtrsLessThan(PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>&lt;<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>ownership<sp/>policy<sp/>does<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrFromPythonConversionPolicy<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Apply(PtrType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>PyObject<sp/>*)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ownership<sp/>policy<sp/>for<sp/>ref<sp/>ptrs<sp/>when<sp/>going<sp/>from<sp/>python<sp/>to<sp/>c++<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transfer<sp/>ownership<sp/>(remove<sp/>ownership<sp/>from<sp/>python<sp/>if<sp/>it<sp/>has<sp/>it).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrFromPythonConversionPolicy&lt;<ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Apply(<ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p,<sp/>PyObject<sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PyRemovePythonOwnership(p,<sp/>obj);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrFromPython<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;Ptr&gt;::Pointee<sp/>Pointee;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>_PtrFromPython()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converter::registry::insert(&amp;convertible,<sp/>&amp;construct,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_id&lt;Ptr&gt;());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*convertible(PyObject<sp/>*p)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>converter::get_lvalue_from_python</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p,<sp/>converter::registered&lt;Pointee&gt;::converters);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct(PyObject*<sp/>source,<sp/>converter::</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvalue_from_python_stage1_data*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>((converter::rvalue_from_python_storage&lt;Ptr&gt;*)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data)-&gt;storage.bytes;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deal<sp/>with<sp/>the<sp/>&quot;None&quot;<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;convertible<sp/>==<sp/>source)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/>Ptr();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/>ptr(static_cast&lt;Pointee*&gt;(data-&gt;convertible));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/>Ptr(ptr);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrFromPythonConversionPolicy&lt;Ptr&gt;::Apply(ptr,<sp/>source);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>ptr&apos;s<sp/>python<sp/>object<sp/>to<sp/>source<sp/>if<sp/>the<sp/>pointer<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PySetPythonIdentity(ptr,<sp/>source);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;convertible<sp/>=<sp/>storage;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converter<sp/>from<sp/>python<sp/>to<sp/>AnyWeakPtr.<sp/><sp/>We<sp/>use<sp/>this<sp/>converter<sp/>to<sp/>wrap<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>weak-pointable<sp/>object<sp/>into<sp/>an<sp/>AnyWeakPtr<sp/>when<sp/>we<sp/>don&apos;t<sp/>know<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>C++<sp/>type<sp/>it<sp/>has--for<sp/>example,<sp/>see<sp/>wrapNotice.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_AnyWeakPtrFromPython<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>_AnyWeakPtrFromPython()<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converter::registry::insert(&amp;convertible,<sp/>&amp;construct,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_id&lt;TfAnyWeakPtr&gt;());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*convertible(PyObject<sp/>*p)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>converter::get_lvalue_from_python</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p,<sp/>converter::registered</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;PtrType&gt;::Pointee&gt;::converters);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct(PyObject*<sp/>source,<sp/>converter::</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvalue_from_python_stage1_data*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>((converter::rvalue_from_python_storage</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<ref refid="class_tf_any_weak_ptr" kindref="compound">TfAnyWeakPtr</ref>&gt;*)data)-&gt;storage.bytes;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deal<sp/>with<sp/>the<sp/>&quot;None&quot;<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;convertible<sp/>==<sp/>source)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/><ref refid="class_tf_any_weak_ptr" kindref="compound">TfAnyWeakPtr</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;PtrType&gt;::Pointee<sp/>T;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*ptr<sp/>=<sp/>static_cast&lt;T*&gt;(data-&gt;convertible);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PtrType<sp/>smartPtr(ptr);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(storage)<sp/><ref refid="class_tf_any_weak_ptr" kindref="compound">TfAnyWeakPtr</ref>(smartPtr);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;convertible<sp/>=<sp/>storage;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal">};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ConstPtrToPython<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;Ptr&gt;::ConstPtr<sp/>ConstPtr;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;Ptr&gt;::NonConstPtr<sp/>NonConstPtr;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>_ConstPtrToPython()<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_python_converter&lt;ConstPtr,<sp/>_ConstPtrToPython&lt;Ptr&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*convert(ConstPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>incref(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(TfConst_cast&lt;NonConstPtr&gt;(p)).ptr());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrToPython<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>_PtrToPython()<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_python_converter&lt;Ptr,<sp/>_PtrToPython&lt;Ptr&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*convert(Ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;PyObject*,<sp/>bool&gt;<sp/>ret<sp/>=<sp/>TfMakePyPtr&lt;Ptr&gt;::Execute(p);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.second)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PySetPythonIdentity(p,<sp/>ret.first);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.first;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SrcPtr,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DstPtr&gt;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ConvertPtrToPython<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>_ConvertPtrToPython()<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_python_converter&lt;SrcPtr,<sp/>_ConvertPtrToPython&lt;SrcPtr,<sp/>DstPtr&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*convert(SrcPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DstPtr<sp/>dst<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>incref(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">(dst).ptr());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_PtrToPythonWrapper<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>store<sp/>the<sp/>original<sp/>to-python<sp/>converter<sp/>for<sp/>our<sp/>use.<sp/><sp/>It&apos;s<sp/>fine<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static,<sp/>as<sp/>there&apos;s<sp/>only<sp/>one<sp/>to-python<sp/>converter<sp/>for<sp/>a<sp/>type<sp/>T,<sp/>and<sp/>there&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>instantiation<sp/>of<sp/>this<sp/>template<sp/>for<sp/>each<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>converter::to_python_function_t<sp/>_originalConverter;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>signature<sp/>has<sp/>to<sp/>match<sp/>to_python_function_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*Convert(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>boost/python/converter/as_to_python_function.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p<sp/>=<sp/>*static_cast&lt;Ptr<sp/>const<sp/>*&gt;(x);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;PyObject*,<sp/>bool&gt;<sp/>ret<sp/>=<sp/>TfMakePyPtr&lt;Ptr&gt;::Execute(p);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.first<sp/>==<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>the<sp/>original<sp/>converter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(ret.first);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.first<sp/>=<sp/>_originalConverter(x);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.second)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_PySetPythonIdentity(p,<sp/>ret.first);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.first;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">converter::to_python_function_t</highlight></codeline>
<codeline lineno="310"><highlight class="normal">_PtrToPythonWrapper&lt;T&gt;::_originalConverter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">WeakPtr<sp/>:<sp/>def_visitor&lt;WeakPtr&gt;<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">def_visitor_access;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WrapperPtrType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Wrapper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_RegisterConversions(Wrapper<sp/>*,<sp/>T<sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_RegisterConversionsHelper&lt;WrapperPtrType,<sp/>Wrapper,<sp/>T&gt;();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WrapperPtrType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Wrapper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_RegisterConversionsHelper()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;WrapperPtrType&gt;::Pointee,<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Wrapper&gt;::value,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pointee<sp/>must<sp/>be<sp/>same<sp/>type<sp/>as<sp/>Wrapper.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrInterface&lt;WrapperPtrType&gt;::template<sp/>Rebind&lt;T&gt;::Type<sp/>PtrType;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>the<sp/>from-python<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrFromPython&lt;PtrType&gt;();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>AnyWeakPtr<sp/>from<sp/>python<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_AnyWeakPtrFromPython&lt;PtrType&gt;();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>python,<sp/>can<sp/>always<sp/>make<sp/>a<sp/>const<sp/>pointer<sp/>from<sp/>a<sp/>non-const<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implicitly_convertible&lt;PtrType,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_PtrInterface&lt;PtrType&gt;::ConstPtr<sp/>&gt;();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>a<sp/>conversion<sp/>that<sp/>casts<sp/>away<sp/>constness<sp/>when<sp/>going<sp/>to<sp/>python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ConstPtrToPython&lt;PtrType&gt;();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>existing<sp/>to_python<sp/>conversion<sp/>for<sp/>weakptr&lt;wrapper&gt;<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>id<sp/>first.<sp/><sp/>It<sp/>would<sp/>be<sp/>great<sp/>if<sp/>we<sp/>could<sp/>get<sp/>better<sp/>support<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost<sp/>python<sp/>for<sp/>doing<sp/>this<sp/>sort<sp/>of<sp/>thing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>for<sp/>wrapper<sp/>because<sp/>this<sp/>is<sp/>the<sp/>&quot;wrapped<sp/>type&quot;<sp/>--<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>which<sp/>boost<sp/>python<sp/>has<sp/>already<sp/>registered<sp/>a<sp/>to-python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion.<sp/><sp/>The<sp/>unwrapped<sp/>type<sp/>is<sp/>handled<sp/>separately<sp/>--<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>replace<sp/>an<sp/>existing<sp/>converter,<sp/>we<sp/>can<sp/>just<sp/>register<sp/>our<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converter::registration<sp/>*r<sp/>=<sp/>const_cast&lt;converter::registration<sp/>*&gt;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(converter::registry::query(type_id&lt;WrapperPtrType&gt;()));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrToPythonWrapper&lt;WrapperPtrType&gt;::</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_originalConverter<sp/>=<sp/>r-&gt;m_to_python;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;m_to_python<sp/>=<sp/>_PtrToPythonWrapper&lt;WrapperPtrType&gt;::Convert;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_OFF<sp/>Can<sp/>only<sp/>happen<sp/>if<sp/>there&apos;s<sp/>a<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>python<sp/>registration<sp/>for<sp/>&apos;%s&apos;!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__arch___strings_1ga0b63aee5bf45530bc1b0ceb51411bc7d" kindref="member">ArchGetDemangled</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(WrapperPtrType)).c_str());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CODE_COVERAGE_ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::is_same&lt;Wrapper,<sp/>T&gt;::value)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrToPython&lt;PtrType&gt;();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Wrapper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_AddAPI(CLS<sp/>&amp;c,<sp/>Wrapper<sp/>*,<sp/>T<sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrInterface&lt;PtrType&gt;::template<sp/>Rebind&lt;T&gt;::Type<sp/>UnwrappedPtrType;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>&apos;expired&apos;<sp/>property<sp/>and<sp/>(in)equality<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.add_property(</highlight><highlight class="stringliteral">&quot;expired&quot;</highlight><highlight class="normal">,<sp/>_IsPtrExpired&lt;UnwrappedPtrType&gt;,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>if<sp/>this<sp/>object<sp/>has<sp/>expired,<sp/>False<sp/>otherwise.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__bool__&quot;</highlight><highlight class="normal">,<sp/>_IsPtrValid&lt;UnwrappedPtrType&gt;,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;True<sp/>if<sp/>this<sp/>object<sp/>has<sp/>not<sp/>expired.<sp/><sp/>False<sp/>otherwise.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__eq__&quot;</highlight><highlight class="normal">,<sp/>_ArePtrsEqual&lt;UnwrappedPtrType&gt;,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Equality<sp/>operator:<sp/><sp/>x<sp/>==<sp/>y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__ne__&quot;</highlight><highlight class="normal">,<sp/>_ArePtrsNotEqual&lt;UnwrappedPtrType&gt;,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Non-equality<sp/>operator:<sp/>x<sp/>!=<sp/>y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(</highlight><highlight class="stringliteral">&quot;__lt__&quot;</highlight><highlight class="normal">,<sp/>_ArePtrsLessThan&lt;UnwrappedPtrType&gt;,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Less<sp/>than<sp/>operator:<sp/>x<sp/>&lt;<sp/>y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.def(<sp/><ref refid="struct_tf_type_python_class" kindref="compound">TfTypePythonClass</ref>()<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::wrapped_type<sp/>Type;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::metadata::held_type_arg<sp/>PtrType;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(TF_SUPPORTS_WEAKPTR(Type),</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>support<sp/>TfWeakPtr.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_RegisterConversions&lt;PtrType&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Type<sp/>*)0,<sp/>detail::unwrap_wrapper((Type<sp/>*)0));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>a<sp/>PyObjectFinder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_RegisterPythonObjectFinder&lt;Type,<sp/>PtrType&gt;();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>weak<sp/>ptr<sp/>api.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_AddAPI&lt;PtrType&gt;(c,<sp/>(Type<sp/>*)0,<sp/>detail::unwrap_wrapper((Type<sp/>*)0));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal">};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RefAndWeakPtr<sp/>:<sp/>def_visitor&lt;RefAndWeakPtr&gt;<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">def_visitor_access;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Wrapper,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_AddAPI(Wrapper<sp/>*,<sp/>T<sp/>*)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrFromPython&lt;TfRefPtr&lt;T&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_PtrInterface&lt;typename<sp/>CLS::metadata::held_type&gt;::template</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rebind&lt;T&gt;::Type<sp/>PtrType;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ConvertPtrToPython&lt;TfRefPtr&lt;T&gt;,<sp/>PtrType&gt;();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS&gt;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(CLS<sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CLS::wrapped_type<sp/>Type;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(TF_SUPPORTS_REFPTR(Type),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>support<sp/>TfRefPtr.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>as<sp/>weak<sp/>ptr<sp/>plus<sp/>ref<sp/>conversions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeakPtr().visit(c);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_AddAPI&lt;CLS&gt;((Type<sp/>*)0,<sp/>detail::unwrap_wrapper((Type<sp/>*)0));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">};</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TfPyWeakPtr<sp/>:<sp/>Tf_PyDefHelpers::WeakPtr<sp/>{};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TfPyRefAndWeakPtr<sp/>:<sp/>Tf_PyDefHelpers::RefAndWeakPtr<sp/>{};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_PY_PTR_HELPERS_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/pyPtrHelpers.h"/>
  </compounddef>
</doxygen>
