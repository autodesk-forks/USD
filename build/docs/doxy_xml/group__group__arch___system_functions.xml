<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group__group__arch___system_functions" kind="group">
    <compoundname>group_arch_SystemFunctions</compoundname>
    <title>System Functions</title>
    <innerfile refid="errno_8h">errno.h</innerfile>
    <innerfile refid="file_system_8h">fileSystem.h</innerfile>
    <innerfile refid="file_system_8h">fileSystem.h</innerfile>
    <innerfile refid="file_system_8h">fileSystem.h</innerfile>
    <innerfile refid="system_info_8h">systemInfo.h</innerfile>
    <innerfile refid="timing_8h">timing.h</innerfile>
    <innerfile refid="virtual_memory_8h">virtualMemory.h</innerfile>
    <innerclass refid="struct_arch_interval_timer" prot="public">ArchIntervalTimer</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__group__arch___system_functions_1ga54867394e34246d76fcdbf48cb2da1a2" prot="public" static="no" strong="no">
        <type></type>
        <name>ArchMemAdvice</name>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a670b20f6c0a2aac7890520ccc919df7d" prot="public">
          <name>ArchMemAdviceNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a0ae69bef74f710be0f488b9192c64431" prot="public">
          <name>ArchMemAdviceWillNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2ae1e72433caa36aecab5d3d6a2a07854d" prot="public">
          <name>ArchMemAdviceDontNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1gga54867394e34246d76fcdbf48cb2da1a2a2c2d883cb5674c1fd85d505f7ff5222d" prot="public">
          <name>ArchMemAdviceRandomAccess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="364" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="enum" id="group__group__arch___system_functions_1gacd1778d5b6821e5dd7dc00aa9de60a44" prot="public" static="no" strong="no">
        <type></type>
        <name>ArchFileAdvice</name>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a818f910d43a49803cac17271f5c07f56" prot="public">
          <name>ArchFileAdviceNormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a3bad46fc4701c523013f4cd44402173d" prot="public">
          <name>ArchFileAdviceWillNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44a02d62b054006b9c996f7070b379c4aae" prot="public">
          <name>ArchFileAdviceDontNeed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__group__arch___system_functions_1ggacd1778d5b6821e5dd7dc00aa9de60a44acad6b83759535967f6b2e1ad48c8ce16" prot="public">
          <name>ArchFileAdviceRandomAccess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="414" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="414" bodyend="419"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga4c9e8f7412081966f31376d757035da4" prot="public" static="no">
        <type>struct stat</type>
        <definition>typedef struct stat ArchStatType</definition>
        <argsstring></argsstring>
        <name>ArchStatType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="61" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" prot="public" static="no">
        <type>std::unique_ptr&lt; char const, Arch_Unmapper &gt;</type>
        <definition>using ArchConstFileMapping =  std::unique_ptr&lt;char const, Arch_Unmapper&gt;</definition>
        <argsstring></argsstring>
        <name>ArchConstFileMapping</name>
        <briefdescription>
<para>ArchConstFileMapping and ArchMutableFileMapping are std::unique_ptr&lt;char const *, ...&gt; and std::unique_ptr&lt;char *, ...&gt; respectively. </para>
        </briefdescription>
        <detaileddescription>
<para>The functions <ref refid="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" kindref="member">ArchMapFileReadOnly()</ref> and <ref refid="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" kindref="member">ArchMapFileReadWrite()</ref> return them and provide access to memory-mapped file contents. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="321" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__group__arch___system_functions_1ga75c5a63ff53777e2d5161a6943cd1f90" prot="public" static="no">
        <type>std::unique_ptr&lt; char, Arch_Unmapper &gt;</type>
        <definition>using ArchMutableFileMapping =  std::unique_ptr&lt;char, Arch_Unmapper&gt;</definition>
        <argsstring></argsstring>
        <name>ArchMutableFileMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="322" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__arch___system_functions_1gae66886ad81eef2c108bd85152a15e58f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchHasEnv</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>ArchHasEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Architecture dependent access to environment variables. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if and only if the current environment contains <computeroutput>name</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaf00ba082e62cf6a81413757c859e0faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetEnv</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>ArchGetEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Gets a value from the current environment identified by <computeroutput>name</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab7e89ea89c46857f0554aaef219da4db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchSetEnv</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value, bool overwrite)</argsstring>
        <name>ArchSetEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overwrite</declname>
        </param>
        <briefdescription>
<para>Creates or modifies an environment variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaeddab5f151ab6ff46aa494192466ec4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchRemoveEnv</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>ArchRemoveEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes an environment variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga1d262469a4eb5756eaaf73920c5da7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchExpandEnvironmentVariables</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>ArchExpandEnvironmentVariables</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Expands environment variables in <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gad0bf6925c4c3ad552b7115484f350c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API char **</type>
        <definition>ARCH_API char** ArchEnviron</definition>
        <argsstring>()</argsstring>
        <name>ArchEnviron</name>
        <briefdescription>
<para>Return an array of the environment variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/env.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac2d7327776833fd11630670473ddd228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchStrerror</definition>
        <argsstring>()</argsstring>
        <name>ArchStrerror</name>
        <briefdescription>
<para>Return the error string for the current value of errno. </para>
        </briefdescription>
        <detaileddescription>
<para>This function provides a thread-safe method of fetching the error string from errno. POSIX.1c defines errno as a macro which provides access to a thread-local integer. This function is thread-safe. This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/errno.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga48a3ff8045e480a5c7744ad4aee898ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchStrerror</definition>
        <argsstring>(int errorCode)</argsstring>
        <name>ArchStrerror</name>
        <param>
          <type>int</type>
          <declname>errorCode</declname>
        </param>
        <briefdescription>
<para>Return the error string for the specified value of errno. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/errno.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga1bec132d04aee138cde95f69b7ad4538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API FILE *</type>
        <definition>ARCH_API FILE* ArchOpenFile</definition>
        <argsstring>(char const *fileName, char const *mode)</argsstring>
        <name>ArchOpenFile</name>
        <param>
          <type>char const *</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Opens a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Opens the file that is specified by filename. Returning true if the file was opened successfully; false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gacc73dbd584a8d7703e40f6417b965e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchGetFileLength</definition>
        <argsstring>(const char *fileName)</argsstring>
        <name>ArchGetFileLength</name>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Return the length of a file in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns -1 if the file cannot be opened/read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga028d27eaa4b02d89fd976ce085d6f779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchGetFileLength</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ArchGetFileLength</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga415948a83b889f81f9f1639c4274ab40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetFileName</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ArchGetFileName</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Return a filename for this file, if one can be obtained. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that there are many reasons why it may be impossible to obtain a filename, even for an opened FILE *. Whenever possible avoid using this function and instead store the filename for future use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaa78011cca838a67452c60102e2def798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchStatIsWritable</definition>
        <argsstring>(const ArchStatType *st)</argsstring>
        <name>ArchStatIsWritable</name>
        <param>
          <type>const ArchStatType *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns true if the data in <computeroutput>stat</computeroutput> struct <computeroutput>st</computeroutput> indicates that the target file or directory is writable. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns true if the struct pointer is valid, and the stat indicates the target is writable by the effective user, effective group, or all users. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac6d6d08f8d53a072d6737e7db02a0e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetModificationTime</definition>
        <argsstring>(const char *pathname, double *time)</argsstring>
        <name>ArchGetModificationTime</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Returns the modification time (mtime) in seconds for a file. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stores the modification time with as much precision as is available in the stat structure for the current platform in <computeroutput>time</computeroutput> and returns <computeroutput>true</computeroutput> on success, otherwise just returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga2f4aeb9586e26f18e9bd83f3af940d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API double</type>
        <definition>ARCH_API double ArchGetModificationTime</definition>
        <argsstring>(const ArchStatType &amp;st)</argsstring>
        <name>ArchGetModificationTime</name>
        <param>
          <type>const ArchStatType &amp;</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Returns the modification time (mtime) in seconds from the stat struct. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the modification time with as much precision as is available in the stat structure for the current platform. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gacdfe44cd554312c33de052377c291df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchNormPath</definition>
        <argsstring>(const std::string &amp;path, bool stripDriveSpecifier=false)</argsstring>
        <name>ArchNormPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>stripDriveSpecifier</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Normalizes the specified path, eliminating double slashes, etc. </para>
        </briefdescription>
        <detaileddescription>
<para>This canonicalizes paths, removing any double slashes, and eliminiating &apos;.&apos;, and &apos;..&apos; components of the path. This emulates the behavior of os.path.normpath in Python.</para>
<para>On Windows, all backslashes are converted to forward slashes and drive specifiers (e.g., &quot;C:&quot;) are lower-cased. If <computeroutput>stripDriveSpecifier</computeroutput> is <computeroutput>true</computeroutput>, these drive specifiers are removed from the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab146e5fb7a6c2f805936960bc58e3911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchAbsPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ArchAbsPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the canonical absolute path of the specified filename. </para>
        </briefdescription>
        <detaileddescription>
<para>This makes the specified path absolute, by prepending the current working directory. If the path is already absolute, it is returned unmodified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gafcf5d83a628346852ba643aa5a9405bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchGetStatMode</definition>
        <argsstring>(const char *pathname, int *mode)</argsstring>
        <name>ArchGetStatMode</name>
        <param>
          <type>const char *</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Returns the permissions mode (mode_t) for the given pathname. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stats the given pathname and returns the permissions flags for it and returns true. If the stat fails, returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga0767210226cfa6aa0e3683b67677244a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API const char *</type>
        <definition>ARCH_API const char* ArchGetTmpDir</definition>
        <argsstring>()</argsstring>
        <name>ArchGetTmpDir</name>
        <briefdescription>
<para>Return the path to a temporary directory for this platform. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned temporary directory will be a location that will normally be cleaned out on a reboot. This is /var/tmp on Linux machines (for legacy reasons), but /tmp on Darwin machines (/var/tmp on Darwin is specified as a location where files are kept between system reboots - see &quot;man hier&quot;). The returned string will not have a trailing slash.</para>
<para>This routine is threadsafe and will not perform any memory allocations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga997f1d5a8ccc2eabe922ca2c391b8e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchMakeTmpFileName</definition>
        <argsstring>(const std::string &amp;prefix, const std::string &amp;suffix=std::string())</argsstring>
        <name>ArchMakeTmpFileName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>suffix</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Make a temporary file name, in a system-determined temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.pid[.n]suffix where TMPDIR is a system-determined temporary directory (typically /tmp or /usr/tmp), pid is the process id of the process, and the optional .n records the number of times this function has been called by a process (and is ommited the first time this function is called).</para>
<para>The call is threadsafe.</para>
<para><simplesect kind="warning"><para>This call opens a security hole because of the race between choosing the name and opening the file. This call should be avoided in favor of <computeroutput><ref refid="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" kindref="member">ArchMakeTmpFile()</ref></computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaca942247dd7967172a633d06f7bdb112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchMakeTmpFile</definition>
        <argsstring>(const std::string &amp;prefix, std::string *pathname=0)</argsstring>
        <name>ArchMakeTmpFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pathname</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a temporary file, in a system-determined temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX where TMPDIR is a system-determined temporary directory (typically /tmp or /usr/tmp) and XXXXXX is a unique suffix. Returns the file descriptor of the new file and, if pathname isn&apos;t NULL, returns the full path to the file in pathname. Returns -1 on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga7261d50cc2fece4b13695cc4571c6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchMakeTmpFile</definition>
        <argsstring>(const std::string &amp;tmpdir, const std::string &amp;prefix, std::string *pathname=0)</argsstring>
        <name>ArchMakeTmpFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tmpdir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>pathname</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a temporary file, in a given temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX where TMPDIR is the given temporary directory and XXXXXX is a unique suffix. Returns the file descriptor of the new file and, if pathname isn&apos;t NULL, returns the full path to the file in pathname. Returns -1 on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaf16da5b9f8a5f90356e73952519215ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchMakeTmpSubdir</definition>
        <argsstring>(const std::string &amp;tmpdir, const std::string &amp;prefix)</argsstring>
        <name>ArchMakeTmpSubdir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tmpdir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Create a temporary sub-direcrory, in a given temporary directory. </para>
        </briefdescription>
        <detaileddescription>
<para>The result returned has the form TMPDIR/prefix.XXXXXX/ where TMPDIR is the given temporary directory and XXXXXX is a unique suffix. Returns the the full path to the subdir in pathname. Returns empty string on failure and errno is set.</para>
<para>The call is threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaa31adcaf2d794cb222b2b1afe43198b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ArchGetFileMappingLength</definition>
        <argsstring>(ArchConstFileMapping const &amp;m)</argsstring>
        <name>ArchGetFileMappingLength</name>
        <param>
          <type><ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Return the length of an ArchConstFileMapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="326" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab673c952a25e9a0eea7b638001a980ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ArchGetFileMappingLength</definition>
        <argsstring>(ArchMutableFileMapping const &amp;m)</argsstring>
        <name>ArchGetFileMappingLength</name>
        <param>
          <type>ArchMutableFileMapping const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Return the length of an ArchMutableFileMapping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="332" column="1" bodyfile="pxr/base/arch/fileSystem.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga4e0295e921ab8493db15bfca285db81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API <ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></type>
        <definition>ARCH_API ArchConstFileMapping ArchMapFileReadOnly</definition>
        <argsstring>(FILE *file, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadOnly</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Privately map the passed <computeroutput>file</computeroutput> into memory and return a unique_ptr to the read-only mapped contents. </para>
        </briefdescription>
        <detaileddescription>
<para>The contents may not be modified. If mapping fails, return a null unique_ptr and if errMsg is not null fill it with information about the failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac1bbedbea0b3705795d5611b42ddb554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API <ref refid="group__group__arch___system_functions_1ga172f290a5dd3831d5a82d79b0c239fd4" kindref="member">ArchConstFileMapping</ref></type>
        <definition>ARCH_API ArchConstFileMapping ArchMapFileReadOnly</definition>
        <argsstring>(std::string const &amp;path, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadOnly</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga5486e3f6422954f311be3169e743ae48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API ArchMutableFileMapping</type>
        <definition>ARCH_API ArchMutableFileMapping ArchMapFileReadWrite</definition>
        <argsstring>(FILE *file, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadWrite</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Privately map the passed <computeroutput>file</computeroutput> into memory and return a unique_ptr to the copy-on-write mapped contents. </para>
        </briefdescription>
        <detaileddescription>
<para>If modified, the affected pages are dissociated from the underlying file and become backed by the system&apos;s swap or page-file storage. Edits are not carried through to the underlying file. If mapping fails, return a null unique_ptr and if errMsg is not null fill it with information about the failure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac5a0403da008e4a63d9082586c720e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API ArchMutableFileMapping</type>
        <definition>ARCH_API ArchMutableFileMapping ArchMapFileReadWrite</definition>
        <argsstring>(std::string const &amp;path, std::string *errMsg=nullptr)</argsstring>
        <name>ArchMapFileReadWrite</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>errMsg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga9691881eb2124ba476fc03287c546249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchMemAdvise</definition>
        <argsstring>(void const *addr, size_t len, ArchMemAdvice adv)</argsstring>
        <name>ArchMemAdvise</name>
        <param>
          <type>void const *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ArchMemAdvice</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Advise the OS regarding how the application intends to access a range of memory. </para>
        </briefdescription>
        <detaileddescription>
<para>See ArchMemAdvice. This is primarily useful for mapped file regions. This call does not change program semantics. It is only an optimization hint to the OS, and may be a no-op on some systems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga44413d89e1e0a1395882f7909cc42725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API bool</type>
        <definition>ARCH_API bool ArchQueryMappedMemoryResidency</definition>
        <argsstring>(void const *addr, size_t len, unsigned char *pageMap)</argsstring>
        <name>ArchQueryMappedMemoryResidency</name>
        <param>
          <type>void const *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>pageMap</declname>
        </param>
        <briefdescription>
<para>Report whether or not the mapped virtual memory pages starting at <computeroutput>addr</computeroutput> for <computeroutput>len</computeroutput> bytes are resident in RAM. </para>
        </briefdescription>
        <detaileddescription>
<para>Pages that are resident will not, when accessed, cause a page fault while those that are not will. Return true on success and false in case of an error. The <computeroutput>addr</computeroutput> argument must be a multiple of <ref refid="group__group__arch___system_functions_1ga02e2dc24bbe9c2f4a294ee21b85bd8d1" kindref="member">ArchGetPageSize()</ref>. The <computeroutput>len</computeroutput> argument need not be a multiple of the page size; it will be rounded up to the next page boundary. Fill <computeroutput>pageMap</computeroutput> with 0s for pages not resident in memory and 1s for pages that are. The <computeroutput>pageMap</computeroutput> argument must therefore point to at least (<computeroutput>len</computeroutput> + <ref refid="group__group__arch___system_functions_1ga02e2dc24bbe9c2f4a294ee21b85bd8d1" kindref="member">ArchGetPageSize()</ref>-1)/ArchGetPageSize() bytes.</para>
<para>Note that currently this function is only implemented on Linux and Darwin. On Windows it currently always returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga2f71670bb0a450af8eba1b180b6b7f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchPRead</definition>
        <argsstring>(FILE *file, void *buffer, size_t count, int64_t offset)</argsstring>
        <name>ArchPRead</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Read up to <computeroutput>count</computeroutput> bytes from <computeroutput>offset</computeroutput> in <computeroutput>file</computeroutput> into <computeroutput>buffer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The file position indicator for <computeroutput>file</computeroutput> is not changed. Return the number of bytes read, or zero if at end of file. Return -1 in case of an error, with errno set appropriately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gab23b99280f2faae45e580aeb3cc0840e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchPWrite</definition>
        <argsstring>(FILE *file, void const *bytes, size_t count, int64_t offset)</argsstring>
        <name>ArchPWrite</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Write up to <computeroutput>count</computeroutput> bytes from <computeroutput>buffer</computeroutput> to <computeroutput>file</computeroutput> at <computeroutput>offset</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The file position indicator for <computeroutput>file</computeroutput> is not changed. Return the number of bytes written, possibly zero if none written. Return -1 in case of an error, with errno set appropriately. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga28b4044d257d1c27cb7f4d1a0249987d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchReadLink</definition>
        <argsstring>(const char *path)</argsstring>
        <name>ArchReadLink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the value of the symbolic link at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the empty string on error or if <computeroutput>path</computeroutput> does not refer to a symbolic link. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga5b6c110db6de7ec3b3c325d3a1366844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void</type>
        <definition>ARCH_API void ArchFileAdvise</definition>
        <argsstring>(FILE *file, int64_t offset, size_t count, ArchFileAdvice adv)</argsstring>
        <name>ArchFileAdvise</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ArchFileAdvice</type>
          <declname>adv</declname>
        </param>
        <briefdescription>
<para>Advise the OS regarding how the application intends to access a range of bytes in a file. </para>
        </briefdescription>
        <detaileddescription>
<para>See ArchFileAdvice. This call does not change program semantics. It is only an optimization hint to the OS, and may be a no-op on some systems. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga048bd0a7e351ee9dac464df1e7dca129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void *</type>
        <definition>ARCH_API void* ArchLibraryOpen</definition>
        <argsstring>(const std::string &amp;filename, int flag)</argsstring>
        <name>ArchLibraryOpen</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para><ref refid="library_8h_source" kindref="compound">library.h</ref> Architecture dependent loading and unloading of dynamic libraries. </para>
        </briefdescription>
        <detaileddescription>
<para>Load an executable object file.</para>
<para>Opens the dynamic library that is specified by filename. Returning the handle to the module if successful; false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/library.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga3e119eac67e009c732bf44372e873737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchLibraryError</definition>
        <argsstring>()</argsstring>
        <name>ArchLibraryError</name>
        <briefdescription>
<para>Obtain a description of the most recent error that occurred from <computeroutput>ArchLibraryOpen</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/library.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga56a02702b89a80eaafd9811ee8b4e6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchLibraryClose</definition>
        <argsstring>(void *handle)</argsstring>
        <name>ArchLibraryClose</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Closes an object opened with <computeroutput>ArchLibraryOpen</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/library.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga3d06ab11a9dc0a7b35ef4e2a0c446b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API void *</type>
        <definition>ARCH_API void* ArchLibraryGetSymbolAddress</definition>
        <argsstring>(void *handle, const char *name)</argsstring>
        <name>ArchLibraryGetSymbolAddress</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Obtain the address of a symbol defined within an object opened with <computeroutput>ArchLibraryOpen</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtain the address of a symbol that is specified by name. Returning the address of the symbol if successful; nullptr otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/library.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga830f7cc5435f442eb7c9c8ef73a7b6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetCwd</definition>
        <argsstring>()</argsstring>
        <name>ArchGetCwd</name>
        <briefdescription>
<para>Return current working directory as a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/systemInfo.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga81c199343bf5734a952fd8c150b55019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API std::string</type>
        <definition>ARCH_API std::string ArchGetExecutablePath</definition>
        <argsstring>()</argsstring>
        <name>ArchGetExecutablePath</name>
        <briefdescription>
<para>Return the path to the program&apos;s executable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/systemInfo.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga02e2dc24bbe9c2f4a294ee21b85bd8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int</type>
        <definition>ARCH_API int ArchGetPageSize</definition>
        <argsstring>()</argsstring>
        <name>ArchGetPageSize</name>
        <briefdescription>
<para>Return the system&apos;s memory page size. Safe to assume power-of-two. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/systemInfo.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga56912caaf2ab1ba67092c1e9004062b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ArchGetTickTime</definition>
        <argsstring>()</argsstring>
        <name>ArchGetTickTime</name>
        <briefdescription>
<para>Return the current time in system-dependent units. </para>
        </briefdescription>
        <detaileddescription>
<para>The current time is returned as a number of &quot;ticks&quot;, where each tick represents some system-dependent amount of time. The resolution of the timing routines varies, but on all systems, it is well under one microsecond. The cost of this routine is in the 10s-to-100s of nanoseconds on GHz class machines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="62" column="1" bodyfile="pxr/base/arch/timing.h" bodystart="62" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga8221991d099ef519bdc079c6b9c1e6d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ArchGetStartTickTime</definition>
        <argsstring>()</argsstring>
        <name>ArchGetStartTickTime</name>
        <briefdescription>
<para>Get a &quot;start&quot; tick time for measuring an interval of time, followed by a later call to <ref refid="group__group__arch___system_functions_1ga9b2ea643e8705132bb817b688ce4c7d3" kindref="member">ArchGetStopTickTime()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Or see <ref refid="struct_arch_interval_timer" kindref="compound">ArchIntervalTimer</ref>. This is like ArchGetTickTime but it includes compiler &amp; CPU fencing &amp; reordering constraints in an attempt to get the best measurement possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="85" column="1" bodyfile="pxr/base/arch/timing.h" bodystart="85" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga9b2ea643e8705132bb817b688ce4c7d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ArchGetStopTickTime</definition>
        <argsstring>()</argsstring>
        <name>ArchGetStopTickTime</name>
        <briefdescription>
<para>Get a &quot;stop&quot; tick time for measuring an interval of time. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__group__arch___system_functions_1ga8221991d099ef519bdc079c6b9c1e6d7" kindref="member">ArchGetStartTickTime()</ref> or <ref refid="struct_arch_interval_timer" kindref="compound">ArchIntervalTimer</ref>. This is like ArchGetTickTime but it includes compiler &amp; CPU fencing &amp; reordering constraints in an attempt to get the best measurement possible. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="126" column="1" bodyfile="pxr/base/arch/timing.h" bodystart="126" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga572b6e13e470a8a565f850528902349f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API uint64_t</type>
        <definition>ARCH_API uint64_t ArchGetTickQuantum</definition>
        <argsstring>()</argsstring>
        <name>ArchGetTickQuantum</name>
        <briefdescription>
<para>Return the tick time resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>Although the number of ticks per second may be very large, on many current systems the tick timers do not update at that rate. Rather, sequential calls to <ref refid="group__group__arch___system_functions_1ga56912caaf2ab1ba67092c1e9004062b8" kindref="member">ArchGetTickTime()</ref> may report increases of 10s to 100s of ticks, with a minimum increment betwewen calls. This function returns that minimum increment as measured at startup time.</para>
<para>Note that if this value is of sufficient size, then short times measured with tick timers are potentially subject to significant noise. In particular, an interval of measured tick time is liable to be off by +/- one <ref refid="group__group__arch___system_functions_1ga572b6e13e470a8a565f850528902349f" kindref="member">ArchGetTickQuantum()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga86f077eb9ca0a0595960e82483b1ac2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API uint64_t</type>
        <definition>ARCH_API uint64_t ArchGetIntervalTimerTickOverhead</definition>
        <argsstring>()</argsstring>
        <name>ArchGetIntervalTimerTickOverhead</name>
        <briefdescription>
<para>Return the ticks taken to record an interval of time with <ref refid="struct_arch_interval_timer" kindref="compound">ArchIntervalTimer</ref>, as measured at startup time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gacc2dbcb63b1ff62ab92e92b4f3f168b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API int64_t</type>
        <definition>ARCH_API int64_t ArchTicksToNanoseconds</definition>
        <argsstring>(uint64_t nTicks)</argsstring>
        <name>ArchTicksToNanoseconds</name>
        <param>
          <type>uint64_t</type>
          <declname>nTicks</declname>
        </param>
        <briefdescription>
<para>Convert a duration measured in &quot;ticks&quot;, as returned by <computeroutput><ref refid="group__group__arch___system_functions_1ga56912caaf2ab1ba67092c1e9004062b8" kindref="member">ArchGetTickTime()</ref></computeroutput>, to nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>An example to test the timing routines would be: <programlisting><codeline><highlight class="normal">ArchIntervalTimer<sp/>iTimer;</highlight></codeline>
<codeline><highlight class="normal">sleep(10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>duration<sp/>should<sp/>be<sp/>approximately<sp/>10///<sp/>1e9<sp/>=<sp/>1e10<sp/>nanoseconds.</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>duration<sp/>=<sp/>ArchTicksToNanoseconds(iTimer.GetElapsedTicks());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gaa176ee57289b654051b496302258aea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API double</type>
        <definition>ARCH_API double ArchTicksToSeconds</definition>
        <argsstring>(uint64_t nTicks)</argsstring>
        <name>ArchTicksToSeconds</name>
        <param>
          <type>uint64_t</type>
          <declname>nTicks</declname>
        </param>
        <briefdescription>
<para>Convert a duration measured in &quot;ticks&quot;, as returned by <computeroutput><ref refid="group__group__arch___system_functions_1ga56912caaf2ab1ba67092c1e9004062b8" kindref="member">ArchGetTickTime()</ref></computeroutput>, to seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1gac9173ab8372aefeb88bc66159602cfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API uint64_t</type>
        <definition>ARCH_API uint64_t ArchSecondsToTicks</definition>
        <argsstring>(double seconds)</argsstring>
        <name>ArchSecondsToTicks</name>
        <param>
          <type>double</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Convert a duration in seconds to &quot;ticks&quot;, as returned by <computeroutput><ref refid="group__group__arch___system_functions_1ga56912caaf2ab1ba67092c1e9004062b8" kindref="member">ArchGetTickTime()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga91e35898cdeaf2bb462debb6d26c438a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ARCH_API double</type>
        <definition>ARCH_API double ArchGetNanosecondsPerTick</definition>
        <argsstring>()</argsstring>
        <name>ArchGetNanosecondsPerTick</name>
        <briefdescription>
<para>Get nanoseconds per tick. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful when converting ticks obtained from <computeroutput>ArchTickTime()</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__arch___system_functions_1ga9edb5d18967d438986cbd19e161cd02f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t ArchMeasureExecutionTime</definition>
        <argsstring>(Fn const &amp;fn, uint64_t maxTicks=1e7, bool *reachedConsensus=nullptr)</argsstring>
        <name>ArchMeasureExecutionTime</name>
        <param>
          <type>Fn const &amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>maxTicks</declname>
          <defval>1e7</defval>
        </param>
        <param>
          <type>bool *</type>
          <declname>reachedConsensus</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Run <computeroutput>fn</computeroutput> repeatedly attempting to determine a consensus fastest execution time with low noise, for up to <computeroutput>maxTicks</computeroutput>, then return the consensus fastest execution time. </para>
        </briefdescription>
        <detaileddescription>
<para>If a consensus is not reached in that time, return a best estimate instead. If <computeroutput>reachedConsensus</computeroutput> is not null, set it to indicate whether or not a consensus was reached. This function ignores <computeroutput>maxTicks</computeroutput> greater than 5 billion ticks and runs for up to 5 billion ticks instead. The <computeroutput>fn</computeroutput> will run for an indeterminate number of times, so it should be side-effect free. Also, it should do essentially the same work on every invocation so that timing its execution makes sense. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/timing.h" line="331" column="1" bodyfile="pxr/base/arch/timing.h" bodystart="331" bodyend="354"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__arch___system_functions_1gae78e9a15b56a6dc843d1ae40f46650c4" prot="public" static="no">
        <name>ARCH_GLOB_NOCHECK</name>
        <initializer>GLOB_NOCHECK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="85" column="14" bodyfile="pxr/base/arch/fileSystem.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gabdb74929775eb1a265a41644dada741e" prot="public" static="no">
        <name>ARCH_GLOB_MARK</name>
        <initializer>GLOB_MARK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="86" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaa9c0ec0afe3e9e6b4542058b3b617ffc" prot="public" static="no">
        <name>ARCH_GLOB_NOSORT</name>
        <initializer>GLOB_NOSORT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="87" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gad88b7ed267db99c018715146cf0398ed" prot="public" static="no">
        <name>ARCH_GLOB_DEFAULT</name>
        <initializer>(ARCH_GLOB_NOCHECK | ARCH_GLOB_MARK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="89" column="10" bodyfile="pxr/base/arch/fileSystem.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga42214c13ceccc9134781b0f2b6d7bf5e" prot="public" static="no">
        <name>ARCH_PATH_MAX</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="101" column="52" bodyfile="pxr/base/arch/fileSystem.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga48dc011488184e569a769337c95a054a" prot="public" static="no">
        <name>ARCH_PATH_SEP</name>
        <initializer>&quot;/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="112" column="14" bodyfile="pxr/base/arch/fileSystem.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga32795219b148e1108cb467689094b5ec" prot="public" static="no">
        <name>ARCH_PATH_LIST_SEP</name>
        <initializer>&quot;:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="113" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga10143d3d319d5313d702d5d0f136b398" prot="public" static="no">
        <name>ARCH_REL_PATH_IDENT</name>
        <initializer>&quot;./&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="114" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga00fbb4b017020dbed5d50d61959f5676" prot="public" static="no">
        <name>ArchChmod</name>
        <param><defname>path</defname></param>
        <param><defname>mode</defname></param>
        <initializer>chmod(path, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="139" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga4bf018568a74ecf445a37ecfc19bc84c" prot="public" static="no">
        <name>ArchCloseFile</name>
        <param><defname>fd</defname></param>
        <initializer>close(fd)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="145" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaf3ef35f7ff267ed96b7b698eb230c29a" prot="public" static="no">
        <name>ArchUnlinkFile</name>
        <param><defname>path</defname></param>
        <initializer>unlink(path)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="151" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga19c346ae764d7c343cf14e8cd77968ff" prot="public" static="no">
        <name>ArchFileAccess</name>
        <param><defname>path</defname></param>
        <param><defname>mode</defname></param>
        <initializer>access(path, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="157" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga951167096140ce8c9f68872c9e29aa16" prot="public" static="no">
        <name>ArchFdOpen</name>
        <param><defname>fd</defname></param>
        <param><defname>mode</defname></param>
        <initializer>fdopen(fd, mode)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="163" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga2d81fa1da6366a38d5ea979d6fc17ad8" prot="public" static="no">
        <name>ArchFileNo</name>
        <param><defname>stream</defname></param>
        <initializer>fileno(stream)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="169" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1ga2f6e5120d25f9981dcab82e0101350ae" prot="public" static="no">
        <name>ArchFileIsaTTY</name>
        <param><defname>stream</defname></param>
        <initializer>isatty(stream)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="175" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__arch___system_functions_1gaa1259e52de47c0eeec8a966bd5bc469d" prot="public" static="no">
        <name>ArchRmDir</name>
        <param><defname>path</defname></param>
        <initializer>rmdir(path)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/arch/fileSystem.h" line="181" column="13" bodyfile="pxr/base/arch/fileSystem.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that encapsulate differing low-level system calls. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
