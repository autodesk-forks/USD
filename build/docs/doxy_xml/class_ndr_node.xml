<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_ndr_node" kind="class" language="C++" prot="public">
    <compoundname>NdrNode</compoundname>
    <derivedcompoundref refid="class_sdr_shader_node" prot="public" virt="non-virtual">SdrShaderNode</derivedcompoundref>
    <includes refid="ndr_2node_8h" local="no">node.h</includes>
      <sectiondef kind="user-defined">
      <header>The Basics</header>
      <memberdef kind="function" id="class_ndr_node_1a56660909bf6bc7cccafbe39d14a0ba8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
        <definition>const NdrIdentifier&amp; GetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetIdentifier</name>
        <briefdescription>
<para>Return the identifier of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="73" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a270b251e08d8587ee3a9c8e4bd302ff8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>NdrVersion</type>
        <definition>NdrVersion GetVersion</definition>
        <argsstring>() const</argsstring>
        <name>GetVersion</name>
        <briefdescription>
<para>Return the version of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="76" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a5b52ba705bd2cbff2d8ba9a1fb0b39d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetName</definition>
        <argsstring>() const</argsstring>
        <name>GetName</name>
        <briefdescription>
<para>Gets the name of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="79" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1acf302c95c871b993ab24f59856acfe46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>const TfToken&amp; GetFamily</definition>
        <argsstring>() const</argsstring>
        <name>GetFamily</name>
        <briefdescription>
<para>Gets the name of the family that the node belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para>An empty token will be returned if the node does not belong to a family. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="83" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1ac69ec85a964f5459e49e1408dc0d4e16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>const TfToken&amp; GetContext</definition>
        <argsstring>() const</argsstring>
        <name>GetContext</name>
        <briefdescription>
<para>Gets the context of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>The context is the context that the node declares itself as having (or, if a particular node does not declare a context, it will be assigned a default context by the parser).</para>
<para>As a concrete example from the <computeroutput>Sdr</computeroutput> library, a shader with a specific source type may perform different duties vs. another shader with the same source type. For example, one shader with a source type of <computeroutput>SdrArgsParser::SourceType</computeroutput> may declare itself as having a context of &apos;pattern&apos;, while another shader of the same source type may say it is used for lighting, and thus has a context of &apos;light&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="97" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a552a651875e4dbe319770af335913253" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>const TfToken&amp; GetSourceType</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceType</name>
        <briefdescription>
<para>Gets the type of source that this node originated from. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this is distinct from <computeroutput><ref refid="class_ndr_node_1ac69ec85a964f5459e49e1408dc0d4e16" kindref="member">GetContext()</ref></computeroutput>, which is the type that the node declares itself as having.</para>
<para>As a concrete example from the <computeroutput>Sdr</computeroutput> library, several shader parsers exist and operate on different types of shaders. In this scenario, each distinct type of shader (OSL, Args, etc) is considered a different <emphasis>source</emphasis>, even though they are all shaders. In addition, the shaders under each source type may declare themselves as having a specific context (shaders can serve different roles). See <computeroutput><ref refid="class_ndr_node_1ac69ec85a964f5459e49e1408dc0d4e16" kindref="member">GetContext()</ref></computeroutput> for more information on this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="111" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1aabf19757b3cebfbd39863d025fcf3124" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetResolvedDefinitionURI</definition>
        <argsstring>() const</argsstring>
        <name>GetResolvedDefinitionURI</name>
        <briefdescription>
<para>Gets the URI to the resource that provided this node&apos;s definition. </para>
        </briefdescription>
        <detaileddescription>
<para>Could be a path to a file, or some other resource identifier. This URI should be fully resolved.</para>
<para><simplesect kind="see"><para><ref refid="class_ndr_node_1ae26cea86218de93b2054ab2edfed402a" kindref="member">NdrNode::GetResolvedImplementationURI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="118" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1ae26cea86218de93b2054ab2edfed402a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetResolvedImplementationURI</definition>
        <argsstring>() const</argsstring>
        <name>GetResolvedImplementationURI</name>
        <briefdescription>
<para>Gets the URI to the resource that provides this node&apos;s implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Could be a path to a file, or some other resource identifier. This URI should be fully resolved.</para>
<para><simplesect kind="see"><para><ref refid="class_ndr_node_1aabf19757b3cebfbd39863d025fcf3124" kindref="member">NdrNode::GetResolvedDefinitionURI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="125" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a339db7fbde449055832c9cb97e55930d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetSourceCode</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceCode</name>
        <briefdescription>
<para>Returns the source code for this node. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be empty for most nodes. It will be non-empty only for the nodes that are constructed using <ref refid="class_ndr_registry_1a391e8cb4eeb3223aff3d725920830564" kindref="member">NdrRegistry::GetNodeFromSourceCode()</ref>, in which case, the source code has not been parsed (or even compiled) yet.</para>
<para>An unparsed node with non-empty source-code but no properties is considered to be invalid. Once the node is parsed and the relevant properties and metadata are extracted from the source code, the node becomes valid.</para>
<para><simplesect kind="see"><para><ref refid="class_ndr_node_1a50dbd3d2deafeebaaef88247c38b338d" kindref="member">NdrNode::IsValid</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="138" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a50dbd3d2deafeebaaef88247c38b338d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>NDR_API bool</type>
        <definition>virtual NDR_API bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Whether or not this node is valid. </para>
        </briefdescription>
        <detaileddescription>
<para>A node that is valid indicates that the parser plugin was able to successfully parse the contents of this node.</para>
<para>Note that if a node is not valid, some data like its name, URI, source code etc. could still be available (data that was obtained during the discovery process). However, other data that must be gathered from the parsing process will NOT be available (eg, inputs and outputs). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="149" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a81c8a5b9c158bfd6bb2682c469c44fd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>NDR_API std::string</type>
        <definition>virtual NDR_API std::string GetInfoString</definition>
        <argsstring>() const</argsstring>
        <name>GetInfoString</name>
        <briefdescription>
<para>Gets a string with basic information about this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Helpful for things like adding this node to a log. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Inputs and Outputs</header>
      <description><para>An input or output is also generically referred to as a &quot;property&quot;. </para>
</description>
      <memberdef kind="function" id="class_ndr_node_1ad490b06f671e5ac39a4abd61289a9b05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API const NdrTokenVec &amp;</type>
        <definition>NDR_API const NdrTokenVec&amp; GetInputNames</definition>
        <argsstring>() const</argsstring>
        <name>GetInputNames</name>
        <briefdescription>
<para>Get an ordered list of all the input names on this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a39aac36af8a2a852ea00be29b4ffd386" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API const NdrTokenVec &amp;</type>
        <definition>NDR_API const NdrTokenVec&amp; GetOutputNames</definition>
        <argsstring>() const</argsstring>
        <name>GetOutputNames</name>
        <briefdescription>
<para>Get an ordered list of all the output names on this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a2d8d8881bd2b08de5cbbfb87b38a37ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API NdrPropertyConstPtr</type>
        <definition>NDR_API NdrPropertyConstPtr GetInput</definition>
        <argsstring>(const TfToken &amp;inputName) const</argsstring>
        <name>GetInput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>inputName</declname>
        </param>
        <briefdescription>
<para>Get an input property by name. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> is returned if an input with the given name does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a4fdb1034d86496427f78b133892f8690" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API NdrPropertyConstPtr</type>
        <definition>NDR_API NdrPropertyConstPtr GetOutput</definition>
        <argsstring>(const TfToken &amp;outputName) const</argsstring>
        <name>GetOutput</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>outputName</declname>
        </param>
        <briefdescription>
<para>Get an output property by name. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>nullptr</computeroutput> is returned if an output with the given name does not exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="179" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Metadata</header>
      <description><para>The metadata returned here is a direct result of what the parser plugin is able to determine about the node.</para>
<para>See the documentation for a specific parser plugin to get help on what the parser is looking for to populate these values. </para>
</description>
      <memberdef kind="function" id="class_ndr_node_1a269d6be4f012db54c5ff468db4d1a3dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API const NdrTokenMap &amp;</type>
        <definition>NDR_API const NdrTokenMap&amp; GetMetadata</definition>
        <argsstring>() const</argsstring>
        <name>GetMetadata</name>
        <briefdescription>
<para>All metadata that came from the parse process. </para>
        </briefdescription>
        <detaileddescription>
<para>Specialized nodes may isolate values in the metadata (with possible manipulations and/or additional parsing) and expose those values in their API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="195" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_ndr_node_1a934810816b55b3137fc1b8c6cde23ef8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _isValid</definition>
        <argsstring></argsstring>
        <name>_isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="202" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a9da446a87c6292c753228bdf35520dad" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref></type>
        <definition>NdrIdentifier _identifier</definition>
        <argsstring></argsstring>
        <name>_identifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="203" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a7e3843f5a43e284f3d557561ce300e98" prot="protected" static="no" mutable="no">
        <type>NdrVersion</type>
        <definition>NdrVersion _version</definition>
        <argsstring></argsstring>
        <name>_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="204" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1aaf2ed934b37cbbd236fdd1b01a5f5005" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="205" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a7ad68e28396ec7a3aa4f085bf137eb89" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _family</definition>
        <argsstring></argsstring>
        <name>_family</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="206" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a7507fea31b9da4774f30b6bda37454d2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _context</definition>
        <argsstring></argsstring>
        <name>_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="207" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1aacda32dd7da3c6e148ff939b0f3025e3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _sourceType</definition>
        <argsstring></argsstring>
        <name>_sourceType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="208" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1ac6066cfa841857394b3450e7149a449b" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _definitionURI</definition>
        <argsstring></argsstring>
        <name>_definitionURI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="209" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a9bee005befe3f61e1c8bcbbb275f88fd" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _implementationURI</definition>
        <argsstring></argsstring>
        <name>_implementationURI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="210" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a8d346628320c97ea0a7b96c35f6ac97a" prot="protected" static="no" mutable="no">
        <type>NdrPropertyUniquePtrVec</type>
        <definition>NdrPropertyUniquePtrVec _properties</definition>
        <argsstring></argsstring>
        <name>_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="211" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a27c7adcfc5510ce6b0e8962c31aaef5e" prot="protected" static="no" mutable="no">
        <type>NdrTokenMap</type>
        <definition>NdrTokenMap _metadata</definition>
        <argsstring></argsstring>
        <name>_metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="212" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1ad2de6782c6b553cadb964f343f723d5a" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _sourceCode</definition>
        <argsstring></argsstring>
        <name>_sourceCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="213" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a6eafd197d2360cea0580eb237675385d" prot="protected" static="no" mutable="no">
        <type>NdrPropertyPtrMap</type>
        <definition>NdrPropertyPtrMap _inputs</definition>
        <argsstring></argsstring>
        <name>_inputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="215" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a34a1e6bf8287324ed937908a8d096a3f" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _inputNames</definition>
        <argsstring></argsstring>
        <name>_inputNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="216" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1a883a28012f4227e0f41aea025e35f843" prot="protected" static="no" mutable="no">
        <type>NdrPropertyPtrMap</type>
        <definition>NdrPropertyPtrMap _outputs</definition>
        <argsstring></argsstring>
        <name>_outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="217" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_ndr_node_1ad08e2d7ac8db1513fa30c74e05a862b0" prot="protected" static="no" mutable="no">
        <type>NdrTokenVec</type>
        <definition>NdrTokenVec _outputNames</definition>
        <argsstring></argsstring>
        <name>_outputNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="218" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ndr_node_1a1b4685f5e146f4a44e0d3b7c53841ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NDR_API</type>
        <definition>NDR_API NdrNode</definition>
        <argsstring>(const NdrIdentifier &amp;identifier, const NdrVersion &amp;version, const std::string &amp;name, const TfToken &amp;family, const TfToken &amp;context, const TfToken &amp;sourceType, const std::string &amp;definitionURI, const std::string &amp;implementationURI, NdrPropertyUniquePtrVec &amp;&amp;properties, const NdrTokenMap &amp;metadata=NdrTokenMap(), const std::string &amp;sourceCode=std::string())</argsstring>
        <name>NdrNode</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">NdrIdentifier</ref> &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const NdrVersion &amp;</type>
          <declname>version</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>sourceType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>definitionURI</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>implementationURI</declname>
        </param>
        <param>
          <type>NdrPropertyUniquePtrVec &amp;&amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const NdrTokenMap &amp;</type>
          <declname>metadata</declname>
          <defval>NdrTokenMap()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sourceCode</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_ndr_node_1a9694f80d0b137fe24dbe0baa3d8d7200" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>NDR_API</type>
        <definition>virtual NDR_API ~NdrNode</definition>
        <argsstring>()</argsstring>
        <name>~NdrNode</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_ndr_node_1a50671b1524efb60e8369a234fa622f89" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_ndr_node" kindref="compound">NdrNode</ref> &amp;</type>
        <definition>NdrNode&amp; operator=</definition>
        <argsstring>(const NdrNode &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_ndr_node" kindref="compound">NdrNode</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/ndr/node.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an abstract node. </para>
    </briefdescription>
    <detaileddescription>
<para>Describes information like the name of the node, what its inputs and outputs are, and any associated metadata.</para>
<para>In almost all cases, this class will not be used directly. More specialized nodes can be created that derive from <computeroutput><ref refid="class_ndr_node" kindref="compound">NdrNode</ref></computeroutput>; those specialized nodes can add their own domain-specific data and methods. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4301">
        <label>NdrNode</label>
        <link refid="class_ndr_node"/>
      </node>
      <node id="4302">
        <label>SdrShaderNode</label>
        <link refid="class_sdr_shader_node"/>
        <childnode refid="4301" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4303">
        <label>NdrNode</label>
        <link refid="class_ndr_node"/>
        <childnode refid="4304" relation="usage">
          <edgelabel>_family</edgelabel>
          <edgelabel>_context</edgelabel>
          <edgelabel>_sourceType</edgelabel>
          <edgelabel>_identifier</edgelabel>
        </childnode>
      </node>
      <node id="4304">
        <label>TfToken</label>
        <link refid="class_tf_token"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/ndr/node.h" line="49" column="1" bodyfile="pxr/usd/ndr/node.h" bodystart="48" bodyend="219"/>
    <listofallmembers>
      <member refid="class_ndr_node_1a7507fea31b9da4774f30b6bda37454d2" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_context</name></member>
      <member refid="class_ndr_node_1ac6066cfa841857394b3450e7149a449b" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_definitionURI</name></member>
      <member refid="class_ndr_node_1a7ad68e28396ec7a3aa4f085bf137eb89" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_family</name></member>
      <member refid="class_ndr_node_1a9da446a87c6292c753228bdf35520dad" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_identifier</name></member>
      <member refid="class_ndr_node_1a9bee005befe3f61e1c8bcbbb275f88fd" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_implementationURI</name></member>
      <member refid="class_ndr_node_1a34a1e6bf8287324ed937908a8d096a3f" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_inputNames</name></member>
      <member refid="class_ndr_node_1a6eafd197d2360cea0580eb237675385d" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_inputs</name></member>
      <member refid="class_ndr_node_1a934810816b55b3137fc1b8c6cde23ef8" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_isValid</name></member>
      <member refid="class_ndr_node_1a27c7adcfc5510ce6b0e8962c31aaef5e" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_metadata</name></member>
      <member refid="class_ndr_node_1aaf2ed934b37cbbd236fdd1b01a5f5005" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_name</name></member>
      <member refid="class_ndr_node_1ad08e2d7ac8db1513fa30c74e05a862b0" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_outputNames</name></member>
      <member refid="class_ndr_node_1a883a28012f4227e0f41aea025e35f843" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_outputs</name></member>
      <member refid="class_ndr_node_1a8d346628320c97ea0a7b96c35f6ac97a" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_properties</name></member>
      <member refid="class_ndr_node_1ad2de6782c6b553cadb964f343f723d5a" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_sourceCode</name></member>
      <member refid="class_ndr_node_1aacda32dd7da3c6e148ff939b0f3025e3" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_sourceType</name></member>
      <member refid="class_ndr_node_1a7e3843f5a43e284f3d557561ce300e98" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>_version</name></member>
      <member refid="class_ndr_node_1ac69ec85a964f5459e49e1408dc0d4e16" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetContext</name></member>
      <member refid="class_ndr_node_1acf302c95c871b993ab24f59856acfe46" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetFamily</name></member>
      <member refid="class_ndr_node_1a56660909bf6bc7cccafbe39d14a0ba8e" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetIdentifier</name></member>
      <member refid="class_ndr_node_1a81c8a5b9c158bfd6bb2682c469c44fd9" prot="public" virt="virtual"><scope>NdrNode</scope><name>GetInfoString</name></member>
      <member refid="class_ndr_node_1a2d8d8881bd2b08de5cbbfb87b38a37ed" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetInput</name></member>
      <member refid="class_ndr_node_1ad490b06f671e5ac39a4abd61289a9b05" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetInputNames</name></member>
      <member refid="class_ndr_node_1a269d6be4f012db54c5ff468db4d1a3dd" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetMetadata</name></member>
      <member refid="class_ndr_node_1a5b52ba705bd2cbff2d8ba9a1fb0b39d8" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetName</name></member>
      <member refid="class_ndr_node_1a4fdb1034d86496427f78b133892f8690" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetOutput</name></member>
      <member refid="class_ndr_node_1a39aac36af8a2a852ea00be29b4ffd386" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetOutputNames</name></member>
      <member refid="class_ndr_node_1aabf19757b3cebfbd39863d025fcf3124" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetResolvedDefinitionURI</name></member>
      <member refid="class_ndr_node_1ae26cea86218de93b2054ab2edfed402a" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetResolvedImplementationURI</name></member>
      <member refid="class_ndr_node_1a339db7fbde449055832c9cb97e55930d" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetSourceCode</name></member>
      <member refid="class_ndr_node_1a552a651875e4dbe319770af335913253" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetSourceType</name></member>
      <member refid="class_ndr_node_1a270b251e08d8587ee3a9c8e4bd302ff8" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>GetVersion</name></member>
      <member refid="class_ndr_node_1a50dbd3d2deafeebaaef88247c38b338d" prot="public" virt="virtual"><scope>NdrNode</scope><name>IsValid</name></member>
      <member refid="class_ndr_node_1a1b4685f5e146f4a44e0d3b7c53841ad9" prot="public" virt="non-virtual"><scope>NdrNode</scope><name>NdrNode</name></member>
      <member refid="class_ndr_node_1a50671b1524efb60e8369a234fa622f89" prot="protected" virt="non-virtual"><scope>NdrNode</scope><name>operator=</name></member>
      <member refid="class_ndr_node_1a9694f80d0b137fe24dbe0baa3d8d7200" prot="public" virt="virtual"><scope>NdrNode</scope><name>~NdrNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
