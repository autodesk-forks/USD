<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_file_format" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>SdfFileFormat</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <derivedcompoundref refid="class_sdf_text_file_format" prot="public" virt="non-virtual">SdfTextFileFormat</derivedcompoundref>
    <derivedcompoundref refid="class_usd_usdc_file_format" prot="public" virt="non-virtual">UsdUsdcFileFormat</derivedcompoundref>
    <derivedcompoundref refid="class_usd_usd_file_format" prot="public" virt="non-virtual">UsdUsdFileFormat</derivedcompoundref>
    <derivedcompoundref refid="class_usd_usdz_file_format" prot="public" virt="non-virtual">UsdUsdzFileFormat</derivedcompoundref>
    <includes refid="file_format_8h" local="no">fileFormat.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string, std::string&gt; FileFormatArguments</definition>
        <argsstring></argsstring>
        <name>FileFormatArguments</name>
        <briefdescription>
<para>Type for specifying additional file format-specific arguments to the various API below. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="119" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_file_format_1aba5da2da1272c34471ec40765cb680aa" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>const SdfSchemaBase&amp; _schema</definition>
        <argsstring></argsstring>
        <name>_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="505" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1a5299b3714740100949ec48753c71472d" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>const TfToken _formatId</definition>
        <argsstring></argsstring>
        <name>_formatId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="506" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1ab31a244f60f1e282a283761c8c457936" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>const TfToken _target</definition>
        <argsstring></argsstring>
        <name>_target</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="507" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1ac49859f592575e7714a43655d0ce73e5" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string _cookie</definition>
        <argsstring></argsstring>
        <name>_cookie</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="508" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1a35d97ac4e1b515007814c4052c4d0088" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>const TfToken _versionString</definition>
        <argsstring></argsstring>
        <name>_versionString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="509" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1a4c9c5faa3529048e2745edd7d06e0a5e" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; std::string &gt;</type>
        <definition>const std::vector&lt;std::string&gt; _extensions</definition>
        <argsstring></argsstring>
        <name>_extensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="510" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_file_format_1ab9cd5f16779155dad933c590e8f4f7ac" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool _isPrimaryFormat</definition>
        <argsstring></argsstring>
        <name>_isPrimaryFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="511" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_file_format_1a48e9cf3f2434d3311eeb2e04c10e8156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfFileFormat</definition>
        <argsstring>(const SdfFileFormat &amp;)=delete</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ae044dff6cb8c0aa5231692938ce0d287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref> &amp;</type>
        <definition>SdfFileFormat&amp; operator=</definition>
        <argsstring>(const SdfFileFormat &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>SDF_API const SdfSchemaBase&amp; GetSchema</definition>
        <argsstring>() const</argsstring>
        <name>GetSchema</name>
        <briefdescription>
<para>Returns the schema for this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1af94cee934d3f9f57ddec5d6ba4ab0f72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDF_API const TfToken&amp; GetFormatId</definition>
        <argsstring>() const</argsstring>
        <name>GetFormatId</name>
        <briefdescription>
<para>Returns the format identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1affc99189439fce34c0c63d91a476b1b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDF_API const TfToken&amp; GetTarget</definition>
        <argsstring>() const</argsstring>
        <name>GetTarget</name>
        <briefdescription>
<para>Returns the target for this file format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ae2231eaa1ca0583f91a97f07cd51f731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetFileCookie</definition>
        <argsstring>() const</argsstring>
        <name>GetFileCookie</name>
        <briefdescription>
<para>Returns the cookie to be used when writing files with this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ac2060c617124b513ccf799426ce149e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
        <definition>SDF_API const TfToken&amp; GetVersionString</definition>
        <argsstring>() const</argsstring>
        <name>GetVersionString</name>
        <briefdescription>
<para>Returns the current version of this file format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ad92ebb5ec62184ddbc8913e4f05db070" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsPrimaryFormatForExtensions</definition>
        <argsstring>() const</argsstring>
        <name>IsPrimaryFormatForExtensions</name>
        <briefdescription>
<para>Returns true if this file format is the primary format for the extensions it handles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ab332582e9e4898a6462207fefe608ba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::vector&lt; std::string &gt; &amp;</type>
        <definition>SDF_API const std::vector&lt;std::string&gt;&amp; GetFileExtensions</definition>
        <argsstring>() const</argsstring>
        <name>GetFileExtensions</name>
        <briefdescription>
<para>Returns a list of extensions that this format supports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a855ff6edf7f38b3a8863f597ebe557c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetPrimaryFileExtension</definition>
        <argsstring>() const</argsstring>
        <name>GetPrimaryFileExtension</name>
        <briefdescription>
<para>Returns the primary file extension for this format. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the extension that is reported for layers using this file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ae5349dcbdcfd8c009af50d11c717e071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsSupportedExtension</definition>
        <argsstring>(const std::string &amp;extension) const</argsstring>
        <name>IsSupportedExtension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>extension</computeroutput> matches one of the extensions returned by GetFileExtensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a688a3cc6628e445cc997e8952a434170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool IsPackage</definition>
        <argsstring>() const</argsstring>
        <name>IsPackage</name>
        <reimplementedby refid="class_usd_usdz_file_format_1a22a78b7fcfad11ec89c3fa0d6af3eade">IsPackage</reimplementedby>
        <briefdescription>
<para>Returns true if this file format is a package containing other assets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ae20721adeae2ab3e3f03b468d7c938c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::string</type>
        <definition>virtual SDF_API std::string GetPackageRootLayerPath</definition>
        <argsstring>(const std::string &amp;resolvedPath) const</argsstring>
        <name>GetPackageRootLayerPath</name>
        <reimplementedby refid="class_usd_usdz_file_format_1a9ce9d0e8ec7208d62ee956ebe74815a7">GetPackageRootLayerPath</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <briefdescription>
<para>Returns the path of the &quot;root&quot; layer contained in the package layer at <computeroutput>resolvedPath</computeroutput> produced by this file format. </para>
        </briefdescription>
        <detaileddescription>
<para>If this file format is not a package, returns the empty string.</para>
<para>The package root layer is the layer in the package layer that is used when that package is opened via <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a830ffcfcd3441b645265536b05da4412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref></type>
        <definition>virtual SDF_API FileFormatArguments GetDefaultFileFormatArguments</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultFileFormatArguments</name>
        <briefdescription>
<para>Returns the FileFormatArguments that correspond to the default behavior of this file format when no FileFormatArguments are passed to NewLayer or InitData. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a7e6fe1b90e69c2f271c631b2e0597b23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API SdfAbstractDataRefPtr</type>
        <definition>virtual SDF_API SdfAbstractDataRefPtr InitData</definition>
        <argsstring>(const FileFormatArguments &amp;args) const</argsstring>
        <name>InitData</name>
        <reimplementedby refid="class_usd_usdc_file_format_1af4a11abfcd34d5fb2d449601edca3fbb">InitData</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a4c75d117fd7aadba7bac14e6d4baecdb">InitData</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a4c75d117fd7aadba7bac14e6d4baecdb">InitData</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>This method allows the file format to bind to whatever data container is appropriate. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a shared pointer to an <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1adc9391d69494e36aae0cbb1ca7007526" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfAbstractDataRefPtr</type>
        <definition>SDF_API SdfAbstractDataRefPtr InitDetachedData</definition>
        <argsstring>(const FileFormatArguments &amp;args) const</argsstring>
        <name>InitDetachedData</name>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> providing access to the layer&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para>This data object is detached from any underlying storage. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a79344fd3d6748c5beee6198a41fcd141" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>SDF_API SdfLayerRefPtr NewLayer</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const std::string &amp;realPath, const ArAssetInfo &amp;assetInfo, const FileFormatArguments &amp;args) const</argsstring>
        <name>NewLayer</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>realPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref> &amp;</type>
          <declname>assetInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Instantiate a layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ae5bee0843fce18d3c607c0b56b118319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ShouldSkipAnonymousReload</definition>
        <argsstring>() const</argsstring>
        <name>ShouldSkipAnonymousReload</name>
        <briefdescription>
<para>Return true if this file format prefers to skip reloading anonymous layers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a50928a94b9625eb1a149e07944ddb99d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ShouldReadAnonymousLayers</definition>
        <argsstring>() const</argsstring>
        <name>ShouldReadAnonymousLayers</name>
        <briefdescription>
<para>Returns true if anonymous layer identifiers should be passed to Read when a layer is opened or reloaded. </para>
        </briefdescription>
        <detaileddescription>
<para>Anonymous layers will not have an asset backing and thus for most file formats there is nothing that can be read for an anonymous layer. However, there are file formats that use Read to generate dynamic layer content without reading any data from the resolved asset associated with the layer&apos;s identifier.</para>
<para>For these types of file formats it is useful to be able to open anonymous layers and allow Read to populate them to avoid requiring a placeholder asset to exist just so Read can populate the layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1afa76b34e13314ffaf726f4799d4161ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool CanRead</definition>
        <argsstring>(const std::string &amp;file) const =0</argsstring>
        <name>CanRead</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a5e1a8b43babf918a7d617452e3afaabd">CanRead</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1ac422268041df510f5b991d49cc852bdb">CanRead</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1acd3c5cb1abb4535fcde8816507752166">CanRead</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1acd3c5cb1abb4535fcde8816507752166">CanRead</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>file</computeroutput> can be read by this format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a8621e64c229386ea8e743faaf3f34d68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool Read</definition>
        <argsstring>(SdfLayer *layer, const std::string &amp;resolvedPath, bool metadataOnly) const =0</argsstring>
        <name>Read</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a87ee2a2817d4091767361896384f1a08">Read</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1a3a7786bd677bf3141266929984f61899">Read</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a6cbcecd530b507afb144749dc92c3df3">Read</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a6cbcecd530b507afb144749dc92c3df3">Read</reimplementedby>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <briefdescription>
<para>Reads scene description from the asset specified by <computeroutput>resolvedPath</computeroutput> into the layer <computeroutput>layer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>metadataOnly</computeroutput> is a flag that asks for only the layer metadata to be read in, which can be much faster if that is all that is required. Note that this is just a hint: some FileFormat readers may disregard this flag and still fully populate the layer contents.</para>
<para>Returns true if the asset is successfully read into <computeroutput>layer</computeroutput>, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a12d42db40bca59050733c4b40a818475" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ReadDetached</definition>
        <argsstring>(SdfLayer *layer, const std::string &amp;resolvedPath, bool metadataOnly) const</argsstring>
        <name>ReadDetached</name>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <briefdescription>
<para>Reads scene description from the asset specified by <computeroutput>resolvedPath</computeroutput> into the detached layer <computeroutput>layer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>After reading is completed, <computeroutput>layer</computeroutput> must be detached from any underlying storage.</para>
<para><computeroutput>metadataOnly</computeroutput> is a flag that asks for only the layer metadata to be read in, which can be much faster if that is all that is required. Note that this is just a hint: some FileFormat readers may disregard this flag and still fully populate the layer contents.</para>
<para>Returns true if the asset is successfully read into <computeroutput>layer</computeroutput>, false if the the asset could not be read or if the resulting layer is not detached. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1aebd911a48918fd2cad75a72f3839f40e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool WriteToFile</definition>
        <argsstring>(const SdfLayer &amp;layer, const std::string &amp;filePath, const std::string &amp;comment=std::string(), const FileFormatArguments &amp;args=FileFormatArguments()) const</argsstring>
        <name>WriteToFile</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a8c63732a6ba64fedbea88c750cfcad73">WriteToFile</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1aa46231c2bcdf2813f04d416edf95dfba">WriteToFile</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1ae3865175b4922f1bd3d96d3da2cda972">WriteToFile</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1ae3865175b4922f1bd3d96d3da2cda972">WriteToFile</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filePath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Writes the content in <computeroutput>layer</computeroutput> into the file at <computeroutput>filePath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the content is successfully written, this method returns true. Otherwise, false is returned and errors are posted. The default implementation returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a6bce13cc06020cb090ebe6746208b459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool ReadFromString</definition>
        <argsstring>(SdfLayer *layer, const std::string &amp;str) const</argsstring>
        <name>ReadFromString</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a0d4de20ecb24b99445b0e6efd8549e07">ReadFromString</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1a7f3f1032a340c0daae22cb0812405d15">ReadFromString</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a8ceaeb0ff7db4685cd64ea9268662f0a">ReadFromString</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a8ceaeb0ff7db4685cd64ea9268662f0a">ReadFromString</reimplementedby>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Reads data in the string <computeroutput>str</computeroutput> into the layer <computeroutput>layer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the file is successfully read, this method returns true. Otherwise, false is returned and errors are posted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a3d7243749d4e00e091c4df98705316d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool WriteToStream</definition>
        <argsstring>(const SdfSpecHandle &amp;spec, std::ostream &amp;out, size_t indent) const</argsstring>
        <name>WriteToStream</name>
        <reimplementedby refid="class_usd_usdc_file_format_1afda8f65c5c2fea1cfedc0db9efbf7043">WriteToStream</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1a2d8654690d8f5d79eedd196adac6b10c">WriteToStream</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a100b1328d285eb43d51cfe29964f9c15">WriteToStream</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a100b1328d285eb43d51cfe29964f9c15">WriteToStream</reimplementedby>
        <param>
          <type>const SdfSpecHandle &amp;</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
<para>Write the provided <computeroutput>spec</computeroutput> to <computeroutput>out</computeroutput> indented <computeroutput>indent</computeroutput> levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a3d36cf09ec2f2556ff6b1cb88823d0d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool WriteToString</definition>
        <argsstring>(const SdfLayer &amp;layer, std::string *str, const std::string &amp;comment=std::string()) const</argsstring>
        <name>WriteToString</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a0dc5e36f71d7b1e51d0e46ea66511a60">WriteToString</reimplementedby>
        <reimplementedby refid="class_sdf_text_file_format_1aaf98382ff1e14b26d95ab037935db49f">WriteToString</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a02499fd71c04b071413f004cad32cc63">WriteToString</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a02499fd71c04b071413f004cad32cc63">WriteToString</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Writes the content in <computeroutput>layer</computeroutput> to the string <computeroutput>str</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function should write a textual representation of <computeroutput>layer</computeroutput> to the stream that can be read back in via ReadFromString. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a848b6bb7cedf72cb78e402c4402fdbc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>virtual SDF_API std::set&lt;std::string&gt; GetExternalAssetDependencies</definition>
        <argsstring>(const SdfLayer &amp;layer) const</argsstring>
        <name>GetExternalAssetDependencies</name>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Returns the set of resolved paths to external asset file dependencies for the given <computeroutput>layer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>These are additional dependencies, specific to the file format, that are needed when generating the layer&apos;s contents and would not otherwise be discoverable through composition dependencies (i.e. sublayers, references, and payloads).</para>
<para>The default implementation returns an empty set. Derived file formats that depend on external assets to read and generate layer content should implement this function to return the external asset paths.</para>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_1ad168f0658add394429de6cc94d5139a0" kindref="member">SdfLayer::GetExternalAssetDependencies</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">SdfLayer::Reload</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a5f99ff74942b86a7aa1ec7c69a617b64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SupportsReading</definition>
        <argsstring>() const</argsstring>
        <name>SupportsReading</name>
        <briefdescription>
<para>Returns true if this file format supports reading. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience method for invoking <ref refid="class_sdf_file_format_1ada2c1b75bce2485538862ecddc9285bc" kindref="member">FormatSupportsReading</ref> with this format&apos;s extension and target </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a27f2b45688a158acb95d1d00b6d82e0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SupportsWriting</definition>
        <argsstring>() const</argsstring>
        <name>SupportsWriting</name>
        <briefdescription>
<para>This is a convenience method for invoking <ref refid="class_sdf_file_format_1add9fecbf8f4a1acac72dd5f9141f97ee" kindref="member">FormatSupportsWriting</ref> with this format&apos;s extension and target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a83eab906a0358ebdf94b03316bf66d80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool SupportsEditing</definition>
        <argsstring>() const</argsstring>
        <name>SupportsEditing</name>
        <briefdescription>
<para>This is a convenience method for invoking <ref refid="class_sdf_file_format_1acab8762adf43caac7b35f784babb5ae4" kindref="member">FormatSupportsEditing</ref> with this format&apos;s extension and target. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="271" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sdf_file_format_1abcbb3a513cf28abac68c32f75dac4de2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>static SDF_API std::string GetFileExtension</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>GetFileExtension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the file extension for path or file name <computeroutput>s</computeroutput>, without the leading dot character. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a3eb382b2d773579a0fc353c2d6c63040" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>static SDF_API std::set&lt;std::string&gt; FindAllFileFormatExtensions</definition>
        <argsstring>()</argsstring>
        <name>FindAllFileFormatExtensions</name>
        <briefdescription>
<para>Returns a set containing the extension(s) corresponding to all registered file formats. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a2fd6d75707af4e54f78e6a47bde4d772" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>static SDF_API std::set&lt;std::string&gt; FindAllDerivedFileFormatExtensions</definition>
        <argsstring>(const TfType &amp;baseType)</argsstring>
        <name>FindAllDerivedFileFormatExtensions</name>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>baseType</declname>
        </param>
        <briefdescription>
<para>Returns a set containing the extension(s) corresponding to all registered file formats that derive from <computeroutput>baseType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>baseType</computeroutput> must derive from <ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ada2c1b75bce2485538862ecddc9285bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool FormatSupportsReading</definition>
        <argsstring>(const std::string &amp;extension, const std::string &amp;target=std::string())</argsstring>
        <name>FormatSupportsReading</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Returns true if the file format for the supplied <computeroutput>extension</computeroutput> and <computeroutput>target</computeroutput> pair supports reading. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will not load the plugin that provides the specified file format. If the extension and target pair is invalid, this method will return false. <simplesect kind="see"><para><ref refid="class_sdf_file_format_1add9fecbf8f4a1acac72dd5f9141f97ee" kindref="member">FormatSupportsWriting</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdf_file_format_1acab8762adf43caac7b35f784babb5ae4" kindref="member">FormatSupportsEditing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1add9fecbf8f4a1acac72dd5f9141f97ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool FormatSupportsWriting</definition>
        <argsstring>(const std::string &amp;extension, const std::string &amp;target=std::string())</argsstring>
        <name>FormatSupportsWriting</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Returns true if the file format for the supplied <computeroutput>extension</computeroutput> and <computeroutput>target</computeroutput> pair supports writing. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will not load the plugin that provides the specified file format. If the extension and target pair is invalid, this method will return false. <simplesect kind="see"><para><ref refid="class_sdf_file_format_1ada2c1b75bce2485538862ecddc9285bc" kindref="member">FormatSupportsReading</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdf_file_format_1acab8762adf43caac7b35f784babb5ae4" kindref="member">FormatSupportsEditing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1acab8762adf43caac7b35f784babb5ae4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool FormatSupportsEditing</definition>
        <argsstring>(const std::string &amp;extension, const std::string &amp;target=std::string())</argsstring>
        <name>FormatSupportsEditing</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Returns true if the file format for the supplied <computeroutput>extension</computeroutput> and <computeroutput>target</computeroutput> pair supports editing. </para>
        </briefdescription>
        <detaileddescription>
<para>This method will not load the plugin that provides the specified file format. If the extension and target pair is invalid, this method will return false. <simplesect kind="see"><para><ref refid="class_sdf_file_format_1ada2c1b75bce2485538862ecddc9285bc" kindref="member">FormatSupportsReading</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_sdf_file_format_1add9fecbf8f4a1acac72dd5f9141f97ee" kindref="member">FormatSupportsWriting</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a7217ccb019b97204c7e7cad86ee2fc92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfFileFormatConstPtr</type>
        <definition>static SDF_API SdfFileFormatConstPtr FindById</definition>
        <argsstring>(const TfToken &amp;formatId)</argsstring>
        <name>FindById</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <briefdescription>
<para>Returns the file format instance with the specified <computeroutput>formatId</computeroutput> identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>If a format with a matching identifier is not found, this returns a null file format pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ab9d67519992ef59d03eff5f9b5ca3728" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfFileFormatConstPtr</type>
        <definition>static SDF_API SdfFileFormatConstPtr FindByExtension</definition>
        <argsstring>(const std::string &amp;path, const std::string &amp;target=std::string())</argsstring>
        <name>FindByExtension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Returns the file format instance that supports the extension for <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a format with a matching extension is not found, this returns a null file format pointer.</para>
<para>An extension may be handled by multiple file formats, but each with a different target. In such cases, if no <computeroutput>target</computeroutput> is specified, the file format that is registered as the primary plugin will be returned. Otherwise, the file format whose target matches <computeroutput>target</computeroutput> will be returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ad700415c499bbb5a7d2a9a7ead748904" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfFileFormatConstPtr</type>
        <definition>static SDF_API SdfFileFormatConstPtr FindByExtension</definition>
        <argsstring>(const std::string &amp;path, const FileFormatArguments &amp;args)</argsstring>
        <name>FindByExtension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Returns a file format instance that supports the extension for <computeroutput>path</computeroutput> and whose target matches one of those specified by the given <computeroutput>args</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the <computeroutput>args</computeroutput> specify no target, then the file format that is registered as the primary plugin will be returned. If a format with a matching extension is not found, this returns a null file format pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="352" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_file_format_1a264d3e88f88f613493c2d7fcfad67e94" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::string &amp;extension)</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a75670dd7e233757cafd3c598446c6206" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::string &amp;extension, const SdfSchemaBase &amp;schema)</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>schema</computeroutput> must remain valid for the lifetime of this file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a0bfad924c4fb5e5789207f149f0db032" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::string &amp;extension, const SdfSchemaBase &amp;&amp;schema)=delete</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;&amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Disallow temporary <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> objects being passed to the c&apos;tor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1aebe62122c83fdaf835755c00fb56e9ae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::vector&lt; std::string &gt; &amp;extensions)</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1aeb704822963e888102f17369717ecd5c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::vector&lt; std::string &gt; &amp;extensions, const SdfSchemaBase &amp;schema)</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>schema</computeroutput> must remain valid for the lifetime of this file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a780caf13030dfa6f32cf697f484faf01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfFileFormat</definition>
        <argsstring>(const TfToken &amp;formatId, const TfToken &amp;versionString, const TfToken &amp;target, const std::vector&lt; std::string &gt; &amp;extensions, const SdfSchemaBase &amp;&amp;schema)=delete</argsstring>
        <name>SdfFileFormat</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>formatId</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>versionString</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;&amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Disallow temporary <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> objects being passed to the c&apos;tor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a6f9bde194003de8378da0fcbc8e7598d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API</type>
        <definition>virtual SDF_API ~SdfFileFormat</definition>
        <argsstring>()</argsstring>
        <name>~SdfFileFormat</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a4cb80cd45410b5f68e76996187d69e6a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool _ReadAndCopyLayerDataToMemory</definition>
        <argsstring>(SdfLayer *layer, const std::string &amp;resolvedPath, bool metadataOnly, bool *didCopyData=nullptr) const</argsstring>
        <name>_ReadAndCopyLayerDataToMemory</name>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>didCopyData</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Helper function for _ReadDetached. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls Read with the given parameters. If successful and <computeroutput>layer</computeroutput> is not detached (i.e., <ref refid="class_sdf_layer_1a742d86d8014873ce73a0c74e29f03c22" kindref="member">SdfLayer::IsDetached</ref> returns false) copies the layer data into an <ref refid="class_sdf_data" kindref="compound">SdfData</ref> object and set that into <computeroutput>layer</computeroutput>. If this copy occurs and <computeroutput>didCopyData</computeroutput> is given, it will be set to true.</para>
<para>Note that the copying process is a simple spec-by-spec, field-by-field value copy. This process may not produce detached layers if the data object used by <computeroutput>layer</computeroutput> after the initial call to Read returns VtValues that are not detached. One example is a <ref refid="class_vt_value" kindref="compound">VtValue</ref> holding a <ref refid="class_vt_array" kindref="compound">VtArray</ref> backed by a foreign data source attached to a memory mapping.</para>
<para>Returns true if Read was successful, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a91060b50288c32d054e55c00815f8c4a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
        <definition>virtual SDF_API SdfLayer* _InstantiateNewLayer</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const std::string &amp;realPath, const ArAssetInfo &amp;assetInfo, const FileFormatArguments &amp;args) const</argsstring>
        <name>_InstantiateNewLayer</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>realPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref> &amp;</type>
          <declname>assetInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a3d0cbafb2e3b080d9fbcdd93a5e9d967" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool _ShouldSkipAnonymousReload</definition>
        <argsstring>() const</argsstring>
        <name>_ShouldSkipAnonymousReload</name>
        <reimplementedby refid="class_sdf_text_file_format_1a101dd58908ca6a649790c51d31599cb2">_ShouldSkipAnonymousReload</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a12c9e8b7430b2a24447034e0716380aa" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool _ShouldReadAnonymousLayers</definition>
        <argsstring>() const</argsstring>
        <name>_ShouldReadAnonymousLayers</name>
        <briefdescription>
<para>File format subclasses may override this to specify whether Read should be called when creating, opening, or reloading an anonymous layer of this format. </para>
        </briefdescription>
        <detaileddescription>
<para>Default implementation returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1ab4999d2f804fbd556476427ef20ea80e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API SdfAbstractDataRefPtr</type>
        <definition>virtual SDF_API SdfAbstractDataRefPtr _InitDetachedData</definition>
        <argsstring>(const FileFormatArguments &amp;args) const</argsstring>
        <name>_InitDetachedData</name>
        <reimplementedby refid="class_usd_usdc_file_format_1aa3233c560c8d2398b112a5544c8f8fa9">_InitDetachedData</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1aa3233c560c8d2398b112a5544c8f8fa9">_InitDetachedData</reimplementedby>
        <param>
          <type>const <ref refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_file_format_1adc9391d69494e36aae0cbb1ca7007526" kindref="member">InitDetachedData</ref></para>
</simplesect>
This function must return a new <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object that is detached, i.e. <ref refid="class_sdf_abstract_data_1a4394939afe9f76296e90fca624064128" kindref="member">SdfAbstractData::IsDetached</ref> returns false.</para>
<para>The default implementation returns an <ref refid="class_sdf_data" kindref="compound">SdfData</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a903006b206ab7fe0c8f9f645efa9dbc3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>SDF_API bool</type>
        <definition>virtual SDF_API bool _ReadDetached</definition>
        <argsstring>(SdfLayer *layer, const std::string &amp;resolvedPath, bool metadataOnly) const</argsstring>
        <name>_ReadDetached</name>
        <reimplementedby refid="class_usd_usdc_file_format_1a3e56ab56cb1a1b6fe2a15f92c06f5e5c">_ReadDetached</reimplementedby>
        <reimplementedby refid="class_usd_usdz_file_format_1a3e56ab56cb1a1b6fe2a15f92c06f5e5c">_ReadDetached</reimplementedby>
        <reimplementedby refid="class_usd_usd_file_format_1a3e56ab56cb1a1b6fe2a15f92c06f5e5c">_ReadDetached</reimplementedby>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_file_format_1a12d42db40bca59050733c4b40a818475" kindref="member">ReadDetached</ref></para>
</simplesect>
Upon completion, <computeroutput>layer</computeroutput> must have an <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> object set that is detached, i.e. <ref refid="class_sdf_abstract_data_1a4394939afe9f76296e90fca624064128" kindref="member">SdfAbstractData::IsDetached</ref> returns false.</para>
<para>The default implementation calls _ReadAndCopyLayerDataToMemory to read the specified layer and copy its data into an <ref refid="class_sdf_data" kindref="compound">SdfData</ref> object if it is not detached. If data is copied, a warning will be issued since this may be an expensive operation. If the above behavior is desired, subclasses can just call _ReadAndCopyLayerDataToMemory to do the same thing but without the warning. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="499" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_sdf_file_format_1a8d5aeef83f6b9e72f4b94bcbf5201d9f" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void _SetLayerData</definition>
        <argsstring>(SdfLayer *layer, SdfAbstractDataRefPtr &amp;data)</argsstring>
        <name>_SetLayerData</name>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>SdfAbstractDataRefPtr &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the internal data for <computeroutput>layer</computeroutput> to <computeroutput>data</computeroutput>, possibly transferring ownership of <computeroutput>data</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Existing layer hints are reset to the default hints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a31fd5be937c25d4eb1edeb9e8c1b1748" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void _SetLayerData</definition>
        <argsstring>(SdfLayer *layer, SdfAbstractDataRefPtr &amp;data, SdfLayerHints hints)</argsstring>
        <name>_SetLayerData</name>
        <param>
          <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>SdfAbstractDataRefPtr &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_layer_hints" kindref="compound">SdfLayerHints</ref></type>
          <declname>hints</declname>
        </param>
        <briefdescription>
<para>Set the internal data for <computeroutput>layer</computeroutput> to <computeroutput>data</computeroutput>, possibly transferring ownership of <computeroutput>data</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Existing layer hints are replaced with <computeroutput>hints</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_file_format_1a128bdfe095ed866d05dca1422f9136f6" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfAbstractDataConstPtr</type>
        <definition>static SDF_API SdfAbstractDataConstPtr _GetLayerData</definition>
        <argsstring>(const SdfLayer &amp;layer)</argsstring>
        <name>_GetLayerData</name>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Get the internal data for <computeroutput>layer</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/fileFormat.h" line="433" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for file format implementations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5046">
        <label>UsdUsdaFileFormat</label>
        <link refid="class_usd_usda_file_format"/>
        <childnode refid="5045" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5047">
        <label>UsdUsdcFileFormat</label>
        <link refid="class_usd_usdc_file_format"/>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5048">
        <label>UsdUsdFileFormat</label>
        <link refid="class_usd_usd_file_format"/>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5044">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5042">
        <label>SdfFileFormat</label>
        <link refid="class_sdf_file_format"/>
        <childnode refid="5043" relation="public-inheritance">
        </childnode>
        <childnode refid="5044" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5049">
        <label>UsdUsdzFileFormat</label>
        <link refid="class_usd_usdz_file_format"/>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5045">
        <label>SdfTextFileFormat</label>
        <link refid="class_sdf_text_file_format"/>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5043">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5052">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5050">
        <label>SdfFileFormat</label>
        <link refid="class_sdf_file_format"/>
        <childnode refid="5051" relation="public-inheritance">
        </childnode>
        <childnode refid="5052" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5051">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/fileFormat.h" line="67" column="1" bodyfile="pxr/usd/sdf/fileFormat.h" bodystart="64" bodyend="512"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_sdf_file_format_1ac49859f592575e7714a43655d0ce73e5" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_cookie</name></member>
      <member refid="class_sdf_file_format_1a4c9c5faa3529048e2745edd7d06e0a5e" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_extensions</name></member>
      <member refid="class_sdf_file_format_1a5299b3714740100949ec48753c71472d" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_formatId</name></member>
      <member refid="class_sdf_file_format_1a128bdfe095ed866d05dca1422f9136f6" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_GetLayerData</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_HasRemnant</name></member>
      <member refid="class_sdf_file_format_1ab4999d2f804fbd556476427ef20ea80e" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>_InitDetachedData</name></member>
      <member refid="class_sdf_file_format_1a91060b50288c32d054e55c00815f8c4a" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>_InstantiateNewLayer</name></member>
      <member refid="class_sdf_file_format_1ab9cd5f16779155dad933c590e8f4f7ac" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_isPrimaryFormat</name></member>
      <member refid="class_sdf_file_format_1a4cb80cd45410b5f68e76996187d69e6a" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_ReadAndCopyLayerDataToMemory</name></member>
      <member refid="class_sdf_file_format_1a903006b206ab7fe0c8f9f645efa9dbc3" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>_ReadDetached</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_Register</name></member>
      <member refid="class_sdf_file_format_1aba5da2da1272c34471ec40765cb680aa" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_schema</name></member>
      <member refid="class_sdf_file_format_1a8d5aeef83f6b9e72f4b94bcbf5201d9f" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_SetLayerData</name></member>
      <member refid="class_sdf_file_format_1a31fd5be937c25d4eb1edeb9e8c1b1748" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>_SetLayerData</name></member>
      <member refid="class_sdf_file_format_1a12c9e8b7430b2a24447034e0716380aa" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>_ShouldReadAnonymousLayers</name></member>
      <member refid="class_sdf_file_format_1a3d0cbafb2e3b080d9fbcdd93a5e9d967" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>_ShouldSkipAnonymousReload</name></member>
      <member refid="class_sdf_file_format_1ab31a244f60f1e282a283761c8c457936" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_target</name></member>
      <member refid="class_sdf_file_format_1a35d97ac4e1b515007814c4052c4d0088" prot="private" virt="non-virtual"><scope>SdfFileFormat</scope><name>_versionString</name></member>
      <member refid="class_sdf_file_format_1afa76b34e13314ffaf726f4799d4161ae" prot="public" virt="pure-virtual"><scope>SdfFileFormat</scope><name>CanRead</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_file_format_1a1dfd2030337b6243cd6424fce7397590" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FileFormatArguments</name></member>
      <member refid="class_sdf_file_format_1a2fd6d75707af4e54f78e6a47bde4d772" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FindAllDerivedFileFormatExtensions</name></member>
      <member refid="class_sdf_file_format_1a3eb382b2d773579a0fc353c2d6c63040" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FindAllFileFormatExtensions</name></member>
      <member refid="class_sdf_file_format_1ab9d67519992ef59d03eff5f9b5ca3728" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FindByExtension</name></member>
      <member refid="class_sdf_file_format_1ad700415c499bbb5a7d2a9a7ead748904" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FindByExtension</name></member>
      <member refid="class_sdf_file_format_1a7217ccb019b97204c7e7cad86ee2fc92" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FindById</name></member>
      <member refid="class_sdf_file_format_1acab8762adf43caac7b35f784babb5ae4" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FormatSupportsEditing</name></member>
      <member refid="class_sdf_file_format_1ada2c1b75bce2485538862ecddc9285bc" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FormatSupportsReading</name></member>
      <member refid="class_sdf_file_format_1add9fecbf8f4a1acac72dd5f9141f97ee" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>FormatSupportsWriting</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetCurrentCount</name></member>
      <member refid="class_sdf_file_format_1a830ffcfcd3441b645265536b05da4412" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>GetDefaultFileFormatArguments</name></member>
      <member refid="class_sdf_file_format_1a848b6bb7cedf72cb78e402c4402fdbc0" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>GetExternalAssetDependencies</name></member>
      <member refid="class_sdf_file_format_1ae2231eaa1ca0583f91a97f07cd51f731" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetFileCookie</name></member>
      <member refid="class_sdf_file_format_1abcbb3a513cf28abac68c32f75dac4de2" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetFileExtension</name></member>
      <member refid="class_sdf_file_format_1ab332582e9e4898a6462207fefe608ba9" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetFileExtensions</name></member>
      <member refid="class_sdf_file_format_1af94cee934d3f9f57ddec5d6ba4ab0f72" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetFormatId</name></member>
      <member refid="class_sdf_file_format_1ae20721adeae2ab3e3f03b468d7c938c2" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>GetPackageRootLayerPath</name></member>
      <member refid="class_sdf_file_format_1a855ff6edf7f38b3a8863f597ebe557c9" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetPrimaryFileExtension</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetRefCount</name></member>
      <member refid="class_sdf_file_format_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetSchema</name></member>
      <member refid="class_sdf_file_format_1affc99189439fce34c0c63d91a476b1b8" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetTarget</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_sdf_file_format_1ac2060c617124b513ccf799426ce149e1" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>GetVersionString</name></member>
      <member refid="class_sdf_file_format_1a7e6fe1b90e69c2f271c631b2e0597b23" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>InitData</name></member>
      <member refid="class_sdf_file_format_1adc9391d69494e36aae0cbb1ca7007526" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>InitDetachedData</name></member>
      <member refid="class_sdf_file_format_1a688a3cc6628e445cc997e8952a434170" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>IsPackage</name></member>
      <member refid="class_sdf_file_format_1ad92ebb5ec62184ddbc8913e4f05db070" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>IsPrimaryFormatForExtensions</name></member>
      <member refid="class_sdf_file_format_1ae5349dcbdcfd8c009af50d11c717e071" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>IsSupportedExtension</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>IsUnique</name></member>
      <member refid="class_sdf_file_format_1a79344fd3d6748c5beee6198a41fcd141" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>NewLayer</name></member>
      <member refid="class_sdf_file_format_1ae044dff6cb8c0aa5231692938ce0d287" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>SdfFileFormat</scope><name>operator=</name></member>
      <member refid="class_sdf_file_format_1a8621e64c229386ea8e743faaf3f34d68" prot="public" virt="pure-virtual"><scope>SdfFileFormat</scope><name>Read</name></member>
      <member refid="class_sdf_file_format_1a12d42db40bca59050733c4b40a818475" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>ReadDetached</name></member>
      <member refid="class_sdf_file_format_1a6bce13cc06020cb090ebe6746208b459" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>ReadFromString</name></member>
      <member refid="class_sdf_file_format_1a48e9cf3f2434d3311eeb2e04c10e8156" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1a264d3e88f88f613493c2d7fcfad67e94" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1a75670dd7e233757cafd3c598446c6206" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1a0bfad924c4fb5e5789207f149f0db032" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1aebe62122c83fdaf835755c00fb56e9ae" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1aeb704822963e888102f17369717ecd5c" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_file_format_1a780caf13030dfa6f32cf697f484faf01" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>SdfFileFormat</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_sdf_file_format_1a50928a94b9625eb1a149e07944ddb99d" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>ShouldReadAnonymousLayers</name></member>
      <member refid="class_sdf_file_format_1ae5bee0843fce18d3c607c0b56b118319" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>ShouldSkipAnonymousReload</name></member>
      <member refid="class_sdf_file_format_1a83eab906a0358ebdf94b03316bf66d80" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SupportsEditing</name></member>
      <member refid="class_sdf_file_format_1a5f99ff74942b86a7aa1ec7c69a617b64" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SupportsReading</name></member>
      <member refid="class_sdf_file_format_1a27f2b45688a158acb95d1d00b6d82e0f" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>SupportsWriting</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>SdfFileFormat</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_sdf_file_format_1aebd911a48918fd2cad75a72f3839f40e" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>WriteToFile</name></member>
      <member refid="class_sdf_file_format_1a3d7243749d4e00e091c4df98705316d9" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>WriteToStream</name></member>
      <member refid="class_sdf_file_format_1a3d36cf09ec2f2556ff6b1cb88823d0d0" prot="public" virt="virtual"><scope>SdfFileFormat</scope><name>WriteToString</name></member>
      <member refid="class_sdf_file_format_1a6f9bde194003de8378da0fcbc8e7598d" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>~SdfFileFormat</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>SdfFileFormat</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfFileFormat</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
