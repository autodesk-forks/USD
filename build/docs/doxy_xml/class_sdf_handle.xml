<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_handle" kind="class" language="C++" prot="public">
    <compoundname>SdfHandle</compoundname>
    <includes refid="declare_handles_8h" local="no">declareHandles.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_handle_1a16379655038e00563db51fe5242f2a40" prot="public" static="no">
        <type><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; T &gt;</type>
        <definition>typedef SdfHandle&lt;T&gt; This</definition>
        <argsstring></argsstring>
        <name>This</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="64" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_handle_1a275aaff9f0f2e28dd9fe6815651c92c3" prot="public" static="no">
        <type>T</type>
        <definition>typedef T SpecType</definition>
        <argsstring></argsstring>
        <name>SpecType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="65" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_handle_1ab1e5c78378d5a8be27aa2bba06ab3eae" prot="public" static="no">
        <type>std::remove_const&lt; SpecType &gt;::type</type>
        <definition>typedef std::remove_const&lt;SpecType&gt;::type NonConstSpecType</definition>
        <argsstring></argsstring>
        <name>NonConstSpecType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="67" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_handle_1a09294b95dbb5c9170077dabe224221e4" prot="public" static="no">
        <type><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; NonConstSpecType &gt;</type>
        <definition>typedef SdfHandle&lt;NonConstSpecType&gt; NonConstThis</definition>
        <argsstring></argsstring>
        <name>NonConstThis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="68" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_handle_1aadcbcbaac6630872e1cab4dc2bbf7582" prot="private" static="no" mutable="no">
        <type>SpecType</type>
        <definition>SpecType _spec</definition>
        <argsstring></argsstring>
        <name>_spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="181" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_handle_1a94cce62631fd5369a39a08fd2367744c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class SdfHandle</definition>
        <argsstring></argsstring>
        <name>SdfHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="183" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1ac71bccb01369177e3f4c34ea87a8e9c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const SdfHandle &amp;lhs, const SdfHandle &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_handle_1af10fdb25851e26bfc6492519fdf70f3b" kindref="member">SdfHandle::operator==</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="138" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1acebde84f9f6d701a1d8c9122469f4634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const SdfHandle &amp;lhs, const SdfHandle &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_handle_1a3f83abb8cb1ae67af645a501f77046ff" kindref="member">SdfHandle::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="152" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1a97da21cfbce7ace78568f6f57376f567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const SdfHandle &amp;lhs, const SdfHandle &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_handle_1a3f83abb8cb1ae67af645a501f77046ff" kindref="member">SdfHandle::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="158" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1a021f643593d2a438f70dd0419caa1772" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const SdfHandle &amp;lhs, const SdfHandle &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_handle_1a3f83abb8cb1ae67af645a501f77046ff" kindref="member">SdfHandle::operator&lt;</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="164" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1a800b477929a3f1fd047c9ad47a66db53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const This &amp;x)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">This</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="170" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_handle_1ae4b321dd87c344e425c906ae3e35fe92" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend SpecType *</type>
        <definition>SpecType* get_pointer</definition>
        <argsstring>(const SdfHandle &amp;x)</argsstring>
        <name>get_pointer</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="176" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="176" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_handle_1a55afe10e694e529bdbc136f0e0ef656a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfHandle</definition>
        <argsstring>()</argsstring>
        <name>SdfHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="70" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a27c936f38a68a3f245cc726faa8e13de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfHandle</definition>
        <argsstring>(TfNullPtrType)</argsstring>
        <name>SdfHandle</name>
        <param>
          <type>TfNullPtrType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="71" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1aeded8f48f8ead30cd6d04ad1cecaebce" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfHandle</definition>
        <argsstring>(const Sdf_IdentityRefPtr &amp;id)</argsstring>
        <name>SdfHandle</name>
        <param>
          <type>const Sdf_IdentityRefPtr &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="72" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1acb78e63b7dbf2f973dfa7397f9b31f2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfHandle</definition>
        <argsstring>(const SpecType &amp;spec)</argsstring>
        <name>SdfHandle</name>
        <param>
          <type>const SpecType &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="73" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a458a047d9ca4c90e3aed3d9eaaa9d755" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SdfHandle</definition>
        <argsstring>(const SdfHandle&lt; U &gt; &amp;x)</argsstring>
        <name>SdfHandle</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; U &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="76" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a8c42b9956922ea2b310050096e662c64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_handle" kindref="compound">This</ref> &amp;</type>
        <definition>This&amp; operator=</definition>
        <argsstring>(const This &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">This</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="78" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1acbc58e1310af950acc44e6cf1a77585a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_handle" kindref="compound">This</ref> &amp;</type>
        <definition>This&amp; operator=</definition>
        <argsstring>(const SdfHandle&lt; U &gt; &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; U &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="85" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a813c6ccefad3006183efcb5788acf876" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SpecType *</type>
        <definition>SpecType* operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Dereference. </para>
        </briefdescription>
        <detaileddescription>
<para>Raises a fatal error if the object is invalid or dormant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="93" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1ad6eeadbc89d6a119fb367797a99b4076" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SpecType &amp;</type>
        <definition>const SpecType&amp; GetSpec</definition>
        <argsstring>() const</argsstring>
        <name>GetSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="103" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a372de693ad40b3f42839c8ec6ac845f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="108" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator UnspecifiedBoolType</definition>
        <argsstring>() const</argsstring>
        <name>operator UnspecifiedBoolType</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> in a boolean context if the object is valid, <computeroutput>false</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="119" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a61efd4196a96540ee018fee8791f3f10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Returns <computeroutput>false</computeroutput> in a boolean context if the object is valid, <computeroutput>true</computeroutput> otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="125" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1af10fdb25851e26bfc6492519fdf70f3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const SdfHandle&lt; U &gt; &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares handles for equality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="132" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_handle_1a3f83abb8cb1ae67af645a501f77046ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const SdfHandle&lt; U &gt; &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Arranges handles in an arbitrary strict weak ordering. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this ordering is stable across path changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/declareHandles.h" line="146" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="146" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref> is a smart ptr that calls IsDormant() on the pointed-to object as an extra expiration check so that dormant objects appear to be expired. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/usd/sdf/declareHandles.h" line="62" column="1" bodyfile="pxr/usd/sdf/declareHandles.h" bodystart="62" bodyend="184"/>
    <listofallmembers>
      <member refid="class_sdf_handle_1aadcbcbaac6630872e1cab4dc2bbf7582" prot="private" virt="non-virtual"><scope>SdfHandle</scope><name>_spec</name></member>
      <member refid="class_sdf_handle_1ae4b321dd87c344e425c906ae3e35fe92" prot="private" virt="non-virtual"><scope>SdfHandle</scope><name>get_pointer</name></member>
      <member refid="class_sdf_handle_1ad6eeadbc89d6a119fb367797a99b4076" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>GetSpec</name></member>
      <member refid="class_sdf_handle_1a800b477929a3f1fd047c9ad47a66db53" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>hash_value</name></member>
      <member refid="class_sdf_handle_1ab1e5c78378d5a8be27aa2bba06ab3eae" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>NonConstSpecType</name></member>
      <member refid="class_sdf_handle_1a09294b95dbb5c9170077dabe224221e4" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>NonConstThis</name></member>
      <member refid="class_sdf_handle_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator UnspecifiedBoolType</name></member>
      <member refid="class_sdf_handle_1a61efd4196a96540ee018fee8791f3f10" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator!</name></member>
      <member refid="class_sdf_handle_1ac71bccb01369177e3f4c34ea87a8e9c5" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator!=</name></member>
      <member refid="class_sdf_handle_1a813c6ccefad3006183efcb5788acf876" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator-&gt;</name></member>
      <member refid="class_sdf_handle_1a3f83abb8cb1ae67af645a501f77046ff" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator&lt;</name></member>
      <member refid="class_sdf_handle_1a97da21cfbce7ace78568f6f57376f567" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator&lt;=</name></member>
      <member refid="class_sdf_handle_1a8c42b9956922ea2b310050096e662c64" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator=</name></member>
      <member refid="class_sdf_handle_1acbc58e1310af950acc44e6cf1a77585a" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator=</name></member>
      <member refid="class_sdf_handle_1af10fdb25851e26bfc6492519fdf70f3b" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator==</name></member>
      <member refid="class_sdf_handle_1acebde84f9f6d701a1d8c9122469f4634" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator&gt;</name></member>
      <member refid="class_sdf_handle_1a021f643593d2a438f70dd0419caa1772" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>operator&gt;=</name></member>
      <member refid="class_sdf_handle_1a372de693ad40b3f42839c8ec6ac845f4" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>Reset</name></member>
      <member refid="class_sdf_handle_1a94cce62631fd5369a39a08fd2367744c" prot="private" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1a55afe10e694e529bdbc136f0e0ef656a" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1a27c936f38a68a3f245cc726faa8e13de" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1aeded8f48f8ead30cd6d04ad1cecaebce" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1acb78e63b7dbf2f973dfa7397f9b31f2d" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1a458a047d9ca4c90e3aed3d9eaaa9d755" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SdfHandle</name></member>
      <member refid="class_sdf_handle_1a275aaff9f0f2e28dd9fe6815651c92c3" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>SpecType</name></member>
      <member refid="class_sdf_handle_1a16379655038e00563db51fe5242f2a40" prot="public" virt="non-virtual"><scope>SdfHandle</scope><name>This</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
