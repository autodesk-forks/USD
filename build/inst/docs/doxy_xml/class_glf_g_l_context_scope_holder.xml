<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_glf_g_l_context_scope_holder" kind="class" language="C++" prot="public">
    <compoundname>GlfGLContextScopeHolder</compoundname>
    <derivedcompoundref refid="class_glf_any_g_l_context_scope_holder" prot="private" virt="non-virtual">GlfAnyGLContextScopeHolder</derivedcompoundref>
    <derivedcompoundref refid="class_glf_shared_g_l_context_scope_holder" prot="private" virt="non-virtual">GlfSharedGLContextScopeHolder</derivedcompoundref>
    <includes refid="gl_context_8h" local="no">glContext.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_glf_g_l_context_scope_holder_1ad895ee68f610b9fd2ead761fda3ea34e" prot="private" static="no" mutable="no">
        <type>GlfGLContextSharedPtr</type>
        <definition>GlfGLContextSharedPtr _newContext</definition>
        <argsstring></argsstring>
        <name>_newContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="191" column="1" bodyfile="pxr/imaging/glf/glContext.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_glf_g_l_context_scope_holder_1a375c594653797f9de620def9daef70ae" prot="private" static="no" mutable="no">
        <type>GlfGLContextSharedPtr</type>
        <definition>GlfGLContextSharedPtr _oldContext</definition>
        <argsstring></argsstring>
        <name>_oldContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="192" column="1" bodyfile="pxr/imaging/glf/glContext.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1ac9c0101fe7f8467004625de589a5163c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>GLF_API</type>
        <definition>GLF_API GlfGLContextScopeHolder</definition>
        <argsstring>(const GlfGLContextSharedPtr &amp;newContext)</argsstring>
        <name>GlfGLContextScopeHolder</name>
        <param>
          <type>const GlfGLContextSharedPtr &amp;</type>
          <declname>newContext</declname>
        </param>
        <briefdescription>
<para>Make the given context current and restore the current context when this object is destroyed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1ad3716f47a6c41b30e8dcdab9267c79fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API</type>
        <definition>GLF_API ~GlfGLContextScopeHolder</definition>
        <argsstring>()</argsstring>
        <name>~GlfGLContextScopeHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1a7106d0bdc4a054823aee13102d08c295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GlfGLContextScopeHolder</definition>
        <argsstring>(const GlfGLContextScopeHolder &amp;)=delete</argsstring>
        <name>GlfGLContextScopeHolder</name>
        <param>
          <type>const <ref refid="class_glf_g_l_context_scope_holder" kindref="compound">GlfGLContextScopeHolder</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1a5f6c66a1252b2a5a6d18e0a18cf3d177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_glf_g_l_context_scope_holder" kindref="compound">GlfGLContextScopeHolder</ref> &amp;</type>
        <definition>GlfGLContextScopeHolder&amp; operator=</definition>
        <argsstring>(const GlfGLContextScopeHolder)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const</type>
          <declname>GlfGLContextScopeHolder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="182" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1a9c1b647a70ebbec19fd18771eabf9165" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API void</type>
        <definition>GLF_API void _MakeNewContextCurrent</definition>
        <argsstring>()</argsstring>
        <name>_MakeNewContextCurrent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_glf_g_l_context_scope_holder_1a594e92a76231189d4ebe59ae1ad4e978" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLF_API void</type>
        <definition>GLF_API void _RestoreOldContext</definition>
        <argsstring>()</argsstring>
        <name>_RestoreOldContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/glf/glContext.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class to make a GL context current. </para>
    </briefdescription>
    <detaileddescription>
<para>It is often useful to wrap a dynamic GL resource with a class interface.</para>
<para>In addition to providing API to make it more convenient to use the underlying GL resource, the lifetime of the underlying resource can be tied to the lifetime of a wrapper object instance, e.g. allocate the GL resource during construction, delete the GL resource during destruction.</para>
<para>While the construction and use of these kinds of wrapper objects is usually pretty safe and straightforward, it can be more difficult to manage destruction. Specifically, it can be hard to guarantee that a suitable GL context is current at the time that a wrapper object instance is destroyed. If a suitable context is not current, then it will not be possible to delete the underlying resource, which may cause the resource to remain allocated, which will then result in a resource leak.</para>
<para>Typically, these GL resources are allocated from contexts which are sharing the GL resources. In which case it is sufficient for any one one of the sharing contexts to be current in order to be able to safely delete the GL resource from the destructor of a wrapper object.</para>
<para><ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> and <ref refid="class_glf_g_l_context_scope_holder" kindref="compound">GlfGLContextScopeHolder</ref> can help.</para>
<para>When <ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> has been initialized, i.e. when suitable context callbacks have been registered, we can use <ref refid="class_glf_g_l_context" kindref="compound">GlfGLContext</ref> to make a GL context current.</para>
<para><ref refid="class_glf_g_l_context_scope_holder" kindref="compound">GlfGLContextScopeHolder</ref> does this automatically for the duration of a code block.</para>
<para>The underlying calls to make GL contexts current can be moderately expensive. So, this mechanism should be used carefully. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1461">
        <label>GlfSharedGLContextScopeHolder</label>
        <link refid="class_glf_shared_g_l_context_scope_holder"/>
        <childnode refid="1459" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1460">
        <label>GlfAnyGLContextScopeHolder</label>
        <link refid="class_glf_any_g_l_context_scope_holder"/>
        <childnode refid="1459" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1459">
        <label>GlfGLContextScopeHolder</label>
        <link refid="class_glf_g_l_context_scope_holder"/>
      </node>
    </inheritancegraph>
    <location file="pxr/imaging/glf/glContext.h" line="171" column="1" bodyfile="pxr/imaging/glf/glContext.h" bodystart="170" bodyend="193"/>
    <listofallmembers>
      <member refid="class_glf_g_l_context_scope_holder_1a9c1b647a70ebbec19fd18771eabf9165" prot="protected" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>_MakeNewContextCurrent</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1ad895ee68f610b9fd2ead761fda3ea34e" prot="private" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>_newContext</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1a375c594653797f9de620def9daef70ae" prot="private" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>_oldContext</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1a594e92a76231189d4ebe59ae1ad4e978" prot="protected" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>_RestoreOldContext</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1ac9c0101fe7f8467004625de589a5163c" prot="public" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>GlfGLContextScopeHolder</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1a7106d0bdc4a054823aee13102d08c295" prot="public" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>GlfGLContextScopeHolder</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1a5f6c66a1252b2a5a6d18e0a18cf3d177" prot="public" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>operator=</name></member>
      <member refid="class_glf_g_l_context_scope_holder_1ad3716f47a6c41b30e8dcdab9267c79fe" prot="public" virt="non-virtual"><scope>GlfGLContextScopeHolder</scope><name>~GlfGLContextScopeHolder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
