<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="predicate_library_8h" kind="file" language="C++">
    <compoundname>predicateLibrary.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="usd_2sdf_2api_8h" local="yes">pxr/usd/sdf/api.h</includes>
    <includes refid="base_2tf_2diagnostic_8h" local="yes">pxr/base/tf/diagnostic.h</includes>
    <includes refid="function_traits_8h" local="yes">pxr/base/tf/functionTraits.h</includes>
    <includes refid="robin__map_8h" local="yes">pxr/base/tf/pxrTslRobinMap/robin_map.h</includes>
    <includes refid="vt_2value_8h" local="yes">pxr/base/vt/value.h</includes>
    <includes refid="predicate_expression_8h" local="yes">pxr/usd/sdf/predicateExpression.h</includes>
    <includes local="yes">pxr/usd/sdf/invoke.hpp</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="path_expression_eval_8h" local="yes">pxr/usd/sdf/pathExpressionEval.h</includedby>
    <includedby refid="predicate_program_8h" local="yes">pxr/usd/sdf/predicateProgram.h</includedby>
    <includedby refid="collection_predicate_library_8h" local="yes">pxr/usd/usd/collectionPredicateLibrary.h</includedby>
    <incdepgraph>
      <node id="182620">
        <label>list</label>
      </node>
      <node id="182562">
        <label>locale</label>
      </node>
      <node id="182627">
        <label>atomic</label>
      </node>
      <node id="182564">
        <label>stdarg.h</label>
      </node>
      <node id="182607">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="182608" relation="include">
        </childnode>
        <childnode refid="182579" relation="include">
        </childnode>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
        <childnode refid="182609" relation="include">
        </childnode>
      </node>
      <node id="182571">
        <label>functional</label>
      </node>
      <node id="182547">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182544">
        <label>pxr/usd/sdf/predicateLibrary.h</label>
        <link refid="predicate_library_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182546" relation="include">
        </childnode>
        <childnode refid="182549" relation="include">
        </childnode>
        <childnode refid="182565" relation="include">
        </childnode>
        <childnode refid="182570" relation="include">
        </childnode>
        <childnode refid="182590" relation="include">
        </childnode>
        <childnode refid="182647" relation="include">
        </childnode>
        <childnode refid="182648" relation="include">
        </childnode>
        <childnode refid="182572" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182582">
        <label>limits</label>
      </node>
      <node id="182595">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="182646">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="182581">
        <label>iterator</label>
      </node>
      <node id="182579">
        <label>cstdint</label>
      </node>
      <node id="182575">
        <label>robin_hash.h</label>
        <link refid="robin__hash_8h_source"/>
        <childnode refid="182576" relation="include">
        </childnode>
        <childnode refid="182577" relation="include">
        </childnode>
        <childnode refid="182578" relation="include">
        </childnode>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182579" relation="include">
        </childnode>
        <childnode refid="182580" relation="include">
        </childnode>
        <childnode refid="182581" relation="include">
        </childnode>
        <childnode refid="182582" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182583" relation="include">
        </childnode>
        <childnode refid="182568" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
        <childnode refid="182585" relation="include">
        </childnode>
        <childnode refid="182545" relation="include">
        </childnode>
      </node>
      <node id="182561">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182555" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
        <childnode refid="182562" relation="include">
        </childnode>
        <childnode refid="182563" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
      </node>
      <node id="182592">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182578">
        <label>cmath</label>
      </node>
      <node id="182612">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182557" relation="include">
        </childnode>
        <childnode refid="182613" relation="include">
        </childnode>
        <childnode refid="182607" relation="include">
        </childnode>
        <childnode refid="182614" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
      </node>
      <node id="182577">
        <label>cassert</label>
      </node>
      <node id="182583">
        <label>stdexcept</label>
      </node>
      <node id="182604">
        <label>pxr/base/tf/pointerAndBits.h</label>
        <link refid="pointer_and_bits_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182592" relation="include">
        </childnode>
        <childnode refid="182579" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
      </node>
      <node id="182619">
        <label>cstdarg</label>
      </node>
      <node id="182553">
        <label>string</label>
      </node>
      <node id="182632">
        <label>pxr/base/tf/functionRef.h</label>
        <link refid="function_ref_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
      </node>
      <node id="182555">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182616">
        <label>map</label>
      </node>
      <node id="182608">
        <label>cinttypes</label>
      </node>
      <node id="182545">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="182643">
        <label>unordered_set</label>
      </node>
      <node id="182625">
        <label>pxr/base/tf/type_Impl.h</label>
        <link refid="type___impl_8h_source"/>
        <childnode refid="182626" relation="include">
        </childnode>
      </node>
      <node id="182600">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182551" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182602" relation="include">
        </childnode>
      </node>
      <node id="182629">
        <label>pxr/base/vt/api.h</label>
        <link refid="base_2vt_2api_8h_source"/>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182566">
        <label>pxr/base/tf/meta.h</label>
        <link refid="meta_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182568" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182580">
        <label>exception</label>
      </node>
      <node id="182546">
        <label>pxr/usd/sdf/api.h</label>
        <link refid="usd_2sdf_2api_8h_source"/>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182560">
        <label>stddef.h</label>
      </node>
      <node id="182557">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182648">
        <label>pxr/usd/sdf/invoke.hpp</label>
      </node>
      <node id="182618">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182605">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
      </node>
      <node id="182637">
        <label>pxr/base/gf/ilmbase_half.h</label>
        <link refid="ilmbase__half_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182638" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
      </node>
      <node id="182636">
        <label>pxr/base/gf/half.h</label>
        <link refid="half_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182637" relation="include">
        </childnode>
        <childnode refid="182639" relation="include">
        </childnode>
        <childnode refid="182640" relation="include">
        </childnode>
      </node>
      <node id="182638">
        <label>pxr/base/gf/api.h</label>
        <link refid="base_2gf_2api_8h_source"/>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182593">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="182592" relation="include">
        </childnode>
        <childnode refid="182562" relation="include">
        </childnode>
        <childnode refid="182594" relation="include">
        </childnode>
      </node>
      <node id="182588">
        <label>ratio</label>
      </node>
      <node id="182565">
        <label>pxr/base/tf/functionTraits.h</label>
        <link refid="function_traits_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182566" relation="include">
        </childnode>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182568" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182563">
        <label>any</label>
      </node>
      <node id="182609">
        <label>sys/types.h</label>
      </node>
      <node id="182570">
        <label>pxr/base/tf/pxrTslRobinMap/robin_map.h</label>
        <link refid="robin__map_8h_source"/>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182571" relation="include">
        </childnode>
        <childnode refid="182572" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
        <childnode refid="182575" relation="include">
        </childnode>
        <childnode refid="182545" relation="include">
        </childnode>
      </node>
      <node id="182610">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
        <childnode refid="182600" relation="include">
        </childnode>
        <childnode refid="182611" relation="include">
        </childnode>
        <childnode refid="182618" relation="include">
        </childnode>
        <childnode refid="182605" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182601">
        <label>typeinfo</label>
      </node>
      <node id="182597">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="182596">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="182568">
        <label>tuple</label>
      </node>
      <node id="182641">
        <label>pxr/base/tf/token.h</label>
        <link refid="token_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182554" relation="include">
        </childnode>
        <childnode refid="182611" relation="include">
        </childnode>
        <childnode refid="182642" relation="include">
        </childnode>
        <childnode refid="182604" relation="include">
        </childnode>
        <childnode refid="182627" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
        <childnode refid="182617" relation="include">
        </childnode>
      </node>
      <node id="182626">
        <label>pxr/base/tf/mallocTag.h</label>
        <link refid="malloc_tag_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182627" relation="include">
        </childnode>
        <childnode refid="182628" relation="include">
        </childnode>
        <childnode refid="182579" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182613">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
        <childnode refid="182607" relation="include">
        </childnode>
        <childnode refid="182578" relation="include">
        </childnode>
      </node>
      <node id="182584">
        <label>vector</label>
      </node>
      <node id="182630">
        <label>pxr/base/vt/hash.h</label>
        <link refid="vt_2hash_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182629" relation="include">
        </childnode>
        <childnode refid="182611" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
      </node>
      <node id="182556">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182599">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182593" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
      </node>
      <node id="182639">
        <label>pxr/base/gf/ilmbase_halfLimits.h</label>
        <link refid="ilmbase__half_limits_8h_source"/>
        <childnode refid="182582" relation="include">
        </childnode>
        <childnode refid="182637" relation="include">
        </childnode>
      </node>
      <node id="182574">
        <label>utility</label>
      </node>
      <node id="182586">
        <label>array</label>
      </node>
      <node id="182621">
        <label>sstream</label>
      </node>
      <node id="182550">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182551" relation="include">
        </childnode>
        <childnode refid="182552" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
      </node>
      <node id="182548">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="182633">
        <label>pxr/base/vt/traits.h</label>
        <link refid="vt_2traits_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182629" relation="include">
        </childnode>
        <childnode refid="182618" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182585">
        <label>robin_growth_policy.h</label>
        <link refid="robin__growth__policy_8h_source"/>
        <childnode refid="182576" relation="include">
        </childnode>
        <childnode refid="182586" relation="include">
        </childnode>
        <childnode refid="182587" relation="include">
        </childnode>
        <childnode refid="182578" relation="include">
        </childnode>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182579" relation="include">
        </childnode>
        <childnode refid="182581" relation="include">
        </childnode>
        <childnode refid="182582" relation="include">
        </childnode>
        <childnode refid="182588" relation="include">
        </childnode>
        <childnode refid="182583" relation="include">
        </childnode>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182589" relation="include">
        </childnode>
      </node>
      <node id="182558">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182611">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182612" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182615" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182616" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182617" relation="include">
        </childnode>
        <childnode refid="182602" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182614">
        <label>math.h</label>
      </node>
      <node id="182606">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182555" relation="include">
        </childnode>
        <childnode refid="182558" relation="include">
        </childnode>
        <childnode refid="182607" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182610" relation="include">
        </childnode>
        <childnode refid="182619" relation="include">
        </childnode>
        <childnode refid="182615" relation="include">
        </childnode>
        <childnode refid="182620" relation="include">
        </childnode>
        <childnode refid="182617" relation="include">
        </childnode>
        <childnode refid="182621" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182598">
        <label>iosfwd</label>
      </node>
      <node id="182628">
        <label>cstdlib</label>
      </node>
      <node id="182559">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182552" relation="include">
        </childnode>
        <childnode refid="182560" relation="include">
        </childnode>
      </node>
      <node id="182622">
        <label>pxr/base/tf/type.h</label>
        <link refid="type_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182623" relation="include">
        </childnode>
        <childnode refid="182624" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
        <childnode refid="182617" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
        <childnode refid="182625" relation="include">
        </childnode>
      </node>
      <node id="182594">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="182589">
        <label>iostream</label>
      </node>
      <node id="182634">
        <label>pxr/base/vt/types.h</label>
        <link refid="base_2vt_2types_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182629" relation="include">
        </childnode>
        <childnode refid="182633" relation="include">
        </childnode>
        <childnode refid="182607" relation="include">
        </childnode>
        <childnode refid="182635" relation="include">
        </childnode>
        <childnode refid="182636" relation="include">
        </childnode>
        <childnode refid="182618" relation="include">
        </childnode>
        <childnode refid="182641" relation="include">
        </childnode>
        <childnode refid="182644" relation="include">
        </childnode>
        <childnode refid="182645" relation="include">
        </childnode>
        <childnode refid="182567" relation="include">
        </childnode>
        <childnode refid="182615" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
      </node>
      <node id="182567">
        <label>cstddef</label>
      </node>
      <node id="182635">
        <label>pxr/base/gf/declare.h</label>
        <link refid="base_2gf_2declare_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
      </node>
      <node id="182624">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
      </node>
      <node id="182587">
        <label>climits</label>
      </node>
      <node id="182647">
        <label>pxr/usd/sdf/predicateExpression.h</label>
        <link refid="predicate_expression_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182546" relation="include">
        </childnode>
        <childnode refid="182611" relation="include">
        </childnode>
        <childnode refid="182590" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
        <childnode refid="182568" relation="include">
        </childnode>
        <childnode refid="182574" relation="include">
        </childnode>
        <childnode refid="182584" relation="include">
        </childnode>
      </node>
      <node id="182554">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182555" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182557" relation="include">
        </childnode>
        <childnode refid="182558" relation="include">
        </childnode>
        <childnode refid="182559" relation="include">
        </childnode>
        <childnode refid="182560" relation="include">
        </childnode>
      </node>
      <node id="182591">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182592" relation="include">
        </childnode>
        <childnode refid="182593" relation="include">
        </childnode>
        <childnode refid="182595" relation="include">
        </childnode>
        <childnode refid="182596" relation="include">
        </childnode>
        <childnode refid="182597" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182573" relation="include">
        </childnode>
      </node>
      <node id="182645">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="182569">
        <label>type_traits</label>
      </node>
      <node id="182617">
        <label>set</label>
      </node>
      <node id="182603">
        <label>pxr/base/tf/anyUniquePtr.h</label>
        <link refid="any_unique_ptr_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182551">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="182547" relation="include">
        </childnode>
      </node>
      <node id="182552">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="182548" relation="include">
        </childnode>
      </node>
      <node id="182576">
        <label>algorithm</label>
      </node>
      <node id="182615">
        <label>cstring</label>
      </node>
      <node id="182640">
        <label>pxr/base/gf/traits.h</label>
        <link refid="gf_2traits_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182573">
        <label>memory</label>
      </node>
      <node id="182623">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182555" relation="include">
        </childnode>
        <childnode refid="182618" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182571" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
      </node>
      <node id="182572">
        <label>initializer_list</label>
      </node>
      <node id="182549">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182550" relation="include">
        </childnode>
        <childnode refid="182554" relation="include">
        </childnode>
        <childnode refid="182556" relation="include">
        </childnode>
        <childnode refid="182558" relation="include">
        </childnode>
        <childnode refid="182561" relation="include">
        </childnode>
        <childnode refid="182560" relation="include">
        </childnode>
        <childnode refid="182564" relation="include">
        </childnode>
        <childnode refid="182553" relation="include">
        </childnode>
      </node>
      <node id="182642">
        <label>pxr/base/tf/hashset.h</label>
        <link refid="hashset_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182548" relation="include">
        </childnode>
        <childnode refid="182643" relation="include">
        </childnode>
      </node>
      <node id="182602">
        <label>typeindex</label>
      </node>
      <node id="182590">
        <label>pxr/base/vt/value.h</label>
        <link refid="vt_2value_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182591" relation="include">
        </childnode>
        <childnode refid="182599" relation="include">
        </childnode>
        <childnode refid="182600" relation="include">
        </childnode>
        <childnode refid="182558" relation="include">
        </childnode>
        <childnode refid="182592" relation="include">
        </childnode>
        <childnode refid="182603" relation="include">
        </childnode>
        <childnode refid="182604" relation="include">
        </childnode>
        <childnode refid="182605" relation="include">
        </childnode>
        <childnode refid="182606" relation="include">
        </childnode>
        <childnode refid="182612" relation="include">
        </childnode>
        <childnode refid="182622" relation="include">
        </childnode>
        <childnode refid="182629" relation="include">
        </childnode>
        <childnode refid="182630" relation="include">
        </childnode>
        <childnode refid="182631" relation="include">
        </childnode>
        <childnode refid="182633" relation="include">
        </childnode>
        <childnode refid="182634" relation="include">
        </childnode>
        <childnode refid="182646" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
      <node id="182644">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="182631">
        <label>pxr/base/vt/streamOut.h</label>
        <link refid="stream_out_8h_source"/>
        <childnode refid="182545" relation="include">
        </childnode>
        <childnode refid="182629" relation="include">
        </childnode>
        <childnode refid="182610" relation="include">
        </childnode>
        <childnode refid="182632" relation="include">
        </childnode>
        <childnode refid="182598" relation="include">
        </childnode>
        <childnode refid="182601" relation="include">
        </childnode>
        <childnode refid="182569" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="182656">
        <label>pxr/usd/usdLux/diskLight.h</label>
        <link refid="disk_light_8h"/>
      </node>
      <node id="182688">
        <label>pxr/usdImaging/usdImaging/hermiteCurvesAdapter.h</label>
        <link refid="hermite_curves_adapter_8h"/>
      </node>
      <node id="182667">
        <label>pxr/usd/usdPhysics/collisionGroup.h</label>
        <link refid="collision_group_8h"/>
      </node>
      <node id="182649">
        <label>pxr/usd/sdf/predicateLibrary.h</label>
        <link refid="predicate_library_8h"/>
        <childnode refid="182650" relation="include">
        </childnode>
        <childnode refid="182727" relation="include">
        </childnode>
        <childnode refid="182728" relation="include">
        </childnode>
      </node>
      <node id="182661">
        <label>pxr/usd/usdLux/distantLight.h</label>
        <link refid="distant_light_8h"/>
      </node>
      <node id="182709">
        <label>pxr/usdImaging/usdImaging/lightFilterAdapter.h</label>
        <link refid="light_filter_adapter_8h"/>
        <childnode refid="182710" relation="include">
        </childnode>
        <childnode refid="182711" relation="include">
        </childnode>
        <childnode refid="182712" relation="include">
        </childnode>
        <childnode refid="182713" relation="include">
        </childnode>
      </node>
      <node id="182707">
        <label>pxr/usdImaging/usdImaging/rectLightAdapter.h</label>
        <link refid="rect_light_adapter_8h"/>
      </node>
      <node id="182728">
        <label>pxr/usd/usd/collectionPredicateLibrary.h</label>
        <link refid="collection_predicate_library_8h"/>
      </node>
      <node id="182698">
        <label>pxr/usdImaging/usdImaging/lightAdapter.h</label>
        <link refid="light_adapter_8h"/>
        <childnode refid="182699" relation="include">
        </childnode>
        <childnode refid="182700" relation="include">
        </childnode>
        <childnode refid="182701" relation="include">
        </childnode>
        <childnode refid="182702" relation="include">
        </childnode>
        <childnode refid="182703" relation="include">
        </childnode>
        <childnode refid="182704" relation="include">
        </childnode>
        <childnode refid="182705" relation="include">
        </childnode>
        <childnode refid="182706" relation="include">
        </childnode>
        <childnode refid="182707" relation="include">
        </childnode>
        <childnode refid="182708" relation="include">
        </childnode>
      </node>
      <node id="182669">
        <label>pxr/usd/usdRi/renderPassAPI.h</label>
        <link refid="render_pass_a_p_i_8h"/>
      </node>
      <node id="182693">
        <label>pxr/usdImaging/usdImaging/pointInstancerAdapter.h</label>
        <link refid="point_instancer_adapter_8h"/>
      </node>
      <node id="182652">
        <label>pxr/usd/usd/collectionAPI.h</label>
        <link refid="collection_a_p_i_8h"/>
        <childnode refid="182653" relation="include">
        </childnode>
        <childnode refid="182665" relation="include">
        </childnode>
        <childnode refid="182667" relation="include">
        </childnode>
        <childnode refid="182668" relation="include">
        </childnode>
        <childnode refid="182669" relation="include">
        </childnode>
        <childnode refid="182670" relation="include">
        </childnode>
        <childnode refid="182725" relation="include">
        </childnode>
        <childnode refid="182726" relation="include">
        </childnode>
      </node>
      <node id="182710">
        <label>pxr/usdImaging/usdImaging/pluginLightFilterAdapter.h</label>
        <link refid="plugin_light_filter_adapter_8h"/>
      </node>
      <node id="182705">
        <label>pxr/usdImaging/usdImaging/pluginLightAdapter.h</label>
        <link refid="plugin_light_adapter_8h"/>
      </node>
      <node id="182699">
        <label>pxr/usdImaging/usdImaging/cylinderLightAdapter.h</label>
        <link refid="cylinder_light_adapter_8h"/>
      </node>
      <node id="182721">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrIntegratorAdapter.h</label>
        <link refid="pxr_integrator_adapter_8h"/>
      </node>
      <node id="182664">
        <label>pxr/usd/usdLux/geometryLight.h</label>
        <link refid="geometry_light_8h"/>
      </node>
      <node id="182725">
        <label>pxr/usd/usdUtils/authoring.h</label>
        <link refid="authoring_8h"/>
      </node>
      <node id="182683">
        <label>pxr/usdImaging/usdVolImaging/openvdbAssetAdapter.h</label>
        <link refid="openvdb_asset_adapter_8h_source"/>
      </node>
      <node id="182653">
        <label>pxr/usd/usdLux/lightAPI.h</label>
        <link refid="light_a_p_i_8h"/>
        <childnode refid="182654" relation="include">
        </childnode>
        <childnode refid="182660" relation="include">
        </childnode>
      </node>
      <node id="182692">
        <label>pxr/usdImaging/usdImaging/planeAdapter.h</label>
        <link refid="plane_adapter_8h"/>
      </node>
      <node id="182658">
        <label>pxr/usd/usdLux/rectLight.h</label>
        <link refid="rect_light_8h"/>
      </node>
      <node id="182701">
        <label>pxr/usdImaging/usdImaging/distantLightAdapter.h</label>
        <link refid="distant_light_adapter_8h"/>
      </node>
      <node id="182716">
        <label>pxr/usdImaging/usdImaging/renderSettingsAdapter.h</label>
        <link refid="render_settings_adapter_8h"/>
      </node>
      <node id="182704">
        <label>pxr/usdImaging/usdImaging/geometryLightAdapter.h</label>
        <link refid="geometry_light_adapter_8h"/>
      </node>
      <node id="182651">
        <label>pxr/usd/usd/collectionMembershipQuery.h</label>
        <link refid="collection_membership_query_8h"/>
        <childnode refid="182652" relation="include">
        </childnode>
      </node>
      <node id="182654">
        <label>pxr/usd/usdLux/boundableLightBase.h</label>
        <link refid="boundable_light_base_8h"/>
        <childnode refid="182655" relation="include">
        </childnode>
        <childnode refid="182656" relation="include">
        </childnode>
        <childnode refid="182657" relation="include">
        </childnode>
        <childnode refid="182658" relation="include">
        </childnode>
        <childnode refid="182659" relation="include">
        </childnode>
      </node>
      <node id="182662">
        <label>pxr/usd/usdLux/domeLight.h</label>
        <link refid="dome_light_8h"/>
      </node>
      <node id="182666">
        <label>pxr/usd/usdLux/pluginLightFilter.h</label>
        <link refid="plugin_light_filter_8h"/>
      </node>
      <node id="182726">
        <label>pxr/usdImaging/usdImaging/collectionCache.h</label>
        <link refid="collection_cache_8h"/>
        <childnode refid="182672" relation="include">
        </childnode>
        <childnode refid="182675" relation="include">
        </childnode>
      </node>
      <node id="182720">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrDisplayFilterAdapter.h</label>
        <link refid="pxr_display_filter_adapter_8h"/>
      </node>
      <node id="182677">
        <label>pxr/usdImaging/usdImaging/cameraAdapter.h</label>
        <link refid="camera_adapter_8h"/>
      </node>
      <node id="182708">
        <label>pxr/usdImaging/usdImaging/sphereLightAdapter.h</label>
        <link refid="sphere_light_adapter_8h"/>
      </node>
      <node id="182676">
        <label>pxr/usdImaging/usdImaging/basisCurvesAdapter.h</label>
        <link refid="basis_curves_adapter_8h"/>
      </node>
      <node id="182659">
        <label>pxr/usd/usdLux/sphereLight.h</label>
        <link refid="sphere_light_8h"/>
      </node>
      <node id="182689">
        <label>pxr/usdImaging/usdImaging/meshAdapter.h</label>
        <link refid="mesh_adapter_8h"/>
      </node>
      <node id="182679">
        <label>pxr/usdImaging/usdImaging/cubeAdapter.h</label>
        <link refid="cube_adapter_8h"/>
      </node>
      <node id="182714">
        <label>pxr/usdImaging/usdImaging/materialAdapter.h</label>
        <link refid="material_adapter_8h"/>
      </node>
      <node id="182655">
        <label>pxr/usd/usdLux/cylinderLight.h</label>
        <link refid="cylinder_light_8h"/>
      </node>
      <node id="182686">
        <label>pxr/usdImaging/usdImaging/coneAdapter.h</label>
        <link refid="cone_adapter_8h"/>
      </node>
      <node id="182697">
        <label>pxr/usdImaging/usdImaging/instanceAdapter.h</label>
        <link refid="instance_adapter_8h"/>
      </node>
      <node id="182650">
        <label>pxr/usd/sdf/pathExpressionEval.h</label>
        <link refid="path_expression_eval_8h_source"/>
        <childnode refid="182651" relation="include">
        </childnode>
      </node>
      <node id="182663">
        <label>pxr/usd/usdLux/domeLight_1.h</label>
        <link refid="dome_light__1_8h"/>
      </node>
      <node id="182706">
        <label>pxr/usdImaging/usdImaging/portalLightAdapter.h</label>
        <link refid="portal_light_adapter_8h"/>
      </node>
      <node id="182700">
        <label>pxr/usdImaging/usdImaging/diskLightAdapter.h</label>
        <link refid="disk_light_adapter_8h"/>
      </node>
      <node id="182673">
        <label>pxr/usdImaging/usdImaging/indexProxy.h</label>
        <link refid="index_proxy_8h"/>
      </node>
      <node id="182665">
        <label>pxr/usd/usdLux/lightFilter.h</label>
        <link refid="usd_2usd_lux_2light_filter_8h"/>
        <childnode refid="182666" relation="include">
        </childnode>
      </node>
      <node id="182696">
        <label>pxr/usdImaging/usdImaging/volumeAdapter.h</label>
        <link refid="volume_adapter_8h"/>
      </node>
      <node id="182681">
        <label>pxr/usdImaging/usdImaging/fieldAdapter.h</label>
        <link refid="field_adapter_8h"/>
        <childnode refid="182682" relation="include">
        </childnode>
        <childnode refid="182683" relation="include">
        </childnode>
      </node>
      <node id="182694">
        <label>pxr/usdImaging/usdImaging/pointsAdapter.h</label>
        <link refid="points_adapter_8h"/>
      </node>
      <node id="182675">
        <label>pxr/usdImaging/usdImaging/primAdapter.h</label>
        <link refid="prim_adapter_8h"/>
        <childnode refid="182676" relation="include">
        </childnode>
        <childnode refid="182677" relation="include">
        </childnode>
        <childnode refid="182678" relation="include">
        </childnode>
        <childnode refid="182679" relation="include">
        </childnode>
        <childnode refid="182680" relation="include">
        </childnode>
        <childnode refid="182681" relation="include">
        </childnode>
        <childnode refid="182684" relation="include">
        </childnode>
        <childnode refid="182688" relation="include">
        </childnode>
        <childnode refid="182697" relation="include">
        </childnode>
        <childnode refid="182698" relation="include">
        </childnode>
        <childnode refid="182709" relation="include">
        </childnode>
        <childnode refid="182714" relation="include">
        </childnode>
        <childnode refid="182689" relation="include">
        </childnode>
        <childnode refid="182690" relation="include">
        </childnode>
        <childnode refid="182691" relation="include">
        </childnode>
        <childnode refid="182693" relation="include">
        </childnode>
        <childnode refid="182694" relation="include">
        </childnode>
        <childnode refid="182715" relation="include">
        </childnode>
        <childnode refid="182716" relation="include">
        </childnode>
        <childnode refid="182717" relation="include">
        </childnode>
        <childnode refid="182718" relation="include">
        </childnode>
        <childnode refid="182695" relation="include">
        </childnode>
        <childnode refid="182696" relation="include">
        </childnode>
        <childnode refid="182719" relation="include">
        </childnode>
        <childnode refid="182720" relation="include">
        </childnode>
        <childnode refid="182721" relation="include">
        </childnode>
        <childnode refid="182722" relation="include">
        </childnode>
        <childnode refid="182723" relation="include">
        </childnode>
        <childnode refid="182724" relation="include">
        </childnode>
      </node>
      <node id="182719">
        <label>pxr/usdImaging/usdProcImaging/generativeProceduralAdapter.h</label>
        <link refid="generative_procedural_adapter_8h_source"/>
      </node>
      <node id="182682">
        <label>pxr/usdImaging/usdVolImaging/field3dAssetAdapter.h</label>
        <link refid="field3d_asset_adapter_8h_source"/>
      </node>
      <node id="182674">
        <label>pxr/usdImaging/usdImaging/unitTestHelper.h</label>
        <link refid="usd_imaging_2usd_imaging_2unit_test_helper_8h"/>
      </node>
      <node id="182711">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrBarnLightFilterAdapter.h</label>
        <link refid="pxr_barn_light_filter_adapter_8h"/>
      </node>
      <node id="182717">
        <label>pxr/usdImaging/usdImaging/renderVarAdapter.h</label>
        <link refid="render_var_adapter_8h"/>
      </node>
      <node id="182724">
        <label>pxr/usdImaging/usdSkelImaging/skelRootAdapter.h</label>
        <link refid="skel_root_adapter_8h_source"/>
      </node>
      <node id="182712">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrIntMultLightFilterAdapter.h</label>
        <link refid="pxr_int_mult_light_filter_adapter_8h"/>
      </node>
      <node id="182695">
        <label>pxr/usdImaging/usdImaging/sphereAdapter.h</label>
        <link refid="sphere_adapter_8h"/>
      </node>
      <node id="182685">
        <label>pxr/usdImaging/usdImaging/capsuleAdapter.h</label>
        <link refid="capsule_adapter_8h"/>
      </node>
      <node id="182678">
        <label>pxr/usdImaging/usdImaging/coordSysAdapter.h</label>
        <link refid="coord_sys_adapter_8h"/>
      </node>
      <node id="182718">
        <label>pxr/usdImaging/usdImaging/representedByAncestorPrimAdapter.h</label>
        <link refid="represented_by_ancestor_prim_adapter_8h"/>
        <childnode refid="182714" relation="include">
        </childnode>
      </node>
      <node id="182713">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrRodLightFilterAdapter.h</label>
        <link refid="pxr_rod_light_filter_adapter_8h"/>
      </node>
      <node id="182727">
        <label>pxr/usd/sdf/predicateProgram.h</label>
        <link refid="predicate_program_8h_source"/>
        <childnode refid="182650" relation="include">
        </childnode>
      </node>
      <node id="182657">
        <label>pxr/usd/usdLux/portalLight.h</label>
        <link refid="portal_light_8h"/>
      </node>
      <node id="182703">
        <label>pxr/usdImaging/usdImaging/domeLightAdapter.h</label>
        <link refid="dome_light_adapter_8h"/>
      </node>
      <node id="182672">
        <label>pxr/usdImaging/usdImaging/delegate.h</label>
        <link refid="delegate_8h"/>
        <childnode refid="182673" relation="include">
        </childnode>
        <childnode refid="182674" relation="include">
        </childnode>
      </node>
      <node id="182691">
        <label>pxr/usdImaging/usdImaging/nurbsPatchAdapter.h</label>
        <link refid="nurbs_patch_adapter_8h"/>
      </node>
      <node id="182670">
        <label>pxr/usd/usdShade/materialBindingAPI.h</label>
        <link refid="material_binding_a_p_i_8h"/>
        <childnode refid="182671" relation="include">
        </childnode>
      </node>
      <node id="182690">
        <label>pxr/usdImaging/usdImaging/nurbsCurvesAdapter.h</label>
        <link refid="nurbs_curves_adapter_8h"/>
      </node>
      <node id="182715">
        <label>pxr/usdImaging/usdImaging/renderProductAdapter.h</label>
        <link refid="render_product_adapter_8h"/>
      </node>
      <node id="182702">
        <label>pxr/usdImaging/usdImaging/domeLight_1Adapter.h</label>
        <link refid="dome_light__1_adapter_8h"/>
      </node>
      <node id="182671">
        <label>pxr/usdImaging/usdImaging/resolvedAttributeCache.h</label>
        <link refid="resolved_attribute_cache_8h"/>
        <childnode refid="182672" relation="include">
        </childnode>
        <childnode refid="182675" relation="include">
        </childnode>
      </node>
      <node id="182684">
        <label>pxr/usdImaging/usdImaging/gprimAdapter.h</label>
        <link refid="gprim_adapter_8h"/>
        <childnode refid="182676" relation="include">
        </childnode>
        <childnode refid="182685" relation="include">
        </childnode>
        <childnode refid="182686" relation="include">
        </childnode>
        <childnode refid="182679" relation="include">
        </childnode>
        <childnode refid="182687" relation="include">
        </childnode>
        <childnode refid="182688" relation="include">
        </childnode>
        <childnode refid="182689" relation="include">
        </childnode>
        <childnode refid="182690" relation="include">
        </childnode>
        <childnode refid="182691" relation="include">
        </childnode>
        <childnode refid="182692" relation="include">
        </childnode>
        <childnode refid="182693" relation="include">
        </childnode>
        <childnode refid="182694" relation="include">
        </childnode>
        <childnode refid="182695" relation="include">
        </childnode>
        <childnode refid="182696" relation="include">
        </childnode>
      </node>
      <node id="182660">
        <label>pxr/usd/usdLux/nonboundableLightBase.h</label>
        <link refid="nonboundable_light_base_8h"/>
        <childnode refid="182661" relation="include">
        </childnode>
        <childnode refid="182662" relation="include">
        </childnode>
        <childnode refid="182663" relation="include">
        </childnode>
        <childnode refid="182664" relation="include">
        </childnode>
      </node>
      <node id="182687">
        <label>pxr/usdImaging/usdImaging/cylinderAdapter.h</label>
        <link refid="cylinder_adapter_8h"/>
      </node>
      <node id="182723">
        <label>pxr/usdImaging/usdSkelImaging/skeletonAdapter.h</label>
        <link refid="skeleton_adapter_8h_source"/>
      </node>
      <node id="182680">
        <label>pxr/usdImaging/usdImaging/drawModeAdapter.h</label>
        <link refid="draw_mode_adapter_8h_source"/>
      </node>
      <node id="182668">
        <label>pxr/usd/usdRender/pass.h</label>
        <link refid="pass_8h"/>
      </node>
      <node id="182722">
        <label>pxr/usdImaging/usdRiPxrImaging/pxrSampleFilterAdapter.h</label>
        <link refid="pxr_sample_filter_adapter_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_sdf_predicate_param_names_and_defaults" prot="public">SdfPredicateParamNamesAndDefaults</innerclass>
    <innerclass refid="struct_sdf_predicate_param_names_and_defaults_1_1_param" prot="public">SdfPredicateParamNamesAndDefaults::Param</innerclass>
    <innerclass refid="class_sdf_predicate_function_result" prot="public">SdfPredicateFunctionResult</innerclass>
    <innerclass refid="class_sdf_predicate_program" prot="public">SdfPredicateProgram</innerclass>
    <innerclass refid="class_sdf_predicate_library" prot="public">SdfPredicateLibrary</innerclass>
    <innerclass refid="class_sdf_predicate_library" prot="public">SdfPredicateLibrary</innerclass>
    <innerclass refid="struct_sdf_predicate_library_1_1___overload_binder_base" prot="private">SdfPredicateLibrary::_OverloadBinderBase</innerclass>
    <innerclass refid="struct_sdf_predicate_library_1_1___overload_binder" prot="private">SdfPredicateLibrary::_OverloadBinder</innerclass>
    <innerclass refid="struct_sdf_predicate_library_1_1___custom_binder" prot="private">SdfPredicateLibrary::_CustomBinder</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="predicate_library_8h_1a62f53e75f3fe5e6767d7758d9f0c7a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DomainType</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref>&lt; DomainType &gt;</type>
        <definition>SdfPredicateProgram&lt; DomainType &gt; SdfLinkPredicateExpression</definition>
        <argsstring>(SdfPredicateExpression const &amp;expr, SdfPredicateLibrary&lt; DomainType &gt; const &amp;lib)</argsstring>
        <name>SdfLinkPredicateExpression</name>
        <param>
          <type><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref>&lt; DomainType &gt; const &amp;</type>
          <declname>lib</declname>
        </param>
        <briefdescription>
<para>Link <computeroutput>expr</computeroutput> with <computeroutput>lib</computeroutput> and return a callable program that evaluates <computeroutput>expr</computeroutput> on given objects of the <computeroutput>DomainType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If linking <computeroutput>expr</computeroutput> and <computeroutput>lib</computeroutput> fails, issue a TF_RUNTIME_ERROR with a message, and return an empty program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="219" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="165" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_USD_SDF_PREDICATE_LIBRARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_USD_SDF_PREDICATE_LIBRARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/sdf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2tf_2diagnostic_8h" kindref="compound">pxr/base/tf/diagnostic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/functionTraits.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pxrTslRobinMap/robin_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/vt/value.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/sdf/predicateExpression.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/usd/sdf/invoke.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="struct_sdf_predicate_param_names_and_defaults" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">SdfPredicateParamNamesAndDefaults</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="struct_sdf_predicate_param_names_and_defaults_1_1_param" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sdf_predicate_param_names_and_defaults_1_1_param" kindref="compound">Param</ref><sp/>{</highlight></codeline>
<codeline lineno="59" refid="struct_sdf_predicate_param_names_and_defaults_1_1_param_1a82d3035c5c20e7dfb94e1c857184bc38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1_1_param_1a82d3035c5c20e7dfb94e1c857184bc38" kindref="member">Param</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name)<sp/>:<sp/>name(name)<sp/>{}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Val&gt;</highlight></codeline>
<codeline lineno="63" refid="struct_sdf_predicate_param_names_and_defaults_1_1_param_1a4115af8fed7e4682f2adf51e987a0213" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1_1_param_1a4115af8fed7e4682f2adf51e987a0213" kindref="member">Param</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name,<sp/>Val<sp/>&amp;&amp;defVal)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name(name),<sp/>val(std::forward&lt;Val&gt;(defVal))<sp/>{}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>val;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="struct_sdf_predicate_param_names_and_defaults_1a79856d0b777b8ffcef8b94d1017c87c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1a79856d0b777b8ffcef8b94d1017c87c9" kindref="member">SdfPredicateParamNamesAndDefaults</ref>()<sp/>:<sp/>_numDefaults(0)<sp/>{}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="struct_sdf_predicate_param_names_and_defaults_1abf3355d885291adc3f32acd31c01bc46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1abf3355d885291adc3f32acd31c01bc46" kindref="member">SdfPredicateParamNamesAndDefaults</ref>(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;Param&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;params)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_params(params.begin(),<sp/>params.end())</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_numDefaults(_CountDefaults())<sp/>{}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>SDF_API</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1a571b19b8dac4bfba43d1da64a3935aa1" kindref="member">CheckValidity</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="struct_sdf_predicate_param_names_and_defaults_1aa07871df85dcc01ba40d47a4c199f51b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Param&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="struct_sdf_predicate_param_names_and_defaults_1aa07871df85dcc01ba40d47a4c199f51b" kindref="member">GetParams</ref>()<sp/>const<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_params;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="struct_sdf_predicate_param_names_and_defaults_1a0d47346604fb84159698e603c88ba51a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Param&gt;<sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1a0d47346604fb84159698e603c88ba51a" kindref="member">GetParams</ref>()<sp/>const<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(_params);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="struct_sdf_predicate_param_names_and_defaults_1a3e0fdb6def392ea404a516b2a8eca3a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults_1a3e0fdb6def392ea404a516b2a8eca3a7" kindref="member">GetNumDefaults</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_numDefaults;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>SDF_API</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_CountDefaults()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Param&gt;<sp/>_params;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_numDefaults;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="class_sdf_predicate_function_result" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref></highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Constancy<sp/>{<sp/>ConstantOverDescendants,<sp/>MayVaryOverDescendants<sp/>};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="class_sdf_predicate_function_result_1ad91042f1ad49b2411e02eb8df97c71b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="class_sdf_predicate_function_result_1ad91042f1ad49b2411e02eb8df97c71b3" kindref="member">SdfPredicateFunctionResult</ref>()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_value(false),<sp/>_constancy(MayVaryOverDescendants)<sp/>{}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_sdf_predicate_function_result_1a869c20b44bd86cb3ec3e80f9f50790b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result_1a869c20b44bd86cb3ec3e80f9f50790b3" kindref="member">SdfPredicateFunctionResult</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref>(value,<sp/>MayVaryOverDescendants)<sp/>{}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="class_sdf_predicate_function_result_1a8ea8bfdf36bf02e88ad2d7c720051b2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_function_result_1a8ea8bfdf36bf02e88ad2d7c720051b2b" kindref="member">SdfPredicateFunctionResult</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value,<sp/>Constancy<sp/>constancy)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_value(value),<sp/>_constancy(constancy)<sp/>{}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="class_sdf_predicate_function_result_1a2f9104a0ccdfa0eea9b93f7d9f03192c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/><ref refid="class_sdf_predicate_function_result_1a2f9104a0ccdfa0eea9b93f7d9f03192c" kindref="member">MakeConstant</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>value,<sp/>ConstantOverDescendants<sp/>};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139" refid="class_sdf_predicate_function_result_1a6cef68807b15427e41f0d5a0fccd9d7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/><ref refid="class_sdf_predicate_function_result_1a6cef68807b15427e41f0d5a0fccd9d7d" kindref="member">MakeVarying</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>value,<sp/>MayVaryOverDescendants<sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="class_sdf_predicate_function_result_1a914bdb822b03e3b21767a810f65630e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result_1a914bdb822b03e3b21767a810f65630e5" kindref="member">GetValue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_value;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_sdf_predicate_function_result_1ac9aa8660a6f196a4aac558041d76589e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Constancy<sp/><ref refid="class_sdf_predicate_function_result_1ac9aa8660a6f196a4aac558041d76589e" kindref="member">GetConstancy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_constancy;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_sdf_predicate_function_result_1a945263e85c27f3216a8323cfc16d8919" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result_1a945263e85c27f3216a8323cfc16d8919" kindref="member">IsConstant</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result_1ac9aa8660a6f196a4aac558041d76589e" kindref="member">GetConstancy</ref>()<sp/>==<sp/>ConstantOverDescendants;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="class_sdf_predicate_function_result_1a67b76affb3b5d35fa419ac234144038b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_value;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="class_sdf_predicate_function_result_1a231caa1804786e7d277a2e6f85551e06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/><ref refid="class_sdf_predicate_function_result_1a231caa1804786e7d277a2e6f85551e06" kindref="member">operator!</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>!_value,<sp/>_constancy<sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="class_sdf_predicate_function_result_1a2fb5d1d20ae329c6db95a3a73fc99e86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result_1a2fb5d1d20ae329c6db95a3a73fc99e86" kindref="member">SetAndPropagateConstancy</ref>(<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_value<sp/>=<sp/>other._value;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_constancy<sp/>==<sp/>ConstantOverDescendants<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other._constancy<sp/>==<sp/>MayVaryOverDescendants)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_constancy<sp/>=<sp/>MayVaryOverDescendants;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs._value<sp/>==<sp/>rhs._value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs._constancy<sp/>==<sp/>rhs._constancy;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>pfr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pfr._value<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lhs,<sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>pfr)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>pfr._value;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>pfr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pfr._value<sp/>!=<sp/>rhs;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lhs,<sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>pfr)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>!=<sp/>pfr._value;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_value;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>Constancy<sp/>_constancy;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fwd<sp/>decl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DomainType&gt;</highlight></codeline>
<codeline lineno="210" refid="class_sdf_predicate_program" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fwd<sp/>decl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DomainType&gt;</highlight></codeline>
<codeline lineno="214" refid="class_sdf_predicate_library" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fwd<sp/>decl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DomainType&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram&lt;DomainType&gt;</ref></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="class_sdf_predicate_library_1a683d09875efb93991b9a7b26c7efcafe" kindref="member">SdfLinkPredicateExpression</ref>(<ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary&lt;DomainType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lib);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DomainType&gt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref></highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram&lt;DomainType&gt;</ref></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>SdfLinkPredicateExpression&lt;DomainType&gt;(</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expr,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lib);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref><sp/>=<sp/><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">SdfPredicateParamNamesAndDefaults</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref><sp/>=</highlight></codeline>
<codeline lineno="240" refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;<ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>(DomainType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)&gt;;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1a50882aa867082b497b2348fb5a30b63d" kindref="member">SdfPredicateLibrary</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1a50882aa867082b497b2348fb5a30b63d" kindref="member">SdfPredicateLibrary</ref>(<ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249" refid="class_sdf_predicate_library_1a82399e020e6fb83ab3a57972ccb725a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1a82399e020e6fb83ab3a57972ccb725a1" kindref="member">SdfPredicateLibrary</ref>(<ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>other._binders.begin(),<sp/>end<sp/>=<sp/>other._binders.end();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>!=<sp/>end;<sp/>++iter)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;theseBinders<sp/>=<sp/>_binders[iter-&gt;first];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;otherBinder:<sp/>iter-&gt;second)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theseBinders.push_back(otherBinder-&gt;Clone());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;<ref refid="class_sdf_predicate_library_1affd41d92e6abfa20e4c4257e3683e978" kindref="member">operator=</ref>(<ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;&amp;other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="class_sdf_predicate_library_1a4079f7952db129136e96c79cee50b71b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;<ref refid="class_sdf_predicate_library_1a4079f7952db129136e96c79cee50b71b" kindref="member">operator=</ref>(<ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>copy(other);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(copy);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="275" refid="class_sdf_predicate_library_1a8f4bd121d5db360270f43076790e3dad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;<ref refid="class_sdf_predicate_library_1a8f4bd121d5db360270f43076790e3dad" kindref="member">Define</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*name,<sp/>Fn<sp/>&amp;&amp;fn)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_library_1a8f4bd121d5db360270f43076790e3dad" kindref="member">Define</ref>(name,<sp/>std::forward&lt;Fn&gt;(fn),<sp/>{});</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="285" refid="class_sdf_predicate_library_1a6eabb6ace5c6abf09cee753eeab366df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1a6eabb6ace5c6abf09cee753eeab366df" kindref="member">Define</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name,<sp/>Fn<sp/>&amp;&amp;fn,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>create<sp/>a<sp/>new<sp/>overload<sp/>binder<sp/>for<sp/>&apos;name&apos;.<sp/><sp/>The<sp/>main<sp/>operation<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binder<sp/>does<sp/>is,<sp/>when<sp/>&quot;linking&quot;<sp/>a<sp/>predicate<sp/>expression,<sp/>given<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specific<sp/>set<sp/>of<sp/>arguments<sp/>from<sp/>the<sp/>expression,<sp/>check<sp/>to<sp/>see<sp/>if<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments<sp/>can<sp/>be<sp/>bound<sp/>to<sp/>&apos;fn&apos;,<sp/>and<sp/>if<sp/>so<sp/>return<sp/>a<sp/>type-erased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>callable<sp/>that<sp/>invokes<sp/>fn<sp/>with<sp/>those<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obinder<sp/>=<sp/>_OverloadBinder&lt;std::decay_t&lt;Fn&gt;&gt;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::TryCreate(std::forward&lt;Fn&gt;(fn),<sp/>namesAndDefaults))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_binders[name].push_back(std::move(obinder));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="307" refid="class_sdf_predicate_library_1aaf0520bc7ba583d3b4a6ab6759f0223a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1aaf0520bc7ba583d3b4a6ab6759f0223a" kindref="member">DefineBinder</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name,<sp/>Fn<sp/>&amp;&amp;fn)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>binder<sp/>=<sp/>_CustomBinder&lt;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::decay_t&lt;Fn&gt;&gt;::Create(std::forward&lt;Fn&gt;(fn));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_binders[name].push_back(std::move(binder));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>_BindCall(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref><sp/>ret;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>_binders.find(name);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>_binders.end())<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga4abf7754e5dbf161d2a5a4160fd3b891" kindref="member">TF_RUNTIME_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>registered<sp/>function<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>thru<sp/>optimistically<sp/>first<sp/>--<sp/>if<sp/>we<sp/>fail<sp/>to<sp/>bind<sp/>to<sp/>any<sp/>overload,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>produce<sp/>an<sp/>error<sp/>message<sp/>with<sp/>all<sp/>the<sp/>overload<sp/>signatures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>iter-&gt;second.rbegin(),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>iter-&gt;second.rend();<sp/>i<sp/>!=<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(*i)-&gt;Bind(args);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ParamType&gt;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_CheckOneNameAndDefault(</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;valid,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numParams,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>namesIndex-th<sp/>param<sp/>has<sp/>a<sp/>default,<sp/>it<sp/>must<sp/>be<sp/>convertible<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>ArgIndex-th<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;NamesAndDefaults::Param&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>namesAndDefaults.GetParams();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nFromEnd<sp/>=<sp/>numParams<sp/>-<sp/>index<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFromEnd<sp/>&gt;=<sp/>params.size())<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>names<sp/>&amp;<sp/>defaults<sp/>to<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>namesIndex<sp/>=<sp/>params.size()<sp/>-<sp/>nFromEnd<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;param<sp/>=<sp/>params[namesIndex];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!param.val.IsEmpty()<sp/>&amp;&amp;<sp/>!param.val.CanCast&lt;ParamType&gt;())<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Predicate<sp/>default<sp/>parameter<sp/>&apos;%s&apos;<sp/>value<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>&apos;%s&apos;<sp/>cannot<sp/>convert<sp/>to<sp/>c++<sp/>argument<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>&apos;%s&apos;<sp/>at<sp/>index<sp/>%zu&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.name.c_str(),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.val.GetTypeName().c_str(),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArchGetDemangled&lt;ParamType&gt;().c_str(),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParamsTuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>_CheckNamesAndDefaultsImpl(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::index_sequence&lt;I...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>fold<sp/>expression<sp/>would<sp/>let<sp/>us<sp/>just<sp/>do<sp/>&amp;&amp;,<sp/>but<sp/>that&apos;s<sp/>c++&apos;17,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>do<sp/>all<sp/>of<sp/>them<sp/>and<sp/>set<sp/>a<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>std::tuple_size&lt;ParamsTuple&gt;::value;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>an<sp/>unused<sp/>array<sp/>so<sp/>we<sp/>can<sp/>use<sp/>an<sp/>initializer<sp/>list<sp/>to<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_CheckOneNameAndDefault<sp/>N<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_CheckOneNameAndDefault&lt;std::tuple_element_t&lt;N-I-1,<sp/>ParamsTuple&gt;&gt;(</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid,<sp/>N-I-1,<sp/>N,<sp/>namesAndDefaults),<sp/>0)...</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___tf_compiler_aids_1ga14d173d760921146a85f1db44f806916" kindref="member">TF_UNUSED</ref>(unused);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>_CheckNamesAndDefaultsWithSignature(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>check<sp/>for<sp/>declared<sp/>names<sp/>&amp;<sp/>defaults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!namesAndDefaults.CheckValidity())<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Traits<sp/>=<sp/>TfFunctionTraits&lt;Fn&gt;;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>type<sp/>must<sp/>convert<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::ReturnType,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref>&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::ReturnType,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fn<sp/>must<sp/>have<sp/>at<sp/>least<sp/>one<sp/>argument,<sp/>and<sp/>DomainType<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convertible<sp/>to<sp/>the<sp/>first<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DomainArgType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::template<sp/>NthArg&lt;0&gt;;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;DomainType,<sp/>DomainArgType&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>an<sp/>error<sp/>if<sp/>there<sp/>are<sp/>more<sp/>named<sp/>arguments<sp/>than<sp/>c++<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments.<sp/><sp/>Subtract<sp/>one<sp/>from<sp/>Arity<sp/>to<sp/>account<sp/>for<sp/>the<sp/>leading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DomainType<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;NamesAndDefaults::Param&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>namesAndDefaults.GetParams();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.size()<sp/>&gt;<sp/>Traits::Arity-1)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Predicate<sp/>named<sp/>arguments<sp/>(%zu)<sp/>exceed<sp/>number<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;C++<sp/>function<sp/>arguments<sp/>(%zu)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.size(),<sp/>Traits::Arity-1);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>the<sp/>names<sp/>and<sp/>defaults<sp/>against<sp/>the<sp/>Fn<sp/>signature,<sp/>from<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>front,<sp/>since<sp/>namesAndDefaults<sp/>must<sp/>be<sp/>&quot;right-aligned&quot;<sp/>--<sp/>that<sp/>is,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>unnamed<sp/>arguments<sp/>must<sp/>come<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!params.empty())<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strip<sp/>DomainType<sp/>arg...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FullParams<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::ArgTypes;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Params<sp/>=</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfMetaApply&lt;TfMetaDecay,<sp/>TfMetaApply&lt;TfMetaTail,<sp/>FullParams&gt;&gt;;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParamsTuple<sp/>=<sp/>TfMetaApply&lt;std::tuple,<sp/>Params&gt;;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_CheckNamesAndDefaultsImpl&lt;ParamsTuple&gt;(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namesAndDefaults,<sp/>std::make_index_sequence&lt;Traits::Arity-1&gt;<sp/>{});</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ParamType&gt;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_TryBindOne(</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numParams,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamType<sp/>&amp;param,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;boundAllParams,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>&amp;boundArgs,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>the<sp/>index-th<sp/>&apos;param&apos;<sp/>from<sp/>&apos;args&apos;<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;namesAndDefaults&apos;.<sp/>&apos;boundArgs&apos;<sp/>corresponds<sp/>to<sp/>&apos;args&apos;<sp/>and<sp/>indicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>have<sp/>already<sp/>been<sp/>bound.<sp/><sp/>This<sp/>function<sp/>sets<sp/>one<sp/>bit<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;boundArgs&apos;<sp/>if<sp/>it<sp/>binds<sp/>one<sp/>of<sp/>them<sp/>to<sp/>a<sp/>parameter.<sp/><sp/>It<sp/>may<sp/>bind<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>from<sp/>&apos;namesAndDefaults&apos;,<sp/>in<sp/>which<sp/>case<sp/>it<sp/>sets<sp/>no<sp/>bit.<sp/><sp/>If<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suitable<sp/>binding<sp/>can<sp/>be<sp/>determined<sp/>for<sp/>this<sp/>parameter,<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;boundAllParams&apos;<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;ve<sp/>already<sp/>failed<sp/>to<sp/>bind,<sp/>just<sp/>return<sp/>early.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boundAllParams)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namesAndDefaults<sp/>covers<sp/>trailing<sp/>parameters<sp/>--<sp/>that<sp/>is,<sp/>there<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>or<sp/>more<sp/>leading<sp/>unnamed<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;NamesAndDefaults::Param&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>namesAndDefaults.GetParams();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numUnnamed<sp/>=<sp/>params.size()<sp/>-<sp/>numParams;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults::Param<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*paramNameAndDefault<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>numUnnamed)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramNameAndDefault<sp/>=<sp/>&amp;params[index<sp/>-<sp/>numUnnamed];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>purely<sp/>positional<sp/>parameter<sp/>(paramNameAndDefault<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nullptr)<sp/>or<sp/>the<sp/>caller<sp/>supplied<sp/>a<sp/>positional<sp/>arg<sp/>(unnamed)<sp/>then<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>index-correspondence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*posArg<sp/>=</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(index<sp/>&lt;<sp/>args.size()<sp/>&amp;&amp;<sp/>args[index].argName.empty())<sp/>?</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;args[index]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tryBind<sp/>=<sp/>[&amp;](<ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>argIndex)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>cast<sp/>=<sp/>VtValue::Cast&lt;ParamType&gt;(val);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cast.<ref refid="class_vt_value_1a8e12342fc420701fbffd97025421575a" kindref="member">IsEmpty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>cast.<ref refid="class_vt_value_1a098d9f9998755544e913fe7bc35948f8" kindref="member">UncheckedRemove</ref>&lt;ParamType&gt;();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundArgs[argIndex]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundAllParams<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paramNameAndDefault)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>positional<sp/>parameter,<sp/>the<sp/>arg<sp/>must<sp/>be<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!posArg<sp/>||<sp/>!posArg-&gt;argName.empty())<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundAllParams<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>bind<sp/>posArg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tryBind(posArg-&gt;value,<sp/>index);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(posArg)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Passed<sp/>a<sp/>positional<sp/>arg,<sp/>try<sp/>to<sp/>bind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tryBind(posArg-&gt;value,<sp/>index);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>possibility<sp/>is<sp/>a<sp/>keyword<sp/>arg.<sp/><sp/>If<sp/>there&apos;s<sp/>a<sp/>matching<sp/>name,<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>bind<sp/>that,<sp/>otherwise<sp/>try<sp/>to<sp/>fill<sp/>a<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>args.size();<sp/>i<sp/>!=<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundArgs[i])<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>bound.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args[i].argName<sp/>==<sp/>paramNameAndDefault-&gt;name)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matching<sp/>name<sp/>--<sp/>try<sp/>to<sp/>bind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tryBind(args[i].value,<sp/>i);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>matching<sp/>arg,<sp/>try<sp/>to<sp/>fill<sp/>default<sp/>val.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_vt_value" kindref="compound">VtValue</ref><sp/>cast<sp/>=<sp/>VtValue::Cast&lt;ParamType&gt;(paramNameAndDefault-&gt;val);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cast.<ref refid="class_vt_value_1a8e12342fc420701fbffd97025421575a" kindref="member">IsEmpty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>cast.<ref refid="class_vt_value_1a098d9f9998755544e913fe7bc35948f8" kindref="member">UncheckedRemove</ref>&lt;ParamType&gt;();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error,<sp/>could<sp/>not<sp/>fill<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundAllParams<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParamsTuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>_TryBindArgs(ParamsTuple<sp/>&amp;params,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::index_sequence&lt;I...&gt;,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>&amp;boundArgs)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>fold<sp/>expression<sp/>would<sp/>let<sp/>us<sp/>just<sp/>do<sp/>&amp;&amp;,<sp/>but<sp/>that&apos;s<sp/>&apos;17,<sp/>so<sp/>we<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>all<sp/>of<sp/>them<sp/>and<sp/>set<sp/>a<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundArgs.assign(args.size(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>a<sp/>unused<sp/>array<sp/>so<sp/>we<sp/>can<sp/>use<sp/>an<sp/>initializer<sp/>list<sp/>to<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_TryBindOne<sp/>N<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unused[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_TryBindOne(I,<sp/>std::tuple_size&lt;ParamsTuple&gt;::value,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;I&gt;(params),<sp/>bound,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>boundArgs,<sp/>namesAndDefaults),<sp/>0)...</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___tf_compiler_aids_1ga14d173d760921146a85f1db44f806916" kindref="member">TF_UNUSED</ref>(unused);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>_FillArbitraryArgs(std::true_type,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;boundArgs,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple<sp/>&amp;typedArgs)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/>&amp;rest<sp/>=</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::tuple_size&lt;Tuple&gt;::value-1&gt;(typedArgs);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;boundArgs&apos;<sp/>and<sp/>&apos;args&apos;<sp/>correspond.<sp/><sp/>Fill<sp/>&apos;rest&apos;<sp/>with<sp/>the<sp/>elements<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;args&apos;<sp/>for<sp/>which<sp/>the<sp/>corresponding<sp/>element<sp/>of<sp/>&apos;boundArgs&apos;<sp/>is<sp/>false,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest.clear();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>args.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boundArgs[i])<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest.push_back(args[i]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>_FillArbitraryArgs(std::false_type,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ParamsTuple&gt;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>_TakesArbitraryArgs(std::true_type)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>arity<sp/>&gt;=<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple_element_t&lt;std::tuple_size&lt;ParamsTuple&gt;::value-1,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamsTuple&gt;,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::value;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ParamsTuple&gt;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>_TakesArbitraryArgs(std::false_type)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>arity<sp/>&lt;<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>_TryToBindCall(Fn<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fn,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>determine<sp/>an<sp/>argument<sp/>for<sp/>each<sp/>parameter<sp/>of<sp/>Fn,<sp/>then<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>callable<sp/>object<sp/>that<sp/>calls<sp/>that<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strip<sp/>DomainType<sp/>arg...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Traits<sp/>=<sp/>TfFunctionTraits&lt;Fn&gt;;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FullParams<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::ArgTypes;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Params<sp/>=</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfMetaApply&lt;TfMetaDecay,<sp/>TfMetaApply&lt;TfMetaTail,<sp/>FullParams&gt;&gt;;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParamsTuple<sp/>=<sp/>TfMetaApply&lt;std::tuple,<sp/>Params&gt;;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>at<sp/>least<sp/>two<sp/>parameters<sp/>to<sp/>Fn<sp/>(first<sp/>has<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DomainType)<sp/>and<sp/>the<sp/>last<sp/>parameter<sp/>type<sp/>is<sp/>vector&lt;FnArg&gt;,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namesAndDefaults<sp/>does<sp/>not<sp/>apply<sp/>to<sp/>it,<sp/>and<sp/>any<sp/>remaining<sp/>unbound<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>binding<sp/>are<sp/>passed<sp/>through<sp/>that<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TakesArbitraryArgs<sp/>=</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_TakesArbitraryArgs&lt;ParamsTuple&gt;(</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>Traits::Arity<sp/>&gt;=<sp/>2&gt;<sp/>{});</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minArgs<sp/>=<sp/>Traits::Arity-1<sp/>-<sp/>namesAndDefaults.GetNumDefaults();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxArgs<sp/>=<sp/>TakesArbitraryArgs<sp/>?<sp/>size_t(-1)<sp/>:<sp/>Traits::Arity-1;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>bindable<sp/>args<sp/>is<sp/>arity-1<sp/>(for<sp/>the<sp/>domain<sp/>arg)<sp/>or<sp/>-2<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trailing<sp/>parameter<sp/>is<sp/>the<sp/>vector&lt;FnArg&gt;<sp/>bag<sp/>of<sp/>extra<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumBindableArgs<sp/>=</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits::Arity<sp/>-<sp/>(TakesArbitraryArgs<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.size()<sp/>&lt;<sp/>minArgs)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga4abf7754e5dbf161d2a5a4160fd3b891" kindref="member">TF_RUNTIME_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Function<sp/>requires<sp/>at<sp/>least<sp/>%zu<sp/>argument%s,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%zu<sp/>given&quot;</highlight><highlight class="normal">,<sp/>minArgs,<sp/>minArgs<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.size());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.size()<sp/>&gt;<sp/>maxArgs)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga4abf7754e5dbf161d2a5a4160fd3b891" kindref="member">TF_RUNTIME_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Function<sp/>takes<sp/>at<sp/>most<sp/>%zu<sp/>argument%s,<sp/>%zu<sp/>given&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxArgs,<sp/>maxArgs<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>args.size());</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamsTuple<sp/>typedArgs;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>boundArgs;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_TryBindArgs(typedArgs,<sp/>args,<sp/>namesAndDefaults,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_index_sequence&lt;NumBindableArgs&gt;<sp/>{},</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundArgs))<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FillArbitraryArgs(</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;bool,<sp/>TakesArbitraryArgs&gt;<sp/>{},</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>boundArgs,<sp/>typedArgs);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[typedArgs,<sp/>fn](DomainType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>fn<sp/>with<sp/>obj<sp/>&amp;<sp/>typedArgs.<sp/>(std::apply<sp/>in<sp/>&apos;17).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invoke_hpp::apply(fn,<sp/>std::tuple_cat(</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(obj),<sp/>typedArgs))</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_OverloadBinderBase</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~_OverloadBinderBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bind(std::vector&lt;SdfPredicateExpression::FnArg&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_Bind(args);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;_OverloadBinderBase&gt;<sp/>Clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_OverloadBinderBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>_OverloadBinderBase(NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_namesAndDefaults(namesAndDefaults)<sp/>{}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Bind(std::vector&lt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref>&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/>_namesAndDefaults;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_OverloadBinder<sp/>:<sp/>_OverloadBinderBase</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~_OverloadBinder()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;_OverloadBinder&gt;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryCreate(Fn<sp/>&amp;&amp;fn,<sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;nd)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>std::unique_ptr&lt;_OverloadBinder&gt;(</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>_OverloadBinder(std::move(fn),<sp/>nd));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_CheckNamesAndDefaultsWithSignature&lt;Fn&gt;(nd))<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.reset();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;_OverloadBinderBase&gt;<sp/>Clone()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_OverloadBinder&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>_OverloadBinder(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_OverloadBinder(_OverloadBinder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>_OverloadBinder(Fn<sp/>&amp;&amp;fn,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_OverloadBinderBase(namesAndDefaults)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_fn(std::move(fn))<sp/>{}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>_OverloadBinder(Fn<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fn,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesAndDefaults<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;namesAndDefaults)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_OverloadBinder(Fn(fn),<sp/>namesAndDefaults)<sp/>{}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Bind(std::vector&lt;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref>&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>bind<sp/>&apos;args&apos;<sp/>to<sp/>_fn&apos;s<sp/>parameters,<sp/>taking<sp/>_namesAndDefaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>account.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_TryToBindCall(_fn,<sp/>args,<sp/>this-&gt;_namesAndDefaults);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fn<sp/>_fn;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Fn&gt;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_CustomBinder<sp/>:<sp/>_OverloadBinderBase</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~_CustomBinder()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;_CustomBinder&gt;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create(Fn<sp/>&amp;&amp;fn)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;_CustomBinder&gt;(</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>_CustomBinder(std::move(fn)));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;_OverloadBinderBase&gt;<sp/>Clone()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;_CustomBinder&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>_CustomBinder(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CustomBinder(_CustomBinder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>_CustomBinder(Fn<sp/>&amp;&amp;fn)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_OverloadBinderBase()</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>_fn(std::move(fn))<sp/>{}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>_CustomBinder(Fn<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;fn)<sp/>:<sp/>_CustomBinder(Fn(fn))<sp/>{}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Bind(std::vector&lt;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref>&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>_fn<sp/>to<sp/>try<sp/>to<sp/>bind<sp/>&apos;args&apos;,<sp/>producing<sp/>a<sp/>callable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fn(args);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fn<sp/>_fn;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>_OverloadBinderBasePtr<sp/>=<sp/>std::unique_ptr&lt;_OverloadBinderBase&gt;;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">pxr_tsl::robin_map</ref>&lt;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string,<sp/>std::vector&lt;_OverloadBinderBasePtr&gt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>_binders;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">};</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_USD_SDF_PREDICATE_EXPRESSION_EVAL_H</highlight></codeline>
    </programlisting>
    <location file="pxr/usd/sdf/predicateLibrary.h"/>
  </compounddef>
</doxygen>
