<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_batch_namespace_edit" kind="class" language="C++" prot="public">
    <compoundname>SdfBatchNamespaceEdit</compoundname>
    <includes refid="namespace_edit_8h" local="no">namespaceEdit.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_batch_namespace_edit_1abef4210f5549ba949f94acf9a2ffa6ee" prot="public" static="no">
        <type>std::function&lt; bool(const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;)&gt;</type>
        <definition>typedef std::function&lt;bool(const SdfPath&amp;)&gt; HasObjectAtPath</definition>
        <argsstring></argsstring>
        <name>HasObjectAtPath</name>
        <briefdescription>
<para>Functor that returns <computeroutput>true</computeroutput> iff an object exists at the given path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="242" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_batch_namespace_edit_1a418047eaf08ad574d65db719fd53f2e8" prot="public" static="no">
        <type>std::function&lt; bool(const <ref refid="struct_sdf_namespace_edit" kindref="compound">SdfNamespaceEdit</ref> &amp;, std::string *)&gt;</type>
        <definition>typedef std::function&lt;bool(const SdfNamespaceEdit&amp;,std::string*)&gt; CanEdit</definition>
        <argsstring></argsstring>
        <name>CanEdit</name>
        <briefdescription>
<para>Functor that returns <computeroutput>true</computeroutput> iff the namespace edit will succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>If not it returns <computeroutput>false</computeroutput> and sets the string argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="246" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_batch_namespace_edit_1a59002656ad758ec31da2d3e13c1b0f7a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_edit_8h_1af303dee4838a34564bd287e8dda3389d" kindref="member">SdfNamespaceEditVector</ref></type>
        <definition>SdfNamespaceEditVector _edits</definition>
        <argsstring></argsstring>
        <name>_edits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="294" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a1009b8b29f46743dac5011b19eff5e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfBatchNamespaceEdit</definition>
        <argsstring>()</argsstring>
        <name>SdfBatchNamespaceEdit</name>
        <briefdescription>
<para>Create an empty sequence of edits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a00d52b3f2cb0c16f02111a777203ae72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfBatchNamespaceEdit</definition>
        <argsstring>(const SdfBatchNamespaceEdit &amp;)</argsstring>
        <name>SdfBatchNamespaceEdit</name>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1aab9c6e8ffb830218960d9b83c4ad37e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API SdfBatchNamespaceEdit</definition>
        <argsstring>(const SdfNamespaceEditVector &amp;)</argsstring>
        <name>SdfBatchNamespaceEdit</name>
        <param>
          <type>const <ref refid="namespace_edit_8h_1af303dee4838a34564bd287e8dda3389d" kindref="member">SdfNamespaceEditVector</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1ae5ae2047ae1dbb9310a2a9aca44bb327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API</type>
        <definition>SDF_API ~SdfBatchNamespaceEdit</definition>
        <argsstring>()</argsstring>
        <name>~SdfBatchNamespaceEdit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a72a33f79c29cbabbb52a95354b8b94f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref> &amp;</type>
        <definition>SDF_API SdfBatchNamespaceEdit&amp; operator=</definition>
        <argsstring>(const SdfBatchNamespaceEdit &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a34a0f894df9b824b45af63112145cad7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Add</definition>
        <argsstring>(const SdfNamespaceEdit &amp;edit)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="struct_sdf_namespace_edit" kindref="compound">SdfNamespaceEdit</ref> &amp;</type>
          <declname>edit</declname>
        </param>
        <briefdescription>
<para>Add a namespace edit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="222" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a23e3af9e53a9ad0d88fb0a2f453ef9f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Add</definition>
        <argsstring>(const SdfNamespaceEdit::Path &amp;currentPath, const SdfNamespaceEdit::Path &amp;newPath, SdfNamespaceEdit::Index index=SdfNamespaceEdit::AtEnd)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfNamespaceEdit::Path</ref> &amp;</type>
          <declname>currentPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfNamespaceEdit::Path</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <param>
          <type>SdfNamespaceEdit::Index</type>
          <declname>index</declname>
          <defval><ref refid="struct_sdf_namespace_edit_1a9a4448183ed706feba1fd25ff35f2490" kindref="member">SdfNamespaceEdit::AtEnd</ref></defval>
        </param>
        <briefdescription>
<para>Add a namespace edit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="228" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1a2f029b506208eca6187fbb8f1903762b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_edit_8h_1af303dee4838a34564bd287e8dda3389d" kindref="member">SdfNamespaceEditVector</ref> &amp;</type>
        <definition>const SdfNamespaceEditVector&amp; GetEdits</definition>
        <argsstring>() const</argsstring>
        <name>GetEdits</name>
        <briefdescription>
<para>Returns the edits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="236" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_batch_namespace_edit_1ab08135abbd700abdbe69cf364dc89a99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Process</definition>
        <argsstring>(SdfNamespaceEditVector *processedEdits, const HasObjectAtPath &amp;hasObjectAtPath, const CanEdit &amp;canEdit, SdfNamespaceEditDetailVector *details=NULL, bool fixBackpointers=true) const</argsstring>
        <name>Process</name>
        <param>
          <type><ref refid="namespace_edit_8h_1af303dee4838a34564bd287e8dda3389d" kindref="member">SdfNamespaceEditVector</ref> *</type>
          <declname>processedEdits</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit_1abef4210f5549ba949f94acf9a2ffa6ee" kindref="member">HasObjectAtPath</ref> &amp;</type>
          <declname>hasObjectAtPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit_1a418047eaf08ad574d65db719fd53f2e8" kindref="member">CanEdit</ref> &amp;</type>
          <declname>canEdit</declname>
        </param>
        <param>
          <type><ref refid="namespace_edit_8h_1a064ca73542ffaa24de37224bbcf59963" kindref="member">SdfNamespaceEditDetailVector</ref> *</type>
          <declname>details</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fixBackpointers</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Validate the edits and generate a possibly more efficient edit sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>Edits are treated as if they were performed one at time in sequence, therefore each edit occurs in the namespace resulting from all previous edits.</para>
<para>Editing the descendants of the object in each edit is implied. If an object is removed then the new path will be empty. If an object is removed after being otherwise edited, the other edits will be processed and included in <computeroutput>processedEdits</computeroutput> followed by the removal. This allows clients to fixup references to point to the object&apos;s final location prior to removal.</para>
<para>This function needs help to determine if edits are allowed. The callbacks provide that help. <computeroutput>hasObjectAtPath</computeroutput> returns <computeroutput>true</computeroutput> iff there&apos;s an object at the given path. This path will be in the original namespace not any intermediate or final namespace. <computeroutput>canEdit</computeroutput> returns <computeroutput>true</computeroutput> iff the object at the current path can be namespace edited to the new path, ignoring whether an object already exists at the new path. Both paths are in the original namespace. If it returns <computeroutput>false</computeroutput> it should set the string to the reason why the edit isn&apos;t allowed. It should not write either path to the string.</para>
<para>If <computeroutput>hasObjectAtPath</computeroutput> is invalid then this assumes objects exist where they should and don&apos;t exist where they shouldn&apos;t. Use this with care. If <computeroutput>canEdit</computeroutput> in invalid then it&apos;s assumed all edits are valid.</para>
<para>If <computeroutput>fixBackpointers</computeroutput> is <computeroutput>true</computeroutput> then target/connection paths are expected to be in the intermediate namespace resulting from all previous edits. If <computeroutput>false</computeroutput> and any current or new path contains a target or connection path that has been edited then this will generate an error.</para>
<para>This method returns <computeroutput>true</computeroutput> if the edits are allowed and sets <computeroutput>processedEdits</computeroutput> to a new edit sequence at least as efficient as the input sequence. If not allowed it returns <computeroutput>false</computeroutput> and appends reasons why not to <computeroutput>details</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/namespaceEdit.h" line="287" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A description of an arbitrarily complex namespace edit. </para>
    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref></computeroutput> object describes zero or more namespace edits. Various types providing a namespace will allow the edits to be applied in a single operation and also allow testing if this will work.</para>
<para>Clients are encouraged to group several edits into one object because that may allow more efficient processing of the edits. If, for example, you need to reparent several prims it may be faster to add all of the reparents to a single <computeroutput><ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref></computeroutput> and apply them at once than to apply each separately.</para>
<para>Objects that allow applying edits are free to apply the edits in any way and any order they see fit but they should guarantee that the resulting namespace will be as if each edit was applied one at a time in the order they were added.</para>
<para>Note that the above rule permits skipping edits that have no effect or generate a non-final state. For example, if renaming A to B then to C we could just rename A to C. This means notices may be elided. However, implementations must not elide notices that contain information about any edit that clients must be able to know but otherwise cannot determine. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/namespaceEdit.h" line="211" column="1" bodyfile="pxr/usd/sdf/namespaceEdit.h" bodystart="211" bodyend="295"/>
    <listofallmembers>
      <member refid="class_sdf_batch_namespace_edit_1a59002656ad758ec31da2d3e13c1b0f7a" prot="private" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>_edits</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a34a0f894df9b824b45af63112145cad7" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>Add</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a23e3af9e53a9ad0d88fb0a2f453ef9f1" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>Add</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a418047eaf08ad574d65db719fd53f2e8" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>CanEdit</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a2f029b506208eca6187fbb8f1903762b" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>GetEdits</name></member>
      <member refid="class_sdf_batch_namespace_edit_1abef4210f5549ba949f94acf9a2ffa6ee" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>HasObjectAtPath</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a72a33f79c29cbabbb52a95354b8b94f3" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>operator=</name></member>
      <member refid="class_sdf_batch_namespace_edit_1ab08135abbd700abdbe69cf364dc89a99" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>Process</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a1009b8b29f46743dac5011b19eff5e45" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>SdfBatchNamespaceEdit</name></member>
      <member refid="class_sdf_batch_namespace_edit_1a00d52b3f2cb0c16f02111a777203ae72" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>SdfBatchNamespaceEdit</name></member>
      <member refid="class_sdf_batch_namespace_edit_1aab9c6e8ffb830218960d9b83c4ad37e9" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>SdfBatchNamespaceEdit</name></member>
      <member refid="class_sdf_batch_namespace_edit_1ae5ae2047ae1dbb9310a2a9aca44bb327" prot="public" virt="non-virtual"><scope>SdfBatchNamespaceEdit</scope><name>~SdfBatchNamespaceEdit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
