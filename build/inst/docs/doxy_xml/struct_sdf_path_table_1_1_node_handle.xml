<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_sdf_path_table_1_1_node_handle" kind="struct" language="C++" prot="public">
    <compoundname>SdfPathTable::NodeHandle</compoundname>
    <includes refid="path_table_8h" local="no">pathTable.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="struct_sdf_path_table_1_1_node_handle_1a7f054ce6064c10078f103da22370f26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfPathTable</definition>
        <argsstring></argsstring>
        <name>SdfPathTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="320" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_sdf_path_table_1_1_node_handle_1af0bedbff4a49be782b9752fe8b0fcea2" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; _Entry &gt;</type>
        <definition>std::unique_ptr&lt;_Entry&gt; _unlinkedEntry</definition>
        <argsstring></argsstring>
        <name>_unlinkedEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="394" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1afad08035944dd105f6bdb476873ef5ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref></type>
        <definition>static NodeHandle New</definition>
        <argsstring>(value_type const &amp;value)</argsstring>
        <name>New</name>
        <param>
          <type>value_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> for a table entry. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> can later be inserted into an <ref refid="class_sdf_path_table" kindref="compound">SdfPathTable</ref>. If inserted successfully, the key and value addresses remain valid. NodeHandles may be created concurrently without additional synchronization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="327" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1aba501ad29895567000febf6747dd02a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref></type>
        <definition>static NodeHandle New</definition>
        <argsstring>(value_type &amp;&amp;value)</argsstring>
        <name>New</name>
        <param>
          <type>value_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="335" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1a1e723e3b21c7b76f09b8ca11ca004bc8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref></type>
        <definition>static NodeHandle New</definition>
        <argsstring>(key_type const &amp;key, mapped_type const &amp;mapped)</argsstring>
        <name>New</name>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">key_type</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>mapped_type const &amp;</type>
          <declname>mapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="343" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="343" bodyend="345"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1ae2af877310861943c36087ac6c9f3b41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">key_type</ref> const  &amp;</type>
        <definition>key_type const&amp; GetKey</definition>
        <argsstring>() const</argsstring>
        <name>GetKey</name>
        <briefdescription>
<para>Return a const reference to this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref>&apos;s key. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> must be valid to call this member function (see <ref refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">NodeHandle::IsValid</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="350" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1a3fae97abe9441730a1ba08dfc2fd7457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_path" kindref="compound">key_type</ref> &amp;</type>
        <definition>key_type&amp; GetMutableKey</definition>
        <argsstring>()</argsstring>
        <name>GetMutableKey</name>
        <briefdescription>
<para>Return a mutable reference to this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref>&apos;s key. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> must be valid to call this member function (see <ref refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">NodeHandle::IsValid</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="357" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1ad84095c46183150734d1f510039baea8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>mapped_type const  &amp;</type>
        <definition>mapped_type const&amp; GetMapped</definition>
        <argsstring>() const</argsstring>
        <name>GetMapped</name>
        <briefdescription>
<para>Return a const reference to this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref>&apos;s mapped object. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> must be valid to call this member function (see <ref refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">NodeHandle::IsValid</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="364" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1a5b9d01dd3f2b9a2384f24c79c50f5187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>mapped_type &amp;</type>
        <definition>mapped_type&amp; GetMutableMapped</definition>
        <argsstring>()</argsstring>
        <name>GetMutableMapped</name>
        <briefdescription>
<para>Return a mutable reference to this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref>&apos;s mapped object. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> must be valid to call this member function (see <ref refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">NodeHandle::IsValid</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="371" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
<para>Return true if this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> owns a path table entry, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="377" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1a67b76affb3b5d35fa419ac234144038b" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
<para>Return true if this <ref refid="struct_sdf_path_table_1_1_node_handle" kindref="compound">NodeHandle</ref> owns a path table entry, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="383" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="struct_sdf_path_table_1_1_node_handle_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Delete any owned path table entry. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this function, <ref refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" kindref="member">IsValid()</ref> returns false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/pathTable.h" line="389" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="389" bodyend="391"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A handle owning a path table node that may be used to &quot;reserve&quot; a stable memory location for key &amp; mapped object. </para>
    </briefdescription>
    <detaileddescription>
<para>A node handle may be inserted into a table later, and if that insertion is successful, the underlying key &amp; mapped object remain at the same memory location. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/pathTable.h" line="319" column="1" bodyfile="pxr/usd/sdf/pathTable.h" bodystart="318" bodyend="395"/>
    <listofallmembers>
      <member refid="struct_sdf_path_table_1_1_node_handle_1af0bedbff4a49be782b9752fe8b0fcea2" prot="private" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>_unlinkedEntry</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1ae2af877310861943c36087ac6c9f3b41" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>GetKey</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1ad84095c46183150734d1f510039baea8" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>GetMapped</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1a3fae97abe9441730a1ba08dfc2fd7457" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>GetMutableKey</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1a5b9d01dd3f2b9a2384f24c79c50f5187" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>GetMutableMapped</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>IsValid</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1afad08035944dd105f6bdb476873ef5ee" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>New</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1aba501ad29895567000febf6747dd02a4" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>New</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1a1e723e3b21c7b76f09b8ca11ca004bc8" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>New</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1a67b76affb3b5d35fa419ac234144038b" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>operator bool</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>reset</name></member>
      <member refid="struct_sdf_path_table_1_1_node_handle_1a7f054ce6064c10078f103da22370f26f" prot="public" virt="non-virtual"><scope>SdfPathTable::NodeHandle</scope><name>SdfPathTable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
