<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_trace_concurrent_list" kind="class" language="C++" prot="public">
    <compoundname>TraceConcurrentList</compoundname>
    <includes refid="concurrent_list_8h" local="no">concurrentList.h</includes>
    <innerclass refid="class_trace_concurrent_list_1_1iterator" prot="public">TraceConcurrentList::iterator</innerclass>
    <innerclass refid="struct_trace_concurrent_list_1_1_node" prot="private">TraceConcurrentList::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Iterator support.</header>
      <memberdef kind="function" id="class_trace_concurrent_list_1ad69bd11391be1a1dba5c8202259664f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_concurrent_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="125" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_concurrent_list_1acad38d52497a975bfb6f2f6acd76631f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_concurrent_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="126" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="126" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_trace_concurrent_list_1a3e075f50b270bbdbe6facc048be434a9" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; Node * &gt;</type>
        <definition>std::atomic&lt;Node*&gt; _head</definition>
        <argsstring></argsstring>
        <name>_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="143" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_trace_concurrent_list_1a302fe3be1daa268116daf46afebc181b" prot="private" static="no" mutable="no">
        <type>tbb::cache_aligned_allocator&lt; Node &gt;</type>
        <definition>tbb::cache_aligned_allocator&lt;Node&gt; _alloc</definition>
        <argsstring></argsstring>
        <name>_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="144" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_trace_concurrent_list_1a3072a02869fc351a617705cb84aad889" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TraceConcurrentList</definition>
        <argsstring>()</argsstring>
        <name>TraceConcurrentList</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="105" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_concurrent_list_1af1f09dc935e28fe21dfbe64f5e0c974d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~TraceConcurrentList</definition>
        <argsstring>()</argsstring>
        <name>~TraceConcurrentList</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="108" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="108" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_concurrent_list_1a8fedae080dc9db77dc3dbd082de473c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TraceConcurrentList</definition>
        <argsstring>(const TraceConcurrentList &amp;)=delete</argsstring>
        <name>TraceConcurrentList</name>
        <param>
          <type>const <ref refid="class_trace_concurrent_list" kindref="compound">TraceConcurrentList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_concurrent_list_1a9431f8f4c34d4145ca86d7c8fcc8b1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_trace_concurrent_list" kindref="compound">TraceConcurrentList</ref> &amp;</type>
        <definition>TraceConcurrentList&amp; operator=</definition>
        <argsstring>(const TraceConcurrentList &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_trace_concurrent_list" kindref="compound">TraceConcurrentList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_trace_concurrent_list_1abcd9e41d11eca88e324e08076e7d01fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_trace_concurrent_list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>iterator Insert</definition>
        <argsstring>()</argsstring>
        <name>Insert</name>
        <briefdescription>
<para>Inserts an item at the beginning of the list and returns an iterator to the newly created item. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/trace/concurrentList.h" line="131" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="131" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class supports thread safe insertion and iteration over a list of items. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/trace/concurrentList.h" line="45" column="1" bodyfile="pxr/base/trace/concurrentList.h" bodystart="45" bodyend="145"/>
    <listofallmembers>
      <member refid="class_trace_concurrent_list_1a302fe3be1daa268116daf46afebc181b" prot="private" virt="non-virtual"><scope>TraceConcurrentList</scope><name>_alloc</name></member>
      <member refid="class_trace_concurrent_list_1a3e075f50b270bbdbe6facc048be434a9" prot="private" virt="non-virtual"><scope>TraceConcurrentList</scope><name>_head</name></member>
      <member refid="class_trace_concurrent_list_1ad69bd11391be1a1dba5c8202259664f8" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>begin</name></member>
      <member refid="class_trace_concurrent_list_1acad38d52497a975bfb6f2f6acd76631f" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>end</name></member>
      <member refid="class_trace_concurrent_list_1abcd9e41d11eca88e324e08076e7d01fb" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>Insert</name></member>
      <member refid="class_trace_concurrent_list_1a9431f8f4c34d4145ca86d7c8fcc8b1ab" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>operator=</name></member>
      <member refid="class_trace_concurrent_list_1a3072a02869fc351a617705cb84aad889" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>TraceConcurrentList</name></member>
      <member refid="class_trace_concurrent_list_1a8fedae080dc9db77dc3dbd082de473c6" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>TraceConcurrentList</name></member>
      <member refid="class_trace_concurrent_list_1af1f09dc935e28fe21dfbe64f5e0c974d" prot="public" virt="non-virtual"><scope>TraceConcurrentList</scope><name>~TraceConcurrentList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
