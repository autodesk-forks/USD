<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_kind_registry" kind="class" language="C++" prot="public">
    <compoundname>KindRegistry</compoundname>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="usd_2kind_2registry_8h" local="no">registry.h</includes>
    <innerclass refid="struct_kind_registry_1_1___kind_data" prot="private">KindRegistry::_KindData</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_kind_registry_1a95042bec3608c272a80669a263f67106" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, _KindData, <ref refid="struct_tf_token_1_1_hash_functor" kindref="compound">TfToken::HashFunctor</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;TfToken, _KindData, TfToken::HashFunctor&gt; _KindMap</definition>
        <argsstring></argsstring>
        <name>_KindMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="142" column="1" bodyfile="pxr/usd/kind/registry.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_kind_registry_1a8249202941e6841e971499eb116a4644" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfSingleton&lt; KindRegistry &gt;</definition>
        <argsstring></argsstring>
        <name>TfSingleton&lt; KindRegistry &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="113" column="1" bodyfile="pxr/usd/kind/registry.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_kind_registry_1a14109e13052fe524471d24527a4cf596" prot="private" static="no" mutable="no">
        <type>_KindMap</type>
        <definition>_KindMap _kindMap</definition>
        <argsstring></argsstring>
        <name>_kindMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="145" column="1" bodyfile="pxr/usd/kind/registry.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_kind_registry_1a8ba48fb2ee650eb6a9c8a59d3ee7e078" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KindRegistry</definition>
        <argsstring>(const KindRegistry &amp;)=delete</argsstring>
        <name>KindRegistry</name>
        <param>
          <type>const <ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1afe98d035f26bb53b271d7241a029609b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> &amp;</type>
        <definition>KindRegistry&amp; operator=</definition>
        <argsstring>(const KindRegistry &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a6d749531e920edace564d915a97d1b15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KindRegistry</definition>
        <argsstring>()</argsstring>
        <name>KindRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a794b7b5179163783126f4b5b323eaa4e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~KindRegistry</definition>
        <argsstring>()</argsstring>
        <name>~KindRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a4f34be47fff328c31afee40c1e7ef143" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _HasKind</definition>
        <argsstring>(const TfToken &amp;kind) const</argsstring>
        <name>_HasKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a42dd29e0ff62332ce1f433f9190dbfcb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _GetBaseKind</definition>
        <argsstring>(const TfToken &amp;kind) const</argsstring>
        <name>_GetBaseKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a0449f87c758d03181d567b6d1a408ac2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsA</definition>
        <argsstring>(const TfToken &amp;derivedKind, const TfToken &amp;baseKind) const</argsstring>
        <name>_IsA</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>derivedKind</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseKind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a956edf5856c8a0aac58d3ee8af224d6d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>std::vector&lt;TfToken&gt; _GetAllKinds</definition>
        <argsstring>() const</argsstring>
        <name>_GetAllKinds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1adb701fa73311f6ebcdcef96740d14473" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _Register</definition>
        <argsstring>(const TfToken &amp;kind, const TfToken &amp;baseKind=TfToken())</argsstring>
        <name>_Register</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseKind</declname>
          <defval><ref refid="class_tf_token" kindref="compound">TfToken</ref>()</defval>
        </param>
        <briefdescription>
<para>Register the given <emphasis>kind</emphasis> with the given <emphasis>baseKind</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>It is valid for <emphasis>baseKind</emphasis> to be empty (the default), in which case <emphasis>kind</emphasis> represents a root of the kind hierarchy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a2b676458d0d50602252ced0912cc1b63" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RegisterDefaults</definition>
        <argsstring>()</argsstring>
        <name>_RegisterDefaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_kind_registry_1a631a54789cde27fa5d3eaf5178ef6019" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API <ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> &amp;</type>
        <definition>static KIND_API KindRegistry&amp; GetInstance</definition>
        <argsstring>()</argsstring>
        <name>GetInstance</name>
        <briefdescription>
<para>Return the single <computeroutput><ref refid="class_kind_registry" kindref="compound">KindRegistry</ref></computeroutput> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a36058763d949167e93a2575dd344f9ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool HasKind</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>HasKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>kind</emphasis> is known to the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a95467660d480a198be64d562f4160748" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>static KIND_API TfToken GetBaseKind</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>GetBaseKind</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Return the base kind of the given kind. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no base, the result will be an empty token. Issues a coding error if <emphasis>kind</emphasis> is unknown to the registry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1acfec2bb2bb93ed2a015f277b10989fca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsA</definition>
        <argsstring>(const TfToken &amp;derivedKind, const TfToken &amp;baseKind)</argsstring>
        <name>IsA</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>derivedKind</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>baseKind</declname>
        </param>
        <briefdescription>
<para>Test whether <emphasis>derivedKind</emphasis> is the same as <emphasis>baseKind</emphasis> or has it as a base kind (either directly or indirectly). </para>
        </briefdescription>
        <detaileddescription>
<para>It is <emphasis>not</emphasis> required that <emphasis>derivedKind</emphasis> or <emphasis>baseKind</emphasis> be known to the registry: if they are unknown but equal, IsA will return <computeroutput>true</computeroutput>; otherwise if either is unknown, we will simply return false.</para>
<para>Therefore this method will not raise any errors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a7108e597eb1008f4f88ab0d71932594e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>static KIND_API std::vector&lt;TfToken&gt; GetAllKinds</definition>
        <argsstring>()</argsstring>
        <name>GetAllKinds</name>
        <briefdescription>
<para>Return an unordered vector of all kinds known to the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1aa3dce75289037bc7c64fb52ca1caec8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsModel</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>IsModel</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>kind</computeroutput> IsA model kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a11c6803b66e5b145c7b04008b3e80bc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsGroup</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>IsGroup</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>kind</computeroutput> IsA group kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a0a73ccdc85e1ba6bc7f59495508d4af6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsAssembly</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>IsAssembly</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Return true if <computeroutput>kind</computeroutput> IsA assembly kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1abe807f0a4a35b976342396946678ae2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsComponent</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>IsComponent</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>kind</computeroutput> IsA component kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_kind_registry_1a70c37211bf426d2aa0508be1b88fba4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KIND_API bool</type>
        <definition>static KIND_API bool IsSubComponent</definition>
        <argsstring>(const TfToken &amp;kind)</argsstring>
        <name>IsSubComponent</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Returns true if <computeroutput>kind</computeroutput> IsA subcomponent kind. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/kind/registry.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A singleton that holds known kinds and information about them. </para>
    </briefdescription>
    <detaileddescription>
<para>See <ref refid="kind_page_front_1mainpage_kind" kindref="member">Kind Overview</ref> for a description of why kind exists, what the builtin registered kinds are, and how to extend the core kinds.</para>
<sect1 id="class_kind_registry_1kind_threadsafety">
<title>KindRegistry Threadsafty</title>
<para><ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> serves performance-critical clients that operate under the stl threading model, and therefore itself follows that model in order to avoid locking during <ref refid="class_kind_registry_1a36058763d949167e93a2575dd344f9ff" kindref="member">HasKind()</ref> and <ref refid="class_kind_registry_1acfec2bb2bb93ed2a015f277b10989fca" kindref="member">IsA()</ref> queries.</para>
<para>To make this robust, <ref refid="class_kind_registry" kindref="compound">KindRegistry</ref> exposes no means to mutate the registry. All extensions must be accomplished via plugInfo.json files, which are consumed once during the registry initialization (See <ref refid="kind_page_front_1kind_extensions" kindref="member">Extending the KindRegistry</ref> ) </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="4187">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4186">
        <label>KindRegistry</label>
        <link refid="class_kind_registry"/>
        <childnode refid="4187" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4189">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="4188">
        <label>KindRegistry</label>
        <link refid="class_kind_registry"/>
        <childnode refid="4189" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/kind/registry.h" line="71" column="1" bodyfile="pxr/usd/kind/registry.h" bodystart="70" bodyend="146"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_kind_registry_1a956edf5856c8a0aac58d3ee8af224d6d" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_GetAllKinds</name></member>
      <member refid="class_kind_registry_1a42dd29e0ff62332ce1f433f9190dbfcb" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_GetBaseKind</name></member>
      <member refid="class_kind_registry_1a4f34be47fff328c31afee40c1e7ef143" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_HasKind</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>KindRegistry</scope><name>_HasRemnant</name></member>
      <member refid="class_kind_registry_1a0449f87c758d03181d567b6d1a408ac2" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_IsA</name></member>
      <member refid="class_kind_registry_1a95042bec3608c272a80669a263f67106" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_KindMap</name></member>
      <member refid="class_kind_registry_1a14109e13052fe524471d24527a4cf596" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_kindMap</name></member>
      <member refid="class_kind_registry_1adb701fa73311f6ebcdcef96740d14473" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>KindRegistry</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>KindRegistry</scope><name>_Register</name></member>
      <member refid="class_kind_registry_1a2b676458d0d50602252ced0912cc1b63" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>_RegisterDefaults</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>EnableNotification2</name></member>
      <member refid="class_kind_registry_1a7108e597eb1008f4f88ab0d71932594e" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>GetAllKinds</name></member>
      <member refid="class_kind_registry_1a95467660d480a198be64d562f4160748" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>GetBaseKind</name></member>
      <member refid="class_kind_registry_1a631a54789cde27fa5d3eaf5178ef6019" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>GetInstance</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_kind_registry_1a36058763d949167e93a2575dd344f9ff" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>HasKind</name></member>
      <member refid="class_kind_registry_1acfec2bb2bb93ed2a015f277b10989fca" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsA</name></member>
      <member refid="class_kind_registry_1a0a73ccdc85e1ba6bc7f59495508d4af6" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsAssembly</name></member>
      <member refid="class_kind_registry_1abe807f0a4a35b976342396946678ae2d" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsComponent</name></member>
      <member refid="class_kind_registry_1a11c6803b66e5b145c7b04008b3e80bc4" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsGroup</name></member>
      <member refid="class_kind_registry_1aa3dce75289037bc7c64fb52ca1caec8d" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsModel</name></member>
      <member refid="class_kind_registry_1a70c37211bf426d2aa0508be1b88fba4d" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>IsSubComponent</name></member>
      <member refid="class_kind_registry_1a8ba48fb2ee650eb6a9c8a59d3ee7e078" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>KindRegistry</name></member>
      <member refid="class_kind_registry_1a6d749531e920edace564d915a97d1b15" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>KindRegistry</name></member>
      <member refid="class_kind_registry_1afe98d035f26bb53b271d7241a029609b" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>KindRegistry</scope><name>operator=</name></member>
      <member refid="class_kind_registry_1a8249202941e6841e971499eb116a4644" prot="private" virt="non-virtual"><scope>KindRegistry</scope><name>TfSingleton&lt; KindRegistry &gt;</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>KindRegistry</scope><name>TfWeakBase</name></member>
      <member refid="class_kind_registry_1a794b7b5179163783126f4b5b323eaa4e" prot="private" virt="virtual"><scope>KindRegistry</scope><name>~KindRegistry</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>KindRegistry</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
