<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_predicate_library" kind="class" language="C++" prot="public">
    <compoundname>SdfPredicateLibrary</compoundname>
    <includes refid="predicate_library_8h" local="no">predicateLibrary.h</includes>
    <innerclass refid="struct_sdf_predicate_library_1_1___custom_binder" prot="private">SdfPredicateLibrary::_CustomBinder</innerclass>
    <innerclass refid="struct_sdf_predicate_library_1_1___overload_binder" prot="private">SdfPredicateLibrary::_OverloadBinder</innerclass>
    <innerclass refid="struct_sdf_predicate_library_1_1___overload_binder_base" prot="private">SdfPredicateLibrary::_OverloadBinderBase</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>DomainType</declname>
        <defname>DomainType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_sdf_predicate_library_1adae9768796f8829918e8197b4c992326" prot="private" static="no">
        <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">SdfPredicateParamNamesAndDefaults</ref></type>
        <definition>using NamesAndDefaults =  SdfPredicateParamNamesAndDefaults</definition>
        <argsstring></argsstring>
        <name>NamesAndDefaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="235" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_predicate_library_1a911d23b7b2a2f7e3c6e19c77d03ff492" prot="private" static="no">
        <type>std::unique_ptr&lt; _OverloadBinderBase &gt;</type>
        <definition>using _OverloadBinderBasePtr =  std::unique_ptr&lt;_OverloadBinderBase&gt;</definition>
        <argsstring></argsstring>
        <name>_OverloadBinderBasePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="758" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" prot="public" static="no">
        <type>std::function&lt; <ref refid="class_sdf_predicate_function_result" kindref="compound">SdfPredicateFunctionResult</ref>(DomainType const &amp;)&gt;</type>
        <definition>using PredicateFunction =  std::function&lt;SdfPredicateFunctionResult (DomainType const &amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>PredicateFunction</name>
        <briefdescription>
<para>The type of a bound function, the result of binding passed arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="239" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_predicate_library_1aeae136ede388528b29abf2e6d435b435" prot="private" static="no" mutable="no">
        <type><ref refid="classpxr__tsl_1_1robin__map" kindref="compound">pxr_tsl::robin_map</ref>&lt; std::string, std::vector&lt; _OverloadBinderBasePtr &gt; &gt;</type>
        <definition>pxr_tsl::robin_map&lt; std::string, std::vector&lt;_OverloadBinderBasePtr&gt; &gt; _binders</definition>
        <argsstring></argsstring>
        <name>_binders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="762" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="762" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_predicate_library_1a683d09875efb93991b9a7b26c7efcafe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref>&lt; DomainType &gt;</type>
        <definition>SdfPredicateProgram&lt;DomainType&gt; SdfLinkPredicateExpression</definition>
        <argsstring>(SdfPredicateExpression const &amp;expr, SdfPredicateLibrary const &amp;lib)</argsstring>
        <name>SdfLinkPredicateExpression</name>
        <param>
          <type><ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref> const &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> const &amp;</type>
          <declname>lib</declname>
        </param>
        <briefdescription>
<para>Link <computeroutput>expr</computeroutput> with <computeroutput>lib</computeroutput> and return a callable program that evaluates <computeroutput>expr</computeroutput> on given objects of the <computeroutput>DomainType</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If linking <computeroutput>expr</computeroutput> and <computeroutput>lib</computeroutput> fails, issue a TF_RUNTIME_ERROR with a message, and return an empty program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="230" column="1" bodyfile="pxr/usd/sdf/predicateProgram.h" bodystart="165" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_predicate_library_1a50882aa867082b497b2348fb5a30b63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfPredicateLibrary</definition>
        <argsstring>()=default</argsstring>
        <name>SdfPredicateLibrary</name>
        <briefdescription>
<para>Default constructor produces an empty library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1ad0705dbcf25c6ae9909699263ada401a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfPredicateLibrary</definition>
        <argsstring>(SdfPredicateLibrary &amp;&amp;other)=default</argsstring>
        <name>SdfPredicateLibrary</name>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move-construct from an <computeroutput>other</computeroutput> library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a82399e020e6fb83ab3a57972ccb725a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfPredicateLibrary</definition>
        <argsstring>(SdfPredicateLibrary const &amp;other)</argsstring>
        <name>SdfPredicateLibrary</name>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy-construct from an <computeroutput>other</computeroutput> library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="249" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="249" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1affd41d92e6abfa20e4c4257e3683e978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;</type>
        <definition>SdfPredicateLibrary&amp; operator=</definition>
        <argsstring>(SdfPredicateLibrary &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move-assignment from an <computeroutput>other</computeroutput> library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a4079f7952db129136e96c79cee50b71b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;</type>
        <definition>SdfPredicateLibrary&amp; operator=</definition>
        <argsstring>(SdfPredicateLibrary const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy-assignment from an <computeroutput>other</computeroutput> library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="263" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="263" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a8f4bd121d5db360270f43076790e3dad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;</type>
        <definition>SdfPredicateLibrary&amp; Define</definition>
        <argsstring>(char const *name, Fn &amp;&amp;fn)</argsstring>
        <name>Define</name>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Register a function with name <computeroutput>name</computeroutput> in this library. </para>
        </briefdescription>
        <detaileddescription>
<para>The first argument must accept a DomainType instance. The remaining arguments must be convertible from bool, int, float, string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="275" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a6eabb6ace5c6abf09cee753eeab366df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;</type>
        <definition>SdfPredicateLibrary&amp; Define</definition>
        <argsstring>(std::string const &amp;name, Fn &amp;&amp;fn, NamesAndDefaults const &amp;namesAndDefaults)</argsstring>
        <name>Define</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <briefdescription>
<para>Register a function with name <computeroutput>name</computeroutput> in this library. </para>
        </briefdescription>
        <detaileddescription>
<para>The first argument must accept a DomainType instance. The remaining arguments must be convertible from bool, int, float, string. Optional parameter names and default values may be supplied in <computeroutput>namesAndDefaults</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="285" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="285" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1aaf0520bc7ba583d3b4a6ab6759f0223a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_predicate_library" kindref="compound">SdfPredicateLibrary</ref> &amp;</type>
        <definition>SdfPredicateLibrary&amp; DefineBinder</definition>
        <argsstring>(std::string const &amp;name, Fn &amp;&amp;fn)</argsstring>
        <name>DefineBinder</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Fn &amp;&amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Register a custom binding function for <computeroutput>name</computeroutput> in this library. </para>
        </briefdescription>
        <detaileddescription>
<para>The function must take a single argument of type std::vector&lt;SdfPredicateExpression::FnArg&gt;. When invoked, it must attempt to bind the arguments passed in the vector and return a bound PredicateFunction object. If the arguments are invalid, return an empty PredicateFunction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="307" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="307" bodyend="312"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_predicate_library_1acfa312c22afcd9a004a37021d145d160" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></type>
        <definition>PredicateFunction _BindCall</definition>
        <argsstring>(std::string const &amp;name, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;args) const</argsstring>
        <name>_BindCall</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="317" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="317" bodyend="335"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_sdf_predicate_library_1a9286592cfdbaa92ae20aeebd336079d4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void _CheckOneNameAndDefault</definition>
        <argsstring>(bool &amp;valid, size_t index, size_t numParams, NamesAndDefaults const &amp;namesAndDefaults)</argsstring>
        <name>_CheckOneNameAndDefault</name>
        <param>
          <type>bool &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numParams</declname>
        </param>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="338" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="338" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a3525e08d4ee409ffece3a8ac932036ee" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamsTuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _CheckNamesAndDefaultsImpl</definition>
        <argsstring>(NamesAndDefaults const &amp;namesAndDefaults, std::index_sequence&lt; I... &gt;)</argsstring>
        <name>_CheckNamesAndDefaultsImpl</name>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="370" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="370" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a32a129f11c3f874d8da944580f8a15e8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _CheckNamesAndDefaultsWithSignature</definition>
        <argsstring>(NamesAndDefaults const &amp;namesAndDefaults)</argsstring>
        <name>_CheckNamesAndDefaultsWithSignature</name>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="390" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="390" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1ae10c56af52cd428638c0e92eca73b0d5" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void _TryBindOne</definition>
        <argsstring>(size_t index, size_t numParams, ParamType &amp;param, bool &amp;boundAllParams, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;args, std::vector&lt; bool &gt; &amp;boundArgs, NamesAndDefaults const &amp;namesAndDefaults)</argsstring>
        <name>_TryBindOne</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>numParams</declname>
        </param>
        <param>
          <type>ParamType &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>boundAllParams</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>boundArgs</declname>
        </param>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="441" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="441" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a9c05f4cc16dd19d74370898f99ce190f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamsTuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool _TryBindArgs</definition>
        <argsstring>(ParamsTuple &amp;params, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;args, NamesAndDefaults const &amp;namesAndDefaults, std::index_sequence&lt; I... &gt;, std::vector&lt; bool &gt; &amp;boundArgs)</argsstring>
        <name>_TryBindArgs</name>
        <param>
          <type>ParamsTuple &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>boundArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="533" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="533" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a06dcc6bc52a4e9f7ff6b0d2ceb638419" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void _FillArbitraryArgs</definition>
        <argsstring>(std::true_type, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;args, std::vector&lt; bool &gt; const &amp;boundArgs, Tuple &amp;typedArgs)</argsstring>
        <name>_FillArbitraryArgs</name>
        <param>
          <type>std::true_type</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; const &amp;</type>
          <declname>boundArgs</declname>
        </param>
        <param>
          <type>Tuple &amp;</type>
          <declname>typedArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="557" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="557" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a454a2c71580cf46d7d2e5fee55f86a05" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void _FillArbitraryArgs</definition>
        <argsstring>(std::false_type, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;, std::vector&lt; bool &gt; const &amp;, T const &amp;)</argsstring>
        <name>_FillArbitraryArgs</name>
        <param>
          <type>std::false_type</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; const &amp;</type>
        </param>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="576" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="576" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1af66aea07cb088ad086b2784601868bca" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamsTuple</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool _TakesArbitraryArgs</definition>
        <argsstring>(std::true_type)</argsstring>
        <name>_TakesArbitraryArgs</name>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="585" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="585" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a5b5ca769a47c8e3fc15d5b05ef0083e9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamsTuple</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>static constexpr bool _TakesArbitraryArgs</definition>
        <argsstring>(std::false_type)</argsstring>
        <name>_TakesArbitraryArgs</name>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="595" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="595" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_predicate_library_1a65b1b6fd83600b523387b6c9349b9b4d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" kindref="member">PredicateFunction</ref></type>
        <definition>static PredicateFunction _TryToBindCall</definition>
        <argsstring>(Fn const &amp;fn, std::vector&lt; SdfPredicateExpression::FnArg &gt; const &amp;args, NamesAndDefaults const &amp;namesAndDefaults)</argsstring>
        <name>_TryToBindCall</name>
        <param>
          <type>Fn const &amp;</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_sdf_predicate_expression_1_1_fn_arg" kindref="compound">SdfPredicateExpression::FnArg</ref> &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="struct_sdf_predicate_param_names_and_defaults" kindref="compound">NamesAndDefaults</ref> const &amp;</type>
          <declname>namesAndDefaults</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/predicateLibrary.h" line="601" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="601" bodyend="660"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a library of predicate functions for use with <ref refid="class_sdf_predicate_expression" kindref="compound">SdfPredicateExpression</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Call <ref refid="class_sdf_predicate_library_1a683d09875efb93991b9a7b26c7efcafe" kindref="member">SdfLinkPredicateExpression()</ref> with an expression and a library to produce a callable <ref refid="class_sdf_predicate_program" kindref="compound">SdfPredicateProgram</ref>. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/predicateLibrary.h" line="214" column="1" bodyfile="pxr/usd/sdf/predicateLibrary.h" bodystart="214" bodyend="-1"/>
    <listofallmembers>
      <member refid="class_sdf_predicate_library_1acfa312c22afcd9a004a37021d145d160" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_BindCall</name></member>
      <member refid="class_sdf_predicate_library_1aeae136ede388528b29abf2e6d435b435" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_binders</name></member>
      <member refid="class_sdf_predicate_library_1a3525e08d4ee409ffece3a8ac932036ee" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_CheckNamesAndDefaultsImpl</name></member>
      <member refid="class_sdf_predicate_library_1a32a129f11c3f874d8da944580f8a15e8" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_CheckNamesAndDefaultsWithSignature</name></member>
      <member refid="class_sdf_predicate_library_1a9286592cfdbaa92ae20aeebd336079d4" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_CheckOneNameAndDefault</name></member>
      <member refid="class_sdf_predicate_library_1a06dcc6bc52a4e9f7ff6b0d2ceb638419" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_FillArbitraryArgs</name></member>
      <member refid="class_sdf_predicate_library_1a454a2c71580cf46d7d2e5fee55f86a05" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_FillArbitraryArgs</name></member>
      <member refid="class_sdf_predicate_library_1a911d23b7b2a2f7e3c6e19c77d03ff492" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_OverloadBinderBasePtr</name></member>
      <member refid="class_sdf_predicate_library_1af66aea07cb088ad086b2784601868bca" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_TakesArbitraryArgs</name></member>
      <member refid="class_sdf_predicate_library_1a5b5ca769a47c8e3fc15d5b05ef0083e9" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_TakesArbitraryArgs</name></member>
      <member refid="class_sdf_predicate_library_1a9c05f4cc16dd19d74370898f99ce190f" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_TryBindArgs</name></member>
      <member refid="class_sdf_predicate_library_1ae10c56af52cd428638c0e92eca73b0d5" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_TryBindOne</name></member>
      <member refid="class_sdf_predicate_library_1a65b1b6fd83600b523387b6c9349b9b4d" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>_TryToBindCall</name></member>
      <member refid="class_sdf_predicate_library_1a8f4bd121d5db360270f43076790e3dad" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>Define</name></member>
      <member refid="class_sdf_predicate_library_1a6eabb6ace5c6abf09cee753eeab366df" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>Define</name></member>
      <member refid="class_sdf_predicate_library_1aaf0520bc7ba583d3b4a6ab6759f0223a" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>DefineBinder</name></member>
      <member refid="class_sdf_predicate_library_1adae9768796f8829918e8197b4c992326" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>NamesAndDefaults</name></member>
      <member refid="class_sdf_predicate_library_1affd41d92e6abfa20e4c4257e3683e978" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>operator=</name></member>
      <member refid="class_sdf_predicate_library_1a4079f7952db129136e96c79cee50b71b" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>operator=</name></member>
      <member refid="class_sdf_predicate_library_1ad453cd5b71e405ca6a420ba3095c2c09" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>PredicateFunction</name></member>
      <member refid="class_sdf_predicate_library_1a683d09875efb93991b9a7b26c7efcafe" prot="private" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>SdfLinkPredicateExpression</name></member>
      <member refid="class_sdf_predicate_library_1a50882aa867082b497b2348fb5a30b63d" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>SdfPredicateLibrary</name></member>
      <member refid="class_sdf_predicate_library_1ad0705dbcf25c6ae9909699263ada401a" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>SdfPredicateLibrary</name></member>
      <member refid="class_sdf_predicate_library_1a82399e020e6fb83ab3a57972ccb725a1" prot="public" virt="non-virtual"><scope>SdfPredicateLibrary</scope><name>SdfPredicateLibrary</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
