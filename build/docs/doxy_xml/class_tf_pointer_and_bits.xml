<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_pointer_and_bits" kind="class" language="C++" prot="public">
    <compoundname>TfPointerAndBits</compoundname>
    <includes refid="pointer_and_bits_8h" local="no">pointerAndBits.h</includes>
    <innerclass refid="struct_tf_pointer_and_bits_1_1___align_of" prot="private">TfPointerAndBits::_AlignOf</innerclass>
    <innerclass refid="struct_tf_pointer_and_bits_1_1___align_of_3_01_u_00_01true_01_4" prot="private">TfPointerAndBits::_AlignOf&lt; U, true &gt;</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_pointer_and_bits_1ad85650e583ea2b08a3ee878588436f89" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* _ptrAndBits</definition>
        <argsstring></argsstring>
        <name>_ptrAndBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="208" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a61a4759404df44d5736cd4fe350f63c8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>static constexpr uintptr_t _GetAlign</definition>
        <argsstring>() noexcept</argsstring>
        <name>_GetAlign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="70" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a10df20e7aa8b8215a6d1bc9ec72fb753" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool _SupportsAtLeastOneBit</definition>
        <argsstring>() noexcept</argsstring>
        <name>_SupportsAtLeastOneBit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="74" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="74" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a3dd59453f07af4676d30c9664dea1a86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr TfPointerAndBits</definition>
        <argsstring>() noexcept</argsstring>
        <name>TfPointerAndBits</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer is initialized to null, bits are initialized to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="81" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1aaf43f2a11b64787fc07c778a68c19e76" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr TfPointerAndBits</definition>
        <argsstring>(T *p, uintptr_t bits=0) noexcept</argsstring>
        <name>TfPointerAndBits</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>bits</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor. Set the pointer to <emphasis>p</emphasis>, and the bits to <emphasis>bits</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="87" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a68c8ed0b981e382de0115c8074290755" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t GetMaxValue</definition>
        <argsstring>() const</argsstring>
        <name>GetMaxValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="94" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1afac8b00cd0c2c8e6ba761b6cbc9cd80b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t GetNumBitsValues</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBitsValues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="98" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ac83852f8444e0da9f61bad4eea01c42b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_pointer_and_bits" kindref="compound">TfPointerAndBits</ref> &amp;</type>
        <definition>TfPointerAndBits&amp; operator=</definition>
        <argsstring>(T *ptr) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Assignment. Leaves bits unmodified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="103" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a067abee766d5c1030b0cbd86cdda0121" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Indirection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="109" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ace0377362502e9a72f5d1449958368d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T&amp; operator *</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator *</name>
        <briefdescription>
<para>Dereference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="114" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a9667e6f596e3ad51e3a1a261efeff5b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Integral</type>
          </param>
        </templateparamlist>
        <type>constexpr Integral</type>
        <definition>constexpr Integral BitsAs</definition>
        <argsstring>() const noexcept</argsstring>
        <name>BitsAs</name>
        <briefdescription>
<para>Retrieve the stored bits as the integral type <emphasis>Integral</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="120" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a1566b4113cda781532a869474fb17949" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Integral</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetBits</definition>
        <argsstring>(Integral val) noexcept</argsstring>
        <name>SetBits</name>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the stored bits. No static range checking is performed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="131" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a05df5c25d9a433e8d97049e84d1eadbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Set</definition>
        <argsstring>(T *ptr) noexcept</argsstring>
        <name>Set</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set the pointer value to <emphasis>ptr</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="136" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a70a65938b8aa1f6f6f9903a6bbc1800b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Integral</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Set</definition>
        <argsstring>(T *ptr, Integral val) noexcept</argsstring>
        <name>Set</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Integral</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the pointer value to <emphasis>ptr</emphasis> and the bits to <emphasis>val</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="142" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ac3ab17fa92c8409e52c1fe61b023de76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* Get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Retrieve the pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="147" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a80f6cd50c1ca199c99d40d54fde620e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t GetLiteral</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetLiteral</name>
        <briefdescription>
<para>Retrieve the raw underlying value. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be useful for doing literal equality checks between two instances. The only guarantees are that this has the same bit pattern as the pointer value if the bits are 0, and will compare equal to another instance when both have identical pointer and bits values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="156" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a8a9de7f409cdf28076a4dd899fc09d76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Swap</definition>
        <argsstring>(TfPointerAndBits &amp;other) noexcept</argsstring>
        <name>Swap</name>
        <param>
          <type><ref refid="class_tf_pointer_and_bits" kindref="compound">TfPointerAndBits</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this PointerAndBits with <emphasis>other</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="161" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="161" bodyend="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ab0b82d9231433a87920799cfb3493237" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t _GetBitMask</definition>
        <argsstring>() const noexcept</argsstring>
        <name>_GetBitMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="166" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1abe38edc909a4b0a947acd37676663af8" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* _Combine</definition>
        <argsstring>(T *p, uintptr_t bits) const noexcept</argsstring>
        <name>_Combine</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="171" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ae1ae1408786b6887be392b7254557e19" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t _AsInt</definition>
        <argsstring>(T *p) const noexcept</argsstring>
        <name>_AsInt</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="177" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a9e6c5923b4da699265734fa77de629dd" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* _AsPtr</definition>
        <argsstring>(uintptr_t i) const noexcept</argsstring>
        <name>_AsPtr</name>
        <param>
          <type>uintptr_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="183" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1aff2cc362988ca8c852e824eeef87d9b1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T* _GetPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>_GetPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="188" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a95a95c43c67c53db041af7ac53a919d3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _SetPtr</definition>
        <argsstring>(T *p) noexcept</argsstring>
        <name>_SetPtr</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="193" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1ae12912f2c2102afab7e0f21b408173c0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uintptr_t</type>
        <definition>constexpr uintptr_t _GetBits</definition>
        <argsstring>() const noexcept</argsstring>
        <name>_GetBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="198" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_pointer_and_bits_1a0f06c2c54601b260b65a0c350680511b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _SetBits</definition>
        <argsstring>(uintptr_t bits) noexcept</argsstring>
        <name>_SetBits</name>
        <param>
          <type>uintptr_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pointerAndBits.h" line="203" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="203" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class stores a T * and a small integer in the space of a T *. </para>
    </briefdescription>
    <detaileddescription>
<para>The number of bits possible to store depends on the alignment of T. The number of distinct values representable by the bits and the maximal value are exposed via the compile time constants <emphasis>NumBitsValues</emphasis> and <emphasis>MaxValue</emphasis>, respectively.</para>
<para>The bits may be set and retrieved as any integral type. The pointer value and the bits value may be set and retrieved independently. </para>
    </detaileddescription>
    <location file="pxr/base/tf/pointerAndBits.h" line="54" column="1" bodyfile="pxr/base/tf/pointerAndBits.h" bodystart="53" bodyend="209"/>
    <listofallmembers>
      <member refid="class_tf_pointer_and_bits_1ae1ae1408786b6887be392b7254557e19" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_AsInt</name></member>
      <member refid="class_tf_pointer_and_bits_1a9e6c5923b4da699265734fa77de629dd" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_AsPtr</name></member>
      <member refid="class_tf_pointer_and_bits_1abe38edc909a4b0a947acd37676663af8" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_Combine</name></member>
      <member refid="class_tf_pointer_and_bits_1a61a4759404df44d5736cd4fe350f63c8" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_GetAlign</name></member>
      <member refid="class_tf_pointer_and_bits_1ab0b82d9231433a87920799cfb3493237" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_GetBitMask</name></member>
      <member refid="class_tf_pointer_and_bits_1ae12912f2c2102afab7e0f21b408173c0" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_GetBits</name></member>
      <member refid="class_tf_pointer_and_bits_1aff2cc362988ca8c852e824eeef87d9b1" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_GetPtr</name></member>
      <member refid="class_tf_pointer_and_bits_1ad85650e583ea2b08a3ee878588436f89" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_ptrAndBits</name></member>
      <member refid="class_tf_pointer_and_bits_1a0f06c2c54601b260b65a0c350680511b" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_SetBits</name></member>
      <member refid="class_tf_pointer_and_bits_1a95a95c43c67c53db041af7ac53a919d3" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_SetPtr</name></member>
      <member refid="class_tf_pointer_and_bits_1a10df20e7aa8b8215a6d1bc9ec72fb753" prot="private" virt="non-virtual"><scope>TfPointerAndBits</scope><name>_SupportsAtLeastOneBit</name></member>
      <member refid="class_tf_pointer_and_bits_1a9667e6f596e3ad51e3a1a261efeff5b7" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>BitsAs</name></member>
      <member refid="class_tf_pointer_and_bits_1ac3ab17fa92c8409e52c1fe61b023de76" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>Get</name></member>
      <member refid="class_tf_pointer_and_bits_1a80f6cd50c1ca199c99d40d54fde620e0" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>GetLiteral</name></member>
      <member refid="class_tf_pointer_and_bits_1a68c8ed0b981e382de0115c8074290755" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>GetMaxValue</name></member>
      <member refid="class_tf_pointer_and_bits_1afac8b00cd0c2c8e6ba761b6cbc9cd80b" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>GetNumBitsValues</name></member>
      <member refid="class_tf_pointer_and_bits_1ace0377362502e9a72f5d1449958368d9" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>operator *</name></member>
      <member refid="class_tf_pointer_and_bits_1a067abee766d5c1030b0cbd86cdda0121" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>operator-&gt;</name></member>
      <member refid="class_tf_pointer_and_bits_1ac83852f8444e0da9f61bad4eea01c42b" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>operator=</name></member>
      <member refid="class_tf_pointer_and_bits_1a05df5c25d9a433e8d97049e84d1eadbf" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>Set</name></member>
      <member refid="class_tf_pointer_and_bits_1a70a65938b8aa1f6f6f9903a6bbc1800b" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>Set</name></member>
      <member refid="class_tf_pointer_and_bits_1a1566b4113cda781532a869474fb17949" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>SetBits</name></member>
      <member refid="class_tf_pointer_and_bits_1a8a9de7f409cdf28076a4dd899fc09d76" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>Swap</name></member>
      <member refid="class_tf_pointer_and_bits_1a3dd59453f07af4676d30c9664dea1a86" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>TfPointerAndBits</name></member>
      <member refid="class_tf_pointer_and_bits_1aaf43f2a11b64787fc07c778a68c19e76" prot="public" virt="non-virtual"><scope>TfPointerAndBits</scope><name>TfPointerAndBits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
