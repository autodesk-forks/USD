<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="struct_tf_py_raise_on_error" kind="class" language="C++" prot="public">
    <compoundname>TfPyRaiseOnError</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Base</basecompoundref>
    <includes refid="py_error_8h" local="no">pyError.h</includes>
    <innerclass refid="struct_tf_py_raise_on_error_1_1_error_mark_and_args" prot="public">TfPyRaiseOnError::ErrorMarkAndArgs</innerclass>
    <templateparamlist>
      <param>
        <type>typename Base</type>
        <defval>boost::python::default_call_policies</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_tf_py_raise_on_error_1a687619696872c5bfa1cfc9c3d83f99d9" prot="public" static="no">
        <type>ErrorMarkAndArgs&lt; typename Base::argument_package &gt;</type>
        <definition>typedef ErrorMarkAndArgs&lt;typename Base::argument_package&gt; argument_package</definition>
        <argsstring></argsstring>
        <name>argument_package</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyError.h" line="84" column="1" bodyfile="pxr/base/tf/pyError.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_tf_py_raise_on_error_1aca604ff47b91f310fd9332f6e44b95f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TfPyRaiseOnError</definition>
        <argsstring>()</argsstring>
        <name>TfPyRaiseOnError</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyError.h" line="87" column="1" bodyfile="pxr/base/tf/pyError.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_py_raise_on_error_1a98f55ab9f0b0faacf5aeb3aa64c2bb3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool precall</definition>
        <argsstring>(argument_package const &amp;a)</argsstring>
        <name>precall</name>
        <param>
          <type>argument_package const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyError.h" line="91" column="1" bodyfile="pxr/base/tf/pyError.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="struct_tf_py_raise_on_error_1a517acb2d5641afd8622c81761cd79793" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>PyObject *</type>
        <definition>PyObject* postcall</definition>
        <argsstring>(argument_package const &amp;a, PyObject *result)</argsstring>
        <name>postcall</name>
        <param>
          <type>argument_package const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>PyObject *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyError.h" line="95" column="1" bodyfile="pxr/base/tf/pyError.h" bodystart="95" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A boost.python call policy class which, when applied to a wrapped function, will create an error mark before calling the function, and check that error mark after the function has completed. </para>
    </briefdescription>
    <detaileddescription>
<para>If any TfErrors have occurred, they will be raised as python exceptions.</para>
<para>This facility does not need to be used by clients in general. It is only required for wrapped functions and methods that do not appear directly in an extension module. For instance, the map and sequence proxy objects use this, since they are created on the fly. </para>
    </detaileddescription>
    <location file="pxr/base/tf/pyError.h" line="64" column="1" bodyfile="pxr/base/tf/pyError.h" bodystart="63" bodyend="103"/>
    <listofallmembers>
      <member refid="struct_tf_py_raise_on_error_1a687619696872c5bfa1cfc9c3d83f99d9" prot="public" virt="non-virtual"><scope>TfPyRaiseOnError</scope><name>argument_package</name></member>
      <member refid="struct_tf_py_raise_on_error_1a517acb2d5641afd8622c81761cd79793" prot="public" virt="non-virtual"><scope>TfPyRaiseOnError</scope><name>postcall</name></member>
      <member refid="struct_tf_py_raise_on_error_1a98f55ab9f0b0faacf5aeb3aa64c2bb3f" prot="public" virt="non-virtual"><scope>TfPyRaiseOnError</scope><name>precall</name></member>
      <member refid="struct_tf_py_raise_on_error_1aca604ff47b91f310fd9332f6e44b95f8" prot="public" virt="non-virtual"><scope>TfPyRaiseOnError</scope><name>TfPyRaiseOnError</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
