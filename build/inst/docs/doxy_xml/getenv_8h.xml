<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="getenv_8h" kind="file" language="C++">
    <compoundname>getenv.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="61575">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="61576" relation="include">
        </childnode>
      </node>
      <node id="61577">
        <label>string</label>
      </node>
      <node id="61573">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="61572">
        <label>pxr/base/tf/getenv.h</label>
        <link refid="getenv_8h"/>
        <childnode refid="61573" relation="include">
        </childnode>
        <childnode refid="61574" relation="include">
        </childnode>
        <childnode refid="61577" relation="include">
        </childnode>
      </node>
      <node id="61574">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="61575" relation="include">
        </childnode>
      </node>
      <node id="61576">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__tf___systems_ext_1gab70f54b2cfab33fee28728c4fb640fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API std::string</type>
        <definition>TF_API std::string TfGetenv</definition>
        <argsstring>(const std::string &amp;envName, const std::string &amp;defaultValue=&quot;&quot;)</argsstring>
        <name>TfGetenv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>envName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>defaultValue</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Return an environment variable as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the value of the environment variable <computeroutput>envName</computeroutput> as a string. If the variable is unset, or is the empty string, then <computeroutput>defaultValue</computeroutput> is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/getenv.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___systems_ext_1ga35452830aca5a419eb60bf9c06248837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API int</type>
        <definition>TF_API int TfGetenvInt</definition>
        <argsstring>(const std::string &amp;envName, int defaultValue)</argsstring>
        <name>TfGetenvInt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>envName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return an environment variable as an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the value of the environment variable <computeroutput>envName</computeroutput> as an integer. If the variable is unset, or is the empty string, then <computeroutput>defaultValue</computeroutput> is returned. Otherwise, the function uses atoi() to convert the string to an integer: the implication being that if the string is not a valid integer, you get back whatever value atoi() comes up with. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/getenv.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___systems_ext_1ga0d0708222b25046ef8518a6794ee404e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool TfGetenvBool</definition>
        <argsstring>(const std::string &amp;, bool defaultValue)</argsstring>
        <name>TfGetenvBool</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return an environment variable as a boolean. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the value of the environment variable <computeroutput>envName</computeroutput> as a boolean. If the variable is unset, or is the empty string, then <computeroutput>defaultValue</computeroutput> is returned. A value of <computeroutput>true</computeroutput> is returned if the environment variable is any of &quot;true&quot;, &quot;yes&quot;, &quot;on&quot; or &quot;1&quot;; the match is not case sensitive. All other values yield a return value of <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/getenv.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__group__tf___systems_ext_1ga394682c77897a9060310d12cff30384d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API double</type>
        <definition>TF_API double TfGetenvDouble</definition>
        <argsstring>(const std::string &amp;envName, double defaultValue)</argsstring>
        <name>TfGetenvDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>envName</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
<para>Return an environment variable as a double. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the value of the environment variable <computeroutput>envName</computeroutput> as a double. If the variable is unset, or is the empty string, then <computeroutput>defaultValue</computeroutput> is returned. Otherwise, the function uses <ref refid="group__group__tf___string_1gaeab03b8ef5e730ae50cd19cacf4fbb65" kindref="member">TfStringToDouble()</ref> to convert the string to a double: the implication being that if the string is not a valid double, you get back whatever value <ref refid="group__group__tf___string_1gaeab03b8ef5e730ae50cd19cacf4fbb65" kindref="member">TfStringToDouble()</ref> comes up with. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/getenv.h" line="79" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions for accessing environment variables. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_GETENV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_GETENV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"></codeline>
<codeline lineno="46"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="47"><highlight class="normal">std::string<sp/><ref refid="group__group__tf___systems_ext_1gab70f54b2cfab33fee28728c4fb640fec" kindref="member">TfGetenv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>envName,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>defaultValue<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___systems_ext_1ga35452830aca5a419eb60bf9c06248837" kindref="member">TfGetenvInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>envName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaultValue);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___systems_ext_1ga0d0708222b25046ef8518a6794ee404e" kindref="member">TfGetenvBool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaultValue);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">TF_API</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__group__tf___systems_ext_1ga394682c77897a9060310d12cff30384d" kindref="member">TfGetenvDouble</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>envName,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>defaultValue);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/getenv.h"/>
  </compounddef>
</doxygen>
