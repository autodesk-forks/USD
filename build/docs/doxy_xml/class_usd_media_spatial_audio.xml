<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_media_spatial_audio" kind="class" language="C++" prot="public">
    <compoundname>UsdMediaSpatialAudio</compoundname>
    <basecompoundref refid="class_usd_geom_xformable" prot="public" virt="non-virtual">UsdGeomXformable</basecompoundref>
    <includes refid="spatial_audio_8h" local="no">spatialAudio.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_media_spatial_audio_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa6650141c3d230f8e4e51461e1d9e645" kindref="member">UsdSchemaKind::ConcreteTyped</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="114" column="1" bodyfile="pxr/usd/usdMedia/spatialAudio.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_media_spatial_audio_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="192" column="1" bodyfile="pxr/usd/usdMedia/spatialAudio.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_media_spatial_audio_1aae2505389b1bcd721e19dbbbb50e304c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdMediaSpatialAudio</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdMediaSpatialAudio</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_media_spatial_audio_1a6bad79586830c49520cdd55af1d6ed87" kindref="member">UsdMediaSpatialAudio::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="120" column="1" bodyfile="pxr/usd/usdMedia/spatialAudio.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a877e7de16250ab62d2f9d7079a4b2117" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdMediaSpatialAudio</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdMediaSpatialAudio</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="128" column="1" bodyfile="pxr/usd/usdMedia/spatialAudio.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1aeea38c6ecc8fa2c6399c7d0e6351beab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API</type>
        <definition>virtual USDMEDIA_API ~UsdMediaSpatialAudio</definition>
        <argsstring>()</argsstring>
        <name>~UsdMediaSpatialAudio</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a70163d7a7c183c11cd5b9a9ae76d509b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetFilePathAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetFilePathAttr</name>
        <briefdescription>
<para>Path to the audio file. </para>
        </briefdescription>
        <detaileddescription>
<para>In general, the formats allowed for audio files is no more constrained by USD than is image-type. As with images, however, usdz has stricter requirements based on DMA and format support in browsers and consumer devices. The allowed audio filetypes for usdz are M4A, MP3, WAV (in order of preference). <simplesect kind="see"><para><ulink url="https://openusd.org/release/spec_usdz.html">Usdz Specification</ulink></para>
</simplesect>
<table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform asset filePath = @@</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Asset   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1aa6b9edd96eb489bb566c19dc90510f0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateFilePathAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateFilePathAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1a70163d7a7c183c11cd5b9a9ae76d509b" kindref="member">GetFilePathAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a59392b4d6baa88dcfeece8232d791760" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetAuralModeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetAuralModeAttr</name>
        <briefdescription>
<para>Determines how audio should be played. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>spatial: Play the audio in 3D space if the device can support spatial audio. if not, fall back to mono.</para>
</listitem><listitem><para>nonSpatial: Play the audio without regard to the SpatialAudio prim&apos;s position. If the audio media contains any form of stereo or other multi-channel sound, it is left to the application to determine whether the listener&apos;s position should be taken into account. We expect nonSpatial to be the choice for ambient sounds and music sound-tracks.</para>
</listitem></itemizedlist>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token auralMode = &quot;spatial&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_media_2tokens_8h_1a4d425f92946db46d19b66dc22242f892" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>spatial, nonSpatial   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a7619b17da883c8d407d0b2d4d008e4ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateAuralModeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateAuralModeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1a59392b4d6baa88dcfeece8232d791760" kindref="member">GetAuralModeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1ad2fb61d34b3ced05c2b9663f9cb06d71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetPlaybackModeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetPlaybackModeAttr</name>
        <briefdescription>
<para>Along with <emphasis>startTime</emphasis> and <emphasis>endTime</emphasis>, determines when the audio playback should start and stop during the stage&apos;s animation playback and whether the audio should loop during its duration. </para>
        </briefdescription>
        <detaileddescription>
<para>Valid values are:<itemizedlist>
<listitem><para>onceFromStart: Play the audio once, starting at <emphasis>startTime</emphasis>, continuing until the audio completes.</para>
</listitem><listitem><para>onceFromStartToEnd: Play the audio once beginning at <emphasis>startTime</emphasis>, continuing until <emphasis>endTime</emphasis> or until the audio completes, whichever comes first.</para>
</listitem><listitem><para>loopFromStart: Start playing the audio at <emphasis>startTime</emphasis> and continue looping through to the stage&apos;s authored <emphasis>endTimeCode</emphasis>.</para>
</listitem><listitem><para>loopFromStartToEnd: Start playing the audio at <emphasis>startTime</emphasis> and continue looping through, stopping the audio at <emphasis>endTime</emphasis>.</para>
</listitem><listitem><para>loopFromStage: Start playing the audio at the stage&apos;s authored <emphasis>startTimeCode</emphasis> and continue looping through to the stage&apos;s authored <emphasis>endTimeCode</emphasis>. This can be useful for ambient sounds that should always be active.</para>
</listitem></itemizedlist>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token playbackMode = &quot;onceFromStart&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_media_2tokens_8h_1a4d425f92946db46d19b66dc22242f892" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>onceFromStart, onceFromStartToEnd, loopFromStart, loopFromStartToEnd, loopFromStage   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1af9e8617265606845fc0e68f98f101c8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreatePlaybackModeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreatePlaybackModeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1ad2fb61d34b3ced05c2b9663f9cb06d71" kindref="member">GetPlaybackModeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1aa5eabcfeff1fe46669686dce4a2a068a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetStartTimeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetStartTimeAttr</name>
        <briefdescription>
<para>Expressed in the timeCodesPerSecond of the containing stage, <emphasis>startTime</emphasis> specifies when the audio stream will start playing during animation playback. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is ignored when <emphasis>playbackMode</emphasis> is set to loopFromStage as, in this mode, the audio will always start at the stage&apos;s authored <emphasis>startTimeCode</emphasis>. Note that <emphasis>startTime</emphasis> is expressed as a timecode so that the stage can properly apply layer offsets when resolving its value. See <ref refid="class_usd_media_spatial_audio_1Usd_SpatialAudio_TimeScaling" kindref="member">Timecode Attributes and Time Scaling</ref> for more details and caveats.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform timecode startTime = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;TimeCode   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1ac368d98fe58f9bb8d3da979720151f69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateStartTimeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateStartTimeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1aa5eabcfeff1fe46669686dce4a2a068a" kindref="member">GetStartTimeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a75030c852063de97c0fec07d647e7cf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetEndTimeAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetEndTimeAttr</name>
        <briefdescription>
<para>Expressed in the timeCodesPerSecond of the containing stage, <emphasis>endTime</emphasis> specifies when the audio stream will cease playing during animation playback if the length of the referenced audio clip is longer than desired. </para>
        </briefdescription>
        <detaileddescription>
<para>This only applies if <emphasis>playbackMode</emphasis> is set to onceFromStartToEnd or loopFromStartToEnd, otherwise the <emphasis>endTimeCode</emphasis> of the stage is used instead of <emphasis>endTime</emphasis>. If <emphasis>endTime</emphasis> is less than <emphasis>startTime</emphasis>, it is expected that the audio will instead be played from <emphasis>endTime</emphasis> to <emphasis>startTime</emphasis>. Note that <emphasis>endTime</emphasis> is expressed as a timecode so that the stage can properly apply layer offsets when resolving its value. See <ref refid="class_usd_media_spatial_audio_1Usd_SpatialAudio_TimeScaling" kindref="member">Timecode Attributes and Time Scaling</ref> for more details and caveats.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform timecode endTime = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_sdf_time_code" kindref="compound">SdfTimeCode</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;TimeCode   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a751af6d7a2fff303b39e2fa76f235d99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateEndTimeAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateEndTimeAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1a75030c852063de97c0fec07d647e7cf9" kindref="member">GetEndTimeAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a1c3291b7a63a710839b57041be17bd8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetMediaOffsetAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetMediaOffsetAttr</name>
        <briefdescription>
<para>Expressed in seconds, <emphasis>mediaOffset</emphasis> specifies the offset from the referenced audio file&apos;s beginning at which we should begin playback when stage playback reaches the time that prim&apos;s audio should start. </para>
        </briefdescription>
        <detaileddescription>
<para>If the prim&apos;s <emphasis>playbackMode</emphasis> is a looping mode, <emphasis>mediaOffset</emphasis> is applied only to the first run-through of the audio clip; the second and all other loops begin from the start of the audio clip.</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform double mediaOffset = 0</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>double   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Double   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a607e1ae4c196ebe44a364ee4f780cd3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateMediaOffsetAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateMediaOffsetAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1a1c3291b7a63a710839b57041be17bd8d" kindref="member">GetMediaOffsetAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a723d4caad75cd43b3ca1fe781261f47d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute GetGainAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetGainAttr</name>
        <briefdescription>
<para>Multiplier on the incoming audio signal. </para>
        </briefdescription>
        <detaileddescription>
<para>A value of 0 &quot;mutes&quot; the signal. Negative values will be clamped to 0.</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>double gain = 1</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para>double   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Double   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1ab41f40fd830fe0c09815cbd793295891" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDMEDIA_API UsdAttribute CreateGainAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateGainAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_media_spatial_audio_1a723d4caad75cd43b3ca1fe781261f47d" kindref="member">GetGainAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="423" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a6c48ffea22dc6bed030ce80024158530" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDMEDIA_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a6bad79586830c49520cdd55af1d6ed87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref></type>
        <definition>static USDMEDIA_API UsdMediaSpatialAudio Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdMediaSpatialAudio(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1af923fb276a2fecaea2cf3d2e1e4c7cb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API <ref refid="class_usd_media_spatial_audio" kindref="compound">UsdMediaSpatialAudio</ref></type>
        <definition>static USDMEDIA_API UsdMediaSpatialAudio Define</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Define</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Attempt to ensure a <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis> adhering to this schema at <computeroutput>path</computeroutput> is defined (according to <ref refid="class_usd_prim_1a87fbe0030c0fbb6307ee434664f1142f" kindref="member">UsdPrim::IsDefined()</ref>) on this stage. </para>
        </briefdescription>
        <detaileddescription>
<para>If a prim adhering to this schema at <computeroutput>path</computeroutput> is already defined on this stage, return that prim. Otherwise author an <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> with <emphasis>specifier</emphasis> == <emphasis>SdfSpecifierDef</emphasis> and this schema&apos;s prim type name for the prim at <computeroutput>path</computeroutput> at the current EditTarget. Author <emphasis><ref refid="class_sdf_prim_spec" kindref="compound">SdfPrimSpec</ref></emphasis> s with <computeroutput>specifier</computeroutput> == <emphasis>SdfSpecifierDef</emphasis> and empty typeName at the current EditTarget for any nonexistent, or existing but not <emphasis>Defined</emphasis> ancestors.</para>
<para>The given <emphasis>path</emphasis> must be an absolute prim path that does not contain any variant selections.</para>
<para>If it is impossible to author any of the necessary PrimSpecs, (for example, in case <emphasis>path</emphasis> cannot map to the current <ref refid="class_usd_edit_target" kindref="compound">UsdEditTarget</ref>&apos;s namespace) issue an error and return an invalid <emphasis><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></emphasis>.</para>
<para>Note that this method may return a defined prim whose typeName does not specify this schema class, in case a stronger typeName opinion overrides the opinion at the current EditTarget. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="181" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a4b449c2d8fd036608b3560779b7be4a3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDMEDIA_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_geom_xformable_1a71a1af4672754da617b8cb537f29c5f4">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a861bb4e705c4f48cd9d6f425fd23ef2f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDMEDIA_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDMEDIA_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_media_spatial_audio_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_media_spatial_audio_1a0761fce9ddea0f86c69c833dfb52348b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDMEDIA_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDMEDIA_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_geom_xformable_1a1e6b9f0da5624212c58019b749c21286">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdMedia/spatialAudio.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The SpatialAudio primitive defines basic properties for encoding playback of an audio file or stream within a USD Stage. </para>
    </briefdescription>
    <detaileddescription>
<para>The SpatialAudio schema derives from <ref refid="class_usd_geom_xformable" kindref="compound">UsdGeomXformable</ref> since it can support full spatial audio while also supporting non-spatial mono and stereo sounds. One or more SpatialAudio prims can be placed anywhere in the namespace, though it is advantageous to place truly spatial audio prims under/inside the models from which the sound emanates, so that the audio prim need only be transformed relative to the model, rather than copying its animation.</para>
<sect1 id="class_usd_media_spatial_audio_1Usd_SpatialAudio_TimeScaling">
<title>Timecode Attributes and Time Scaling</title>
<para><emphasis>startTime</emphasis> and <emphasis>endTime</emphasis> are <ref refid="class_sdf_time_code" kindref="compound">timecode</ref> valued attributes which gives them the special behavior that <ref refid="class_sdf_layer_offset" kindref="compound">layer offsets</ref> affecting the layer in which one of these values is authored are applied to the attribute&apos;s value itself during value resolution. This allows audio playback to be kept in sync with time sampled animation as the animation is affected by <ref refid="class_sdf_layer_offset" kindref="compound">layer offsets</ref> in the composition. But this behavior brings with it some interesting edge cases and caveats when it comes to <ref refid="class_sdf_layer_offset" kindref="compound">layer offsets</ref> that include scale.</para>
<para><heading level="4">Layer Offsets do not affect Media Dilation</heading>
</para>
<para>Although authored layer offsets may have a time scale which can scale the duration between an authored <emphasis>startTime</emphasis> and <emphasis>endTime</emphasis>, we make no attempt to infer any playback dilation of the actual audio media itself. Given that <emphasis>startTime</emphasis> and <emphasis>endTime</emphasis> can be independently authored in different layers with differing time scales, it is not possible, in general, to define an &quot;original timeframe&quot; from which we can compute a dilation to composed stage-time. Even if we could compute a composed dilation this way, it would still be impossible to flatten a stage or layer stack into a single layer and still retain the composed audio dilation using this schema.</para>
<para><heading level="4">Inverting startTime and endTime</heading>
</para>
<para>Although we do not expect it to be common, it is possible to apply a negative time scale to USD layers, which mostly has the effect of reversing animation in the affected composition. If a negative scale is applied to a composition that contains authored <emphasis>startTime</emphasis> and <emphasis>endTime</emphasis>, it will reverse their relative ordering in time. Therefore, we stipulate when <emphasis>playbackMode</emphasis> is &quot;onceFromStartToEnd&quot; or &quot;loopFromStartToEnd&quot;, if <emphasis>endTime</emphasis> is less than <emphasis>startTime</emphasis>, then begin playback at <emphasis>endTime</emphasis>, and continue until <emphasis>startTime</emphasis>. When <emphasis>startTime</emphasis> and <emphasis>endTime</emphasis> are inverted, we do not, however, stipulate that playback of the audio media itself be inverted, since doing so &quot;successfully&quot; would require perfect knowledge of when, within the audio clip, relevant audio ends (so that we know how to offset the reversed audio to align it so that we reach the &quot;beginning&quot; at <emphasis>startTime</emphasis>), and sounds played in reverse are not likely to produce desirable results.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_media_2tokens_8h_1a4d425f92946db46d19b66dc22242f892" kindref="member">UsdMediaTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdMediaTokens-&gt;rightHanded as the value. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="7692">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7693" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7693">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7694" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7690">
        <label>UsdMediaSpatialAudio</label>
        <link refid="class_usd_media_spatial_audio"/>
        <childnode refid="7691" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7694">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7691">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7692" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7697">
        <label>UsdGeomImageable</label>
        <link refid="class_usd_geom_imageable"/>
        <childnode refid="7698" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7698">
        <label>UsdTyped</label>
        <link refid="class_usd_typed"/>
        <childnode refid="7699" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7695">
        <label>UsdMediaSpatialAudio</label>
        <link refid="class_usd_media_spatial_audio"/>
        <childnode refid="7696" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7699">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="7696">
        <label>UsdGeomXformable</label>
        <link refid="class_usd_geom_xformable"/>
        <childnode refid="7697" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdMedia/spatialAudio.h" line="109" column="1" bodyfile="pxr/usd/usdMedia/spatialAudio.h" bodystart="108" bodyend="436"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a4b449c2d8fd036608b3560779b7be4a3" prot="protected" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_media_spatial_audio_1a861bb4e705c4f48cd9d6f425fd23ef2f" prot="private" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_media_spatial_audio_1a0761fce9ddea0f86c69c833dfb52348b" prot="private" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>_GetType</name></member>
      <member refid="class_usd_typed_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_media_spatial_audio_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_xformable_1a8b0d6e551f3705724405ddf6795756a7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddOrientOp</name></member>
      <member refid="class_usd_geom_xformable_1ac01badf7416ca43636d9e479bc47da33" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1aba511327f305e9a8b3f8941e244c8992" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1a63ffbff66e60a314adac3380d533469f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4af9af5dc523e80fce81a88014edef19" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1ac7235be9524c6eb1a906f3247f9833f0" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1a353b43cb6f6d04b2db5b68c057d0494f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a9c089e1932ce91477becbc1f01bdfb02" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a6dd6174a48238d6a9564128f43362ce2" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a5938bf453b0f07bfaf80d121b916d720" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a4f84556fa9b1fab0432b8c4342e98045" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddScaleOp</name></member>
      <member refid="class_usd_geom_xformable_1a0fd59cb1cdd089e0d93fa755fb0da268" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1a782fe5d36ac6657235b80741d47a8b1f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddTranslateOp</name></member>
      <member refid="class_usd_geom_xformable_1ad6dfc740dcec052482489647af9ed36b" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>AddXformOp</name></member>
      <member refid="class_usd_geom_xformable_1a10a241711290631508cfc349ad4ab64d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ClearXformOpOrder</name></member>
      <member refid="class_usd_geom_imageable_1a1174d9985088dd364f6a56925073fe76" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeEffectiveVisibility</name></member>
      <member refid="class_usd_geom_imageable_1a503f6d39abbd1b62c3c55f227461334d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeLocalBound</name></member>
      <member refid="class_usd_geom_imageable_1a8e3fb09253ba63d63921f665d63cd270" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeLocalToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1a4313664fa692f724da56cc254bce70fc" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeParentToWorldTransform</name></member>
      <member refid="class_usd_geom_imageable_1ad5a114f3776eb75edc651e8c2d67f8ff" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a1aa2ea4240e7e12f11122d7ff8ad7f90" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputePurpose</name></member>
      <member refid="class_usd_geom_imageable_1a2a7d61f7af1a02e095e6a8abcf8e641f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a00c5620a09313aa39cb0d79f492b340f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputePurposeInfo</name></member>
      <member refid="class_usd_geom_imageable_1a54086b2386d22b1de4aaeb5b3005533d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeUntransformedBound</name></member>
      <member refid="class_usd_geom_imageable_1ac0bfa1554d9b57303c14f71d084c578d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeVisibility</name></member>
      <member refid="class_usd_geom_imageable_1ae616043b0f7fbc631ef9e5c784132a6c" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>ComputeWorldBound</name></member>
      <member refid="class_usd_media_spatial_audio_1a7619b17da883c8d407d0b2d4d008e4ec" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateAuralModeAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a751af6d7a2fff303b39e2fa76f235d99" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateEndTimeAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1aa6b9edd96eb489bb566c19dc90510f0d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateFilePathAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1ab41f40fd830fe0c09815cbd793295891" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateGainAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a607e1ae4c196ebe44a364ee4f780cd3a" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateMediaOffsetAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1af9e8617265606845fc0e68f98f101c8c" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreatePlaybackModeAttr</name></member>
      <member refid="class_usd_geom_imageable_1aafc2e3aa91cf892f7937cc46a2351472" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1a3f4f6685ac7cef1d8ef94c44586b84bc" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreatePurposeAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1ac368d98fe58f9bb8d3da979720151f69" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateStartTimeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a96d4959f4d99367dfa3a79a3371e278a" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a03e49a63dc0bed6c97cee6bbc10aa182" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>CreateXformOpOrderAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1af923fb276a2fecaea2cf3d2e1e4c7cb7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>Define</name></member>
      <member refid="class_usd_media_spatial_audio_1a6bad79586830c49520cdd55af1d6ed87" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>Get</name></member>
      <member refid="class_usd_media_spatial_audio_1a59392b4d6baa88dcfeece8232d791760" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetAuralModeAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a75030c852063de97c0fec07d647e7cf9" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetEndTimeAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a70163d7a7c183c11cd5b9a9ae76d509b" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetFilePathAttr</name></member>
      <member refid="class_usd_media_spatial_audio_1a723d4caad75cd43b3ca1fe781261f47d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetGainAttr</name></member>
      <member refid="class_usd_geom_xformable_1a9a04ccb1ba8aa16e8cc1e878c2c92969" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1a3bdae958563500cfdf2b4f3bcf34c465" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_geom_xformable_1ad0838e193af826f5bbde3c274e9839ce" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetLocalTransformation</name></member>
      <member refid="class_usd_media_spatial_audio_1a1c3291b7a63a710839b57041be17bd8d" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetMediaOffsetAttr</name></member>
      <member refid="class_usd_geom_imageable_1ac7d41ddd5b5d274785f4a109a7cebad5" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetOrderedPurposeTokens</name></member>
      <member refid="class_usd_geom_xformable_1a5e7cd1ac98925aa41af4f83d1efe6375" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetOrderedXformOps</name></member>
      <member refid="class_usd_geom_xformable_1a618c9b0ad5f39a8ebfc7f8e1b9319e5f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetOrientOp</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetPath</name></member>
      <member refid="class_usd_media_spatial_audio_1ad2fb61d34b3ced05c2b9663f9cb06d71" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetPlaybackModeAttr</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_imageable_1a5be4a4143e2b9f89f9bea44d27639a92" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetProxyPrimRel</name></member>
      <member refid="class_usd_geom_imageable_1acff531252fb2787a973eb028f2b04bdd" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetPurposeAttr</name></member>
      <member refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1a6d16bc5455344e131683d91e14ab62db" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1adbc1cc0684aad279a9f7954cce0ad083" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateXOp</name></member>
      <member refid="class_usd_geom_xformable_1a8b871424ffaff814ec4595b406198e12" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateXYZOp</name></member>
      <member refid="class_usd_geom_xformable_1aeabbd1a4b1e09254ddf700bfc1d83790" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateXZYOp</name></member>
      <member refid="class_usd_geom_xformable_1a9846b234308946bb9f91e1520f97de05" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateYOp</name></member>
      <member refid="class_usd_geom_xformable_1a803cfbc1fe2750bf9c5aadd83bd50a4c" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateYXZOp</name></member>
      <member refid="class_usd_geom_xformable_1aa244d99dd6e7f5abecc57f8ece422c93" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateYZXOp</name></member>
      <member refid="class_usd_geom_xformable_1a478e11c424f265543b333a00fb4268d0" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateZOp</name></member>
      <member refid="class_usd_geom_xformable_1a12311efeb62f64b39a02a1c001169ec6" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateZXYOp</name></member>
      <member refid="class_usd_geom_xformable_1a4ac8cec6efb64e0cbdd4b7a72f71c7f3" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetRotateZYXOp</name></member>
      <member refid="class_usd_geom_xformable_1a2029e0b90a0684a9a8c31e62aa98d317" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetScaleOp</name></member>
      <member refid="class_usd_media_spatial_audio_1a6c48ffea22dc6bed030ce80024158530" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_media_spatial_audio_1aa5eabcfeff1fe46669686dce4a2a068a" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetStartTimeAttr</name></member>
      <member refid="class_usd_geom_xformable_1a0384cb87a595fa56c29463ff4fe73015" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1ab855f0ea37793df1f22d2bce3d68caff" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTimeSamples</name></member>
      <member refid="class_usd_geom_xformable_1a64d8dabfbe974503daf5e8f2057424f7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a582133c4e08813d891690f58497d4add" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTimeSamplesInInterval</name></member>
      <member refid="class_usd_geom_xformable_1a0b425fbfdfe0f254add07f904ab231aa" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTransformOp</name></member>
      <member refid="class_usd_geom_xformable_1ab81f8a9eb062d2c726dbb8303188408c" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetTranslateOp</name></member>
      <member refid="class_usd_geom_imageable_1a943eddc325190bd67789407400f122b7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetVisibilityAttr</name></member>
      <member refid="class_usd_geom_xformable_1ab153aead880eebecaf2138706c4bdbf2" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetXformOp</name></member>
      <member refid="class_usd_geom_xformable_1af8533621f9f141dfd016711171433caf" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>GetXformOpOrderAttr</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_geom_xformable_1adb444654a8443f3413213cc526ee6c1a" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsTransformationAffectedByAttrNamed</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>IsTyped</name></member>
      <member refid="class_usd_geom_imageable_1a91eda805326fd94cc9910cfaeb4ac4a0" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>MakeInvisible</name></member>
      <member refid="class_usd_geom_xformable_1a97e5c56a739490600e4e7e37b3953a08" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>MakeMatrixXform</name></member>
      <member refid="class_usd_geom_imageable_1a3fd30c76b787e7e32180c1b454b971c7" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>MakeVisible</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>operator bool</name></member>
      <member refid="class_usd_media_spatial_audio_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>schemaKind</name></member>
      <member refid="class_usd_geom_imageable_1a6b808012a6a5bc9df34e794ff82bb6f0" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_imageable_1a8c0c8b7faa4056a7267c586b2ffc0bd8" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>SetProxyPrim</name></member>
      <member refid="class_usd_geom_xformable_1a99c4c768f58d6375edad8c9c7cb4bee2" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>SetResetXformStack</name></member>
      <member refid="class_usd_geom_xformable_1a4b6dd6e51eb84725c763d064c4f9f3ba" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>SetXformOpOrder</name></member>
      <member refid="class_usd_geom_xformable_1aca0c1f0eb2639bd9e126f5e6a16e856f" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_xformable_1a43e63cb240ddb36f550b3c86a22252c6" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>TransformMightBeTimeVarying</name></member>
      <member refid="class_usd_geom_imageable_1a00ea23bdac8d751c2b97dc8fe5cd7f73" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_imageable_1a912f3e5572536e0492914fe251446bc9" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1adf53f566e1d4a6ff2c4e6e90590b0510" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_geom_xformable_1a4f5550d15c8a43ef4ac30a063f96d0cd" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdGeomXformable</name></member>
      <member refid="class_usd_media_spatial_audio_1aae2505389b1bcd721e19dbbbb50e304c" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdMediaSpatialAudio</name></member>
      <member refid="class_usd_media_spatial_audio_1a877e7de16250ab62d2f9d7079a4b2117" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdMediaSpatialAudio</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_media_spatial_audio_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_typed_1a0eedaa009a86f3b1186f709bc78d0c09" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdTyped</name></member>
      <member refid="class_usd_typed_1a64de30966732c854c3c29616244e5250" prot="public" virt="non-virtual"><scope>UsdMediaSpatialAudio</scope><name>UsdTyped</name></member>
      <member refid="class_usd_geom_imageable_1acbd981c2779c70ec4c3fd5d8cc610925" prot="public" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>~UsdGeomImageable</name></member>
      <member refid="class_usd_geom_xformable_1a8c8f037aa67ff544aea009f0881ed530" prot="public" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>~UsdGeomXformable</name></member>
      <member refid="class_usd_media_spatial_audio_1aeea38c6ecc8fa2c6399c7d0e6351beab" prot="public" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>~UsdMediaSpatialAudio</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>~UsdSchemaBase</name></member>
      <member refid="class_usd_typed_1a558859985aa8647bc068d590b5d9e08f" prot="public" virt="virtual"><scope>UsdMediaSpatialAudio</scope><name>~UsdTyped</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
