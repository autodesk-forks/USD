<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_gf_plane" kind="class" language="C++" prot="public">
    <compoundname>GfPlane</compoundname>
    <includes refid="base_2gf_2plane_8h" local="no">plane.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gf_plane_1a06beba05fb3e08c970c57c8d64b77083" prot="private" static="no" mutable="no">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d _normal</definition>
        <argsstring></argsstring>
        <name>_normal</name>
        <briefdescription>
<para>The normal to the plane. Points in direction of half-space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="184" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gf_plane_1ad128928c202722691f9ddb5927c6ebcb" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double _distance</definition>
        <argsstring></argsstring>
        <name>_distance</name>
        <briefdescription>
<para>Distance from the plane to the origin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="187" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gf_plane_1a34f35a4a47f4e387b6cfcea62140f7c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfPlane</definition>
        <argsstring>()</argsstring>
        <name>GfPlane</name>
        <briefdescription>
<para>The default constructor leaves the plane parameters undefined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="58" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="58" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a0d7cf0ccf8ae7d30e5b4e4d715731ac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfPlane</definition>
        <argsstring>(const GfVec3d &amp;normal, double distanceToOrigin)</argsstring>
        <name>GfPlane</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distanceToOrigin</declname>
        </param>
        <briefdescription>
<para>This constructor sets this to the plane perpendicular to <computeroutput>normal</computeroutput> and at <computeroutput>distance</computeroutput> units from the origin. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed-in normal is normalized to unit length first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="64" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a8a5c3b440bbc68b238f0e42fea471c6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfPlane</definition>
        <argsstring>(const GfVec3d &amp;normal, const GfVec3d &amp;point)</argsstring>
        <name>GfPlane</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>This constructor sets this to the plane perpendicular to <computeroutput>normal</computeroutput> and that passes through <computeroutput>point</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed-in normal is normalized to unit length first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="71" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a6d9d035b02cc345306aae323d103637b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfPlane</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1, const GfVec3d &amp;p2)</argsstring>
        <name>GfPlane</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>This constructor sets this to the plane that contains the three given points. </para>
        </briefdescription>
        <detaileddescription>
<para>The normal is constructed from the cross product of (<computeroutput>p1</computeroutput> - <computeroutput>p0</computeroutput>) (<computeroutput>p2</computeroutput> - <computeroutput>p0</computeroutput>). Results are undefined if the points are collinear. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="79" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a388bac365456b6811bad0c8076ea831d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GfPlane</definition>
        <argsstring>(const GfVec4d &amp;eqn)</argsstring>
        <name>GfPlane</name>
        <param>
          <type>const <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &amp;</type>
          <declname>eqn</declname>
        </param>
        <briefdescription>
<para>This constructor creates a plane given by the equation <computeroutput>eqn</computeroutput>[0] * x + <computeroutput>eqn</computeroutput>[1] * y + <computeroutput>eqn</computeroutput>[2] * z + <computeroutput>eqn</computeroutput>[3] = 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="85" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a2f3ac2851493403f1fa671b5e4b50e5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Set</definition>
        <argsstring>(const GfVec3d &amp;normal, double distanceToOrigin)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>double</type>
          <declname>distanceToOrigin</declname>
        </param>
        <briefdescription>
<para>Sets this to the plane perpendicular to <computeroutput>normal</computeroutput> and at <computeroutput>distance</computeroutput> units from the origin. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed-in normal is normalized to unit length first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="92" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a8013bd091b44b90d07c0b178d5156f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Set</definition>
        <argsstring>(const GfVec3d &amp;normal, const GfVec3d &amp;point)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>This constructor sets this to the plane perpendicular to <computeroutput>normal</computeroutput> and that passes through <computeroutput>point</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The passed-in normal is normalized to unit length first. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a9d354cd2305733940d3c014cf6f826ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Set</definition>
        <argsstring>(const GfVec3d &amp;p0, const GfVec3d &amp;p1, const GfVec3d &amp;p2)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>This constructor sets this to the plane that contains the three given points. </para>
        </briefdescription>
        <detaileddescription>
<para>The normal is constructed from the cross product of (<computeroutput>p1</computeroutput> - <computeroutput>p0</computeroutput>) (<computeroutput>p2</computeroutput> - <computeroutput>p0</computeroutput>). Results are undefined if the points are collinear. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1ad76c741126b0d4639613c61d1ab8af89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API void</type>
        <definition>GF_API void Set</definition>
        <argsstring>(const GfVec4d &amp;eqn)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref> &amp;</type>
          <declname>eqn</declname>
        </param>
        <briefdescription>
<para>This method sets this to the plane given by the equation <computeroutput>eqn</computeroutput>[0] * x + <computeroutput>eqn</computeroutput>[1] * y + <computeroutput>eqn</computeroutput>[2] * z + <computeroutput>eqn</computeroutput>[3] = 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a48ceec5fd59b2c5a888d65581f065a77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
        <definition>const GfVec3d&amp; GetNormal</definition>
        <argsstring>() const</argsstring>
        <name>GetNormal</name>
        <briefdescription>
<para>Returns the unit-length normal vector of the plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="118" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1abf8f639f31fe9f710c8747fed936e16d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetDistanceFromOrigin</definition>
        <argsstring>() const</argsstring>
        <name>GetDistanceFromOrigin</name>
        <briefdescription>
<para>Returns the distance of the plane from the origin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="123" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a075664be65836455cca8c72397cc27f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_vec4d" kindref="compound">GfVec4d</ref></type>
        <definition>GF_API GfVec4d GetEquation</definition>
        <argsstring>() const</argsstring>
        <name>GetEquation</name>
        <briefdescription>
<para>Give the coefficients of the equation of the plane. </para>
        </briefdescription>
        <detaileddescription>
<para>Suitable to OpenGL calls to set the clipping plane. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a75f3d0ae3425e2c70835eca327738dde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const GfPlane &amp;p) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Component-wise equality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The normals and distances must match exactly for planes to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="134" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a048e6ab80290d0f6336448d46d32e2bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator !=</definition>
        <argsstring>(const GfPlane &amp;p) const</argsstring>
        <name>operator !=</name>
        <param>
          <type>const <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Component-wise inequality test. </para>
        </briefdescription>
        <detaileddescription>
<para>The normals and distances must match exactly for planes to be considered equal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="141" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1ac6e23bddef2fa951197c4ced72d8a625" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double GetDistance</definition>
        <argsstring>(const GfVec3d &amp;p) const</argsstring>
        <name>GetDistance</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns the distance of point <computeroutput>from</computeroutput> the plane. </para>
        </briefdescription>
        <detaileddescription>
<para>This distance will be positive if the point is on the side of the plane containing the normal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="148" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a94dc8f3c67aec4c6a07864a67776e0a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref></type>
        <definition>GfVec3d Project</definition>
        <argsstring>(const GfVec3d &amp;p) const</argsstring>
        <name>Project</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Return the projection of <computeroutput>p</computeroutput> onto the plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="153" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a5366453ba46172e550b96c82aa51ca55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API <ref refid="class_gf_plane" kindref="compound">GfPlane</ref> &amp;</type>
        <definition>GF_API GfPlane&amp; Transform</definition>
        <argsstring>(const GfMatrix4d &amp;matrix)</argsstring>
        <name>Transform</name>
        <param>
          <type>const <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transforms the plane by the given matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1ad3b828c8ae22fbcf72a7849a1fce0dc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Reorient</definition>
        <argsstring>(const GfVec3d &amp;p)</argsstring>
        <name>Reorient</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Flip the plane normal (if necessary) so that <computeroutput>p</computeroutput> is in the positive halfspace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="163" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1adba7c4271593b52f6f37e6d78cd368b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>GF_API bool</type>
        <definition>GF_API bool IntersectsPositiveHalfSpace</definition>
        <argsstring>(const GfRange3d &amp;box) const</argsstring>
        <name>IntersectsPositiveHalfSpace</name>
        <param>
          <type>const <ref refid="class_gf_range3d" kindref="compound">GfRange3d</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the given aligned bounding box is at least partially on the positive side (the one the normal points into) of the plane. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_gf_plane_1a2fba543502dc41e8888b47c4cb6e93ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IntersectsPositiveHalfSpace</definition>
        <argsstring>(const GfVec3d &amp;pt) const</argsstring>
        <name>IntersectsPositiveHalfSpace</name>
        <param>
          <type>const <ref refid="class_gf_vec3d" kindref="compound">GfVec3d</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Returns true if the given point is on the plane or within its positive half space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/gf/plane.h" line="178" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="178" bodyend="180"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic type: 3-dimensional plane. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a three-dimensional plane as a normal vector and the distance of the plane from the origin, measured along the normal. The plane can also be used to represent a half-space: the side of the plane in the direction of the normal. </para>
    </detaileddescription>
    <location file="pxr/base/gf/plane.h" line="54" column="1" bodyfile="pxr/base/gf/plane.h" bodystart="53" bodyend="188"/>
    <listofallmembers>
      <member refid="class_gf_plane_1ad128928c202722691f9ddb5927c6ebcb" prot="private" virt="non-virtual"><scope>GfPlane</scope><name>_distance</name></member>
      <member refid="class_gf_plane_1a06beba05fb3e08c970c57c8d64b77083" prot="private" virt="non-virtual"><scope>GfPlane</scope><name>_normal</name></member>
      <member refid="class_gf_plane_1ac6e23bddef2fa951197c4ced72d8a625" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GetDistance</name></member>
      <member refid="class_gf_plane_1abf8f639f31fe9f710c8747fed936e16d" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GetDistanceFromOrigin</name></member>
      <member refid="class_gf_plane_1a075664be65836455cca8c72397cc27f8" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GetEquation</name></member>
      <member refid="class_gf_plane_1a48ceec5fd59b2c5a888d65581f065a77" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GetNormal</name></member>
      <member refid="class_gf_plane_1a34f35a4a47f4e387b6cfcea62140f7c4" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GfPlane</name></member>
      <member refid="class_gf_plane_1a0d7cf0ccf8ae7d30e5b4e4d715731ac9" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GfPlane</name></member>
      <member refid="class_gf_plane_1a8a5c3b440bbc68b238f0e42fea471c6b" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GfPlane</name></member>
      <member refid="class_gf_plane_1a6d9d035b02cc345306aae323d103637b" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GfPlane</name></member>
      <member refid="class_gf_plane_1a388bac365456b6811bad0c8076ea831d" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>GfPlane</name></member>
      <member refid="class_gf_plane_1adba7c4271593b52f6f37e6d78cd368b0" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>IntersectsPositiveHalfSpace</name></member>
      <member refid="class_gf_plane_1a2fba543502dc41e8888b47c4cb6e93ef" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>IntersectsPositiveHalfSpace</name></member>
      <member refid="class_gf_plane_1a048e6ab80290d0f6336448d46d32e2bb" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>operator !=</name></member>
      <member refid="class_gf_plane_1a75f3d0ae3425e2c70835eca327738dde" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>operator==</name></member>
      <member refid="class_gf_plane_1a94dc8f3c67aec4c6a07864a67776e0a7" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Project</name></member>
      <member refid="class_gf_plane_1ad3b828c8ae22fbcf72a7849a1fce0dc6" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Reorient</name></member>
      <member refid="class_gf_plane_1a2f3ac2851493403f1fa671b5e4b50e5d" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Set</name></member>
      <member refid="class_gf_plane_1a8013bd091b44b90d07c0b178d5156f81" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Set</name></member>
      <member refid="class_gf_plane_1a9d354cd2305733940d3c014cf6f826ec" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Set</name></member>
      <member refid="class_gf_plane_1ad76c741126b0d4639613c61d1ab8af89" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Set</name></member>
      <member refid="class_gf_plane_1a5366453ba46172e550b96c82aa51ca55" prot="public" virt="non-virtual"><scope>GfPlane</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
