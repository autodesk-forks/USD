<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_children_view" kind="class" language="C++" prot="public">
    <compoundname>SdfChildrenView</compoundname>
    <includes refid="children_view_8h" local="no">childrenView.h</includes>
    <innerclass refid="class_sdf_children_view_1_1___inner_iterator" prot="private">SdfChildrenView::_InnerIterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename _ChildPolicy</type>
      </param>
      <param>
        <type>typename _Predicate</type>
        <defval><ref refid="class_sdf_children_view_trivial_predicate" kindref="compound">SdfChildrenViewTrivialPredicate</ref>&lt;                  typename _ChildPolicy::ValueType&gt;</defval>
      </param>
      <param>
        <type>typename _Adapter</type>
        <defval><ref refid="class_sdf_children_view_trivial_adapter" kindref="compound">SdfChildrenViewTrivialAdapter</ref>&lt;                  typename _ChildPolicy::ValueType&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_sdf_children_view_1a4c4b722852771a5d1704403827340f18" prot="public" static="no">
        <type><ref refid="class_sdf_children_view" kindref="compound">SdfChildrenView</ref>&lt; _ChildPolicy, _Predicate, _Adapter &gt;</type>
        <definition>typedef SdfChildrenView&lt;_ChildPolicy, _Predicate, _Adapter&gt; This</definition>
        <argsstring></argsstring>
        <name>This</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="224" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a99ff56220661186e881dfff6ec047237" prot="public" static="no">
        <type>_Adapter</type>
        <definition>typedef _Adapter Adapter</definition>
        <argsstring></argsstring>
        <name>Adapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="226" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a162ae849ff576183d18155ab4d835c4a" prot="public" static="no">
        <type>_Predicate</type>
        <definition>typedef _Predicate Predicate</definition>
        <argsstring></argsstring>
        <name>Predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="227" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1af4fedb9bd859937436c3cae8fc0d8501" prot="public" static="no">
        <type>_ChildPolicy</type>
        <definition>typedef _ChildPolicy ChildPolicy</definition>
        <argsstring></argsstring>
        <name>ChildPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="228" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a65eb80d1e8a50b268d29dc35f3e1f008" prot="public" static="no">
        <type>ChildPolicy::KeyPolicy</type>
        <definition>typedef ChildPolicy::KeyPolicy KeyPolicy</definition>
        <argsstring></argsstring>
        <name>KeyPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="229" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1ae0c45cbade9bfe176abe23240ad56686" prot="public" static="no">
        <type>Sdf_Children&lt; ChildPolicy &gt;</type>
        <definition>typedef Sdf_Children&lt;ChildPolicy&gt; ChildrenType</definition>
        <argsstring></argsstring>
        <name>ChildrenType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="230" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1aa5772bf3f7cbc34ce782e8794c08074b" prot="public" static="no">
        <type>ChildPolicy::KeyType</type>
        <definition>typedef ChildPolicy::KeyType key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="232" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1ad3e1dc35979387ce7f348b3a2971993c" prot="public" static="no">
        <type>Adapter::PublicType</type>
        <definition>typedef Adapter::PublicType value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="233" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1aa1651631b9b5f5b34ba810e0d0d41b1b" prot="public" static="no">
        <type>Sdf_ChildrenViewTraits&lt; <ref refid="class_sdf_children_view" kindref="compound">This</ref>, _InnerIterator, Predicate &gt;</type>
        <definition>typedef Sdf_ChildrenViewTraits&lt;This, _InnerIterator, Predicate&gt; _Traits</definition>
        <argsstring></argsstring>
        <name>_Traits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="381" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a548eb2a626510a40a192b4bcd0955869" prot="public" static="no">
        <type>_Traits::const_iterator</type>
        <definition>typedef _Traits::const_iterator const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="382" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a170e1cba7ac9b55e4a83a5500cfa4cc4" prot="public" static="no">
        <type>Tf_ProxyReferenceReverseIterator&lt; const_iterator &gt;</type>
        <definition>typedef Tf_ProxyReferenceReverseIterator&lt;const_iterator&gt; const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="383" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1a49b489a408a211a90e766329c0732d7b" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="384" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_sdf_children_view_1acf947bbb9e09f863cc3572ff8550b183" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>typedef ptrdiff_t difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="385" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_children_view_1a271ac931ba26a70986274e9c9f89b557" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class P</type>
          </param>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class SdfChildrenView</definition>
        <argsstring></argsstring>
        <name>SdfChildrenView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="634" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_children_view_1aae3f8772e8438c52878891751ff01aec" prot="private" static="no" mutable="no">
        <type>ChildrenType</type>
        <definition>ChildrenType _children</definition>
        <argsstring></argsstring>
        <name>_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="635" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_children_view_1af0ecc66b2a52c9eeb0a24fe461fc6371" prot="private" static="no" mutable="no">
        <type>Predicate</type>
        <definition>Predicate _predicate</definition>
        <argsstring></argsstring>
        <name>_predicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="636" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_children_view_1ae6110e498a20faa9f97ee6bb82630aa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfChildrenView</definition>
        <argsstring>()</argsstring>
        <name>SdfChildrenView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="387" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1afd242bab53746c983ac07d568f61f1d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfChildrenView</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfPath &amp;path, const TfToken &amp;childrenKey, const KeyPolicy &amp;keyPolicy=KeyPolicy())</argsstring>
        <name>SdfChildrenView</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>childrenKey</declname>
        </param>
        <param>
          <type>const KeyPolicy &amp;</type>
          <declname>keyPolicy</declname>
          <defval>KeyPolicy()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="391" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="391" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a2c7bae5809182fcf25f7a46d42c38464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfChildrenView</definition>
        <argsstring>(const SdfLayerHandle &amp;layer, const SdfPath &amp;path, const TfToken &amp;childrenKey, const Predicate &amp;predicate, const KeyPolicy &amp;keyPolicy=KeyPolicy())</argsstring>
        <name>SdfChildrenView</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>childrenKey</declname>
        </param>
        <param>
          <type>const Predicate &amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>const KeyPolicy &amp;</type>
          <declname>keyPolicy</declname>
          <defval>KeyPolicy()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="398" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="398" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ac496921f65f95a3702ca124493fc8e1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SdfChildrenView</definition>
        <argsstring>(const SdfChildrenView &amp;other)</argsstring>
        <name>SdfChildrenView</name>
        <param>
          <type>const <ref refid="class_sdf_children_view" kindref="compound">SdfChildrenView</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="407" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a12b59e552aa9d7a4f4f5ed96104b9447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OtherAdapter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SdfChildrenView</definition>
        <argsstring>(const SdfChildrenView&lt; ChildPolicy, Predicate, OtherAdapter &gt; &amp;other)</argsstring>
        <name>SdfChildrenView</name>
        <param>
          <type>const <ref refid="class_sdf_children_view" kindref="compound">SdfChildrenView</ref>&lt; ChildPolicy, Predicate, OtherAdapter &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="414" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a95829b1e11a61fa6a20734750ab3689f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~SdfChildrenView</definition>
        <argsstring>()</argsstring>
        <name>~SdfChildrenView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="421" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="421" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a8fc1f2806d1c8cfdaeb99e4220e1674b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_children_view" kindref="compound">SdfChildrenView</ref> &amp;</type>
        <definition>SdfChildrenView&amp; operator=</definition>
        <argsstring>(const SdfChildrenView &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_children_view" kindref="compound">SdfChildrenView</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="425" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="425" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a29305669b60ca1680752e2fc3592ba99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an const_iterator pointing to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="433" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an const_iterator pointing to the end of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="439" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="439" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1af086cceac199bd735c7a97c2a8d7ed21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns an const_reverse_iterator pointing to the beginning of the reversed vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="446" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="446" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a07da1fdc890b6949f1a20a1961c6fc44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns an const_reverse_iterator pointing to the end of the reversed vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="452" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="452" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a60304b65bf89363bcc3165d3cde67f86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the size of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="457" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the vector is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="462" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a9df75c05f96d7fcd44d05341fff6cd66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type operator[]</definition>
        <argsstring>(size_type n) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the <computeroutput>n&apos;th</computeroutput> element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="467" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="467" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a1b61e6b4e91c6ddb89443451857ef6b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>Returns the first element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="474" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="474" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a7427a42d55bb5ae2e3290958556913b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>Returns the last element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="479" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="479" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a6728995e005d56c47ed54154c755c46e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator find</definition>
        <argsstring>(const key_type &amp;x) const</argsstring>
        <name>find</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Finds the element with key <computeroutput>x</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="484" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="484" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ae41c3c2a62039944a1f0e66ef3a4945a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator find</definition>
        <argsstring>(const value_type &amp;x) const</argsstring>
        <name>find</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Finds element <computeroutput>x</computeroutput>, if present in this view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="497" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a17357b16887e9ce4734d7808bc4c6f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>key_type</type>
        <definition>key_type key</definition>
        <argsstring>(const const_iterator &amp;x) const</argsstring>
        <name>key</name>
        <param>
          <type>const const_iterator &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the key for an element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="503" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="503" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a9e1c955c384c23ca21ad164805b9e616" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>key_type</type>
        <definition>key_type key</definition>
        <argsstring>(const value_type &amp;x) const</argsstring>
        <name>key</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the key for a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="508" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a9d68924366f85a9b94c7ee440cba841b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; value_type &gt;</type>
        <definition>std::vector&lt;value_type&gt; values</definition>
        <argsstring>() const</argsstring>
        <name>values</name>
        <briefdescription>
<para>Returns the elements, in order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="513" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="513" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ab16d33411db6646fd0fc32ea10162a3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V values_as</definition>
        <argsstring>() const</argsstring>
        <name>values_as</name>
        <briefdescription>
<para>Returns the elements, in order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="519" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="519" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1abe1d29a6a38119aba83b1cf3656b322d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; key_type &gt;</type>
        <definition>std::vector&lt;key_type&gt; keys</definition>
        <argsstring>() const</argsstring>
        <name>keys</name>
        <briefdescription>
<para>Returns the keys for all elements, in order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="526" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="526" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a76614602c143a4152391ab395d1304b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>V</type>
        <definition>V keys_as</definition>
        <argsstring>() const</argsstring>
        <name>keys_as</name>
        <briefdescription>
<para>Returns the keys for all elements, in order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="537" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="537" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a821017b621655184c69481ad4d5e989a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Dict</type>
          </param>
        </templateparamlist>
        <type>Dict</type>
        <definition>Dict items_as</definition>
        <argsstring>() const</argsstring>
        <name>items_as</name>
        <briefdescription>
<para>Returns the elements as a dictionary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="544" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="544" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a139d764c3c3861b004690b88ec8aa60e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool has</definition>
        <argsstring>(const key_type &amp;x) const</argsstring>
        <name>has</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns true if an element with key <computeroutput>x</computeroutput> is in the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="553" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="553" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1aba0088ba448fd5697692532c2c3b133e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool has</definition>
        <argsstring>(const value_type &amp;x) const</argsstring>
        <name>has</name>
        <param>
          <type>const value_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns true if an element with the same key as <computeroutput>x</computeroutput> is in the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="559" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="559" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ae0878c76f9b6aa8e491c4a6befc44090" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type count</definition>
        <argsstring>(const key_type &amp;x) const</argsstring>
        <name>count</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the number of elements with key <computeroutput>x</computeroutput> in the container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="564" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="564" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a3571085d3801c86e8330f405c4a2dbd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type get</definition>
        <argsstring>(const key_type &amp;x) const</argsstring>
        <name>get</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the element with key <computeroutput>x</computeroutput> or a default constructed value if no such element exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="570" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="570" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a217d2f1430376f52ba7158ea3a2f27ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type get</definition>
        <argsstring>(const key_type &amp;x, const value_type &amp;fallback) const</argsstring>
        <name>get</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const value_type &amp;</type>
          <declname>fallback</declname>
        </param>
        <briefdescription>
<para>Returns the element with key <computeroutput>x</computeroutput> or the fallback if no such element exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="580" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="580" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a58c4a6d5b6a7647886c6c33aab9ee610" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type operator[]</definition>
        <argsstring>(const key_type &amp;x) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const key_type &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the element with key <computeroutput>x</computeroutput> or a default constructed value if no such element exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="590" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="590" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ac3e716c8a3f4758122d2d22a1eb2aa7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const This &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_sdf_children_view" kindref="compound">This</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares children for equality. </para>
        </briefdescription>
        <detaileddescription>
<para>Children are equal if the list edits are identical and the keys contain the same elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="596" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="596" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1accd7bceb186167a8fdd534e0c241fcde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const This &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_sdf_children_view" kindref="compound">This</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares children for inequality. </para>
        </briefdescription>
        <detaileddescription>
<para>Children are not equal if list edits are not identical or the keys don&apos;t contain the same elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="603" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="603" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValid</definition>
        <argsstring>() const</argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="608" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="608" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a6c7ad124a1dc5449c1a6d0cacd73951b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ChildrenType &amp;</type>
        <definition>ChildrenType&amp; GetChildren</definition>
        <argsstring>()</argsstring>
        <name>GetChildren</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="613" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="613" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a486fbaeb9ed72b948c83d3de2d19c665" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Predicate &amp;</type>
        <definition>const Predicate&amp; GetPredicate</definition>
        <argsstring>() const</argsstring>
        <name>GetPredicate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="618" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="618" bodyend="620"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_children_view_1a5ac30bab950c26f4ddbb9523646ea42d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>value_type _Get</definition>
        <argsstring>(size_type index) const</argsstring>
        <name>_Get</name>
        <param>
          <type>size_type</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="624" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_children_view_1a845e1bdbfe39d3cafc49cb65aac76565" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetSize</definition>
        <argsstring>() const</argsstring>
        <name>_GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/childrenView.h" line="629" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="629" bodyend="631"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides a view onto an object&apos;s children. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput>_ChildPolicy</computeroutput> dictates the type of children being viewed by this object. This policy defines the key type by which children are referenced (e.g. a <ref refid="class_tf_token" kindref="compound">TfToken</ref>, or an <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>) and the value type of the children objects.</para>
<para>The <computeroutput>_Predicate</computeroutput> takes a value type argument and returns <computeroutput>true</computeroutput> if the object should be included in the view and <computeroutput>false</computeroutput> otherwise.</para>
<para>The <computeroutput>_Adapter</computeroutput> allows the view to present the children objects as a different type. The _Adapter class must provide functions to convert the children object type defined by <computeroutput>_ChildPolicy</computeroutput> to the desired public type and vice-versa. See <ref refid="class_sdf_children_view_trivial_adapter" kindref="compound">SdfChildrenViewTrivialAdapter</ref> for an example. By default, the view presents children objects as the value type defined in <computeroutput>_ChildPolicy</computeroutput>.</para>
<para>Note that all methods are const, i.e. the children cannot be changed through a view. </para>
    </detaileddescription>
    <location file="pxr/usd/sdf/childrenView.h" line="222" column="1" bodyfile="pxr/usd/sdf/childrenView.h" bodystart="222" bodyend="637"/>
    <listofallmembers>
      <member refid="class_sdf_children_view_1aae3f8772e8438c52878891751ff01aec" prot="private" virt="non-virtual"><scope>SdfChildrenView</scope><name>_children</name></member>
      <member refid="class_sdf_children_view_1a5ac30bab950c26f4ddbb9523646ea42d" prot="private" virt="non-virtual"><scope>SdfChildrenView</scope><name>_Get</name></member>
      <member refid="class_sdf_children_view_1a845e1bdbfe39d3cafc49cb65aac76565" prot="private" virt="non-virtual"><scope>SdfChildrenView</scope><name>_GetSize</name></member>
      <member refid="class_sdf_children_view_1af0ecc66b2a52c9eeb0a24fe461fc6371" prot="private" virt="non-virtual"><scope>SdfChildrenView</scope><name>_predicate</name></member>
      <member refid="class_sdf_children_view_1aa1651631b9b5f5b34ba810e0d0d41b1b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>_Traits</name></member>
      <member refid="class_sdf_children_view_1a99ff56220661186e881dfff6ec047237" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>Adapter</name></member>
      <member refid="class_sdf_children_view_1a7427a42d55bb5ae2e3290958556913b6" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>back</name></member>
      <member refid="class_sdf_children_view_1a29305669b60ca1680752e2fc3592ba99" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>begin</name></member>
      <member refid="class_sdf_children_view_1af4fedb9bd859937436c3cae8fc0d8501" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>ChildPolicy</name></member>
      <member refid="class_sdf_children_view_1ae0c45cbade9bfe176abe23240ad56686" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>ChildrenType</name></member>
      <member refid="class_sdf_children_view_1a548eb2a626510a40a192b4bcd0955869" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>const_iterator</name></member>
      <member refid="class_sdf_children_view_1a170e1cba7ac9b55e4a83a5500cfa4cc4" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>const_reverse_iterator</name></member>
      <member refid="class_sdf_children_view_1ae0878c76f9b6aa8e491c4a6befc44090" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>count</name></member>
      <member refid="class_sdf_children_view_1acf947bbb9e09f863cc3572ff8550b183" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>difference_type</name></member>
      <member refid="class_sdf_children_view_1a644718bb2fb240de962dc3c9a1fdf0dc" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>empty</name></member>
      <member refid="class_sdf_children_view_1accf9a4bd0c34d4a5f6a7dab66ea10cdc" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>end</name></member>
      <member refid="class_sdf_children_view_1a6728995e005d56c47ed54154c755c46e" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>find</name></member>
      <member refid="class_sdf_children_view_1ae41c3c2a62039944a1f0e66ef3a4945a" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>find</name></member>
      <member refid="class_sdf_children_view_1a1b61e6b4e91c6ddb89443451857ef6b5" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>front</name></member>
      <member refid="class_sdf_children_view_1a3571085d3801c86e8330f405c4a2dbd4" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>get</name></member>
      <member refid="class_sdf_children_view_1a217d2f1430376f52ba7158ea3a2f27ec" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>get</name></member>
      <member refid="class_sdf_children_view_1a6c7ad124a1dc5449c1a6d0cacd73951b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>GetChildren</name></member>
      <member refid="class_sdf_children_view_1a486fbaeb9ed72b948c83d3de2d19c665" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>GetPredicate</name></member>
      <member refid="class_sdf_children_view_1a139d764c3c3861b004690b88ec8aa60e" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>has</name></member>
      <member refid="class_sdf_children_view_1aba0088ba448fd5697692532c2c3b133e" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>has</name></member>
      <member refid="class_sdf_children_view_1ac532c4b500b1a85ea22217f2c65a70ed" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>IsValid</name></member>
      <member refid="class_sdf_children_view_1a821017b621655184c69481ad4d5e989a" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>items_as</name></member>
      <member refid="class_sdf_children_view_1a17357b16887e9ce4734d7808bc4c6f61" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>key</name></member>
      <member refid="class_sdf_children_view_1a9e1c955c384c23ca21ad164805b9e616" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>key</name></member>
      <member refid="class_sdf_children_view_1aa5772bf3f7cbc34ce782e8794c08074b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>key_type</name></member>
      <member refid="class_sdf_children_view_1a65eb80d1e8a50b268d29dc35f3e1f008" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>KeyPolicy</name></member>
      <member refid="class_sdf_children_view_1abe1d29a6a38119aba83b1cf3656b322d" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>keys</name></member>
      <member refid="class_sdf_children_view_1a76614602c143a4152391ab395d1304b0" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>keys_as</name></member>
      <member refid="class_sdf_children_view_1accd7bceb186167a8fdd534e0c241fcde" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>operator!=</name></member>
      <member refid="class_sdf_children_view_1a8fc1f2806d1c8cfdaeb99e4220e1674b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>operator=</name></member>
      <member refid="class_sdf_children_view_1ac3e716c8a3f4758122d2d22a1eb2aa7a" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>operator==</name></member>
      <member refid="class_sdf_children_view_1a9df75c05f96d7fcd44d05341fff6cd66" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>operator[]</name></member>
      <member refid="class_sdf_children_view_1a58c4a6d5b6a7647886c6c33aab9ee610" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>operator[]</name></member>
      <member refid="class_sdf_children_view_1a162ae849ff576183d18155ab4d835c4a" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>Predicate</name></member>
      <member refid="class_sdf_children_view_1af086cceac199bd735c7a97c2a8d7ed21" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>rbegin</name></member>
      <member refid="class_sdf_children_view_1a07da1fdc890b6949f1a20a1961c6fc44" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>rend</name></member>
      <member refid="class_sdf_children_view_1a271ac931ba26a70986274e9c9f89b557" prot="private" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1ae6110e498a20faa9f97ee6bb82630aa1" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1afd242bab53746c983ac07d568f61f1d4" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1a2c7bae5809182fcf25f7a46d42c38464" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1ac496921f65f95a3702ca124493fc8e1d" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1a12b59e552aa9d7a4f4f5ed96104b9447" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>SdfChildrenView</name></member>
      <member refid="class_sdf_children_view_1a60304b65bf89363bcc3165d3cde67f86" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>size</name></member>
      <member refid="class_sdf_children_view_1a49b489a408a211a90e766329c0732d7b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>size_type</name></member>
      <member refid="class_sdf_children_view_1a4c4b722852771a5d1704403827340f18" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>This</name></member>
      <member refid="class_sdf_children_view_1ad3e1dc35979387ce7f348b3a2971993c" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>value_type</name></member>
      <member refid="class_sdf_children_view_1a9d68924366f85a9b94c7ee440cba841b" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>values</name></member>
      <member refid="class_sdf_children_view_1ab16d33411db6646fd0fc32ea10162a3c" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>values_as</name></member>
      <member refid="class_sdf_children_view_1a95829b1e11a61fa6a20734750ab3689f" prot="public" virt="non-virtual"><scope>SdfChildrenView</scope><name>~SdfChildrenView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
