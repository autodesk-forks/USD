<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_sdf_layer" kind="class" language="C++" prot="public">
    <compoundname>SdfLayer</compoundname>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <includes refid="layer_8h" local="no">layer.h</includes>
    <innerclass refid="class_sdf_layer_1_1_detached_layer_rules" prot="public">SdfLayer::DetachedLayerRules</innerclass>
      <sectiondef kind="user-defined">
      <header>Primary API</header>
      <memberdef kind="typedef" id="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" prot="public" static="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>typedef std::map&lt;std::string, std::string&gt; FileFormatArguments</definition>
        <argsstring></argsstring>
        <name>FileFormatArguments</name>
        <briefdescription>
<para>Type for specifying additional file format-specific arguments to layer API. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="124" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>SDF_API const SdfSchemaBase&amp; GetSchema</definition>
        <argsstring>() const</argsstring>
        <name>GetSchema</name>
        <briefdescription>
<para>Returns the schema this layer adheres to. </para>
        </briefdescription>
        <detaileddescription>
<para>This schema provides details about the scene description that may be authored in this layer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7599432247745341dbd6b9603098633f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const SdfFileFormatConstPtr &amp;</type>
        <definition>SDF_API const SdfFileFormatConstPtr&amp; GetFileFormat</definition>
        <argsstring>() const</argsstring>
        <name>GetFileFormat</name>
        <briefdescription>
<para>Returns the file format used by this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0193260dcb2b4dec6be9d39e4daefea7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
        <definition>SDF_API const FileFormatArguments&amp; GetFileFormatArguments</definition>
        <argsstring>() const</argsstring>
        <name>GetFileFormatArguments</name>
        <briefdescription>
<para>Returns the file format-specific arguments used during the construction of this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3000fa4a19a5f6c5644e65d518058114" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfDataRefPtr</type>
        <definition>SDF_API SdfDataRefPtr GetMetadata</definition>
        <argsstring>() const</argsstring>
        <name>GetMetadata</name>
        <briefdescription>
<para>Returns the data from the absolute root path of this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9fa709386dae89b3b291db62c9fc725a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_layer_hints" kindref="compound">SdfLayerHints</ref></type>
        <definition>SDF_API SdfLayerHints GetHints</definition>
        <argsstring>() const</argsstring>
        <name>GetHints</name>
        <briefdescription>
<para>Return hints about the layer&apos;s current contents. </para>
        </briefdescription>
        <detaileddescription>
<para>Any operation that dirties the layer will invalidate all hints. <simplesect kind="see"><para><ref refid="class_sdf_layer_hints" kindref="compound">SdfLayerHints</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3358bd17e69a5ac3591d1f1925f3d093" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Returns whether this layer has no significant data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a174f5ef5b7240ba887ea486d72f266b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool StreamsData</definition>
        <argsstring>() const</argsstring>
        <name>StreamsData</name>
        <briefdescription>
<para>Returns true if this layer streams data from its serialized data store on demand, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Layers with streaming data are treated differently to avoid pulling in data unnecessarily. For example, reloading a streaming layer will not perform fine-grained change notification, since doing so would require the full contents of the layer to be loaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a742d86d8014873ce73a0c74e29f03c22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsDetached</definition>
        <argsstring>() const</argsstring>
        <name>IsDetached</name>
        <briefdescription>
<para>Returns true if this layer is detached from its serialized data store, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>Detached layers are isolated from external changes to their serialized data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae6740e45560005d4e44870800e85eb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void TransferContent</definition>
        <argsstring>(const SdfLayerHandle &amp;layer)</argsstring>
        <name>TransferContent</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
<para>Copies the content of the given layer into this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Source layer is unmodified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8c97c0184434a6e0a5a5a849587f19df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsAnonymous</definition>
        <argsstring>() const</argsstring>
        <name>IsAnonymous</name>
        <briefdescription>
<para>Returns true if this layer is an anonymous layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aad57cd44403a4f95a2bb6c730fa1b0f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr CreateNew</definition>
        <argsstring>(const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Creates a new empty layer with the given identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Additional arguments may be supplied via the <computeroutput>args</computeroutput> parameter. These arguments may control behavior specific to the layer&apos;s file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a55579835f5dd236a0e49c6e5a7e65593" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr CreateNew</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>CreateNew</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Creates a new empty layer with the given identifier for a given file format class. </para>
        </briefdescription>
        <detaileddescription>
<para>This function has the same behavior as the other CreateNew function, but uses the explicitly-specified <computeroutput>fileFormat</computeroutput> instead of attempting to discern the format from <computeroutput>identifier</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afb9dfac8c0da8fe2a0f8351c6c9ca16b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr New</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>New</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Creates a new empty layer with the given identifier for a given file format class. </para>
        </briefdescription>
        <detaileddescription>
<para>The new layer will not be dirty and will not be saved.</para>
<para>Additional arguments may be supplied via the <computeroutput>args</computeroutput> parameter. These arguments may control behavior specific to the layer&apos;s file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acc4e19f5c2bf0bab57804acee65ebb78" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerHandle</type>
        <definition>static SDF_API SdfLayerHandle Find</definition>
        <argsstring>(const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>Find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Return an existing layer with the given <computeroutput>identifier</computeroutput> and <computeroutput>args</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If the layer can&apos;t be found, an error is posted and a null layer is returned.</para>
<para>Arguments in <computeroutput>args</computeroutput> will override any arguments specified in <computeroutput>identifier</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a2dc2998391cdbbf67be2f82f5ddf38f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerHandle</type>
        <definition>static SDF_API SdfLayerHandle FindRelativeToLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;anchor, const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>FindRelativeToLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Return an existing layer with the given <computeroutput>identifier</computeroutput> and <computeroutput>args</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The given <computeroutput>identifier</computeroutput> will be resolved relative to the <computeroutput>anchor</computeroutput> layer. If the layer can&apos;t be found, an error is posted and a null layer is returned.</para>
<para>If the <computeroutput>anchor</computeroutput> layer is invalid, a coding error is raised, and a null handle is returned.</para>
<para>Arguments in <computeroutput>args</computeroutput> will override any arguments specified in <computeroutput>identifier</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa01062bf4dde3f28c1fc617a1acaf35e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr FindOrOpen</definition>
        <argsstring>(const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>FindOrOpen</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Return an existing layer with the given <computeroutput>identifier</computeroutput> and <computeroutput>args</computeroutput>, or else load it. </para>
        </briefdescription>
        <detaileddescription>
<para>If the layer can&apos;t be found or loaded, an error is posted and a null layer is returned.</para>
<para>Arguments in <computeroutput>args</computeroutput> will override any arguments specified in <computeroutput>identifier</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae141c9e12217822129795473a0758cf2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr FindOrOpenRelativeToLayer</definition>
        <argsstring>(const SdfLayerHandle &amp;anchor, const std::string &amp;identifier, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>FindOrOpenRelativeToLayer</name>
        <param>
          <type>const SdfLayerHandle &amp;</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Return an existing layer with the given <computeroutput>identifier</computeroutput> and <computeroutput>args</computeroutput>, or else load it. </para>
        </briefdescription>
        <detaileddescription>
<para>The given <computeroutput>identifier</computeroutput> will be resolved relative to the <computeroutput>anchor</computeroutput> layer. If the layer can&apos;t be found or loaded, an error is posted and a null layer is returned.</para>
<para>If the <computeroutput>anchor</computeroutput> layer is invalid, issues a coding error and returns a null handle.</para>
<para>Arguments in <computeroutput>args</computeroutput> will override any arguments specified in <computeroutput>identifier</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a41a153db3ee9a29471e18d41186d5f7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr OpenAsAnonymous</definition>
        <argsstring>(const std::string &amp;layerPath, bool metadataOnly=false, const std::string &amp;tag=std::string())</argsstring>
        <name>OpenAsAnonymous</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Load the given layer from disk as a new anonymous layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If the layer can&apos;t be found or loaded, an error is posted and a null layer is returned.</para>
<para>The anonymous layer does not retain any knowledge of the backing file on the filesystem.</para>
<para><computeroutput>metadataOnly</computeroutput> is a flag that asks for only the layer metadata to be read in, which can be much faster if that is all that is required. Note that this is just a hint: some FileFormat readers may disregard this flag and still fully populate the layer contents.</para>
<para>An optional <computeroutput>tag</computeroutput> may be specified. See CreateAnonymous for details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a44434498ce08818456337473fcebb4f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerHandleSet</type>
        <definition>static SDF_API SdfLayerHandleSet GetLoadedLayers</definition>
        <argsstring>()</argsstring>
        <name>GetLoadedLayers</name>
        <briefdescription>
<para>Returns handles for all layers currently held by the layer registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a863d3cfd8e7c4bbee08f067978e9738e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr CreateAnonymous</definition>
        <argsstring>(const std::string &amp;tag=std::string(), const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>CreateAnonymous</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Creates a new <emphasis>anonymous</emphasis> layer with an optional <computeroutput>tag</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>An anonymous layer is a layer with a system assigned identifier, that cannot be saved to disk via <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">Save()</ref>. Anonymous layers have an identifier, but no real path or other asset information fields.</para>
<para>Anonymous layers may be tagged, which can be done to aid debugging subsystems that make use of anonymous layers. The tag becomes the display name of an anonymous layer, and is also included in the generated identifier. Untagged anonymous layers have an empty display name.</para>
<para>Additional arguments may be supplied via the <computeroutput>args</computeroutput> parameter. These arguments may control behavior specific to the layer&apos;s file format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1d73898041821cc882754eb7575da8d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SDF_API SdfLayerRefPtr CreateAnonymous</definition>
        <argsstring>(const std::string &amp;tag, const SdfFileFormatConstPtr &amp;format, const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>CreateAnonymous</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Create an anonymous layer with a specific <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3e4b0c1c685a16d67dd0c894fdff6e16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool IsAnonymousLayerIdentifier</definition>
        <argsstring>(const std::string &amp;identifier)</argsstring>
        <name>IsAnonymousLayerIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Returns true if the <computeroutput>identifier</computeroutput> is an anonymous layer unique identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae998e77457a609421a8f0314ab532135" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>static SDF_API std::string GetDisplayNameFromIdentifier</definition>
        <argsstring>(const std::string &amp;identifier)</argsstring>
        <name>GetDisplayNameFromIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Returns the display name for the given <computeroutput>identifier</computeroutput>, using the same rules as GetDisplayName. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="317" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>File I/O</header>
      <memberdef kind="function" id="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Save</definition>
        <argsstring>(bool force=false) const</argsstring>
        <name>Save</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if successful, <computeroutput>false</computeroutput> if an error occurred. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> if the layer has no remembered file name or the layer type cannot be saved. The layer will not be overwritten if the file exists and the layer is not dirty unless <computeroutput>force</computeroutput> is true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Export</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;comment=std::string(), const FileFormatArguments &amp;args=FileFormatArguments()) const</argsstring>
        <name>Export</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
<para>Exports this layer to a file. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if successful, <computeroutput>false</computeroutput> if an error occurred.</para>
<para>If <computeroutput>comment</computeroutput> is not empty, the layer gets exported with the given comment. Additional arguments may be supplied via the <computeroutput>args</computeroutput> parameter. These arguments may control behavior specific to the exported layer&apos;s file format.</para>
<para>Note that the file name or comment of the original layer is not updated. This only saves a copy of the layer to the given filename. Subsequent calls to <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">Save()</ref> will still save the layer to it&apos;s previously remembered file name. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8ea493056e94ea7cf0464fb0a87fc78a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ExportToString</definition>
        <argsstring>(std::string *result) const</argsstring>
        <name>ExportToString</name>
        <param>
          <type>std::string *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Writes this layer to the given string. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if successful and sets <computeroutput>result</computeroutput>, otherwise returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a291d43b52355bd1b94554081ec8cbadf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool ImportFromString</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>ImportFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Reads this layer from the given string. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> if successful, otherwise returns <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9013e716d1676f98b48ab913031e6d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clears the layer of all content. </para>
        </briefdescription>
        <detaileddescription>
<para>This restores the layer to a state as if it had just been created with <ref refid="class_sdf_layer_1aad57cd44403a4f95a2bb6c730fa1b0f5" kindref="member">CreateNew()</ref>. This operation is Undo-able.</para>
<para>The fileName and whether journaling is enabled are not affected by this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Reload</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>Reload</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reloads the layer from its persistent representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This restores the layer to a state as if it had just been created with <ref refid="class_sdf_layer_1aa01062bf4dde3f28c1fc617a1acaf35e" kindref="member">FindOrOpen()</ref>. This operation is Undo-able.</para>
<para>The fileName and whether journaling is enabled are not affected by this method.</para>
<para>When called with force = false (the default), Reload attempts to avoid reloading layers that have not changed on disk. It does so by comparing the file&apos;s modification time (mtime) to when the file was loaded. If the layer has unsaved modifications, this mechanism is not used, and the layer is reloaded from disk. If the layer has any <ref refid="class_sdf_layer_1ad168f0658add394429de6cc94d5139a0" kindref="member">external asset dependencies</ref> their modification state will also be consulted when determining if the layer needs to be reloaded.</para>
<para>Passing true to the <computeroutput>force</computeroutput> parameter overrides this behavior, forcing the layer to be reloaded from disk regardless of whether it has changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a031a0d6dd1b5be5a9de24f406dd61f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Import</definition>
        <argsstring>(const std::string &amp;layerPath)</argsstring>
        <name>Import</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerPath</declname>
        </param>
        <briefdescription>
<para>Imports the content of the given layer path, replacing the content of the current layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: If the layer path is the same as the current layer&apos;s real path, no action is taken (and a warning occurs). For this case use <ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">Reload()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa1a671fa49fd6046fbb9c0da7366c07e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool ReloadLayers</definition>
        <argsstring>(const std::set&lt; SdfLayerHandle &gt; &amp;layers, bool force=false)</argsstring>
        <name>ReloadLayers</name>
        <param>
          <type>const std::set&lt; SdfLayerHandle &gt; &amp;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Reloads the specified layers. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>false</computeroutput> if one or more layers failed to reload.</para>
<para>See <computeroutput><ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">Reload()</ref></computeroutput> for a description of the <computeroutput>force</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="402" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>External references</header>
      <memberdef kind="function" id="class_sdf_layer_1aec4e791001e505a12312d2aa525915f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>SDF_API std::set&lt;std::string&gt; GetExternalReferences</definition>
        <argsstring>() const</argsstring>
        <name>GetExternalReferences</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000061"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use GetCompositionAssetDependencies instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a64c7b4eb8b1990cf44dbdda3792f4d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool UpdateExternalReference</definition>
        <argsstring>(const std::string &amp;oldAssetPath, const std::string &amp;newAssetPath=std::string())</argsstring>
        <name>UpdateExternalReference</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>oldAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>newAssetPath</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000062"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use UpdateCompositionAssetDependency instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a667b3fd05c957d66c4d47752496b17b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>SDF_API std::set&lt;std::string&gt; GetCompositionAssetDependencies</definition>
        <argsstring>() const</argsstring>
        <name>GetCompositionAssetDependencies</name>
        <briefdescription>
<para>Return paths of all assets this layer depends on due to composition fields. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes the paths of all layers referred to by reference, payload, and sublayer fields in this layer. This function only returns direct composition dependencies of this layer, i.e. it does not recurse to find composition dependencies from its dependent layer assets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1bf08efb9c654508515dbcab27588d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool UpdateCompositionAssetDependency</definition>
        <argsstring>(const std::string &amp;oldAssetPath, const std::string &amp;newAssetPath=std::string())</argsstring>
        <name>UpdateCompositionAssetDependency</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>oldAssetPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>newAssetPath</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Updates the asset path of a composation dependency in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>newAssetPath</computeroutput> is supplied, the update works as &quot;rename&quot;, updating any occurrence of <computeroutput>oldAssetPath</computeroutput> to <computeroutput>newAssetPath</computeroutput> in all reference, payload, and sublayer fields.</para>
<para>If <computeroutput>newAssetPath</computeroutput> is not given, this update behaves as a &quot;delete&quot;, removing all occurrences of <computeroutput>oldAssetPath</computeroutput> from all reference, payload, and sublayer fields. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad168f0658add394429de6cc94d5139a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>SDF_API std::set&lt;std::string&gt; GetExternalAssetDependencies</definition>
        <argsstring>() const</argsstring>
        <name>GetExternalAssetDependencies</name>
        <briefdescription>
<para>Returns a set of resolved paths to all external asset dependencies the layer needs to generate its contents. </para>
        </briefdescription>
        <detaileddescription>
<para>These are additional asset dependencies that are determined by the layer&apos;s <ref refid="class_sdf_file_format_1a848b6bb7cedf72cb78e402c4402fdbc0" kindref="member">file format</ref> and will be consulted during <ref refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" kindref="member">Reload()</ref> when determining if the layer needs to be reloaded. This specifically does not include dependencies related to composition, i.e. this will not include assets from references, payloads, and sublayers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="462" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Identification</header>
      <description><para>A layer&apos;s identifier is a string that uniquely identifies a layer.</para>
<para>At minimum, it is the string by which the layer was created, either via FindOrOpen or CreateNew. If additional arguments were passed to those functions, those arguments will be encoded in the identifier.</para>
<para>For example: FindOrOpen(&apos;foo.sdf&apos;, args={&apos;a&apos;:&apos;b&apos;, &apos;c&apos;:&apos;d&apos;}).identifier =&gt; &quot;foo.sdf:SDF_FORMAT_ARGS:a=b&amp;c=d&quot;</para>
<para>Note that this means the identifier may in general not be a path.</para>
<para>The identifier format is subject to change; consumers should NOT parse layer identifiers themselves, but should use the supplied SplitIdentifier and CreateIdentifier helper functions. </para>
</description>
      <memberdef kind="function" id="class_sdf_layer_1ad28666c5057c69ccd19ba802bca8c2a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetIdentifier</name>
        <briefdescription>
<para>Returns the layer identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3f41453e8db55396f5f1600e2c82a023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetIdentifier</definition>
        <argsstring>(const std::string &amp;identifier)</argsstring>
        <name>SetIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Sets the layer identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that the new identifier must have the same arguments (if any) as the old identifier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a836f19841c64abea48acfcf6e2cbd7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void UpdateAssetInfo</definition>
        <argsstring>()</argsstring>
        <name>UpdateAssetInfo</name>
        <briefdescription>
<para>Update layer asset information. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this method re-resolves the layer identifier, which updates asset information such as the layer&apos;s resolved path and other asset info. This may be used to update the layer after external changes to the underlying asset system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acab74645dbf8de67523de409a2ef2eac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetDisplayName</definition>
        <argsstring>() const</argsstring>
        <name>GetDisplayName</name>
        <briefdescription>
<para>Returns the layer&apos;s display name. </para>
        </briefdescription>
        <detaileddescription>
<para>The display name is the base filename of the identifier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7de25c6aa86f3ef65061c62dd22db0ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
        <definition>SDF_API const ArResolvedPath&amp; GetResolvedPath</definition>
        <argsstring>() const</argsstring>
        <name>GetResolvedPath</name>
        <briefdescription>
<para>Returns the resolved path for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the path where this layer exists or may exist after a call to <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">Save()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a79545e0bdaa30193e514cecd411e3f3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetRealPath</definition>
        <argsstring>() const</argsstring>
        <name>GetRealPath</name>
        <briefdescription>
<para>Returns the resolved path for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="class_sdf_layer_1a7de25c6aa86f3ef65061c62dd22db0ef" kindref="member">GetResolvedPath()</ref>.GetPathString(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a93a9f104f8c4226afb49b28fb72173c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetFileExtension</definition>
        <argsstring>() const</argsstring>
        <name>GetFileExtension</name>
        <briefdescription>
<para>Returns the file extension to use for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If this layer was loaded from disk, it should match the extension of the file format it was loaded as; if this is an anonymous in-memory layer it will be the default extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1af094d8c40409f87d6ccf2f8ab50069b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetVersion</definition>
        <argsstring>() const</argsstring>
        <name>GetVersion</name>
        <briefdescription>
<para>Returns the asset system version of this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>If a layer is loaded from a location that is not version managed, or a configured asset system is not present when the layer is loaded or created, the version is empty. By default, asset version tracking is disabled; this method returns empty unless asset version tracking is enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a2e91f61de5d2093bb3d17954878d9f01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetRepositoryPath</definition>
        <argsstring>() const</argsstring>
        <name>GetRepositoryPath</name>
        <briefdescription>
<para>Returns the layer identifier in asset path form. </para>
        </briefdescription>
        <detaileddescription>
<para>In the presence of a properly configured path resolver, the asset path is a double-slash prefixed depot path. If the path resolver is not configured, the asset path of a layer is empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3e6dff122d8bee338321f78e875f6bba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const std::string &amp;</type>
        <definition>SDF_API const std::string&amp; GetAssetName</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetName</name>
        <briefdescription>
<para>Returns the asset name associated with this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a20a10b035b2f796ca46ca49002a52db8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
        <definition>SDF_API const VtValue&amp; GetAssetInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetAssetInfo</name>
        <briefdescription>
<para>Returns resolve information from the last time the layer identifier was resolved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ace248ff849a8940a1978aebe58f1fb4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string ComputeAbsolutePath</definition>
        <argsstring>(const std::string &amp;assetPath) const</argsstring>
        <name>ComputeAbsolutePath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assetPath</declname>
        </param>
        <briefdescription>
<para>Returns the path to the asset specified by <computeroutput>assetPath</computeroutput> using this layer to anchor the path if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>assetPath</computeroutput> if it&apos;s empty or an anonymous layer identifier.</para>
<para>This method can be used on asset paths that are authored in this layer to create new asset paths that can be copied to other layers. These new asset paths should refer to the same assets as the original asset paths. For example, if the underlying <ref refid="class_ar_resolver" kindref="compound">ArResolver</ref> is filesystem-based and <computeroutput>assetPath</computeroutput> is a relative filesystem path, this method might return the absolute filesystem path using this layer&apos;s location as the anchor.</para>
<para>The returned path should in general not be assumed to be an absolute filesystem path or any other specific form. It is &quot;absolute&quot; in that it should resolve to the same asset regardless of what layer it&apos;s authored in. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3d1926f596211786a3f0b2b2a234257c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool SplitIdentifier</definition>
        <argsstring>(const std::string &amp;identifier, std::string *layerPath, FileFormatArguments *arguments)</argsstring>
        <name>SplitIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>layerPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> *</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
<para>Splits the given layer identifier into its constituent layer path and arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a945800f72e30b5b425b26a4ee6f46ffc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>static SDF_API std::string CreateIdentifier</definition>
        <argsstring>(const std::string &amp;layerPath, const FileFormatArguments &amp;arguments)</argsstring>
        <name>CreateIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>layerPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
<para>Joins the given layer path and arguments into an identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="494" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Fields</header>
      <description><para>All scene description for a given object is stored as a set of key/value pairs called fields.</para>
<para>These methods provide direct access to those fields, though most clients should use the Spec API to ensure data consistency.</para>
<para>These methods all take <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> to identify the queried spec. </para>
</description>
      <memberdef kind="function" id="class_sdf_layer_1ae184606be96bf4b6ed13e90ebef8b691" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
        <definition>SDF_API SdfSpecType GetSpecType</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetSpecType</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the spec type for <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns SdfSpecTypeUnknown if no spec exists at <emphasis>path</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a2844a06c049f7628e4a63219bea4d024" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasSpec</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>HasSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return whether a spec exists at <emphasis>path</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1add73835d4d77389f3e7dd123c2a37579" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>SDF_API std::vector&lt;TfToken&gt; ListFields</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>ListFields</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return the names of all the fields that are set at <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a70f68af49de097c81e84a4d1d9b7ba1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value=NULL) const</argsstring>
        <name>HasField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Return whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a771dd91f9c37a199f971365f7ec753cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfAbstractDataValue *value) const</argsstring>
        <name>HasField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0328b9af85eb35cfd3a485cd2cc85262" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;name, T *value) const</argsstring>
        <name>HasField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the object has a non-empty value with name <computeroutput>name</computeroutput> and type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If value ptr is provided, returns the value found. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="619" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="619" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae0a283414fffa00c0fa81c261355584e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::type_info const  &amp;</type>
        <definition>std::type_info const&amp; GetFieldTypeid</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;name) const</argsstring>
        <name>GetFieldTypeid</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the type of the value for <computeroutput>name</computeroutput> on spec <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no such field exists, return typeid(void). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="639" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6b81a4bdc551fc7a705d9ed682394838" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasFieldDictKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, VtValue *value=NULL) const</argsstring>
        <name>HasFieldDictKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Return whether a value exists for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis> and <emphasis>keyPath</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. Optionally returns the value if it exists. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1d8ada6354786831f4e5901e6e52370a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasFieldDictKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, SdfAbstractDataValue *value) const</argsstring>
        <name>HasFieldDictKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad6046927ca3b4cabbf4ced064a58da78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool HasFieldDictKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;name, const TfToken &amp;keyPath, T *value) const</argsstring>
        <name>HasFieldDictKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the object has a non-empty value with name <computeroutput>name</computeroutput> and <computeroutput>keyPath</computeroutput> and type <computeroutput>T</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If value ptr is provided, returns the value found. The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="663" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="663" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a73dabb7e84de9f39850567fa933f56b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue GetField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName) const</argsstring>
        <name>GetField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty value if none is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa6fb7f9ae4c12e5ee8cc70e5e7c5c695" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T GetFieldAs</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const T &amp;defaultValue=T()) const</argsstring>
        <name>GetFieldAs</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>defaultValue</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the provided <emphasis>defaultValue</emphasis> value if none is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="686" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="686" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad1693c6989ff4faf6595b6fc37eba83b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>SDF_API VtValue GetFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath) const</argsstring>
        <name>GetFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Return the value for the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis> at <computeroutput>keyPath</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an empty value if none is set. The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3cc1bdee6da86ab32fab6b57600ad107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const VtValue &amp;value)</argsstring>
        <name>SetField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a2375433f073d8542d5385e6d041aea17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const SdfAbstractDataConstValue &amp;value)</argsstring>
        <name>SetField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab6f8232b9927b625bd4a0526cf555969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const T &amp;val)</argsstring>
        <name>SetField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="710" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="710" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a188ca62371843b69c5ccf7b53680e4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const VtValue &amp;value)</argsstring>
        <name>SetFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1abb1472b1dbe1e4ee5e6c57cec6e819e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const SdfAbstractDataConstValue &amp;value)</argsstring>
        <name>SetFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="731" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a385e19b3828467c83f212f349e97c55e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const T &amp;val)</argsstring>
        <name>SetFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the value of the given <emphasis>path</emphasis> and <emphasis>fieldName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="739" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="739" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a35e70ff0ddc2c4d113f72ee6a07ffab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void EraseField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName)</argsstring>
        <name>EraseField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Remove the field at <computeroutput>path</computeroutput> and <computeroutput>fieldName</computeroutput>, if one exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1af5ef87b93f44cfb9686dd0a82b57ed73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void EraseFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath)</argsstring>
        <name>EraseFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <briefdescription>
<para>Remove the field at <computeroutput>path</computeroutput> and <computeroutput>fieldName</computeroutput> and <computeroutput>keyPath</computeroutput>, if one exists. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>keyPath</computeroutput> is a &apos;:&apos;-separated path addressing an element in sub-dictionaries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="762" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Traversal</header>
      <memberdef kind="typedef" id="class_sdf_layer_1af6a1235e08b50e0ef16f3b8dcf5aae13" prot="public" static="no">
        <type>std::function&lt; void(const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;)&gt;</type>
        <definition>typedef std::function&lt;void(const SdfPath&amp;)&gt; TraversalFunction</definition>
        <argsstring></argsstring>
        <name>TraversalFunction</name>
        <briefdescription>
<para>Callback function for Traverse. </para>
        </briefdescription>
        <detaileddescription>
<para>This callback will be invoked with the path of each spec that is visited. <simplesect kind="see"><para>Traverse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="772" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a04c0ba17ce18108ad8d2151e6591ffd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void Traverse</definition>
        <argsstring>(const SdfPath &amp;path, const TraversalFunction &amp;func)</argsstring>
        <name>Traverse</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1af6a1235e08b50e0ef16f3b8dcf5aae13" kindref="member">TraversalFunction</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="777" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Metadata</header>
      <memberdef kind="function" id="class_sdf_layer_1a8cb0eb76a8aa1e26dc0949b4121f50e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref></type>
        <definition>SDF_API SdfAssetPath GetColorConfiguration</definition>
        <argsstring>() const</argsstring>
        <name>GetColorConfiguration</name>
        <briefdescription>
<para>Returns the color configuration asset-path for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is an empty asset-path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a90329c5fe025b55c31297c178cb63d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetColorConfiguration</definition>
        <argsstring>(const SdfAssetPath &amp;colorConfiguration)</argsstring>
        <name>SetColorConfiguration</name>
        <param>
          <type>const <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> &amp;</type>
          <declname>colorConfiguration</declname>
        </param>
        <briefdescription>
<para>Sets the color configuration asset-path for this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac30899714e12ee731b9d3cce9f6f84a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasColorConfiguration</definition>
        <argsstring>() const</argsstring>
        <name>HasColorConfiguration</name>
        <briefdescription>
<para>Returns true if color configuration metadata is set in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_1a8cb0eb76a8aa1e26dc0949b4121f50e6" kindref="member">GetColorConfiguration()</ref>, <ref refid="class_sdf_layer_1a90329c5fe025b55c31297c178cb63d1b" kindref="member">SetColorConfiguration()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="797" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8c4da09d914d270cd700caf5633696bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearColorConfiguration</definition>
        <argsstring>()</argsstring>
        <name>ClearColorConfiguration</name>
        <briefdescription>
<para>Clears the color configuration metadata authored in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_1ac30899714e12ee731b9d3cce9f6f84a2" kindref="member">HasColorConfiguration()</ref>, <ref refid="class_sdf_layer_1a90329c5fe025b55c31297c178cb63d1b" kindref="member">SetColorConfiguration()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0410dd9c9d9156436b807c60a489729c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetColorManagementSystem</definition>
        <argsstring>() const</argsstring>
        <name>GetColorManagementSystem</name>
        <briefdescription>
<para>Returns the color management system used to interpret the color configuration asset-path authored in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is an empty token, which implies that the clients will have to determine the color management system from the color configuration asset path (i.e. from its file extension), if it&apos;s specified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a5835609e70d7bf8da1d46ebd870e63b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetColorManagementSystem</definition>
        <argsstring>(const TfToken &amp;cms)</argsstring>
        <name>SetColorManagementSystem</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>cms</declname>
        </param>
        <briefdescription>
<para>Sets the color management system used to interpret the color configuration asset-path authored this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6dc6870cf295989a3f0a9f4cf38d8f75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasColorManagementSystem</definition>
        <argsstring>() const</argsstring>
        <name>HasColorManagementSystem</name>
        <briefdescription>
<para>Returns true if colorManagementSystem metadata is set in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_sdf_layer_1a0410dd9c9d9156436b807c60a489729c" kindref="member">GetColorManagementSystem()</ref>, <ref refid="class_sdf_layer_1a5835609e70d7bf8da1d46ebd870e63b1" kindref="member">SetColorManagementSystem()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aadc9b52884d3decc40579b1cdce66ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearColorManagementSystem</definition>
        <argsstring>()</argsstring>
        <name>ClearColorManagementSystem</name>
        <briefdescription>
<para>Clears the &apos;colorManagementSystem&apos; metadata authored in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>HascolorManagementSystem(), <ref refid="class_sdf_layer_1a5835609e70d7bf8da1d46ebd870e63b1" kindref="member">SetColorManagementSystem()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="827" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa09e2580406e4e30598f2a316ef029b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetComment</definition>
        <argsstring>() const</argsstring>
        <name>GetComment</name>
        <briefdescription>
<para>Returns the comment string for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for comment is &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="833" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acd51e891ebac431521a4023679e7e558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetComment</definition>
        <argsstring>(const std::string &amp;comment)</argsstring>
        <name>SetComment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
<para>Sets the comment string for this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="837" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>SDF_API TfToken GetDefaultPrim</definition>
        <argsstring>() const</argsstring>
        <name>GetDefaultPrim</name>
        <briefdescription>
<para>Return the defaultPrim metadata for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This field indicates the name of which root prim should be targeted by a reference or payload to this layer that doesn&apos;t specify a prim path.</para>
<para>The default value is the empty token. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDefaultPrim</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>SetDefaultPrim</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the default prim metadata for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>The root prim with this name will be targeted by a reference or a payload to this layer that doesn&apos;t specify a prim path. Note that this must be a root prim <bold>name</bold> not a path. E.g. &quot;rootPrim&quot; rather than &quot;/rootPrim&quot;. See <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">GetDefaultPrim()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="853" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac306053a290ac326217f8c1332723b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearDefaultPrim</definition>
        <argsstring>()</argsstring>
        <name>ClearDefaultPrim</name>
        <briefdescription>
<para>Clear the default prim metadata for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">GetDefaultPrim()</ref> and <ref refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" kindref="member">SetDefaultPrim()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a5c5be6e4d708fe1aeec63877cd1e56ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasDefaultPrim</definition>
        <argsstring>()</argsstring>
        <name>HasDefaultPrim</name>
        <briefdescription>
<para>Return true if the default prim metadata is set in this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" kindref="member">GetDefaultPrim()</ref> and <ref refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" kindref="member">SetDefaultPrim()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="863" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a5f4c1bc9f2f793b24014551075d7cb6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetDocumentation</definition>
        <argsstring>() const</argsstring>
        <name>GetDocumentation</name>
        <briefdescription>
<para>Returns the documentation string for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value for documentation is &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9fa7ae3c543b90bee933d6aa043ca5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetDocumentation</definition>
        <argsstring>(const std::string &amp;documentation)</argsstring>
        <name>SetDocumentation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>documentation</declname>
        </param>
        <briefdescription>
<para>Sets the documentation string for this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac5e81d8b05eea305e4f873ed6179f27c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API double</type>
        <definition>SDF_API double GetStartTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>GetStartTimeCode</name>
        <briefdescription>
<para>Returns the layer&apos;s start timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>The start and end timeCodes of a layer represent the suggested playback range. However, time-varying content is not limited to the timeCode range of the layer.</para>
<para>The default value for startTimeCode is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="883" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1adad39dc615c7fa98499818fc9739d0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetStartTimeCode</definition>
        <argsstring>(double startTimecode)</argsstring>
        <name>SetStartTimeCode</name>
        <param>
          <type>double</type>
          <declname>startTimecode</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s start timeCode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="887" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a859a9b23428496a5a9fb41ba82c19b13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasStartTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>HasStartTimeCode</name>
        <briefdescription>
<para>Returns true if the layer has a startTimeCode opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a61c4f649c9037b836dfac4121b1effcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearStartTimeCode</definition>
        <argsstring>()</argsstring>
        <name>ClearStartTimeCode</name>
        <briefdescription>
<para>Clear the startTimeCode opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a12312adadba91980a823fd4d2658fd3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API double</type>
        <definition>SDF_API double GetEndTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>GetEndTimeCode</name>
        <briefdescription>
<para>Returns the layer&apos;s end timeCode. </para>
        </briefdescription>
        <detaileddescription>
<para>The start and end timeCode of a layer represent a suggested playback range.</para>
<para>However, time-varying content is not limited to the timeCode range of the layer.</para>
<para>The default value for endTimeCode is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aac25edcfb18a06051802f33d7fd321cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetEndTimeCode</definition>
        <argsstring>(double endTimeCode)</argsstring>
        <name>SetEndTimeCode</name>
        <param>
          <type>double</type>
          <declname>endTimeCode</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s end timeCode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a655929b81e0bd7d5a6ed7b670b9a4741" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasEndTimeCode</definition>
        <argsstring>() const</argsstring>
        <name>HasEndTimeCode</name>
        <briefdescription>
<para>Returns true if the layer has an endTimeCode opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3d548f78a40f05d669177e4318de86ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearEndTimeCode</definition>
        <argsstring>()</argsstring>
        <name>ClearEndTimeCode</name>
        <briefdescription>
<para>Clear the endTimeCode opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8c7a1ac2e85efa2aa4831123de576b7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API double</type>
        <definition>SDF_API double GetTimeCodesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>GetTimeCodesPerSecond</name>
        <briefdescription>
<para>Returns the layer&apos;s timeCodes per second. </para>
        </briefdescription>
        <detaileddescription>
<para>Scales the time ordinate for samples contained in the file to seconds.</para>
<para>If timeCodesPerSecond is 24, then a sample at time ordinate 24 should be viewed exactly one second after the sample at time ordinate 0.</para>
<para>If this layer doesn&apos;t have an authored value for timeCodesPerSecond, but it does have an authored value for framesPerSecond, this method will return the value of framesPerSecond. This &quot;dynamic fallback&quot; allows layers to lock framesPerSecond and timeCodesPerSecond to the same value by specifying only framesPerSecond.</para>
<para>The default value of timeCodesPerSecond, used only if there is no authored value for either timeCodesPerSecond or framesPerSecond, is 24. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="933" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acc85c2ea5134d5d22e091fc0330a5717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetTimeCodesPerSecond</definition>
        <argsstring>(double timeCodesPerSecond)</argsstring>
        <name>SetTimeCodesPerSecond</name>
        <param>
          <type>double</type>
          <declname>timeCodesPerSecond</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s timeCodes per second. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="937" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac654541953d42f7c6d0f7d5ec2a9597b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasTimeCodesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>HasTimeCodesPerSecond</name>
        <briefdescription>
<para>Returns true if the layer has a timeCodesPerSecond opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="941" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1378409f87c758c85c8efa1af2929dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearTimeCodesPerSecond</definition>
        <argsstring>()</argsstring>
        <name>ClearTimeCodesPerSecond</name>
        <briefdescription>
<para>Clear the timeCodesPerSecond opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6b8b53542bcf35783b8bc9181b4c0afc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API double</type>
        <definition>SDF_API double GetFramesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>GetFramesPerSecond</name>
        <briefdescription>
<para>Returns the layer&apos;s frames per second. </para>
        </briefdescription>
        <detaileddescription>
<para>This makes an advisory statement about how the contained data can be most usefully consumed and presented. It&apos;s primarily an indication of the expected playback rate for the data, but a timeline editing tool might also want to use this to decide how to scale and label its timeline.</para>
<para>The default value for framesPerSecond is 24. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1b26eaab6264b5f5076e32611d068873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetFramesPerSecond</definition>
        <argsstring>(double framesPerSecond)</argsstring>
        <name>SetFramesPerSecond</name>
        <param>
          <type>double</type>
          <declname>framesPerSecond</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s frames per second. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="961" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3a4ab65a753a2e697940fe89e0ffcaa0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasFramesPerSecond</definition>
        <argsstring>() const</argsstring>
        <name>HasFramesPerSecond</name>
        <briefdescription>
<para>Returns true if the layer has a frames per second opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="965" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7f3ee0b5c7f6e6d8140534abe7ae5999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearFramesPerSecond</definition>
        <argsstring>()</argsstring>
        <name>ClearFramesPerSecond</name>
        <briefdescription>
<para>Clear the framesPerSecond opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="969" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a36e0d98ac0e03eabf889a110452cc6bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API int</type>
        <definition>SDF_API int GetFramePrecision</definition>
        <argsstring>() const</argsstring>
        <name>GetFramePrecision</name>
        <briefdescription>
<para>Returns the layer&apos;s frame precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="973" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a2942f4a27163381c636df398038d6ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetFramePrecision</definition>
        <argsstring>(int framePrecision)</argsstring>
        <name>SetFramePrecision</name>
        <param>
          <type>int</type>
          <declname>framePrecision</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s frame precision. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1dd163b209e95e99f086f59cdaae7777" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasFramePrecision</definition>
        <argsstring>() const</argsstring>
        <name>HasFramePrecision</name>
        <briefdescription>
<para>Returns true if the layer has a frames precision opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acf9af80fee10c27aac63cb9862ac73a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearFramePrecision</definition>
        <argsstring>()</argsstring>
        <name>ClearFramePrecision</name>
        <briefdescription>
<para>Clear the framePrecision opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="985" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a35659899f40a4d6bf86879b849e3dd3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetOwner</definition>
        <argsstring>() const</argsstring>
        <name>GetOwner</name>
        <briefdescription>
<para>Returns the layer&apos;s owner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a94e8320138eb24fa2d0b3b917e0dad47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetOwner</definition>
        <argsstring>(const std::string &amp;owner)</argsstring>
        <name>SetOwner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s owner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3a64298456bdbe500419e986e77140b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasOwner</definition>
        <argsstring>() const</argsstring>
        <name>HasOwner</name>
        <briefdescription>
<para>Returns true if the layer has an owner opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="997" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afce6dfb380672632518157f12e5bad32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearOwner</definition>
        <argsstring>()</argsstring>
        <name>ClearOwner</name>
        <briefdescription>
<para>Clear the owner opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1af5e0d003a1cf1245988b1a6dc39271e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::string</type>
        <definition>SDF_API std::string GetSessionOwner</definition>
        <argsstring>() const</argsstring>
        <name>GetSessionOwner</name>
        <briefdescription>
<para>Returns the layer&apos;s session owner. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: This should only be used by session layers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1006" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a4a634d063577df429e654b55ccdeadba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSessionOwner</definition>
        <argsstring>(const std::string &amp;owner)</argsstring>
        <name>SetSessionOwner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
<para>Sets the layer&apos;s session owner. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: This should only be used by session layers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a24f54baa826fec0738291834c9ecba14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasSessionOwner</definition>
        <argsstring>() const</argsstring>
        <name>HasSessionOwner</name>
        <briefdescription>
<para>Returns true if the layer has a session owner opinion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a478d8e42955d208ba616c9b29cd4f526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearSessionOwner</definition>
        <argsstring>()</argsstring>
        <name>ClearSessionOwner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1019" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3fe23a713ba7b02aabda0804bc64bb30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool GetHasOwnedSubLayers</definition>
        <argsstring>() const</argsstring>
        <name>GetHasOwnedSubLayers</name>
        <briefdescription>
<para>Returns true if the layer&apos;s sublayers are expected to have owners. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1af3baa4bbc9ca8ed58ed29db551610c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetHasOwnedSubLayers</definition>
        <argsstring>(bool)</argsstring>
        <name>SetHasOwnedSubLayers</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
<para>Sets whether the layer&apos;s sublayers are expected to have owners. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1027" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a4cdd82d1b72bd4aed0cc140be57cbb1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>SDF_API VtDictionary GetCustomLayerData</definition>
        <argsstring>() const</argsstring>
        <name>GetCustomLayerData</name>
        <briefdescription>
<para>Returns the CustomLayerData dictionary associated with this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a dictionary is custom metadata that is associated with this layer. It allows users to encode any set of information for human or program consumption. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1035" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3e673eb41358c0ded49640b9e7d07cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetCustomLayerData</definition>
        <argsstring>(const VtDictionary &amp;value)</argsstring>
        <name>SetCustomLayerData</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the CustomLayerData dictionary associated with this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a54e6057c53aac8c9913564dacf557aa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasCustomLayerData</definition>
        <argsstring>() const</argsstring>
        <name>HasCustomLayerData</name>
        <briefdescription>
<para>Returns true if CustomLayerData is authored on the layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1043" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a13460d5ee4e91c1691232a322f3b46d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearCustomLayerData</definition>
        <argsstring>()</argsstring>
        <name>ClearCustomLayerData</name>
        <briefdescription>
<para>Clears out the CustomLayerData dictionary associated with this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7b055e82a7ac610d5c4eb427bf30493f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>SDF_API VtDictionary GetExpressionVariables</definition>
        <argsstring>() const</argsstring>
        <name>GetExpressionVariables</name>
        <briefdescription>
<para>Returns the expression variables dictionary authored on this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="_sdf__page__variable_expressions" kindref="compound">Variable Expressions</ref> for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1052" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9ebfdca378d2e9efc3cf4515ebfdff60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetExpressionVariables</definition>
        <argsstring>(const VtDictionary &amp;expressionVars)</argsstring>
        <name>SetExpressionVariables</name>
        <param>
          <type>const <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> &amp;</type>
          <declname>expressionVars</declname>
        </param>
        <briefdescription>
<para>Sets the expression variables dictionary for this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1056" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa26031353ee3979b47bee75dcae992bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool HasExpressionVariables</definition>
        <argsstring>() const</argsstring>
        <name>HasExpressionVariables</name>
        <briefdescription>
<para>Returns true if expression variables are authored on this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa2faf45db51c40d881c09bcb20ef9a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ClearExpressionVariables</definition>
        <argsstring>()</argsstring>
        <name>ClearExpressionVariables</name>
        <briefdescription>
<para>Clears the expression variables dictionary authored on this layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1064" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Prims</header>
      <memberdef kind="typedef" id="class_sdf_layer_1a22c7986bd5a5497bde2624454a8c475f" prot="public" static="no">
        <type><ref refid="class_sdf_children_view" kindref="compound">SdfPrimSpecView</ref></type>
        <definition>typedef SdfPrimSpecView RootPrimsView</definition>
        <argsstring></argsstring>
        <name>RootPrimsView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1071" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a990a705e71a1616760ae031d7defa611" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_children_view" kindref="compound">RootPrimsView</ref></type>
        <definition>SDF_API RootPrimsView GetRootPrims</definition>
        <argsstring>() const</argsstring>
        <name>GetRootPrims</name>
        <briefdescription>
<para>Returns a vector of the layer&apos;s root prims. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a5579e5fd624727801c8c5b9a82137e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetRootPrims</definition>
        <argsstring>(const SdfPrimSpecHandleVector &amp;rootPrims)</argsstring>
        <name>SetRootPrims</name>
        <param>
          <type>const SdfPrimSpecHandleVector &amp;</type>
          <declname>rootPrims</declname>
        </param>
        <briefdescription>
<para>Sets a new vector of root prims. </para>
        </briefdescription>
        <detaileddescription>
<para>You can re-order, insert and remove prims but cannot rename them this way. If any of the listed prims have an existing owner, they will be reparented. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa80ec26f7ca0843eef6f453276b5be13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool InsertRootPrim</definition>
        <argsstring>(const SdfPrimSpecHandle &amp;prim, int index=-1)</argsstring>
        <name>InsertRootPrim</name>
        <param>
          <type>const SdfPrimSpecHandle &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Adds a new root prim at the given index. </para>
        </briefdescription>
        <detaileddescription>
<para>If the index is -1, the prim is inserted at the end. The layer will take ownership of the prim, via a <ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>. Returns true if successful, false if failed (for example, due to a duplicate name). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa1d32a6a9342d589cebe0f74b2c88c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemoveRootPrim</definition>
        <argsstring>(const SdfPrimSpecHandle &amp;prim)</argsstring>
        <name>RemoveRootPrim</name>
        <param>
          <type>const SdfPrimSpecHandle &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Remove a root prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1094" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a48ae0463ad76959910554b73d1710524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ScheduleRemoveIfInert</definition>
        <argsstring>(const SdfSpec &amp;spec)</argsstring>
        <name>ScheduleRemoveIfInert</name>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Cause <computeroutput>spec</computeroutput> to be removed if it no longer affects the scene when the last change block is closed, or now if there are no change blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a55468b05043d021961a36fdf4912863d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemovePrimIfInert</definition>
        <argsstring>(SdfPrimSpecHandle prim)</argsstring>
        <name>RemovePrimIfInert</name>
        <param>
          <type>SdfPrimSpecHandle</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Removes scene description that does not affect the scene in the layer namespace beginning with <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this method on a prim will only clean up prims with specifier &apos;over&apos; that are not contributing any opinions. The <computeroutput>prim</computeroutput> will only be removed if all of its nameChildren are also inert. The hierarchy <computeroutput>prim</computeroutput> is defined in will be pruned up to the layer root for each successive inert parent that has specifier &apos;over&apos;.</para>
<para>note: PrimSpecs that contain any PropertySpecs, even PropertySpecs with required fields only (see PropertySpec::HasRequiredFieldsOnly) are not considered inert, and thus the prim won&apos;t be removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a693516343167a81664d9a06fbf736358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemovePropertyIfHasOnlyRequiredFields</definition>
        <argsstring>(SdfPropertySpecHandle prop)</argsstring>
        <name>RemovePropertyIfHasOnlyRequiredFields</name>
        <param>
          <type>SdfPropertySpecHandle</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Removes prop if it has only required fields (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>is not contributing any opinions to the scene other than property instantiation).</para>
<para>The hierarchy <computeroutput>prop</computeroutput> is defined in will then be pruned up to the layer root for each successive inert parent. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1adcbb1b227f47fce7d6e1abea67177a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemoveInertSceneDescription</definition>
        <argsstring>()</argsstring>
        <name>RemoveInertSceneDescription</name>
        <briefdescription>
<para>Removes all scene description in this layer that does not affect the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>This method walks the layer namespace hierarchy and removes any prims and that are not contributing any opinions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a250c7805632ed83ad251bd72811b2341" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_list_proxy" kindref="compound">SdfNameOrderProxy</ref></type>
        <definition>SDF_API SdfNameOrderProxy GetRootPrimOrder</definition>
        <argsstring>() const</argsstring>
        <name>GetRootPrimOrder</name>
        <briefdescription>
<para>Returns the list of prim names for this layer&apos;s reorder rootPrims statement. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="class_sdf_layer_1a7d0dc6273fc1a20800a1dc5e3955910d" kindref="member">SetRootPrimOrder()</ref> for more info. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7d0dc6273fc1a20800a1dc5e3955910d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetRootPrimOrder</definition>
        <argsstring>(const std::vector&lt; TfToken &gt; &amp;names)</argsstring>
        <name>SetRootPrimOrder</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Given a list of (possible sparse) prim names, authors a reorder rootPrims statement for this prim. </para>
        </briefdescription>
        <detaileddescription>
<para>This reorder statement can modify the order of root prims that have already been explicitly ordered with <ref refid="class_sdf_layer_1aa80ec26f7ca0843eef6f453276b5be13" kindref="member">InsertRootPrim()</ref> or <ref refid="class_sdf_layer_1a5579e5fd624727801c8c5b9a82137e88" kindref="member">SetRootPrims()</ref>; but only during composition. Therefore, <ref refid="class_sdf_layer_1a990a705e71a1616760ae031d7defa611" kindref="member">GetRootPrims()</ref>, <ref refid="class_sdf_layer_1aa80ec26f7ca0843eef6f453276b5be13" kindref="member">InsertRootPrim()</ref>, <ref refid="class_sdf_layer_1a5579e5fd624727801c8c5b9a82137e88" kindref="member">SetRootPrims()</ref>, etc. do not read, author, or pay any attention to this statement. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a194675ddc6ebd251b959efef1cdbbe23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void InsertInRootPrimOrder</definition>
        <argsstring>(const TfToken &amp;name, int index=-1)</argsstring>
        <name>InsertInRootPrimOrder</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Adds a new root prim name in the root prim order. </para>
        </briefdescription>
        <detaileddescription>
<para>If the index is -1, the name is inserted at the end. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a782d055b012be6dc56a6c6ac64729474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemoveFromRootPrimOrder</definition>
        <argsstring>(const TfToken &amp;name)</argsstring>
        <name>RemoveFromRootPrimOrder</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes a root prim name from the root prim order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a00348027acabf5fd14478278a19942c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemoveFromRootPrimOrderByIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>RemoveFromRootPrimOrderByIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes a root prim name from the root prim order by index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1abbc1752ab0be5eeee1b469b4aa68f259" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void ApplyRootPrimOrder</definition>
        <argsstring>(std::vector&lt; TfToken &gt; *vec) const</argsstring>
        <name>ApplyRootPrimOrder</name>
        <param>
          <type>std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt; *</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Reorders the given list of prim names according to the reorder rootPrims statement for this layer. </para>
        </briefdescription>
        <detaileddescription>
<para>This routine employs the standard list editing operations for ordered items in a ListEditor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sublayers</header>
      <memberdef kind="function" id="class_sdf_layer_1a13ab878d9dfb9e97df31d39a6da874b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_list_proxy" kindref="compound">SdfSubLayerProxy</ref></type>
        <definition>SDF_API SdfSubLayerProxy GetSubLayerPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetSubLayerPaths</name>
        <briefdescription>
<para>Returns a proxy for this layer&apos;s sublayers. </para>
        </briefdescription>
        <detaileddescription>
<para>Sub-layers are the weaker layers directly included by this layer. They&apos;re in order from strongest to weakest and they&apos;re all weaker than this layer.</para>
<para>Edits through the proxy changes the sublayers. If this layer does not have any sublayers the proxy is empty.</para>
<para>Sub-layer paths are asset paths, and thus must contain valid asset path characters (UTF-8 without C0 and C1 controls). See <ref refid="class_sdf_asset_path" kindref="compound">SdfAssetPath</ref> for more details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac840d86ba010cb86281ddb056a790e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSubLayerPaths</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;newPaths)</argsstring>
        <name>SetSubLayerPaths</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>newPaths</declname>
        </param>
        <briefdescription>
<para>Sets the paths of the layer&apos;s sublayers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a5a9d7171ab9660a3f031f45165a1bdca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API size_t</type>
        <definition>SDF_API size_t GetNumSubLayerPaths</definition>
        <argsstring>() const</argsstring>
        <name>GetNumSubLayerPaths</name>
        <briefdescription>
<para>Returns the number of sublayer paths (and offsets). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab4a00b935e75299bd952df98274d0fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void InsertSubLayerPath</definition>
        <argsstring>(const std::string &amp;path, int index=-1)</argsstring>
        <name>InsertSubLayerPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Inserts new sublayer path at the given index. </para>
        </briefdescription>
        <detaileddescription>
<para>The default index of -1 means to insert at the end. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ace162f29eca4781f96bdac914ff9a18b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void RemoveSubLayerPath</definition>
        <argsstring>(int index)</argsstring>
        <name>RemoveSubLayerPath</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes sublayer path at the given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a588097f79df0bfce9ae97f6a2f322c37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerOffsetVector</type>
        <definition>SDF_API SdfLayerOffsetVector GetSubLayerOffsets</definition>
        <argsstring>() const</argsstring>
        <name>GetSubLayerOffsets</name>
        <briefdescription>
<para>Returns the layer offsets for all the subLayer paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6d2a2e249c08d05e58514e2956dca77f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref></type>
        <definition>SDF_API SdfLayerOffset GetSubLayerOffset</definition>
        <argsstring>(int index) const</argsstring>
        <name>GetSubLayerOffset</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the layer offset for the subLayer path at the given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afa9fbd4c26e8330e8b6046b19f9aabba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetSubLayerOffset</definition>
        <argsstring>(const SdfLayerOffset &amp;offset, int index)</argsstring>
        <name>SetSubLayerOffset</name>
        <param>
          <type>const <ref refid="class_sdf_layer_offset" kindref="compound">SdfLayerOffset</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Sets the layer offset for the subLayer path at the given index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1219" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Detached Layers</header>
      <description><para>Detached layers are layers that are detached from the serialized data store and isolated from any external changes to that serialized data.</para>
<para>File format plugins may produce layers that maintain a persistent connection to their serialized representation to read data on-demand. For example, a file format might set up layers to hold an open file handle and read attribute time samples from it only when requested, to avoid pulling in unnecessary data. However, there may be times when keeping this connection is undesirable. In the previous example, a crash might occur if some other process were to change the file on disk, or users might be prevented from overwriting the file at all which could interfere with workflow.</para>
<para>To avoid these problems, the functions below may be used to specify layers that are to be detached from the original serialized data. </para>
</description>
      <memberdef kind="function" id="class_sdf_layer_1ad681e91b40aeca65208045c37131025d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void SetDetachedLayerRules</definition>
        <argsstring>(const DetachedLayerRules &amp;mask)</argsstring>
        <name>SetDetachedLayerRules</name>
        <param>
          <type>const <ref refid="class_sdf_layer_1_1_detached_layer_rules" kindref="compound">DetachedLayerRules</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Sets the rules specifying detached layers. </para>
        </briefdescription>
        <detaileddescription>
<para>Newly-created or opened layers whose identifiers are included in <computeroutput>rules</computeroutput> will be opened as detached layers. Existing layers that are now included or no longer included will be reloaded. Any unsaved modifications to those layers will be lost.</para>
<para>This function is not thread-safe. It may not be run concurrently with any other functions that open, close, or read from any layers.</para>
<para>The detached layer rules are initially set to exclude all layers. This may be overridden by setting the environment variables SDF_LAYER_INCLUDE_DETACHED and SDF_LAYER_EXCLUDE_DETACHED to specify the initial set of include and exclude patterns in the rules. These variables can be set to a comma-delimited list of patterns. SDF_LAYER_INCLUDE_DETACHED may also be set to &quot;*&quot; to include all layers. Note that these environment variables only set the initial state of the detached layer rules; these values may be overwritten by subsequent calls to this function.</para>
<para>See <ref refid="class_sdf_layer_1_1_detached_layer_rules_1aac37ac79e5e9b2bb8e79b730cdf296c5" kindref="member">SdfLayer::DetachedLayerRules::IsIncluded</ref> for details on how the rules are applied to layer identifiers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac776a3909ca1c9f6576495b12bf9789d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API const <ref refid="class_sdf_layer_1_1_detached_layer_rules" kindref="compound">DetachedLayerRules</ref> &amp;</type>
        <definition>static SDF_API const DetachedLayerRules&amp; GetDetachedLayerRules</definition>
        <argsstring>()</argsstring>
        <name>GetDetachedLayerRules</name>
        <briefdescription>
<para>Returns the current rules for the detached layer set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae72f4b38c480a88ee576fc034729768e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool IsIncludedByDetachedLayerRules</definition>
        <argsstring>(const std::string &amp;identifier)</argsstring>
        <name>IsIncludedByDetachedLayerRules</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <briefdescription>
<para>Returns whether the given layer identifier is included in the current rules for the detached layer set. </para>
        </briefdescription>
        <detaileddescription>
<para>This is equivalent to <ref refid="class_sdf_layer_1ac776a3909ca1c9f6576495b12bf9789d" kindref="member">GetDetachedLayerRules()</ref>.IsIncluded(identifier). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1339" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Muting</header>
      <memberdef kind="function" id="class_sdf_layer_1a07c183036d6a257ab432d929d738cc5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsMuted</definition>
        <argsstring>() const</argsstring>
        <name>IsMuted</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the current layer is muted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab8ddfa9cfc21bb86b31ea70a6b17f887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetMuted</definition>
        <argsstring>(bool muted)</argsstring>
        <name>SetMuted</name>
        <param>
          <type>bool</type>
          <declname>muted</declname>
        </param>
        <briefdescription>
<para>Mutes the current layer if <computeroutput>muted</computeroutput> is <computeroutput>true</computeroutput>, and unmutes it otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9e214098a31e65c1366e3f108e3d0649" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; std::string &gt;</type>
        <definition>static SDF_API std::set&lt;std::string&gt; GetMutedLayers</definition>
        <argsstring>()</argsstring>
        <name>GetMutedLayers</name>
        <briefdescription>
<para>Returns the set of muted layer paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a333798b296c3eba50f4e84378f90f848" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>static SDF_API bool IsMuted</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>IsMuted</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the specified layer path is muted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1a94f39a1df55831269c40482430b81f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void AddToMutedLayers</definition>
        <argsstring>(const std::string &amp;mutedPath)</argsstring>
        <name>AddToMutedLayers</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mutedPath</declname>
        </param>
        <briefdescription>
<para>Add the specified path to the muted layers set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a06bd565ff884d3c7a1636937d0f18a2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void RemoveFromMutedLayers</definition>
        <argsstring>(const std::string &amp;mutedPath)</argsstring>
        <name>RemoveFromMutedLayers</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mutedPath</declname>
        </param>
        <briefdescription>
<para>Remove the specified path from the muted layers set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1369" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Lookup</header>
      <memberdef kind="function" id="class_sdf_layer_1a5eec4638a7dd72e71801f2513cb53636" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfPrimSpecHandle</type>
        <definition>SDF_API SdfPrimSpecHandle GetPseudoRoot</definition>
        <argsstring>() const</argsstring>
        <name>GetPseudoRoot</name>
        <briefdescription>
<para>Returns the layer&apos;s pseudo-root prim. </para>
        </briefdescription>
        <detaileddescription>
<para>The layer&apos;s root prims are namespace children of the pseudo-root. The pseudo-root exists to make the namespace hierarchy a tree instead of a forest. This simplifies the implementation of some algorithms.</para>
<para>A layer always has a pseudo-root prim. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfSpecHandle</type>
        <definition>SDF_API SdfSpecHandle GetObjectAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetObjectAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the object at the given <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>There is no distinction between an absolute and relative path at the SdLayer level.</para>
<para>Returns <computeroutput>NULL</computeroutput> if there is no object at <computeroutput>path</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a74b719b5ed16b6a09681fb2af6b71b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfPrimSpecHandle</type>
        <definition>SDF_API SdfPrimSpecHandle GetPrimAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetPrimAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns the prim at the given <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>NULL</computeroutput> if there is no prim at <computeroutput>path</computeroutput>. This is simply a more specifically typed version of <computeroutput><ref refid="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" kindref="member">GetObjectAtPath()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a886b9d1469064fde70bbb5145bc7b7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfPropertySpecHandle</type>
        <definition>SDF_API SdfPropertySpecHandle GetPropertyAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetPropertyAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns a property at the given <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>NULL</computeroutput> if there is no property at <computeroutput>path</computeroutput>. This is simply a more specifically typed version of <computeroutput><ref refid="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" kindref="member">GetObjectAtPath()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1acf48e0faa064233379b2131845c1a4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfAttributeSpecHandle</type>
        <definition>SDF_API SdfAttributeSpecHandle GetAttributeAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetAttributeAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns an attribute at the given <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>NULL</computeroutput> if there is no attribute at <computeroutput>path</computeroutput>. This is simply a more specifically typed version of <computeroutput><ref refid="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" kindref="member">GetObjectAtPath()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afc7d4034921d9396b3e50719d1b0edbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfRelationshipSpecHandle</type>
        <definition>SDF_API SdfRelationshipSpecHandle GetRelationshipAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>GetRelationshipAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Returns a relationship at the given <computeroutput>path</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>NULL</computeroutput> if there is no relationship at <computeroutput>path</computeroutput>. This is simply a more specifically typed version of <computeroutput><ref refid="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" kindref="member">GetObjectAtPath()</ref></computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1425" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Permissions</header>
      <memberdef kind="function" id="class_sdf_layer_1a794044e16b8357b4fd1cd87438ed361f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool PermissionToEdit</definition>
        <argsstring>() const</argsstring>
        <name>PermissionToEdit</name>
        <briefdescription>
<para>Returns true if the caller is allowed to modify the layer and false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para>A layer may have to perform some action to acquire permission to be edited. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a69500b2435c0482185d36bf9a3af01f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool PermissionToSave</definition>
        <argsstring>() const</argsstring>
        <name>PermissionToSave</name>
        <briefdescription>
<para>Returns true if the caller is allowed to save the layer to its existing fileName and false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a32ad22bde9522ec46ef46ce2b88dfd14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetPermissionToEdit</definition>
        <argsstring>(bool allow)</argsstring>
        <name>SetPermissionToEdit</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Sets permission to edit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a37b20d1c8b230c3f97b536f7f2d734f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetPermissionToSave</definition>
        <argsstring>(bool allow)</argsstring>
        <name>SetPermissionToSave</name>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Sets permission to save. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1448" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Batch namespace editing</header>
      <memberdef kind="function" id="class_sdf_layer_1a2eb78636f680437024e8569798e995ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API <ref refid="struct_sdf_namespace_edit_detail_1a28287671eaf7406afd604bd055ba4066" kindref="member">SdfNamespaceEditDetail::Result</ref></type>
        <definition>SDF_API SdfNamespaceEditDetail::Result CanApply</definition>
        <argsstring>(const SdfBatchNamespaceEdit &amp;, SdfNamespaceEditDetailVector *details=NULL) const</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_edit_8h_1a064ca73542ffaa24de37224bbcf59963" kindref="member">SdfNamespaceEditDetailVector</ref> *</type>
          <declname>details</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Check if a batch of namespace edits will succeed. </para>
        </briefdescription>
        <detaileddescription>
<para>This returns <computeroutput><ref refid="struct_sdf_namespace_edit_detail_1a28287671eaf7406afd604bd055ba4066a37618a0d8bc8213c8e213b4da99027eb" kindref="member">SdfNamespaceEditDetail::Okay</ref></computeroutput> if they will succeed as a batch, <computeroutput><ref refid="struct_sdf_namespace_edit_detail_1a28287671eaf7406afd604bd055ba4066a7ef0481f973811a37b7218bc0e30a085" kindref="member">SdfNamespaceEditDetail::Unbatched</ref></computeroutput> if the edits will succeed but will be applied unbatched, and <computeroutput><ref refid="struct_sdf_namespace_edit_detail_1a28287671eaf7406afd604bd055ba4066a4dfd42ec49d09d8c6555c218301cc30f" kindref="member">SdfNamespaceEditDetail::Error</ref></computeroutput> if they will not succeed. No edits will be performed in any case.</para>
<para>If <computeroutput>details</computeroutput> is not <computeroutput>NULL</computeroutput> and the method does not return <computeroutput>Okay</computeroutput> then details about the problems will be appended to <computeroutput>details</computeroutput>. A problem may cause the method to return early, so <computeroutput>details</computeroutput> may not list every problem.</para>
<para>Note that Sdf does not track backpointers so it&apos;s unable to fix up targets/connections to namespace edited objects. Clients must fix those to prevent them from falling off. In addition, this method will report failure if any relational attribute with a target to a namespace edited object is subsequently edited (in the same batch). Clients should perform edits on relational attributes first.</para>
<para>Clients may wish to report unbatch details to the user to confirm that the edits should be applied unbatched. This will give the user a chance to correct any problems that cause batching to fail and try again. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8dfd77081bffed0ad2236f6044e5d234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool Apply</definition>
        <argsstring>(const SdfBatchNamespaceEdit &amp;)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_sdf_batch_namespace_edit" kindref="compound">SdfBatchNamespaceEdit</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Performs a batch of namespace edits. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> on success and <computeroutput>false</computeroutput> on failure. On failure, no namespace edits will have occurred. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1486" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Layer state</header>
      <memberdef kind="function" id="class_sdf_layer_1abdece13b2b76a2f740c793127da0d960" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API SdfLayerStateDelegateBasePtr</type>
        <definition>SDF_API SdfLayerStateDelegateBasePtr GetStateDelegate</definition>
        <argsstring>() const</argsstring>
        <name>GetStateDelegate</name>
        <briefdescription>
<para>Returns the state delegate used to manage this layer&apos;s authoring state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aba4e944fec109a37ba959252c95683f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetStateDelegate</definition>
        <argsstring>(const SdfLayerStateDelegateBaseRefPtr &amp;delegate)</argsstring>
        <name>SetStateDelegate</name>
        <param>
          <type>const SdfLayerStateDelegateBaseRefPtr &amp;</type>
          <declname>delegate</declname>
        </param>
        <briefdescription>
<para>Sets the state delegate used to manage this layer&apos;s authoring state. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;dirty&apos; state of this layer will be transferred to the new delegate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a27597b2d933d972e8c48eb384bde7159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool IsDirty</definition>
        <argsstring>() const</argsstring>
        <name>IsDirty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the layer is dirty, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>has changed from its persistent representation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1506" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Time-sample API</header>
      <memberdef kind="function" id="class_sdf_layer_1a44de726d8e9d0f8e65f58bd9d0acd802" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>SDF_API std::set&lt;double&gt; ListAllTimeSamples</definition>
        <argsstring>() const</argsstring>
        <name>ListAllTimeSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a92ca43d9d3bae7e26313b04495e91b1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API std::set&lt; double &gt;</type>
        <definition>SDF_API std::set&lt;double&gt; ListTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>ListTimeSamplesForPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a30d3024f970490770d62005d0db632b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool GetBracketingTimeSamples</definition>
        <argsstring>(double time, double *tLower, double *tUpper)</argsstring>
        <name>GetBracketingTimeSamples</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a58bdecbc011fcb788b32fb10ff00be29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API size_t</type>
        <definition>SDF_API size_t GetNumTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>GetNumTimeSamplesForPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab534720edf29321c3794268b2acb9922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool GetBracketingTimeSamplesForPath</definition>
        <argsstring>(const SdfPath &amp;path, double time, double *tLower, double *tUpper)</argsstring>
        <name>GetBracketingTimeSamplesForPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tLower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tUpper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1af7c994bb64b9ec60edc348201c8c8658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, VtValue *value=NULL) const</argsstring>
        <name>QueryTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1adb4574285a2280004de48f232cbefedd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, SdfAbstractDataValue *value) const</argsstring>
        <name>QueryTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data_value" kindref="compound">SdfAbstractDataValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ada4819bb9b321e8c67c7fc64d1a742c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool QueryTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, T *data) const</argsstring>
        <name>QueryTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1538" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1538" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a48dbf4d551eeecaf7525b25946e320f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const VtValue &amp;value)</argsstring>
        <name>SetTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a87cfbc1f508421850ba96de1f3faf068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void SetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const SdfAbstractDataConstValue &amp;value)</argsstring>
        <name>SetTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data_const_value" kindref="compound">SdfAbstractDataConstValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a6bf13483e18c7f0a01da7ad08bed6b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const T &amp;value)</argsstring>
        <name>SetTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1564" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1564" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a4d89ef3768fecb1ec9816832c2066c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>SDF_API void EraseTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time)</argsstring>
        <name>EraseTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aeafb4251d532baba5bcae2b726c66889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API bool</type>
        <definition>SDF_API bool WriteDataFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>WriteDataFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac30f9663f2fafb435e00b69d862bee69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDF_API void</type>
        <definition>static SDF_API void DumpLayerInfo</definition>
        <argsstring>()</argsstring>
        <name>DumpLayerInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1581" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fe" prot="private" static="no" strong="no">
        <type></type>
        <name>_ReloadResult</name>
        <enumvalue id="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea4d5a42e4872fffb816230fa80bdb9c8a" prot="private">
          <name>_ReloadFailed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea24b3e70bb304113d133fab701f0880fa" prot="private">
          <name>_ReloadSucceeded</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea469fe9e82237c33797fb0cfad2f8445a" prot="private">
          <name>_ReloadSkipped</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1802" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1802" bodyend="1802"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sdf_layer_1a4453162c5d5fdc96fa94263549fe7007" prot="private" static="no" mutable="no">
        <type>SdfLayerHandle</type>
        <definition>SdfLayerHandle _self</definition>
        <argsstring></argsstring>
        <name>_self</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1925" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1ad4b5eb600d4a9dcd5ac72f91c3d2b608" prot="private" static="no" mutable="no">
        <type>SdfFileFormatConstPtr</type>
        <definition>SdfFileFormatConstPtr _fileFormat</definition>
        <argsstring></argsstring>
        <name>_fileFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1928" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a4cd19edbaccd618732ee599661a848dc" prot="private" static="no" mutable="no">
        <type><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref></type>
        <definition>FileFormatArguments _fileFormatArgs</definition>
        <argsstring></argsstring>
        <name>_fileFormatArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1929" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1aba5da2da1272c34471ec40765cb680aa" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
        <definition>const SdfSchemaBase&amp; _schema</definition>
        <argsstring></argsstring>
        <name>_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1934" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a547557cf4874bfa5f78508b5eb54afa2" prot="private" static="no" mutable="yes">
        <type>Sdf_IdentityRegistry</type>
        <definition>Sdf_IdentityRegistry _idRegistry</definition>
        <argsstring></argsstring>
        <name>_idRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1937" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a32675f926253f44ff65c04c14bdd0325" prot="private" static="no" mutable="no">
        <type>SdfAbstractDataRefPtr</type>
        <definition>SdfAbstractDataRefPtr _data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1940" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a33e69106d00d6fc9a26963d10a71fff2" prot="private" static="no" mutable="no">
        <type>SdfLayerStateDelegateBaseRefPtr</type>
        <definition>SdfLayerStateDelegateBaseRefPtr _stateDelegate</definition>
        <argsstring></argsstring>
        <name>_stateDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1943" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a833318c5ed09e733b7198e3cbd688ad8" prot="private" static="no" mutable="no">
        <type><ref refid="class_work_dispatcher" kindref="compound">WorkDispatcher</ref></type>
        <definition>WorkDispatcher _initDispatcher</definition>
        <argsstring></argsstring>
        <name>_initDispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1947" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1aae641f42eaf191ba9aaad3dbb00476fb" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; _initializationComplete</definition>
        <argsstring></argsstring>
        <name>_initializationComplete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1955" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a8c7560b3f3b16f8357e1ef0173d337dc" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; _initializationWasSuccessful</definition>
        <argsstring></argsstring>
        <name>_initializationWasSuccessful</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1959" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1aae73f8ad7f3c8907428812176369bafd" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool _lastDirtyState</definition>
        <argsstring></argsstring>
        <name>_lastDirtyState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1962" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1ab255b18e69ee394a5353602d0d1e099d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Sdf_AssetInfo &gt;</type>
        <definition>std::unique_ptr&lt;Sdf_AssetInfo&gt; _assetInfo</definition>
        <argsstring></argsstring>
        <name>_assetInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1965" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1aa2b4529de16f2a85c6e3e46509010948" prot="private" static="no" mutable="yes">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue _assetModificationTime</definition>
        <argsstring></argsstring>
        <name>_assetModificationTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1968" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a3957e188cc982f76d339a7f90fdf4620" prot="private" static="no" mutable="yes">
        <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>VtDictionary _externalAssetModificationTimes</definition>
        <argsstring></argsstring>
        <name>_externalAssetModificationTimes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1972" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a7525cb51cc0b4a89767e6aa93336539c" prot="private" static="no" mutable="yes">
        <type>size_t</type>
        <definition>size_t _mutedLayersRevisionCache</definition>
        <argsstring></argsstring>
        <name>_mutedLayersRevisionCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1975" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1aa4073dff080f947c5be26b21657886c4" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool _isMutedCache</definition>
        <argsstring></argsstring>
        <name>_isMutedCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1979" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a5ab71d61b4cf495e8e5b1e2004e5b114" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _permissionToEdit</definition>
        <argsstring></argsstring>
        <name>_permissionToEdit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1982" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1ae02f616a00c164a916abf372249d2790" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _permissionToSave</definition>
        <argsstring></argsstring>
        <name>_permissionToSave</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1983" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1af71edf9f7d68313f4d0ac1e20ee2d088" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _validateAuthoring</definition>
        <argsstring></argsstring>
        <name>_validateAuthoring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1986" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sdf_layer_1a254761f762258e1b4a963f7265cf24ee" prot="private" static="no" mutable="yes">
        <type><ref refid="class_sdf_layer_hints" kindref="compound">SdfLayerHints</ref></type>
        <definition>SdfLayerHints _hints</definition>
        <argsstring></argsstring>
        <name>_hints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1989" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1989" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_sdf_layer_1a4993a9197bc3c3df5b7c09c876faae0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfSpec</definition>
        <argsstring></argsstring>
        <name>SdfSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1992" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_layer_1a147c49097c9c9842b62b53a0fe0d5abf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfPropertySpec</definition>
        <argsstring></argsstring>
        <name>SdfPropertySpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1993" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_layer_1a1a89f4a4a79ef71b20f9b02cd0216d51" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfAttributeSpec</definition>
        <argsstring></argsstring>
        <name>SdfAttributeSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1994" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_layer_1a322378f03491aa4ff46dbb23dfb30816" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfFileFormat</definition>
        <argsstring></argsstring>
        <name>SdfFileFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="2004" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="2004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_sdf_layer_1aa8d8b482bd62c236f962bfbeaf122bc9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SdfLayerStateDelegateBase</definition>
        <argsstring></argsstring>
        <name>SdfLayerStateDelegateBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="2008" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="2008" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sdf_layer_1a1c9b6bd68e69b230b5df79928ba37453" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>SDF_API</type>
        <definition>virtual SDF_API ~SdfLayer</definition>
        <argsstring>()</argsstring>
        <name>~SdfLayer</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afa5543a57d7d034fd23d3a78d65f381a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfLayer</definition>
        <argsstring>(const SdfLayer &amp;)=delete</argsstring>
        <name>SdfLayer</name>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Noncopyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a4989938906a91e4b87fed5eace5deac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
        <definition>SdfLayer&amp; operator=</definition>
        <argsstring>(const SdfLayer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="109" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sdf_layer_1af76785600b53c551ae4f71ca36bd37b4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SdfLayer</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const std::string &amp;realPath=std::string(), const ArAssetInfo &amp;assetInfo=ArAssetInfo(), const FileFormatArguments &amp;args=FileFormatArguments(), bool validateAuthoring=false)</argsstring>
        <name>SdfLayer</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>realPath</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref> &amp;</type>
          <declname>assetInfo</declname>
          <defval><ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>validateAuthoring</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1592" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_sdf_layer_1a097795644e2d1f38c0db150b3c16a8e2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _CreateNew</definition>
        <argsstring>(SdfFileFormatConstPtr fileFormat, const std::string &amp;identifier, const FileFormatArguments &amp;args, bool saveLayer=true)</argsstring>
        <name>_CreateNew</name>
        <param>
          <type>SdfFileFormatConstPtr</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>saveLayer</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1602" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a856fb55ba6de0fae950baff1ef5a5d2c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _CreateNewWithFormat</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;identifier, const std::string &amp;realPath, const ArAssetInfo &amp;assetInfo=ArAssetInfo(), const FileFormatArguments &amp;args=FileFormatArguments())</argsstring>
        <name>_CreateNewWithFormat</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>realPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref> &amp;</type>
          <declname>assetInfo</declname>
          <defval><ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0e8f0464ad45e08ebae11ee3553d42e4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _CreateAnonymousWithFormat</definition>
        <argsstring>(const SdfFileFormatConstPtr &amp;fileFormat, const std::string &amp;tag, const FileFormatArguments &amp;args)</argsstring>
        <name>_CreateAnonymousWithFormat</name>
        <param>
          <type>const SdfFileFormatConstPtr &amp;</type>
          <declname>fileFormat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a9b059bc64f672d01bc50fb8e5f6dde3a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _ComputeInfoToFindOrOpenLayer</definition>
        <argsstring>(const std::string &amp;identifier, const SdfLayer::FileFormatArguments &amp;args, _FindOrOpenLayerInfo *info, bool computeAssetInfo=false)</argsstring>
        <name>_ComputeInfoToFindOrOpenLayer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">SdfLayer::FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>_FindOrOpenLayerInfo *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeAssetInfo</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a22f4ebc9620066a0b7ba34aabf20e524" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Lock</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _OpenLayerAndUnlockRegistry</definition>
        <argsstring>(Lock &amp;lock, const _FindOrOpenLayerInfo &amp;info, bool metadataOnly)</argsstring>
        <name>_OpenLayerAndUnlockRegistry</name>
        <param>
          <type>Lock &amp;</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>const _FindOrOpenLayerInfo &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7769b54750618c9c5d83bdd7de3a59a4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ScopedLock</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _Find</definition>
        <argsstring>(const std::string &amp;identifier, const FileFormatArguments &amp;args, ScopedLock &amp;lock, bool retryAsWriter)</argsstring>
        <name>_Find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>ScopedLock &amp;</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retryAsWriter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a02f93c2bdd9a26189632dae4c74ecf8e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ScopedLock</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_tf_ref_ptr" kindref="compound">SdfLayerRefPtr</ref></type>
        <definition>static SdfLayerRefPtr _TryToFindLayer</definition>
        <argsstring>(const std::string &amp;identifier, const ArResolvedPath &amp;resolvedPath, ScopedLock &amp;lock, bool retryAsWriter)</argsstring>
        <name>_TryToFindLayer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>ScopedLock &amp;</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retryAsWriter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad4202c55a6eef307ef5e31188a337a57" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">SdfSchema::FieldDefinition</ref> const  *</type>
        <definition>static SdfSchema::FieldDefinition const* _GetRequiredFieldDef</definition>
        <argsstring>(const SdfSchemaBase &amp;schema, const TfToken &amp;fieldName, SdfSpecType specType)</argsstring>
        <name>_GetRequiredFieldDef</name>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1add170a1b06b6159a6d3bef9da7a16f72" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref> &gt;</type>
        <definition>static std::vector&lt;TfToken&gt; _ListFields</definition>
        <argsstring>(SdfSchemaBase const &amp;schema, SdfAbstractData const &amp;data, const SdfPath &amp;path)</argsstring>
        <name>_ListFields</name>
        <param>
          <type><ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> const &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> const &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa1949fe7560fae369a80f57be4794aaf" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _HasField</definition>
        <argsstring>(const SdfSchemaBase &amp;schema, const SdfAbstractData &amp;data, const SdfPath &amp;path, const TfToken &amp;fieldName, VtValue *value)</argsstring>
        <name>_HasField</name>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad1d49370813304c9adf21447c263e335" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>static VtValue _GetField</definition>
        <argsstring>(const SdfSchemaBase &amp;schema, const SdfAbstractData &amp;data, const SdfPath &amp;path, const TfToken &amp;fieldName)</argsstring>
        <name>_GetField</name>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_abstract_data" kindref="compound">SdfAbstractData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1789" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sdf_layer_1aee8782ce3da2d88eee5b02a904d0a345" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _FinishInitialization</definition>
        <argsstring>(bool success)</argsstring>
        <name>_FinishInitialization</name>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae01fa5a9398e56c2068ac885876779e5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _WaitForInitializationAndCheckIfSuccessful</definition>
        <argsstring>()</argsstring>
        <name>_WaitForInitializationAndCheckIfSuccessful</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1483264a29f02163e8c8b6414a643587" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ShouldNotify</definition>
        <argsstring>() const</argsstring>
        <name>_ShouldNotify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a811bf8453c3c9c3e25ad799a3853f9b2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _UpdateLastDirtinessState</definition>
        <argsstring>() const</argsstring>
        <name>_UpdateLastDirtinessState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a237f869cb69403f66b327aa1d569bec9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_sdf_handle" kindref="compound">SdfHandle</ref>&lt; T &gt;</type>
        <definition>SdfHandle&lt;T&gt; _GetSpecAtPath</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>_GetSpecAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aad15ac4d08c90164e7cd1d1d30749bd2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _CanGetSpecAtPath</definition>
        <argsstring>(const SdfPath &amp;path, SdfPath *canonicalPath, SdfSpecType *specType) const</argsstring>
        <name>_CanGetSpecAtPath</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="class_sdf_path" kindref="compound">SdfPath</ref> *</type>
          <declname>canonicalPath</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref> *</type>
          <declname>specType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa9eea7d6155ae43d99fff44ef63ac4a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _InitializeFromIdentifier</definition>
        <argsstring>(const std::string &amp;identifier, const std::string &amp;realPath=std::string(), const std::string &amp;fileVersion=std::string(), const ArAssetInfo &amp;assetInfo=ArAssetInfo())</argsstring>
        <name>_InitializeFromIdentifier</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>realPath</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileVersion</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>const <ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref> &amp;</type>
          <declname>assetInfo</declname>
          <defval><ref refid="class_ar_asset_info" kindref="compound">ArAssetInfo</ref>()</defval>
        </param>
        <briefdescription>
<para>Initialize layer internals that are based on it&apos;s path. </para>
        </briefdescription>
        <detaileddescription>
<para>This includes the asset path and show path the layer to be loaded reflects at the point of initialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1adfacda2c1f8e02bbdcebf0e26855fbba" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsInert</definition>
        <argsstring>(const SdfPath &amp;path, bool ignoreChildren, bool requiredFieldOnlyPropertiesAreInert=false) const</argsstring>
        <name>_IsInert</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreChildren</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>requiredFieldOnlyPropertiesAreInert</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if the spec at the specified path has no effect on the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>If ignoreChildren is true, this will ignore prim and property children of prim specs. Property specs are always considered to be non-inert unless they have only required fields and requiredFieldOnlyPropertiesareInert is set to false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a622ced2204ff227dce61dd2de28b28c9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsInertSubtree</definition>
        <argsstring>(const SdfPath &amp;path) const</argsstring>
        <name>_IsInertSubtree</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return true if the entire subtree rooted at <emphasis>path</emphasis> does not affect the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>For this purpose, property specs that have only required fields are considered inert. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1725" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a12cc51ad30885f50ad1bc6c0d1e677fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RemoveIfInert</definition>
        <argsstring>(const SdfSpec &amp;spec)</argsstring>
        <name>_RemoveIfInert</name>
        <param>
          <type>const <ref refid="class_sdf_spec" kindref="compound">SdfSpec</ref> &amp;</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
<para>Cause <computeroutput>spec</computeroutput> to be removed if it does not affect the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>This removes any empty descendants before checking if <computeroutput>spec</computeroutput> itself is inert. Property specs are always considered non-inert, so this will remove them if they have only required fields (see PropertySpec::HasOnlyRequiredFields). This also removes inert ancestors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ace3c2351d2208aa51a43c9c03a7abe0f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _RemoveInertDFS</definition>
        <argsstring>(SdfPrimSpecHandle prim)</argsstring>
        <name>_RemoveInertDFS</name>
        <param>
          <type>SdfPrimSpecHandle</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Performs a depth first search of the namespace hierarchy, beginning at <computeroutput>prim</computeroutput>, removing prims that do not affect the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>The return value indicates whether the prim passed in is now inert as a result of this call, and can itself be removed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab720bc9c26e13a1335ebe801c782cc4b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _RemoveInertToRootmost</definition>
        <argsstring>(SdfPrimSpecHandle prim)</argsstring>
        <name>_RemoveInertToRootmost</name>
        <param>
          <type>SdfPrimSpecHandle</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>If <computeroutput>prim</computeroutput> is inert (has no affect on the scene), removes prim, then prunes inert parent prims back to the root. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa1e44872edec155f4101b56b925dadb4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _ValidateAuthoring</definition>
        <argsstring>() const</argsstring>
        <name>_ValidateAuthoring</name>
        <briefdescription>
<para>Returns whether this layer is validating authoring operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1745" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="1745" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab822a475d9f85003c9d36cb6291cfaaf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string _GetMutedPath</definition>
        <argsstring>() const</argsstring>
        <name>_GetMutedPath</name>
        <briefdescription>
<para>Returns the path used in the muted layers set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7725395d99d04df0c7dee2f0d9cbdf4b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _UpdatePrimCompositionDependencyPaths</definition>
        <argsstring>(const SdfPrimSpecHandle &amp;parent, const std::string &amp;oldLayerPath, const std::string &amp;newLayerPath)</argsstring>
        <name>_UpdatePrimCompositionDependencyPaths</name>
        <param>
          <type>const SdfPrimSpecHandle &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oldLayerPath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>newLayerPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a17696c8a36272a7c5a9cbc92c1e1befc" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _MarkCurrentStateAsClean</definition>
        <argsstring>() const</argsstring>
        <name>_MarkCurrentStateAsClean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1afcdcb014fd863ee6b7a009be96d11c2f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sdf_schema_base_1_1_field_definition" kindref="compound">SdfSchema::FieldDefinition</ref> const  *</type>
        <definition>SdfSchema::FieldDefinition const* _GetRequiredFieldDef</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, SdfSpecType specType=SdfSpecTypeUnknown) const</argsstring>
        <name>_GetRequiredFieldDef</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
          <defval>SdfSpecTypeUnknown</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a01e01ce724a28357ecb44ddf20765398" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _SetValue</definition>
        <argsstring>(const TfToken &amp;key, T value)</argsstring>
        <name>_SetValue</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ade049220c66f1eba5b74734d089377db" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T _GetValue</definition>
        <argsstring>(const TfToken &amp;key) const</argsstring>
        <name>_GetValue</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa955d5f6545a57c14f8d1433b4bdaa94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_ReloadResult</type>
        <definition>_ReloadResult _Reload</definition>
        <argsstring>(bool force)</argsstring>
        <name>_Reload</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7e6c56ad31caf94a62ddc97eeaf584a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _Read</definition>
        <argsstring>(const std::string &amp;identifier, const ArResolvedPath &amp;resolvedPath, bool metadataOnly)</argsstring>
        <name>_Read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type>const <ref refid="class_ar_resolved_path" kindref="compound">ArResolvedPath</ref> &amp;</type>
          <declname>resolvedPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>metadataOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1807" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0fcfd529c81d135c2291cc1c323e81d3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _Save</definition>
        <argsstring>(bool force) const</argsstring>
        <name>_Save</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a977079fa55f23759eb9bf2bbef4abeba" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _WriteToFile</definition>
        <argsstring>(const std::string &amp;newFileName, const std::string &amp;comment, SdfFileFormatConstPtr fileFormat=TfNullPtr, const FileFormatArguments &amp;args=FileFormatArguments()) const</argsstring>
        <name>_WriteToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>newFileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>SdfFileFormatConstPtr</type>
          <declname>fileFormat</declname>
          <defval>TfNullPtr</defval>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref> &amp;</type>
          <declname>args</declname>
          <defval><ref refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" kindref="member">FileFormatArguments</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a644f7cdd2644639bb8eefcc36e0c87ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SwapData</definition>
        <argsstring>(SdfAbstractDataRefPtr &amp;data)</argsstring>
        <name>_SwapData</name>
        <param>
          <type>SdfAbstractDataRefPtr &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1830" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1aa08d8f7123102cf370923213ae53fc30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AdoptData</definition>
        <argsstring>(const SdfAbstractDataRefPtr &amp;newData)</argsstring>
        <name>_AdoptData</name>
        <param>
          <type>const SdfAbstractDataRefPtr &amp;</type>
          <declname>newData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a7eb2ca243f7ab24a87d41449396e2259" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetData</definition>
        <argsstring>(const SdfAbstractDataPtr &amp;newData, const SdfSchemaBase *newDataSchema=nullptr)</argsstring>
        <name>_SetData</name>
        <param>
          <type>const SdfAbstractDataPtr &amp;</type>
          <declname>newData</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_schema_base" kindref="compound">SdfSchemaBase</ref> *</type>
          <declname>newDataSchema</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac145c30a94565267badee6c77c3f9684" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAbstractDataConstPtr</type>
        <definition>SdfAbstractDataConstPtr _GetData</definition>
        <argsstring>() const</argsstring>
        <name>_GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ae56b94226796e98a0bbf97b806c6bf90" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>SdfAbstractDataRefPtr</type>
        <definition>SdfAbstractDataRefPtr _CreateData</definition>
        <argsstring>() const</argsstring>
        <name>_CreateData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1850" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a3ad7b6aab0be6f8761c01d1e6abd5807" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _PrimSetField</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const T &amp;value, VtValue *oldValue=nullptr, bool useDelegate=true)</argsstring>
        <name>_PrimSetField</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>oldValue</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a60547a1d82d55ed8d9ff1fbac71d63ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _PrimSetFieldDictValueByKey</definition>
        <argsstring>(const SdfPath &amp;path, const TfToken &amp;fieldName, const TfToken &amp;keyPath, const T &amp;value, VtValue *oldValue=nullptr, bool useDelegate=true)</argsstring>
        <name>_PrimSetFieldDictValueByKey</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>keyPath</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> *</type>
          <declname>oldValue</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1870" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a0d89076c75be9e4782366bd06dd50136" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _PrimPushChild</definition>
        <argsstring>(const SdfPath &amp;parentPath, const TfToken &amp;fieldName, const T &amp;value, bool useDelegate=true)</argsstring>
        <name>_PrimPushChild</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>parentPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a1f3b6edcee55ffae055f1a6d33c8b96a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _PrimPopChild</definition>
        <argsstring>(const SdfPath &amp;parentPath, const TfToken &amp;fieldName, bool useDelegate=true)</argsstring>
        <name>_PrimPopChild</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>parentPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a4d759404a3c6d00f9fe91c15e87d76a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _MoveSpec</definition>
        <argsstring>(const SdfPath &amp;oldPath, const SdfPath &amp;newPath)</argsstring>
        <name>_MoveSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a16b4b3de67c4744752db09c76992d765" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrimMoveSpec</definition>
        <argsstring>(const SdfPath &amp;oldPath, const SdfPath &amp;newPath, bool useDelegate=true)</argsstring>
        <name>_PrimMoveSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>oldPath</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>newPath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1894" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a86d3cbfe4412c0509fc7d87856649b6d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _CreateSpec</definition>
        <argsstring>(const SdfPath &amp;path, SdfSpecType specType, bool inert)</argsstring>
        <name>_CreateSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ab3d82252ced8ce99c5118e47df91751e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _DeleteSpec</definition>
        <argsstring>(const SdfPath &amp;path)</argsstring>
        <name>_DeleteSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ac623ffa829f915280dd5fc817cf539a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrimCreateSpec</definition>
        <argsstring>(const SdfPath &amp;path, SdfSpecType specType, bool inert, bool useDelegate=true)</argsstring>
        <name>_PrimCreateSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1a1393f770f7685f4c58baf0b34679e522" kindref="member">SdfSpecType</ref></type>
          <declname>specType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inert</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a73ad1e60b32c33a7c6e5fe5afd9c284c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _PrimDeleteSpec</definition>
        <argsstring>(const SdfPath &amp;path, bool inert, bool useDelegate=true)</argsstring>
        <name>_PrimDeleteSpec</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inert</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1910" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1ad98ad5e7a78518e72a5311622193a40e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _PrimSetTimeSample</definition>
        <argsstring>(const SdfPath &amp;path, double time, const T &amp;value, bool useDelegate=true)</argsstring>
        <name>_PrimSetTimeSample</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useDelegate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_sdf_layer_1a8e70b551be7b7d25ed746edfcb850248" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ChildPolicy</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void _TraverseChildren</definition>
        <argsstring>(const SdfPath &amp;path, const TraversalFunction &amp;func)</argsstring>
        <name>_TraverseChildren</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_layer_1af6a1235e08b50e0ef16f3b8dcf5aae13" kindref="member">TraversalFunction</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/sdf/layer.h" line="1922" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A scene description container that can combine with other such containers to form simple component assets, and successively larger aggregates. </para>
    </briefdescription>
    <detaileddescription>
<para>The contents of an <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> adhere to the <ref refid="class_sdf_data" kindref="compound">SdfData</ref> data model. A layer can be ephemeral, or be an asset accessed and serialized through the <ref refid="class_ar_asset" kindref="compound">ArAsset</ref> and <ref refid="class_ar_resolver" kindref="compound">ArResolver</ref> interfaces.</para>
<para>The <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> class provides a consistent API for accesing and serializing scene description, using any data store provided by Ar plugins. Sdf itself provides a UTF-8 text format for layers identified by the &quot;.sdf&quot; identifier extension, but via the <ref refid="class_sdf_file_format" kindref="compound">SdfFileFormat</ref> abstraction, allows downstream modules and plugins to adapt arbitrary data formats to the SdfData/SdfLayer model.</para>
<para>The <ref refid="class_sdf_layer_1aa01062bf4dde3f28c1fc617a1acaf35e" kindref="member">FindOrOpen()</ref> method returns a new <ref refid="class_sdf_layer" kindref="compound">SdfLayer</ref> object with scene description from any supported asset format. Once read, a layer remembers which asset it was read from. The <ref refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" kindref="member">Save()</ref> method saves the layer back out to the original asset. You can use the <ref refid="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" kindref="member">Export()</ref> method to write the layer to a different location. You can use the <ref refid="class_sdf_layer_1ad28666c5057c69ccd19ba802bca8c2a4" kindref="member">GetIdentifier()</ref> method to get the layer&apos;s Id or <ref refid="class_sdf_layer_1a79545e0bdaa30193e514cecd411e3f3e" kindref="member">GetRealPath()</ref> to get the resolved, full URI.</para>
<para>Layer identifiers are UTF-8 encoded strings. A layer&apos;s file format is determined via the identifier&apos;s extension (as resolved by Ar) with [A-Z] (and no other characters) explicitly case folded.</para>
<para>Layers can have a timeCode range (startTimeCode and endTimeCode). This range represents the suggested playback range, but has no impact on the extent of the animation data that may be stored in the layer. The metadatum &quot;timeCodesPerSecond&quot; is used to annotate how the time ordinate for samples contained in the file scales to seconds. For example, if timeCodesPerSecond is 24, then a sample at time ordinate 24 should be viewed exactly one second after the sample at time ordinate 0. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5067">
        <label>SdfLayer</label>
        <link refid="class_sdf_layer"/>
        <childnode refid="5068" relation="public-inheritance">
        </childnode>
        <childnode refid="5069" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5069">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5068">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5070">
        <label>SdfLayer</label>
        <link refid="class_sdf_layer"/>
        <childnode refid="5071" relation="public-inheritance">
        </childnode>
        <childnode refid="5072" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5072">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="5071">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/sdf/layer.h" line="101" column="1" bodyfile="pxr/usd/sdf/layer.h" bodystart="98" bodyend="2009"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_sdf_layer_1aa08d8f7123102cf370923213ae53fc30" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_AdoptData</name></member>
      <member refid="class_sdf_layer_1ab255b18e69ee394a5353602d0d1e099d" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_assetInfo</name></member>
      <member refid="class_sdf_layer_1aa2b4529de16f2a85c6e3e46509010948" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_assetModificationTime</name></member>
      <member refid="class_sdf_layer_1aad15ac4d08c90164e7cd1d1d30749bd2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CanGetSpecAtPath</name></member>
      <member refid="class_sdf_layer_1a9b059bc64f672d01bc50fb8e5f6dde3a" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ComputeInfoToFindOrOpenLayer</name></member>
      <member refid="class_sdf_layer_1a0e8f0464ad45e08ebae11ee3553d42e4" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CreateAnonymousWithFormat</name></member>
      <member refid="class_sdf_layer_1ae56b94226796e98a0bbf97b806c6bf90" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CreateData</name></member>
      <member refid="class_sdf_layer_1a097795644e2d1f38c0db150b3c16a8e2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CreateNew</name></member>
      <member refid="class_sdf_layer_1a856fb55ba6de0fae950baff1ef5a5d2c" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CreateNewWithFormat</name></member>
      <member refid="class_sdf_layer_1a86d3cbfe4412c0509fc7d87856649b6d" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_CreateSpec</name></member>
      <member refid="class_sdf_layer_1a32675f926253f44ff65c04c14bdd0325" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_data</name></member>
      <member refid="class_sdf_layer_1ab3d82252ced8ce99c5118e47df91751e" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_DeleteSpec</name></member>
      <member refid="class_sdf_layer_1a3957e188cc982f76d339a7f90fdf4620" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_externalAssetModificationTimes</name></member>
      <member refid="class_sdf_layer_1ad4b5eb600d4a9dcd5ac72f91c3d2b608" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_fileFormat</name></member>
      <member refid="class_sdf_layer_1a4cd19edbaccd618732ee599661a848dc" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_fileFormatArgs</name></member>
      <member refid="class_sdf_layer_1a7769b54750618c9c5d83bdd7de3a59a4" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_Find</name></member>
      <member refid="class_sdf_layer_1aee8782ce3da2d88eee5b02a904d0a345" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_FinishInitialization</name></member>
      <member refid="class_sdf_layer_1ac145c30a94565267badee6c77c3f9684" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetData</name></member>
      <member refid="class_sdf_layer_1ad1d49370813304c9adf21447c263e335" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetField</name></member>
      <member refid="class_sdf_layer_1ab822a475d9f85003c9d36cb6291cfaaf" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetMutedPath</name></member>
      <member refid="class_sdf_layer_1afcdcb014fd863ee6b7a009be96d11c2f" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetRequiredFieldDef</name></member>
      <member refid="class_sdf_layer_1ad4202c55a6eef307ef5e31188a337a57" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetRequiredFieldDef</name></member>
      <member refid="class_sdf_layer_1a237f869cb69403f66b327aa1d569bec9" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetSpecAtPath</name></member>
      <member refid="class_sdf_layer_1ade049220c66f1eba5b74734d089377db" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_GetValue</name></member>
      <member refid="class_sdf_layer_1aa1949fe7560fae369a80f57be4794aaf" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_HasField</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>SdfLayer</scope><name>_HasRemnant</name></member>
      <member refid="class_sdf_layer_1a254761f762258e1b4a963f7265cf24ee" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_hints</name></member>
      <member refid="class_sdf_layer_1a547557cf4874bfa5f78508b5eb54afa2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_idRegistry</name></member>
      <member refid="class_sdf_layer_1a833318c5ed09e733b7198e3cbd688ad8" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_initDispatcher</name></member>
      <member refid="class_sdf_layer_1aae641f42eaf191ba9aaad3dbb00476fb" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_initializationComplete</name></member>
      <member refid="class_sdf_layer_1a8c7560b3f3b16f8357e1ef0173d337dc" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_initializationWasSuccessful</name></member>
      <member refid="class_sdf_layer_1aa9eea7d6155ae43d99fff44ef63ac4a0" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_InitializeFromIdentifier</name></member>
      <member refid="class_sdf_layer_1adfacda2c1f8e02bbdcebf0e26855fbba" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_IsInert</name></member>
      <member refid="class_sdf_layer_1a622ced2204ff227dce61dd2de28b28c9" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_IsInertSubtree</name></member>
      <member refid="class_sdf_layer_1aa4073dff080f947c5be26b21657886c4" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_isMutedCache</name></member>
      <member refid="class_sdf_layer_1aae73f8ad7f3c8907428812176369bafd" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_lastDirtyState</name></member>
      <member refid="class_sdf_layer_1add170a1b06b6159a6d3bef9da7a16f72" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ListFields</name></member>
      <member refid="class_sdf_layer_1a17696c8a36272a7c5a9cbc92c1e1befc" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_MarkCurrentStateAsClean</name></member>
      <member refid="class_sdf_layer_1a4d759404a3c6d00f9fe91c15e87d76a0" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_MoveSpec</name></member>
      <member refid="class_sdf_layer_1a7525cb51cc0b4a89767e6aa93336539c" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_mutedLayersRevisionCache</name></member>
      <member refid="class_sdf_layer_1a22f4ebc9620066a0b7ba34aabf20e524" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_OpenLayerAndUnlockRegistry</name></member>
      <member refid="class_sdf_layer_1a5ab71d61b4cf495e8e5b1e2004e5b114" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_permissionToEdit</name></member>
      <member refid="class_sdf_layer_1ae02f616a00c164a916abf372249d2790" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_permissionToSave</name></member>
      <member refid="class_sdf_layer_1ac623ffa829f915280dd5fc817cf539a0" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimCreateSpec</name></member>
      <member refid="class_sdf_layer_1a73ad1e60b32c33a7c6e5fe5afd9c284c" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimDeleteSpec</name></member>
      <member refid="class_sdf_layer_1a16b4b3de67c4744752db09c76992d765" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimMoveSpec</name></member>
      <member refid="class_sdf_layer_1a1f3b6edcee55ffae055f1a6d33c8b96a" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimPopChild</name></member>
      <member refid="class_sdf_layer_1a0d89076c75be9e4782366bd06dd50136" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimPushChild</name></member>
      <member refid="class_sdf_layer_1a3ad7b6aab0be6f8761c01d1e6abd5807" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimSetField</name></member>
      <member refid="class_sdf_layer_1a60547a1d82d55ed8d9ff1fbac71d63ce" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimSetFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1ad98ad5e7a78518e72a5311622193a40e" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_PrimSetTimeSample</name></member>
      <member refid="class_sdf_layer_1a7e6c56ad31caf94a62ddc97eeaf584a2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_Read</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>SdfLayer</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>SdfLayer</scope><name>_Register</name></member>
      <member refid="class_sdf_layer_1aa955d5f6545a57c14f8d1433b4bdaa94" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_Reload</name></member>
      <member refid="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea4d5a42e4872fffb816230fa80bdb9c8a" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ReloadFailed</name></member>
      <member refid="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fe" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ReloadResult</name></member>
      <member refid="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea469fe9e82237c33797fb0cfad2f8445a" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ReloadSkipped</name></member>
      <member refid="class_sdf_layer_1a45dd99aeaa4f3f2124ca49166817d1fea24b3e70bb304113d133fab701f0880fa" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ReloadSucceeded</name></member>
      <member refid="class_sdf_layer_1a12cc51ad30885f50ad1bc6c0d1e677fe" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_RemoveIfInert</name></member>
      <member refid="class_sdf_layer_1ace3c2351d2208aa51a43c9c03a7abe0f" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_RemoveInertDFS</name></member>
      <member refid="class_sdf_layer_1ab720bc9c26e13a1335ebe801c782cc4b" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_RemoveInertToRootmost</name></member>
      <member refid="class_sdf_layer_1a0fcfd529c81d135c2291cc1c323e81d3" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_Save</name></member>
      <member refid="class_sdf_layer_1aba5da2da1272c34471ec40765cb680aa" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_schema</name></member>
      <member refid="class_sdf_layer_1a4453162c5d5fdc96fa94263549fe7007" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_self</name></member>
      <member refid="class_sdf_layer_1a7eb2ca243f7ab24a87d41449396e2259" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_SetData</name></member>
      <member refid="class_sdf_layer_1a01e01ce724a28357ecb44ddf20765398" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_SetValue</name></member>
      <member refid="class_sdf_layer_1a1483264a29f02163e8c8b6414a643587" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ShouldNotify</name></member>
      <member refid="class_sdf_layer_1a33e69106d00d6fc9a26963d10a71fff2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_stateDelegate</name></member>
      <member refid="class_sdf_layer_1a644f7cdd2644639bb8eefcc36e0c87ac" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_SwapData</name></member>
      <member refid="class_sdf_layer_1a8e70b551be7b7d25ed746edfcb850248" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_TraverseChildren</name></member>
      <member refid="class_sdf_layer_1a02f93c2bdd9a26189632dae4c74ecf8e" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_TryToFindLayer</name></member>
      <member refid="class_sdf_layer_1a811bf8453c3c9c3e25ad799a3853f9b2" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_UpdateLastDirtinessState</name></member>
      <member refid="class_sdf_layer_1a7725395d99d04df0c7dee2f0d9cbdf4b" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_UpdatePrimCompositionDependencyPaths</name></member>
      <member refid="class_sdf_layer_1af71edf9f7d68313f4d0ac1e20ee2d088" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_validateAuthoring</name></member>
      <member refid="class_sdf_layer_1aa1e44872edec155f4101b56b925dadb4" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_ValidateAuthoring</name></member>
      <member refid="class_sdf_layer_1ae01fa5a9398e56c2068ac885876779e5" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_WaitForInitializationAndCheckIfSuccessful</name></member>
      <member refid="class_sdf_layer_1a977079fa55f23759eb9bf2bbef4abeba" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>_WriteToFile</name></member>
      <member refid="class_sdf_layer_1a1a94f39a1df55831269c40482430b81f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>AddToMutedLayers</name></member>
      <member refid="class_sdf_layer_1a8dfd77081bffed0ad2236f6044e5d234" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Apply</name></member>
      <member refid="class_sdf_layer_1abbc1752ab0be5eeee1b469b4aa68f259" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ApplyRootPrimOrder</name></member>
      <member refid="class_sdf_layer_1a2eb78636f680437024e8569798e995ed" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CanApply</name></member>
      <member refid="class_sdf_layer_1a9013e716d1676f98b48ab913031e6d01" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Clear</name></member>
      <member refid="class_sdf_layer_1a8c4da09d914d270cd700caf5633696bd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearColorConfiguration</name></member>
      <member refid="class_sdf_layer_1aadc9b52884d3decc40579b1cdce66ef7" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearColorManagementSystem</name></member>
      <member refid="class_sdf_layer_1a13460d5ee4e91c1691232a322f3b46d4" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearCustomLayerData</name></member>
      <member refid="class_sdf_layer_1ac306053a290ac326217f8c1332723b0a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearDefaultPrim</name></member>
      <member refid="class_sdf_layer_1a3d548f78a40f05d669177e4318de86ca" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearEndTimeCode</name></member>
      <member refid="class_sdf_layer_1aa2faf45db51c40d881c09bcb20ef9a87" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearExpressionVariables</name></member>
      <member refid="class_sdf_layer_1acf9af80fee10c27aac63cb9862ac73a5" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearFramePrecision</name></member>
      <member refid="class_sdf_layer_1a7f3ee0b5c7f6e6d8140534abe7ae5999" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearFramesPerSecond</name></member>
      <member refid="class_sdf_layer_1afce6dfb380672632518157f12e5bad32" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearOwner</name></member>
      <member refid="class_sdf_layer_1a478d8e42955d208ba616c9b29cd4f526" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearSessionOwner</name></member>
      <member refid="class_sdf_layer_1a61c4f649c9037b836dfac4121b1effcc" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearStartTimeCode</name></member>
      <member refid="class_sdf_layer_1a1378409f87c758c85c8efa1af2929dbc" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ClearTimeCodesPerSecond</name></member>
      <member refid="class_sdf_layer_1ace248ff849a8940a1978aebe58f1fb4a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ComputeAbsolutePath</name></member>
      <member refid="class_sdf_layer_1a863d3cfd8e7c4bbee08f067978e9738e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CreateAnonymous</name></member>
      <member refid="class_sdf_layer_1a1d73898041821cc882754eb7575da8d9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CreateAnonymous</name></member>
      <member refid="class_sdf_layer_1a945800f72e30b5b425b26a4ee6f46ffc" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CreateIdentifier</name></member>
      <member refid="class_sdf_layer_1aad57cd44403a4f95a2bb6c730fa1b0f5" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CreateNew</name></member>
      <member refid="class_sdf_layer_1a55579835f5dd236a0e49c6e5a7e65593" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>CreateNew</name></member>
      <member refid="class_sdf_layer_1ac30f9663f2fafb435e00b69d862bee69" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>DumpLayerInfo</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>EnableNotification2</name></member>
      <member refid="class_sdf_layer_1a35e70ff0ddc2c4d113f72ee6a07ffab5" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>EraseField</name></member>
      <member refid="class_sdf_layer_1af5ef87b93f44cfb9686dd0a82b57ed73" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>EraseFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1a4d89ef3768fecb1ec9816832c2066c9f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>EraseTimeSample</name></member>
      <member refid="class_sdf_layer_1aef819927fc1ad0d6fc5ad5fefb58dcdf" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Export</name></member>
      <member refid="class_sdf_layer_1a8ea493056e94ea7cf0464fb0a87fc78a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ExportToString</name></member>
      <member refid="class_sdf_layer_1a1dfd2030337b6243cd6424fce7397590" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>FileFormatArguments</name></member>
      <member refid="class_sdf_layer_1acc4e19f5c2bf0bab57804acee65ebb78" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Find</name></member>
      <member refid="class_sdf_layer_1aa01062bf4dde3f28c1fc617a1acaf35e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>FindOrOpen</name></member>
      <member refid="class_sdf_layer_1ae141c9e12217822129795473a0758cf2" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>FindOrOpenRelativeToLayer</name></member>
      <member refid="class_sdf_layer_1a2dc2998391cdbbf67be2f82f5ddf38f9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>FindRelativeToLayer</name></member>
      <member refid="class_sdf_layer_1a20a10b035b2f796ca46ca49002a52db8" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetAssetInfo</name></member>
      <member refid="class_sdf_layer_1a3e6dff122d8bee338321f78e875f6bba" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetAssetName</name></member>
      <member refid="class_sdf_layer_1acf48e0faa064233379b2131845c1a4c3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetAttributeAtPath</name></member>
      <member refid="class_sdf_layer_1a30d3024f970490770d62005d0db632b7" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetBracketingTimeSamples</name></member>
      <member refid="class_sdf_layer_1ab534720edf29321c3794268b2acb9922" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetBracketingTimeSamplesForPath</name></member>
      <member refid="class_sdf_layer_1a8cb0eb76a8aa1e26dc0949b4121f50e6" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetColorConfiguration</name></member>
      <member refid="class_sdf_layer_1a0410dd9c9d9156436b807c60a489729c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetColorManagementSystem</name></member>
      <member refid="class_sdf_layer_1aa09e2580406e4e30598f2a316ef029b1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetComment</name></member>
      <member refid="class_sdf_layer_1a667b3fd05c957d66c4d47752496b17b8" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetCompositionAssetDependencies</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetCurrentCount</name></member>
      <member refid="class_sdf_layer_1a4cdd82d1b72bd4aed0cc140be57cbb1b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetCustomLayerData</name></member>
      <member refid="class_sdf_layer_1a9f4bc091a43e577b49007cceed42e6ae" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetDefaultPrim</name></member>
      <member refid="class_sdf_layer_1ac776a3909ca1c9f6576495b12bf9789d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetDetachedLayerRules</name></member>
      <member refid="class_sdf_layer_1acab74645dbf8de67523de409a2ef2eac" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetDisplayName</name></member>
      <member refid="class_sdf_layer_1ae998e77457a609421a8f0314ab532135" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetDisplayNameFromIdentifier</name></member>
      <member refid="class_sdf_layer_1a5f4c1bc9f2f793b24014551075d7cb6b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetDocumentation</name></member>
      <member refid="class_sdf_layer_1a12312adadba91980a823fd4d2658fd3e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetEndTimeCode</name></member>
      <member refid="class_sdf_layer_1a7b055e82a7ac610d5c4eb427bf30493f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetExpressionVariables</name></member>
      <member refid="class_sdf_layer_1ad168f0658add394429de6cc94d5139a0" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetExternalAssetDependencies</name></member>
      <member refid="class_sdf_layer_1aec4e791001e505a12312d2aa525915f3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetExternalReferences</name></member>
      <member refid="class_sdf_layer_1a73dabb7e84de9f39850567fa933f56b3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetField</name></member>
      <member refid="class_sdf_layer_1aa6fb7f9ae4c12e5ee8cc70e5e7c5c695" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFieldAs</name></member>
      <member refid="class_sdf_layer_1ad1693c6989ff4faf6595b6fc37eba83b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1ae0a283414fffa00c0fa81c261355584e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFieldTypeid</name></member>
      <member refid="class_sdf_layer_1a93a9f104f8c4226afb49b28fb72173c3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFileExtension</name></member>
      <member refid="class_sdf_layer_1a7599432247745341dbd6b9603098633f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFileFormat</name></member>
      <member refid="class_sdf_layer_1a0193260dcb2b4dec6be9d39e4daefea7" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFileFormatArguments</name></member>
      <member refid="class_sdf_layer_1a36e0d98ac0e03eabf889a110452cc6bf" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFramePrecision</name></member>
      <member refid="class_sdf_layer_1a6b8b53542bcf35783b8bc9181b4c0afc" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetFramesPerSecond</name></member>
      <member refid="class_sdf_layer_1a3fe23a713ba7b02aabda0804bc64bb30" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetHasOwnedSubLayers</name></member>
      <member refid="class_sdf_layer_1a9fa709386dae89b3b291db62c9fc725a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetHints</name></member>
      <member refid="class_sdf_layer_1ad28666c5057c69ccd19ba802bca8c2a4" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetIdentifier</name></member>
      <member refid="class_sdf_layer_1a44434498ce08818456337473fcebb4f3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetLoadedLayers</name></member>
      <member refid="class_sdf_layer_1a3000fa4a19a5f6c5644e65d518058114" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetMetadata</name></member>
      <member refid="class_sdf_layer_1a9e214098a31e65c1366e3f108e3d0649" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetMutedLayers</name></member>
      <member refid="class_sdf_layer_1a5a9d7171ab9660a3f031f45165a1bdca" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetNumSubLayerPaths</name></member>
      <member refid="class_sdf_layer_1a58bdecbc011fcb788b32fb10ff00be29" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetNumTimeSamplesForPath</name></member>
      <member refid="class_sdf_layer_1a6d1dda8e258a76e39f714888281258f0" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetObjectAtPath</name></member>
      <member refid="class_sdf_layer_1a35659899f40a4d6bf86879b849e3dd3e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetOwner</name></member>
      <member refid="class_sdf_layer_1a74b719b5ed16b6a09681fb2af6b71b77" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetPrimAtPath</name></member>
      <member refid="class_sdf_layer_1a886b9d1469064fde70bbb5145bc7b7dd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetPropertyAtPath</name></member>
      <member refid="class_sdf_layer_1a5eec4638a7dd72e71801f2513cb53636" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetPseudoRoot</name></member>
      <member refid="class_sdf_layer_1a79545e0bdaa30193e514cecd411e3f3e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRealPath</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRefCount</name></member>
      <member refid="class_sdf_layer_1afc7d4034921d9396b3e50719d1b0edbc" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRelationshipAtPath</name></member>
      <member refid="class_sdf_layer_1a2e91f61de5d2093bb3d17954878d9f01" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRepositoryPath</name></member>
      <member refid="class_sdf_layer_1a7de25c6aa86f3ef65061c62dd22db0ef" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetResolvedPath</name></member>
      <member refid="class_sdf_layer_1a250c7805632ed83ad251bd72811b2341" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRootPrimOrder</name></member>
      <member refid="class_sdf_layer_1a990a705e71a1616760ae031d7defa611" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetRootPrims</name></member>
      <member refid="class_sdf_layer_1a3bd6905e6ee12562d4702db19fe6cc1f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSchema</name></member>
      <member refid="class_sdf_layer_1af5e0d003a1cf1245988b1a6dc39271e3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSessionOwner</name></member>
      <member refid="class_sdf_layer_1ae184606be96bf4b6ed13e90ebef8b691" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSpecType</name></member>
      <member refid="class_sdf_layer_1ac5e81d8b05eea305e4f873ed6179f27c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetStartTimeCode</name></member>
      <member refid="class_sdf_layer_1abdece13b2b76a2f740c793127da0d960" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetStateDelegate</name></member>
      <member refid="class_sdf_layer_1a6d2a2e249c08d05e58514e2956dca77f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSubLayerOffset</name></member>
      <member refid="class_sdf_layer_1a588097f79df0bfce9ae97f6a2f322c37" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSubLayerOffsets</name></member>
      <member refid="class_sdf_layer_1a13ab878d9dfb9e97df31d39a6da874b1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetSubLayerPaths</name></member>
      <member refid="class_sdf_layer_1a8c7a1ac2e85efa2aa4831123de576b7c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetTimeCodesPerSecond</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_sdf_layer_1af094d8c40409f87d6ccf2f8ab50069b4" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>GetVersion</name></member>
      <member refid="class_sdf_layer_1ac30899714e12ee731b9d3cce9f6f84a2" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasColorConfiguration</name></member>
      <member refid="class_sdf_layer_1a6dc6870cf295989a3f0a9f4cf38d8f75" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasColorManagementSystem</name></member>
      <member refid="class_sdf_layer_1a54e6057c53aac8c9913564dacf557aa3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasCustomLayerData</name></member>
      <member refid="class_sdf_layer_1a5c5be6e4d708fe1aeec63877cd1e56ff" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasDefaultPrim</name></member>
      <member refid="class_sdf_layer_1a655929b81e0bd7d5a6ed7b670b9a4741" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasEndTimeCode</name></member>
      <member refid="class_sdf_layer_1aa26031353ee3979b47bee75dcae992bf" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasExpressionVariables</name></member>
      <member refid="class_sdf_layer_1a70f68af49de097c81e84a4d1d9b7ba1e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasField</name></member>
      <member refid="class_sdf_layer_1a771dd91f9c37a199f971365f7ec753cd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasField</name></member>
      <member refid="class_sdf_layer_1a0328b9af85eb35cfd3a485cd2cc85262" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasField</name></member>
      <member refid="class_sdf_layer_1a6b81a4bdc551fc7a705d9ed682394838" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasFieldDictKey</name></member>
      <member refid="class_sdf_layer_1a1d8ada6354786831f4e5901e6e52370a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasFieldDictKey</name></member>
      <member refid="class_sdf_layer_1ad6046927ca3b4cabbf4ced064a58da78" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasFieldDictKey</name></member>
      <member refid="class_sdf_layer_1a1dd163b209e95e99f086f59cdaae7777" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasFramePrecision</name></member>
      <member refid="class_sdf_layer_1a3a4ab65a753a2e697940fe89e0ffcaa0" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasFramesPerSecond</name></member>
      <member refid="class_sdf_layer_1a3a64298456bdbe500419e986e77140b1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasOwner</name></member>
      <member refid="class_sdf_layer_1a24f54baa826fec0738291834c9ecba14" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasSessionOwner</name></member>
      <member refid="class_sdf_layer_1a2844a06c049f7628e4a63219bea4d024" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasSpec</name></member>
      <member refid="class_sdf_layer_1a859a9b23428496a5a9fb41ba82c19b13" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasStartTimeCode</name></member>
      <member refid="class_sdf_layer_1ac654541953d42f7c6d0f7d5ec2a9597b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>HasTimeCodesPerSecond</name></member>
      <member refid="class_sdf_layer_1a031a0d6dd1b5be5a9de24f406dd61f0c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Import</name></member>
      <member refid="class_sdf_layer_1a291d43b52355bd1b94554081ec8cbadf" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ImportFromString</name></member>
      <member refid="class_sdf_layer_1a194675ddc6ebd251b959efef1cdbbe23" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>InsertInRootPrimOrder</name></member>
      <member refid="class_sdf_layer_1aa80ec26f7ca0843eef6f453276b5be13" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>InsertRootPrim</name></member>
      <member refid="class_sdf_layer_1ab4a00b935e75299bd952df98274d0fe1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>InsertSubLayerPath</name></member>
      <member refid="class_sdf_layer_1a8c97c0184434a6e0a5a5a849587f19df" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsAnonymous</name></member>
      <member refid="class_sdf_layer_1a3e4b0c1c685a16d67dd0c894fdff6e16" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsAnonymousLayerIdentifier</name></member>
      <member refid="class_sdf_layer_1a742d86d8014873ce73a0c74e29f03c22" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsDetached</name></member>
      <member refid="class_sdf_layer_1a27597b2d933d972e8c48eb384bde7159" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsDirty</name></member>
      <member refid="class_sdf_layer_1a3358bd17e69a5ac3591d1f1925f3d093" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsEmpty</name></member>
      <member refid="class_sdf_layer_1ae72f4b38c480a88ee576fc034729768e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsIncludedByDetachedLayerRules</name></member>
      <member refid="class_sdf_layer_1a07c183036d6a257ab432d929d738cc5f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsMuted</name></member>
      <member refid="class_sdf_layer_1a333798b296c3eba50f4e84378f90f848" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsMuted</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>IsUnique</name></member>
      <member refid="class_sdf_layer_1a44de726d8e9d0f8e65f58bd9d0acd802" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ListAllTimeSamples</name></member>
      <member refid="class_sdf_layer_1add73835d4d77389f3e7dd123c2a37579" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ListFields</name></member>
      <member refid="class_sdf_layer_1a92ca43d9d3bae7e26313b04495e91b1f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ListTimeSamplesForPath</name></member>
      <member refid="class_sdf_layer_1afb9dfac8c0da8fe2a0f8351c6c9ca16b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>New</name></member>
      <member refid="class_sdf_layer_1a41a153db3ee9a29471e18d41186d5f7f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>OpenAsAnonymous</name></member>
      <member refid="class_sdf_layer_1a4989938906a91e4b87fed5eace5deac0" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual" ambiguityscope="TfWeakBase::"><scope>SdfLayer</scope><name>operator=</name></member>
      <member refid="class_sdf_layer_1a794044e16b8357b4fd1cd87438ed361f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>PermissionToEdit</name></member>
      <member refid="class_sdf_layer_1a69500b2435c0482185d36bf9a3af01f4" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>PermissionToSave</name></member>
      <member refid="class_sdf_layer_1af7c994bb64b9ec60edc348201c8c8658" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_layer_1adb4574285a2280004de48f232cbefedd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_layer_1ada4819bb9b321e8c67c7fc64d1a742c2" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>QueryTimeSample</name></member>
      <member refid="class_sdf_layer_1aadc795502e58ced5fec2a00cf282f27a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Reload</name></member>
      <member refid="class_sdf_layer_1aa1a671fa49fd6046fbb9c0da7366c07e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ReloadLayers</name></member>
      <member refid="class_sdf_layer_1a06bd565ff884d3c7a1636937d0f18a2d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveFromMutedLayers</name></member>
      <member refid="class_sdf_layer_1a782d055b012be6dc56a6c6ac64729474" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveFromRootPrimOrder</name></member>
      <member refid="class_sdf_layer_1a00348027acabf5fd14478278a19942c7" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveFromRootPrimOrderByIndex</name></member>
      <member refid="class_sdf_layer_1adcbb1b227f47fce7d6e1abea67177a64" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveInertSceneDescription</name></member>
      <member refid="class_sdf_layer_1a55468b05043d021961a36fdf4912863d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemovePrimIfInert</name></member>
      <member refid="class_sdf_layer_1a693516343167a81664d9a06fbf736358" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemovePropertyIfHasOnlyRequiredFields</name></member>
      <member refid="class_sdf_layer_1aa1d32a6a9342d589cebe0f74b2c88c79" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveRootPrim</name></member>
      <member refid="class_sdf_layer_1ace162f29eca4781f96bdac914ff9a18b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RemoveSubLayerPath</name></member>
      <member refid="class_sdf_layer_1a22c7986bd5a5497bde2624454a8c475f" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>RootPrimsView</name></member>
      <member refid="class_sdf_layer_1ad5a54175a9d67b72094f8fdf3e83c9d9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Save</name></member>
      <member refid="class_sdf_layer_1a48ae0463ad76959910554b73d1710524" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>ScheduleRemoveIfInert</name></member>
      <member refid="class_sdf_layer_1a1a89f4a4a79ef71b20f9b02cd0216d51" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>SdfAttributeSpec</name></member>
      <member refid="class_sdf_layer_1a322378f03491aa4ff46dbb23dfb30816" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>SdfFileFormat</name></member>
      <member refid="class_sdf_layer_1afa5543a57d7d034fd23d3a78d65f381a" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SdfLayer</name></member>
      <member refid="class_sdf_layer_1af76785600b53c551ae4f71ca36bd37b4" prot="protected" virt="non-virtual"><scope>SdfLayer</scope><name>SdfLayer</name></member>
      <member refid="class_sdf_layer_1aa8d8b482bd62c236f962bfbeaf122bc9" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>SdfLayerStateDelegateBase</name></member>
      <member refid="class_sdf_layer_1a147c49097c9c9842b62b53a0fe0d5abf" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>SdfPropertySpec</name></member>
      <member refid="class_sdf_layer_1a4993a9197bc3c3df5b7c09c876faae0a" prot="private" virt="non-virtual"><scope>SdfLayer</scope><name>SdfSpec</name></member>
      <member refid="class_sdf_layer_1a90329c5fe025b55c31297c178cb63d1b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetColorConfiguration</name></member>
      <member refid="class_sdf_layer_1a5835609e70d7bf8da1d46ebd870e63b1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetColorManagementSystem</name></member>
      <member refid="class_sdf_layer_1acd51e891ebac431521a4023679e7e558" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetComment</name></member>
      <member refid="class_sdf_layer_1a3e673eb41358c0ded49640b9e7d07cad" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetCustomLayerData</name></member>
      <member refid="class_sdf_layer_1aced01fe7c9cd1be544adf59275d2f1d2" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetDefaultPrim</name></member>
      <member refid="class_sdf_layer_1ad681e91b40aeca65208045c37131025d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetDetachedLayerRules</name></member>
      <member refid="class_sdf_layer_1a9fa7ae3c543b90bee933d6aa043ca5e1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetDocumentation</name></member>
      <member refid="class_sdf_layer_1aac25edcfb18a06051802f33d7fd321cf" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetEndTimeCode</name></member>
      <member refid="class_sdf_layer_1a9ebfdca378d2e9efc3cf4515ebfdff60" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetExpressionVariables</name></member>
      <member refid="class_sdf_layer_1a3cc1bdee6da86ab32fab6b57600ad107" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetField</name></member>
      <member refid="class_sdf_layer_1a2375433f073d8542d5385e6d041aea17" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetField</name></member>
      <member refid="class_sdf_layer_1ab6f8232b9927b625bd4a0526cf555969" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetField</name></member>
      <member refid="class_sdf_layer_1a188ca62371843b69c5ccf7b53680e4ae" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1abb1472b1dbe1e4ee5e6c57cec6e819e9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1a385e19b3828467c83f212f349e97c55e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetFieldDictValueByKey</name></member>
      <member refid="class_sdf_layer_1a2942f4a27163381c636df398038d6ca9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetFramePrecision</name></member>
      <member refid="class_sdf_layer_1a1b26eaab6264b5f5076e32611d068873" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetFramesPerSecond</name></member>
      <member refid="class_sdf_layer_1af3baa4bbc9ca8ed58ed29db551610c70" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetHasOwnedSubLayers</name></member>
      <member refid="class_sdf_layer_1a3f41453e8db55396f5f1600e2c82a023" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetIdentifier</name></member>
      <member refid="class_sdf_layer_1ab8ddfa9cfc21bb86b31ea70a6b17f887" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetMuted</name></member>
      <member refid="class_sdf_layer_1a94e8320138eb24fa2d0b3b917e0dad47" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetOwner</name></member>
      <member refid="class_sdf_layer_1a32ad22bde9522ec46ef46ce2b88dfd14" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetPermissionToEdit</name></member>
      <member refid="class_sdf_layer_1a37b20d1c8b230c3f97b536f7f2d734f8" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetPermissionToSave</name></member>
      <member refid="class_sdf_layer_1a7d0dc6273fc1a20800a1dc5e3955910d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetRootPrimOrder</name></member>
      <member refid="class_sdf_layer_1a5579e5fd624727801c8c5b9a82137e88" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetRootPrims</name></member>
      <member refid="class_sdf_layer_1a4a634d063577df429e654b55ccdeadba" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetSessionOwner</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_sdf_layer_1adad39dc615c7fa98499818fc9739d0f8" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetStartTimeCode</name></member>
      <member refid="class_sdf_layer_1aba4e944fec109a37ba959252c95683f5" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetStateDelegate</name></member>
      <member refid="class_sdf_layer_1afa9fbd4c26e8330e8b6046b19f9aabba" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetSubLayerOffset</name></member>
      <member refid="class_sdf_layer_1ac840d86ba010cb86281ddb056a790e7b" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetSubLayerPaths</name></member>
      <member refid="class_sdf_layer_1acc85c2ea5134d5d22e091fc0330a5717" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetTimeCodesPerSecond</name></member>
      <member refid="class_sdf_layer_1a48dbf4d551eeecaf7525b25946e320f3" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetTimeSample</name></member>
      <member refid="class_sdf_layer_1a87cfbc1f508421850ba96de1f3faf068" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetTimeSample</name></member>
      <member refid="class_sdf_layer_1a6bf13483e18c7f0a01da7ad08bed6b1e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetTimeSample</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_sdf_layer_1a3d1926f596211786a3f0b2b2a234257c" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>SplitIdentifier</name></member>
      <member refid="class_sdf_layer_1a174f5ef5b7240ba887ea486d72f266b2" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>StreamsData</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>TfWeakBase</name></member>
      <member refid="class_sdf_layer_1ae6740e45560005d4e44870800e85eb39" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>TransferContent</name></member>
      <member refid="class_sdf_layer_1af6a1235e08b50e0ef16f3b8dcf5aae13" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>TraversalFunction</name></member>
      <member refid="class_sdf_layer_1a04c0ba17ce18108ad8d2151e6591ffd9" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>Traverse</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_sdf_layer_1a836f19841c64abea48acfcf6e2cbd7a1" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>UpdateAssetInfo</name></member>
      <member refid="class_sdf_layer_1a1bf08efb9c654508515dbcab27588d9d" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>UpdateCompositionAssetDependency</name></member>
      <member refid="class_sdf_layer_1a64c7b4eb8b1990cf44dbdda3792f4d27" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>UpdateExternalReference</name></member>
      <member refid="class_sdf_layer_1aeafb4251d532baba5bcae2b726c66889" prot="public" virt="non-virtual"><scope>SdfLayer</scope><name>WriteDataFile</name></member>
      <member refid="class_sdf_layer_1a1c9b6bd68e69b230b5df79928ba37453" prot="public" virt="virtual"><scope>SdfLayer</scope><name>~SdfLayer</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>SdfLayer</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>SdfLayer</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
