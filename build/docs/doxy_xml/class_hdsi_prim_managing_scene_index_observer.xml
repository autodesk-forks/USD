<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hdsi_prim_managing_scene_index_observer" kind="class" language="C++" prot="public">
    <compoundname>HdsiPrimManagingSceneIndexObserver</compoundname>
    <basecompoundref refid="class_hd_scene_index_observer" prot="public" virt="non-virtual">HdSceneIndexObserver</basecompoundref>
    <basecompoundref refid="class_tf_ref_base" prot="public" virt="non-virtual">TfRefBase</basecompoundref>
    <includes refid="prim_managing_scene_index_observer_8h" local="no">primManagingSceneIndexObserver.h</includes>
    <innerclass refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_base" prot="public">HdsiPrimManagingSceneIndexObserver::PrimBase</innerclass>
    <innerclass refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_factory_base" prot="public">HdsiPrimManagingSceneIndexObserver::PrimFactoryBase</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_hdsi_prim_managing_scene_index_observer_1a67ff711f1dfdee5dcf1801043439aa0d" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_base" kindref="compound">PrimBase</ref> &gt;</type>
        <definition>using PrimBaseHandle =  std::shared_ptr&lt;PrimBase&gt;</definition>
        <argsstring></argsstring>
        <name>PrimBaseHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="94" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hdsi_prim_managing_scene_index_observer_1a470fb1287501cf1af3795fd054499142" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_factory_base" kindref="compound">PrimFactoryBase</ref> &gt;</type>
        <definition>using PrimFactoryBaseHandle =  std::shared_ptr&lt;PrimFactoryBase&gt;</definition>
        <argsstring></argsstring>
        <name>PrimFactoryBaseHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="109" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hdsi_prim_managing_scene_index_observer_1afac5685d0f875fa4142dee8254aec70c" prot="private" static="no" mutable="no">
        <type>HdSceneIndexBaseRefPtr const</type>
        <definition>HdSceneIndexBaseRefPtr const _sceneIndex</definition>
        <argsstring></argsstring>
        <name>_sceneIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="169" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdsi_prim_managing_scene_index_observer_1adb4f1388b3c74cfb4d47059f4fac3b51" prot="private" static="no" mutable="no">
        <type>PrimFactoryBaseHandle const</type>
        <definition>PrimFactoryBaseHandle const _primFactory</definition>
        <argsstring></argsstring>
        <name>_primFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="170" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hdsi_prim_managing_scene_index_observer_1abcfd06eea463a3fcb2be879d657a5369" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="class_sdf_path" kindref="compound">SdfPath</ref>, PrimBaseHandle &gt;</type>
        <definition>std::map&lt;SdfPath, PrimBaseHandle&gt; _prims</definition>
        <argsstring></argsstring>
        <name>_prims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="175" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1af934622c30aa857198381ecd84b7298b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HdsiPrimManagingSceneIndexObserverRefPtr</type>
        <definition>static HdsiPrimManagingSceneIndexObserverRefPtr New</definition>
        <argsstring>(HdSceneIndexBaseRefPtr const &amp;sceneIndex, HdContainerDataSourceHandle const &amp;inputArgs)</argsstring>
        <name>New</name>
        <param>
          <type>HdSceneIndexBaseRefPtr const &amp;</type>
          <declname>sceneIndex</declname>
        </param>
        <param>
          <type>HdContainerDataSourceHandle const &amp;</type>
          <declname>inputArgs</declname>
        </param>
        <briefdescription>
<para>C&apos;tor. </para>
        </briefdescription>
        <detaileddescription>
<para>Prim factory can be given through inputArgs as PrimFactoryBaseHandle typed data source under HdsiPrimManagingSceneIndexObserverTokens-&gt;primFactory key. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="115" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="115" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1afc7efbb1a1ce043393d944e39e1ad649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDSI_API</type>
        <definition>HDSI_API ~HdsiPrimManagingSceneIndexObserver</definition>
        <argsstring>() override</argsstring>
        <name>~HdsiPrimManagingSceneIndexObserver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a49c305afefc0269e8227344a662f8bd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const HdSceneIndexBaseRefPtr &amp;</type>
        <definition>const HdSceneIndexBaseRefPtr&amp; GetSceneIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetSceneIndex</name>
        <briefdescription>
<para>Get observed scene index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="128" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a21498172b16421f4271ba38bbd11b5d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>HDSI_API const PrimBaseHandle &amp;</type>
        <definition>HDSI_API const PrimBaseHandle&amp; GetPrim</definition>
        <argsstring>(const SdfPath &amp;primPath) const</argsstring>
        <name>GetPrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Get managed prim at path. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients can prolong life-time of prim by holding on to the resulting handle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1afc4051d2f21e0f08a97fde50b210ce45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PrimType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; PrimType &gt;</type>
        <definition>std::shared_ptr&lt;PrimType&gt; GetTypedPrim</definition>
        <argsstring>(const SdfPath &amp;primPath) const</argsstring>
        <name>GetTypedPrim</name>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>primPath</declname>
        </param>
        <briefdescription>
<para>Get managed prim cast to a particular type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="142" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="142" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a79eb5085cdd0533b424f23e5594cd61b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PrimsAdded</definition>
        <argsstring>(const HdSceneIndexBase &amp;sender, const AddedPrimEntries &amp;entries) override</argsstring>
        <name>PrimsAdded</name>
        <reimplements refid="class_hd_scene_index_observer_1a486c4ae832a8d67b4a2704286baa7cbd">PrimsAdded</reimplements>
        <param>
          <type>const <ref refid="class_hd_scene_index_base" kindref="compound">HdSceneIndexBase</ref> &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_small_vector" kindref="compound">AddedPrimEntries</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>A notification indicating prims have been added to the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>The set of scene prims compiled from added/removed notices should match the set from a traversal based on <computeroutput>sender.GetChildPrimNames</computeroutput>. Each prim has a path and type. It&apos;s possible for <computeroutput>PrimsAdded</computeroutput> to be called for prims that already exist; in that case, observers should be sure to update the prim type, in case it changed, and resync the prim. This function is not expected to be threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1ab38a1b97a048f6b7548322448206032b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PrimsDirtied</definition>
        <argsstring>(const HdSceneIndexBase &amp;sender, const DirtiedPrimEntries &amp;entries) override</argsstring>
        <name>PrimsDirtied</name>
        <reimplements refid="class_hd_scene_index_observer_1a087e1d62f6ec2f2041bc78e31d712560">PrimsDirtied</reimplements>
        <param>
          <type>const <ref refid="class_hd_scene_index_base" kindref="compound">HdSceneIndexBase</ref> &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_small_vector" kindref="compound">DirtiedPrimEntries</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>A notification indicating prim datasources have been invalidated. </para>
        </briefdescription>
        <detaileddescription>
<para>This message is not considered hierarchical on <computeroutput>primPath</computeroutput>; if <computeroutput>/Path</computeroutput> is dirtied, <computeroutput>/Path/child</computeroutput> is not necessarily dirtied. However datasource locators are considered hierarchical: if <computeroutput>primvars</computeroutput> is dirtied on a prim, <computeroutput>primvars/color</computeroutput> is considered dirtied as well. This function is not expected to be threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a184b27c75c27d505f0900ea87b16ac34" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PrimsRemoved</definition>
        <argsstring>(const HdSceneIndexBase &amp;sender, const RemovedPrimEntries &amp;entries) override</argsstring>
        <name>PrimsRemoved</name>
        <reimplements refid="class_hd_scene_index_observer_1aec4924464d54d6e70002fddf8408d31f">PrimsRemoved</reimplements>
        <param>
          <type>const <ref refid="class_hd_scene_index_base" kindref="compound">HdSceneIndexBase</ref> &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_small_vector" kindref="compound">RemovedPrimEntries</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>A notification indicating prims have been removed from the scene. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this message is considered hierarchical; if <computeroutput>/Path</computeroutput> is removed, <computeroutput>/Path/child</computeroutput> is considered removed as well. This function is not expected to be threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a1c8cc4fdfbce0f58a2877c3d273e1415" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void PrimsRenamed</definition>
        <argsstring>(const HdSceneIndexBase &amp;sender, const RenamedPrimEntries &amp;entries) override</argsstring>
        <name>PrimsRenamed</name>
        <reimplements refid="class_hd_scene_index_observer_1a5cbc2ff942711627842ddf0f1781a60f">PrimsRenamed</reimplements>
        <param>
          <type>const <ref refid="class_hd_scene_index_base" kindref="compound">HdSceneIndexBase</ref> &amp;</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_small_vector" kindref="compound">RenamedPrimEntries</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>A notification indicating prims (and their descendants) have been renamed or reparented. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not expected to be threadsafe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="160" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hdsi_prim_managing_scene_index_observer_1a0a9d89c4d84a49be19f9211e6337721a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HdsiPrimManagingSceneIndexObserver</definition>
        <argsstring>(HdSceneIndexBaseRefPtr const &amp;sceneIndex, HdContainerDataSourceHandle const &amp;inputArgs)</argsstring>
        <name>HdsiPrimManagingSceneIndexObserver</name>
        <param>
          <type>HdSceneIndexBaseRefPtr const &amp;</type>
          <declname>sceneIndex</declname>
        </param>
        <param>
          <type>HdContainerDataSourceHandle const &amp;</type>
          <declname>inputArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A scene index observer that turns prims in the observed scene index into instances (of RAII subclasses) of <ref refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_base" kindref="compound">PrimBase</ref> using the given prim factory. </para>
    </briefdescription>
    <detaileddescription>
<para>This observer is an analogue to the HdPrimTypeIndex in the old hydra API (though we do not have separate observers for b/s/r-prims and instead rely on the observed filtering scene index (e.g., the <ref refid="class_hdsi_prim_type_notice_batching_scene_index" kindref="compound">HdsiPrimTypeNoticeBatchingSceneIndex</ref>) to batch notices in a way respecting dependencies).</para>
<para>More precisely, a AddedPrimEntry results in a call to the prim factory (this also applies to prims that exist in the observed scene index at the time the observer was instantiated).</para>
<para>The observer manages a map from paths to <ref refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_base" kindref="compound">PrimBase</ref> handles so that subsequent a DirtiedPrimEntry or RemovedPrimEntry results in a call to PrimBase::Dirty or releases the handles to the <ref refid="class_hdsi_prim_managing_scene_index_observer_1_1_prim_base" kindref="compound">PrimBase</ref>&apos;s at paths prefixed by the RemovedPrimEntry&apos;s path. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2965">
        <label>HdSceneIndexObserver</label>
        <link refid="class_hd_scene_index_observer"/>
        <childnode refid="2966" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2966">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="2964">
        <label>HdsiPrimManagingSceneIndexObserver</label>
        <link refid="class_hdsi_prim_managing_scene_index_observer"/>
        <childnode refid="2965" relation="public-inheritance">
        </childnode>
        <childnode refid="2967" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2967">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2969">
        <label>HdSceneIndexObserver</label>
        <link refid="class_hd_scene_index_observer"/>
        <childnode refid="2970" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2970">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
      <node id="2968">
        <label>HdsiPrimManagingSceneIndexObserver</label>
        <link refid="class_hdsi_prim_managing_scene_index_observer"/>
        <childnode refid="2969" relation="public-inheritance">
        </childnode>
        <childnode refid="2971" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2971">
        <label>TfRefBase</label>
        <link refid="class_tf_ref_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" line="67" column="1" bodyfile="pxr/imaging/hdsi/primManagingSceneIndexObserver.h" bodystart="65" bodyend="176"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_HasRemnant</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1adb4f1388b3c74cfb4d47059f4fac3b51" prot="private" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_primFactory</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1abcfd06eea463a3fcb2be879d657a5369" prot="private" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_prims</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_Register</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1afac5685d0f875fa4142dee8254aec70c" prot="private" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>_sceneIndex</name></member>
      <member refid="class_hd_scene_index_observer_1a3dad19a020c6daee833f270521b3b109" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>AddedPrimEntries</name></member>
      <member refid="class_hd_scene_index_observer_1a1b45298b84622e88b6c0e85ca1baeb57" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>ConvertPrimsRenamedToRemovedAndAdded</name></member>
      <member refid="class_hd_scene_index_observer_1a529aa2e0d528281da47353b55efd2475" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>ConvertPrimsRenamedToRemovedAndAdded</name></member>
      <member refid="class_hd_scene_index_observer_1accb5ec6e29149f518fdb9837443ecdd0" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>DirtiedPrimEntries</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>EnableNotification2</name></member>
      <member refid="class_tf_ref_base_1abcd501e4bb37d7a93faa4e625e96ecf7" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetCurrentCount</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a21498172b16421f4271ba38bbd11b5d8" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetPrim</name></member>
      <member refid="class_tf_ref_base_1abc1926aa1f9b1ad25c5c583b92bcf14b" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetRefCount</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a49c305afefc0269e8227344a662f8bd8" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetSceneIndex</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1afc4051d2f21e0f08a97fde50b210ce45" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetTypedPrim</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a0a9d89c4d84a49be19f9211e6337721a" prot="private" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>HdsiPrimManagingSceneIndexObserver</name></member>
      <member refid="class_tf_ref_base_1aab8bc91cf9cff7c6e1da23dc59f5ad1f" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>IsUnique</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1af934622c30aa857198381ecd84b7298b" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>New</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>operator=</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a67ff711f1dfdee5dcf1801043439aa0d" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimBaseHandle</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a470fb1287501cf1af3795fd054499142" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimFactoryBaseHandle</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a79eb5085cdd0533b424f23e5594cd61b" prot="protected" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimsAdded</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1ab38a1b97a048f6b7548322448206032b" prot="protected" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimsDirtied</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a184b27c75c27d505f0900ea87b16ac34" prot="protected" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimsRemoved</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1a1c8cc4fdfbce0f58a2877c3d273e1415" prot="protected" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>PrimsRenamed</name></member>
      <member refid="class_hd_scene_index_observer_1a8c6404855649c2366af2490dc53b08d3" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>RemovedPrimEntries</name></member>
      <member refid="class_hd_scene_index_observer_1a97100b5c8230a90a37e524c23970da8d" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>RenamedPrimEntries</name></member>
      <member refid="class_tf_ref_base_1a6ee7fb6df1df9be9afbda405643ecb6c" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>SetShouldInvokeUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1a33e6c8ffe0caf7dac94ba5c4a4485fbd" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>SetUniqueChangedListener</name></member>
      <member refid="class_tf_ref_base_1aa2d330100c1dde0a28658bbd0bd7e7bd" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_ref_base_1a86baed63f8017038997266bdd638f65e" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>UniqueChangedFuncPtr</name></member>
      <member refid="class_hd_scene_index_observer_1a4b755f82fc47b55d3dfcf0d906710758" prot="public" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>~HdSceneIndexObserver</name></member>
      <member refid="class_hdsi_prim_managing_scene_index_observer_1afc7efbb1a1ce043393d944e39e1ad649" prot="public" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>~HdsiPrimManagingSceneIndexObserver</name></member>
      <member refid="class_tf_ref_base_1abc8b2a655b2693dacab986b70c30f28a" prot="protected" virt="virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>~TfRefBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>HdsiPrimManagingSceneIndexObserver</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
