<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hgi_g_l_graphics_cmds" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HgiGLGraphicsCmds</compoundname>
    <basecompoundref refid="class_hgi_graphics_cmds" prot="public" virt="non-virtual">HgiGraphicsCmds</basecompoundref>
    <includes refid="_l_2graphics_cmds_8h" local="no">graphicsCmds.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hgi_g_l_graphics_cmds_1a459c65427f4c47c738022928ea52ecae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HgiGL</definition>
        <argsstring></argsstring>
        <name>HgiGL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="124" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1af26245e2ee62643e06f49fab80fc8fdb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _recording</definition>
        <argsstring></argsstring>
        <name>_recording</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="142" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1a2db2a48c83ebd461b8273eef79bf6a84" prot="private" static="no" mutable="no">
        <type><ref refid="struct_hgi_graphics_cmds_desc" kindref="compound">HgiGraphicsCmdsDesc</ref></type>
        <definition>HgiGraphicsCmdsDesc _descriptor</definition>
        <argsstring></argsstring>
        <name>_descriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="143" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1a02c81ae2694dff9738662a7dd2c00695" prot="private" static="no" mutable="no">
        <type>HgiPrimitiveType</type>
        <definition>HgiPrimitiveType _primitiveType</definition>
        <argsstring></argsstring>
        <name>_primitiveType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="144" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1ae4da7b901c8202f4e7adfe26ba4f5f14" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _primitiveIndexSize</definition>
        <argsstring></argsstring>
        <name>_primitiveIndexSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="145" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1ac33703a3f1f92877d1320f4a0b67fa2a" prot="private" static="no" mutable="no">
        <type>HgiGLOpsVector</type>
        <definition>HgiGLOpsVector _ops</definition>
        <argsstring></argsstring>
        <name>_ops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="146" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1abf2b6d3f7ab37507fb22123d961cc064" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int _pushStack</definition>
        <argsstring></argsstring>
        <name>_pushStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="147" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1ac283a2a2f89a7ab81a25d49403eb5e3e" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t _restoreReadFramebuffer</definition>
        <argsstring></argsstring>
        <name>_restoreReadFramebuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="148" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hgi_g_l_graphics_cmds_1a9b4379b207b36b8f5ab6623ce118fb3a" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t _restoreDrawFramebuffer</definition>
        <argsstring></argsstring>
        <name>_restoreDrawFramebuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="149" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1acdf1f1cb035fee9f5101728f15714ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API ~HgiGLGraphicsCmds</definition>
        <argsstring>() override</argsstring>
        <name>~HgiGLGraphicsCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1ab3795a224ca147ac268f77bfc5521aad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void InsertFunctionOp</definition>
        <argsstring>(std::function&lt; void(void)&gt; const &amp;fn)</argsstring>
        <name>InsertFunctionOp</name>
        <param>
          <type>std::function&lt; void(void)&gt; const &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>XXX This function is exposed temporarily for <ref refid="class_hgi" kindref="compound">Hgi</ref> transition. </para>
        </briefdescription>
        <detaileddescription>
<para>It allows code that is not yet converted to <ref refid="class_hgi" kindref="compound">Hgi</ref> (e.g. HdSt) to insert its opengl calls into the ops-stack of <ref refid="class_hgi_g_l" kindref="compound">HgiGL</ref> to ensure that all commands execute in the correct order. Once HdSt has transition fully to <ref refid="class_hgi" kindref="compound">Hgi</ref> we should remove this function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1afef735fb601fa2235b72d0b42214a08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void PushDebugGroup</definition>
        <argsstring>(const char *label) override</argsstring>
        <name>PushDebugGroup</name>
        <reimplements refid="class_hgi_graphics_cmds_1a4faea3ac78fb17fe44b934ddcd670ff5">PushDebugGroup</reimplements>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Push a debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1ac03f05639627f7e78f42fdbc9ebbfd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void PopDebugGroup</definition>
        <argsstring>() override</argsstring>
        <name>PopDebugGroup</name>
        <reimplements refid="class_hgi_graphics_cmds_1a7f3b9bc0bba2f41ee8fadb843c6220d3">PopDebugGroup</reimplements>
        <briefdescription>
<para>Pop the last debug marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a8b900c3a85982bce371ba2e47708ad2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void SetViewport</definition>
        <argsstring>(GfVec4i const &amp;vp) override</argsstring>
        <name>SetViewport</name>
        <reimplements refid="class_hgi_graphics_cmds_1a381cd1e10f417750614c812862ffc608">SetViewport</reimplements>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
<para>Set viewport [left, BOTTOM, width, height] - OpenGL coords. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a0c9e4dafcddbebda0e852191307e98d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void SetScissor</definition>
        <argsstring>(GfVec4i const &amp;sc) override</argsstring>
        <name>SetScissor</name>
        <reimplements refid="class_hgi_graphics_cmds_1a90bbeebb75cdb96b8dfbe88e45957e45">SetScissor</reimplements>
        <param>
          <type><ref refid="class_gf_vec4i" kindref="compound">GfVec4i</ref> const &amp;</type>
          <declname>sc</declname>
        </param>
        <briefdescription>
<para>Only pixels that lie within the scissor box are modified by drawing commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1aeeb0eef09ee89bcf5dfc295b6da566b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void BindPipeline</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline) override</argsstring>
        <name>BindPipeline</name>
        <reimplements refid="class_hgi_graphics_cmds_1a3dc012f85a2af9cc4160b94e12501d1b">BindPipeline</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
<para>Bind a pipeline state object. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after calling CreateGraphicsCmds to set the graphics pipeline state. The resource bindings used when creating the pipeline must be compatible with the resources bound via <ref refid="class_hgi_g_l_graphics_cmds_1a56192fa6096e9b20a821789a42e3ee37" kindref="member">BindResources()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a56192fa6096e9b20a821789a42e3ee37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void BindResources</definition>
        <argsstring>(HgiResourceBindingsHandle resources) override</argsstring>
        <name>BindResources</name>
        <reimplements refid="class_hgi_graphics_cmds_1af1a3fcb3ffa880a68d5399e5ae50ae0e">BindResources</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiResourceBindingsHandle</ref></type>
          <declname>resources</declname>
        </param>
        <briefdescription>
<para>Bind resources such as textures and uniform buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually you call this right after <ref refid="class_hgi_g_l_graphics_cmds_1aeeb0eef09ee89bcf5dfc295b6da566b1" kindref="member">BindPipeline()</ref> and the resources bound must be compatible with the bound pipeline. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a5814e68517a8e751c12c7c3f7f2737a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void SetConstantValues</definition>
        <argsstring>(HgiGraphicsPipelineHandle pipeline, HgiShaderStage stages, uint32_t bindIndex, uint32_t byteSize, const void *data) override</argsstring>
        <name>SetConstantValues</name>
        <reimplements refid="class_hgi_graphics_cmds_1a80ee2100bf3a54e2786daa5c84c5375e">SetConstantValues</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiGraphicsPipelineHandle</ref></type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>HgiShaderStage</type>
          <declname>stages</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bindIndex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byteSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set Push / Function constants. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>pipeline</computeroutput> is the pipeline that you are binding before the draw call. It contains the program used for the uniform buffer <computeroutput>stages</computeroutput> describes for what shader stage you are setting the push constant values for. Each stage can have its own (or none) binding and they must match what is described in the shader functions. <computeroutput>bindIndex</computeroutput> is the binding point index in the pipeline&apos;s shader to bind the data to. <computeroutput>byteSize</computeroutput> is the size of the data you are updating. <computeroutput>data</computeroutput> is the data you are copying into the push constants block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a52d2512d2214d878d9e26441630c587e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void BindVertexBuffers</definition>
        <argsstring>(HgiVertexBufferBindingVector const &amp;bindings) override</argsstring>
        <name>BindVertexBuffers</name>
        <reimplements refid="class_hgi_graphics_cmds_1a261c8e9e278e1ad6b42a42ebc1715421">BindVertexBuffers</reimplements>
        <param>
          <type>HgiVertexBufferBindingVector const &amp;</type>
          <declname>bindings</declname>
        </param>
        <briefdescription>
<para>Binds the vertex buffer(s) that describe the vertex attributes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1af995a8b95b7f9c7acc6ec1e91eabd3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void Draw</definition>
        <argsstring>(uint32_t vertexCount, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance) override</argsstring>
        <name>Draw</name>
        <reimplements refid="class_hgi_graphics_cmds_1a6c611fdd260b51a498f433a141b58521">Draw</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>vertexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
<para>Records a draw command that renders one or more instances of primitives using the number of vertices provided. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>vertexCount</computeroutput>: The number of vertices to draw. <computeroutput>baseVertex</computeroutput>: The index of the first vertex to draw. <computeroutput>instanceCount</computeroutput>: Number of instances to draw. <computeroutput>baseInstance</computeroutput>: The first instance to draw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1afd2b9805533430c4ad7b8a83cebeffca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void DrawIndirect</definition>
        <argsstring>(HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride) override</argsstring>
        <name>DrawIndirect</name>
        <reimplements refid="class_hgi_graphics_cmds_1a94fabafc9f88b9a334d04f0063f4d97e">DrawIndirect</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Records a multi-draw command that reads the draw parameters from a provided drawParameterBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>drawParameterBuffer</computeroutput>: an array of structures: <computeroutput>drawBufferByteOffset</computeroutput>: Byte offset where the draw parameters begin. <computeroutput>drawCount</computeroutput>: The number of draws to execute. <computeroutput>stride</computeroutput>: byte stride between successive sets of draw parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1adb5ea8fd2e39a9ebd710726bd519bc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void DrawIndexed</definition>
        <argsstring>(HgiBufferHandle const &amp;indexBuffer, uint32_t indexCount, uint32_t indexBufferByteOffset, uint32_t baseVertex, uint32_t instanceCount, uint32_t baseInstance) override</argsstring>
        <name>DrawIndexed</name>
        <reimplements refid="class_hgi_graphics_cmds_1a3d30d34d81e5880f1f1ca2210a35dc3e">DrawIndexed</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>indexBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseVertex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>instanceCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baseInstance</declname>
        </param>
        <briefdescription>
<para>Records a draw command that renders one or more instances of primitives using an indexBuffer starting from the base vertex. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>indexCount</computeroutput>: The number of indices in the index buffer (num vertices). <computeroutput>indexBufferByteOffset</computeroutput>: Byte offset within index buffer to start reading the indices from. <computeroutput>baseVertex</computeroutput>: The value added to the vertex index before indexing into the vertex buffer (baseVertex). <computeroutput>instanceCount</computeroutput>: Number of instances to draw. <computeroutput>baseInstance</computeroutput>: The first instance to draw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a7bc3803a8d12059b3112d04bd66d66a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void DrawIndexedIndirect</definition>
        <argsstring>(HgiBufferHandle const &amp;indexBuffer, HgiBufferHandle const &amp;drawParameterBuffer, uint32_t drawBufferByteOffset, uint32_t drawCount, uint32_t stride, std::vector&lt; uint32_t &gt; const &amp;drawParameterBufferUInt32, uint32_t patchBaseVertexByteOffset) override</argsstring>
        <name>DrawIndexedIndirect</name>
        <reimplements refid="class_hgi_graphics_cmds_1aaff9c300ca656c2803fefe60c153978c">DrawIndexedIndirect</reimplements>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>indexBuffer</declname>
        </param>
        <param>
          <type><ref refid="class_hgi_handle" kindref="compound">HgiBufferHandle</ref> const &amp;</type>
          <declname>drawParameterBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawBufferByteOffset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>drawCount</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; const &amp;</type>
          <declname>drawParameterBufferUInt32</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>patchBaseVertexByteOffset</declname>
        </param>
        <briefdescription>
<para>Records a indexed multi-draw command that reads the draw parameters from a provided drawParameterBuffer, and indices from indexBuffer. </para>
        </briefdescription>
        <detaileddescription>
<para>The &apos;primitive type&apos; (eg. Lines, Triangles, etc) can be acquired from the bound HgiPipeline. <computeroutput>drawParameterBuffer</computeroutput>: an array of structures (Metal has a different encoding of indirect commands for tessellated patches): <computeroutput>drawBufferByteOffset</computeroutput>: Byte offset where the draw parameters begin. <computeroutput>drawCount</computeroutput>: The number of draws to execute. <computeroutput>stride</computeroutput>: byte stride between successive sets of draw parameters. <computeroutput>drawParameterBufferUInt32</computeroutput>: CPU addressable <computeroutput>drawParameterBuffer</computeroutput> which contains the <computeroutput>baseVertex</computeroutput> offset needed for each patch draw for Metal. <computeroutput>patchBaseVertexByteOffset</computeroutput>: Byte offset to the uint32_t value in <computeroutput>drawParameterBufferUint32</computeroutput> which is the <computeroutput>baseVertex</computeroutput> value which must be applied to each HgiVertexBufferPerPatchControlPoint vertex buffer for each patch draw for Metal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a150f08387a4c7165f2c5aeeb19542a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API void</type>
        <definition>HGIGL_API void InsertMemoryBarrier</definition>
        <argsstring>(HgiMemoryBarrier barrier) override</argsstring>
        <name>InsertMemoryBarrier</name>
        <reimplements refid="class_hgi_graphics_cmds_1af7fca4b663cc7418d36f96c36b72cc54">InsertMemoryBarrier</reimplements>
        <param>
          <type>HgiMemoryBarrier</type>
          <declname>barrier</declname>
        </param>
        <briefdescription>
<para>Inserts a barrier so that data written to memory by commands before the barrier is available to commands after the barrier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="121" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a06193d84ea121957353568a8a5b546cd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HGIGL_API</type>
        <definition>HGIGL_API HgiGLGraphicsCmds</definition>
        <argsstring>(HgiGLDevice *device, HgiGraphicsCmdsDesc const &amp;desc)</argsstring>
        <name>HgiGLGraphicsCmds</name>
        <param>
          <type><ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_hgi_graphics_cmds_desc" kindref="compound">HgiGraphicsCmdsDesc</ref> const &amp;</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a2fedb298d39f65c457938415fcb3f6a1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HGIGL_API bool</type>
        <definition>HGIGL_API bool _Submit</definition>
        <argsstring>(Hgi *hgi, HgiSubmitWaitType wait) override</argsstring>
        <name>_Submit</name>
        <reimplements refid="class_hgi_cmds_1ada9b3b32ca4eb9804e3a47ddd8954062">_Submit</reimplements>
        <param>
          <type><ref refid="class_hgi" kindref="compound">Hgi</ref> *</type>
          <declname>hgi</declname>
        </param>
        <param>
          <type>HgiSubmitWaitType</type>
          <declname>wait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="132" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a068a7bdb241d39c8ec81a8d3f7bb404f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLGraphicsCmds</definition>
        <argsstring>()=delete</argsstring>
        <name>HgiGLGraphicsCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1ac070e354310c01514ab12cad3ebffbd4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_hgi_g_l_graphics_cmds" kindref="compound">HgiGLGraphicsCmds</ref> &amp;</type>
        <definition>HgiGLGraphicsCmds&amp; operator=</definition>
        <argsstring>(const HgiGLGraphicsCmds &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_graphics_cmds" kindref="compound">HgiGLGraphicsCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1ac7519e224584fb846547f06528553fda" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HgiGLGraphicsCmds</definition>
        <argsstring>(const HgiGLGraphicsCmds &amp;)=delete</argsstring>
        <name>HgiGLGraphicsCmds</name>
        <param>
          <type>const <ref refid="class_hgi_g_l_graphics_cmds" kindref="compound">HgiGLGraphicsCmds</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hgi_g_l_graphics_cmds_1a4bcc44a0f4445ea238538dde528ca5d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _AddResolveToOps</definition>
        <argsstring>(HgiGLDevice *device)</argsstring>
        <name>_AddResolveToOps</name>
        <param>
          <type><ref refid="class_hgi_g_l_device" kindref="compound">HgiGLDevice</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>This performs multisample resolve when needed at the end of recording. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>OpenGL implementation of <ref refid="class_hgi_graphics_cmds" kindref="compound">HgiGraphicsCmds</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3821">
        <label>HgiGLGraphicsCmds</label>
        <link refid="class_hgi_g_l_graphics_cmds"/>
        <childnode refid="3822" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3822">
        <label>HgiGraphicsCmds</label>
        <link refid="class_hgi_graphics_cmds"/>
        <childnode refid="3823" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3823">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3824">
        <label>HgiGLGraphicsCmds</label>
        <link refid="class_hgi_g_l_graphics_cmds"/>
        <childnode refid="3825" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3825">
        <label>HgiGraphicsCmds</label>
        <link refid="class_hgi_graphics_cmds"/>
        <childnode refid="3826" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3826">
        <label>HgiCmds</label>
        <link refid="class_hgi_cmds"/>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hgiGL/graphicsCmds.h" line="44" column="1" bodyfile="pxr/imaging/hgiGL/graphicsCmds.h" bodystart="43" bodyend="153"/>
    <listofallmembers>
      <member refid="class_hgi_g_l_graphics_cmds_1a4bcc44a0f4445ea238538dde528ca5d1" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_AddResolveToOps</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a2db2a48c83ebd461b8273eef79bf6a84" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_descriptor</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ac33703a3f1f92877d1320f4a0b67fa2a" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_ops</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ae4da7b901c8202f4e7adfe26ba4f5f14" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_primitiveIndexSize</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a02c81ae2694dff9738662a7dd2c00695" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_primitiveType</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1abf2b6d3f7ab37507fb22123d961cc064" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_pushStack</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1af26245e2ee62643e06f49fab80fc8fdb" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_recording</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a9b4379b207b36b8f5ab6623ce118fb3a" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_restoreDrawFramebuffer</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ac283a2a2f89a7ab81a25d49403eb5e3e" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_restoreReadFramebuffer</name></member>
      <member refid="class_hgi_cmds_1ac15c43bdc2f47df7bc72769b366c3de7" prot="protected" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>_SetSubmitted</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a2fedb298d39f65c457938415fcb3f6a1" prot="protected" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>_Submit</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1aeeb0eef09ee89bcf5dfc295b6da566b1" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>BindPipeline</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a56192fa6096e9b20a821789a42e3ee37" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>BindResources</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a52d2512d2214d878d9e26441630c587e" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>BindVertexBuffers</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1af995a8b95b7f9c7acc6ec1e91eabd3d2" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>Draw</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1adb5ea8fd2e39a9ebd710726bd519bc52" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>DrawIndexed</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a7bc3803a8d12059b3112d04bd66d66a2" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>DrawIndexedIndirect</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1afd2b9805533430c4ad7b8a83cebeffca" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>DrawIndirect</name></member>
      <member refid="class_hgi_cmds_1aacf15024d99594cd7e32536f934141ab" prot="protected" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiCmds</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a459c65427f4c47c738022928ea52ecae" prot="protected" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiGL</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a06193d84ea121957353568a8a5b546cd" prot="protected" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiGLGraphicsCmds</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a068a7bdb241d39c8ec81a8d3f7bb404f" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiGLGraphicsCmds</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ac7519e224584fb846547f06528553fda" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiGLGraphicsCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1a6587d25cb28b725200701781e77cae04" prot="protected" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>HgiGraphicsCmds</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ab3795a224ca147ac268f77bfc5521aad" prot="public" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>InsertFunctionOp</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a150f08387a4c7165f2c5aeeb19542a33" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>InsertMemoryBarrier</name></member>
      <member refid="class_hgi_cmds_1ae21ceb4d878a96527fa7e9aa2eec6c0b" prot="public" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>IsSubmitted</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ac070e354310c01514ab12cad3ebffbd4" prot="private" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>operator=</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1ac03f05639627f7e78f42fdbc9ebbfd74" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>PopDebugGroup</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1afef735fb601fa2235b72d0b42214a08d" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>PushDebugGroup</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a5814e68517a8e751c12c7c3f7f2737a5" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>SetConstantValues</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a0c9e4dafcddbebda0e852191307e98d4" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>SetScissor</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1a8b900c3a85982bce371ba2e47708ad2c" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>SetViewport</name></member>
      <member refid="class_hgi_cmds_1acfebf344be18afe51829d5c843d53ccd" prot="public" virt="virtual"><scope>HgiGLGraphicsCmds</scope><name>~HgiCmds</name></member>
      <member refid="class_hgi_g_l_graphics_cmds_1acdf1f1cb035fee9f5101728f15714ea0" prot="public" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>~HgiGLGraphicsCmds</name></member>
      <member refid="class_hgi_graphics_cmds_1a79e0b2c9b746664ab735b23a4d9fcdf1" prot="public" virt="non-virtual"><scope>HgiGLGraphicsCmds</scope><name>~HgiGraphicsCmds</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
