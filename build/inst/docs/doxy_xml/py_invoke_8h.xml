<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="py_invoke_8h" kind="file" language="C++">
    <compoundname>pyInvoke.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes refid="diagnostic_lite_8h" local="yes">pxr/base/tf/diagnosticLite.h</includes>
    <includes refid="py_error_8h" local="yes">pxr/base/tf/pyError.h</includes>
    <includes refid="py_interpreter_8h" local="yes">pxr/base/tf/pyInterpreter.h</includes>
    <includes refid="py_lock_8h" local="yes">pxr/base/tf/pyLock.h</includes>
    <includes refid="py_obj_wrapper_8h" local="yes">pxr/base/tf/pyObjWrapper.h</includes>
    <includes local="no">boost/python/dict.hpp</includes>
    <includes local="no">boost/python/extract.hpp</includes>
    <includes local="no">boost/python/list.hpp</includes>
    <includes local="no">boost/python/object.hpp</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <incdepgraph>
      <node id="69606">
        <label>list</label>
      </node>
      <node id="69619">
        <label>locale</label>
      </node>
      <node id="69596">
        <label>atomic</label>
      </node>
      <node id="69621">
        <label>stdarg.h</label>
      </node>
      <node id="69568">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="69569" relation="include">
        </childnode>
        <childnode refid="69570" relation="include">
        </childnode>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
        <childnode refid="69571" relation="include">
        </childnode>
      </node>
      <node id="69592">
        <label>functional</label>
      </node>
      <node id="69553">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69637">
        <label>boost/functional/hash.hpp</label>
      </node>
      <node id="69597">
        <label>iterator</label>
      </node>
      <node id="69570">
        <label>cstdint</label>
      </node>
      <node id="69563">
        <label>pxr/base/tf/errorMark.h</label>
        <link refid="error_mark_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69564" relation="include">
        </childnode>
        <childnode refid="69628" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69610">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69555" relation="include">
        </childnode>
        <childnode refid="69581" relation="include">
        </childnode>
        <childnode refid="69609" relation="include">
        </childnode>
        <childnode refid="69602" relation="include">
        </childnode>
        <childnode refid="69589" relation="include">
        </childnode>
        <childnode refid="69611" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69579" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
        <childnode refid="69612" relation="include">
        </childnode>
      </node>
      <node id="69618">
        <label>pxr/base/tf/diagnosticHelper.h</label>
        <link refid="diagnostic_helper_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
        <childnode refid="69619" relation="include">
        </childnode>
        <childnode refid="69620" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
      </node>
      <node id="69623">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69642">
        <label>boost/python/list.hpp</label>
      </node>
      <node id="69572">
        <label>cmath</label>
      </node>
      <node id="69566">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69557" relation="include">
        </childnode>
        <childnode refid="69567" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69573" relation="include">
        </childnode>
        <childnode refid="69574" relation="include">
        </childnode>
      </node>
      <node id="69631">
        <label>boost/python/handle.hpp</label>
      </node>
      <node id="69598">
        <label>numeric</label>
      </node>
      <node id="69602">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69603" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69605">
        <label>cstdarg</label>
      </node>
      <node id="69578">
        <label>string</label>
      </node>
      <node id="69556">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69553" relation="include">
        </childnode>
      </node>
      <node id="69632">
        <label>boost/python/object.hpp</label>
      </node>
      <node id="69625">
        <label>pxr/base/tf/warning.h</label>
        <link refid="warning_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69601" relation="include">
        </childnode>
      </node>
      <node id="69583">
        <label>map</label>
      </node>
      <node id="69569">
        <label>cinttypes</label>
      </node>
      <node id="69551">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="69576">
        <label>pxr/base/arch/demangle.h</label>
        <link refid="demangle_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69577" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69579" relation="include">
        </childnode>
        <childnode refid="69580" relation="include">
        </childnode>
      </node>
      <node id="69626">
        <label>tbb/enumerable_thread_specific.h</label>
      </node>
      <node id="69561">
        <label>stddef.h</label>
      </node>
      <node id="69557">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69564">
        <label>pxr/base/tf/diagnosticMgr.h</label>
        <link refid="diagnostic_mgr_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69559" relation="include">
        </childnode>
        <childnode refid="69565" relation="include">
        </childnode>
        <childnode refid="69555" relation="include">
        </childnode>
        <childnode refid="69600" relation="include">
        </childnode>
        <childnode refid="69622" relation="include">
        </childnode>
        <childnode refid="69624" relation="include">
        </childnode>
        <childnode refid="69604" relation="include">
        </childnode>
        <childnode refid="69625" relation="include">
        </childnode>
        <childnode refid="69608" relation="include">
        </childnode>
        <childnode refid="69575" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69560" relation="include">
        </childnode>
        <childnode refid="69626" relation="include">
        </childnode>
        <childnode refid="69627" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
        <childnode refid="69605" relation="include">
        </childnode>
        <childnode refid="69606" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69587" relation="include">
        </childnode>
      </node>
      <node id="69588">
        <label>pxr/base/tf/preprocessorUtilsLite.h</label>
        <link refid="preprocessor_utils_lite_8h_source"/>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69630">
        <label>pxr/base/tf/pyInterpreter.h</label>
        <link refid="py_interpreter_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69631" relation="include">
        </childnode>
        <childnode refid="69632" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
      </node>
      <node id="69603">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
      </node>
      <node id="69589">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69579" relation="include">
        </childnode>
      </node>
      <node id="69614">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69634">
        <label>pxr/base/tf/pySafePython.h</label>
        <link refid="py_safe_python_8h"/>
        <childnode refid="69623" relation="include">
        </childnode>
        <childnode refid="69619" relation="include">
        </childnode>
        <childnode refid="69635" relation="include">
        </childnode>
      </node>
      <node id="69627">
        <label>tbb/spin_rw_mutex.h</label>
      </node>
      <node id="69620">
        <label>any</label>
      </node>
      <node id="69600">
        <label>pxr/base/tf/error.h</label>
        <link refid="tf_2error_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69601" relation="include">
        </childnode>
      </node>
      <node id="69640">
        <label>boost/python/dict.hpp</label>
      </node>
      <node id="69571">
        <label>sys/types.h</label>
      </node>
      <node id="69593">
        <label>pxr/base/tf/stopwatch.h</label>
        <link refid="stopwatch_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69594" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69590" relation="include">
        </childnode>
      </node>
      <node id="69615">
        <label>pxr/base/tf/weakPtrFacade.h</label>
        <link refid="weak_ptr_facade_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69616" relation="include">
        </childnode>
        <childnode refid="69581" relation="include">
        </childnode>
        <childnode refid="69610" relation="include">
        </childnode>
        <childnode refid="69613" relation="include">
        </childnode>
        <childnode refid="69576" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
      </node>
      <node id="69575">
        <label>pxr/base/tf/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
        <childnode refid="69576" relation="include">
        </childnode>
        <childnode refid="69581" relation="include">
        </childnode>
        <childnode refid="69588" relation="include">
        </childnode>
        <childnode refid="69589" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69590" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69579" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
        <childnode refid="69587" relation="include">
        </childnode>
      </node>
      <node id="69579">
        <label>typeinfo</label>
      </node>
      <node id="69599">
        <label>cstdio</label>
      </node>
      <node id="69639">
        <label>boost/python/object_operators.hpp</label>
      </node>
      <node id="69638">
        <label>boost/python/object_fwd.hpp</label>
      </node>
      <node id="69608">
        <label>pxr/base/tf/weakPtr.h</label>
        <link refid="weak_ptr_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69609" relation="include">
        </childnode>
        <childnode refid="69610" relation="include">
        </childnode>
        <childnode refid="69566" relation="include">
        </childnode>
        <childnode refid="69613" relation="include">
        </childnode>
        <childnode refid="69615" relation="include">
        </childnode>
        <childnode refid="69612" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
      </node>
      <node id="69550">
        <label>pxr/base/tf/pyInvoke.h</label>
        <link refid="py_invoke_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69555" relation="include">
        </childnode>
        <childnode refid="69562" relation="include">
        </childnode>
        <childnode refid="69630" relation="include">
        </childnode>
        <childnode refid="69633" relation="include">
        </childnode>
        <childnode refid="69636" relation="include">
        </childnode>
        <childnode refid="69640" relation="include">
        </childnode>
        <childnode refid="69641" relation="include">
        </childnode>
        <childnode refid="69642" relation="include">
        </childnode>
        <childnode refid="69632" relation="include">
        </childnode>
        <childnode refid="69612" relation="include">
        </childnode>
        <childnode refid="69584" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
      </node>
      <node id="69567">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69572" relation="include">
        </childnode>
      </node>
      <node id="69587">
        <label>vector</label>
      </node>
      <node id="69552">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="69553" relation="include">
        </childnode>
      </node>
      <node id="69633">
        <label>pxr/base/tf/pyLock.h</label>
        <link refid="py_lock_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69634" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69594">
        <label>pxr/base/arch/timing.h</label>
        <link refid="timing_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69577" relation="include">
        </childnode>
        <childnode refid="69554" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69595" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
        <childnode refid="69597" relation="include">
        </childnode>
        <childnode refid="69598" relation="include">
        </childnode>
      </node>
      <node id="69629">
        <label>boost/python/default_call_policies.hpp</label>
      </node>
      <node id="69641">
        <label>boost/python/extract.hpp</label>
      </node>
      <node id="69574">
        <label>utility</label>
      </node>
      <node id="69617">
        <label>pxr/base/arch/function.h</label>
        <link refid="function_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69577" relation="include">
        </childnode>
        <childnode refid="69560" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
      </node>
      <node id="69607">
        <label>sstream</label>
      </node>
      <node id="69609">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69554">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="69565">
        <label>pxr/base/tf/debug.h</label>
        <link refid="debug_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69566" relation="include">
        </childnode>
        <childnode refid="69575" relation="include">
        </childnode>
        <childnode refid="69588" relation="include">
        </childnode>
        <childnode refid="69591" relation="include">
        </childnode>
        <childnode refid="69593" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
        <childnode refid="69599" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69587" relation="include">
        </childnode>
      </node>
      <node id="69558">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69581">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69566" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69582" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69583" relation="include">
        </childnode>
        <childnode refid="69584" relation="include">
        </childnode>
        <childnode refid="69585" relation="include">
        </childnode>
        <childnode refid="69580" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
        <childnode refid="69574" relation="include">
        </childnode>
        <childnode refid="69587" relation="include">
        </childnode>
      </node>
      <node id="69573">
        <label>math.h</label>
      </node>
      <node id="69604">
        <label>pxr/base/tf/stringUtils.h</label>
        <link refid="string_utils_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69575" relation="include">
        </childnode>
        <childnode refid="69605" relation="include">
        </childnode>
        <childnode refid="69582" relation="include">
        </childnode>
        <childnode refid="69606" relation="include">
        </childnode>
        <childnode refid="69585" relation="include">
        </childnode>
        <childnode refid="69607" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
        <childnode refid="69586" relation="include">
        </childnode>
        <childnode refid="69587" relation="include">
        </childnode>
      </node>
      <node id="69590">
        <label>iosfwd</label>
      </node>
      <node id="69559">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69560" relation="include">
        </childnode>
        <childnode refid="69561" relation="include">
        </childnode>
      </node>
      <node id="69635">
        <label>boost/python/detail/wrap_python.hpp</label>
      </node>
      <node id="69612">
        <label>cstddef</label>
      </node>
      <node id="69622">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69623" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
      </node>
      <node id="69611">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69584" relation="include">
        </childnode>
      </node>
      <node id="69555">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69557" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69559" relation="include">
        </childnode>
        <childnode refid="69561" relation="include">
        </childnode>
      </node>
      <node id="69636">
        <label>pxr/base/tf/pyObjWrapper.h</label>
        <link refid="py_obj_wrapper_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69623" relation="include">
        </childnode>
        <childnode refid="69634" relation="include">
        </childnode>
        <childnode refid="69637" relation="include">
        </childnode>
        <childnode refid="69638" relation="include">
        </childnode>
        <childnode refid="69639" relation="include">
        </childnode>
        <childnode refid="69590" relation="include">
        </childnode>
        <childnode refid="69584" relation="include">
        </childnode>
      </node>
      <node id="69628">
        <label>pxr/base/tf/errorTransport.h</label>
        <link refid="error_transport_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69564" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
      </node>
      <node id="69562">
        <label>pxr/base/tf/pyError.h</label>
        <link refid="py_error_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69563" relation="include">
        </childnode>
        <childnode refid="69629" relation="include">
        </childnode>
      </node>
      <node id="69586">
        <label>type_traits</label>
      </node>
      <node id="69585">
        <label>set</label>
      </node>
      <node id="69577">
        <label>pxr/base/arch/api.h</label>
        <link refid="base_2arch_2api_8h_source"/>
        <childnode refid="69553" relation="include">
        </childnode>
      </node>
      <node id="69560">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="69554" relation="include">
        </childnode>
      </node>
      <node id="69595">
        <label>algorithm</label>
      </node>
      <node id="69582">
        <label>cstring</label>
      </node>
      <node id="69601">
        <label>pxr/base/tf/diagnosticBase.h</label>
        <link refid="diagnostic_base_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69559" relation="include">
        </childnode>
        <childnode refid="69575" relation="include">
        </childnode>
        <childnode refid="69602" relation="include">
        </childnode>
        <childnode refid="69604" relation="include">
        </childnode>
        <childnode refid="69608" relation="include">
        </childnode>
        <childnode refid="69568" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69617" relation="include">
        </childnode>
        <childnode refid="69620" relation="include">
        </childnode>
        <childnode refid="69605" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
      </node>
      <node id="69624">
        <label>pxr/base/tf/status.h</label>
        <link refid="status_8h_source"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69601" relation="include">
        </childnode>
      </node>
      <node id="69613">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69614" relation="include">
        </childnode>
        <childnode refid="69610" relation="include">
        </childnode>
        <childnode refid="69596" relation="include">
        </childnode>
      </node>
      <node id="69584">
        <label>memory</label>
      </node>
      <node id="69591">
        <label>pxr/base/tf/registryManager.h</label>
        <link refid="registry_manager_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69556" relation="include">
        </childnode>
        <childnode refid="69588" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69592" relation="include">
        </childnode>
        <childnode refid="69579" relation="include">
        </childnode>
      </node>
      <node id="69616">
        <label>pxr/base/tf/diagnostic.h</label>
        <link refid="base_2tf_2diagnostic_8h"/>
        <childnode refid="69551" relation="include">
        </childnode>
        <childnode refid="69617" relation="include">
        </childnode>
        <childnode refid="69555" relation="include">
        </childnode>
        <childnode refid="69552" relation="include">
        </childnode>
        <childnode refid="69558" relation="include">
        </childnode>
        <childnode refid="69618" relation="include">
        </childnode>
        <childnode refid="69561" relation="include">
        </childnode>
        <childnode refid="69621" relation="include">
        </childnode>
        <childnode refid="69578" relation="include">
        </childnode>
      </node>
      <node id="69580">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_tf_py_kw_arg" prot="public">TfPyKwArg</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="py_invoke_8h_1ac84b3e7cc04d0025851900eb9cd45dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Result</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TfPyInvokeAndExtract</definition>
        <argsstring>(const std::string &amp;moduleName, const std::string &amp;callableExpr, Result *resultOut, Args... args)</argsstring>
        <name>TfPyInvokeAndExtract</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>moduleName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callableExpr</declname>
        </param>
        <param>
          <type>Result *</type>
          <declname>resultOut</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Call a Python function and obtain its return value. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">//<sp/>Call<sp/>MyModule.MyFunction(arg1,<sp/>arg2),<sp/>which<sp/>returns<sp/>a<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">std::string<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>bool<sp/>ok<sp/>=<sp/>TfPyInvokeAndExtract(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;MyModule&quot;,<sp/>&quot;MyFunction&quot;,<sp/>&amp;result,<sp/>arg1Value,<sp/>arg2Value);</highlight></codeline>
</programlisting></para>
<para><computeroutput>moduleName</computeroutput> is the name of the module in which to find the function. This name will be directly imported in an <computeroutput>import</computeroutput> statement, so anything that you know is in <computeroutput>sys.path</computeroutput> should work. The module name will also be prepended to <computeroutput>callableExpr</computeroutput> to look up the function.</para>
<para><computeroutput>callableExpr</computeroutput> is a Python expression that, when appended to <computeroutput>moduleName</computeroutput> (with an intervening dot), yields a callable object. Typically this is just a function name, optionally prefixed with object names (such as a class in which the callable resides).</para>
<para><computeroutput>resultOut</computeroutput> is a pointer that will receive the Python function&apos;s return value. A from-Python converter must be registered for the type of <computeroutput>*resultOut</computeroutput>.</para>
<para><computeroutput>args</computeroutput> is zero or more function arguments, of any types for which to-Python conversions are registered. Any <computeroutput>nullptr</computeroutput> arguments are converted to <computeroutput>None</computeroutput>. <computeroutput>args</computeroutput> may also contain <ref refid="struct_tf_py_kw_arg" kindref="compound">TfPyKwArg</ref> objects to pass keyword arguments. As in Python, once a keyword argument is passed, all remaining arguments must also be keyword arguments.</para>
<para>The return value of TfPyInvokeAndExtract is true if the call completed, false otherwise. When the return value is false, at least one <ref refid="class_tf_error" kindref="compound">TfError</ref> should have been raised, describing the failure. TfPyInvokeAndExtract never raises exceptions.</para>
<para>It should be safe to call this function without doing any other setup first. It is not necessary to call TfPyInitialize or lock the GIL; this function does those things itself.</para>
<para>If you don&apos;t need the function&apos;s return value, call TfPyInvoke instead.</para>
<para>If you need the function&apos;s return value, but the return value isn&apos;t guaranteed to be a consistent type that&apos;s convertible to C++, call TfPyInvokeAndReturn instead. This includes cases where the function&apos;s return value may be <computeroutput>None</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyInvoke.h" line="251" column="1" bodyfile="pxr/base/tf/pyInvoke.h" bodystart="251" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TfPyInvokeAndReturn</definition>
        <argsstring>(const std::string &amp;moduleName, const std::string &amp;callableExpr, boost::python::object *resultOut, Args... args)</argsstring>
        <name>TfPyInvokeAndReturn</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>moduleName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callableExpr</declname>
        </param>
        <param>
          <type>boost::python::object *</type>
          <declname>resultOut</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>A version of TfPyInvokeAndExtract that provides the Python function&apos;s return value as a <computeroutput>boost::python::object</computeroutput>, rather than extracting a particular C++ type from it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyInvoke.h" line="288" column="1" bodyfile="pxr/base/tf/pyInvoke.h" bodystart="288" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="py_invoke_8h_1a32c5dc2c983efc047855f7a6975d6d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TfPyInvoke</definition>
        <argsstring>(const std::string &amp;moduleName, const std::string &amp;callableExpr, Args... args)</argsstring>
        <name>TfPyInvoke</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>moduleName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>callableExpr</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>A version of TfPyInvokeAndExtract that ignores the Python function&apos;s return value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pyInvoke.h" line="329" column="1" bodyfile="pxr/base/tf/pyInvoke.h" bodystart="329" bodyend="341"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Flexible, high-level interface for calling Python functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_PY_INVOKE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_PY_INVOKE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diagnostic_lite_8h" kindref="compound">pxr/base/tf/diagnosticLite.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="py_interpreter_8h" kindref="compound">pxr/base/tf/pyInterpreter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyLock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/pyObjWrapper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/dict.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/extract.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/python/object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">//<sp/>To-Python<sp/>arg<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>any<sp/>type<sp/>to<sp/>boost::python::object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">boost::python::object<sp/>Tf_ArgToPy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::python::object(value);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>nullptr<sp/>to<sp/>None.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">TF_API<sp/>boost::python::object<sp/>Tf_ArgToPy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::nullptr_t<sp/>&amp;value);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>!doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">//<sp/>Keyword<sp/>arg<sp/>specification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="struct_tf_py_kw_arg" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tf_py_kw_arg" kindref="compound">TfPyKwArg</ref></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_tf_py_kw_arg" kindref="compound">TfPyKwArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;nameIn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;valueIn)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name(nameIn)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructing<sp/>boost::python::object<sp/>requires<sp/>the<sp/>GIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_tf_py_lock" kindref="compound">TfPyLock</ref><sp/>lock;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>object<sp/>constructor<sp/>throws<sp/>if<sp/>the<sp/>type<sp/>is<sp/>not<sp/>convertible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Tf_ArgToPy(valueIn);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_obj_wrapper" kindref="compound">TfPyObjWrapper</ref><sp/>value;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">//<sp/>Argument<sp/>collection<sp/>by<sp/>variadic<sp/>template<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variadic<sp/>helper:<sp/>trivial<sp/>base<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">TF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeKwArgs(</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Poisoned<sp/>variadic<sp/>template<sp/>helper<sp/>that<sp/>provides<sp/>an<sp/>error<sp/>message<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-keyword<sp/>args<sp/>are<sp/>used<sp/>after<sp/>keyword<sp/>args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>RestArgs&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeKwArgs(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>&amp;kwArg,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>RestArgs...<sp/>rest)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>assertion<sp/>will<sp/>always<sp/>be<sp/>false,<sp/>since<sp/>TfPyKwArg<sp/>will<sp/>select<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overload<sp/>below<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Arg,<sp/>TfPyKwArg&gt;::value,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Non-keyword<sp/>args<sp/>not<sp/>allowed<sp/>after<sp/>keyword<sp/>args&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursive<sp/>variadic<sp/>template<sp/>helper<sp/>for<sp/>keyword<sp/>args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>RestArgs&gt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeKwArgs(</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_tf_py_kw_arg" kindref="compound">TfPyKwArg</ref><sp/>&amp;kwArg,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>RestArgs...<sp/>rest)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>mapping<sp/>in<sp/>kwargs<sp/>dict.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>(*kwArgsOut)[kwArg.name]<sp/>=<sp/>kwArg.value.<ref refid="class_tf_py_obj_wrapper_1a115702fc3cb62a3c3bf4b3c89f3bc373" kindref="member">Get</ref>();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>to<sp/>handle<sp/>next<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_BuildPyInvokeKwArgs(kwArgsOut,<sp/>rest...);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variadic<sp/>helper:<sp/>trivial<sp/>base<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">TF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeArgs(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::list<sp/>*posArgsOut,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursive<sp/>general-purpose<sp/>variadic<sp/>template<sp/>helper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>RestArgs&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeArgs(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::list<sp/>*posArgsOut,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>&amp;arg,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>RestArgs...<sp/>rest)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>value<sp/>to<sp/>Python,<sp/>and<sp/>store<sp/>in<sp/>args<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>object<sp/>constructor<sp/>throws<sp/>if<sp/>the<sp/>type<sp/>is<sp/>not<sp/>convertible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>posArgsOut-&gt;append(Tf_ArgToPy(arg));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>to<sp/>handle<sp/>next<sp/>arg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_BuildPyInvokeArgs(posArgsOut,<sp/>kwArgsOut,<sp/>rest...);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Recursive<sp/>variadic<sp/>template<sp/>helper<sp/>for<sp/>keyword<sp/>args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>RestArgs&gt;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tf_BuildPyInvokeArgs(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::list<sp/>*posArgsOut,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::dict<sp/>*kwArgsOut,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_tf_py_kw_arg" kindref="compound">TfPyKwArg</ref><sp/>&amp;kwArg,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>RestArgs...<sp/>rest)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>to<sp/>kwargs-only<sp/>processing,<sp/>enforcing<sp/>(at<sp/>compile<sp/>time)<sp/>the<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rule<sp/>that<sp/>there<sp/>may<sp/>not<sp/>be<sp/>non-kwargs<sp/>after<sp/>kwargs.<sp/><sp/>If<sp/>we<sp/>relaxed<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rule,<sp/>some<sp/>strange<sp/>argument<sp/>ordering<sp/>could<sp/>occur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Tf_BuildPyInvokeKwArgs(kwArgsOut,<sp/>kwArg,<sp/>rest...);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>!doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">//<sp/>Declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>TfPyInvokeAndExtract.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">TF_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Tf_PyInvokeImpl(</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;moduleName,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;callableExpr,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::python::list<sp/>&amp;posArgs,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::python::dict<sp/>&amp;kwArgs,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::object<sp/>*resultObjOut);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" kindref="member">TfPyInvokeAndReturn</ref>(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;moduleName,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;callableExpr,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::object<sp/>*resultOut,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>!doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="comment">//<sp/>Main<sp/>entry<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="251" refid="py_invoke_8h_1ac84b3e7cc04d0025851900eb9cd45dba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="py_invoke_8h_1ac84b3e7cc04d0025851900eb9cd45dba" kindref="member">TfPyInvokeAndExtract</ref>(</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;moduleName,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;callableExpr,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>*resultOut,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resultOut)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>pointer<sp/>to<sp/>TfPyInvokeAndExtract&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>Python<sp/>and<sp/>grab<sp/>the<sp/>GIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="py_interpreter_8h_1acfcd4d756d08b7b3ab1248467b013f5a" kindref="member">TfPyInitialize</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_lock" kindref="compound">TfPyLock</ref><sp/>lock;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::object<sp/>resultObj;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" kindref="member">TfPyInvokeAndReturn</ref>(</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleName,<sp/>callableExpr,<sp/>&amp;resultObj,<sp/>args...))<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>return<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::extract&lt;Result&gt;<sp/>extractor(resultObj);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!extractor.check())<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Result<sp/>type<sp/>mismatched<sp/>or<sp/>not<sp/>convertible&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>*resultOut<sp/>=<sp/>extractor();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="288" refid="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" kindref="member">TfPyInvokeAndReturn</ref>(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;moduleName,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;callableExpr,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::object<sp/>*resultOut,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resultOut)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__group__tf___diagnostic_1ga8265ac46fd87777ee25efaf4a3290bbe" kindref="member">TF_CODING_ERROR</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>pointer<sp/>to<sp/>TfPyInvokeAndExtract&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>Python<sp/>and<sp/>grab<sp/>the<sp/>GIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="py_interpreter_8h_1acfcd4d756d08b7b3ab1248467b013f5a" kindref="member">TfPyInitialize</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_lock" kindref="compound">TfPyLock</ref><sp/>lock;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>args<sp/>to<sp/>Python<sp/>and<sp/>store<sp/>in<sp/>list+dict<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::list<sp/>posArgs;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::dict<sp/>kwArgs;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_BuildPyInvokeArgs(&amp;posArgs,<sp/>&amp;kwArgs,<sp/>args...);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Import,<sp/>find<sp/>callable,<sp/>and<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tf_PyInvokeImpl(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleName,<sp/>callableExpr,<sp/>posArgs,<sp/>kwArgs,<sp/>resultOut))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::python::error_already_set<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfPyConvertPythonExceptionToTfErrors();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="329" refid="py_invoke_8h_1a32c5dc2c983efc047855f7a6975d6d9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="py_invoke_8h_1a32c5dc2c983efc047855f7a6975d6d9e" kindref="member">TfPyInvoke</ref>(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;moduleName,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;callableExpr,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Args...<sp/>args)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>Python<sp/>and<sp/>grab<sp/>the<sp/>GIL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="py_interpreter_8h_1acfcd4d756d08b7b3ab1248467b013f5a" kindref="member">TfPyInitialize</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_py_lock" kindref="compound">TfPyLock</ref><sp/>lock;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::python::object<sp/>ignoredResult;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="py_invoke_8h_1ad67c57047d560c17a462e430d7045005" kindref="member">TfPyInvokeAndReturn</ref>(</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduleName,<sp/>callableExpr,<sp/>&amp;ignoredResult,<sp/>args...);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PXR_BASE_TF_PY_INVOKE_H</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/pyInvoke.h"/>
  </compounddef>
</doxygen>
