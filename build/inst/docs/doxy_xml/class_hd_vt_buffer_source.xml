<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_vt_buffer_source" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdVtBufferSource</compoundname>
    <basecompoundref refid="class_hd_buffer_source" prot="public" virt="non-virtual">HdBufferSource</basecompoundref>
    <includes refid="vt_buffer_source_8h" local="no">vtBufferSource.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_vt_buffer_source_1a073299b165fbc77310a8ada4902f85f8" prot="private" static="no" mutable="no">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref></type>
        <definition>TfToken _name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="145" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_vt_buffer_source_1af34e7f29af04cd10894849720ef3505e" prot="private" static="no" mutable="no">
        <type><ref refid="class_vt_value" kindref="compound">VtValue</ref></type>
        <definition>VtValue _value</definition>
        <argsstring></argsstring>
        <name>_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="154" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_vt_buffer_source_1a5053b1d72cb9615c0fef61db93739fa4" prot="private" static="no" mutable="no">
        <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref></type>
        <definition>HdTupleType _tupleType</definition>
        <argsstring></argsstring>
        <name>_tupleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="155" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_vt_buffer_source_1af0109f15f53da97ea5c36ff3b4d023ac" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _numElements</definition>
        <argsstring></argsstring>
        <name>_numElements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="156" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_vt_buffer_source_1ad96a1cb6ddb1081242a574e96d08abd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdVtBufferSource</definition>
        <argsstring>(TfToken const &amp;name, VtValue const &amp;value, int arraySize=1, bool allowDoubles=true)</argsstring>
        <name>HdVtBufferSource</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arraySize</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDoubles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a new buffer from a <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraySize</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates how many values are provided per element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowDoubles</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates if double types can be used, or if they must be converted to floats. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a0a0bab38993de5c8856c4556aebef427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdVtBufferSource</definition>
        <argsstring>(TfToken const &amp;name, GfMatrix4d const &amp;matrix, bool allowDoubles=true)</argsstring>
        <name>HdVtBufferSource</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> const &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDoubles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a new buffer from a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is convert to the default type (see <ref refid="class_hd_vt_buffer_source_1aa3363b8cdb3bda32125340d00bfca37e" kindref="member">GetDefaultMatrixType()</ref>).</para>
<para>Note that if we use above <ref refid="class_vt_value" kindref="compound">VtValue</ref> taking constructor, we can use either float or double matrix regardless the default type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allowDoubles</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates if double types can be used, or if they must be converted to floats regardless of the default type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a2d86edbcb792a1d48ec51b07ff87c694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API HdVtBufferSource</definition>
        <argsstring>(TfToken const &amp;name, VtArray&lt; GfMatrix4d &gt; const &amp;matrices, int arraySize=1, bool allowDoubles=true)</argsstring>
        <name>HdVtBufferSource</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_vt_array" kindref="compound">VtArray</ref>&lt; <ref refid="class_gf_matrix4d" kindref="compound">GfMatrix4d</ref> &gt; const &amp;</type>
          <declname>matrices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arraySize</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDoubles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a new buffer from a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is convert to the default type (see <ref refid="class_hd_vt_buffer_source_1aa3363b8cdb3bda32125340d00bfca37e" kindref="member">GetDefaultMatrixType()</ref>).</para>
<para>Note that if we use above <ref refid="class_vt_value" kindref="compound">VtValue</ref> taking constructor, we can use either float or double matrix regardless the default type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arraySize</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates how many values are provided per element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowDoubles</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates if double types can be used, or if they must be converted to floats regardless of the default type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1acdee0a98468981d2e38b0c91a343502a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API</type>
        <definition>HD_API ~HdVtBufferSource</definition>
        <argsstring>() override</argsstring>
        <name>~HdVtBufferSource</name>
        <briefdescription>
<para>Destructor deletes the internal storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a5902db27bd78d5f3cc1c76e5bcb1ec00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API void</type>
        <definition>HD_API void Truncate</definition>
        <argsstring>(size_t numElements)</argsstring>
        <name>Truncate</name>
        <param>
          <type>size_t</type>
          <declname>numElements</declname>
        </param>
        <briefdescription>
<para>Truncate the buffer to the given number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para>If the <ref refid="class_vt_value" kindref="compound">VtValue</ref> contains too much data, this is a way to only forward part of the data to the hydra buffer system. numElements must be less than or equal to the current result of <ref refid="class_hd_vt_buffer_source_1ad8907a5840d09dff15189ec7082ab78e" kindref="member">GetNumElements()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1aaa88672fe0b6e3c013a11562f15bb595" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const  &amp;</type>
        <definition>TfToken const&amp; GetName</definition>
        <argsstring>() const override</argsstring>
        <name>GetName</name>
        <reimplements refid="class_hd_buffer_source_1a97a114d26c6f6cd975cd1b6814b8d03e">GetName</reimplements>
        <briefdescription>
<para>Return the name of this buffer source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="104" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a924096084852cdbff70cf88c00b6e2b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void const  *</type>
        <definition>void const* GetData</definition>
        <argsstring>() const override</argsstring>
        <name>GetData</name>
        <reimplements refid="class_hd_buffer_source_1a308bd3c4ecd2721502e90069f6025587">GetData</reimplements>
        <briefdescription>
<para>Returns the raw pointer to the underlying data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="109" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a4e649c5c2508c1f1dfecf47c8e7442fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref></type>
        <definition>HdTupleType GetTupleType</definition>
        <argsstring>() const override</argsstring>
        <name>GetTupleType</name>
        <reimplements refid="class_hd_buffer_source_1a4acce328dc83a1d73a1a62e8e2a2afc3">GetTupleType</reimplements>
        <briefdescription>
<para>Returns the data type and count of this buffer source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="114" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1ad8907a5840d09dff15189ec7082ab78e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API size_t</type>
        <definition>HD_API size_t GetNumElements</definition>
        <argsstring>() const override</argsstring>
        <name>GetNumElements</name>
        <reimplements refid="class_hd_buffer_source_1a23d40ffcfd073db47f9fb878fb3f67aa">GetNumElements</reimplements>
        <briefdescription>
<para>Returns the number of elements (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>VtVec3dArray().GetLength()) from the source array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a872ac8d55925f45fff63e1221bb3859c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void GetBufferSpecs</definition>
        <argsstring>(HdBufferSpecVector *specs) const override</argsstring>
        <name>GetBufferSpecs</name>
        <reimplements refid="class_hd_buffer_source_1a8a168db3ae7e1b0a8e17ed98f40f9f4e">GetBufferSpecs</reimplements>
        <param>
          <type>HdBufferSpecVector *</type>
          <declname>specs</declname>
        </param>
        <briefdescription>
<para>Add the buffer spec for this buffer source into given bufferspec vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="124" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a80a1295c8c072609797886ee421332b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool Resolve</definition>
        <argsstring>() override</argsstring>
        <name>Resolve</name>
        <reimplements refid="class_hd_buffer_source_1a31cd8967840ac419b37e8059635896e7">Resolve</reimplements>
        <briefdescription>
<para>Prepare the access of <ref refid="class_hd_vt_buffer_source_1a924096084852cdbff70cf88c00b6e2b2" kindref="member">GetData()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="129" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="129" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_hd_vt_buffer_source_1aa3363b8cdb3bda32125340d00bfca37e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HD_API HdType</type>
        <definition>static HD_API HdType GetDefaultMatrixType</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultMatrixType</name>
        <briefdescription>
<para>Returns the default matrix type. </para>
        </briefdescription>
        <detaileddescription>
<para>The default is HdTypeFloatMat4, but if HD_ENABLE_DOUBLEMATRIX is true, then HdTypeDoubleMat4 is used instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a6cd6625bc9a94411fb3596cc489d46db" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HD_API bool</type>
        <definition>HD_API bool _CheckValid</definition>
        <argsstring>() const override</argsstring>
        <name>_CheckValid</name>
        <reimplements refid="class_hd_buffer_source_1a0f0022a4bdf82e55a38f7aeae7156591">_CheckValid</reimplements>
        <briefdescription>
<para>Checks the validity of the source buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by <ref refid="class_hd_buffer_source_1a55323f058382f1585d1e9cb3af59d87f" kindref="member">IsValid()</ref> to do the real checking.</para>
<para>Should only be implemented in classes at leafs of the class hierarchy (Please place common validation code in a new non-virtual method)</para>
<para>This code should return false:<itemizedlist>
<listitem><para>If the buffer would produce an invalid BufferSpec</para>
</listitem><listitem><para>If a required dependent buffer is invalid For example, return false when: The data type is invalid, causing an invalid BufferSpec.</para>
</listitem></itemizedlist>
</para>
<para>The resolve step requires a &apos;source&apos; buffer and that buffer is invalid.</para>
<para>If returning false, the buffer will not be registered with the resource registry. AddBufferSpec and Resolve will not be called </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_vt_buffer_source_1a3cafb57b15f959666fcf4bec87590c9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _SetValue</definition>
        <argsstring>(const VtValue &amp;v, int arraySize, bool allowDoubles)</argsstring>
        <name>_SetValue</name>
        <param>
          <type>const <ref refid="class_vt_value" kindref="compound">VtValue</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowDoubles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hd/vtBufferSource.h" line="143" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An implementation of <ref refid="class_hd_buffer_source" kindref="compound">HdBufferSource</ref> where the source data value is a <ref refid="class_vt_value" kindref="compound">VtValue</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3496">
        <label>HdBufferSource</label>
        <link refid="class_hd_buffer_source"/>
      </node>
      <node id="3495">
        <label>HdVtBufferSource</label>
        <link refid="class_hd_vt_buffer_source"/>
        <childnode refid="3496" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3498">
        <label>HdBufferSource</label>
        <link refid="class_hd_buffer_source"/>
      </node>
      <node id="3497">
        <label>HdVtBufferSource</label>
        <link refid="class_hd_vt_buffer_source"/>
        <childnode refid="3498" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hd/vtBufferSource.h" line="50" column="1" bodyfile="pxr/imaging/hd/vtBufferSource.h" bodystart="49" bodyend="157"/>
    <listofallmembers>
      <member refid="class_hd_vt_buffer_source_1a6cd6625bc9a94411fb3596cc489d46db" prot="protected" virt="virtual"><scope>HdVtBufferSource</scope><name>_CheckValid</name></member>
      <member refid="class_hd_vt_buffer_source_1a073299b165fbc77310a8ada4902f85f8" prot="private" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_name</name></member>
      <member refid="class_hd_vt_buffer_source_1af0109f15f53da97ea5c36ff3b4d023ac" prot="private" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_numElements</name></member>
      <member refid="class_hd_buffer_source_1aa9d9f62a29664a6353762c968c477c9a" prot="protected" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_SetResolved</name></member>
      <member refid="class_hd_buffer_source_1aa93dec2f4f899e2edf89b0b20b9b0408" prot="protected" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_SetResolveError</name></member>
      <member refid="class_hd_vt_buffer_source_1a3cafb57b15f959666fcf4bec87590c9d" prot="private" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_SetValue</name></member>
      <member refid="class_hd_buffer_source_1a95fa005a2674cf5ab757a2d6baa1beaa" prot="protected" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_TryLock</name></member>
      <member refid="class_hd_vt_buffer_source_1a5053b1d72cb9615c0fef61db93739fa4" prot="private" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_tupleType</name></member>
      <member refid="class_hd_vt_buffer_source_1af34e7f29af04cd10894849720ef3505e" prot="private" virt="non-virtual"><scope>HdVtBufferSource</scope><name>_value</name></member>
      <member refid="class_hd_buffer_source_1a97126c48679ed74509d0bb54fc2e47ae" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>ComputeHash</name></member>
      <member refid="class_hd_vt_buffer_source_1a872ac8d55925f45fff63e1221bb3859c" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetBufferSpecs</name></member>
      <member refid="class_hd_buffer_source_1aa319054081d8cc83ea80e3b95a18e37b" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetChainedBuffers</name></member>
      <member refid="class_hd_vt_buffer_source_1a924096084852cdbff70cf88c00b6e2b2" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetData</name></member>
      <member refid="class_hd_vt_buffer_source_1aa3363b8cdb3bda32125340d00bfca37e" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>GetDefaultMatrixType</name></member>
      <member refid="class_hd_vt_buffer_source_1aaa88672fe0b6e3c013a11562f15bb595" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetName</name></member>
      <member refid="class_hd_vt_buffer_source_1ad8907a5840d09dff15189ec7082ab78e" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetNumElements</name></member>
      <member refid="class_hd_buffer_source_1a59b78074e9fcc70237524881864f8ad7" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetPreChainedBuffer</name></member>
      <member refid="class_hd_vt_buffer_source_1a4e649c5c2508c1f1dfecf47c8e7442fb" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>GetTupleType</name></member>
      <member refid="class_hd_buffer_source_1a6882660a1cb15d85f6dfece0d1e4e25d" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>HasChainedBuffer</name></member>
      <member refid="class_hd_buffer_source_1a600437657ebeb5a72da71300032e5532" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>HasPreChainedBuffer</name></member>
      <member refid="class_hd_buffer_source_1ae154f9dca5a409c46b8bdaca56b7d58f" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>HasResolveError</name></member>
      <member refid="class_hd_buffer_source_1aee360bcdc56a9390c0da4dcbd86d6936" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>HdBufferSource</name></member>
      <member refid="class_hd_vt_buffer_source_1ad96a1cb6ddb1081242a574e96d08abd8" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>HdVtBufferSource</name></member>
      <member refid="class_hd_vt_buffer_source_1a0a0bab38993de5c8856c4556aebef427" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>HdVtBufferSource</name></member>
      <member refid="class_hd_vt_buffer_source_1a2d86edbcb792a1d48ec51b07ff87c694" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>HdVtBufferSource</name></member>
      <member refid="class_hd_buffer_source_1a2d798b9f36dd4187831ce00aaf720dd0" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>IsResolved</name></member>
      <member refid="class_hd_buffer_source_1a55323f058382f1585d1e9cb3af59d87f" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>IsValid</name></member>
      <member refid="class_hd_vt_buffer_source_1a80a1295c8c072609797886ee421332b1" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>Resolve</name></member>
      <member refid="class_hd_vt_buffer_source_1a5902db27bd78d5f3cc1c76e5bcb1ec00" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>Truncate</name></member>
      <member refid="class_hd_buffer_source_1a48f26b3afaa40d27e98c6dd91e410df0" prot="public" virt="virtual"><scope>HdVtBufferSource</scope><name>~HdBufferSource</name></member>
      <member refid="class_hd_vt_buffer_source_1acdee0a98468981d2e38b0c91a343502a" prot="public" virt="non-virtual"><scope>HdVtBufferSource</scope><name>~HdVtBufferSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
