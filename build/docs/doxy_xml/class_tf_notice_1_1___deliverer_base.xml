<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_notice_1_1___deliverer_base" kind="class" language="C++" prot="private" abstract="yes">
    <compoundname>TfNotice::_DelivererBase</compoundname>
    <basecompoundref refid="class_tf_weak_base" prot="public" virt="non-virtual">TfWeakBase</basecompoundref>
    <derivedcompoundref refid="class_tf_notice_1_1___standard_deliverer" prot="public" virt="non-virtual">TfNotice::_StandardDeliverer&lt; _Deliverer&lt; LPtr, SPtr, Method, Notice &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_tf_notice_1_1___standard_deliverer" prot="public" virt="non-virtual">TfNotice::_StandardDeliverer&lt; _DelivererWithSender&lt; LPtr, SPtr, Method, Notice &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_tf_notice_1_1___standard_deliverer" prot="public" virt="non-virtual">TfNotice::_StandardDeliverer&lt; _RawDeliverer&lt; LPtr, Method &gt; &gt;</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_tf_notice_1_1___deliverer_base_1a09d05a8afb08a6a81e3b4048a2e8b874" prot="private" static="no" mutable="no">
        <type>_DelivererList *</type>
        <definition>_DelivererList* _list</definition>
        <argsstring></argsstring>
        <name>_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="545" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_notice_1_1___deliverer_base_1a4329fa0520a4c886dd59af3bda0ee7f3" prot="private" static="no" mutable="no">
        <type>_DelivererList::iterator</type>
        <definition>_DelivererList::iterator _listIter</definition>
        <argsstring></argsstring>
        <name>_listIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="546" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_notice_1_1___deliverer_base_1aaf6261fa6a915445f7c09d64ba940e4e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _active</definition>
        <argsstring></argsstring>
        <name>_active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="548" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_notice_1_1___deliverer_base_1a810a985eaf4f0d645ef7f3334e17898c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _markedForRemoval</definition>
        <argsstring></argsstring>
        <name>_markedForRemoval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="549" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a1b7f2b01cf5601a56fe1ef23dd617e2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>_DelivererBase</definition>
        <argsstring>()</argsstring>
        <name>_DelivererBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="464" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1ab1aa8dc4324d077d62f173e105b4d0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TF_API</type>
        <definition>virtual TF_API ~_DelivererBase</definition>
        <argsstring>()</argsstring>
        <name>~_DelivererBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a1c6a397c917dd096237cba252c4a1827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void _BeginDelivery</definition>
        <argsstring>(const TfNotice &amp;notice, const TfWeakBase *sender, const std::type_info &amp;senderType, const TfWeakBase *listener, const std::type_info &amp;listenerType, const std::vector&lt; TfNotice::WeakProbePtr &gt; &amp;probes)</argsstring>
        <name>_BeginDelivery</name>
        <param>
          <type>const <ref refid="class_tf_notice" kindref="compound">TfNotice</ref> &amp;</type>
          <declname>notice</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> *</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>senderType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> *</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>listenerType</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_tf_weak_ptr" kindref="compound">TfNotice::WeakProbePtr</ref> &gt; &amp;</type>
          <declname>probes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1ad0169074bf187d093e5bb3ff8b7249f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API void</type>
        <definition>TF_API void _EndDelivery</definition>
        <argsstring>(const std::vector&lt; TfNotice::WeakProbePtr &gt; &amp;probes)</argsstring>
        <name>_EndDelivery</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_tf_weak_ptr" kindref="compound">TfNotice::WeakProbePtr</ref> &gt; &amp;</type>
          <declname>probes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a92a10a8a7f7702925f382e86e0589960" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool _SendToListener</definition>
        <argsstring>(const TfNotice &amp;n, const TfType &amp;type, const TfWeakBase *s, const void *senderUniqueId, const std::type_info &amp;senderType, const std::vector&lt; TfNotice::WeakProbePtr &gt; &amp;probes)=0</argsstring>
        <name>_SendToListener</name>
        <param>
          <type>const <ref refid="class_tf_notice" kindref="compound">TfNotice</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>senderUniqueId</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>senderType</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_tf_weak_ptr" kindref="compound">TfNotice::WeakProbePtr</ref> &gt; &amp;</type>
          <declname>probes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a476536f05f88f294864bf03d7d290f49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _Deactivate</definition>
        <argsstring>()</argsstring>
        <name>_Deactivate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="496" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1ae2a5618896090abc86172d5f3db735af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsActive</definition>
        <argsstring>() const</argsstring>
        <name>_IsActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="500" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a5a40ff3c56fe98a591bc15abf79cb03e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void _MarkForRemoval</definition>
        <argsstring>()</argsstring>
        <name>_MarkForRemoval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="504" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a5fcb32d9da37ac34de3a9177b6cd304b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool _IsMarkedForRemoval</definition>
        <argsstring>() const</argsstring>
        <name>_IsMarkedForRemoval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="510" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1aed98ef6bf1f09cff62fd918b99c42118" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_tf_type" kindref="compound">TfType</ref></type>
        <definition>virtual TfType GetNoticeType</definition>
        <argsstring>() const =0</argsstring>
        <name>GetNoticeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a6d74cb4ac2c8c423099b458887ea478f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Delivers</definition>
        <argsstring>(TfType const &amp;noticeType, const TfWeakBase *sender) const =0</argsstring>
        <name>Delivers</name>
        <param>
          <type><ref refid="class_tf_type" kindref="compound">TfType</ref> const &amp;</type>
          <declname>noticeType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> *</type>
          <declname>sender</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1aee942a48718d9af0b5dbe0cddd585e80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> const  *</type>
        <definition>virtual TfWeakBase const* GetSenderWeakBase</definition>
        <argsstring>() const =0</argsstring>
        <name>GetSenderWeakBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a4f28ed5092d980cd5e0fd3a303d20540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>_DelivererBase *</type>
        <definition>virtual _DelivererBase* Clone</definition>
        <argsstring>() const =0</argsstring>
        <name>Clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="521" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_tf_notice_1_1___deliverer_base_1a2c4def763e12bc01008bed923919c819" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ToNoticeType</type>
          </param>
          <param>
            <type>class FromNoticeType</type>
          </param>
        </templateparamlist>
        <type>ToNoticeType const  *</type>
        <definition>static ToNoticeType const* _CastNotice</definition>
        <argsstring>(FromNoticeType const *from)</argsstring>
        <name>_CastNotice</name>
        <param>
          <type>FromNoticeType const *</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="527" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="527" bodyend="541"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="100">
        <label>TfNotice::_DelivererBase</label>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
      <node id="101">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="102">
        <label>TfNotice::_DelivererBase</label>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="103">
        <label>TfWeakBase</label>
        <link refid="class_tf_weak_base"/>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/notice.h" line="462" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="462" bodyend="552"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1aaf6261fa6a915445f7c09d64ba940e4e" prot="private" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_active</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a1c6a397c917dd096237cba252c4a1827" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_BeginDelivery</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a2c4def763e12bc01008bed923919c819" prot="protected" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_CastNotice</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a476536f05f88f294864bf03d7d290f49" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_Deactivate</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a1b7f2b01cf5601a56fe1ef23dd617e2b" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_DelivererBase</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ad0169074bf187d093e5bb3ff8b7249f6" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_EndDelivery</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_HasRemnant</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ae2a5618896090abc86172d5f3db735af" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_IsActive</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a5fcb32d9da37ac34de3a9177b6cd304b" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_IsMarkedForRemoval</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a09d05a8afb08a6a81e3b4048a2e8b874" prot="private" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_list</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a4329fa0520a4c886dd59af3bda0ee7f3" prot="private" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_listIter</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a810a985eaf4f0d645ef7f3334e17898c" prot="private" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_markedForRemoval</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a5a40ff3c56fe98a591bc15abf79cb03e" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_MarkForRemoval</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>_Register</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a92a10a8a7f7702925f382e86e0589960" prot="public" virt="pure-virtual"><scope>TfNotice::_DelivererBase</scope><name>_SendToListener</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a4f28ed5092d980cd5e0fd3a303d20540" prot="public" virt="pure-virtual"><scope>TfNotice::_DelivererBase</scope><name>Clone</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a6d74cb4ac2c8c423099b458887ea478f" prot="public" virt="pure-virtual"><scope>TfNotice::_DelivererBase</scope><name>Delivers</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>EnableNotification2</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1aed98ef6bf1f09cff62fd918b99c42118" prot="public" virt="pure-virtual"><scope>TfNotice::_DelivererBase</scope><name>GetNoticeType</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1aee942a48718d9af0b5dbe0cddd585e80" prot="public" virt="pure-virtual"><scope>TfNotice::_DelivererBase</scope><name>GetSenderWeakBase</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ab1aa8dc4324d077d62f173e105b4d0b9" prot="public" virt="virtual"><scope>TfNotice::_DelivererBase</scope><name>~_DelivererBase</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>TfNotice::_DelivererBase</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
