<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_diagnostic_base" kind="class" language="C++" prot="public">
    <compoundname>TfDiagnosticBase</compoundname>
    <derivedcompoundref refid="class_tf_error" prot="public" virt="non-virtual">TfError</derivedcompoundref>
    <derivedcompoundref refid="class_tf_status" prot="public" virt="non-virtual">TfStatus</derivedcompoundref>
    <derivedcompoundref refid="class_tf_warning" prot="public" virt="non-virtual">TfWarning</derivedcompoundref>
    <includes refid="diagnostic_base_8h" local="no">diagnosticBase.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_tf_diagnostic_base_1ae46fe53039b88eb37ee0085546ad566e" prot="protected" static="no" mutable="no">
        <type>TfCallContext</type>
        <definition>TfCallContext _context</definition>
        <argsstring></argsstring>
        <name>_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="199" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1ac36d045fa3fd64e6dacb405df9bb5ce4" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _commentary</definition>
        <argsstring></argsstring>
        <name>_commentary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="201" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1a4d059f805aa6ae89bd5d9964e15a8857" prot="protected" static="no" mutable="no">
        <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
        <definition>TfEnum _code</definition>
        <argsstring></argsstring>
        <name>_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="202" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1a8d8c7c25d53c2d8a7fc37a7c25e16766" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string _codeString</definition>
        <argsstring></argsstring>
        <name>_codeString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="203" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1a3753a46a0f3c3d99809020d35e1b5fa2" prot="protected" static="no" mutable="no">
        <type>TfDiagnosticInfo</type>
        <definition>TfDiagnosticInfo _info</definition>
        <argsstring></argsstring>
        <name>_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="204" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1aeca9f076cc059eeac55255f93f3b1381" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _serial</definition>
        <argsstring></argsstring>
        <name>_serial</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="205" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_tf_diagnostic_base_1a672734405861af56a9fa9d3010ea68f9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _quiet</definition>
        <argsstring></argsstring>
        <name>_quiet</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="206" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_tf_diagnostic_base_1aacef328a407e124aa544bda4238e78c9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfDiagnosticMgr</definition>
        <argsstring></argsstring>
        <name>TfDiagnosticMgr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="208" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_diagnostic_base_1adaa9077caab86eea9e90d9e08390dbb0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfErrorTransport</definition>
        <argsstring></argsstring>
        <name>TfErrorTransport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="209" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_tf_diagnostic_base_1abf35913dc33f1379907a1caa1ed1613a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TfErrorMark</definition>
        <argsstring></argsstring>
        <name>TfErrorMark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="210" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_diagnostic_base_1a67013e7804a9c451978d4d22cdc52c85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const TfCallContext &amp;</type>
        <definition>const TfCallContext&amp; GetContext</definition>
        <argsstring>() const</argsstring>
        <name>GetContext</name>
        <briefdescription>
<para>Return the call context where the message was issued. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="69" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1aa2033e94738cc11fe969d9882c065435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetSourceFileName</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceFileName</name>
        <briefdescription>
<para>Return the source file name that the diagnostic message was posted from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="74" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a9da4376234bc8ee14c9b9e5965c90f4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetSourceLineNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceLineNumber</name>
        <briefdescription>
<para>Return the source line number that the diagnostic message was posted from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="80" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a5fd0c7c922e9dd2a4448b1a0e756e635" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string const  &amp;</type>
        <definition>std::string const&amp; GetCommentary</definition>
        <argsstring>() const</argsstring>
        <name>GetCommentary</name>
        <briefdescription>
<para>Return the commentary string describing this diagnostic message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="85" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a669f88464c26704eee218468df02636a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetSourceFunction</definition>
        <argsstring>() const</argsstring>
        <name>GetSourceFunction</name>
        <briefdescription>
<para>Return the source function that the diagnostic message was posted from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="90" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1ae1e5fd37ce788c1d6ba5ef05562ee252" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void AugmentCommentary</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>AugmentCommentary</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Add to the commentary string describing this diagnostic message. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: each string added to the commentary is separated from the previous one with a newline. This means that you the string <computeroutput>s</computeroutput> should <emphasis>not</emphasis> end with a newline. Thus, <programlisting><codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>e.GetCommentary()<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
</programlisting> always prints the entire commentary string as a newline separated sequence of messages. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="105" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a763f760adf277f0751db6f39fa2c4b28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
        <definition>TfEnum GetDiagnosticCode</definition>
        <argsstring>() const</argsstring>
        <name>GetDiagnosticCode</name>
        <briefdescription>
<para>Return the diagnostic code posted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="115" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a112b46384b40053e570a9306629f331d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; GetDiagnosticCodeAsString</definition>
        <argsstring>() const</argsstring>
        <name>GetDiagnosticCodeAsString</name>
        <briefdescription>
<para>Return the diagnostic code posted as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>If the enum value posted with the message has been registered with <computeroutput><ref refid="group__group__tf___runtime_typing_1ga4acc4a9fb73df5ff2216db8441436132" kindref="member">TF_ADD_ENUM_NAME()</ref></computeroutput>, then <computeroutput><ref refid="class_tf_diagnostic_base_1a112b46384b40053e570a9306629f331d" kindref="member">GetDiagnosticCodeAsString()</ref></computeroutput> will return the symbolic name of the enum.</para>
<para>If the enum has not been registered, then code of the form <programlisting><codeline><highlight class="normal">TF_ERROR(PUCE).Post(&quot;is<sp/>an<sp/>ugly<sp/>color&quot;);</highlight></codeline>
</programlisting> will still result in <computeroutput><ref refid="class_tf_diagnostic_base_1a112b46384b40053e570a9306629f331d" kindref="member">GetDiagnosticCodeAsString()</ref></computeroutput> returning the string &quot;PUCE&quot;; however, code of the form <programlisting><codeline><highlight class="normal">MyErrorCode<sp/>c<sp/>=<sp/>PUCE;</highlight></codeline>
<codeline><highlight class="normal">TF_ERROR(c).Post(&quot;is<sp/>still<sp/>ugly&quot;);</highlight></codeline>
</programlisting> will result in <computeroutput><ref refid="class_tf_diagnostic_base_1a112b46384b40053e570a9306629f331d" kindref="member">GetDiagnosticCodeAsString()</ref></computeroutput> returning the (uninformative) string &quot;c&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="138" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* GetInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetInfo</name>
        <briefdescription>
<para>Return a (possibly NULL) const pointer to the info object associated with this message. </para>
        </briefdescription>
        <detaileddescription>
<para>If this message was posted without supplying an <computeroutput>info</computeroutput> argument to Post(), e.g. <programlisting><codeline><highlight class="normal">TF_ERROR(SOME_CODE).Post(&quot;something<sp/>went<sp/>wrong&quot;);</highlight></codeline>
</programlisting></para>
<para>then <computeroutput><ref refid="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" kindref="member">GetInfo()</ref></computeroutput> returns NULL. Otherwise, when info is supplied, e.g. <programlisting><codeline><highlight class="normal">T<sp/>myInfo<sp/>=<sp/>...</highlight></codeline>
<codeline><highlight class="normal">TF_ERROR(SOME_CODE).Post(&quot;something<sp/>went<sp/>wrong&quot;)-&gt;SetInfo(myInfo);</highlight></codeline>
</programlisting></para>
<para>then a const pointer to a copy of myInfo in the above example is returned by <ref refid="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" kindref="member">GetInfo&lt;T&gt;()</ref>. If the type T doesn&apos;t match the held type then <ref refid="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" kindref="member">GetInfo()</ref> returns NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="162" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a72e1ec0db4055372b0a70e388f0cfc93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetInfo</definition>
        <argsstring>(TfDiagnosticInfo any)</argsstring>
        <name>SetInfo</name>
        <param>
          <type>TfDiagnosticInfo</type>
          <declname>any</declname>
        </param>
        <briefdescription>
<para>Set the info object associated with this diagnostic message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" kindref="member">GetInfo()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="168" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1aac911b0c9d48a043c06eb9ee7af82abc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetQuiet</definition>
        <argsstring>() const</argsstring>
        <name>GetQuiet</name>
        <briefdescription>
<para>Return true if the message was posted via <computeroutput>PostQuietly()</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>Notices sent from <computeroutput>PostQuietly()</computeroutput> are indicating that an immediate printout of the error is not desirable, because someone higher up on the stack may actually handle this error. This is rare, but it does happen on occasion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="178" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a49dcdb741fc51e2f39a1ecf4746d763e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool IsFatal</definition>
        <argsstring>() const</argsstring>
        <name>IsFatal</name>
        <briefdescription>
<para>Return true if this diagnostic&apos;s code is a fatal code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a1303f316a353841e38802db8360d8767" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API bool</type>
        <definition>TF_API bool IsCodingError</definition>
        <argsstring>() const</argsstring>
        <name>IsCodingError</name>
        <briefdescription>
<para>Return true if this diagnostic&apos;s code is either a fatal or nonfatal coding error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_diagnostic_base_1a108d59fa3a6533d33452e653478e8ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TF_API</type>
        <definition>TF_API TfDiagnosticBase</definition>
        <argsstring>(TfEnum code, char const *codeString, TfCallContext const &amp;context, const std::string &amp;commentary, TfDiagnosticInfo info, bool quiet)</argsstring>
        <name>TfDiagnosticBase</name>
        <param>
          <type><ref refid="class_tf_enum" kindref="compound">TfEnum</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>codeString</declname>
        </param>
        <param>
          <type>TfCallContext const &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>commentary</declname>
        </param>
        <param>
          <type>TfDiagnosticInfo</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
        </param>
        <briefdescription>
<para>Construct an instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/diagnosticBase.h" line="193" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the base class of an object representing a diagnostic message. </para>
    </briefdescription>
    <detaileddescription>
<para>This forms the base class for specific types associated with errors, warnings and status messages. It associates a diagnostic code (which is an enum value) with the message. It can also hold on to arbitrary information associated with the message in a TfDiagnosticInfo.</para>
<para>See <ref refid="page_tf__tf_error" kindref="compound">The TfError Error Posting System</ref> in the C++ API reference for a detailed example. For a description of how to post an error, warning or a status message see <computeroutput><ref refid="group__group__tf___diagnostic_1gaf07c45323b79ee51a323339f08c5bfb0" kindref="member">TF_ERROR()</ref></computeroutput>, <computeroutput>TF_WARN</computeroutput> and <computeroutput>TF_STATUS</computeroutput> also in the C++ API reference. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5373">
        <label>TfStatus</label>
        <link refid="class_tf_status"/>
        <childnode refid="5371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5372">
        <label>TfError</label>
        <link refid="class_tf_error"/>
        <childnode refid="5371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5371">
        <label>TfDiagnosticBase</label>
        <link refid="class_tf_diagnostic_base"/>
      </node>
      <node id="5374">
        <label>TfWarning</label>
        <link refid="class_tf_warning"/>
        <childnode refid="5371" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5375">
        <label>TfDiagnosticBase</label>
        <link refid="class_tf_diagnostic_base"/>
        <childnode refid="5376" relation="usage">
          <edgelabel>_code</edgelabel>
        </childnode>
      </node>
      <node id="5376">
        <label>TfEnum</label>
        <link refid="class_tf_enum"/>
      </node>
    </collaborationgraph>
    <location file="pxr/base/tf/diagnosticBase.h" line="65" column="1" bodyfile="pxr/base/tf/diagnosticBase.h" bodystart="65" bodyend="211"/>
    <listofallmembers>
      <member refid="class_tf_diagnostic_base_1a4d059f805aa6ae89bd5d9964e15a8857" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_code</name></member>
      <member refid="class_tf_diagnostic_base_1a8d8c7c25d53c2d8a7fc37a7c25e16766" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_codeString</name></member>
      <member refid="class_tf_diagnostic_base_1ac36d045fa3fd64e6dacb405df9bb5ce4" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_commentary</name></member>
      <member refid="class_tf_diagnostic_base_1ae46fe53039b88eb37ee0085546ad566e" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_context</name></member>
      <member refid="class_tf_diagnostic_base_1a3753a46a0f3c3d99809020d35e1b5fa2" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_info</name></member>
      <member refid="class_tf_diagnostic_base_1a672734405861af56a9fa9d3010ea68f9" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_quiet</name></member>
      <member refid="class_tf_diagnostic_base_1aeca9f076cc059eeac55255f93f3b1381" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>_serial</name></member>
      <member refid="class_tf_diagnostic_base_1ae1e5fd37ce788c1d6ba5ef05562ee252" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>AugmentCommentary</name></member>
      <member refid="class_tf_diagnostic_base_1a5fd0c7c922e9dd2a4448b1a0e756e635" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetCommentary</name></member>
      <member refid="class_tf_diagnostic_base_1a67013e7804a9c451978d4d22cdc52c85" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetContext</name></member>
      <member refid="class_tf_diagnostic_base_1a763f760adf277f0751db6f39fa2c4b28" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetDiagnosticCode</name></member>
      <member refid="class_tf_diagnostic_base_1a112b46384b40053e570a9306629f331d" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetDiagnosticCodeAsString</name></member>
      <member refid="class_tf_diagnostic_base_1a4a300471f7a6309930f33a52dcb88ab4" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetInfo</name></member>
      <member refid="class_tf_diagnostic_base_1aac911b0c9d48a043c06eb9ee7af82abc" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetQuiet</name></member>
      <member refid="class_tf_diagnostic_base_1aa2033e94738cc11fe969d9882c065435" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetSourceFileName</name></member>
      <member refid="class_tf_diagnostic_base_1a669f88464c26704eee218468df02636a" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetSourceFunction</name></member>
      <member refid="class_tf_diagnostic_base_1a9da4376234bc8ee14c9b9e5965c90f4a" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>GetSourceLineNumber</name></member>
      <member refid="class_tf_diagnostic_base_1a1303f316a353841e38802db8360d8767" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>IsCodingError</name></member>
      <member refid="class_tf_diagnostic_base_1a49dcdb741fc51e2f39a1ecf4746d763e" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>IsFatal</name></member>
      <member refid="class_tf_diagnostic_base_1a72e1ec0db4055372b0a70e388f0cfc93" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>SetInfo</name></member>
      <member refid="class_tf_diagnostic_base_1a108d59fa3a6533d33452e653478e8ff5" prot="public" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>TfDiagnosticBase</name></member>
      <member refid="class_tf_diagnostic_base_1aacef328a407e124aa544bda4238e78c9" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>TfDiagnosticMgr</name></member>
      <member refid="class_tf_diagnostic_base_1abf35913dc33f1379907a1caa1ed1613a" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>TfErrorMark</name></member>
      <member refid="class_tf_diagnostic_base_1adaa9077caab86eea9e90d9e08390dbb0" prot="protected" virt="non-virtual"><scope>TfDiagnosticBase</scope><name>TfErrorTransport</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
