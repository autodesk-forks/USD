<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_geom_visibility_a_p_i" kind="class" language="C++" prot="public">
    <compoundname>UsdGeomVisibilityAPI</compoundname>
    <basecompoundref refid="class_usd_a_p_i_schema_base" prot="public" virt="non-virtual">UsdAPISchemaBase</basecompoundref>
    <includes refid="visibility_a_p_i_8h" local="no">visibilityAPI.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_usd_geom_visibility_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" static="yes" mutable="no">
        <type>const <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>const UsdSchemaKind schemaKind</definition>
        <argsstring></argsstring>
        <name>schemaKind</name>
        <initializer>= <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741aa02d2addc2bb693dde0851595872f1aa" kindref="member">UsdSchemaKind::SingleApplyAPI</ref></initializer>
        <briefdescription>
<para>Compile time constant representing what kind of schema this class is. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="99" column="1" bodyfile="pxr/usd/usdGeom/visibilityAPI.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_geom_visibility_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdSchemaRegistry</definition>
        <argsstring></argsstring>
        <name>UsdSchemaRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="191" column="1" bodyfile="pxr/usd/usdGeom/visibilityAPI.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a90910fa172263d4dd1aeca8d6ff6949a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomVisibilityAPI</definition>
        <argsstring>(const UsdPrim &amp;prim=UsdPrim())</argsstring>
        <name>UsdGeomVisibilityAPI</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
          <defval><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> on <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> <computeroutput>prim</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Equivalent to <ref refid="class_usd_geom_visibility_a_p_i_1a5d71ef118a72f844bd490c9e72bb0960" kindref="member">UsdGeomVisibilityAPI::Get</ref>(prim.GetStage(), prim.GetPath()) for a <emphasis>valid</emphasis> <computeroutput>prim</computeroutput>, but will not immediately throw an error for an invalid <computeroutput>prim</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="105" column="1" bodyfile="pxr/usd/usdGeom/visibilityAPI.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a62280032596374b18abda5dee07ff9f8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdGeomVisibilityAPI</definition>
        <argsstring>(const UsdSchemaBase &amp;schemaObj)</argsstring>
        <name>UsdGeomVisibilityAPI</name>
        <param>
          <type>const <ref refid="class_usd_schema_base" kindref="compound">UsdSchemaBase</ref> &amp;</type>
          <declname>schemaObj</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> on the prim held by <computeroutput>schemaObj</computeroutput> . </para>
        </briefdescription>
        <detaileddescription>
<para>Should be preferred over <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref>(schemaObj.GetPrim()), as it preserves SchemaBase state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="113" column="1" bodyfile="pxr/usd/usdGeom/visibilityAPI.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a1ab960d8ceaf36a53e2013a0b71345a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API</type>
        <definition>virtual USDGEOM_API ~UsdGeomVisibilityAPI</definition>
        <argsstring>()</argsstring>
        <name>~UsdGeomVisibilityAPI</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a4ac16d413af65f72a1f63bc83341c66e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetGuideVisibilityAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetGuideVisibilityAttr</name>
        <briefdescription>
<para>This attribute controls visibility for geometry with purpose &quot;guide&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike overall <emphasis>visibility</emphasis>, <emphasis>guideVisibility</emphasis> is uniform, and therefore cannot be animated.</para>
<para>Also unlike overall <emphasis>visibility</emphasis>, <emphasis>guideVisibility</emphasis> is tri-state, in that a descendant with an opinion of &quot;visible&quot; overrides an ancestor opinion of &quot;invisible&quot;.</para>
<para>The <emphasis>guideVisibility</emphasis> attribute works in concert with the overall <emphasis>visibility</emphasis> attribute: The visibility of a prim with purpose &quot;guide&quot; is determined by the inherited values it receives for the <emphasis>visibility</emphasis> and <emphasis>guideVisibility</emphasis> attributes. If <emphasis>visibility</emphasis> evaluates to &quot;invisible&quot;, the prim is invisible. If <emphasis>visibility</emphasis> evaluates to &quot;inherited&quot; and <emphasis>guideVisibility</emphasis> evaluates to &quot;visible&quot;, then the prim is visible. <bold>Otherwise, it is invisible.</bold></para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token guideVisibility = &quot;invisible&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>inherited, invisible, visible   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a0cf37596b1f453da989953b146ca4ade" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateGuideVisibilityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateGuideVisibilityAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_visibility_a_p_i_1a4ac16d413af65f72a1f63bc83341c66e" kindref="member">GetGuideVisibilityAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a726f7079d9cc89a33a8fac1dc4ff8a70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetProxyVisibilityAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetProxyVisibilityAttr</name>
        <briefdescription>
<para>This attribute controls visibility for geometry with purpose &quot;proxy&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike overall <emphasis>visibility</emphasis>, <emphasis>proxyVisibility</emphasis> is uniform, and therefore cannot be animated.</para>
<para>Also unlike overall <emphasis>visibility</emphasis>, <emphasis>proxyVisibility</emphasis> is tri-state, in that a descendant with an opinion of &quot;visible&quot; overrides an ancestor opinion of &quot;invisible&quot;.</para>
<para>The <emphasis>proxyVisibility</emphasis> attribute works in concert with the overall <emphasis>visibility</emphasis> attribute: The visibility of a prim with purpose &quot;proxy&quot; is determined by the inherited values it receives for the <emphasis>visibility</emphasis> and <emphasis>proxyVisibility</emphasis> attributes. If <emphasis>visibility</emphasis> evaluates to &quot;invisible&quot;, the prim is invisible. If <emphasis>visibility</emphasis> evaluates to &quot;inherited&quot; then: If <emphasis>proxyVisibility</emphasis> evaluates to &quot;visible&quot;, then the prim is visible; if <emphasis>proxyVisibility</emphasis> evaluates to &quot;invisible&quot;, then the prim is invisible; if <emphasis>proxyVisibility</emphasis> evaluates to &quot;inherited&quot;, then the prim may either be visible or invisible, depending on a fallback value determined by the calling context.</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token proxyVisibility = &quot;inherited&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>inherited, invisible, visible   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a8038f2e32852995497ced25b4e45fbf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateProxyVisibilityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateProxyVisibilityAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_visibility_a_p_i_1a726f7079d9cc89a33a8fac1dc4ff8a70" kindref="member">GetProxyVisibilityAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a9fd31d514233ed8b0c06332eb8de4801" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetRenderVisibilityAttr</definition>
        <argsstring>() const</argsstring>
        <name>GetRenderVisibilityAttr</name>
        <briefdescription>
<para>This attribute controls visibility for geometry with purpose &quot;render&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Unlike overall <emphasis>visibility</emphasis>, <emphasis>renderVisibility</emphasis> is uniform, and therefore cannot be animated.</para>
<para>Also unlike overall <emphasis>visibility</emphasis>, <emphasis>renderVisibility</emphasis> is tri-state, in that a descendant with an opinion of &quot;visible&quot; overrides an ancestor opinion of &quot;invisible&quot;.</para>
<para>The <emphasis>renderVisibility</emphasis> attribute works in concert with the overall <emphasis>visibility</emphasis> attribute: The visibility of a prim with purpose &quot;render&quot; is determined by the inherited values it receives for the <emphasis>visibility</emphasis> and <emphasis>renderVisibility</emphasis> attributes. If <emphasis>visibility</emphasis> evaluates to &quot;invisible&quot;, the prim is invisible. If <emphasis>visibility</emphasis> evaluates to &quot;inherited&quot; then: If <emphasis>renderVisibility</emphasis> evaluates to &quot;visible&quot;, then the prim is visible; if <emphasis>renderVisibility</emphasis> evaluates to &quot;invisible&quot;, then the prim is invisible; if <emphasis>renderVisibility</emphasis> evaluates to &quot;inherited&quot;, then the prim may either be visible or invisible, depending on a fallback value determined by the calling context.</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>Declaration  </para>
</entry><entry thead="no"><para><computeroutput>uniform token renderVisibility = &quot;inherited&quot;</computeroutput>   </para>
</entry></row>
<row>
<entry thead="no"><para>C++ Type  </para>
</entry><entry thead="no"><para><ref refid="class_tf_token" kindref="compound">TfToken</ref>   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="_usd__page__datatypes_1Usd_Datatypes" kindref="member">Usd Type</ref>  </para>
</entry><entry thead="no"><para>SdfValueTypeNames-&gt;Token   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2sdf_2types_8h_1a71cdb29b28ede8b72fcf36fa6f8d320f" kindref="member">Variability</ref>  </para>
</entry><entry thead="no"><para>SdfVariabilityUniform   </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">Allowed Values</ref>  </para>
</entry><entry thead="no"><para>inherited, invisible, visible   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a69b0f8f1d8fc484b8dd80570a3cdd6be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute CreateRenderVisibilityAttr</definition>
        <argsstring>(VtValue const &amp;defaultValue=VtValue(), bool writeSparsely=false) const</argsstring>
        <name>CreateRenderVisibilityAttr</name>
        <param>
          <type><ref refid="class_vt_value" kindref="compound">VtValue</ref> const &amp;</type>
          <declname>defaultValue</declname>
          <defval><ref refid="class_vt_value" kindref="compound">VtValue</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>writeSparsely</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>See <ref refid="class_usd_geom_visibility_a_p_i_1a9fd31d514233ed8b0c06332eb8de4801" kindref="member">GetRenderVisibilityAttr()</ref>, and also <ref refid="_usd__page__common_idioms_1Usd_Create_Or_Get_Property" kindref="member">Create vs Get Property Methods</ref> for when to use Get vs Create. </para>
        </briefdescription>
        <detaileddescription>
<para>If specified, author <computeroutput>defaultValue</computeroutput> as the attribute&apos;s default, sparsely (when it makes sense to do so) if <computeroutput>writeSparsely</computeroutput> is <computeroutput>true</computeroutput> - the default for <computeroutput>writeSparsely</computeroutput> is <computeroutput>false</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a85475ae7bd7c1c2aef6a2a6dd622cf55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_attribute" kindref="compound">UsdAttribute</ref></type>
        <definition>USDGEOM_API UsdAttribute GetPurposeVisibilityAttr</definition>
        <argsstring>(const TfToken &amp;purpose) const</argsstring>
        <name>GetPurposeVisibilityAttr</name>
        <param>
          <type>const <ref refid="class_tf_token" kindref="compound">TfToken</ref> &amp;</type>
          <declname>purpose</declname>
        </param>
        <briefdescription>
<para>Return the attribute that is used for expressing visibility opinions for the given <computeroutput>purpose</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The valid purpose tokens are &quot;guide&quot;, &quot;proxy&quot;, and &quot;render&quot; which return the attributes <emphasis>guideVisibility</emphasis>, <emphasis>proxyVisibility</emphasis>, and <emphasis>renderVisibility</emphasis> respectively.</para>
<para>Note that while &quot;default&quot; is a valid purpose token for <ref refid="class_usd_geom_imageable_1a2dfc306cddf0c522d39ba477e91ec161" kindref="member">UsdGeomImageable::GetPurposeVisibilityAttr</ref>, it is not a valid purpose for this function, as <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> itself does not have a default visibility attribute. Calling this function with "default will result in a coding error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="357" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="token_8h_1a9d94c69b8de3eb7202797d3c6d56db59" kindref="member">TfTokenVector</ref> &amp;</type>
        <definition>static USDGEOM_API const TfTokenVector&amp; GetSchemaAttributeNames</definition>
        <argsstring>(bool includeInherited=true)</argsstring>
        <name>GetSchemaAttributeNames</name>
        <param>
          <type>bool</type>
          <declname>includeInherited</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a vector of names of all pre-declared attributes for this schema class and all its ancestor classes. </para>
        </briefdescription>
        <detaileddescription>
<para>Does not include attributes that may be authored by custom/extended methods of the schemas involved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a5d71ef118a72f844bd490c9e72bb0960" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref></type>
        <definition>static USDGEOM_API UsdGeomVisibilityAPI Get</definition>
        <argsstring>(const UsdStagePtr &amp;stage, const SdfPath &amp;path)</argsstring>
        <name>Get</name>
        <param>
          <type>const UsdStagePtr &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> holding the prim adhering to this schema at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If no prim exists at <computeroutput>path</computeroutput> on <computeroutput>stage</computeroutput>, or if the prim at that path does not adhere to this schema, return an invalid schema object. This is shorthand for the following:</para>
<para><programlisting><codeline><highlight class="normal">UsdGeomVisibilityAPI(stage-&gt;GetPrimAtPath(path));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a5282a74a6b9a05373d5c3e3e193eefa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API bool</type>
        <definition>static USDGEOM_API bool CanApply</definition>
        <argsstring>(const UsdPrim &amp;prim, std::string *whyNot=nullptr)</argsstring>
        <name>CanApply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>whyNot</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Returns true if this <bold>single-apply</bold> API schema can be applied to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>If this schema can not be a applied to the prim, this returns false and, if provided, populates <computeroutput>whyNot</computeroutput> with the reason it can not be applied.</para>
<para>Note that if CanApply returns false, that does not necessarily imply that calling Apply will fail. Callers are expected to call CanApply before calling Apply if they want to ensure that it is valid to apply a schema.</para>
<para><simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a7436683b2429db8df4b85f72ab8eb6aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref></type>
        <definition>static USDGEOM_API UsdGeomVisibilityAPI Apply</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>Apply</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
<para>Applies this <bold>single-apply</bold> API schema to the given <computeroutput>prim</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This information is stored by adding &quot;VisibilityAPI&quot; to the token-valued, listOp metadata <emphasis>apiSchemas</emphasis> on the prim.</para>
<para><simplesect kind="return"><para>A valid <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> object is returned upon success. An invalid (or empty) <ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> object is returned upon failure. See <ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> for conditions resulting in failure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a42cfbef37f98df2c20c15044c333fe4a" kindref="member">UsdPrim::GetAppliedSchemas()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a582b449631f9e073e0e04582c66ce04a" kindref="member">UsdPrim::HasAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1a2e4b59a7cf7fa0d677270163ea6ad029" kindref="member">UsdPrim::CanApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1ad3ef9d2cec618a0f43fce5295b5b176e" kindref="member">UsdPrim::ApplyAPI()</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_usd_prim_1aab70d4fa20d53a6675734205ded2da22" kindref="member">UsdPrim::RemoveAPI()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="180" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API <ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref></type>
        <definition>USDGEOM_API UsdSchemaKind _GetSchemaKind</definition>
        <argsstring>() const override</argsstring>
        <name>_GetSchemaKind</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a408aa7d080a2672e88403126cc197095">_GetSchemaKind</reimplements>
        <briefdescription>
<para>Returns the kind of schema this class belongs to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="common_8h_1a64c9c016c495366a2ca7330d56c77741" kindref="member">UsdSchemaKind</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="187" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>static USDGEOM_API const TfType&amp; _GetStaticTfType</definition>
        <argsstring>()</argsstring>
        <name>_GetStaticTfType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool _IsTypedSchema</definition>
        <argsstring>()</argsstring>
        <name>_IsTypedSchema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="195" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_geom_visibility_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>USDGEOM_API const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
        <definition>USDGEOM_API const TfType&amp; _GetTfType</definition>
        <argsstring>() const override</argsstring>
        <name>_GetTfType</name>
        <reimplements refid="class_usd_a_p_i_schema_base_1a6f7a3688b0129a59c6e70e925d7ac732">_GetTfType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usdGeom/visibilityAPI.h" line="199" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_geom_visibility_a_p_i" kindref="compound">UsdGeomVisibilityAPI</ref> introduces properties that can be used to author visibility opinions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Currently, this schema only introduces the attributes that are used to control purpose visibility. Later, this schema will define <emphasis>all</emphasis> visibility-related properties and <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> will no longer define those properties.</para>
</simplesect>
The purpose visibility attributes added by this schema, <emphasis>guideVisibility</emphasis>, <emphasis>proxyVisibility</emphasis>, and <emphasis>renderVisibility</emphasis> can each be used to control visibility for geometry of the corresponding purpose values, with the overall <emphasis>visibility</emphasis> attribute acting as an override. I.e., if <emphasis>visibility</emphasis> evaluates to &quot;invisible&quot;, purpose visibility is invisible; otherwise, purpose visibility is determined by the corresponding purpose visibility attribute.</para>
<para>Note that the behavior of <emphasis>guideVisibility</emphasis> is subtly different from the <emphasis>proxyVisibility</emphasis> and <emphasis>renderVisibility</emphasis> attributes, in that &quot;guide&quot; purpose visibility always evaluates to either &quot;invisible&quot; or &quot;visible&quot;, whereas the other attributes may yield computed values of &quot;inherited&quot; if there is no authored opinion on the attribute or inherited from an ancestor. This is motivated by the fact that, in Pixar"s user workflows, we have never found a need to have all guides visible in a scene by default, whereas we do find that flexibility useful for &quot;proxy&quot; and &quot;render&quot; geometry.</para>
<para>This schema can only be applied to <ref refid="class_usd_geom_imageable" kindref="compound">UsdGeomImageable</ref> prims. The UseGeomImageable schema provides API for computing the purpose visibility values that result from the attributes introduced by this schema.</para>
<para>For any described attribute <emphasis>Fallback</emphasis> <emphasis>Value</emphasis> or <emphasis>Allowed</emphasis> <emphasis>Values</emphasis> below that are text/tokens, the actual token is published and defined in <ref refid="usd_2usd_geom_2tokens_8h_1ad9e3544e015f99ed697804fd6bfe1a88" kindref="member">UsdGeomTokens</ref>. So to set an attribute to the value &quot;rightHanded&quot;, use UsdGeomTokens-&gt;rightHanded as the value. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6500">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6498">
        <label>UsdGeomVisibilityAPI</label>
        <link refid="class_usd_geom_visibility_a_p_i"/>
        <childnode refid="6499" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6499">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6500" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6503">
        <label>UsdSchemaBase</label>
        <link refid="class_usd_schema_base"/>
      </node>
      <node id="6501">
        <label>UsdGeomVisibilityAPI</label>
        <link refid="class_usd_geom_visibility_a_p_i"/>
        <childnode refid="6502" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6502">
        <label>UsdAPISchemaBase</label>
        <link refid="class_usd_a_p_i_schema_base"/>
        <childnode refid="6503" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/usd/usdGeom/visibilityAPI.h" line="94" column="1" bodyfile="pxr/usd/usdGeom/visibilityAPI.h" bodystart="93" bodyend="358"/>
    <listofallmembers>
      <member refid="class_usd_schema_base_1ad99ec8284868478b50e8fc3475880dab" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_CreateAttr</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa27e613f624c34d85fc17cbf58956245" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetInstanceName</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aaf34e3836e442b3a04d517febdb69cc3" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetMultipleApplyInstanceNames</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a71a1af4672754da617b8cb537f29c5f4" prot="protected" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1a6c51fb3251d5fde5ffa9fe7a998ce970" prot="protected" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetSchemaType</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1ad32bf70dffbb431c0fa883d5fbc1802d" prot="private" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetStaticTfType</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a1e6b9f0da5624212c58019b749c21286" prot="private" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetTfType</name></member>
      <member refid="class_usd_schema_base_1aa29ea4c951d8debfd8085a28c6aa80ca" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_GetType</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ad91204cc9fb92f0306372e074052190f" prot="protected" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>_IsCompatible</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1abbc02364dd87e9f147201cbd8d260d43" prot="private" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>_IsTypedSchema</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a7436683b2429db8df4b85f72ab8eb6aa" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>Apply</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a5282a74a6b9a05373d5c3e3e193eefa1" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>CanApply</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a0cf37596b1f453da989953b146ca4ade" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>CreateGuideVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a8038f2e32852995497ced25b4e45fbf0" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>CreateProxyVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a69b0f8f1d8fc484b8dd80570a3cdd6be" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>CreateRenderVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a5d71ef118a72f844bd490c9e72bb0960" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>Get</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a4ac16d413af65f72a1f63bc83341c66e" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetGuideVisibilityAttr</name></member>
      <member refid="class_usd_schema_base_1a936bfb1e341cc81184c64af44763c433" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetPath</name></member>
      <member refid="class_usd_schema_base_1a4ba10e023e7f3f3c93131bc7fc3146b7" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetPrim</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a726f7079d9cc89a33a8fac1dc4ff8a70" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetProxyVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a85475ae7bd7c1c2aef6a2a6dd622cf55" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetPurposeVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a9fd31d514233ed8b0c06332eb8de4801" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetRenderVisibilityAttr</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1ae40ae43320babff8a254a3a8107a255a" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetSchemaAttributeNames</name></member>
      <member refid="class_usd_schema_base_1a030d03e2a9839d9c3da0fbca8c3722d4" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetSchemaClassPrimDefinition</name></member>
      <member refid="class_usd_schema_base_1aeac68c5514faebb20c5ae3cb930170de" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>GetSchemaKind</name></member>
      <member refid="class_usd_schema_base_1ad658b6730d4246ee1f903ce4ce18fdfe" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>IsAPISchema</name></member>
      <member refid="class_usd_schema_base_1a68e867971cc992c5b03e73725c405c05" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>IsAppliedAPISchema</name></member>
      <member refid="class_usd_schema_base_1ae2c90cefba1b2e09dc117a7d972009cb" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>IsConcrete</name></member>
      <member refid="class_usd_schema_base_1af752510dea0c7106aa89832e60dfa3d5" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>IsMultipleApplyAPISchema</name></member>
      <member refid="class_usd_schema_base_1afa15659f4fa280e4c0772173d7471920" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>IsTyped</name></member>
      <member refid="class_usd_schema_base_1a586531d84339318108c817f91367e626" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>operator bool</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a3e5fc43aea5aea4908c3ce980fdf8908" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>schemaKind</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a693760be7357b341ca92cae42af89a2a" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1aa02eade67d6ca4c0d58fe3b7e5a4cc9a" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ae1aaced053a4cc13c21b444b27130c75" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_a_p_i_schema_base_1ac9df31df96c3346f55ba31be7472f106" prot="protected" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a90910fa172263d4dd1aeca8d6ff6949a" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdGeomVisibilityAPI</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a62280032596374b18abda5dee07ff9f8" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdGeomVisibilityAPI</name></member>
      <member refid="class_usd_schema_base_1a32e0a9b0465ecf201fb501753baa8587" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_schema_base_1a73921308189043c86867d6bd9012b4af" prot="public" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdSchemaBase</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1aff8b8d83211f127c6c4cba48fb7d3334" prot="private" virt="non-virtual"><scope>UsdGeomVisibilityAPI</scope><name>UsdSchemaRegistry</name></member>
      <member refid="class_usd_a_p_i_schema_base_1a426f2a53141cc3eefa43fce755f83108" prot="public" virt="pure-virtual"><scope>UsdGeomVisibilityAPI</scope><name>~UsdAPISchemaBase</name></member>
      <member refid="class_usd_geom_visibility_a_p_i_1a1ab960d8ceaf36a53e2013a0b71345a6" prot="public" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>~UsdGeomVisibilityAPI</name></member>
      <member refid="class_usd_schema_base_1a3e97b9a7311478da9f2d168bea29560e" prot="public" virt="virtual"><scope>UsdGeomVisibilityAPI</scope><name>~UsdSchemaBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
