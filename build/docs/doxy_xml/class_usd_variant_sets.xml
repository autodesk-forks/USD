<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_usd_variant_sets" kind="class" language="C++" prot="public">
    <compoundname>UsdVariantSets</compoundname>
    <includes refid="variant_sets_8h" local="no">variantSets.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_usd_variant_sets_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" static="no" mutable="no">
        <type><ref refid="class_usd_prim" kindref="compound">UsdPrim</ref></type>
        <definition>UsdPrim _prim</definition>
        <argsstring></argsstring>
        <name>_prim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="291" column="1" bodyfile="pxr/usd/usd/variantSets.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_usd_variant_sets_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class UsdPrim</definition>
        <argsstring></argsstring>
        <name>UsdPrim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="293" column="1" bodyfile="pxr/usd/usd/variantSets.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_usd_variant_sets_1afa72971becc14b53366f2913307b8164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_variant_set" kindref="compound">UsdVariantSet</ref></type>
        <definition>USD_API UsdVariantSet AddVariantSet</definition>
        <argsstring>(const std::string &amp;variantSetName, UsdListPosition position=UsdListPositionBackOfPrependList)</argsstring>
        <name>AddVariantSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1a28349701078995dc76a99331bb60c555" kindref="member">UsdListPosition</ref></type>
          <declname>position</declname>
          <defval><ref refid="common_8h_1a28349701078995dc76a99331bb60c555a681727d9e5aecd6058825ab1fe888028" kindref="member">UsdListPositionBackOfPrependList</ref></defval>
        </param>
        <briefdescription>
<para>Find an existing, or create a new VariantSet on the originating <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>, named <computeroutput>variantSetName</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This step is not always necessary, because if this <ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref> object is valid, then <programlisting><codeline><highlight class="normal">varSetsObj.GetVariantSet(variantSetName).AddVariant(variantName);</highlight></codeline>
</programlisting> will always succeed, creating the VariantSet first, if necessary. This method exists for situations in which you want to create a VariantSet without necessarily populating it with variants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1ad4cc15966f63904b97e2c425caede0a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool GetNames</definition>
        <argsstring>(std::vector&lt; std::string &gt; *names) const</argsstring>
        <name>GetNames</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Compute the list of all VariantSets authored on the originating <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Always return true. Clear the contents of <computeroutput>names</computeroutput> and store the result there. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1af67da52ef0ba5d01d8eda6d7c3510fda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::vector&lt; std::string &gt;</type>
        <definition>USD_API std::vector&lt;std::string&gt; GetNames</definition>
        <argsstring>() const</argsstring>
        <name>GetNames</name>
        <briefdescription>
<para>Return a list of all VariantSets authored on the originating <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1af19d1f1b9e4b50244323722b8927d507" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_usd_variant_set" kindref="compound">UsdVariantSet</ref></type>
        <definition>UsdVariantSet operator[]</definition>
        <argsstring>(const std::string &amp;variantSetName) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="252" column="1" bodyfile="pxr/usd/usd/variantSets.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1a607da249e11bc4f5f3b4bf0db99861ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="class_usd_variant_set" kindref="compound">UsdVariantSet</ref></type>
        <definition>USD_API UsdVariantSet GetVariantSet</definition>
        <argsstring>(const std::string &amp;variantSetName) const</argsstring>
        <name>GetVariantSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="class_usd_variant_set" kindref="compound">UsdVariantSet</ref> object for <computeroutput>variantSetName</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This always succeeds, although the returned VariantSet will be invalid if the originating prim is invalid </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1a7ccf567f5cde874dc356af31008bcd4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool HasVariantSet</definition>
        <argsstring>(const std::string &amp;variantSetName) const</argsstring>
        <name>HasVariantSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <briefdescription>
<para>Returns true if a VariantSet named <computeroutput>variantSetName</computeroutput> exists on the originating prim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1a2cf66be9fc163c5dcc1f71595458471f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API std::string</type>
        <definition>USD_API std::string GetVariantSelection</definition>
        <argsstring>(const std::string &amp;variantSetName) const</argsstring>
        <name>GetVariantSelection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <briefdescription>
<para>Return the composed variant selection for the VariantSet named <emphasis>variantSetName</emphasis>. </para>
        </briefdescription>
        <detaileddescription>
<para>If there is no selection, (or <computeroutput>variantSetName</computeroutput> does not exist) return the empty string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1ad5e3a78b27ac85df070e3d94c2bc6738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API bool</type>
        <definition>USD_API bool SetSelection</definition>
        <argsstring>(const std::string &amp;variantSetName, const std::string &amp;variantName)</argsstring>
        <name>SetSelection</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantSetName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>variantName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_usd_variant_sets_1a4938aaa5beaa06cc5dcf1b172d84f575" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>USD_API <ref refid="usd_2sdf_2types_8h_1a9ab887757f82b67df655862e95223c21" kindref="member">SdfVariantSelectionMap</ref></type>
        <definition>USD_API SdfVariantSelectionMap GetAllVariantSelections</definition>
        <argsstring>() const</argsstring>
        <name>GetAllVariantSelections</name>
        <briefdescription>
<para>Returns the composed map of all variant selections authored on the the originating <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>, regardless of whether a corresponding variant set exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="281" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_usd_variant_sets_1afe3a110a96846bac7bf33e9a493e138a" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>UsdVariantSets</definition>
        <argsstring>(const UsdPrim &amp;prim)</argsstring>
        <name>UsdVariantSets</name>
        <param>
          <type>const <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref> &amp;</type>
          <declname>prim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/usd/variantSets.h" line="285" column="1" bodyfile="pxr/usd/usd/variantSets.h" bodystart="285" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref> represents the collection of <ref refid="class_usd_variant_set" kindref="compound">VariantSets</ref> that are present on a <ref refid="class_usd_prim" kindref="compound">UsdPrim</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="class_usd_variant_sets" kindref="compound">UsdVariantSets</ref> object, retrieved from a prim via <ref refid="class_usd_prim_1a9949ecc0b27afc66d61f2d0f88453e52" kindref="member">UsdPrim::GetVariantSets()</ref>, provides the API for interrogating and modifying the composed list of VariantSets active defined on the prim, and also the facility for authoring a VariantSet <emphasis>selection</emphasis> for any of those VariantSets. </para>
    </detaileddescription>
    <location file="pxr/usd/usd/variantSets.h" line="222" column="1" bodyfile="pxr/usd/usd/variantSets.h" bodystart="222" bodyend="294"/>
    <listofallmembers>
      <member refid="class_usd_variant_sets_1acdc34f90758c0dce41b95b4ec86a717d" prot="private" virt="non-virtual"><scope>UsdVariantSets</scope><name>_prim</name></member>
      <member refid="class_usd_variant_sets_1afa72971becc14b53366f2913307b8164" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>AddVariantSet</name></member>
      <member refid="class_usd_variant_sets_1a4938aaa5beaa06cc5dcf1b172d84f575" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>GetAllVariantSelections</name></member>
      <member refid="class_usd_variant_sets_1ad4cc15966f63904b97e2c425caede0a0" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>GetNames</name></member>
      <member refid="class_usd_variant_sets_1af67da52ef0ba5d01d8eda6d7c3510fda" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>GetNames</name></member>
      <member refid="class_usd_variant_sets_1a2cf66be9fc163c5dcc1f71595458471f" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>GetVariantSelection</name></member>
      <member refid="class_usd_variant_sets_1a607da249e11bc4f5f3b4bf0db99861ab" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>GetVariantSet</name></member>
      <member refid="class_usd_variant_sets_1a7ccf567f5cde874dc356af31008bcd4c" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>HasVariantSet</name></member>
      <member refid="class_usd_variant_sets_1af19d1f1b9e4b50244323722b8927d507" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>operator[]</name></member>
      <member refid="class_usd_variant_sets_1ad5e3a78b27ac85df070e3d94c2bc6738" prot="public" virt="non-virtual"><scope>UsdVariantSets</scope><name>SetSelection</name></member>
      <member refid="class_usd_variant_sets_1a2456ef04cace6b3b67dad91da7f430b8" prot="private" virt="non-virtual"><scope>UsdVariantSets</scope><name>UsdPrim</name></member>
      <member refid="class_usd_variant_sets_1afe3a110a96846bac7bf33e9a493e138a" prot="private" virt="non-virtual"><scope>UsdVariantSets</scope><name>UsdVariantSets</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
