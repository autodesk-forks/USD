<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="ref_ptr_tracker_8h" kind="file" language="C++">
    <compoundname>refPtrTracker.h</compoundname>
    <includes refid="pxr_8h" local="yes">pxr/pxr.h</includes>
    <includes refid="base_2tf_2api_8h" local="yes">pxr/base/tf/api.h</includes>
    <includes refid="tf_2hash_8h" local="yes">pxr/base/tf/hash.h</includes>
    <includes refid="hashmap_8h" local="yes">pxr/base/tf/hashmap.h</includes>
    <includes refid="weak_base_8h" local="yes">pxr/base/tf/weakBase.h</includes>
    <includes refid="singleton_8h" local="yes">pxr/base/tf/singleton.h</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">mutex</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="75633">
        <label>atomic</label>
      </node>
      <node id="75604">
        <label>pxr/base/arch/inttypes.h</label>
        <link refid="inttypes_8h"/>
        <childnode refid="75605" relation="include">
        </childnode>
        <childnode refid="75606" relation="include">
        </childnode>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75599" relation="include">
        </childnode>
        <childnode refid="75607" relation="include">
        </childnode>
      </node>
      <node id="75619">
        <label>pxr/base/tf/hashmap.h</label>
        <link refid="hashmap_8h_source"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75599" relation="include">
        </childnode>
        <childnode refid="75620" relation="include">
        </childnode>
      </node>
      <node id="75598">
        <label>pxr/base/arch/export.h</label>
        <link refid="export_8h"/>
        <childnode refid="75599" relation="include">
        </childnode>
      </node>
      <node id="75606">
        <label>cstdint</label>
      </node>
      <node id="75624">
        <label>pxr/base/tf/refPtr.h</label>
        <link refid="ref_ptr_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75625" relation="include">
        </childnode>
        <childnode refid="75600" relation="include">
        </childnode>
        <childnode refid="75630" relation="include">
        </childnode>
        <childnode refid="75631" relation="include">
        </childnode>
        <childnode refid="75634" relation="include">
        </childnode>
        <childnode refid="75636" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75623" relation="include">
        </childnode>
        <childnode refid="75635" relation="include">
        </childnode>
        <childnode refid="75617" relation="include">
        </childnode>
        <childnode refid="75637" relation="include">
        </childnode>
      </node>
      <node id="75639">
        <label>pxr/base/arch/pragmas.h</label>
        <link refid="pragmas_8h"/>
        <childnode refid="75599" relation="include">
        </childnode>
      </node>
      <node id="75608">
        <label>cmath</label>
      </node>
      <node id="75601">
        <label>pxr/base/tf/tf.h</label>
        <link refid="tf_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75602" relation="include">
        </childnode>
        <childnode refid="75603" relation="include">
        </childnode>
        <childnode refid="75604" relation="include">
        </childnode>
        <childnode refid="75609" relation="include">
        </childnode>
        <childnode refid="75610" relation="include">
        </childnode>
      </node>
      <node id="75631">
        <label>pxr/base/tf/refBase.h</label>
        <link refid="ref_base_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75632" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
      </node>
      <node id="75612">
        <label>string</label>
      </node>
      <node id="75626">
        <label>pxr/base/arch/attributes.h</label>
        <link refid="attributes_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75598" relation="include">
        </childnode>
      </node>
      <node id="75613">
        <label>map</label>
      </node>
      <node id="75605">
        <label>cinttypes</label>
      </node>
      <node id="75596">
        <label>pxr/pxr.h</label>
        <link refid="pxr_8h"/>
      </node>
      <node id="75629">
        <label>stddef.h</label>
      </node>
      <node id="75602">
        <label>pxr/base/arch/buildMode.h</label>
        <link refid="build_mode_8h_source"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75599" relation="include">
        </childnode>
      </node>
      <node id="75632">
        <label>pxr/base/tf/refCount.h</label>
        <link refid="ref_count_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75604" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75633" relation="include">
        </childnode>
      </node>
      <node id="75634">
        <label>pxr/base/tf/safeTypeCompare.h</label>
        <link refid="safe_type_compare_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75635" relation="include">
        </childnode>
      </node>
      <node id="75622">
        <label>pxr/base/tf/expiryNotifier.h</label>
        <link refid="expiry_notifier_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75623" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
      </node>
      <node id="75607">
        <label>sys/types.h</label>
      </node>
      <node id="75635">
        <label>typeinfo</label>
      </node>
      <node id="75603">
        <label>pxr/base/arch/math.h</label>
        <link refid="arch_2math_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75599" relation="include">
        </childnode>
        <childnode refid="75604" relation="include">
        </childnode>
        <childnode refid="75608" relation="include">
        </childnode>
      </node>
      <node id="75618">
        <label>vector</label>
      </node>
      <node id="75597">
        <label>pxr/base/tf/api.h</label>
        <link refid="base_2tf_2api_8h_source"/>
        <childnode refid="75598" relation="include">
        </childnode>
      </node>
      <node id="75610">
        <label>utility</label>
      </node>
      <node id="75630">
        <label>pxr/base/tf/nullPtr.h</label>
        <link refid="null_ptr_8h_source"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
      </node>
      <node id="75599">
        <label>pxr/base/arch/defines.h</label>
        <link refid="defines_8h_source"/>
      </node>
      <node id="75595">
        <label>pxr/base/tf/refPtrTracker.h</label>
        <link refid="ref_ptr_tracker_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75600" relation="include">
        </childnode>
        <childnode refid="75619" relation="include">
        </childnode>
        <childnode refid="75621" relation="include">
        </childnode>
        <childnode refid="75638" relation="include">
        </childnode>
        <childnode refid="75640" relation="include">
        </childnode>
        <childnode refid="75641" relation="include">
        </childnode>
        <childnode refid="75618" relation="include">
        </childnode>
      </node>
      <node id="75623">
        <label>pxr/base/arch/hints.h</label>
        <link refid="hints_8h"/>
        <childnode refid="75599" relation="include">
        </childnode>
      </node>
      <node id="75600">
        <label>pxr/base/tf/hash.h</label>
        <link refid="tf_2hash_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75601" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75611" relation="include">
        </childnode>
        <childnode refid="75612" relation="include">
        </childnode>
        <childnode refid="75613" relation="include">
        </childnode>
        <childnode refid="75614" relation="include">
        </childnode>
        <childnode refid="75615" relation="include">
        </childnode>
        <childnode refid="75616" relation="include">
        </childnode>
        <childnode refid="75617" relation="include">
        </childnode>
        <childnode refid="75610" relation="include">
        </childnode>
        <childnode refid="75618" relation="include">
        </childnode>
      </node>
      <node id="75609">
        <label>math.h</label>
      </node>
      <node id="75640">
        <label>iosfwd</label>
      </node>
      <node id="75627">
        <label>pxr/base/tf/callContext.h</label>
        <link refid="call_context_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75628" relation="include">
        </childnode>
        <childnode refid="75629" relation="include">
        </childnode>
      </node>
      <node id="75637">
        <label>cstddef</label>
      </node>
      <node id="75638">
        <label>pxr/base/tf/singleton.h</label>
        <link refid="singleton_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75639" relation="include">
        </childnode>
        <childnode refid="75633" relation="include">
        </childnode>
      </node>
      <node id="75636">
        <label>pxr/base/tf/typeFunctions.h</label>
        <link refid="type_functions_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75614" relation="include">
        </childnode>
      </node>
      <node id="75620">
        <label>unordered_map</label>
      </node>
      <node id="75641">
        <label>mutex</label>
      </node>
      <node id="75625">
        <label>pxr/base/tf/diagnosticLite.h</label>
        <link refid="diagnostic_lite_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75626" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75602" relation="include">
        </childnode>
        <childnode refid="75623" relation="include">
        </childnode>
        <childnode refid="75627" relation="include">
        </childnode>
        <childnode refid="75629" relation="include">
        </childnode>
      </node>
      <node id="75617">
        <label>type_traits</label>
      </node>
      <node id="75615">
        <label>set</label>
      </node>
      <node id="75628">
        <label>pxr/base/arch/functionLite.h</label>
        <link refid="function_lite_8h"/>
        <childnode refid="75599" relation="include">
        </childnode>
      </node>
      <node id="75611">
        <label>cstring</label>
      </node>
      <node id="75621">
        <label>pxr/base/tf/weakBase.h</label>
        <link refid="weak_base_8h"/>
        <childnode refid="75596" relation="include">
        </childnode>
        <childnode refid="75597" relation="include">
        </childnode>
        <childnode refid="75622" relation="include">
        </childnode>
        <childnode refid="75624" relation="include">
        </childnode>
        <childnode refid="75633" relation="include">
        </childnode>
      </node>
      <node id="75614">
        <label>memory</label>
      </node>
      <node id="75616">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_tf_ref_ptr" prot="public">TfRefPtr</innerclass>
    <innerclass refid="class_tf_ref_ptr_tracker" prot="public">TfRefPtrTracker</innerclass>
    <innerclass refid="struct_tf_ref_ptr_tracker_1_1_trace" prot="public">TfRefPtrTracker::Trace</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="ref_ptr_tracker_8h_1a3a747665008bb2dd3ee9d6320ccdf5de" prot="public" static="no">
        <name>TF_DECLARE_REFPTR_TRACK</name>
        <param><defname>T</defname></param>
        <initializer>inline void Tf_RefPtrTracker_FirstRef(const void*, T* obj);                 \
inline void Tf_RefPtrTracker_LastRef(const void*, T* obj);                  \
inline void Tf_RefPtrTracker_New(const void* owner, T* obj);                \
inline void Tf_RefPtrTracker_Delete(const void* owner, T* obj);             \
inline void Tf_RefPtrTracker_Assign(const void* owner, T* obj, T* oldObj);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/refPtrTracker.h" line="236" column="9" bodyfile="pxr/base/tf/refPtrTracker.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ref_ptr_tracker_8h_1a73777a3fa96d4440f836e08369f08329" prot="public" static="no">
        <name>TF_DEFINE_REFPTR_TRACK</name>
        <param><defname>T</defname></param>
        <param><defname>COND</defname></param>
        <initializer>inline void Tf_RefPtrTracker_FirstRef(const void*, T* obj) {                \
    if (obj &amp;&amp; COND(obj)) Tf_RefPtrTrackerUtil::Watch(obj);                \
}                                                                           \
inline void Tf_RefPtrTracker_LastRef(const void*, T* obj) {                 \
    Tf_RefPtrTrackerUtil::Unwatch(obj);                                     \
}                                                                           \
inline void Tf_RefPtrTracker_New(const void* owner, T* obj) {               \
    Tf_RefPtrTrackerUtil::AddTrace(owner, obj);                             \
}                                                                           \
inline void Tf_RefPtrTracker_Delete(const void* owner, T* obj) {            \
    Tf_RefPtrTrackerUtil::RemoveTraces(owner);                              \
}                                                                           \
inline void Tf_RefPtrTracker_Assign(const void* owner, T* obj, T* oldObj) { \
    if (oldObj != obj) {                                                    \
        Tf_RefPtrTrackerUtil::AddTrace(owner, obj, TfRefPtrTracker::Assign);\
    }                                                                       \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/refPtrTracker.h" line="243" column="9" bodyfile="pxr/base/tf/refPtrTracker.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ref_ptr_tracker_8h_1a6d34f0ef89322c91b8a7b276865ac25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TF_API_TEMPLATE_CLASS</definition>
        <argsstring>(TfSingleton&lt; TfRefPtrTracker &gt;)</argsstring>
        <name>TF_API_TEMPLATE_CLASS</name>
        <param>
          <type><ref refid="class_tf_singleton" kindref="compound">TfSingleton</ref>&lt; <ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/refPtrTracker.h" line="204" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2016<sp/>Pixar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;Apache<sp/>License&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>following<sp/>modification;<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compliance<sp/>with<sp/>the<sp/>Apache<sp/>License<sp/>and<sp/>the<sp/>following<sp/>modification<sp/>to<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>6.<sp/>Trademarks.<sp/>is<sp/>deleted<sp/>and<sp/>replaced<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.<sp/>Trademarks.<sp/>This<sp/>License<sp/>does<sp/>not<sp/>grant<sp/>permission<sp/>to<sp/>use<sp/>the<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names,<sp/>trademarks,<sp/>service<sp/>marks,<sp/>or<sp/>product<sp/>names<sp/>of<sp/>the<sp/>Licensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>its<sp/>affiliates,<sp/>except<sp/>as<sp/>required<sp/>to<sp/>comply<sp/>with<sp/>Section<sp/>4(c)<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>the<sp/>License<sp/>and<sp/>to<sp/>reproduce<sp/>the<sp/>content<sp/>of<sp/>the<sp/>NOTICE<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Apache<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>Apache<sp/>License<sp/>with<sp/>the<sp/>above<sp/>modification<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>Apache<sp/>License<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>Apache<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PXR_BASE_TF_REF_PTR_TRACKER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PXR_BASE_TF_REF_PTR_TRACKER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pxr_8h" kindref="compound">pxr/pxr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tf_2hash_8h" kindref="compound">pxr/base/tf/hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pxr/base/tf/hashmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="weak_base_8h" kindref="compound">pxr/base/tf/weakBase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="singleton_8h" kindref="compound">pxr/base/tf/singleton.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">PXR_NAMESPACE_OPEN_SCOPE</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_ref_ptr" kindref="compound">TfRefPtr</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="class_tf_ref_ptr_tracker" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TraceType<sp/>{<sp/>Add,<sp/>Assign<sp/>};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>&amp;<sp/>GetInstance()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_tf_singleton_1a0866aab4257483326c469dcef942f0e1" kindref="member">TfSingleton&lt;TfRefPtrTracker&gt;::GetInstance</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1a62ee02a26ef277dd12a9fa42852db780" kindref="member">GetStackTraceMaxDepth</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1aa0aef934450a508bb820c7ab6e2c7aa6" kindref="member">SetStackTraceMaxDepth</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="struct_tf_ref_ptr_tracker_1_1_trace" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_tf_ref_ptr_tracker_1_1_trace" kindref="compound">Trace</ref><sp/>{</highlight></codeline>
<codeline lineno="118" refid="struct_tf_ref_ptr_tracker_1_1_trace_1a7ab0991971107064c7d0979e814cb09e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uintptr_t&gt;<sp/><ref refid="struct_tf_ref_ptr_tracker_1_1_trace_1a7ab0991971107064c7d0979e814cb09e" kindref="member">trace</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="struct_tf_ref_ptr_tracker_1_1_trace_1a079348de3c1a6be7f1ed4223de12643e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/><ref refid="struct_tf_ref_ptr_tracker_1_1_trace_1a079348de3c1a6be7f1ed4223de12643e" kindref="member">obj</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="struct_tf_ref_ptr_tracker_1_1_trace_1a9fbeee8b4a289c7e5092506631fde0e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraceType<sp/><ref refid="struct_tf_ref_ptr_tracker_1_1_trace_1a9fbeee8b4a289c7e5092506631fde0e8" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_tf_ref_ptr_tracker_1a632805c820804e416e0ce5d913d999cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TfHashMap&lt;const<sp/>void*,<sp/>Trace,<sp/>TfHash&gt;<sp/><ref refid="class_tf_ref_ptr_tracker_1a632805c820804e416e0ce5d913d999cd" kindref="member">OwnerTraces</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="class_tf_ref_ptr_tracker_1a851da35ae6a7e39677613716ec1ba4d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TfHashMap&lt;const<sp/>TfRefBase*,<sp/>size_t,<sp/>TfHash&gt;<sp/><ref refid="class_tf_ref_ptr_tracker_1a851da35ae6a7e39677613716ec1ba4d0" kindref="member">WatchedCounts</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker_1a851da35ae6a7e39677613716ec1ba4d0" kindref="member">WatchedCounts</ref><sp/><ref refid="class_tf_ref_ptr_tracker_1a8e45fa291bb1a51fb53a71feb5632b0d" kindref="member">GetWatchedCounts</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker_1a632805c820804e416e0ce5d913d999cd" kindref="member">OwnerTraces</ref><sp/><ref refid="class_tf_ref_ptr_tracker_1a1af734fb9e04fa88d8268012c1d9ede6" kindref="member">GetAllTraces</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1a1c0a123f99d4da008357be666ad1c2a4" kindref="member">ReportAllWatchedCounts</ref>(std::ostream&amp;<sp/>stream)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1a5a57805485ce7d5ab045914d3aea8ab6" kindref="member">ReportAllTraces</ref>(std::ostream&amp;<sp/>stream)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>TF_API</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1a96a415ed961df927622a8a03e746c692" kindref="member">ReportTracesForWatched</ref>(std::ostream&amp;<sp/>stream,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>watched)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="class_tf_ref_ptr_tracker_1af24d39cf62b1412b789a2b3bfee9f3a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1af24d39cf62b1412b789a2b3bfee9f3a6" kindref="member">WatchNone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="class_tf_ref_ptr_tracker_1adbf609254293963c21dda26c4851f921" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_ptr_tracker_1adbf609254293963c21dda26c4851f921" kindref="member">WatchAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Watch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_Unwatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_AddTrace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>owner,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj,<sp/>TraceType<sp/>=<sp/>Add);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_RemoveTraces(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>owner);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::mutex<sp/>_Mutex;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>_Lock;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>_Mutex<sp/>_mutex;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_maxDepth;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker_1a851da35ae6a7e39677613716ec1ba4d0" kindref="member">WatchedCounts</ref><sp/>_watched;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tf_ref_ptr_tracker_1a632805c820804e416e0ce5d913d999cd" kindref="member">OwnerTraces</ref><sp/>_traces;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tf_RefPtrTrackerUtil;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tf_singleton" kindref="compound">TfSingleton</ref>&lt;<ref refid="class_tf_ref_ptr_tracker" kindref="compound">TfRefPtrTracker</ref>&gt;;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">TF_API_TEMPLATE_CLASS(<ref refid="class_tf_singleton" kindref="compound">TfSingleton&lt;TfRefPtrTracker&gt;</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>internal<sp/>use<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tf_RefPtrTrackerUtil<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Watch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfRefPtrTracker::GetInstance()._Watch(obj);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unwatch(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfRefPtrTracker::GetInstance()._Unwatch(obj);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddTrace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>owner,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tf_ref_base" kindref="compound">TfRefBase</ref>*<sp/>obj,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfRefPtrTracker::TraceType<sp/>type<sp/>=<sp/>TfRefPtrTracker::Add)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfRefPtrTracker::GetInstance()._AddTrace(owner,<sp/>obj,<sp/>type);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveTraces(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>owner)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TfRefPtrTracker::GetInstance()._RemoveTraces(owner);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TF_DECLARE_REFPTR_TRACK(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_FirstRef(const<sp/>void*,<sp/>T*<sp/>obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_LastRef(const<sp/>void*,<sp/>T*<sp/>obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_New(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_Delete(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_Assign(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj,<sp/>T*<sp/>oldObj);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TF_DEFINE_REFPTR_TRACK(T,<sp/>COND)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_FirstRef(const<sp/>void*,<sp/>T*<sp/>obj)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(obj<sp/>&amp;&amp;<sp/>COND(obj))<sp/>Tf_RefPtrTrackerUtil::Watch(obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_LastRef(const<sp/>void*,<sp/>T*<sp/>obj)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Tf_RefPtrTrackerUtil::Unwatch(obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_New(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Tf_RefPtrTrackerUtil::AddTrace(owner,<sp/>obj);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_Delete(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Tf_RefPtrTrackerUtil::RemoveTraces(owner);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor">inline<sp/>void<sp/>Tf_RefPtrTracker_Assign(const<sp/>void*<sp/>owner,<sp/>T*<sp/>obj,<sp/>T*<sp/>oldObj)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(oldObj<sp/>!=<sp/>obj)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tf_RefPtrTrackerUtil::AddTrace(owner,<sp/>obj,<sp/>TfRefPtrTracker::Assign);\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">PXR_NAMESPACE_CLOSE_SCOPE</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="pxr/base/tf/refPtrTracker.h"/>
  </compounddef>
</doxygen>
