<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kind="class" language="C++" prot="public">
    <compoundname>pxr_CLI::CLI::Validator</compoundname>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit" prot="public" virt="non-virtual">AsNumberWithUnit</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound" prot="public" virt="non-virtual">Bound</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer" prot="public" virt="non-virtual">CheckedTransformer</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator" prot="public" virt="non-virtual">CustomValidator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator" prot="public" virt="non-virtual">ExistingDirectoryValidator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator" prot="public" virt="non-virtual">ExistingFileValidator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator" prot="public" virt="non-virtual">ExistingPathValidator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator" prot="public" virt="non-virtual">IPV4Validator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator" prot="public" virt="non-virtual">NonexistentPathValidator</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path" prot="public" virt="non-virtual">FileOnDefaultPath</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member" prot="public" virt="non-virtual">IsMember</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_range" prot="public" virt="non-virtual">Range</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer" prot="public" virt="non-virtual">Transformer</derivedcompoundref>
    <derivedcompoundref refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator" prot="public" virt="non-virtual">TypeValidator&lt; DesiredType &gt;</derivedcompoundref>
    <includes refid="_c_l_i11_8h" local="no">CLI11.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string()&gt;</type>
        <definition>std::function&lt;std::string()&gt; desc_function_</definition>
        <argsstring></argsstring>
        <name>desc_function_</name>
        <initializer>{[]() { return std::string{}; }}</initializer>
        <briefdescription>
<para>This is the description function, if empty the description_ will be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2833" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" prot="protected" static="no" mutable="no">
        <type>std::function&lt; std::string(std::string &amp;)&gt;</type>
        <definition>std::function&lt;std::string(std::string &amp;)&gt; func_</definition>
        <argsstring></argsstring>
        <name>func_</name>
        <initializer>{[](std::string &amp;) { return std::string{}; }}</initializer>
        <briefdescription>
<para>This is the base function that is to be called. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a string error message if validation fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2837" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4d739cc5d335052eb9f5b2ca559b81d1" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The name for search purposes of the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2839" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int application_index_</definition>
        <argsstring></argsstring>
        <name>application_index_</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>A <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> will only apply to an indexed value (-1 is all elements) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2841" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool active_</definition>
        <argsstring></argsstring>
        <name>active_</name>
        <initializer>{true}</initializer>
        <briefdescription>
<para>Enable for <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> to allow it to be disabled if need be. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2843" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a89808c34844c1d619b852dd623a43754" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool non_modifying_</definition>
        <argsstring></argsstring>
        <name>non_modifying_</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>specify that a validator should not modify the input </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2845" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2845" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a620b684ec30469c426f7d26969afd007" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Validator</definition>
        <argsstring>(std::string validator_desc, std::function&lt; std::string(std::string &amp;)&gt; func)</argsstring>
        <name>Validator</name>
        <param>
          <type>std::string</type>
          <declname>validator_desc</declname>
        </param>
        <param>
          <type>std::function&lt; std::string(std::string &amp;)&gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2847" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2847" bodyend="2848"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a437c9316c916a0b00b4d2a73b9d73d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Validator</definition>
        <argsstring>()=default</argsstring>
        <name>Validator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2851" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac51bc3c98f71adff397385f3cb921ec2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Validator</definition>
        <argsstring>(std::string validator_desc)</argsstring>
        <name>Validator</name>
        <param>
          <type>std::string</type>
          <declname>validator_desc</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> with just the description string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2853" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2853" bodyend="2853"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1acc314da6d2d63533aeaecedd7cbcbb44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Validator</definition>
        <argsstring>(std::function&lt; std::string(std::string &amp;)&gt; op, std::string validator_desc, std::string validator_name=&quot;&quot;)</argsstring>
        <name>Validator</name>
        <param>
          <type>std::function&lt; std::string(std::string &amp;)&gt;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>validator_desc</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>validator_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Construct <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> from basic information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2855" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2855" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a44cb29261ef1348ab7140228b3df27e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; operation</definition>
        <argsstring>(std::function&lt; std::string(std::string &amp;)&gt; op)</argsstring>
        <name>operation</name>
        <param>
          <type>std::function&lt; std::string(std::string &amp;)&gt;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> operation function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2859" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2859" bodyend="2862"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a37ea965e41027b32328d32d2b4e03302" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>CLI11_INLINE std::string operator()</definition>
        <argsstring>(std::string &amp;str) const</argsstring>
        <name>operator()</name>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This is the required operator for a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> - provided to help users (CLI11 uses the member <computeroutput>func</computeroutput> directly) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2865" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3655" bodyend="3666"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a7673ff599f7529e870530cee9b164e5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string operator()</definition>
        <argsstring>(const std::string &amp;str) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This is the required operator for a <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> - provided to help users (CLI11 uses the member <computeroutput>func</computeroutput> directly) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2869" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2869" bodyend="2872"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; description</definition>
        <argsstring>(std::string validator_desc)</argsstring>
        <name>description</name>
        <param>
          <type>std::string</type>
          <declname>validator_desc</declname>
        </param>
        <briefdescription>
<para>Specify the type string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2875" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2875" bodyend="2878"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ae36330914504c99ba03c2d893d0332d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_NODISCARD CLI11_INLINE Validator description</definition>
        <argsstring>(std::string validator_desc) const</argsstring>
        <name>description</name>
        <param>
          <type>std::string</type>
          <declname>validator_desc</declname>
        </param>
        <briefdescription>
<para>Specify the type string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2880" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3668" bodyend="3672"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa43f0c7a4e89fe58211f6a80396bdfe7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD std::string</type>
        <definition>CLI11_NODISCARD std::string get_description</definition>
        <argsstring>() const</argsstring>
        <name>get_description</name>
        <briefdescription>
<para>Generate type description information for the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2883" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2883" bodyend="2888"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a2aa59c0eb632faf44e1ce50033fc1d41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; name</definition>
        <argsstring>(std::string validator_name)</argsstring>
        <name>name</name>
        <param>
          <type>std::string</type>
          <declname>validator_name</declname>
        </param>
        <briefdescription>
<para>Specify the type string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2890" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2890" bodyend="2893"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4ec8ab874e50204d9e09d9149acbeaac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_NODISCARD Validator name</definition>
        <argsstring>(std::string validator_name) const</argsstring>
        <name>name</name>
        <param>
          <type>std::string</type>
          <declname>validator_name</declname>
        </param>
        <briefdescription>
<para>Specify the type string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2895" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2895" bodyend="2899"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa4a97b6bebd73191da444e2510ff4f41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD const std::string &amp;</type>
        <definition>CLI11_NODISCARD const std::string&amp; get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Get the name of the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2901" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2901" bodyend="2901"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3699b7f0acfbd6b8d6c9f183d26673ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; active</definition>
        <argsstring>(bool active_val=true)</argsstring>
        <name>active</name>
        <param>
          <type>bool</type>
          <declname>active_val</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Specify whether the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> is active or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2903" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2903" bodyend="2906"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3aff5a5bd26eecade38af43f2f80f36b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_NODISCARD Validator active</definition>
        <argsstring>(bool active_val=true) const</argsstring>
        <name>active</name>
        <param>
          <type>bool</type>
          <declname>active_val</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Specify whether the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> is active or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2908" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2908" bodyend="2912"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a72d61730533c7279743738fac58d2228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; non_modifying</definition>
        <argsstring>(bool no_modify=true)</argsstring>
        <name>non_modifying</name>
        <param>
          <type>bool</type>
          <declname>no_modify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Specify whether the <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> can be modifying or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2915" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2915" bodyend="2918"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a5daabd87cef336cb83dc93b8f82682a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
        <definition>Validator&amp; application_index</definition>
        <argsstring>(int app_index)</argsstring>
        <name>application_index</name>
        <param>
          <type>int</type>
          <declname>app_index</declname>
        </param>
        <briefdescription>
<para>Specify the application index of a validator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2920" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2920" bodyend="2923"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aade9442b5d914e52d2c19d2a43263575" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_NODISCARD Validator application_index</definition>
        <argsstring>(int app_index) const</argsstring>
        <name>application_index</name>
        <param>
          <type>int</type>
          <declname>app_index</declname>
        </param>
        <briefdescription>
<para>Specify the application index of a validator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2925" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2925" bodyend="2929"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6a7c617d26d8fab970d8b58609bce7e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD int</type>
        <definition>CLI11_NODISCARD int get_application_index</definition>
        <argsstring>() const</argsstring>
        <name>get_application_index</name>
        <briefdescription>
<para>Get the current value of the application index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2931" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2931" bodyend="2931"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a95a0482a2e973bda0cb04bb80ecb169f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_active</definition>
        <argsstring>() const</argsstring>
        <name>get_active</name>
        <briefdescription>
<para>Get a boolean if the validator is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2933" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2933" bodyend="2933"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1adcc3fc37b851a487125e5ca94d36042b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>CLI11_NODISCARD bool</type>
        <definition>CLI11_NODISCARD bool get_modifying</definition>
        <argsstring>() const</argsstring>
        <name>get_modifying</name>
        <briefdescription>
<para>Get a boolean if the validator is allowed to modify the input returns true if it can modify the input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2936" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2936" bodyend="2936"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4711dbd6c7077f6fdf2bbfb647d5494f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_INLINE Validator operator &amp;</definition>
        <argsstring>(const Validator &amp;other) const</argsstring>
        <name>operator &amp;</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combining validators is a new validator. </para>
        </briefdescription>
        <detaileddescription>
<para>Type comes from left validator if function, otherwise only set if the same. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2940" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3674" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6b2143a8658130e0e8a5c6fc49ba026a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_INLINE Validator operator|</definition>
        <argsstring>(const Validator &amp;other) const</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combining validators is a new validator. </para>
        </briefdescription>
        <detaileddescription>
<para>Type comes from left validator if function, otherwise only set if the same. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2944" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3696" bodyend="3716"/>
      </memberdef>
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a91c3e9e1491efac8686b37594459d81f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref></type>
        <definition>CLI11_INLINE Validator operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
<para>Create a validator that fails when a given validator succeeds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2947" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3718" bodyend="3738"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ada6a1a12dd1717607533765728a18c42" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>CLI11_INLINE void _merge_description</definition>
        <argsstring>(const Validator &amp;val1, const Validator &amp;val2, const std::string &amp;merger)</argsstring>
        <name>_merge_description</name>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const <ref refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator" kindref="compound">Validator</ref> &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>merger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2950" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="3741" bodyend="3754"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Some validators that are provided. </para>
    </briefdescription>
    <detaileddescription>
<para>These are simple <computeroutput>std::string(const std::string&amp;)</computeroutput> validators that are useful. They return a string if the validation fails. A custom struct is provided, as well, with the same user semantics, but with the ability to provide a new type name. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8562">
        <label>ExistingPathValidator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_path_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8560">
        <label>ExistingDirectoryValidator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_directory_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8564">
        <label>NonexistentPathValidator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_nonexistent_path_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8559">
        <label>CustomValidator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_custom_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8566">
        <label>IsMember</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_is_member"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8558">
        <label>CheckedTransformer</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_checked_transformer"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8556">
        <label>AsSizeValue</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_size_value"/>
        <childnode refid="8555" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8567">
        <label>Range</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_range"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8569">
        <label>TypeValidator&lt; DesiredType &gt;</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_type_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8561">
        <label>ExistingFileValidator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_existing_file_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8568">
        <label>Transformer</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_transformer"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8563">
        <label>IPV4Validator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1detail_1_1_i_p_v4_validator"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8554">
        <label>Validator</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator"/>
      </node>
      <node id="8565">
        <label>FileOnDefaultPath</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_file_on_default_path"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8555">
        <label>AsNumberWithUnit</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_as_number_with_unit"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8557">
        <label>Bound</label>
        <link refid="classpxr___c_l_i_1_1_c_l_i_1_1_bound"/>
        <childnode refid="8554" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pxr/base/tf/pxrCLI11/CLI11.h" line="2830" column="1" bodyfile="pxr/base/tf/pxrCLI11/CLI11.h" bodystart="2830" bodyend="2951"/>
    <listofallmembers>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ada6a1a12dd1717607533765728a18c42" prot="private" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>_merge_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3699b7f0acfbd6b8d6c9f183d26673ef" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>active</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a3aff5a5bd26eecade38af43f2f80f36b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>active</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a121aee969503dcc0f2d4ff4879d9c4d9" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>active_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a5daabd87cef336cb83dc93b8f82682a9" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>application_index</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aade9442b5d914e52d2c19d2a43263575" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>application_index</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a653dfa7e7b4e491b521d768155fe8d5c" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>application_index_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac9c215611fe6c264e6a1b0a00310c567" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>desc_function_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ad1a3d7394eb783cc6ed54a88358cc162" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ae36330914504c99ba03c2d893d0332d8" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a668c27b4c349d007a0c61ff81723b482" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>func_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a95a0482a2e973bda0cb04bb80ecb169f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>get_active</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6a7c617d26d8fab970d8b58609bce7e4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>get_application_index</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa43f0c7a4e89fe58211f6a80396bdfe7" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>get_description</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1adcc3fc37b851a487125e5ca94d36042b" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>get_modifying</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1aa4a97b6bebd73191da444e2510ff4f41" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>get_name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a2aa59c0eb632faf44e1ce50033fc1d41" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4ec8ab874e50204d9e09d9149acbeaac" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>name</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4d739cc5d335052eb9f5b2ca559b81d1" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>name_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a72d61730533c7279743738fac58d2228" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>non_modifying</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a89808c34844c1d619b852dd623a43754" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>non_modifying_</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a44cb29261ef1348ab7140228b3df27e4" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operation</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a4711dbd6c7077f6fdf2bbfb647d5494f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operator &amp;</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a91c3e9e1491efac8686b37594459d81f" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operator!</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a37ea965e41027b32328d32d2b4e03302" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operator()</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a7673ff599f7529e870530cee9b164e5e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operator()</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a6b2143a8658130e0e8a5c6fc49ba026a" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>operator|</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a620b684ec30469c426f7d26969afd007" prot="protected" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>Validator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1a437c9316c916a0b00b4d2a73b9d73d8e" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>Validator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1ac51bc3c98f71adff397385f3cb921ec2" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>Validator</name></member>
      <member refid="classpxr___c_l_i_1_1_c_l_i_1_1_validator_1acc314da6d2d63533aeaecedd7cbcbb44" prot="public" virt="non-virtual"><scope>pxr_CLI::CLI::Validator</scope><name>Validator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
