<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_instance_key" kind="class" language="C++" prot="public">
    <compoundname>PcpInstanceKey</compoundname>
    <includes refid="instance_key_8h" local="no">instanceKey.h</includes>
    <innerclass refid="struct_pcp_instance_key_1_1___arc" prot="private">PcpInstanceKey::_Arc</innerclass>
    <innerclass refid="struct_pcp_instance_key_1_1_hash" prot="public">PcpInstanceKey::Hash</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_pcp_instance_key_1ac512692eebd1f373f34dfd0516055419" prot="private" static="no">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>typedef std::pair&lt;std::string, std::string&gt; _VariantSelection</definition>
        <argsstring></argsstring>
        <name>_VariantSelection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="129" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_instance_key_1a122df47f5c5fdcc9fc74415336a26845" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _Arc &gt;</type>
        <definition>std::vector&lt;_Arc&gt; _arcs</definition>
        <argsstring></argsstring>
        <name>_arcs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="127" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_instance_key_1a523db3cc7a2f622c392e8fea27ea55d4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; _VariantSelection &gt;</type>
        <definition>std::vector&lt;_VariantSelection&gt; _variantSelection</definition>
        <argsstring></argsstring>
        <name>_variantSelection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="130" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_instance_key_1ae059dfbd9014bb0672749a5fdb785c6e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _hash</definition>
        <argsstring></argsstring>
        <name>_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="132" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_instance_key_1ac8ee2b3b8f6cb18c904624dce3d40ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpInstanceKey</definition>
        <argsstring>()</argsstring>
        <name>PcpInstanceKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_instance_key_1a20571274c155f2d711a28c87397a92c0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>PCP_API</type>
        <definition>PCP_API PcpInstanceKey</definition>
        <argsstring>(const PcpPrimIndex &amp;primIndex)</argsstring>
        <name>PcpInstanceKey</name>
        <param>
          <type>const <ref refid="class_pcp_prim_index" kindref="compound">PcpPrimIndex</ref> &amp;</type>
          <declname>primIndex</declname>
        </param>
        <briefdescription>
<para>Create an instance key for the given prim index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_instance_key_1a204e14074ff2a0107763e8ea473641b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator==</definition>
        <argsstring>(const PcpInstanceKey &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Comparison operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_instance_key_1a5dec813334a3e053f3d4fd5ed54f09e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator!=</definition>
        <argsstring>(const PcpInstanceKey &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_instance_key_1a771051ad27e94c42008b9631a1fc102a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API std::string</type>
        <definition>PCP_API std::string GetString</definition>
        <argsstring>() const</argsstring>
        <name>GetString</name>
        <briefdescription>
<para>Returns string representation of this instance key for debugging purposes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_instance_key_1aa517a7135976ba8465f462d944e9b61f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename HashState</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void TfHashAppend</definition>
        <argsstring>(HashState &amp;h, const PcpInstanceKey &amp;key)</argsstring>
        <name>TfHashAppend</name>
        <param>
          <type>HashState &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Appends hash value for this instance key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="71" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="friend" id="class_pcp_instance_key_1aae3a28a2aea59c668cda852b24f76bfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend size_t</type>
        <definition>size_t hash_value</definition>
        <argsstring>(const PcpInstanceKey &amp;key)</argsstring>
        <name>hash_value</name>
        <param>
          <type>const <ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns hash value for this instance key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/instanceKey.h" line="76" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="76" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="class_pcp_instance_key" kindref="compound">PcpInstanceKey</ref> identifies instanceable prim indexes that share the same set of opinions. </para>
    </briefdescription>
    <detaileddescription>
<para>Instanceable prim indexes with equal instance keys are guaranteed to have the same opinions for name children and properties beneath those name children. They are NOT guaranteed to have the same opinions for direct properties of the prim indexes themselves. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/instanceKey.h" line="54" column="1" bodyfile="pxr/usd/pcp/instanceKey.h" bodystart="53" bodyend="133"/>
    <listofallmembers>
      <member refid="class_pcp_instance_key_1a122df47f5c5fdcc9fc74415336a26845" prot="private" virt="non-virtual"><scope>PcpInstanceKey</scope><name>_arcs</name></member>
      <member refid="class_pcp_instance_key_1ae059dfbd9014bb0672749a5fdb785c6e" prot="private" virt="non-virtual"><scope>PcpInstanceKey</scope><name>_hash</name></member>
      <member refid="class_pcp_instance_key_1ac512692eebd1f373f34dfd0516055419" prot="private" virt="non-virtual"><scope>PcpInstanceKey</scope><name>_VariantSelection</name></member>
      <member refid="class_pcp_instance_key_1a523db3cc7a2f622c392e8fea27ea55d4" prot="private" virt="non-virtual"><scope>PcpInstanceKey</scope><name>_variantSelection</name></member>
      <member refid="class_pcp_instance_key_1a771051ad27e94c42008b9631a1fc102a" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>GetString</name></member>
      <member refid="class_pcp_instance_key_1aae3a28a2aea59c668cda852b24f76bfc" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>hash_value</name></member>
      <member refid="class_pcp_instance_key_1a5dec813334a3e053f3d4fd5ed54f09e5" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>operator!=</name></member>
      <member refid="class_pcp_instance_key_1a204e14074ff2a0107763e8ea473641b6" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>operator==</name></member>
      <member refid="class_pcp_instance_key_1ac8ee2b3b8f6cb18c904624dce3d40ff8" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>PcpInstanceKey</name></member>
      <member refid="class_pcp_instance_key_1a20571274c155f2d711a28c87397a92c0" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>PcpInstanceKey</name></member>
      <member refid="class_pcp_instance_key_1aa517a7135976ba8465f462d944e9b61f" prot="public" virt="non-virtual"><scope>PcpInstanceKey</scope><name>TfHashAppend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
