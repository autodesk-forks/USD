<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_hd_st_resource_registry" kind="class" language="C++" prot="public" final="yes">
    <compoundname>HdStResourceRegistry</compoundname>
    <basecompoundref refid="class_hd_resource_registry" prot="public" virt="non-virtual">HdResourceRegistry</basecompoundref>
    <includes refid="t_2resource_registry_8h" local="no">resourceRegistry.h</includes>
    <innerclass refid="struct_hd_st_resource_registry_1_1___pending_computation" prot="private">HdStResourceRegistry::_PendingComputation</innerclass>
    <innerclass refid="struct_hd_st_resource_registry_1_1___pending_source" prot="private">HdStResourceRegistry::_PendingSource</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a6fcb90e225c110015fdfcda1df00185f" prot="private" static="no">
        <type>tbb::concurrent_vector&lt; _PendingSource &gt;</type>
        <definition>typedef tbb::concurrent_vector&lt;_PendingSource&gt; _PendingSourceList</definition>
        <argsstring></argsstring>
        <name>_PendingSourceList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="589" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a8f1f548cdc891dc3072ae2242821526b" prot="private" static="no">
        <type>tbb::concurrent_vector&lt; _PendingComputation &gt;</type>
        <definition>typedef tbb::concurrent_vector&lt;_PendingComputation&gt; _PendingComputationList</definition>
        <argsstring></argsstring>
        <name>_PendingComputationList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="604" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a6b442c700cac4e23742236e27328a81b" prot="private" static="no">
        <type>std::vector&lt; HdStDispatchBufferSharedPtr &gt;</type>
        <definition>typedef std::vector&lt;HdStDispatchBufferSharedPtr&gt; _DispatchBufferRegistry</definition>
        <argsstring></argsstring>
        <name>_DispatchBufferRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="623" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a40165957789491aca248f6cf74d16690" prot="private" static="no">
        <type>std::vector&lt; HdStBufferResourceSharedPtr &gt;</type>
        <definition>typedef std::vector&lt;HdStBufferResourceSharedPtr&gt; _BufferResourceRegistry</definition>
        <argsstring></argsstring>
        <name>_BufferResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="627" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a0bc9adf1de14fea468aa889183c94a40" prot="private" static="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>typedef HdInstanceRegistry&lt;HdBufferArrayRangeSharedPtr&gt; _TopologyIndexRangeInstanceRegistry</definition>
        <argsstring></argsstring>
        <name>_TopologyIndexRangeInstanceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="644" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_hd_st_resource_registry_1a8239cc6685735f2a9e27a28d95a0b255" prot="private" static="no">
        <type>tbb::concurrent_unordered_map&lt; <ref refid="class_tf_token" kindref="compound">TfToken</ref>, <ref refid="class_hd_instance_registry" kindref="compound">_TopologyIndexRangeInstanceRegistry</ref>, <ref refid="struct_tf_token_1_1_hash_functor" kindref="compound">TfToken::HashFunctor</ref> &gt;</type>
        <definition>typedef tbb::concurrent_unordered_map&lt; TfToken, _TopologyIndexRangeInstanceRegistry, TfToken::HashFunctor &gt; _TopologyIndexRangeInstanceRegMap</definition>
        <argsstring></argsstring>
        <name>_TopologyIndexRangeInstanceRegMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="648" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a1a3ab6cafe5d5c90dbbd7f5fbd035ab6" prot="private" static="no" mutable="no">
        <type><ref refid="class_hgi" kindref="compound">Hgi</ref> *</type>
        <definition>Hgi* _hgi</definition>
        <argsstring></argsstring>
        <name>_hgi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="587" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a8a0ed51ded190fccea6a627dede4ecce" prot="private" static="no" mutable="no">
        <type>_PendingSourceList</type>
        <definition>_PendingSourceList _pendingSources</definition>
        <argsstring></argsstring>
        <name>_pendingSources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="590" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a8acf2a92c62eff09ee45dd3baac1c121" prot="private" static="no" mutable="no">
        <type>std::atomic_size_t</type>
        <definition>std::atomic_size_t _numBufferSourcesToResolve</definition>
        <argsstring></argsstring>
        <name>_numBufferSourcesToResolve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="591" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1abb3c83c424f8076c6b5ce2b25586c028" prot="private" static="no" mutable="no">
        <type>_PendingComputationList</type>
        <definition>_PendingComputationList _pendingComputations[HdStComputeQueueCount]</definition>
        <argsstring>[HdStComputeQueueCount]</argsstring>
        <name>_pendingComputations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="605" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a5b7c6428e6b465a0e8a3051bd5d52220" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref></type>
        <definition>HdStBufferArrayRegistry _nonUniformBufferArrayRegistry</definition>
        <argsstring></argsstring>
        <name>_nonUniformBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="608" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a7c26c9a62a0fed1515da81ff7de0b3c8" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref></type>
        <definition>HdStBufferArrayRegistry _nonUniformImmutableBufferArrayRegistry</definition>
        <argsstring></argsstring>
        <name>_nonUniformImmutableBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="609" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a22ec9e03067907285df639513a1aaf50" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref></type>
        <definition>HdStBufferArrayRegistry _uniformUboBufferArrayRegistry</definition>
        <argsstring></argsstring>
        <name>_uniformUboBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="610" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1af93767d5ef768e330c1503939006742d" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref></type>
        <definition>HdStBufferArrayRegistry _uniformSsboBufferArrayRegistry</definition>
        <argsstring></argsstring>
        <name>_uniformSsboBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="611" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a1787ff38438aa73dbfe2a5b1b979e498" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref></type>
        <definition>HdStBufferArrayRegistry _singleBufferArrayRegistry</definition>
        <argsstring></argsstring>
        <name>_singleBufferArrayRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="612" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a7f4e31a3ffe64d7789c2da02c831d533" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStAggregationStrategy&gt; _nonUniformAggregationStrategy</definition>
        <argsstring></argsstring>
        <name>_nonUniformAggregationStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="615" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1ad4db749b8531ad643e963c1b64dba9bd" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStAggregationStrategy&gt; _nonUniformImmutableAggregationStrategy</definition>
        <argsstring></argsstring>
        <name>_nonUniformImmutableAggregationStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="617" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1ad4f5c090babe98dceeb658569bb2bf07" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStAggregationStrategy&gt; _uniformUboAggregationStrategy</definition>
        <argsstring></argsstring>
        <name>_uniformUboAggregationStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="618" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a8fdb3d5199c273ee351e89e1b0d24351" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStAggregationStrategy&gt; _uniformSsboAggregationStrategy</definition>
        <argsstring></argsstring>
        <name>_uniformSsboAggregationStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="619" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1ac6c5d5999284f4b0ecb5da78cd40ed16" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStAggregationStrategy&gt; _singleAggregationStrategy</definition>
        <argsstring></argsstring>
        <name>_singleAggregationStrategy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="620" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a1e2a12ada7c4d993d5b0e1ea5637671e" prot="private" static="no" mutable="no">
        <type>_DispatchBufferRegistry</type>
        <definition>_DispatchBufferRegistry _dispatchBufferRegistry</definition>
        <argsstring></argsstring>
        <name>_dispatchBufferRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="624" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1afec59c7120b6095a8a737d540b15085b" prot="private" static="no" mutable="no">
        <type>_BufferResourceRegistry</type>
        <definition>_BufferResourceRegistry _bufferResourceRegistry</definition>
        <argsstring></argsstring>
        <name>_bufferResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="628" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1aa4d70c64743618af34b68e0d6d065a16" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdSt_MeshTopologySharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdSt_MeshTopologySharedPtr&gt; _meshTopologyRegistry</definition>
        <argsstring></argsstring>
        <name>_meshTopologyRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="632" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a53b8d271c64406a82a17091490602903" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdSt_BasisCurvesTopologySharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdSt_BasisCurvesTopologySharedPtr&gt; _basisCurvesTopologyRegistry</definition>
        <argsstring></argsstring>
        <name>_basisCurvesTopologyRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="636" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a144c5eeb15384468e5d733f54b4b1e34" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdSt_VertexAdjacencyBuilderSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdSt_VertexAdjacencyBuilderSharedPtr&gt; _vertexAdjacencyBuilderRegistry</definition>
        <argsstring></argsstring>
        <name>_vertexAdjacencyBuilderRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="640" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a9dae2fa4fabce542a6727ae0fa5f6bc1" prot="private" static="no" mutable="no">
        <type>_TopologyIndexRangeInstanceRegMap</type>
        <definition>_TopologyIndexRangeInstanceRegMap _meshTopologyIndexRangeRegistry</definition>
        <argsstring></argsstring>
        <name>_meshTopologyIndexRangeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="650" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1aa83b2af8c85b13908024c55199501856" prot="private" static="no" mutable="no">
        <type>_TopologyIndexRangeInstanceRegMap</type>
        <definition>_TopologyIndexRangeInstanceRegMap _basisCurvesTopologyIndexRangeRegistry</definition>
        <argsstring></argsstring>
        <name>_basisCurvesTopologyIndexRangeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="651" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a024b3b70aadb537f55d952dcda4523b6" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdBufferArrayRangeSharedPtr&gt; _primvarRangeRegistry</definition>
        <argsstring></argsstring>
        <name>_primvarRangeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="655" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1aae52367692c443f6480b6583d246bc33" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdBufferArrayRangeSharedPtr&gt; _extComputationDataRangeRegistry</definition>
        <argsstring></argsstring>
        <name>_extComputationDataRangeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="659" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a727ef357b5062948ce6b0b2c72ba51cc" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdSt_GeometricShaderSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdSt_GeometricShaderSharedPtr&gt; _geometricShaderRegistry</definition>
        <argsstring></argsstring>
        <name>_geometricShaderRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="663" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a2d3a52c200dec171199974816156b0ca" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HdStGLSLProgramSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HdStGLSLProgramSharedPtr&gt; _glslProgramRegistry</definition>
        <argsstring></argsstring>
        <name>_glslProgramRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="667" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a961995cdf952a13cc399ffaf9173e8fd" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HioGlslfxSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HioGlslfxSharedPtr&gt; _glslfxFileRegistry</definition>
        <argsstring></argsstring>
        <name>_glslfxFileRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="671" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a9d3b7166d171e298be39ddfa953e0b18" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; class HdSt_TextureHandleRegistry &gt;</type>
        <definition>std::unique_ptr&lt;class HdSt_TextureHandleRegistry&gt; _textureHandleRegistry</definition>
        <argsstring></argsstring>
        <name>_textureHandleRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="679" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a09fe67a8a2f49d4f56401592031deac5" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HgiResourceBindingsSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HgiResourceBindingsSharedPtr&gt; _resourceBindingsRegistry</definition>
        <argsstring></argsstring>
        <name>_resourceBindingsRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="683" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1ac4fe96f9ade9ca62343e33c01935b623" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HgiGraphicsPipelineSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HgiGraphicsPipelineSharedPtr&gt; _graphicsPipelineRegistry</definition>
        <argsstring></argsstring>
        <name>_graphicsPipelineRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="687" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1acfce13417e73f2fcdcafa3facf78b176" prot="private" static="no" mutable="no">
        <type><ref refid="class_hd_instance_registry" kindref="compound">HdInstanceRegistry</ref>&lt; HgiComputePipelineSharedPtr &gt;</type>
        <definition>HdInstanceRegistry&lt;HgiComputePipelineSharedPtr&gt; _computePipelineRegistry</definition>
        <argsstring></argsstring>
        <name>_computePipelineRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="691" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a4eaee359988b262c2153c94425672583" prot="private" static="no" mutable="no">
        <type>HgiBlitCmdsUniquePtr</type>
        <definition>HgiBlitCmdsUniquePtr _blitCmds</definition>
        <argsstring></argsstring>
        <name>_blitCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="693" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a9f022043ad7f81c98a2ca504a2e43399" prot="private" static="no" mutable="no">
        <type>HgiComputeCmdsUniquePtr</type>
        <definition>HgiComputeCmdsUniquePtr _computeCmds</definition>
        <argsstring></argsstring>
        <name>_computeCmds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="694" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_hd_st_resource_registry_1a6f44aa95cd9b847e234e6012a1a1b104" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="class_hd_st_staging_buffer" kindref="compound">HdStStagingBuffer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;HdStStagingBuffer&gt; _stagingBuffer</definition>
        <argsstring></argsstring>
        <name>_stagingBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="696" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_hd_st_resource_registry_1af86eb842cd99c8a822df1209d4567373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HF_MALLOC_TAG_NEW</definition>
        <argsstring>(&quot;new HdStResourceRegistry&quot;)</argsstring>
        <name>HF_MALLOC_TAG_NEW</name>
        <param>
          <type>&quot;new <ref refid="class_hd_st_resource_registry" kindref="compound">HdStResourceRegistry</ref>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ad12d26aa00e7e22edbc57e2f3a72e061" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API HdStResourceRegistry</definition>
        <argsstring>(Hgi *hgi)</argsstring>
        <name>HdStResourceRegistry</name>
        <param>
          <type><ref refid="class_hgi" kindref="compound">Hgi</ref> *</type>
          <declname>hgi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a7a673dcdf0ac9a6554527ac58dab35c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API</type>
        <definition>HDST_API ~HdStResourceRegistry</definition>
        <argsstring>() override</argsstring>
        <name>~HdStResourceRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1aa926690de633ba967319bc98d9855c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void InvalidateShaderRegistry</definition>
        <argsstring>() override</argsstring>
        <name>InvalidateShaderRegistry</name>
        <reimplements refid="class_hd_resource_registry_1a9326094a31651c7f5db81f75dbc21c4f">InvalidateShaderRegistry</reimplements>
        <briefdescription>
<para>Invalidate any shaders registered with this registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ae3becaa92122d1321af05df25db93f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void ReloadResource</definition>
        <argsstring>(TfToken const &amp;resourceType, std::string const &amp;path) override</argsstring>
        <name>ReloadResource</name>
        <reimplements refid="class_hd_resource_registry_1afc98a7a0ec81483c6c07de25651554c2">ReloadResource</reimplements>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>resourceType</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Generic method to inform RenderDelegate a resource needs to be reloaded. </para>
        </briefdescription>
        <detaileddescription>
<para>This method can be used by the application to inform the renderDelegate that a resource, which may not have any prim representation in Hydra, needs to be reloaded. For example a texture found in a material network. The <computeroutput>path</computeroutput> can be absolute or relative. It should usually match the path found for textures during <ref refid="class_hd_sprim_1ac100b9064606ab088306512425439cf7" kindref="member">HdMaterial::Sync</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1aacf16c122f0f8558870a2d7b276e29a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>HDST_API <ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref></type>
        <definition>HDST_API VtDictionary GetResourceAllocation</definition>
        <argsstring>() const override</argsstring>
        <name>GetResourceAllocation</name>
        <reimplements refid="class_hd_resource_registry_1abeab7ba4c8d0c00636b4c88ea644d944">GetResourceAllocation</reimplements>
        <briefdescription>
<para>Returns a report of resource allocation by role in bytes and a summary total allocation of GPU memory in bytes for this registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a61a4b45033b8ae669111a29e0c1de48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hgi" kindref="compound">Hgi</ref> *</type>
        <definition>HDST_API Hgi* GetHgi</definition>
        <argsstring>()</argsstring>
        <name>GetHgi</name>
        <briefdescription>
<para>Returns <ref refid="class_hgi" kindref="compound">Hgi</ref> used to create/destroy GPU resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1aca726a511db9a2b74038bffedb4fe580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStTextureHandleSharedPtr</type>
        <definition>HDST_API HdStTextureHandleSharedPtr AllocateTextureHandle</definition>
        <argsstring>(const HdStTextureIdentifier &amp;textureId, HdTextureType textureType, const HdSamplerParameters &amp;samplerParams, size_t memoryRequest, HdStShaderCodePtr const &amp;shaderCode)</argsstring>
        <name>AllocateTextureHandle</name>
        <param>
          <type>const <ref refid="class_hd_st_texture_identifier" kindref="compound">HdStTextureIdentifier</ref> &amp;</type>
          <declname>textureId</declname>
          <briefdescription><para>Path to file and information to identify a texture if the file is a container for several textures (e.g., OpenVDB file containing several grids, movie file containing frames). </para>
</briefdescription>
        </param>
        <param>
          <type>HdTextureType</type>
          <declname>textureType</declname>
          <briefdescription><para>Texture type, e.g., uv, ptex, ... </para>
</briefdescription>
        </param>
        <param>
          <type>const <ref refid="class_hd_sampler_parameters" kindref="compound">HdSamplerParameters</ref> &amp;</type>
          <declname>samplerParams</declname>
          <briefdescription><para>Sampling parameters such as wrapS, ... wrapS, wrapT, wrapR mode, min filer, mag filter </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>memoryRequest</declname>
          <briefdescription><para>Memory request. The texture is down-sampled to meet the target memory which is the maximum of all memory requests associated to the texture. If all memory requests are 0, no down-sampling will happen. </para>
</briefdescription>
        </param>
        <param>
          <type>HdStShaderCodePtr const &amp;</type>
          <declname>shaderCode</declname>
          <briefdescription><para>After the texture is committed (or after it has been changed) the given shader code can add additional buffer sources and computations using the texture metadata with AddResourcesFromTextures. </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Allocate texture handle (encapsulates texture and sampler object, memory request and callback to shader). </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Texture allocation API </heading>
</para>
<para>The actual allocation of the associated GPU texture and sampler resources and loading of the texture file is delayed until the commit phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1af5a1a32d34f9294663af85ba51f1bc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStTextureObjectSharedPtr</type>
        <definition>HDST_API HdStTextureObjectSharedPtr AllocateTextureObject</definition>
        <argsstring>(const HdStTextureIdentifier &amp;textureId, HdTextureType textureType)</argsstring>
        <name>AllocateTextureObject</name>
        <param>
          <type>const <ref refid="class_hd_st_texture_identifier" kindref="compound">HdStTextureIdentifier</ref> &amp;</type>
          <declname>textureId</declname>
          <briefdescription><para>Path to file and information to identify a texture if the file is a container for several textures (e.g., OpenVDB file containing several grids, movie file containing frames). </para>
</briefdescription>
        </param>
        <param>
          <type>HdTextureType</type>
          <declname>textureType</declname>
          <briefdescription><para>Texture type, e.g., uv, ptex, ... </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Allocate texture object. </para>
        </briefdescription>
        <detaileddescription>
<para>The actual allocation of the associated GPU texture and sampler resources and loading of the texture file is delayed until the commit phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a3e1c8b3ddaa19cc3a29e6b715ec8a4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void SetMemoryRequestForTextureType</definition>
        <argsstring>(HdTextureType textureType, size_t memoryRequest)</argsstring>
        <name>SetMemoryRequestForTextureType</name>
        <param>
          <type>HdTextureType</type>
          <declname>textureType</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memoryRequest</declname>
        </param>
        <briefdescription>
<para>Sets how much memory a single texture can consume in bytes by texture type. </para>
        </briefdescription>
        <detaileddescription>
<para>Only has an effect if non-zero and only applies to textures if no texture handle referencing the texture has a memory request. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ae9ad1cc492b1223de67ad9d5fc6923be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateNonUniformBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateNonUniformBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">BAR allocation API </heading>
</para>
<para>The Allocate* flavor of methods allocate a new BAR for the given buffer specs using the chosen aggregation strategy. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a1edd3fb78d6a57bb984cb29c390eec94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateNonUniformImmutableBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateNonUniformImmutableBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1aab542f4b61678c0f6953fe7109f1b4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateUniformBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateUniformBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a1f904eb51749ed4994768afaf16b5803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateShaderStorageBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateShaderStorageBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a0c51af19875fddbeee88a43bcf246532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr AllocateSingleBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>AllocateSingleBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a94ac78829e03e9148919f0d51bd9c601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr UpdateNonUniformBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferArrayRangeSharedPtr const &amp;curRange, HdBufferSpecVector const &amp;updatedOrAddedSpecs, HdBufferSpecVector const &amp;removedSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>UpdateNonUniformBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>curRange</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>updatedOrAddedSpecs</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>removedSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">BAR allocation/migration/update API </heading>
</para>
<para>The Update* flavor of methods handle both allocation of a new BAR and reallocation-migration based on the existing range, updated/added specs, removed specs and usage hint. This allows client code to be less verbose when a range&apos;s signature (specs) can change.</para>
<para>If <computeroutput>curRange</computeroutput> is invalid, this is equivalent to calling Allocate*. Otherwise, checks if <computeroutput>curRange</computeroutput> needs to be migrated to a new range (based on <computeroutput>updatedOrAddedSpecs</computeroutput> and <computeroutput>removedSpecs</computeroutput> and <computeroutput>usageHint</computeroutput>). If migration is necessary, allocate a new range and register necessary migration computations and return the new range. Otherwise, just return the same range. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1af03a18c5ce2a8db31acdd4f3731804bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr UpdateNonUniformImmutableBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferArrayRangeSharedPtr const &amp;curRange, HdBufferSpecVector const &amp;updatedOrAddedSpecs, HdBufferSpecVector const &amp;removedSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>UpdateNonUniformImmutableBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>curRange</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>updatedOrAddedSpecs</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>removedSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1abbc03e27ac5621e41f3c6f0b484cb086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr UpdateUniformBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferArrayRangeSharedPtr const &amp;curRange, HdBufferSpecVector const &amp;updatedOrAddedSpecs, HdBufferSpecVector const &amp;removedSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>UpdateUniformBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>curRange</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>updatedOrAddedSpecs</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>removedSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ad63d8e4a15fc44fd876adc702b2b17bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdBufferArrayRangeSharedPtr</type>
        <definition>HDST_API HdBufferArrayRangeSharedPtr UpdateShaderStorageBufferArrayRange</definition>
        <argsstring>(TfToken const &amp;role, HdBufferArrayRangeSharedPtr const &amp;curRange, HdBufferSpecVector const &amp;updatedOrAddedSpecs, HdBufferSpecVector const &amp;removedSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>UpdateShaderStorageBufferArrayRange</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>curRange</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>updatedOrAddedSpecs</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>removedSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a15fddcb5de7a3dc57bf86d741a5b6d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void AddSources</definition>
        <argsstring>(HdBufferArrayRangeSharedPtr const &amp;range, HdBufferSourceSharedPtrVector &amp;&amp;sources)</argsstring>
        <name>AddSources</name>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>HdBufferSourceSharedPtrVector &amp;&amp;</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
<para>Append source data for given range to be committed later. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Resource update &amp; computation queuing API </heading>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a1755d680bf6af7a9bc27ea860f4518c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void AddSource</definition>
        <argsstring>(HdBufferArrayRangeSharedPtr const &amp;range, HdBufferSourceSharedPtr const &amp;source)</argsstring>
        <name>AddSource</name>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>HdBufferSourceSharedPtr const &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Append a source data for given range to be committed later. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a17e1108ceceb8a8890bf9dc96d1cdf04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void AddSource</definition>
        <argsstring>(HdBufferSourceSharedPtr const &amp;source)</argsstring>
        <name>AddSource</name>
        <param>
          <type>HdBufferSourceSharedPtr const &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Append a source data just to be resolved (used for cpu computations). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a7ee415723d8899af5cb6d3f0d4878feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void AddComputation</definition>
        <argsstring>(HdBufferArrayRangeSharedPtr const &amp;range, HdStComputationSharedPtr const &amp;computation, HdStComputeQueue const queue)</argsstring>
        <name>AddComputation</name>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>HdStComputationSharedPtr const &amp;</type>
          <declname>computation</declname>
        </param>
        <param>
          <type>HdStComputeQueue const</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Append a gpu computation into queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The parameter &apos;range&apos; specifies the destination buffer range, which has to be allocated by caller of this function.</para>
<para>note: GPU computations will be executed in the order that they are registered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1afb4cd2725be096167ab8c9d835fb7430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStDispatchBufferSharedPtr</type>
        <definition>HDST_API HdStDispatchBufferSharedPtr RegisterDispatchBuffer</definition>
        <argsstring>(TfToken const &amp;role, int count, int commandNumUints)</argsstring>
        <name>RegisterDispatchBuffer</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>commandNumUints</declname>
        </param>
        <briefdescription>
<para>Register a buffer allocated with <emphasis>count</emphasis> * <emphasis>commandNumUints</emphasis> * sizeof(uint32_t) to be used as an indirect dispatch buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Dispatch &amp; buffer API </heading>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ab24cf5032ec8075fb98a06af0e9c6ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API HdStBufferResourceSharedPtr</type>
        <definition>HDST_API HdStBufferResourceSharedPtr RegisterBufferResource</definition>
        <argsstring>(TfToken const &amp;role, HdTupleType tupleType, HgiBufferUsage bufferUsage)</argsstring>
        <name>RegisterBufferResource</name>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type><ref refid="struct_hd_tuple_type" kindref="compound">HdTupleType</ref></type>
          <declname>tupleType</declname>
        </param>
        <param>
          <type>HgiBufferUsage</type>
          <declname>bufferUsage</declname>
        </param>
        <briefdescription>
<para>Register a misc buffer resource. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually buffers are part of a buffer array (buffer aggregation) and are managed via buffer array APIs. RegisterBufferResource lets you create a standalone buffer that can be used for misc purposes (Eg. GPU frustum cull prim count read back). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a9f4fd758c068cd1f3db1f16980fee3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void GarbageCollectDispatchBuffers</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollectDispatchBuffers</name>
        <briefdescription>
<para>Remove any entries associated with expired dispatch buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1adad258c327a6f4a93ca88dd74f174a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void GarbageCollectBufferResources</definition>
        <argsstring>()</argsstring>
        <name>GarbageCollectBufferResources</name>
        <briefdescription>
<para>Remove any entries associated with expired misc buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a5c15d046b5421af7dea2929c4856b9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_MeshTopologySharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdSt_MeshTopologySharedPtr&gt; RegisterMeshTopology</definition>
        <argsstring>(HdInstance&lt; HdSt_MeshTopologySharedPtr &gt;::ID id)</argsstring>
        <name>RegisterMeshTopology</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_MeshTopologySharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>These registries implement sharing and deduplication of data based on computed hash identifiers. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Instance Registries </heading>
</para>
<para>Each returned <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> object retains a shared pointer to a data instance. When an <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> is registered for a previously unused ID, the data pointer will be null and it is the caller&apos;s responsibility to set its value. The instance registries are cleaned of unreferenced entries during garbage collection.</para>
<para>Note: As entries can be registered from multiple threads, the returned object holds a lock on the instance registry. This lock is held until the returned <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> object is destroyed. Topology instancing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a1ae03f88a97d2773fa28203997c2fd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_BasisCurvesTopologySharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdSt_BasisCurvesTopologySharedPtr&gt; RegisterBasisCurvesTopology</definition>
        <argsstring>(HdInstance&lt; HdSt_BasisCurvesTopologySharedPtr &gt;::ID id)</argsstring>
        <name>RegisterBasisCurvesTopology</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_BasisCurvesTopologySharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1abfdee38e15cc03d0c07eeb3b6a040523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_VertexAdjacencyBuilderSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdSt_VertexAdjacencyBuilderSharedPtr&gt; RegisterVertexAdjacencyBuilder</definition>
        <argsstring>(HdInstance&lt; HdSt_VertexAdjacencyBuilderSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterVertexAdjacencyBuilder</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_VertexAdjacencyBuilderSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a8e1873f6c24f96fbcf9e4db9fa42c73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdBufferArrayRangeSharedPtr&gt; RegisterMeshIndexRange</definition>
        <argsstring>(HdInstance&lt; HdBufferArrayRangeSharedPtr &gt;::ID id, TfToken const &amp;name)</argsstring>
        <name>RegisterMeshIndexRange</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Topology Index buffer array range instancing Returns the <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> points to shared <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref>, distinguished by given ID. </para>
        </briefdescription>
        <detaileddescription>
<para>*Refer the comment on RegisterTopology for the same consideration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1acf723906ec357b36e6245383bd042796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdBufferArrayRangeSharedPtr&gt; RegisterBasisCurvesIndexRange</definition>
        <argsstring>(HdInstance&lt; HdBufferArrayRangeSharedPtr &gt;::ID id, TfToken const &amp;name)</argsstring>
        <name>RegisterBasisCurvesIndexRange</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a0636d9a11c7baf50ad80c9d07b7c0d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdBufferArrayRangeSharedPtr&gt; RegisterPrimvarRange</definition>
        <argsstring>(HdInstance&lt; HdBufferArrayRangeSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterPrimvarRange</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Primvar array range instancing Returns the <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> pointing to shared <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref>, distinguished by given ID. </para>
        </briefdescription>
        <detaileddescription>
<para>*Refer the comment on RegisterTopology for the same consideration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a7b3854e625f58c145136159280d6fb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdBufferArrayRangeSharedPtr&gt; RegisterExtComputationDataRange</definition>
        <argsstring>(HdInstance&lt; HdBufferArrayRangeSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterExtComputationDataRange</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdBufferArrayRangeSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>ExtComputation data array range instancing Returns the <ref refid="class_hd_instance" kindref="compound">HdInstance</ref> pointing to shared <ref refid="class_hd_buffer_array_range" kindref="compound">HdBufferArrayRange</ref>, distinguished by given ID. </para>
        </briefdescription>
        <detaileddescription>
<para>*Refer the comment on RegisterTopology for the same consideration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a4b2e8d84c1a7ea7afaaa18569fd72e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_GeometricShaderSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdSt_GeometricShaderSharedPtr&gt; RegisterGeometricShader</definition>
        <argsstring>(HdInstance&lt; HdSt_GeometricShaderSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterGeometricShader</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdSt_GeometricShaderSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a geometric shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1add1f9c493b0ac2f259c05a1639c3a005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdStGLSLProgramSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HdStGLSLProgramSharedPtr&gt; RegisterGLSLProgram</definition>
        <argsstring>(HdInstance&lt; HdStGLSLProgramSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterGLSLProgram</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HdStGLSLProgramSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a GLSL program into the program registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a7022847cc926f758d51eef190bad46ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HioGlslfxSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HioGlslfxSharedPtr&gt; RegisterGLSLFXFile</definition>
        <argsstring>(HdInstance&lt; HioGlslfxSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterGLSLFXFile</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HioGlslfxSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a GLSLFX file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a7af630944169bc8e35dbb2674432bede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiResourceBindingsSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HgiResourceBindingsSharedPtr&gt; RegisterResourceBindings</definition>
        <argsstring>(HdInstance&lt; HgiResourceBindingsSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterResourceBindings</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiResourceBindingsSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="class_hgi" kindref="compound">Hgi</ref> resource bindings into the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a35fcde68ea0650ccf152e2e5f7cca2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiGraphicsPipelineSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HgiGraphicsPipelineSharedPtr&gt; RegisterGraphicsPipeline</definition>
        <argsstring>(HdInstance&lt; HgiGraphicsPipelineSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterGraphicsPipeline</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiGraphicsPipelineSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="class_hgi" kindref="compound">Hgi</ref> graphics pipeline into the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a46de201ecb1a674f82d721910b8c0b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiComputePipelineSharedPtr &gt;</type>
        <definition>HDST_API HdInstance&lt;HgiComputePipelineSharedPtr&gt; RegisterComputePipeline</definition>
        <argsstring>(HdInstance&lt; HgiComputePipelineSharedPtr &gt;::ID id)</argsstring>
        <name>RegisterComputePipeline</name>
        <param>
          <type><ref refid="class_hd_instance" kindref="compound">HdInstance</ref>&lt; HgiComputePipelineSharedPtr &gt;::ID</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="class_hgi" kindref="compound">Hgi</ref> compute pipeline into the registry. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ab61b861a0e993c3ab1a734a9dc2e85ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hgi_blit_cmds" kindref="compound">HgiBlitCmds</ref> *</type>
        <definition>HDST_API HgiBlitCmds* GetGlobalBlitCmds</definition>
        <argsstring>()</argsstring>
        <name>GetGlobalBlitCmds</name>
        <briefdescription>
<para>Returns the global hgi blit command queue for recording blitting work. </para>
        </briefdescription>
        <detaileddescription>
<para>When using this global cmd instead of creating a new <ref refid="class_hgi_blit_cmds" kindref="compound">HgiBlitCmds</ref> we reduce the number of command buffers being created. The returned pointer should not be held onto by the client as it is only valid until the <ref refid="class_hgi_blit_cmds" kindref="compound">HgiBlitCmds</ref> has been submitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1abd7fabe27a81c4d9cfa4fca3117bd4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> *</type>
        <definition>HDST_API HgiComputeCmds* GetGlobalComputeCmds</definition>
        <argsstring>(HgiComputeDispatch dispatchMethod=HgiComputeDispatchSerial)</argsstring>
        <name>GetGlobalComputeCmds</name>
        <param>
          <type>HgiComputeDispatch</type>
          <declname>dispatchMethod</declname>
          <defval>HgiComputeDispatchSerial</defval>
        </param>
        <briefdescription>
<para>Returns the global hgi compute cmd queue for recording compute work. </para>
        </briefdescription>
        <detaileddescription>
<para>When using this global cmd instead of creating a new <ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> we reduce the number of command buffers being created. The returned pointer should not be held onto by the client as it is only valid until the <ref refid="class_hgi_compute_cmds" kindref="compound">HgiComputeCmds</ref> has been submitted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1ac5a0e97ea3f1aa44a3d0f1b9a6f545b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void SubmitBlitWork</definition>
        <argsstring>(HgiSubmitWaitType wait=HgiSubmitWaitTypeNoWait)</argsstring>
        <name>SubmitBlitWork</name>
        <param>
          <type>HgiSubmitWaitType</type>
          <declname>wait</declname>
          <defval>HgiSubmitWaitTypeNoWait</defval>
        </param>
        <briefdescription>
<para>Submits blit work queued in global blit cmds for GPU execution. </para>
        </briefdescription>
        <detaileddescription>
<para>We can call this when we want to submit some work to the GPU. To stall the CPU and wait for the GPU to finish, &apos;wait&apos; can be provided. To insert a barrier to ensure memory writes are visible after the barrier a HgiMemoryBarrier can be provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a0fe7a5dea9280510c3cd62a10d9e415e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API void</type>
        <definition>HDST_API void SubmitComputeWork</definition>
        <argsstring>(HgiSubmitWaitType wait=HgiSubmitWaitTypeNoWait)</argsstring>
        <name>SubmitComputeWork</name>
        <param>
          <type>HgiSubmitWaitType</type>
          <declname>wait</declname>
          <defval>HgiSubmitWaitTypeNoWait</defval>
        </param>
        <briefdescription>
<para>Submits compute work queued in global compute cmds for GPU execution. </para>
        </briefdescription>
        <detaileddescription>
<para>We can call this when we want to submit some work to the GPU. To stall the CPU and wait for the GPU to finish, &apos;wait&apos; can be provided. To insert a barrier to ensure memory writes are visible after the barrier a HgiMemoryBarrier can be provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1aeee53927221a7ddf071c28b52469c956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API <ref refid="class_hd_st_staging_buffer" kindref="compound">HdStStagingBuffer</ref> *</type>
        <definition>HDST_API HdStStagingBuffer* GetStagingBuffer</definition>
        <argsstring>()</argsstring>
        <name>GetStagingBuffer</name>
        <briefdescription>
<para>Returns the staging buffer used when committing data to the GPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1afada6ad99ee3ebb47800e57c1e891532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetNonUniformAggregationStrategy</definition>
        <argsstring>(std::unique_ptr&lt; HdStAggregationStrategy &gt; &amp;&amp;strategy)</argsstring>
        <name>SetNonUniformAggregationStrategy</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt; &amp;&amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Set the aggregation strategy for non uniform parameters (vertex, varying, facevarying) Takes ownership of the passed in strategy object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="492" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a52a0e0abc5675daee425432fd3f05f51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetNonUniformImmutableAggregationStrategy</definition>
        <argsstring>(std::unique_ptr&lt; HdStAggregationStrategy &gt; &amp;&amp;strategy)</argsstring>
        <name>SetNonUniformImmutableAggregationStrategy</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt; &amp;&amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Set the aggregation strategy for non uniform immutable parameters (vertex, varying, facevarying) Takes ownership of the passed in strategy object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="500" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="500" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a8ece72af4817c324a70cf12a54ab6c1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetUniformAggregationStrategy</definition>
        <argsstring>(std::unique_ptr&lt; HdStAggregationStrategy &gt; &amp;&amp;strategy)</argsstring>
        <name>SetUniformAggregationStrategy</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt; &amp;&amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Set the aggregation strategy for uniform (shader globals) Takes ownership of the passed in strategy object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="507" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a18baf38bf31f9edc30c800165ca621b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetShaderStorageAggregationStrategy</definition>
        <argsstring>(std::unique_ptr&lt; HdStAggregationStrategy &gt; &amp;&amp;strategy)</argsstring>
        <name>SetShaderStorageAggregationStrategy</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt; &amp;&amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Set the aggregation strategy for SSBO (uniform primvars) Takes ownership of the passed in strategy object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="514" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a835ba37af5e7e3809810c37036f8c121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SetSingleStorageAggregationStrategy</definition>
        <argsstring>(std::unique_ptr&lt; HdStAggregationStrategy &gt; &amp;&amp;strategy)</argsstring>
        <name>SetSingleStorageAggregationStrategy</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> &gt; &amp;&amp;</type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
<para>Set the aggregation strategy for single buffers (for nested instancer). </para>
        </briefdescription>
        <detaileddescription>
<para>Takes ownership of the passed in strategy object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="521" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="521" bodyend="524"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_hd_st_resource_registry_1a6523721933b4ac464bbf938565ee6bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HDST_API friend std::ostream &amp;</type>
        <definition>HDST_API friend std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const HdStResourceRegistry &amp;self)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_hd_st_resource_registry" kindref="compound">HdStResourceRegistry</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Debug dump. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="528" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_hd_st_resource_registry_1abb9d11a3f974321b5633e42b7634bd91" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void _Commit</definition>
        <argsstring>() override</argsstring>
        <name>_Commit</name>
        <reimplements refid="class_hd_resource_registry_1a2dfcb3e2a701bf3cc0b77d8a89169309">_Commit</reimplements>
        <briefdescription>
<para>A hook for derived registries to perform additional resource commits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a5934824e9aa81ecfebab1bea9212d9d9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void _GarbageCollect</definition>
        <argsstring>() override</argsstring>
        <name>_GarbageCollect</name>
        <reimplements refid="class_hd_resource_registry_1ab1d18e80d562dd7a93b2c15096f9ee94">_GarbageCollect</reimplements>
        <briefdescription>
<para>Hooks for derived registries to perform additional GC when <ref refid="class_hd_resource_registry_1abd7db6bf77e1fcf32a585dd94cb3c549" kindref="member">GarbageCollect()</ref> is invoked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="534" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_hd_st_resource_registry_1a8fc191259bdf75d7628e6c14e165a0be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _CommitTextures</definition>
        <argsstring>()</argsstring>
        <name>_CommitTextures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a450ba0d70e3aacc18eb8fc80c182431f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdBufferArrayRangeSharedPtr</type>
        <definition>HdBufferArrayRangeSharedPtr _AllocateBufferArrayRange</definition>
        <argsstring>(HdStAggregationStrategy *strategy, HdStBufferArrayRegistry &amp;bufferArrayRegistry, TfToken const &amp;role, HdBufferSpecVector const &amp;bufferSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>_AllocateBufferArrayRange</name>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
          <declname>bufferArrayRegistry</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>bufferSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1a5138cdd3ae68b38d7fb164dabe848190" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>HdBufferArrayRangeSharedPtr</type>
        <definition>HdBufferArrayRangeSharedPtr _UpdateBufferArrayRange</definition>
        <argsstring>(HdStAggregationStrategy *strategy, HdStBufferArrayRegistry &amp;bufferArrayRegistry, TfToken const &amp;role, HdBufferArrayRangeSharedPtr const &amp;curRange, HdBufferSpecVector const &amp;updatedOrAddedSpecs, HdBufferSpecVector const &amp;removedSpecs, HdBufferArrayUsageHint usageHint)</argsstring>
        <name>_UpdateBufferArrayRange</name>
        <param>
          <type><ref refid="class_hd_st_aggregation_strategy" kindref="compound">HdStAggregationStrategy</ref> *</type>
          <declname>strategy</declname>
        </param>
        <param>
          <type><ref refid="class_hd_st_buffer_array_registry" kindref="compound">HdStBufferArrayRegistry</ref> &amp;</type>
          <declname>bufferArrayRegistry</declname>
        </param>
        <param>
          <type><ref refid="class_tf_token" kindref="compound">TfToken</ref> const &amp;</type>
          <declname>role</declname>
        </param>
        <param>
          <type>HdBufferArrayRangeSharedPtr const &amp;</type>
          <declname>curRange</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>updatedOrAddedSpecs</declname>
        </param>
        <param>
          <type>HdBufferSpecVector const &amp;</type>
          <declname>removedSpecs</declname>
        </param>
        <param>
          <type><ref refid="union_hd_buffer_array_usage_hint" kindref="compound">HdBufferArrayUsageHint</ref></type>
          <declname>usageHint</declname>
        </param>
        <briefdescription>
<para>Wrapper function for BAR allocation/reallocation-migration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_hd_st_resource_registry_1abba6427c8dc69f076d72246e44e33e68" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _TallyResourceAllocation</definition>
        <argsstring>(VtDictionary *result) const</argsstring>
        <name>_TallyResourceAllocation</name>
        <param>
          <type><ref refid="class_vt_dictionary" kindref="compound">VtDictionary</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/imaging/hdSt/resourceRegistry.h" line="558" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A central registry of all GPU resources. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3306">
        <label>HdResourceRegistry</label>
        <link refid="class_hd_resource_registry"/>
      </node>
      <node id="3305">
        <label>HdStResourceRegistry</label>
        <link refid="class_hd_st_resource_registry"/>
        <childnode refid="3306" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3308">
        <label>HdResourceRegistry</label>
        <link refid="class_hd_resource_registry"/>
      </node>
      <node id="3307">
        <label>HdStResourceRegistry</label>
        <link refid="class_hd_st_resource_registry"/>
        <childnode refid="3308" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pxr/imaging/hdSt/resourceRegistry.h" line="122" column="1" bodyfile="pxr/imaging/hdSt/resourceRegistry.h" bodystart="121" bodyend="697"/>
    <listofallmembers>
      <member refid="class_hd_st_resource_registry_1a450ba0d70e3aacc18eb8fc80c182431f" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_AllocateBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1aa83b2af8c85b13908024c55199501856" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_basisCurvesTopologyIndexRangeRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a53b8d271c64406a82a17091490602903" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_basisCurvesTopologyRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a4eaee359988b262c2153c94425672583" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_blitCmds</name></member>
      <member refid="class_hd_st_resource_registry_1afec59c7120b6095a8a737d540b15085b" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_bufferResourceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a40165957789491aca248f6cf74d16690" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_BufferResourceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1abb9d11a3f974321b5633e42b7634bd91" prot="protected" virt="virtual"><scope>HdStResourceRegistry</scope><name>_Commit</name></member>
      <member refid="class_hd_st_resource_registry_1a8fc191259bdf75d7628e6c14e165a0be" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_CommitTextures</name></member>
      <member refid="class_hd_st_resource_registry_1a9f022043ad7f81c98a2ca504a2e43399" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_computeCmds</name></member>
      <member refid="class_hd_st_resource_registry_1acfce13417e73f2fcdcafa3facf78b176" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_computePipelineRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a1e2a12ada7c4d993d5b0e1ea5637671e" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_dispatchBufferRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a6b442c700cac4e23742236e27328a81b" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_DispatchBufferRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1aae52367692c443f6480b6583d246bc33" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_extComputationDataRangeRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a5934824e9aa81ecfebab1bea9212d9d9" prot="protected" virt="virtual"><scope>HdStResourceRegistry</scope><name>_GarbageCollect</name></member>
      <member refid="class_hd_st_resource_registry_1a727ef357b5062948ce6b0b2c72ba51cc" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_geometricShaderRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a961995cdf952a13cc399ffaf9173e8fd" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_glslfxFileRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a2d3a52c200dec171199974816156b0ca" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_glslProgramRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1ac4fe96f9ade9ca62343e33c01935b623" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_graphicsPipelineRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a1a3ab6cafe5d5c90dbbd7f5fbd035ab6" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_hgi</name></member>
      <member refid="class_hd_st_resource_registry_1a9dae2fa4fabce542a6727ae0fa5f6bc1" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_meshTopologyIndexRangeRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1aa4d70c64743618af34b68e0d6d065a16" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_meshTopologyRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a7f4e31a3ffe64d7789c2da02c831d533" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_nonUniformAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a5b7c6428e6b465a0e8a3051bd5d52220" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_nonUniformBufferArrayRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1ad4db749b8531ad643e963c1b64dba9bd" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_nonUniformImmutableAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a7c26c9a62a0fed1515da81ff7de0b3c8" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_nonUniformImmutableBufferArrayRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a8acf2a92c62eff09ee45dd3baac1c121" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_numBufferSourcesToResolve</name></member>
      <member refid="class_hd_st_resource_registry_1a8f1f548cdc891dc3072ae2242821526b" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_PendingComputationList</name></member>
      <member refid="class_hd_st_resource_registry_1abb3c83c424f8076c6b5ce2b25586c028" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_pendingComputations</name></member>
      <member refid="class_hd_st_resource_registry_1a6fcb90e225c110015fdfcda1df00185f" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_PendingSourceList</name></member>
      <member refid="class_hd_st_resource_registry_1a8a0ed51ded190fccea6a627dede4ecce" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_pendingSources</name></member>
      <member refid="class_hd_st_resource_registry_1a024b3b70aadb537f55d952dcda4523b6" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_primvarRangeRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a09fe67a8a2f49d4f56401592031deac5" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_resourceBindingsRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1ac6c5d5999284f4b0ecb5da78cd40ed16" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_singleAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a1787ff38438aa73dbfe2a5b1b979e498" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_singleBufferArrayRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a6f44aa95cd9b847e234e6012a1a1b104" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_stagingBuffer</name></member>
      <member refid="class_hd_st_resource_registry_1abba6427c8dc69f076d72246e44e33e68" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_TallyResourceAllocation</name></member>
      <member refid="class_hd_st_resource_registry_1a9d3b7166d171e298be39ddfa953e0b18" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_textureHandleRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a0bc9adf1de14fea468aa889183c94a40" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_TopologyIndexRangeInstanceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a8239cc6685735f2a9e27a28d95a0b255" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_TopologyIndexRangeInstanceRegMap</name></member>
      <member refid="class_hd_st_resource_registry_1a8fdb3d5199c273ee351e89e1b0d24351" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_uniformSsboAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1af93767d5ef768e330c1503939006742d" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_uniformSsboBufferArrayRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1ad4f5c090babe98dceeb658569bb2bf07" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_uniformUboAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a22ec9e03067907285df639513a1aaf50" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_uniformUboBufferArrayRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a5138cdd3ae68b38d7fb164dabe848190" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_UpdateBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1a144c5eeb15384468e5d733f54b4b1e34" prot="private" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>_vertexAdjacencyBuilderRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a7ee415723d8899af5cb6d3f0d4878feb" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AddComputation</name></member>
      <member refid="class_hd_st_resource_registry_1a1755d680bf6af7a9bc27ea860f4518c5" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AddSource</name></member>
      <member refid="class_hd_st_resource_registry_1a17e1108ceceb8a8890bf9dc96d1cdf04" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AddSource</name></member>
      <member refid="class_hd_st_resource_registry_1a15fddcb5de7a3dc57bf86d741a5b6d8b" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AddSources</name></member>
      <member refid="class_hd_st_resource_registry_1ae9ad1cc492b1223de67ad9d5fc6923be" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateNonUniformBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1a1edd3fb78d6a57bb984cb29c390eec94" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateNonUniformImmutableBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1a1f904eb51749ed4994768afaf16b5803" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateShaderStorageBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1a0c51af19875fddbeee88a43bcf246532" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateSingleBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1aca726a511db9a2b74038bffedb4fe580" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateTextureHandle</name></member>
      <member refid="class_hd_st_resource_registry_1af5a1a32d34f9294663af85ba51f1bc58" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateTextureObject</name></member>
      <member refid="class_hd_st_resource_registry_1aab542f4b61678c0f6953fe7109f1b4da" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>AllocateUniformBufferArrayRange</name></member>
      <member refid="class_hd_resource_registry_1a6acc6a3bb2a22c95bbda2c268a52f99b" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>Commit</name></member>
      <member refid="class_hd_resource_registry_1abd7db6bf77e1fcf32a585dd94cb3c549" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GarbageCollect</name></member>
      <member refid="class_hd_st_resource_registry_1adad258c327a6f4a93ca88dd74f174a59" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GarbageCollectBufferResources</name></member>
      <member refid="class_hd_st_resource_registry_1a9f4fd758c068cd1f3db1f16980fee3cb" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GarbageCollectDispatchBuffers</name></member>
      <member refid="class_hd_st_resource_registry_1ab61b861a0e993c3ab1a734a9dc2e85ff" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GetGlobalBlitCmds</name></member>
      <member refid="class_hd_st_resource_registry_1abd7fabe27a81c4d9cfa4fca3117bd4d3" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GetGlobalComputeCmds</name></member>
      <member refid="class_hd_st_resource_registry_1a61a4b45033b8ae669111a29e0c1de48a" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GetHgi</name></member>
      <member refid="class_hd_st_resource_registry_1aacf16c122f0f8558870a2d7b276e29a7" prot="public" virt="virtual"><scope>HdStResourceRegistry</scope><name>GetResourceAllocation</name></member>
      <member refid="class_hd_st_resource_registry_1aeee53927221a7ddf071c28b52469c956" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>GetStagingBuffer</name></member>
      <member refid="class_hd_resource_registry_1a1798dc5216b7e543b162d2a1585d84df" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>HdResourceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1ad12d26aa00e7e22edbc57e2f3a72e061" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>HdStResourceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1af86eb842cd99c8a822df1209d4567373" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>HF_MALLOC_TAG_NEW</name></member>
      <member refid="class_hd_resource_registry_1abea3aef1033b9f56ef127a68e9fa3739" prot="public" virt="non-virtual" ambiguityscope="HdResourceRegistry::"><scope>HdStResourceRegistry</scope><name>HF_MALLOC_TAG_NEW</name></member>
      <member refid="class_hd_st_resource_registry_1aa926690de633ba967319bc98d9855c56" prot="public" virt="virtual"><scope>HdStResourceRegistry</scope><name>InvalidateShaderRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a6523721933b4ac464bbf938565ee6bf5" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_hd_st_resource_registry_1acf723906ec357b36e6245383bd042796" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterBasisCurvesIndexRange</name></member>
      <member refid="class_hd_st_resource_registry_1a1ae03f88a97d2773fa28203997c2fd9e" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterBasisCurvesTopology</name></member>
      <member refid="class_hd_st_resource_registry_1ab24cf5032ec8075fb98a06af0e9c6ebb" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterBufferResource</name></member>
      <member refid="class_hd_st_resource_registry_1a46de201ecb1a674f82d721910b8c0b10" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterComputePipeline</name></member>
      <member refid="class_hd_st_resource_registry_1afb4cd2725be096167ab8c9d835fb7430" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterDispatchBuffer</name></member>
      <member refid="class_hd_st_resource_registry_1a7b3854e625f58c145136159280d6fb55" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterExtComputationDataRange</name></member>
      <member refid="class_hd_st_resource_registry_1a4b2e8d84c1a7ea7afaaa18569fd72e31" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterGeometricShader</name></member>
      <member refid="class_hd_st_resource_registry_1a7022847cc926f758d51eef190bad46ce" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterGLSLFXFile</name></member>
      <member refid="class_hd_st_resource_registry_1add1f9c493b0ac2f259c05a1639c3a005" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterGLSLProgram</name></member>
      <member refid="class_hd_st_resource_registry_1a35fcde68ea0650ccf152e2e5f7cca2a0" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterGraphicsPipeline</name></member>
      <member refid="class_hd_st_resource_registry_1a8e1873f6c24f96fbcf9e4db9fa42c73f" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterMeshIndexRange</name></member>
      <member refid="class_hd_st_resource_registry_1a5c15d046b5421af7dea2929c4856b9e3" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterMeshTopology</name></member>
      <member refid="class_hd_st_resource_registry_1a0636d9a11c7baf50ad80c9d07b7c0d3e" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterPrimvarRange</name></member>
      <member refid="class_hd_st_resource_registry_1a7af630944169bc8e35dbb2674432bede" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterResourceBindings</name></member>
      <member refid="class_hd_st_resource_registry_1abfdee38e15cc03d0c07eeb3b6a040523" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>RegisterVertexAdjacencyBuilder</name></member>
      <member refid="class_hd_st_resource_registry_1ae3becaa92122d1321af05df25db93f8f" prot="public" virt="virtual"><scope>HdStResourceRegistry</scope><name>ReloadResource</name></member>
      <member refid="class_hd_st_resource_registry_1a3e1c8b3ddaa19cc3a29e6b715ec8a4f4" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetMemoryRequestForTextureType</name></member>
      <member refid="class_hd_st_resource_registry_1afada6ad99ee3ebb47800e57c1e891532" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetNonUniformAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a52a0e0abc5675daee425432fd3f05f51" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetNonUniformImmutableAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a18baf38bf31f9edc30c800165ca621b7" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetShaderStorageAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a835ba37af5e7e3809810c37036f8c121" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetSingleStorageAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1a8ece72af4817c324a70cf12a54ab6c1f" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SetUniformAggregationStrategy</name></member>
      <member refid="class_hd_st_resource_registry_1ac5a0e97ea3f1aa44a3d0f1b9a6f545b8" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SubmitBlitWork</name></member>
      <member refid="class_hd_st_resource_registry_1a0fe7a5dea9280510c3cd62a10d9e415e" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>SubmitComputeWork</name></member>
      <member refid="class_hd_resource_registry_1a43ce5b43554ef7d06e7935c65ffebfbc" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>TextureKey</name></member>
      <member refid="class_hd_st_resource_registry_1a94ac78829e03e9148919f0d51bd9c601" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>UpdateNonUniformBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1af03a18c5ce2a8db31acdd4f3731804bf" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>UpdateNonUniformImmutableBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1ad63d8e4a15fc44fd876adc702b2b17bc" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>UpdateShaderStorageBufferArrayRange</name></member>
      <member refid="class_hd_st_resource_registry_1abbc03e27ac5621e41f3c6f0b484cb086" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>UpdateUniformBufferArrayRange</name></member>
      <member refid="class_hd_resource_registry_1a6c0947e31da5157dd11e4ec0602295d4" prot="public" virt="virtual"><scope>HdStResourceRegistry</scope><name>~HdResourceRegistry</name></member>
      <member refid="class_hd_st_resource_registry_1a7a673dcdf0ac9a6554527ac58dab35c0" prot="public" virt="non-virtual"><scope>HdStResourceRegistry</scope><name>~HdStResourceRegistry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
