<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_tf_notice_1_1___standard_deliverer" kind="class" language="C++" prot="private">
    <compoundname>TfNotice::_StandardDeliverer</compoundname>
    <basecompoundref prot="public" virt="non-virtual">TfNotice::_DelivererBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1aa0cce6802f2af91b28fa53fa56f470ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual ~_StandardDeliverer</definition>
        <argsstring>()</argsstring>
        <name>~_StandardDeliverer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="557" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1a65dc8e48c5f7f0dc837f9feac78c10b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_tf_type" kindref="compound">TfType</ref></type>
        <definition>virtual TfType GetNoticeType</definition>
        <argsstring>() const</argsstring>
        <name>GetNoticeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="559" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="559" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1af2db6f99f9106ab1ad487dd33e819cb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Delivers</definition>
        <argsstring>(TfType const &amp;noticeType, TfWeakBase const *sender) const</argsstring>
        <name>Delivers</name>
        <param>
          <type><ref refid="class_tf_type" kindref="compound">TfType</ref> const &amp;</type>
          <declname>noticeType</declname>
        </param>
        <param>
          <type><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> const *</type>
          <declname>sender</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="568" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="568" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1a1b9b87c2691b9b75c3ffcec6480a0e6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> const  *</type>
        <definition>virtual TfWeakBase const* GetSenderWeakBase</definition>
        <argsstring>() const</argsstring>
        <name>GetSenderWeakBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="576" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1aba208ced236fff1fcc18ab7bafdab505" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>_DelivererBase *</type>
        <definition>virtual _DelivererBase* Clone</definition>
        <argsstring>() const</argsstring>
        <name>Clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="581" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="581" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1a836af9921789465799f18b765a315d17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool _SendToListener</definition>
        <argsstring>(const TfNotice &amp;notice, const TfType &amp;noticeType, const TfWeakBase *sender, const void *senderUniqueId, const std::type_info &amp;senderType, const std::vector&lt; TfNotice::WeakProbePtr &gt; &amp;probes)</argsstring>
        <name>_SendToListener</name>
        <param>
          <type>const <ref refid="class_tf_notice" kindref="compound">TfNotice</ref> &amp;</type>
          <declname>notice</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_type" kindref="compound">TfType</ref> &amp;</type>
          <declname>noticeType</declname>
        </param>
        <param>
          <type>const <ref refid="class_tf_weak_base" kindref="compound">TfWeakBase</ref> *</type>
          <declname>sender</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>senderUniqueId</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>senderType</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_tf_weak_ptr" kindref="compound">TfNotice::WeakProbePtr</ref> &gt; &amp;</type>
          <declname>probes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="590" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="590" bodyend="625"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1ab6aefa3353bc90f7c534cd6fcfbdfce8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived *</type>
        <definition>Derived* AsDerived</definition>
        <argsstring>()</argsstring>
        <name>AsDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="628" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="628" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="class_tf_notice_1_1___standard_deliverer_1a1f6c461012c40761c7a6880babf626c4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived const  *</type>
        <definition>Derived const* AsDerived</definition>
        <argsstring>() const</argsstring>
        <name>AsDerived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/base/tf/notice.h" line="632" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="632" bodyend="634"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pxr/base/tf/notice.h" line="555" column="1" bodyfile="pxr/base/tf/notice.h" bodystart="555" bodyend="635"/>
    <listofallmembers>
      <member refid="class_tf_weak_base_1a01aa4c4b93df067f2ec9b9e5fa4c35b3" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>__GetTfWeakBase__</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a1c6a397c917dd096237cba252c4a1827" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_BeginDelivery</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a2c4def763e12bc01008bed923919c819" prot="protected" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_CastNotice</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a476536f05f88f294864bf03d7d290f49" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_Deactivate</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a1b7f2b01cf5601a56fe1ef23dd617e2b" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_DelivererBase</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ad0169074bf187d093e5bb3ff8b7249f6" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_EndDelivery</name></member>
      <member refid="class_tf_weak_base_1a6a5533162e8efab1be47acd6ccd5254c" prot="protected" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_HasRemnant</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ae2a5618896090abc86172d5f3db735af" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_IsActive</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a5fcb32d9da37ac34de3a9177b6cd304b" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_IsMarkedForRemoval</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1a5a40ff3c56fe98a591bc15abf79cb03e" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_MarkForRemoval</name></member>
      <member refid="class_tf_weak_base_1a95139d2f4d04eb706664a4f47eb93918" prot="protected" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_Register</name></member>
      <member refid="class_tf_weak_base_1ac1312732482c8a286522f703f2cf90d1" prot="protected" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_Register</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1a836af9921789465799f18b765a315d17" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>_SendToListener</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1ab6aefa3353bc90f7c534cd6fcfbdfce8" prot="private" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>AsDerived</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1a1f6c461012c40761c7a6880babf626c4" prot="private" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>AsDerived</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1aba208ced236fff1fcc18ab7bafdab505" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>Clone</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1af2db6f99f9106ab1ad487dd33e819cb8" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>Delivers</name></member>
      <member refid="class_tf_weak_base_1a16f1e27cc0c7c606ffb397b7d970ed10" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>EnableNotification2</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1a65dc8e48c5f7f0dc837f9feac78c10b1" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>GetNoticeType</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1a1b9b87c2691b9b75c3ffcec6480a0e6c" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>GetSenderWeakBase</name></member>
      <member refid="class_tf_weak_base_1a3241c32a82fbed0716a77049f6134e1e" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_tf_weak_base_1af890ac314073e903458bf6b2397566b5" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>operator=</name></member>
      <member refid="class_tf_weak_base_1a6e4abdd663654f8c8019702a464de8d6" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_weak_base_1affc4c00d0bbfdfe4f9e6a8b2e81be368" prot="public" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>TfWeakBase</name></member>
      <member refid="class_tf_notice_1_1___deliverer_base_1ab1aa8dc4324d077d62f173e105b4d0b9" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>~_DelivererBase</name></member>
      <member refid="class_tf_notice_1_1___standard_deliverer_1aa0cce6802f2af91b28fa53fa56f470ca" prot="public" virt="virtual"><scope>TfNotice::_StandardDeliverer</scope><name>~_StandardDeliverer</name></member>
      <member refid="class_tf_weak_base_1a778020f525b66def8a284c6f020592c2" prot="protected" virt="non-virtual"><scope>TfNotice::_StandardDeliverer</scope><name>~TfWeakBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
