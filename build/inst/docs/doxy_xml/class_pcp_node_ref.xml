<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_pcp_node_ref" kind="class" language="C++" prot="public">
    <compoundname>PcpNodeRef</compoundname>
    <includes refid="pcp_2node_8h" local="no">node.h</includes>
    <innerclass refid="struct_pcp_node_ref_1_1_hash" prot="public">PcpNodeRef::Hash</innerclass>
      <sectiondef kind="user-defined">
      <header>Operators / Miscellaneous</header>
      <memberdef kind="typedef" id="class_pcp_node_ref_1a2e4f8df8378c4a8cf25100a029d4e918" prot="public" static="no">
        <type>size_t PcpNodeRef::*</type>
        <definition>typedef size_t PcpNodeRef::* UnspecifiedBoolType</definition>
        <argsstring></argsstring>
        <name>UnspecifiedBoolType</name>
        <briefdescription>
<para>Returns true if this is a valid node reference, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="77" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator UnspecifiedBoolType</definition>
        <argsstring>() const</argsstring>
        <name>operator UnspecifiedBoolType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="78" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a1f46595a73a32a39ead741e36769b316" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this references the same node as <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="83" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1afe02aef27cca15a3603078b5b1183211" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>PcpNodeRef::operator==(const PcpNodeRef&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="89" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1adbbf4f6d2d942228911c42fc7a24b45b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool operator&lt;</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this node is &apos;less&apos; than <computeroutput>rhs</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The ordering of nodes is arbitrary and does not indicate the relative strength of the nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a6c6a3384a754bc75da4f712a33cb9be9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Less than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>PcpNodeRef::operator&lt;(const PcpNodeRef&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="101" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a3e7939a65039f82c31b2a6387dbd083d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>PcpNodeRef::operator&lt;(const PcpNodeRef&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="107" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ad9e9ec2ac24f1c686d0b7d1a585d3f96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const PcpNodeRef &amp;rhs) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Greater than or equal operator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>PcpNodeRef::operator&lt;(const PcpNodeRef&amp;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="113" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a158ff50d88c428744556fc7f066ed529" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PcpPrimIndex_Graph *</type>
        <definition>PcpPrimIndex_Graph* GetOwningGraph</definition>
        <argsstring>() const</argsstring>
        <name>GetOwningGraph</name>
        <briefdescription>
<para>Returns the graph that this node belongs to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="124" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a2be47ccce8a8d39fb64af9ad5b0a1a05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void *</type>
        <definition>PCP_API void* GetUniqueIdentifier</definition>
        <argsstring>() const</argsstring>
        <name>GetUniqueIdentifier</name>
        <briefdescription>
<para>Returns a value that uniquely identifies this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arc information</header>
      <description><para>Information pertaining to the arcs connecting this node to its parent and child nodes. </para>
</description>
      <memberdef kind="function" id="class_pcp_node_ref_1a4702d5680b202441902d58d7014b1209" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="usd_2pcp_2types_8h_1a4fd9e1415db6758f742df202058eeab9" kindref="member">PcpArcType</ref></type>
        <definition>PCP_API PcpArcType GetArcType</definition>
        <argsstring>() const</argsstring>
        <name>GetArcType</name>
        <briefdescription>
<para>Returns the type of arc connecting this node to its parent node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a82f11ba5c67cb945c4ef8af863e8aaff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetParentNode</definition>
        <argsstring>() const</argsstring>
        <name>GetParentNode</name>
        <briefdescription>
<para>Returns this node&apos;s immediate parent node. </para>
        </briefdescription>
        <detaileddescription>
<para>Will return NULL if this node is a root node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1aebe709529c86e9e67640970d4bc705d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API child_const_range</type>
        <definition>PCP_API child_const_range GetChildrenRange</definition>
        <argsstring>() const</argsstring>
        <name>GetChildrenRange</name>
        <briefdescription>
<para>Returns an iterator range over the children nodes in strongest to weakest order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ad39f67f3c1db1174cf74ad0ab0a57660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef InsertChild</definition>
        <argsstring>(const PcpLayerStackSite &amp;site, const PcpArc &amp;arc, PcpErrorBasePtr *error)</argsstring>
        <name>InsertChild</name>
        <param>
          <type>const <ref refid="class_pcp_layer_stack_site" kindref="compound">PcpLayerStackSite</ref> &amp;</type>
          <declname>site</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_arc" kindref="compound">PcpArc</ref> &amp;</type>
          <declname>arc</declname>
        </param>
        <param>
          <type>PcpErrorBasePtr *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Inserts a new child node for <computeroutput>site</computeroutput>, connected to this node via <computeroutput>arc</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a6a65634546c0119e939c0e79357a5d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef InsertChildSubgraph</definition>
        <argsstring>(const PcpPrimIndex_GraphRefPtr &amp;subgraph, const PcpArc &amp;arc, PcpErrorBasePtr *error)</argsstring>
        <name>InsertChildSubgraph</name>
        <param>
          <type>const PcpPrimIndex_GraphRefPtr &amp;</type>
          <declname>subgraph</declname>
        </param>
        <param>
          <type>const <ref refid="class_pcp_arc" kindref="compound">PcpArc</ref> &amp;</type>
          <declname>arc</declname>
        </param>
        <param>
          <type>PcpErrorBasePtr *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Inserts <computeroutput>subgraph</computeroutput> as a child of this node, with the root node of <computeroutput>subtree</computeroutput> connected to this node via <computeroutput>arc</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a59a0fcf375acabb93c5638c40046722b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetOriginNode</definition>
        <argsstring>() const</argsstring>
        <name>GetOriginNode</name>
        <briefdescription>
<para>Returns the immediate origin node for this node. </para>
        </briefdescription>
        <detaileddescription>
<para>The origin node is the node that caused this node to be brought into the prim index. In most cases, this is the same as the parent node. For implied inherits, the origin is the node from which this node was propagated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a8c12a0a275118b95aa0099e9c3a16ff5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetOriginRootNode</definition>
        <argsstring>() const</argsstring>
        <name>GetOriginRootNode</name>
        <briefdescription>
<para>Walk up to the root origin node for this node. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the very first node that caused this node to be added to the graph. For instance, the root origin node of an implied inherit is the original inherit node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a2cc548787f6de2f3340d7d0b2d0dcd3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_node_ref" kindref="compound">PcpNodeRef</ref></type>
        <definition>PCP_API PcpNodeRef GetRootNode</definition>
        <argsstring>() const</argsstring>
        <name>GetRootNode</name>
        <briefdescription>
<para>Walk up to the root node of this expression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1aaef98156d80b3156252eaeeaf158120b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> &amp;</type>
        <definition>PCP_API const PcpMapExpression&amp; GetMapToParent</definition>
        <argsstring>() const</argsstring>
        <name>GetMapToParent</name>
        <briefdescription>
<para>Returns mapping function used to translate paths and values from this node to its parent node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a181ef5054ffea4fea53b0597bcdf06cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_pcp_map_expression" kindref="compound">PcpMapExpression</ref> &amp;</type>
        <definition>PCP_API const PcpMapExpression&amp; GetMapToRoot</definition>
        <argsstring>() const</argsstring>
        <name>GetMapToRoot</name>
        <briefdescription>
<para>Returns mapping function used to translate paths and values from this node directly to the root node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ab1cc8c44b8293ce30d1e54afca0cd21f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API int</type>
        <definition>PCP_API int GetSiblingNumAtOrigin</definition>
        <argsstring>() const</argsstring>
        <name>GetSiblingNumAtOrigin</name>
        <briefdescription>
<para>Returns this node&apos;s index among siblings with the same arc type at this node&apos;s origin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ad8daf6a2b8f161ac9c958a141524f60a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API int</type>
        <definition>PCP_API int GetNamespaceDepth</definition>
        <argsstring>() const</argsstring>
        <name>GetNamespaceDepth</name>
        <briefdescription>
<para>Returns the absolute namespace depth of the node that introduced this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this does <emphasis>not</emphasis> count any variant selections. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ae86b184dc2470b35d13db7ccea3a7d01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API int</type>
        <definition>PCP_API int GetDepthBelowIntroduction</definition>
        <argsstring>() const</argsstring>
        <name>GetDepthBelowIntroduction</name>
        <briefdescription>
<para>Return the number of levels of namespace this node&apos;s site is below the level at which it was introduced by an arc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a1663efe41433dcdac4283c3148135926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>PCP_API SdfPath GetPathAtIntroduction</definition>
        <argsstring>() const</argsstring>
        <name>GetPathAtIntroduction</name>
        <briefdescription>
<para>Returns the path for this node&apos;s site when it was introduced. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a2e7a57aa98d08f0ee80850b321ef44a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_sdf_path" kindref="compound">SdfPath</ref></type>
        <definition>PCP_API SdfPath GetIntroPath</definition>
        <argsstring>() const</argsstring>
        <name>GetIntroPath</name>
        <briefdescription>
<para>Get the path that introduced this node. </para>
        </briefdescription>
        <detaileddescription>
<para>Specifically, this is the path the parent node had at the level of namespace where this node was added as a child. For a root node, this returns the absolute root path. See also <ref refid="class_pcp_node_ref_1ae86b184dc2470b35d13db7ccea3a7d01" kindref="member">GetDepthBelowIntroduction()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="219" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Node information</header>
      <description><para>Information pertaining specifically to this node and the opinions that it may or may not provide. </para>
</description>
      <memberdef kind="function" id="class_pcp_node_ref_1a69247a8505a7397117a532e76487fb19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="class_pcp_layer_stack_site" kindref="compound">PcpLayerStackSite</ref></type>
        <definition>PCP_API PcpLayerStackSite GetSite</definition>
        <argsstring>() const</argsstring>
        <name>GetSite</name>
        <briefdescription>
<para>Get the site this node represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a36e57a6bd937d8527230be84579da695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const <ref refid="class_sdf_path" kindref="compound">SdfPath</ref> &amp;</type>
        <definition>PCP_API const SdfPath&amp; GetPath</definition>
        <argsstring>() const</argsstring>
        <name>GetPath</name>
        <briefdescription>
<para>Returns the path for the site this node represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a0de2d0307c7d17df720d5e7651a0119c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API const PcpLayerStackRefPtr &amp;</type>
        <definition>PCP_API const PcpLayerStackRefPtr&amp; GetLayerStack</definition>
        <argsstring>() const</argsstring>
        <name>GetLayerStack</name>
        <briefdescription>
<para>Returns the layer stack for the site this node represents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a89d36d6d68048cfdfac2277f19888bae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsRootNode</definition>
        <argsstring>() const</argsstring>
        <name>IsRootNode</name>
        <briefdescription>
<para>Returns true if this node is the root node of the prim index graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a3751ee113ae633c60c857813ae972958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetIsDueToAncestor</definition>
        <argsstring>(bool isDueToAncestor)</argsstring>
        <name>SetIsDueToAncestor</name>
        <param>
          <type>bool</type>
          <declname>isDueToAncestor</declname>
        </param>
        <briefdescription>
<para>Get/set whether this node was introduced by being copied from its namespace ancestor, or directly by an arc at this level of namespace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ae1555e51e749288e3d3e140d23833d10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsDueToAncestor</definition>
        <argsstring>() const</argsstring>
        <name>IsDueToAncestor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a4627b9a342f4c8cf4f72a214c7803cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetHasSymmetry</definition>
        <argsstring>(bool hasSymmetry)</argsstring>
        <name>SetHasSymmetry</name>
        <param>
          <type>bool</type>
          <declname>hasSymmetry</declname>
        </param>
        <briefdescription>
<para>Get/set whether this node provides any symmetry opinions, either directly or from a namespace ancestor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a32e89f4c644db980233c490063174800" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasSymmetry</definition>
        <argsstring>() const</argsstring>
        <name>HasSymmetry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a324f0993009231233b7c9ce901b6dbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetPermission</definition>
        <argsstring>(SdfPermission perm)</argsstring>
        <name>SetPermission</name>
        <param>
          <type><ref refid="usd_2sdf_2types_8h_1ac344342016ac8137d2b63163bda14de0" kindref="member">SdfPermission</ref></type>
          <declname>perm</declname>
        </param>
        <briefdescription>
<para>Get/set the permission for this node. </para>
        </briefdescription>
        <detaileddescription>
<para>This indicates whether specs on this node can be accessed from other nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a31db2d90d43183f05a8e7b46cb4194be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API <ref refid="usd_2sdf_2types_8h_1ac344342016ac8137d2b63163bda14de0" kindref="member">SdfPermission</ref></type>
        <definition>PCP_API SdfPermission GetPermission</definition>
        <argsstring>() const</argsstring>
        <name>GetPermission</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ae659dea2f858df88a59e73aa80b09696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetInert</definition>
        <argsstring>(bool inert)</argsstring>
        <name>SetInert</name>
        <param>
          <type>bool</type>
          <declname>inert</declname>
        </param>
        <briefdescription>
<para>Get/set whether this node is inert. </para>
        </briefdescription>
        <detaileddescription>
<para>An inert node never provides any opinions to a prim index. Such a node may exist purely as a marker to represent certain composition structure, but should never contribute opinions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a1de7ca229382a52ace42ccf6ec3badb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsInert</definition>
        <argsstring>() const</argsstring>
        <name>IsInert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1af83350cb1544d88686a812458dcd6d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetCulled</definition>
        <argsstring>(bool culled)</argsstring>
        <name>SetCulled</name>
        <param>
          <type>bool</type>
          <declname>culled</declname>
        </param>
        <briefdescription>
<para>Get/set whether this node is culled. </para>
        </briefdescription>
        <detaileddescription>
<para>If a node is culled, it and all descendant nodes provide no opinions to the index. A culled node is also considered inert. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1abd7f9d0825f037264dfaed48469318dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsCulled</definition>
        <argsstring>() const</argsstring>
        <name>IsCulled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a0ae9d2ebceb90f51853457c2fd77ad93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetRestricted</definition>
        <argsstring>(bool restricted)</argsstring>
        <name>SetRestricted</name>
        <param>
          <type>bool</type>
          <declname>restricted</declname>
        </param>
        <briefdescription>
<para>Get/set whether this node is restricted. </para>
        </briefdescription>
        <detaileddescription>
<para>A restricted node is a node that cannot contribute opinions to the index due to permissions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a08ce22d2ad73bf6f50b84d3e8b365129" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool IsRestricted</definition>
        <argsstring>() const</argsstring>
        <name>IsRestricted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a12fd18fb915b114a80afe9c56a74ab7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool CanContributeSpecs</definition>
        <argsstring>() const</argsstring>
        <name>CanContributeSpecs</name>
        <briefdescription>
<para>Returns true if this node is allowed to contribute opinions for composition, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1abcf00a76844601e8c5f4d6f83f91fb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API void</type>
        <definition>PCP_API void SetHasSpecs</definition>
        <argsstring>(bool hasSpecs)</argsstring>
        <name>SetHasSpecs</name>
        <param>
          <type>bool</type>
          <declname>hasSpecs</declname>
        </param>
        <briefdescription>
<para>Returns true if this node has opinions authored for composition, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a9f7f20453dbe22c650ab9d89bb41015f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>PCP_API bool</type>
        <definition>PCP_API bool HasSpecs</definition>
        <argsstring>() const</argsstring>
        <name>HasSpecs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="299" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_pcp_node_ref_1a59a5abd4f579135a8ac9e74825146f04" prot="public" static="no">
        <type>PcpNodeRef_ChildrenIterator</type>
        <definition>typedef PcpNodeRef_ChildrenIterator child_const_iterator</definition>
        <argsstring></argsstring>
        <name>child_const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="66" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_ref_1a7ef3e9998b84d4951db0ffa4ed141d05" prot="public" static="no">
        <type>PcpNodeRef_ChildrenReverseIterator</type>
        <definition>typedef PcpNodeRef_ChildrenReverseIterator child_const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>child_const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="67" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_pcp_node_ref_1a41c2e451f4f5f597449724bc5bd61494" prot="public" static="no">
        <type>std::pair&lt; child_const_iterator, child_const_iterator &gt;</type>
        <definition>typedef std::pair&lt;child_const_iterator, child_const_iterator&gt; child_const_range</definition>
        <argsstring></argsstring>
        <name>child_const_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="69" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_pcp_node_ref_1afe92ecdd764e48572cbbd96841ad5157" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PcpNodeIterator</definition>
        <argsstring></argsstring>
        <name>PcpNodeIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="311" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_pcp_node_ref_1ad33091d1fcf9bd7d0b5bb577f7069672" prot="private" static="no" mutable="no">
        <type>PcpPrimIndex_Graph *</type>
        <definition>PcpPrimIndex_Graph* _graph</definition>
        <argsstring></argsstring>
        <name>_graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="328" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_pcp_node_ref_1af8b8545a114c08473765097ba1b3d4ba" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t _nodeIdx</definition>
        <argsstring></argsstring>
        <name>_nodeIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="329" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_pcp_node_ref_1aecaf7f7c2dbdd974cc7eb48b6ca887f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpNodeRef</definition>
        <argsstring>()</argsstring>
        <name>PcpNodeRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="71" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1abb99ed5b9fc4130b92f5213bee3f03de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Pcp_CompressedSdSite</type>
        <definition>Pcp_CompressedSdSite GetCompressedSdSite</definition>
        <argsstring>(size_t layerIndex) const</argsstring>
        <name>GetCompressedSdSite</name>
        <param>
          <type>size_t</type>
          <declname>layerIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="304" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="304" bodyend="307"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_pcp_node_ref_1ac1aa93b32e423f3f578f3ada5b7b30e8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PcpNodeRef</definition>
        <argsstring>(PcpPrimIndex_Graph *graph, size_t idx)</argsstring>
        <name>PcpNodeRef</name>
        <param>
          <type>PcpPrimIndex_Graph *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="318" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="318" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1a76f216f781b2626160797e582ffa21d1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetNodeIndex</definition>
        <argsstring>() const</argsstring>
        <name>_GetNodeIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="322" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1ac44bb061d2878317ae9dd55b3354aa2b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetParentIndex</definition>
        <argsstring>() const</argsstring>
        <name>_GetParentIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_pcp_node_ref_1aeecc2a30abc0672384bda2cf9d636041" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t _GetOriginIndex</definition>
        <argsstring>() const</argsstring>
        <name>_GetOriginIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pxr/usd/pcp/node.h" line="325" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PcpNode represents a node in an expression tree for compositing scene description. </para>
    </briefdescription>
    <detaileddescription>
<para>A node represents the opinions from a particular site. In addition, it may have child nodes, representing nested expressions that are composited over/under this node.</para>
<para>Child nodes are stored and composited in strength order.</para>
<para>Each node holds information about the arc to its parent. This captures both the relative strength of the sub-expression as well as any value-mapping needed, such as to rename opinions from a model to use in a particular instance. </para>
    </detaileddescription>
    <location file="pxr/usd/pcp/node.h" line="64" column="1" bodyfile="pxr/usd/pcp/node.h" bodystart="63" bodyend="330"/>
    <listofallmembers>
      <member refid="class_pcp_node_ref_1a76f216f781b2626160797e582ffa21d1" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>_GetNodeIndex</name></member>
      <member refid="class_pcp_node_ref_1aeecc2a30abc0672384bda2cf9d636041" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>_GetOriginIndex</name></member>
      <member refid="class_pcp_node_ref_1ac44bb061d2878317ae9dd55b3354aa2b" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>_GetParentIndex</name></member>
      <member refid="class_pcp_node_ref_1ad33091d1fcf9bd7d0b5bb577f7069672" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>_graph</name></member>
      <member refid="class_pcp_node_ref_1af8b8545a114c08473765097ba1b3d4ba" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>_nodeIdx</name></member>
      <member refid="class_pcp_node_ref_1a12fd18fb915b114a80afe9c56a74ab7e" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>CanContributeSpecs</name></member>
      <member refid="class_pcp_node_ref_1a59a5abd4f579135a8ac9e74825146f04" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>child_const_iterator</name></member>
      <member refid="class_pcp_node_ref_1a41c2e451f4f5f597449724bc5bd61494" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>child_const_range</name></member>
      <member refid="class_pcp_node_ref_1a7ef3e9998b84d4951db0ffa4ed141d05" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>child_const_reverse_iterator</name></member>
      <member refid="class_pcp_node_ref_1a4702d5680b202441902d58d7014b1209" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetArcType</name></member>
      <member refid="class_pcp_node_ref_1aebe709529c86e9e67640970d4bc705d4" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetChildrenRange</name></member>
      <member refid="class_pcp_node_ref_1abb99ed5b9fc4130b92f5213bee3f03de" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetCompressedSdSite</name></member>
      <member refid="class_pcp_node_ref_1ae86b184dc2470b35d13db7ccea3a7d01" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetDepthBelowIntroduction</name></member>
      <member refid="class_pcp_node_ref_1a2e7a57aa98d08f0ee80850b321ef44a6" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetIntroPath</name></member>
      <member refid="class_pcp_node_ref_1a0de2d0307c7d17df720d5e7651a0119c" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetLayerStack</name></member>
      <member refid="class_pcp_node_ref_1aaef98156d80b3156252eaeeaf158120b" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetMapToParent</name></member>
      <member refid="class_pcp_node_ref_1a181ef5054ffea4fea53b0597bcdf06cd" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetMapToRoot</name></member>
      <member refid="class_pcp_node_ref_1ad8daf6a2b8f161ac9c958a141524f60a" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetNamespaceDepth</name></member>
      <member refid="class_pcp_node_ref_1a59a0fcf375acabb93c5638c40046722b" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetOriginNode</name></member>
      <member refid="class_pcp_node_ref_1a8c12a0a275118b95aa0099e9c3a16ff5" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetOriginRootNode</name></member>
      <member refid="class_pcp_node_ref_1a158ff50d88c428744556fc7f066ed529" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetOwningGraph</name></member>
      <member refid="class_pcp_node_ref_1a82f11ba5c67cb945c4ef8af863e8aaff" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetParentNode</name></member>
      <member refid="class_pcp_node_ref_1a36e57a6bd937d8527230be84579da695" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetPath</name></member>
      <member refid="class_pcp_node_ref_1a1663efe41433dcdac4283c3148135926" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetPathAtIntroduction</name></member>
      <member refid="class_pcp_node_ref_1a31db2d90d43183f05a8e7b46cb4194be" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetPermission</name></member>
      <member refid="class_pcp_node_ref_1a2cc548787f6de2f3340d7d0b2d0dcd3d" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetRootNode</name></member>
      <member refid="class_pcp_node_ref_1ab1cc8c44b8293ce30d1e54afca0cd21f" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetSiblingNumAtOrigin</name></member>
      <member refid="class_pcp_node_ref_1a69247a8505a7397117a532e76487fb19" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetSite</name></member>
      <member refid="class_pcp_node_ref_1a2be47ccce8a8d39fb64af9ad5b0a1a05" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>GetUniqueIdentifier</name></member>
      <member refid="class_pcp_node_ref_1a9f7f20453dbe22c650ab9d89bb41015f" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>HasSpecs</name></member>
      <member refid="class_pcp_node_ref_1a32e89f4c644db980233c490063174800" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>HasSymmetry</name></member>
      <member refid="class_pcp_node_ref_1ad39f67f3c1db1174cf74ad0ab0a57660" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>InsertChild</name></member>
      <member refid="class_pcp_node_ref_1a6a65634546c0119e939c0e79357a5d38" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>InsertChildSubgraph</name></member>
      <member refid="class_pcp_node_ref_1abd7f9d0825f037264dfaed48469318dd" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>IsCulled</name></member>
      <member refid="class_pcp_node_ref_1ae1555e51e749288e3d3e140d23833d10" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>IsDueToAncestor</name></member>
      <member refid="class_pcp_node_ref_1a1de7ca229382a52ace42ccf6ec3badb0" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>IsInert</name></member>
      <member refid="class_pcp_node_ref_1a08ce22d2ad73bf6f50b84d3e8b365129" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>IsRestricted</name></member>
      <member refid="class_pcp_node_ref_1a89d36d6d68048cfdfac2277f19888bae" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>IsRootNode</name></member>
      <member refid="class_pcp_node_ref_1a10c79bb09aeb8efbd9b01ee1fbde0061" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator UnspecifiedBoolType</name></member>
      <member refid="class_pcp_node_ref_1afe02aef27cca15a3603078b5b1183211" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator!=</name></member>
      <member refid="class_pcp_node_ref_1adbbf4f6d2d942228911c42fc7a24b45b" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator&lt;</name></member>
      <member refid="class_pcp_node_ref_1a6c6a3384a754bc75da4f712a33cb9be9" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator&lt;=</name></member>
      <member refid="class_pcp_node_ref_1a1f46595a73a32a39ead741e36769b316" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator==</name></member>
      <member refid="class_pcp_node_ref_1a3e7939a65039f82c31b2a6387dbd083d" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator&gt;</name></member>
      <member refid="class_pcp_node_ref_1ad9e9ec2ac24f1c686d0b7d1a585d3f96" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>operator&gt;=</name></member>
      <member refid="class_pcp_node_ref_1afe92ecdd764e48572cbbd96841ad5157" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>PcpNodeIterator</name></member>
      <member refid="class_pcp_node_ref_1aecaf7f7c2dbdd974cc7eb48b6ca887f8" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>PcpNodeRef</name></member>
      <member refid="class_pcp_node_ref_1ac1aa93b32e423f3f578f3ada5b7b30e8" prot="private" virt="non-virtual"><scope>PcpNodeRef</scope><name>PcpNodeRef</name></member>
      <member refid="class_pcp_node_ref_1af83350cb1544d88686a812458dcd6d75" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetCulled</name></member>
      <member refid="class_pcp_node_ref_1abcf00a76844601e8c5f4d6f83f91fb3e" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetHasSpecs</name></member>
      <member refid="class_pcp_node_ref_1a4627b9a342f4c8cf4f72a214c7803cd2" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetHasSymmetry</name></member>
      <member refid="class_pcp_node_ref_1ae659dea2f858df88a59e73aa80b09696" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetInert</name></member>
      <member refid="class_pcp_node_ref_1a3751ee113ae633c60c857813ae972958" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetIsDueToAncestor</name></member>
      <member refid="class_pcp_node_ref_1a324f0993009231233b7c9ce901b6dbe7" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetPermission</name></member>
      <member refid="class_pcp_node_ref_1a0ae9d2ebceb90f51853457c2fd77ad93" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>SetRestricted</name></member>
      <member refid="class_pcp_node_ref_1a2e4f8df8378c4a8cf25100a029d4e918" prot="public" virt="non-virtual"><scope>PcpNodeRef</scope><name>UnspecifiedBoolType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
